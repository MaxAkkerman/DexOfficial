module.exports = {
	LimitOrderRouterContract: {
		abi: {
			"ABI version": 2,
			header: ["pubkey", "time", "expire"],
			functions: [
				{
					name: "constructor",
					inputs: [{name: "rootArr", type: "address[]"}],
					outputs: [],
				},
				{
					name: "deployEmptyWalletFor",
					inputs: [{name: "root", type: "address"}],
					outputs: [],
				},
				{
					name: "getDetailsCallback",
					inputs: [
						{
							components: [
								{name: "name", type: "bytes"},
								{name: "symbol", type: "bytes"},
								{name: "decimals", type: "uint8"},
								{name: "root_public_key", type: "uint256"},
								{name: "root_owner_address", type: "address"},
								{name: "total_supply", type: "uint128"},
							],
							name: "rootTokenDetails",
							type: "tuple",
						},
					],
					outputs: [],
				},
				{
					name: "applyOrder",
					inputs: [
						{name: "result", type: "bool"},
						{name: "idCallback", type: "uint256"},
						{name: "amount", type: "uint128"},
						{name: "walletOwnerRoot", type: "address"},
						{name: "walletOwnerTo", type: "address"},
					],
					outputs: [],
				},
				{
					name: "cancelOrder",
					inputs: [
						{name: "addrData", type: "address"},
						{name: "amount", type: "uint128"},
						{name: "addrOwner", type: "address"},
						{name: "walletOwnerRoot", type: "address"},
						{name: "walletOwnerFrom", type: "address"},
					],
					outputs: [],
				},
				{
					name: "notifyWalletDeployed",
					inputs: [{name: "root", type: "address"}],
					outputs: [],
				},
				{
					name: "expectedWalletAddressCallback",
					inputs: [
						{name: "wallet", type: "address"},
						{name: "wallet_public_key", type: "uint256"},
						{name: "owner_address", type: "address"},
					],
					outputs: [],
				},
				{
					name: "tokensReceivedCallback",
					inputs: [
						{name: "token_wallet", type: "address"},
						{name: "token_root", type: "address"},
						{name: "amount", type: "uint128"},
						{name: "sender_public_key", type: "uint256"},
						{name: "sender_address", type: "address"},
						{name: "sender_wallet", type: "address"},
						{name: "original_gas_to", type: "address"},
						{name: "updated_balance", type: "uint128"},
						{name: "payload", type: "cell"},
					],
					outputs: [],
				},
				{
					name: "getCallback",
					inputs: [{name: "id", type: "uint256"}],
					outputs: [
						{name: "token_wallet", type: "address"},
						{name: "token_root", type: "address"},
						{name: "amount", type: "uint128"},
						{name: "sender_public_key", type: "uint256"},
						{name: "sender_address", type: "address"},
						{name: "sender_wallet", type: "address"},
						{name: "original_gas_to", type: "address"},
						{name: "updated_balance", type: "uint128"},
						{name: "payload_arg0", type: "uint8"},
						{name: "payload_arg1", type: "address"},
						{name: "payload_arg2", type: "address"},
						{name: "payload_arg3", type: "uint128"},
						{name: "payload_arg4", type: "uint128"},
					],
				},
				{
					name: "getBalance",
					inputs: [{name: "_answer_id", type: "uint32"}],
					outputs: [{name: "value0", type: "uint128"}],
				},
				{
					name: "rootLimitOrder",
					inputs: [],
					outputs: [{name: "rootLimitOrder", type: "address"}],
				},
				{
					name: "tokenDecimalsFor",
					inputs: [],
					outputs: [{name: "tokenDecimalsFor", type: "map(address,uint8)"}],
				},
				{
					name: "walletFor",
					inputs: [],
					outputs: [{name: "walletFor", type: "map(address,address)"}],
				},
				{
					name: "balanceFor",
					inputs: [],
					outputs: [{name: "balanceFor", type: "map(address,uint128)"}],
				},
				{
					name: "counterCallback",
					inputs: [],
					outputs: [{name: "counterCallback", type: "uint256"}],
				},
				{
					name: "callbacks",
					inputs: [],
					outputs: [
						{
							components: [
								{name: "token_wallet", type: "address"},
								{name: "token_root", type: "address"},
								{name: "amount", type: "uint128"},
								{name: "sender_public_key", type: "uint256"},
								{name: "sender_address", type: "address"},
								{name: "sender_wallet", type: "address"},
								{name: "original_gas_to", type: "address"},
								{name: "updated_balance", type: "uint128"},
								{name: "payload_arg0", type: "uint8"},
								{name: "payload_arg1", type: "address"},
								{name: "payload_arg2", type: "address"},
								{name: "payload_arg3", type: "uint128"},
								{name: "payload_arg4", type: "uint128"},
							],
							name: "callbacks",
							type: "map(uint256,tuple)",
						},
					],
				},
				{
					name: "exchangeCallbacks",
					inputs: [],
					outputs: [
						{
							components: [
								{name: "token_wallet", type: "address"},
								{name: "token_root", type: "address"},
								{name: "amount", type: "uint128"},
								{name: "sender_public_key", type: "uint256"},
								{name: "sender_address", type: "address"},
								{name: "sender_wallet", type: "address"},
								{name: "original_gas_to", type: "address"},
								{name: "updated_balance", type: "uint128"},
								{name: "payload_arg0", type: "uint8"},
								{name: "payload_arg1", type: "address"},
								{name: "payload_arg2", type: "address"},
								{name: "payload_arg3", type: "uint128"},
								{name: "payload_arg4", type: "uint128"},
							],
							name: "exchangeCallbacks",
							type: "map(uint256,tuple)",
						},
					],
				},
			],
			data: [{key: 1, name: "rootLimitOrder", type: "address"}],
			events: [],
		},
		tvc: "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",
		code: "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",
	},
};

module.exports = {
	LimitOrderRouterContract: {
		abi: {
			"ABI version": 2,
			version: "2.2",
			header: ["pubkey", "time", "expire"],
			functions: [
				{
					name: "constructor",
					inputs: [{name: "rootArr", type: "address[]"}],
					outputs: [],
				},
				{
					name: "deployEmptyWalletFor",
					inputs: [{name: "root", type: "address"}],
					outputs: [],
				},
				{
					name: "getDetailsCallback",
					inputs: [
						{
							components: [
								{name: "name", type: "bytes"},
								{name: "symbol", type: "bytes"},
								{name: "decimals", type: "uint8"},
								{name: "root_public_key", type: "uint256"},
								{name: "root_owner_address", type: "address"},
								{name: "total_supply", type: "uint128"},
							],
							name: "rootTokenDetails",
							type: "tuple",
						},
					],
					outputs: [],
				},
				{
					name: "applyOrder",
					inputs: [
						{name: "result", type: "bool"},
						{name: "idCallback", type: "uint128"},
						{name: "amount", type: "uint128"},
						{name: "walletOwnerRoot", type: "address"},
						{name: "walletOwnerTo", type: "address"},
					],
					outputs: [],
				},
				{
					name: "cancelOrder",
					inputs: [
						{name: "addrData", type: "address"},
						{name: "amount", type: "uint128"},
						{name: "addrOwner", type: "address"},
						{name: "walletOwnerRoot", type: "address"},
						{name: "walletOwnerFrom", type: "address"},
					],
					outputs: [],
				},
				{
					name: "notifyWalletDeployed",
					inputs: [{name: "root", type: "address"}],
					outputs: [],
				},
				{
					name: "expectedWalletAddressCallback",
					inputs: [
						{name: "wallet", type: "address"},
						{name: "wallet_public_key", type: "uint256"},
						{name: "owner_address", type: "address"},
					],
					outputs: [],
				},
				{
					name: "tokensReceivedCallback",
					inputs: [
						{name: "token_wallet", type: "address"},
						{name: "token_root", type: "address"},
						{name: "amount", type: "uint128"},
						{name: "sender_public_key", type: "uint256"},
						{name: "sender_address", type: "address"},
						{name: "sender_wallet", type: "address"},
						{name: "original_gas_to", type: "address"},
						{name: "updated_balance", type: "uint128"},
						{name: "payload", type: "cell"},
					],
					outputs: [],
				},
				{
					name: "getCallback",
					inputs: [{name: "id", type: "uint256"}],
					outputs: [
						{name: "token_wallet", type: "address"},
						{name: "token_root", type: "address"},
						{name: "amount", type: "uint128"},
						{name: "sender_public_key", type: "uint256"},
						{name: "sender_address", type: "address"},
						{name: "sender_wallet", type: "address"},
						{name: "original_gas_to", type: "address"},
						{name: "updated_balance", type: "uint128"},
						{name: "payload_arg0", type: "uint8"},
						{name: "payload_arg1", type: "address"},
						{name: "payload_arg2", type: "address"},
						{name: "payload_arg3", type: "uint128"},
						{name: "payload_arg4", type: "uint128"},
					],
				},
				{
					name: "getBalance",
					inputs: [{name: "answerId", type: "uint32"}],
					outputs: [{name: "value0", type: "uint128"}],
				},
				{
					name: "rootLimitOrder",
					inputs: [],
					outputs: [{name: "rootLimitOrder", type: "address"}],
				},
				{
					name: "tokenDecimalsFor",
					inputs: [],
					outputs: [{name: "tokenDecimalsFor", type: "map(address,uint8)"}],
				},
				{
					name: "walletFor",
					inputs: [],
					outputs: [{name: "walletFor", type: "map(address,address)"}],
				},
				{
					name: "balanceFor",
					inputs: [],
					outputs: [{name: "balanceFor", type: "map(address,uint128)"}],
				},
				{
					name: "counterCallback",
					inputs: [],
					outputs: [{name: "counterCallback", type: "uint256"}],
				},
				{
					name: "callbacks",
					inputs: [],
					outputs: [
						{
							components: [
								{name: "token_wallet", type: "address"},
								{name: "token_root", type: "address"},
								{name: "amount", type: "uint128"},
								{name: "sender_public_key", type: "uint256"},
								{name: "sender_address", type: "address"},
								{name: "sender_wallet", type: "address"},
								{name: "original_gas_to", type: "address"},
								{name: "updated_balance", type: "uint128"},
								{name: "payload_arg0", type: "uint8"},
								{name: "payload_arg1", type: "address"},
								{name: "payload_arg2", type: "address"},
								{name: "payload_arg3", type: "uint128"},
								{name: "payload_arg4", type: "uint128"},
							],
							name: "callbacks",
							type: "map(uint256,tuple)",
						},
					],
				},
				{
					name: "exchangeCallbacks",
					inputs: [],
					outputs: [
						{
							components: [
								{name: "token_wallet", type: "address"},
								{name: "token_root", type: "address"},
								{name: "amount", type: "uint128"},
								{name: "sender_public_key", type: "uint256"},
								{name: "sender_address", type: "address"},
								{name: "sender_wallet", type: "address"},
								{name: "original_gas_to", type: "address"},
								{name: "updated_balance", type: "uint128"},
								{name: "payload_arg0", type: "uint8"},
								{name: "payload_arg1", type: "address"},
								{name: "payload_arg2", type: "address"},
								{name: "payload_arg3", type: "uint128"},
								{name: "payload_arg4", type: "uint128"},
							],
							name: "exchangeCallbacks",
							type: "map(uint128,tuple)",
						},
					],
				},
			],
			data: [{key: 1, name: "rootLimitOrder", type: "address"}],
			events: [],
			fields: [
				{name: "_pubkey", type: "uint256"},
				{name: "_timestamp", type: "uint64"},
				{name: "_constructorFlag", type: "bool"},
				{name: "rootLimitOrder", type: "address"},
				{name: "tokenDecimalsFor", type: "map(address,uint8)"},
				{name: "walletFor", type: "map(address,address)"},
				{name: "balanceFor", type: "map(address,uint128)"},
				{name: "counterCallback", type: "uint256"},
				{
					components: [
						{name: "token_wallet", type: "address"},
						{name: "token_root", type: "address"},
						{name: "amount", type: "uint128"},
						{name: "sender_public_key", type: "uint256"},
						{name: "sender_address", type: "address"},
						{name: "sender_wallet", type: "address"},
						{name: "original_gas_to", type: "address"},
						{name: "updated_balance", type: "uint128"},
						{name: "payload_arg0", type: "uint8"},
						{name: "payload_arg1", type: "address"},
						{name: "payload_arg2", type: "address"},
						{name: "payload_arg3", type: "uint128"},
						{name: "payload_arg4", type: "uint128"},
					],
					name: "callbacks",
					type: "map(uint256,tuple)",
				},
				{
					components: [
						{name: "token_wallet", type: "address"},
						{name: "token_root", type: "address"},
						{name: "amount", type: "uint128"},
						{name: "sender_public_key", type: "uint256"},
						{name: "sender_address", type: "address"},
						{name: "sender_wallet", type: "address"},
						{name: "original_gas_to", type: "address"},
						{name: "updated_balance", type: "uint128"},
						{name: "payload_arg0", type: "uint8"},
						{name: "payload_arg1", type: "address"},
						{name: "payload_arg2", type: "address"},
						{name: "payload_arg3", type: "uint128"},
						{name: "payload_arg4", type: "uint128"},
					],
					name: "exchangeCallbacks",
					type: "map(uint128,tuple)",
				},
			],
		},
		tvc: "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",
		code: "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",
	},
};

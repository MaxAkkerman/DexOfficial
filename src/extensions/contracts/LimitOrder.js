module.exports = {
  LimitOrderContract: {
    abi: {
      'ABI version': 2,
      version: '2.2',
      header: ['time', 'expire'],
      functions: [
        {
          name: 'constructor',
          inputs: [
            { name: 'codeIndex', type: 'cell' },
            { name: 'addrRouter', type: 'address' },
            { name: 'addrOwner', type: 'address' },
            { name: 'addrPair', type: 'address' },
            { name: 'directionPair', type: 'uint8' },
            { name: 'price', type: 'uint128' },
            { name: 'amount', type: 'uint128' },
            { name: 'walletOwnerRoot', type: 'address' },
            { name: 'walletOwnerFrom', type: 'address' },
            { name: 'walletOwnerTo', type: 'address' },
            { name: 'decimals', type: 'uint8' },
          ],
          outputs: [],
        },
        {
          name: 'applyOrder',
          inputs: [
            { name: 'idCallback', type: 'uint128' },
            { name: 'receivedAmount', type: 'uint128' },
            { name: 'price', type: 'uint128' },
            { name: 'receivedDecimals', type: 'uint8' },
          ],
          outputs: [],
        },
        {
          name: 'applyOrderCallback',
          inputs: [
            { name: 'result', type: 'bool' },
            { name: 'amount', type: 'uint128' },
            { name: 'originalGasTo', type: 'address' },
          ],
          outputs: [],
        },
        {
          name: 'transferOwnership',
          inputs: [
            { name: 'addrNewOwner', type: 'address' },
            { name: 'walletNewOwnerFrom', type: 'address' },
            { name: 'walletNewOwnerTo', type: 'address' },
          ],
          outputs: [],
        },
        {
          name: 'changePrice',
          inputs: [{ name: 'newPrice', type: 'uint128' }],
          outputs: [],
        },
        { name: 'cancelOrder', inputs: [], outputs: [] },
        { name: 'cancelOrderCallback', inputs: [], outputs: [] },
        {
          name: 'convertToDecimal',
          inputs: [
            { name: 'amount', type: 'uint256' },
            { name: 'decimal', type: 'uint8' },
            { name: 'newDecimal', type: 'uint8' },
          ],
          outputs: [{ name: 'value0', type: 'uint256' }],
        },
        {
          name: 'divide',
          inputs: [
            { name: 'x', type: 'uint256' },
            { name: 'y', type: 'uint256' },
          ],
          outputs: [
            { name: 'value0', type: 'bool' },
            { name: 'value1', type: 'uint256' },
          ],
        },
        {
          name: 'getInfo',
          inputs: [],
          outputs: [
            { name: 'addrRoot', type: 'address' },
            { name: 'addrRouter', type: 'address' },
            { name: 'addrOwner', type: 'address' },
            { name: 'addrPair', type: 'address' },
            { name: 'directionPair', type: 'uint8' },
            { name: 'price', type: 'uint128' },
            { name: 'amount', type: 'uint128' },
            { name: 'walletOwnerRoot', type: 'address' },
            { name: 'walletOwnerFrom', type: 'address' },
            { name: 'walletOwnerTo', type: 'address' },
            { name: 'status', type: 'uint8' },
            { name: 'decimals', type: 'uint8' },
          ],
        },
        {
          name: 'resolveCodeHashIndex',
          inputs: [
            { name: 'addrRoot', type: 'address' },
            { name: 'addrOwner', type: 'address' },
            { name: 'addrPair', type: 'address' },
            { name: 'directionPair', type: 'uint8' },
            { name: 'price', type: 'uint128' },
          ],
          outputs: [{ name: 'codeHashIndex', type: 'uint256' }],
        },
        {
          name: 'resolveIndex',
          inputs: [
            { name: 'addrRoot', type: 'address' },
            { name: 'addrOwner', type: 'address' },
            { name: 'addrPair', type: 'address' },
            { name: 'directionPair', type: 'uint8' },
            { name: 'price', type: 'uint128' },
            { name: 'addrOrder', type: 'address' },
          ],
          outputs: [{ name: 'addrIndex', type: 'address' }],
        },
      ],
      data: [{ key: 1, name: '_id', type: 'uint256' }],
      events: [],
      fields: [
        { name: '_pubkey', type: 'uint256' },
        { name: '_timestamp', type: 'uint64' },
        { name: '_constructorFlag', type: 'bool' },
        { name: '_codeIndex', type: 'cell' },
        { name: '_addrRoot', type: 'address' },
        { name: '_addrRouter', type: 'address' },
        { name: '_addrOwner', type: 'address' },
        { name: '_addrPair', type: 'address' },
        { name: '_directionPair', type: 'uint8' },
        { name: '_price', type: 'uint128' },
        { name: '_amount', type: 'uint128' },
        { name: '_walletOwnerRoot', type: 'address' },
        { name: '_walletOwnerFrom', type: 'address' },
        { name: '_walletOwnerTo', type: 'address' },
        { name: '_status', type: 'uint8' },
        { name: '_decimals', type: 'uint8' },
        { name: '_id', type: 'uint256' },
      ],
    },
    tvc: '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',
    code: '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',
  },
};

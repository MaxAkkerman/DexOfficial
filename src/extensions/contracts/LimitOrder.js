module.exports = {
  LimitOrderContract: {
    abi: {
      'ABI version': 2,
      version: '2.2',
      header: ['time', 'expire'],
      functions: [
        {
          name: 'constructor',
          inputs: [
            { name: 'codeIndex', type: 'cell' },
            { name: 'addrRouter', type: 'address' },
            { name: 'addrOwner', type: 'address' },
            { name: 'addrPair', type: 'address' },
            { name: 'directionPair', type: 'uint8' },
            { name: 'price', type: 'uint128' },
            { name: 'amount', type: 'uint128' },
            { name: 'walletOwnerRoot', type: 'address' },
            { name: 'walletOwnerFrom', type: 'address' },
            { name: 'walletOwnerTo', type: 'address' },
            { name: 'decimals', type: 'uint8' },
          ],
          outputs: [],
        },
        {
          name: 'applyOrder',
          inputs: [
            { name: 'idCallback', type: 'uint128' },
            { name: 'receivedAmount', type: 'uint128' },
            { name: 'price', type: 'uint128' },
            { name: 'receivedDecimals', type: 'uint8' },
          ],
          outputs: [],
        },
        {
          name: 'applyOrderCallback',
          inputs: [
            { name: 'result', type: 'bool' },
            { name: 'amount', type: 'uint128' },
            { name: 'originalGasTo', type: 'address' },
          ],
          outputs: [],
        },
        {
          name: 'transferOwnership',
          inputs: [
            { name: 'addrNewOwner', type: 'address' },
            { name: 'walletNewOwnerFrom', type: 'address' },
            { name: 'walletNewOwnerTo', type: 'address' },
          ],
          outputs: [],
        },
        {
          name: 'changePrice',
          inputs: [{ name: 'newPrice', type: 'uint128' }],
          outputs: [],
        },
        { name: 'cancelOrder', inputs: [], outputs: [] },
        { name: 'cancelOrderCallback', inputs: [], outputs: [] },
        {
          name: 'convertToDecimal',
          inputs: [
            { name: 'amount', type: 'uint256' },
            { name: 'decimal', type: 'uint8' },
            { name: 'newDecimal', type: 'uint8' },
          ],
          outputs: [{ name: 'value0', type: 'uint256' }],
        },
        {
          name: 'divide',
          inputs: [
            { name: 'x', type: 'uint256' },
            { name: 'y', type: 'uint256' },
          ],
          outputs: [
            { name: 'value0', type: 'bool' },
            { name: 'value1', type: 'uint256' },
          ],
        },
        {
          name: 'getInfo',
          inputs: [],
          outputs: [
            { name: 'addrRoot', type: 'address' },
            { name: 'addrRouter', type: 'address' },
            { name: 'addrOwner', type: 'address' },
            { name: 'addrPair', type: 'address' },
            { name: 'directionPair', type: 'uint8' },
            { name: 'price', type: 'uint128' },
            { name: 'amount', type: 'uint128' },
            { name: 'walletOwnerRoot', type: 'address' },
            { name: 'walletOwnerFrom', type: 'address' },
            { name: 'walletOwnerTo', type: 'address' },
            { name: 'status', type: 'uint8' },
            { name: 'decimals', type: 'uint8' },
          ],
        },
        {
          name: 'resolveCodeHashIndex',
          inputs: [
            { name: 'addrRoot', type: 'address' },
            { name: 'addrOwner', type: 'address' },
            { name: 'addrPair', type: 'address' },
            { name: 'directionPair', type: 'uint8' },
            { name: 'price', type: 'uint128' },
          ],
          outputs: [{ name: 'codeHashIndex', type: 'uint256' }],
        },
        {
          name: 'resolveIndex',
          inputs: [
            { name: 'addrRoot', type: 'address' },
            { name: 'addrOwner', type: 'address' },
            { name: 'addrPair', type: 'address' },
            { name: 'directionPair', type: 'uint8' },
            { name: 'price', type: 'uint128' },
            { name: 'addrOrder', type: 'address' },
          ],
          outputs: [{ name: 'addrIndex', type: 'address' }],
        },
      ],
      data: [{ key: 1, name: '_id', type: 'uint256' }],
      events: [],
      fields: [
        { name: '_pubkey', type: 'uint256' },
        { name: '_timestamp', type: 'uint64' },
        { name: '_constructorFlag', type: 'bool' },
        { name: '_codeIndex', type: 'cell' },
        { name: '_addrRoot', type: 'address' },
        { name: '_addrRouter', type: 'address' },
        { name: '_addrOwner', type: 'address' },
        { name: '_addrPair', type: 'address' },
        { name: '_directionPair', type: 'uint8' },
        { name: '_price', type: 'uint128' },
        { name: '_amount', type: 'uint128' },
        { name: '_walletOwnerRoot', type: 'address' },
        { name: '_walletOwnerFrom', type: 'address' },
        { name: '_walletOwnerTo', type: 'address' },
        { name: '_status', type: 'uint8' },
        { name: '_decimals', type: 'uint8' },
        { name: '_id', type: 'uint256' },
      ],
    },
    tvc: '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',
    code: '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',
  },
};

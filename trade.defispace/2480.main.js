/*! For license information please see 2480.main.js.LICENSE.txt */
(self.webpackChunkmy_swap=self.webpackChunkmy_swap||[]).push([[2480],{69912:(t,e,r)=>{"use strict";r.r(e),r.d(e,{bits:()=>i,buffer:()=>c,byte:()=>f,default:()=>g,integer:()=>l,nibble:()=>p,string:()=>d});const n=function(t){for(var e=[],r=0;r<t.length;r++)e[r]=1^t[r];return e},i={and:function(t,e){for(var r=[],n=0;n<t.length;n++)r[n]=t[n]&e[n];return r},circularShiftLeft:function(t,e){var r=[];if(e>t.length)throw new Error("shift amount can’t be larger than bits array length");for(var n=0;n<t.length;n++)r[(t.length+n-e)%t.length]=t[n];return r},circularShiftRight:function(t,e){var r=[];if(e>t.length)throw new Error("shift amount can’t be larger than bits array length");for(var n=0;n<t.length;n++)r[(n+e)%t.length]=t[n];return r},nand:function(t,e){for(var r=[],n=0;n<t.length;n++)r[n]=t[n]&e[n]^1;return r},nor:function(t,e){for(var r=[],n=0;n<t.length;n++)r[n]=1^(t[n]|e[n]);return r},not:n,or:function(t,e){for(var r=[],n=0;n<t.length;n++)r[n]=t[n]|e[n];return r},reduceAnd:function(t){if(t.length<2)throw new RangeError("Not enough bits.");for(var e=t[0],r=1;r<t.length;r++)e&=t[r];return e},reduceNand:function(t){if(t.length<2)throw new RangeError("Not enough bits.");for(var e=t[0],r=1;r<t.length;r++)e=e&t[r]^1;return e},reduceNor:function(t){if(t.length<2)throw new RangeError("Not enough bits.");for(var e=t[0],r=1;r<t.length;r++)e=1^(e|t[r]);return e},reduceOr:function(t){if(t.length<2)throw new RangeError("Not enough bits.");for(var e=t[0],r=1;r<t.length;r++)e|=t[r];return e},reduceXnor:function(t){if(t.length<2)throw new RangeError("Not enough bits.");for(var e=t[0],r=1;r<t.length;r++)e^=1^t[r];return e},reduceXor:function(t){if(t.length<2)throw new RangeError("Not enough bits.");for(var e=t[0],r=1;r<t.length;r++)e^=t[r];return e},toBoolean:function(t){for(var e=[],r=0;r<t.length;r++)e[r]=1===t[r];return e},toString:function(t,e,r){if(void 0===e&&(e=0),void 0===r&&(r=" "),!e)return t.join("");for(var n="",i=0;i<t.length;i++)n+=""+t[i],i%e==e-1&&i!==t.length-1&&(n+=r);return n},xnor:function(t,e){for(var r=[],n=0;n<t.length;n++)r[n]=t[n]^e[n]^1;return r},xor:function(t,e){for(var r=[],n=0;n<t.length;n++)r[n]=t[n]^e[n];return r}},s=function(t){if(!Array.isArray(t)||8!==t.length)throw new RangeError("invalid array length");for(var e=0,r=0;r<8;r++)t[7-r]&&(e|=1<<r);return e},o=function(t){if(t>255||t<0||~~t!==t)throw new RangeError("invalid byte");for(var e=[0,0,0,0,0,0,0,0],r=0;r<8;r++)e[7-r]=t>>r&1;return e},a=function(t,e,r){void 0===e&&(e=0),r||(r=8*t.length-e);var n=Math.floor(e/8),i=Math.floor(r/8)+2,s=[];s.length=8*i;for(var a=0;a<i;a++)if(void 0!==t[n+a]){var u=o(t[n+a]);s[8*a]=u[0],s[8*a+1]=u[1],s[8*a+2]=u[2],s[8*a+3]=u[3],s[8*a+4]=u[4],s[8*a+5]=u[5],s[8*a+6]=u[6],s[8*a+7]=u[7]}var h=e%8;return s.slice(h,h+r)};for(var u=[],h=0;h<32;h++)u[h]=Math.pow(2,h);const c={and:function(t,e,r){void 0===r&&(r=!1);for(var n=r?e.length:t.length,i=Buffer.alloc(n),s=0;s<n;s++){var o=r?s%t.length:s;i[s]=t[o]&e[s]}return i},create:function(t){for(var e=[0,0,0,0,0,0,0,0],r=Buffer.alloc(Math.ceil(t.length/8)),n=0;n<r.length;n++){for(var i=0;i<8;i++)t[8*n+i]?e[i]=t[8*n+i]:e[i]=0;r[n]=s(e)}return r},modify:function(t,e,r){void 0===r&&(r=0);for(var n=Math.floor(r/8),i=Math.ceil((r+e.length)/8),o=t.slice(n,i),u=a(o),h=r%8,c=0;c<e.length;c++)u[h++]=e[c];for(var f=i-n,l=0;l<f;l++)o[l]=s(u.slice(8*l,8*(l+1)))},nand:function(t,e,r){void 0===r&&(r=!1);for(var n=r?e.length:t.length,i=Buffer.alloc(n),s=0;s<n;s++){var o=r?s%t.length:s;i[s]=~(t[o]&e[s])}return i},nor:function(t,e,r){void 0===r&&(r=!1);for(var n=r?e.length:t.length,i=Buffer.alloc(n),s=0;s<n;s++){var o=r?s%t.length:s;i[s]=~(t[o]|e[s])}return i},not:function(t){for(var e=Buffer.alloc(t.length),r=0;r<t.length;r++)e[r]=~t[r];return e},or:function(t,e,r){void 0===r&&(r=!1);for(var n=r?e.length:t.length,i=Buffer.alloc(n),s=0;s<n;s++){var o=r?s%t.length:s;i[s]=t[o]|e[s]}return i},read:a,readInt:function(t,e,r){void 0===e&&(e=0),void 0===r&&(r=8);var i=a(t,e,r);if(0===i[0]){for(var s=0,o=0;o<r;o++)i[o]&&(s+=u[r-o-1]);return s}s=-1;var h=n(i);for(o=0;o<r;o++)h[o]&&(s-=u[r-o-1]);return s},readUInt:function(t,e,r){void 0===e&&(e=0),void 0===r&&(r=8);for(var n=a(t,e,r),i=0,s=0;s<r;s++)i+=n[s]*u[r-s-1];return i},xnor:function(t,e,r){void 0===r&&(r=!1);for(var n=r?e.length:t.length,i=Buffer.alloc(n),s=0;s<n;s++){var o=r?s%t.length:s;i[s]=~(t[o]^e[s])}return i},xor:function(t,e,r){void 0===r&&(r=!1);for(var n=r?e.length:t.length,i=Buffer.alloc(n),s=0;s<n;s++){var o=r?s%t.length:s;i[s]=t[o]^e[s]}return i}},f={read:o,write:s},l={getBit:function(t,e){return t>>e&1},setBit:function(t,e,r){return 1===r?t|1<<e:t&~(1<<e)},toggleBit:function(t,e){return t^1<<e}},p={read:function(t){if(t<16&&t>=0&&Math.floor(t)===t){for(var e=[0,0,0,0],r=0;r<4;r++)e[3-r]=t>>r&1;return e}throw new RangeError("invalid array length")},write:function(t){if(!Array.isArray(t)||4!==t.length)throw new RangeError("invalid array length");for(var e=0,r=0;r<4;r++)t[3-r]&&(e|=1<<r);return e}},d={toBits:function(t){for(var e=[],r=0;r<t.length;r++)"1"===t[r]?e.push(1):"0"===t[r]&&e.push(0);return e}},g={bits:i,buffer:c,byte:f,integer:l,nibble:p,string:d}},66526:(t,e,r)=>{"use strict";var n=r(79742),i=r(80645),s="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.Buffer=u,e.SlowBuffer=function(t){return+t!=t&&(t=0),u.alloc(+t)},e.INSPECT_MAX_BYTES=50;var o=2147483647;function a(t){if(t>o)throw new RangeError('The value "'+t+'" is invalid for option "size"');var e=new Uint8Array(t);return Object.setPrototypeOf(e,u.prototype),e}function u(t,e,r){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return f(t)}return h(t,e,r)}function h(t,e,r){if("string"==typeof t)return function(t,e){if("string"==typeof e&&""!==e||(e="utf8"),!u.isEncoding(e))throw new TypeError("Unknown encoding: "+e);var r=0|g(t,e),n=a(r),i=n.write(t,e);return i!==r&&(n=n.slice(0,i)),n}(t,e);if(ArrayBuffer.isView(t))return function(t){if(H(t,Uint8Array)){var e=new Uint8Array(t);return p(e.buffer,e.byteOffset,e.byteLength)}return l(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(H(t,ArrayBuffer)||t&&H(t.buffer,ArrayBuffer))return p(t,e,r);if("undefined"!=typeof SharedArrayBuffer&&(H(t,SharedArrayBuffer)||t&&H(t.buffer,SharedArrayBuffer)))return p(t,e,r);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');var n=t.valueOf&&t.valueOf();if(null!=n&&n!==t)return u.from(n,e,r);var i=function(t){if(u.isBuffer(t)){var e=0|d(t.length),r=a(e);return 0===r.length||t.copy(r,0,0,e),r}return void 0!==t.length?"number"!=typeof t.length||j(t.length)?a(0):l(t):"Buffer"===t.type&&Array.isArray(t.data)?l(t.data):void 0}(t);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return u.from(t[Symbol.toPrimitive]("string"),e,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function f(t){return c(t),a(t<0?0:0|d(t))}function l(t){for(var e=t.length<0?0:0|d(t.length),r=a(e),n=0;n<e;n+=1)r[n]=255&t[n];return r}function p(t,e,r){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(r||0))throw new RangeError('"length" is outside of buffer bounds');var n;return n=void 0===e&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,e):new Uint8Array(t,e,r),Object.setPrototypeOf(n,u.prototype),n}function d(t){if(t>=o)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o.toString(16)+" bytes");return 0|t}function g(t,e){if(u.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||H(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);var r=t.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;for(var i=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return M(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return F(t).length;default:if(i)return n?-1:M(t).length;e=(""+e).toLowerCase(),i=!0}}function y(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return P(this,e,r);case"utf8":case"utf-8":return T(this,e,r);case"ascii":return R(this,e,r);case"latin1":case"binary":return x(this,e,r);case"base64":return I(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return B(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function w(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function E(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),j(r=+r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=u.from(e,n)),u.isBuffer(e))return 0===e.length?-1:m(t,e,r,n,i);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):m(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function m(t,e,r,n,i){var s,o=1,a=t.length,u=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;o=2,a/=2,u/=2,r/=2}function h(t,e){return 1===o?t[e]:t.readUInt16BE(e*o)}if(i){var c=-1;for(s=r;s<a;s++)if(h(t,s)===h(e,-1===c?0:s-c)){if(-1===c&&(c=s),s-c+1===u)return c*o}else-1!==c&&(s-=s-c),c=-1}else for(r+u>a&&(r=a-u),s=r;s>=0;s--){for(var f=!0,l=0;l<u;l++)if(h(t,s+l)!==h(e,l)){f=!1;break}if(f)return s}return-1}function b(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var s=e.length;n>s/2&&(n=s/2);for(var o=0;o<n;++o){var a=parseInt(e.substr(2*o,2),16);if(j(a))return o;t[r+o]=a}return o}function v(t,e,r,n){return z(M(e,t.length-r),t,r,n)}function _(t,e,r,n){return z(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function S(t,e,r,n){return z(F(e),t,r,n)}function A(t,e,r,n){return z(function(t,e){for(var r,n,i,s=[],o=0;o<t.length&&!((e-=2)<0);++o)n=(r=t.charCodeAt(o))>>8,i=r%256,s.push(i),s.push(n);return s}(e,t.length-r),t,r,n)}function I(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function T(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var s,o,a,u,h=t[i],c=null,f=h>239?4:h>223?3:h>191?2:1;if(i+f<=r)switch(f){case 1:h<128&&(c=h);break;case 2:128==(192&(s=t[i+1]))&&(u=(31&h)<<6|63&s)>127&&(c=u);break;case 3:s=t[i+1],o=t[i+2],128==(192&s)&&128==(192&o)&&(u=(15&h)<<12|(63&s)<<6|63&o)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:s=t[i+1],o=t[i+2],a=t[i+3],128==(192&s)&&128==(192&o)&&128==(192&a)&&(u=(15&h)<<18|(63&s)<<12|(63&o)<<6|63&a)>65535&&u<1114112&&(c=u)}null===c?(c=65533,f=1):c>65535&&(c-=65536,n.push(c>>>10&1023|55296),c=56320|1023&c),n.push(c),i+=f}return function(t){var e=t.length;if(e<=U)return String.fromCharCode.apply(String,t);for(var r="",n=0;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=U));return r}(n)}e.kMaxLength=o,u.TYPED_ARRAY_SUPPORT=function(){try{var t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),u.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(u.prototype,"parent",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.buffer}}),Object.defineProperty(u.prototype,"offset",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.byteOffset}}),u.poolSize=8192,u.from=function(t,e,r){return h(t,e,r)},Object.setPrototypeOf(u.prototype,Uint8Array.prototype),Object.setPrototypeOf(u,Uint8Array),u.alloc=function(t,e,r){return function(t,e,r){return c(t),t<=0?a(t):void 0!==e?"string"==typeof r?a(t).fill(e,r):a(t).fill(e):a(t)}(t,e,r)},u.allocUnsafe=function(t){return f(t)},u.allocUnsafeSlow=function(t){return f(t)},u.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==u.prototype},u.compare=function(t,e){if(H(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),H(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;for(var r=t.length,n=e.length,i=0,s=Math.min(r,n);i<s;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=u.allocUnsafe(e),i=0;for(r=0;r<t.length;++r){var s=t[r];if(H(s,Uint8Array))i+s.length>n.length?u.from(s).copy(n,i):Uint8Array.prototype.set.call(n,s,i);else{if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(n,i)}i+=s.length}return n},u.byteLength=g,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)w(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)w(this,e,e+3),w(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)w(this,e,e+7),w(this,e+1,e+6),w(this,e+2,e+5),w(this,e+3,e+4);return this},u.prototype.toString=function(){var t=this.length;return 0===t?"":0===arguments.length?T(this,0,t):y.apply(this,arguments)},u.prototype.toLocaleString=u.prototype.toString,u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return t=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(t+=" ... "),"<Buffer "+t+">"},s&&(u.prototype[s]=u.prototype.inspect),u.prototype.compare=function(t,e,r,n,i){if(H(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),!u.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(this===t)return 0;for(var s=(i>>>=0)-(n>>>=0),o=(r>>>=0)-(e>>>=0),a=Math.min(s,o),h=this.slice(n,i),c=t.slice(e,r),f=0;f<a;++f)if(h[f]!==c[f]){s=h[f],o=c[f];break}return s<o?-1:o<s?1:0},u.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},u.prototype.indexOf=function(t,e,r){return E(this,t,e,r,!0)},u.prototype.lastIndexOf=function(t,e,r){return E(this,t,e,r,!1)},u.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var s=!1;;)switch(n){case"hex":return b(this,t,e,r);case"utf8":case"utf-8":return v(this,t,e,r);case"ascii":case"latin1":case"binary":return _(this,t,e,r);case"base64":return S(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,e,r);default:if(s)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),s=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var U=4096;function R(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function x(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function P(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var i="",s=e;s<r;++s)i+=$[t[s]];return i}function B(t,e,r){for(var n=t.slice(e,r),i="",s=0;s<n.length-1;s+=2)i+=String.fromCharCode(n[s]+256*n[s+1]);return i}function N(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function L(t,e,r,n,i,s){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<s)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function O(t,e,r,n,i,s){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function k(t,e,r,n,s){return e=+e,r>>>=0,s||O(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function D(t,e,r,n,s){return e=+e,r>>>=0,s||O(t,0,r,8),i.write(t,e,r,n,52,8),r+8}u.prototype.slice=function(t,e){var r=this.length;(t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t);var n=this.subarray(t,e);return Object.setPrototypeOf(n,u.prototype),n},u.prototype.readUintLE=u.prototype.readUIntLE=function(t,e,r){t>>>=0,e>>>=0,r||N(t,e,this.length);for(var n=this[t],i=1,s=0;++s<e&&(i*=256);)n+=this[t+s]*i;return n},u.prototype.readUintBE=u.prototype.readUIntBE=function(t,e,r){t>>>=0,e>>>=0,r||N(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},u.prototype.readUint8=u.prototype.readUInt8=function(t,e){return t>>>=0,e||N(t,1,this.length),this[t]},u.prototype.readUint16LE=u.prototype.readUInt16LE=function(t,e){return t>>>=0,e||N(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUint16BE=u.prototype.readUInt16BE=function(t,e){return t>>>=0,e||N(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUint32LE=u.prototype.readUInt32LE=function(t,e){return t>>>=0,e||N(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUint32BE=u.prototype.readUInt32BE=function(t,e){return t>>>=0,e||N(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,r){t>>>=0,e>>>=0,r||N(t,e,this.length);for(var n=this[t],i=1,s=0;++s<e&&(i*=256);)n+=this[t+s]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*e)),n},u.prototype.readIntBE=function(t,e,r){t>>>=0,e>>>=0,r||N(t,e,this.length);for(var n=e,i=1,s=this[t+--n];n>0&&(i*=256);)s+=this[t+--n]*i;return s>=(i*=128)&&(s-=Math.pow(2,8*e)),s},u.prototype.readInt8=function(t,e){return t>>>=0,e||N(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){t>>>=0,e||N(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(t,e){t>>>=0,e||N(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(t,e){return t>>>=0,e||N(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return t>>>=0,e||N(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return t>>>=0,e||N(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return t>>>=0,e||N(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return t>>>=0,e||N(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return t>>>=0,e||N(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUintLE=u.prototype.writeUIntLE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||L(this,t,e,r,Math.pow(2,8*r)-1,0);var i=1,s=0;for(this[e]=255&t;++s<r&&(i*=256);)this[e+s]=t/i&255;return e+r},u.prototype.writeUintBE=u.prototype.writeUIntBE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||L(this,t,e,r,Math.pow(2,8*r)-1,0);var i=r-1,s=1;for(this[e+i]=255&t;--i>=0&&(s*=256);)this[e+i]=t/s&255;return e+r},u.prototype.writeUint8=u.prototype.writeUInt8=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,1,255,0),this[e]=255&t,e+1},u.prototype.writeUint16LE=u.prototype.writeUInt16LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},u.prototype.writeUint16BE=u.prototype.writeUInt16BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},u.prototype.writeUint32LE=u.prototype.writeUInt32LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},u.prototype.writeUint32BE=u.prototype.writeUInt32BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},u.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e>>>=0,!n){var i=Math.pow(2,8*r-1);L(this,t,e,r,i-1,-i)}var s=0,o=1,a=0;for(this[e]=255&t;++s<r&&(o*=256);)t<0&&0===a&&0!==this[e+s-1]&&(a=1),this[e+s]=(t/o>>0)-a&255;return e+r},u.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e>>>=0,!n){var i=Math.pow(2,8*r-1);L(this,t,e,r,i-1,-i)}var s=r-1,o=1,a=0;for(this[e+s]=255&t;--s>=0&&(o*=256);)t<0&&0===a&&0!==this[e+s+1]&&(a=1),this[e+s]=(t/o>>0)-a&255;return e+r},u.prototype.writeInt8=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},u.prototype.writeInt16BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},u.prototype.writeInt32LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},u.prototype.writeInt32BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},u.prototype.writeFloatLE=function(t,e,r){return k(this,t,e,!0,r)},u.prototype.writeFloatBE=function(t,e,r){return k(this,t,e,!1,r)},u.prototype.writeDoubleLE=function(t,e,r){return D(this,t,e,!0,r)},u.prototype.writeDoubleBE=function(t,e,r){return D(this,t,e,!1,r)},u.prototype.copy=function(t,e,r,n){if(!u.isBuffer(t))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i=n-r;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,r,n):Uint8Array.prototype.set.call(t,this.subarray(r,n),e),i},u.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===t.length){var i=t.charCodeAt(0);("utf8"===n&&i<128||"latin1"===n)&&(t=i)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var s;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(s=e;s<r;++s)this[s]=t;else{var o=u.isBuffer(t)?t:u.from(t,n),a=o.length;if(0===a)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(s=0;s<r-e;++s)this[s+e]=o[s%a]}return this};var C=/[^+/0-9A-Za-z-_]/g;function M(t,e){var r;e=e||1/0;for(var n=t.length,i=null,s=[],o=0;o<n;++o){if((r=t.charCodeAt(o))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&s.push(239,191,189);continue}if(o+1===n){(e-=3)>-1&&s.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&s.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&s.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;s.push(r)}else if(r<2048){if((e-=2)<0)break;s.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;s.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;s.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return s}function F(t){return n.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(C,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function z(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}function H(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function j(t){return t!=t}var $=function(){for(var t="0123456789abcdef",e=new Array(256),r=0;r<16;++r)for(var n=16*r,i=0;i<16;++i)e[n+i]=t[r]+t[i];return e}()},9478:(t,e,r)=>{"use strict";const n=r(44431).BigNumber;e.MT={POS_INT:0,NEG_INT:1,BYTE_STRING:2,UTF8_STRING:3,ARRAY:4,MAP:5,TAG:6,SIMPLE_FLOAT:7},e.TAG={DATE_STRING:0,DATE_EPOCH:1,POS_BIGINT:2,NEG_BIGINT:3,DECIMAL_FRAC:4,BIGFLOAT:5,BASE64URL_EXPECTED:21,BASE64_EXPECTED:22,BASE16_EXPECTED:23,CBOR:24,URI:32,BASE64URL:33,BASE64:34,REGEXP:35,MIME:36},e.NUMBYTES={ZERO:0,ONE:24,TWO:25,FOUR:26,EIGHT:27,INDEFINITE:31},e.SIMPLE={FALSE:20,TRUE:21,NULL:22,UNDEFINED:23},e.SYMS={NULL:Symbol("null"),UNDEFINED:Symbol("undef"),PARENT:Symbol("parent"),BREAK:Symbol("break"),STREAM:Symbol("stream")},e.SHIFT32=Math.pow(2,32),e.SHIFT16=Math.pow(2,16),e.MAX_SAFE_HIGH=2097151,e.NEG_ONE=new n(-1),e.TEN=new n(10),e.TWO=new n(2),e.PARENT={ARRAY:0,OBJECT:1,MAP:2,TAG:3,BYTE_STRING:4,UTF8_STRING:5}},85520:t=>{t.exports=function(t,e,r){"use asm";var n=new t.Uint8Array(r);var i=e.pushInt;var s=e.pushInt32;var o=e.pushInt32Neg;var a=e.pushInt64;var u=e.pushInt64Neg;var h=e.pushFloat;var c=e.pushFloatSingle;var f=e.pushFloatDouble;var l=e.pushTrue;var p=e.pushFalse;var d=e.pushUndefined;var g=e.pushNull;var y=e.pushInfinity;var w=e.pushInfinityNeg;var E=e.pushNaN;var m=e.pushNaNNeg;var b=e.pushArrayStart;var v=e.pushArrayStartFixed;var _=e.pushArrayStartFixed32;var S=e.pushArrayStartFixed64;var A=e.pushObjectStart;var I=e.pushObjectStartFixed;var T=e.pushObjectStartFixed32;var U=e.pushObjectStartFixed64;var R=e.pushByteString;var x=e.pushByteStringStart;var P=e.pushUtf8String;var B=e.pushUtf8StringStart;var N=e.pushSimpleUnassigned;var L=e.pushTagStart;var O=e.pushTagStart4;var k=e.pushTagStart8;var D=e.pushTagUnassigned;var C=e.pushBreak;var M=t.Math.pow;var F=0;var z=0;var H=0;function j(t){t=t|0;F=0;z=t;while((F|0)<(z|0)){H=Xt[n[F]&255](n[F]|0)|0;if((H|0)>0){break}}return H|0}function $(t){t=t|0;if(((F|0)+(t|0)|0)<(z|0)){return 0}return 1}function q(t){t=t|0;return n[t|0]<<8|n[t+1|0]|0}function K(t){t=t|0;return n[t|0]<<24|n[t+1|0]<<16|n[t+2|0]<<8|n[t+3|0]|0}function W(t){t=t|0;i(t|0);F=F+1|0;return 0}function G(t){t=t|0;if($(1)|0){return 1}i(n[F+1|0]|0);F=F+2|0;return 0}function Y(t){t=t|0;if($(2)|0){return 1}i(q(F+1|0)|0);F=F+3|0;return 0}function V(t){t=t|0;if($(4)|0){return 1}s(q(F+1|0)|0,q(F+3|0)|0);F=F+5|0;return 0}function X(t){t=t|0;if($(8)|0){return 1}a(q(F+1|0)|0,q(F+3|0)|0,q(F+5|0)|0,q(F+7|0)|0);F=F+9|0;return 0}function J(t){t=t|0;i(-1-(t-32|0)|0);F=F+1|0;return 0}function Z(t){t=t|0;if($(1)|0){return 1}i(-1-(n[F+1|0]|0)|0);F=F+2|0;return 0}function Q(t){t=t|0;var e=0;if($(2)|0){return 1}e=q(F+1|0)|0;i(-1-(e|0)|0);F=F+3|0;return 0}function tt(t){t=t|0;if($(4)|0){return 1}o(q(F+1|0)|0,q(F+3|0)|0);F=F+5|0;return 0}function et(t){t=t|0;if($(8)|0){return 1}u(q(F+1|0)|0,q(F+3|0)|0,q(F+5|0)|0,q(F+7|0)|0);F=F+9|0;return 0}function rt(t){t=t|0;var e=0;var r=0;var n=0;n=t-64|0;if($(n|0)|0){return 1}e=F+1|0;r=(F+1|0)+(n|0)|0;R(e|0,r|0);F=r|0;return 0}function nt(t){t=t|0;var e=0;var r=0;var i=0;if($(1)|0){return 1}i=n[F+1|0]|0;e=F+2|0;r=(F+2|0)+(i|0)|0;if($(i+1|0)|0){return 1}R(e|0,r|0);F=r|0;return 0}function it(t){t=t|0;var e=0;var r=0;var n=0;if($(2)|0){return 1}n=q(F+1|0)|0;e=F+3|0;r=(F+3|0)+(n|0)|0;if($(n+2|0)|0){return 1}R(e|0,r|0);F=r|0;return 0}function st(t){t=t|0;var e=0;var r=0;var n=0;if($(4)|0){return 1}n=K(F+1|0)|0;e=F+5|0;r=(F+5|0)+(n|0)|0;if($(n+4|0)|0){return 1}R(e|0,r|0);F=r|0;return 0}function ot(t){t=t|0;return 1}function at(t){t=t|0;x();F=F+1|0;return 0}function ut(t){t=t|0;var e=0;var r=0;var n=0;n=t-96|0;if($(n|0)|0){return 1}e=F+1|0;r=(F+1|0)+(n|0)|0;P(e|0,r|0);F=r|0;return 0}function ht(t){t=t|0;var e=0;var r=0;var i=0;if($(1)|0){return 1}i=n[F+1|0]|0;e=F+2|0;r=(F+2|0)+(i|0)|0;if($(i+1|0)|0){return 1}P(e|0,r|0);F=r|0;return 0}function ct(t){t=t|0;var e=0;var r=0;var n=0;if($(2)|0){return 1}n=q(F+1|0)|0;e=F+3|0;r=(F+3|0)+(n|0)|0;if($(n+2|0)|0){return 1}P(e|0,r|0);F=r|0;return 0}function ft(t){t=t|0;var e=0;var r=0;var n=0;if($(4)|0){return 1}n=K(F+1|0)|0;e=F+5|0;r=(F+5|0)+(n|0)|0;if($(n+4|0)|0){return 1}P(e|0,r|0);F=r|0;return 0}function lt(t){t=t|0;return 1}function pt(t){t=t|0;B();F=F+1|0;return 0}function dt(t){t=t|0;v(t-128|0);F=F+1|0;return 0}function gt(t){t=t|0;if($(1)|0){return 1}v(n[F+1|0]|0);F=F+2|0;return 0}function yt(t){t=t|0;if($(2)|0){return 1}v(q(F+1|0)|0);F=F+3|0;return 0}function wt(t){t=t|0;if($(4)|0){return 1}_(q(F+1|0)|0,q(F+3|0)|0);F=F+5|0;return 0}function Et(t){t=t|0;if($(8)|0){return 1}S(q(F+1|0)|0,q(F+3|0)|0,q(F+5|0)|0,q(F+7|0)|0);F=F+9|0;return 0}function mt(t){t=t|0;b();F=F+1|0;return 0}function bt(t){t=t|0;var e=0;e=t-160|0;if($(e|0)|0){return 1}I(e|0);F=F+1|0;return 0}function vt(t){t=t|0;if($(1)|0){return 1}I(n[F+1|0]|0);F=F+2|0;return 0}function _t(t){t=t|0;if($(2)|0){return 1}I(q(F+1|0)|0);F=F+3|0;return 0}function St(t){t=t|0;if($(4)|0){return 1}T(q(F+1|0)|0,q(F+3|0)|0);F=F+5|0;return 0}function At(t){t=t|0;if($(8)|0){return 1}U(q(F+1|0)|0,q(F+3|0)|0,q(F+5|0)|0,q(F+7|0)|0);F=F+9|0;return 0}function It(t){t=t|0;A();F=F+1|0;return 0}function Tt(t){t=t|0;L(t-192|0|0);F=F+1|0;return 0}function Ut(t){t|0;L(t|0);F=F+1|0;return 0}function Rt(t){t|0;L(t|0);F=F+1|0;return 0}function xt(t){t|0;L(t|0);F=F+1|0;return 0}function Pt(t){t|0;L(t|0);F=F+1|0;return 0}function Bt(t){t=t|0;L(t-192|0|0);F=F+1|0;return 0}function Nt(t){t|0;L(t|0);F=F+1|0;return 0}function Lt(t){t|0;L(t|0);F=F+1|0;return 0}function Ot(t){t|0;L(t|0);F=F+1|0;return 0}function kt(t){t=t|0;if($(1)|0){return 1}L(n[F+1|0]|0);F=F+2|0;return 0}function Dt(t){t=t|0;if($(2)|0){return 1}L(q(F+1|0)|0);F=F+3|0;return 0}function Ct(t){t=t|0;if($(4)|0){return 1}O(q(F+1|0)|0,q(F+3|0)|0);F=F+5|0;return 0}function Mt(t){t=t|0;if($(8)|0){return 1}k(q(F+1|0)|0,q(F+3|0)|0,q(F+5|0)|0,q(F+7|0)|0);F=F+9|0;return 0}function Ft(t){t=t|0;N((t|0)-224|0);F=F+1|0;return 0}function zt(t){t=t|0;p();F=F+1|0;return 0}function Ht(t){t=t|0;l();F=F+1|0;return 0}function jt(t){t=t|0;g();F=F+1|0;return 0}function $t(t){t=t|0;d();F=F+1|0;return 0}function qt(t){t=t|0;if($(1)|0){return 1}N(n[F+1|0]|0);F=F+2|0;return 0}function Kt(t){t=t|0;var e=0;var r=0;var i=1.0;var s=0.0;var o=0.0;var a=0.0;if($(2)|0){return 1}e=n[F+1|0]|0;r=n[F+2|0]|0;if((e|0)&0x80){i=-1.0}s=+(((e|0)&0x7C)>>2);o=+(((e|0)&0x03)<<8|r);if(+s==0.0){h(+(+i*+5.9604644775390625e-8*+o))}else if(+s==31.0){if(+i==1.0){if(+o>0.0){E()}else{y()}}else{if(+o>0.0){m()}else{w()}}}else{h(+(+i*M(+2,+(+s-25.0))*+(1024.0+o)))}F=F+3|0;return 0}function Wt(t){t=t|0;if($(4)|0){return 1}c(n[F+1|0]|0,n[F+2|0]|0,n[F+3|0]|0,n[F+4|0]|0);F=F+5|0;return 0}function Gt(t){t=t|0;if($(8)|0){return 1}f(n[F+1|0]|0,n[F+2|0]|0,n[F+3|0]|0,n[F+4|0]|0,n[F+5|0]|0,n[F+6|0]|0,n[F+7|0]|0,n[F+8|0]|0);F=F+9|0;return 0}function Yt(t){t=t|0;return 1}function Vt(t){t=t|0;C();F=F+1|0;return 0}var Xt=[W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,G,Y,V,X,Yt,Yt,Yt,Yt,J,J,J,J,J,J,J,J,J,J,J,J,J,J,J,J,J,J,J,J,J,J,J,J,Z,Q,tt,et,Yt,Yt,Yt,Yt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,nt,it,st,ot,Yt,Yt,Yt,at,ut,ut,ut,ut,ut,ut,ut,ut,ut,ut,ut,ut,ut,ut,ut,ut,ut,ut,ut,ut,ut,ut,ut,ut,ht,ct,ft,lt,Yt,Yt,Yt,pt,dt,dt,dt,dt,dt,dt,dt,dt,dt,dt,dt,dt,dt,dt,dt,dt,dt,dt,dt,dt,dt,dt,dt,dt,gt,yt,wt,Et,Yt,Yt,Yt,mt,bt,bt,bt,bt,bt,bt,bt,bt,bt,bt,bt,bt,bt,bt,bt,bt,bt,bt,bt,bt,bt,bt,bt,bt,vt,_t,St,At,Yt,Yt,Yt,It,Tt,Tt,Tt,Tt,Tt,Tt,Bt,Bt,Bt,Bt,Bt,Bt,Bt,Bt,Bt,Bt,Bt,Bt,Bt,Bt,Bt,Bt,Bt,Bt,kt,Dt,Ct,Mt,Yt,Yt,Yt,Yt,Ft,Ft,Ft,Ft,Ft,Ft,Ft,Ft,Ft,Ft,Ft,Ft,Ft,Ft,Ft,Ft,Ft,Ft,Ft,Ft,zt,Ht,jt,$t,qt,Kt,Wt,Gt,Yt,Yt,Yt,Vt];return{parse:j}}},79988:(t,e,r)=>{"use strict";const{Buffer:n}=r(66526),i=r(80645),s=r(44431).BigNumber,o=r(85520),a=r(11516),u=r(9478),h=r(65649),c=r(90794),{URL:f}=r(17745);class l{constructor(t){!(t=t||{}).size||t.size<65536?t.size=65536:t.size=a.nextPowerOf2(t.size),this._heap=new ArrayBuffer(t.size),this._heap8=new Uint8Array(this._heap),this._buffer=n.from(this._heap),this._reset(),this._knownTags=Object.assign({0:t=>new Date(t),1:t=>new Date(1e3*t),2:t=>a.arrayBufferToBignumber(t),3:t=>u.NEG_ONE.minus(a.arrayBufferToBignumber(t)),4:t=>u.TEN.pow(t[0]).times(t[1]),5:t=>u.TWO.pow(t[0]).times(t[1]),32:t=>new f(t),35:t=>new RegExp(t)},t.tags),this.parser=o(r.g,{log:console.log.bind(console),pushInt:this.pushInt.bind(this),pushInt32:this.pushInt32.bind(this),pushInt32Neg:this.pushInt32Neg.bind(this),pushInt64:this.pushInt64.bind(this),pushInt64Neg:this.pushInt64Neg.bind(this),pushFloat:this.pushFloat.bind(this),pushFloatSingle:this.pushFloatSingle.bind(this),pushFloatDouble:this.pushFloatDouble.bind(this),pushTrue:this.pushTrue.bind(this),pushFalse:this.pushFalse.bind(this),pushUndefined:this.pushUndefined.bind(this),pushNull:this.pushNull.bind(this),pushInfinity:this.pushInfinity.bind(this),pushInfinityNeg:this.pushInfinityNeg.bind(this),pushNaN:this.pushNaN.bind(this),pushNaNNeg:this.pushNaNNeg.bind(this),pushArrayStart:this.pushArrayStart.bind(this),pushArrayStartFixed:this.pushArrayStartFixed.bind(this),pushArrayStartFixed32:this.pushArrayStartFixed32.bind(this),pushArrayStartFixed64:this.pushArrayStartFixed64.bind(this),pushObjectStart:this.pushObjectStart.bind(this),pushObjectStartFixed:this.pushObjectStartFixed.bind(this),pushObjectStartFixed32:this.pushObjectStartFixed32.bind(this),pushObjectStartFixed64:this.pushObjectStartFixed64.bind(this),pushByteString:this.pushByteString.bind(this),pushByteStringStart:this.pushByteStringStart.bind(this),pushUtf8String:this.pushUtf8String.bind(this),pushUtf8StringStart:this.pushUtf8StringStart.bind(this),pushSimpleUnassigned:this.pushSimpleUnassigned.bind(this),pushTagUnassigned:this.pushTagUnassigned.bind(this),pushTagStart:this.pushTagStart.bind(this),pushTagStart4:this.pushTagStart4.bind(this),pushTagStart8:this.pushTagStart8.bind(this),pushBreak:this.pushBreak.bind(this)},this._heap)}get _depth(){return this._parents.length}get _currentParent(){return this._parents[this._depth-1]}get _ref(){return this._currentParent.ref}_closeParent(){var t=this._parents.pop();if(t.length>0)throw new Error(`Missing ${t.length} elements`);switch(t.type){case u.PARENT.TAG:this._push(this.createTag(t.ref[0],t.ref[1]));break;case u.PARENT.BYTE_STRING:this._push(this.createByteString(t.ref,t.length));break;case u.PARENT.UTF8_STRING:this._push(this.createUtf8String(t.ref,t.length));break;case u.PARENT.MAP:if(t.values%2>0)throw new Error("Odd number of elements in the map");this._push(this.createMap(t.ref,t.length));break;case u.PARENT.OBJECT:if(t.values%2>0)throw new Error("Odd number of elements in the map");this._push(this.createObject(t.ref,t.length));break;case u.PARENT.ARRAY:this._push(this.createArray(t.ref,t.length))}this._currentParent&&this._currentParent.type===u.PARENT.TAG&&this._dec()}_dec(){const t=this._currentParent;t.length<0||(t.length--,0===t.length&&this._closeParent())}_push(t,e){const r=this._currentParent;switch(r.values++,r.type){case u.PARENT.ARRAY:case u.PARENT.BYTE_STRING:case u.PARENT.UTF8_STRING:r.length>-1?this._ref[this._ref.length-r.length]=t:this._ref.push(t),this._dec();break;case u.PARENT.OBJECT:null!=r.tmpKey?(this._ref[r.tmpKey]=t,r.tmpKey=null,this._dec()):(r.tmpKey=t,"string"!=typeof r.tmpKey&&(r.type=u.PARENT.MAP,r.ref=a.buildMap(r.ref)));break;case u.PARENT.MAP:null!=r.tmpKey?(this._ref.set(r.tmpKey,t),r.tmpKey=null,this._dec()):r.tmpKey=t;break;case u.PARENT.TAG:this._ref.push(t),e||this._dec();break;default:throw new Error("Unknown parent type")}}_createParent(t,e,r){this._parents[this._depth]={type:e,length:r,ref:t,values:0,tmpKey:null}}_reset(){this._res=[],this._parents=[{type:u.PARENT.ARRAY,length:-1,ref:this._res,values:0,tmpKey:null}]}createTag(t,e){const r=this._knownTags[t];return r?r(e):new c(t,e)}createMap(t,e){return t}createObject(t,e){return t}createArray(t,e){return t}createByteString(t,e){return n.concat(t)}createByteStringFromHeap(t,e){return t===e?n.alloc(0):n.from(this._heap.slice(t,e))}createInt(t){return t}createInt32(t,e){return a.buildInt32(t,e)}createInt64(t,e,r,n){return a.buildInt64(t,e,r,n)}createFloat(t){return t}createFloatSingle(t,e,r,n){return i.read([t,e,r,n],0,!1,23,4)}createFloatDouble(t,e,r,n,s,o,a,u){return i.read([t,e,r,n,s,o,a,u],0,!1,52,8)}createInt32Neg(t,e){return-1-a.buildInt32(t,e)}createInt64Neg(t,e,r,n){const i=a.buildInt32(t,e),o=a.buildInt32(r,n);return i>u.MAX_SAFE_HIGH?u.NEG_ONE.minus(new s(i).times(u.SHIFT32).plus(o)):-1-(i*u.SHIFT32+o)}createTrue(){return!0}createFalse(){return!1}createNull(){return null}createUndefined(){}createInfinity(){return 1/0}createInfinityNeg(){return-1/0}createNaN(){return NaN}createNaNNeg(){return NaN}createUtf8String(t,e){return t.join("")}createUtf8StringFromHeap(t,e){return t===e?"":this._buffer.toString("utf8",t,e)}createSimpleUnassigned(t){return new h(t)}pushInt(t){this._push(this.createInt(t))}pushInt32(t,e){this._push(this.createInt32(t,e))}pushInt64(t,e,r,n){this._push(this.createInt64(t,e,r,n))}pushFloat(t){this._push(this.createFloat(t))}pushFloatSingle(t,e,r,n){this._push(this.createFloatSingle(t,e,r,n))}pushFloatDouble(t,e,r,n,i,s,o,a){this._push(this.createFloatDouble(t,e,r,n,i,s,o,a))}pushInt32Neg(t,e){this._push(this.createInt32Neg(t,e))}pushInt64Neg(t,e,r,n){this._push(this.createInt64Neg(t,e,r,n))}pushTrue(){this._push(this.createTrue())}pushFalse(){this._push(this.createFalse())}pushNull(){this._push(this.createNull())}pushUndefined(){this._push(this.createUndefined())}pushInfinity(){this._push(this.createInfinity())}pushInfinityNeg(){this._push(this.createInfinityNeg())}pushNaN(){this._push(this.createNaN())}pushNaNNeg(){this._push(this.createNaNNeg())}pushArrayStart(){this._createParent([],u.PARENT.ARRAY,-1)}pushArrayStartFixed(t){this._createArrayStartFixed(t)}pushArrayStartFixed32(t,e){const r=a.buildInt32(t,e);this._createArrayStartFixed(r)}pushArrayStartFixed64(t,e,r,n){const i=a.buildInt64(t,e,r,n);this._createArrayStartFixed(i)}pushObjectStart(){this._createObjectStartFixed(-1)}pushObjectStartFixed(t){this._createObjectStartFixed(t)}pushObjectStartFixed32(t,e){const r=a.buildInt32(t,e);this._createObjectStartFixed(r)}pushObjectStartFixed64(t,e,r,n){const i=a.buildInt64(t,e,r,n);this._createObjectStartFixed(i)}pushByteStringStart(){this._parents[this._depth]={type:u.PARENT.BYTE_STRING,length:-1,ref:[],values:0,tmpKey:null}}pushByteString(t,e){this._push(this.createByteStringFromHeap(t,e))}pushUtf8StringStart(){this._parents[this._depth]={type:u.PARENT.UTF8_STRING,length:-1,ref:[],values:0,tmpKey:null}}pushUtf8String(t,e){this._push(this.createUtf8StringFromHeap(t,e))}pushSimpleUnassigned(t){this._push(this.createSimpleUnassigned(t))}pushTagStart(t){this._parents[this._depth]={type:u.PARENT.TAG,length:1,ref:[t]}}pushTagStart4(t,e){this.pushTagStart(a.buildInt32(t,e))}pushTagStart8(t,e,r,n){this.pushTagStart(a.buildInt64(t,e,r,n))}pushTagUnassigned(t){this._push(this.createTag(t))}pushBreak(){if(this._currentParent.length>-1)throw new Error("Unexpected break");this._closeParent()}_createObjectStartFixed(t){0!==t?this._createParent({},u.PARENT.OBJECT,t):this._push(this.createObject({}))}_createArrayStartFixed(t){0!==t?this._createParent(new Array(t),u.PARENT.ARRAY,t):this._push(this.createArray([]))}_decode(t){if(0===t.byteLength)throw new Error("Input too short");this._reset(),this._heap8.set(t);const e=this.parser.parse(t.byteLength);if(this._depth>1){for(;0===this._currentParent.length;)this._closeParent();if(this._depth>1)throw new Error("Undeterminated nesting")}if(e>0)throw new Error("Failed to parse");if(0===this._res.length)throw new Error("No valid result")}decodeFirst(t){return this._decode(t),this._res[0]}decodeAll(t){return this._decode(t),this._res}static decode(t,e){return"string"==typeof t&&(t=n.from(t,e||"hex")),new l({size:t.length}).decodeFirst(t)}static decodeAll(t,e){return"string"==typeof t&&(t=n.from(t,e||"hex")),new l({size:t.length}).decodeAll(t)}}l.decodeFirst=l.decode,t.exports=l},13817:(t,e,r)=>{"use strict";const{Buffer:n}=r(66526),i=r(79988),s=r(11516);class o extends i{createTag(t,e){return`${t}(${e})`}createInt(t){return super.createInt(t).toString()}createInt32(t,e){return super.createInt32(t,e).toString()}createInt64(t,e,r,n){return super.createInt64(t,e,r,n).toString()}createInt32Neg(t,e){return super.createInt32Neg(t,e).toString()}createInt64Neg(t,e,r,n){return super.createInt64Neg(t,e,r,n).toString()}createTrue(){return"true"}createFalse(){return"false"}createFloat(t){const e=super.createFloat(t);return s.isNegativeZero(t)?"-0_1":`${e}_1`}createFloatSingle(t,e,r,n){return`${super.createFloatSingle(t,e,r,n)}_2`}createFloatDouble(t,e,r,n,i,s,o,a){return`${super.createFloatDouble(t,e,r,n,i,s,o,a)}_3`}createByteString(t,e){const r=t.join(", ");return-1===e?`(_ ${r})`:`h'${r}`}createByteStringFromHeap(t,e){return`h'${n.from(super.createByteStringFromHeap(t,e)).toString("hex")}'`}createInfinity(){return"Infinity_1"}createInfinityNeg(){return"-Infinity_1"}createNaN(){return"NaN_1"}createNaNNeg(){return"-NaN_1"}createNull(){return"null"}createUndefined(){return"undefined"}createSimpleUnassigned(t){return`simple(${t})`}createArray(t,e){const r=super.createArray(t,e);return-1===e?`[_ ${r.join(", ")}]`:`[${r.join(", ")}]`}createMap(t,e){const r=super.createMap(t),n=Array.from(r.keys()).reduce(a(r),"");return-1===e?`{_ ${n}}`:`{${n}}`}createObject(t,e){const r=super.createObject(t),n=Object.keys(r).reduce(a(r),"");return-1===e?`{_ ${n}}`:`{${n}}`}createUtf8String(t,e){const r=t.join(", ");return-1===e?`(_ ${r})`:`"${r}"`}createUtf8StringFromHeap(t,e){return`"${n.from(super.createUtf8StringFromHeap(t,e)).toString("utf8")}"`}static diagnose(t,e){return"string"==typeof t&&(t=n.from(t,e||"hex")),(new o).decodeFirst(t)}}function a(t){return(e,r)=>e?`${e}, ${r}: ${t[r]}`:`${r}: ${t[r]}`}t.exports=o},49199:(t,e,r)=>{"use strict";const{Buffer:n}=r(66526),{URL:i}=r(17745),s=r(44431).BigNumber,o=r(11516),a=r(9478),u=a.MT,h=a.NUMBYTES,c=a.SHIFT32,f=a.SYMS,l=a.TAG,p=a.MT.SIMPLE_FLOAT<<5|a.NUMBYTES.TWO,d=a.MT.SIMPLE_FLOAT<<5|a.NUMBYTES.FOUR,g=a.MT.SIMPLE_FLOAT<<5|a.NUMBYTES.EIGHT,y=a.MT.SIMPLE_FLOAT<<5|a.SIMPLE.TRUE,w=a.MT.SIMPLE_FLOAT<<5|a.SIMPLE.FALSE,E=a.MT.SIMPLE_FLOAT<<5|a.SIMPLE.UNDEFINED,m=a.MT.SIMPLE_FLOAT<<5|a.SIMPLE.NULL,b=new s("0x20000000000000"),v=n.from("f97e00","hex"),_=n.from("f9fc00","hex"),S=n.from("f97c00","hex");class A{constructor(t){t=t||{},this.streaming="function"==typeof t.stream,this.onData=t.stream,this.semanticTypes=[[i,this._pushUrl],[s,this._pushBigNumber]];const e=t.genTypes||[],r=e.length;for(let t=0;t<r;t++)this.addSemanticType(e[t][0],e[t][1]);this._reset()}addSemanticType(t,e){const r=this.semanticTypes.length;for(let n=0;n<r;n++)if(this.semanticTypes[n][0]===t){const t=this.semanticTypes[n][1];return this.semanticTypes[n][1]=e,t}return this.semanticTypes.push([t,e]),null}push(t){return!t||(this.result[this.offset]=t,this.resultMethod[this.offset]=0,this.resultLength[this.offset]=t.length,this.offset++,this.streaming&&this.onData(this.finalize()),!0)}pushWrite(t,e,r){return this.result[this.offset]=t,this.resultMethod[this.offset]=e,this.resultLength[this.offset]=r,this.offset++,this.streaming&&this.onData(this.finalize()),!0}_pushUInt8(t){return this.pushWrite(t,1,1)}_pushUInt16BE(t){return this.pushWrite(t,2,2)}_pushUInt32BE(t){return this.pushWrite(t,3,4)}_pushDoubleBE(t){return this.pushWrite(t,4,8)}_pushNaN(){return this.push(v)}_pushInfinity(t){const e=t<0?_:S;return this.push(e)}_pushFloat(t){const e=n.allocUnsafe(2);if(o.writeHalf(e,t)&&o.parseHalf(e)===t)return this._pushUInt8(p)&&this.push(e);const r=n.allocUnsafe(4);return r.writeFloatBE(t,0),r.readFloatBE(0)===t?this._pushUInt8(d)&&this.push(r):this._pushUInt8(g)&&this._pushDoubleBE(t)}_pushInt(t,e,r){const n=e<<5;return t<24?this._pushUInt8(n|t):t<=255?this._pushUInt8(n|h.ONE)&&this._pushUInt8(t):t<=65535?this._pushUInt8(n|h.TWO)&&this._pushUInt16BE(t):t<=4294967295?this._pushUInt8(n|h.FOUR)&&this._pushUInt32BE(t):t<=Number.MAX_SAFE_INTEGER?this._pushUInt8(n|h.EIGHT)&&this._pushUInt32BE(Math.floor(t/c))&&this._pushUInt32BE(t%c):e===u.NEG_INT?this._pushFloat(r):this._pushFloat(t)}_pushIntNum(t){return t<0?this._pushInt(-t-1,u.NEG_INT,t):this._pushInt(t,u.POS_INT)}_pushNumber(t){switch(!1){case t==t:return this._pushNaN(t);case isFinite(t):return this._pushInfinity(t);case t%1!=0:return this._pushIntNum(t);default:return this._pushFloat(t)}}_pushString(t){const e=n.byteLength(t,"utf8");return this._pushInt(e,u.UTF8_STRING)&&this.pushWrite(t,5,e)}_pushBoolean(t){return this._pushUInt8(t?y:w)}_pushUndefined(t){return this._pushUInt8(E)}_pushArray(t,e){const r=e.length;if(!t._pushInt(r,u.ARRAY))return!1;for(let n=0;n<r;n++)if(!t.pushAny(e[n]))return!1;return!0}_pushTag(t){return this._pushInt(t,u.TAG)}_pushDate(t,e){return t._pushTag(l.DATE_EPOCH)&&t.pushAny(Math.round(e/1e3))}_pushBuffer(t,e){return t._pushInt(e.length,u.BYTE_STRING)&&t.push(e)}_pushNoFilter(t,e){return t._pushBuffer(t,e.slice())}_pushRegexp(t,e){return t._pushTag(l.REGEXP)&&t.pushAny(e.source)}_pushSet(t,e){if(!t._pushInt(e.size,u.ARRAY))return!1;for(const r of e)if(!t.pushAny(r))return!1;return!0}_pushUrl(t,e){return t._pushTag(l.URI)&&t.pushAny(e.format())}_pushBigint(t){let e=l.POS_BIGINT;t.isNegative()&&(t=t.negated().minus(1),e=l.NEG_BIGINT);let r=t.toString(16);r.length%2&&(r="0"+r);const i=n.from(r,"hex");return this._pushTag(e)&&this._pushBuffer(this,i)}_pushBigNumber(t,e){if(e.isNaN())return t._pushNaN();if(!e.isFinite())return t._pushInfinity(e.isNegative()?-1/0:1/0);if(e.isInteger())return t._pushBigint(e);if(!t._pushTag(l.DECIMAL_FRAC)||!t._pushInt(2,u.ARRAY))return!1;const r=e.decimalPlaces(),n=e.multipliedBy(new s(10).pow(r));return!!t._pushIntNum(-r)&&(n.abs().isLessThan(b)?t._pushIntNum(n.toNumber()):t._pushBigint(n))}_pushMap(t,e){return!!t._pushInt(e.size,u.MAP)&&this._pushRawMap(e.size,Array.from(e))}_pushObject(t){if(!t)return this._pushUInt8(m);for(var e=this.semanticTypes.length,r=0;r<e;r++)if(t instanceof this.semanticTypes[r][0])return this.semanticTypes[r][1].call(t,this,t);var n=t.encodeCBOR;if("function"==typeof n)return n.call(t,this);var i=Object.keys(t),s=i.length;return!!this._pushInt(s,u.MAP)&&this._pushRawMap(s,i.map((e=>[e,t[e]])))}_pushRawMap(t,e){e=e.map((function(t){return t[0]=A.encode(t[0]),t})).sort(o.keySorter);for(var r=0;r<t;r++){if(!this.push(e[r][0]))return!1;if(!this.pushAny(e[r][1]))return!1}return!0}write(t){return this.pushAny(t)}pushAny(t){switch(function(t){return{}.toString.call(t).slice(8,-1)}(t)){case"Number":return this._pushNumber(t);case"String":return this._pushString(t);case"Boolean":return this._pushBoolean(t);case"Object":return this._pushObject(t);case"Array":return this._pushArray(this,t);case"Uint8Array":return this._pushBuffer(this,n.isBuffer(t)?t:n.from(t));case"Null":return this._pushUInt8(m);case"Undefined":return this._pushUndefined(t);case"Map":return this._pushMap(this,t);case"Set":return this._pushSet(this,t);case"URL":return this._pushUrl(this,t);case"BigNumber":return this._pushBigNumber(this,t);case"Date":return this._pushDate(this,t);case"RegExp":return this._pushRegexp(this,t);case"Symbol":switch(t){case f.NULL:return this._pushObject(null);case f.UNDEFINED:return this._pushUndefined(void 0);default:throw new Error("Unknown symbol: "+t.toString())}default:throw new Error("Unknown type: "+typeof t+", "+(t?t.toString():""))}}finalize(){if(0===this.offset)return null;for(var t=this.result,e=this.resultLength,r=this.resultMethod,i=this.offset,s=0,o=0;o<i;o++)s+=e[o];var a=n.allocUnsafe(s),u=0,h=0;for(o=0;o<i;o++){switch(h=e[o],r[o]){case 0:t[o].copy(a,u);break;case 1:a.writeUInt8(t[o],u,!0);break;case 2:a.writeUInt16BE(t[o],u,!0);break;case 3:a.writeUInt32BE(t[o],u,!0);break;case 4:a.writeDoubleBE(t[o],u,!0);break;case 5:a.write(t[o],u,h,"utf8");break;default:throw new Error("unkown method")}u+=h}var c=a;return this._reset(),c}_reset(){this.result=[],this.resultMethod=[],this.resultLength=[],this.offset=0}static encode(t){const e=new A;if(!e.pushAny(t))throw new Error("Failed to encode input");return e.finalize()}}t.exports=A},77756:(t,e,r)=>{"use strict";e.Diagnose=r(13817),e.Decoder=r(79988),e.Encoder=r(49199),e.Simple=r(65649),e.Tagged=r(90794),e.decodeAll=e.Decoder.decodeAll,e.decodeFirst=e.Decoder.decodeFirst,e.diagnose=e.Diagnose.diagnose,e.encode=e.Encoder.encode,e.decode=e.Decoder.decode,e.leveldb={decode:e.Decoder.decodeAll,encode:e.Encoder.encode,buffer:!0,name:"cbor"}},65649:(t,e,r)=>{"use strict";const n=r(9478),i=n.MT,s=n.SIMPLE,o=n.SYMS;class a{constructor(t){if("number"!=typeof t)throw new Error("Invalid Simple type: "+typeof t);if(t<0||t>255||(0|t)!==t)throw new Error("value must be a small positive integer: "+t);this.value=t}toString(){return"simple("+this.value+")"}inspect(){return"simple("+this.value+")"}encodeCBOR(t){return t._pushInt(this.value,i.SIMPLE_FLOAT)}static isSimple(t){return t instanceof a}static decode(t,e){switch(null==e&&(e=!0),t){case s.FALSE:return!1;case s.TRUE:return!0;case s.NULL:return e?null:o.NULL;case s.UNDEFINED:return e?void 0:o.UNDEFINED;case-1:if(!e)throw new Error("Invalid BREAK");return o.BREAK;default:return new a(t)}}}t.exports=a},90794:t=>{"use strict";class e{constructor(t,e,r){if(this.tag=t,this.value=e,this.err=r,"number"!=typeof this.tag)throw new Error("Invalid tag type ("+typeof this.tag+")");if(this.tag<0||(0|this.tag)!==this.tag)throw new Error("Tag must be a positive integer: "+this.tag)}toString(){return`${this.tag}(${JSON.stringify(this.value)})`}encodeCBOR(t){return t._pushTag(this.tag),t.pushAny(this.value)}convert(t){var r,n;if("function"!=typeof(n=null!=t?t[this.tag]:void 0)&&"function"!=typeof(n=e["_tag"+this.tag]))return this;try{return n.call(e,this.value)}catch(t){return r=t,this.err=r,this}}}t.exports=e},11516:(t,e,r)=>{"use strict";const{Buffer:n}=r(66526),i=r(44431).BigNumber,s=r(9478),o=s.SHIFT32,a=s.SHIFT16;e.parseHalf=function(t){var e,r,n;return n=128&t[0]?-1:1,e=(124&t[0])>>2,r=(3&t[0])<<8|t[1],e?31===e?n*(r?NaN:Infinity):n*Math.pow(2,e-25)*(1024+r):5.960464477539063e-8*n*r},e.arrayBufferToBignumber=function(t){const e=t.byteLength;let r="";for(let i=0;i<e;i++)r+=(n=t[i])<16?"0"+n.toString(16):n.toString(16);var n;return new i(r,16)},e.buildMap=t=>{const e=new Map,r=Object.keys(t),n=r.length;for(let i=0;i<n;i++)e.set(r[i],t[r[i]]);return e},e.buildInt32=(t,e)=>t*a+e,e.buildInt64=(t,r,n,s)=>{const a=e.buildInt32(t,r),u=e.buildInt32(n,s);return a>2097151?new i(a).times(o).plus(u):a*o+u},e.writeHalf=function(t,e){const r=n.allocUnsafe(4);r.writeFloatBE(e,0);const i=r.readUInt32BE(0);if(0!=(8191&i))return!1;var s=i>>16&32768;const o=i>>23&255,a=8388607&i;if(o>=113&&o<=142)s+=(o-112<<10)+(a>>13);else{if(!(o>=103&&o<113))return!1;if(a&(1<<126-o)-1)return!1;s+=a+8388608>>126-o}return t.writeUInt16BE(s,0),!0},e.keySorter=function(t,e){var r=t[0].byteLength,n=e[0].byteLength;return r>n?1:n>r?-1:t[0].compare(e[0])},e.isNegativeZero=t=>0===t&&1/t<0,e.nextPowerOf2=t=>{let e=0;if(t&&!(t&t-1))return t;for(;0!==t;)t>>=1,e+=1;return 1<<e}},53310:(t,e,r)=>{"use strict";var n=r(77191),i=r(89509).Buffer;t.exports=function(t){function e(e){var r=e.slice(0,-4),n=e.slice(-4),i=t(r);if(!(n[0]^i[0]|n[1]^i[1]|n[2]^i[2]|n[3]^i[3]))return r}return{encode:function(e){var r=t(e);return n.encode(i.concat([e,r],e.length+4))},decode:function(t){var r=e(n.decode(t));if(!r)throw new Error("Invalid checksum");return r},decodeUnsafe:function(t){var r=n.decodeUnsafe(t);if(r)return e(r)}}}},58334:(t,e,r)=>{"use strict";var n=r(23482),i=r(53310);t.exports=i((function(t){var e=n("sha256").update(t).digest();return n("sha256").update(e).digest()}))},98767:t=>{function e(t){if(t)return function(t){for(var r in e.prototype)t[r]=e.prototype[r];return t}(t)}t.exports=e,e.prototype.on=e.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},e.prototype.once=function(t,e){function r(){this.off(t,r),e.apply(this,arguments)}return r.fn=e,this.on(t,r),this},e.prototype.off=e.prototype.removeListener=e.prototype.removeAllListeners=e.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var r,n=this._callbacks["$"+t];if(!n)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var i=0;i<n.length;i++)if((r=n[i])===e||r.fn===e){n.splice(i,1);break}return 0===n.length&&delete this._callbacks["$"+t],this},e.prototype.emit=function(t){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),r=this._callbacks["$"+t],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(r){n=0;for(var i=(r=r.slice(0)).length;n<i;++n)r[n].apply(this,e)}return this},e.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},e.prototype.hasListeners=function(t){return!!this.listeners(t).length}},34606:(t,e)=>{var r;r=function(t){t.version="1.2.0";var e=function(){for(var t=0,e=new Array(256),r=0;256!=r;++r)t=1&(t=1&(t=1&(t=1&(t=1&(t=1&(t=1&(t=1&(t=r)?-306674912^t>>>1:t>>>1)?-306674912^t>>>1:t>>>1)?-306674912^t>>>1:t>>>1)?-306674912^t>>>1:t>>>1)?-306674912^t>>>1:t>>>1)?-306674912^t>>>1:t>>>1)?-306674912^t>>>1:t>>>1)?-306674912^t>>>1:t>>>1,e[r]=t;return"undefined"!=typeof Int32Array?new Int32Array(e):e}();t.table=e,t.bstr=function(t,r){for(var n=-1^r,i=t.length-1,s=0;s<i;)n=(n=n>>>8^e[255&(n^t.charCodeAt(s++))])>>>8^e[255&(n^t.charCodeAt(s++))];return s===i&&(n=n>>>8^e[255&(n^t.charCodeAt(s))]),-1^n},t.buf=function(t,r){if(t.length>1e4)return function(t,r){for(var n=-1^r,i=t.length-7,s=0;s<i;)n=(n=(n=(n=(n=(n=(n=(n=n>>>8^e[255&(n^t[s++])])>>>8^e[255&(n^t[s++])])>>>8^e[255&(n^t[s++])])>>>8^e[255&(n^t[s++])])>>>8^e[255&(n^t[s++])])>>>8^e[255&(n^t[s++])])>>>8^e[255&(n^t[s++])])>>>8^e[255&(n^t[s++])];for(;s<i+7;)n=n>>>8^e[255&(n^t[s++])];return-1^n}(t,r);for(var n=-1^r,i=t.length-3,s=0;s<i;)n=(n=(n=(n=n>>>8^e[255&(n^t[s++])])>>>8^e[255&(n^t[s++])])>>>8^e[255&(n^t[s++])])>>>8^e[255&(n^t[s++])];for(;s<i+3;)n=n>>>8^e[255&(n^t[s++])];return-1^n},t.str=function(t,r){for(var n,i,s=-1^r,o=0,a=t.length;o<a;)(n=t.charCodeAt(o++))<128?s=s>>>8^e[255&(s^n)]:n<2048?s=(s=s>>>8^e[255&(s^(192|n>>6&31))])>>>8^e[255&(s^(128|63&n))]:n>=55296&&n<57344?(n=64+(1023&n),i=1023&t.charCodeAt(o++),s=(s=(s=(s=s>>>8^e[255&(s^(240|n>>8&7))])>>>8^e[255&(s^(128|n>>2&63))])>>>8^e[255&(s^(128|i>>6&15|(3&n)<<4))])>>>8^e[255&(s^(128|63&i))]):s=(s=(s=s>>>8^e[255&(s^(224|n>>12&15))])>>>8^e[255&(s^(128|n>>6&63))])>>>8^e[255&(s^(128|63&n))];return-1^s}},"undefined"==typeof DO_NOT_EXPORT_CRC?r(e):r({})},2480:(t,e,r)=>{const n=r(55835),i=r(17187).EventEmitter,s=r(32653),o=r(66614).Transaction,a=r(65982).default,u=r(22751),h="Lattice Hardware";class c extends i{constructor(t={}){super(),this.type=h,this._resetDefaults(),this.deserialize(t)}deserialize(t={}){return t.hdPath&&(this.hdPath=t.hdPath),t.creds&&(this.creds=t.creds),t.accounts&&(this.accounts=t.accounts),t.accountIndices&&(this.accountIndices=t.accountIndices),t.walletUID&&(this.walletUID=t.walletUID),t.name&&(this.appName=t.name),t.appName&&(this.appName=t.appName),t.network&&(this.network=t.network),t.page&&(this.page=t.page),Promise.resolve()}setHdPath(t){this.hdPath=t}serialize(){return Promise.resolve({creds:this.creds,accounts:this.accounts,accountIndices:this.accountIndices,walletUID:this.walletUID,appName:this.appName,name:this.name,network:this.network,page:this.page,hdPath:this.hdPath})}isUnlocked(){return this._hasCreds()&&this._hasSession()}unlock(t=!0){return new Promise(((e,r)=>{this._getCreds().then((t=>(t&&(this.creds.deviceID=t.deviceID,this.creds.password=t.password,this.creds.endpoint=t.endpoint||null),this._initSession()))).then((()=>this._connect(t))).then((()=>e("Unlocked"))).catch((t=>r(new Error(t))))}))}addAccounts(t=1){return new Promise(((e,r)=>-1e3===t?(this.forgetDevice(),e([])):t<=0?r("Number of accounts to add must be a positive number."):void this.unlock().then((()=>this._fetchAddresses(t,this.unlockedAccount))).then((t=>(t.forEach(((t,e)=>{-1===this.accounts.indexOf(t)&&(this.accounts.push(t),this.accountIndices.push(this.unlockedAccount+e))})),e(this.accounts)))).catch((t=>r(new Error(t))))))}getAccounts(){return Promise.resolve(this.accounts?this.accounts.slice():[].slice())}signTransaction(t,e){return new Promise(((r,n)=>{this._unlockAndFindAccount(t).then((t=>{const r={chainId:e.getChainId()||1,nonce:`0x${e.nonce.toString("hex")}`||0,gasPrice:`0x${e.gasPrice.toString("hex")}`,gasLimit:`0x${e.gasLimit.toString("hex")}`,to:`0x${e.to.toString("hex")}`,value:`0x${e.value.toString("hex")}`,data:0===e.data.length?null:`0x${e.data.toString("hex")}`,signerPath:this._getHDPathIndices(t)};return this._signTxData(r)})).then((i=>{if(!(i.sig&&i.sig.v&&i.sig.r&&i.sig.s))return n(new Error("No signature returned."));e.r=Buffer.from(i.sig.r,"hex"),e.s=Buffer.from(i.sig.s,"hex"),e.v=i.sig.v;const s=1!==e.getChainId()&&parseInt(`0x${e.v.toString("hex")}`)>28,h=a.forCustomChain("mainnet",{name:"notMainnet",networkId:e.getChainId(),chainId:e.getChainId()},"byzantium");let c;c=1==s?new o(e,{common:h}):new o(e);const f=u.toChecksumAddress(`0x${c.from.toString("hex")}`),l=u.toChecksumAddress(t);return f!==l?n(new Error(`Unexpected signer. Got ${f}. Expected ${l}`)):r(e)})).catch((t=>n(new Error(t))))}))}signPersonalMessage(t,e){return this.signMessage(t,{payload:e,protocol:"signPersonal"})}signTypedData(t,e,r){if(r.version&&"V4"!==r.version&&"V3"!==r.version)throw new Error(`Only signTypedData V3 and V4 messages (EIP712) are supported. Got version ${r.version}`);return this.signMessage(t,{payload:e,protocol:"eip712"})}signMessage(t,e){return new Promise(((r,n)=>{this._unlockAndFindAccount(t).then((t=>{const{payload:i,protocol:s}=e;if(!i||!s)return n("`payload` and `protocol` fields must be included in the request");const o={currency:"ETH_MSG",data:{protocol:s,payload:i,signerPath:this._getHDPathIndices(t)}};if(!this._hasSession())return n("No SDK session started. Cannot sign transaction.");this.sdkSession.sign(o,((t,e)=>{if(t)return n(new Error(t));if(!e.sig)return n(new Error("No signature returned"));try{let t=e.sig.v.toString("hex");return t.length<2&&(t=`0${t}`),r(`0x${e.sig.r}${e.sig.s}${t}`)}catch(t){return n(new Error("Invalid signature format returned."))}}))}))}))}exportAccount(t){return Promise.reject(Error("exportAccount not supported by this device"))}removeAccount(t){this.forgetDevice()}getFirstPage(){return this.page=0,this._getPage(0)}getNextPage(){return this._getPage(1)}getPreviousPage(){return this._getPage(-1)}setAccountToUnlock(t){this.unlockedAccount=parseInt(t,10)}forgetDevice(){this._resetDefaults()}_unlockAndFindAccount(t){return new Promise(((e,r)=>{this.unlock(!1).then((()=>this.getAccounts())).then((n=>{let i=null;return n.forEach(((e,r)=>{t.toLowerCase()===e.toLowerCase()&&(i=r)})),null===i?r("Signer not present"):e(this.accountIndices[i])})).catch((t=>r(t)))}))}_getHDPathIndices(t=0){const e=this.hdPath.split("/").slice(1),r=[];let n=!1;if(e.forEach((e=>{const i="'"===e[e.length-1];let s=i?2147483648:0;e.indexOf("x")>-1?(s+=t,n=!0):s+=Number(i?e.slice(0,e.length-1):e),r.push(s)})),!1===n&&r.push(t),r.length>5)throw new Error("Only HD paths with up to 5 indices are allowed.");return r}_resetDefaults(){this.accounts=[],this.accountIndices=[],this.isLocked=!0,this.creds={deviceID:null,password:null,endpoint:null},this.walletUID=null,this.sdkSession=null,this.page=0,this.unlockedAccount=0,this.network=null,this.hdPath="m/44'/60'/0'/0/x"}_getCreds(){return new Promise(((t,e)=>{if(this._hasCreds())return t();const r=this.appName?this.appName:"Unknown";let n="https://wallet.gridplus.io";switch(this.network){case"rinkeby":n="https://gridplus-web-wallet-dev.herokuapp.com"}let i=`${n}?keyring=${r}`;this.network&&(i+=`&network=${this.network}`),window.open(i).postMessage("GET_LATTICE_CREDS",n),window.addEventListener("message",(function(r){if(r.origin===n)try{const n=JSON.parse(r.data);return n.deviceID&&n.password?t(n):e(Error("Invalid credentials returned from Lattice."))}catch(t){return e(t)}}),!1)}))}_connect(t){return new Promise(((e,r)=>{this.sdkSession.connect(this.creds.deviceID,(n=>{if(n)return r(n);const i=this.sdkSession.getActiveWallet();if(!i||!i.uid)return r("No active wallet");const s=i.uid.toString("hex");if(s!=this.walletUID){if(!1===t)return r("Wallet has changed! Please reconnect.");this.accounts=[],this.walletUID=s}return e()}))}))}_initSession(){return new Promise(((t,e)=>{if(this._hasSession())return t();try{let e="https://signing.gridpl.us";this.network&&"mainnet"!==this.network&&(e="https://signing.staging-gridpl.us"),this.creds.endpoint&&(e=this.creds.endpoint);const r={name:this.appName,baseUrl:e,crypto:n,timeout:12e4,privKey:this._genSessionKey(),network:this.network};return this.sdkSession=new s.Client(r),t()}catch(t){return e(t)}}))}_fetchAddresses(t=1,e=0,r=[]){return new Promise(((r,n)=>{if(!this._hasSession())return n("No SDK session started. Cannot fetch addresses.");this.__fetchAddresses(t,e,((t,e)=>t?n(t):r(e)))}))}__fetchAddresses(t=1,e=0,r,n=[]){if(0===t)return r(null,n);const i=this._hdPathHasInternalVarIdx(),s={currency:"ETH",startPath:this._getHDPathIndices(e),n:i?1:t,skipCache:!0};this.sdkSession.getAddresses(s,((s,o)=>s?r(`Error fetching addresses: ${s}`):o.length<1?r("No addresses returned"):i?this.__fetchAddresses(t-1,e+1,r,n.concat(o)):r(null,o)))}_signTxData(t){return new Promise(((e,r)=>{if(!this._hasSession())return r("No SDK session started. Cannot sign transaction.");this.sdkSession.sign({currency:"ETH",data:t},((t,n)=>t?r(t):n.tx?e(n):r("No transaction payload returned.")))}))}_getPage(t=0){return new Promise(((e,r)=>{this.page+=t,this.page<0&&(this.page=0);const n=5*this.page;this.unlock().then((()=>this._fetchAddresses(5,n))).then((t=>{const r=[];return t.forEach(((t,e)=>{r.push({address:t,balance:null,index:n+e})})),e(r)})).catch((t=>r(t)))}))}_hasCreds(){return null!==this.creds.deviceID&&null!==this.creds.password&&this.appName}_hasSession(){return this.sdkSession&&this.walletUID}_genSessionKey(){if(this.name&&!this.appName&&(this.appName=this.name),!this._hasCreds())throw new Error("No credentials -- cannot create session key!");const t=Buffer.concat([Buffer.from(this.creds.password),Buffer.from(this.creds.deviceID),Buffer.from(this.appName)]);return n.createHash("sha256").update(t).digest()}_hdPathHasInternalVarIdx(){const t=this.hdPath.split("/").slice(1);for(let e=0;e<t.length-1;e++)if(t[e].indexOf("x")>-1)return!0;return!1}}c.type=h,t.exports=c},33645:(t,e,r)=>{"use strict";r.r(e),r.d(e,{TypedDataUtils:()=>h,buildTypedData:()=>f,domainType:()=>l,encodeTypedDataDigest:()=>c});var n=r(93286),i=r(33777),s=r(38197),o=r(72734),a=r(44242),u=function(){return(u=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},h={encodeDigest:function(t){var e=n.lE("0x1901"),r=h.hashStruct(t,"EIP712Domain",t.domain),o=h.hashStruct(t,t.primaryType,t.message),a=i.P2(["bytes","bytes32","bytes32"],[e,p(r,32),p(o,32)]),u=s.w(a);return n.lE(u)},encodeData:function(t,e,r){var i=t.types,u=i[e];if(!u||0===u.length)throw new Error("TypedDataUtils: "+t.primaryType+" type is not unknown");var c=new o.R,f=[],l=[],d=h.typeHash(t.types,e);f.push("bytes32"),l.push(p(d,32));for(var g=function(e,r,o){if(void 0!==i[r])return["bytes32",n.lE(s.w(h.encodeData(t,r,o)))];if("bytes"===r||"string"===r){var u=void 0;return u="string"===r?a.Y0(o):n.lE(o),["bytes32",n.lE(n.$m(s.w(u),32))]}if(r.lastIndexOf("[")>0){var f=r.slice(0,r.lastIndexOf("["));return u=o.map((function(t){return g(e,f,t)})),["bytes32",n.lE(s.w(n.lE(c.encode(u.map((function(t){return t[0]})),u.map((function(t){return t[1]}))))))]}return[r,o]},y=0,w=u;y<w.length;y++){var E=w[y],m=g(E.name,E.type,r[E.name]),b=m[0],v=m[1];f.push(b),l.push(v)}return n.lE(c.encode(f,l))},hashStruct:function(t,e,r){return n.lE(s.w(h.encodeData(t,e,r)))},typeHash:function(t,e){return n.lE(s.w(a.Y0(h.encodeType(t,e))))},encodeType:function(t,e){var r=t[e];if(!r||0===r.length)throw new Error("TypedDataUtils: "+e+" type is not defined");for(var n=[],i=e+"(",s=0;s<r.length;s++){var o=r[s],a=o.type.indexOf("["),u=a<0?o.type:o.type.slice(0,a);if(t[u]&&t[u].length>0){for(var c=!1,f=0;f<n.length;f++)n[f]===u&&(c=!0);c||n.push(u)}i+=o.type+" "+o.name,s<r.length-1&&(i+=",")}for(i+=")",n.sort(),s=0;s<n.length;s++)i+=h.encodeType(t,n[s]);return i},domainType:function(t){var e=[];return t.name&&e.push({name:"name",type:"string"}),t.version&&e.push({name:"version",type:"string"}),t.chainId&&e.push({name:"chainId",type:"uint256"}),t.verifyingContract&&e.push({name:"verifyingContract",type:"address"}),t.salt&&e.push({name:"salt",type:"bytes32"}),e},buildTypedData:function(t,e,r,n){var i=h.domainType(t);return{domain:t,types:u({EIP712Domain:i},e),primaryType:r,message:n}}},c=function(t){return h.encodeDigest(t)},f=function(t,e,r,n){return h.buildTypedData(t,e,r,n)},l=function(t){return h.domainType(t)},p=function(t,e){return n.lE(n.$m(n.Dv(t),e))}},32653:(t,e,r)=>{const n=r(35362);t.exports={Client:n}},39930:function(t){!function(e){"use strict";function r(t){return parseInt(t)===t}function n(t){if(!r(t.length))return!1;for(var e=0;e<t.length;e++)if(!r(t[e])||t[e]<0||t[e]>255)return!1;return!0}function i(t,e){if(t.buffer&&"Uint8Array"===t.name)return e&&(t=t.slice?t.slice():Array.prototype.slice.call(t)),t;if(Array.isArray(t)){if(!n(t))throw new Error("Array contains invalid value: "+t);return new Uint8Array(t)}if(r(t.length)&&n(t))return new Uint8Array(t);throw new Error("unsupported array-like object")}function s(t){return new Uint8Array(t)}function o(t,e,r,n,i){null==n&&null==i||(t=t.slice?t.slice(n,i):Array.prototype.slice.call(t,n,i)),e.set(t,r)}var a,u={toBytes:function(t){var e=[],r=0;for(t=encodeURI(t);r<t.length;){var n=t.charCodeAt(r++);37===n?(e.push(parseInt(t.substr(r,2),16)),r+=2):e.push(n)}return i(e)},fromBytes:function(t){for(var e=[],r=0;r<t.length;){var n=t[r];n<128?(e.push(String.fromCharCode(n)),r++):n>191&&n<224?(e.push(String.fromCharCode((31&n)<<6|63&t[r+1])),r+=2):(e.push(String.fromCharCode((15&n)<<12|(63&t[r+1])<<6|63&t[r+2])),r+=3)}return e.join("")}},h=(a="0123456789abcdef",{toBytes:function(t){for(var e=[],r=0;r<t.length;r+=2)e.push(parseInt(t.substr(r,2),16));return e},fromBytes:function(t){for(var e=[],r=0;r<t.length;r++){var n=t[r];e.push(a[(240&n)>>4]+a[15&n])}return e.join("")}}),c={16:10,24:12,32:14},f=[1,2,4,8,16,32,64,128,27,54,108,216,171,77,154,47,94,188,99,198,151,53,106,212,179,125,250,239,197,145],l=[99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202,130,201,125,250,89,71,240,173,212,162,175,156,164,114,192,183,253,147,38,54,63,247,204,52,165,229,241,113,216,49,21,4,199,35,195,24,150,5,154,7,18,128,226,235,39,178,117,9,131,44,26,27,110,90,160,82,59,214,179,41,227,47,132,83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207,208,239,170,251,67,77,51,133,69,249,2,127,80,60,159,168,81,163,64,143,146,157,56,245,188,182,218,33,16,255,243,210,205,12,19,236,95,151,68,23,196,167,126,61,100,93,25,115,96,129,79,220,34,42,144,136,70,238,184,20,222,94,11,219,224,50,58,10,73,6,36,92,194,211,172,98,145,149,228,121,231,200,55,109,141,213,78,169,108,86,244,234,101,122,174,8,186,120,37,46,28,166,180,198,232,221,116,31,75,189,139,138,112,62,181,102,72,3,246,14,97,53,87,185,134,193,29,158,225,248,152,17,105,217,142,148,155,30,135,233,206,85,40,223,140,161,137,13,191,230,66,104,65,153,45,15,176,84,187,22],p=[82,9,106,213,48,54,165,56,191,64,163,158,129,243,215,251,124,227,57,130,155,47,255,135,52,142,67,68,196,222,233,203,84,123,148,50,166,194,35,61,238,76,149,11,66,250,195,78,8,46,161,102,40,217,36,178,118,91,162,73,109,139,209,37,114,248,246,100,134,104,152,22,212,164,92,204,93,101,182,146,108,112,72,80,253,237,185,218,94,21,70,87,167,141,157,132,144,216,171,0,140,188,211,10,247,228,88,5,184,179,69,6,208,44,30,143,202,63,15,2,193,175,189,3,1,19,138,107,58,145,17,65,79,103,220,234,151,242,207,206,240,180,230,115,150,172,116,34,231,173,53,133,226,249,55,232,28,117,223,110,71,241,26,113,29,41,197,137,111,183,98,14,170,24,190,27,252,86,62,75,198,210,121,32,154,219,192,254,120,205,90,244,31,221,168,51,136,7,199,49,177,18,16,89,39,128,236,95,96,81,127,169,25,181,74,13,45,229,122,159,147,201,156,239,160,224,59,77,174,42,245,176,200,235,187,60,131,83,153,97,23,43,4,126,186,119,214,38,225,105,20,99,85,33,12,125],d=[3328402341,4168907908,4000806809,4135287693,4294111757,3597364157,3731845041,2445657428,1613770832,33620227,3462883241,1445669757,3892248089,3050821474,1303096294,3967186586,2412431941,528646813,2311702848,4202528135,4026202645,2992200171,2387036105,4226871307,1101901292,3017069671,1604494077,1169141738,597466303,1403299063,3832705686,2613100635,1974974402,3791519004,1033081774,1277568618,1815492186,2118074177,4126668546,2211236943,1748251740,1369810420,3521504564,4193382664,3799085459,2883115123,1647391059,706024767,134480908,2512897874,1176707941,2646852446,806885416,932615841,168101135,798661301,235341577,605164086,461406363,3756188221,3454790438,1311188841,2142417613,3933566367,302582043,495158174,1479289972,874125870,907746093,3698224818,3025820398,1537253627,2756858614,1983593293,3084310113,2108928974,1378429307,3722699582,1580150641,327451799,2790478837,3117535592,0,3253595436,1075847264,3825007647,2041688520,3059440621,3563743934,2378943302,1740553945,1916352843,2487896798,2555137236,2958579944,2244988746,3151024235,3320835882,1336584933,3992714006,2252555205,2588757463,1714631509,293963156,2319795663,3925473552,67240454,4269768577,2689618160,2017213508,631218106,1269344483,2723238387,1571005438,2151694528,93294474,1066570413,563977660,1882732616,4059428100,1673313503,2008463041,2950355573,1109467491,537923632,3858759450,4260623118,3218264685,2177748300,403442708,638784309,3287084079,3193921505,899127202,2286175436,773265209,2479146071,1437050866,4236148354,2050833735,3362022572,3126681063,840505643,3866325909,3227541664,427917720,2655997905,2749160575,1143087718,1412049534,999329963,193497219,2353415882,3354324521,1807268051,672404540,2816401017,3160301282,369822493,2916866934,3688947771,1681011286,1949973070,336202270,2454276571,201721354,1210328172,3093060836,2680341085,3184776046,1135389935,3294782118,965841320,831886756,3554993207,4068047243,3588745010,2345191491,1849112409,3664604599,26054028,2983581028,2622377682,1235855840,3630984372,2891339514,4092916743,3488279077,3395642799,4101667470,1202630377,268961816,1874508501,4034427016,1243948399,1546530418,941366308,1470539505,1941222599,2546386513,3421038627,2715671932,3899946140,1042226977,2521517021,1639824860,227249030,260737669,3765465232,2084453954,1907733956,3429263018,2420656344,100860677,4160157185,470683154,3261161891,1781871967,2924959737,1773779408,394692241,2579611992,974986535,664706745,3655459128,3958962195,731420851,571543859,3530123707,2849626480,126783113,865375399,765172662,1008606754,361203602,3387549984,2278477385,2857719295,1344809080,2782912378,59542671,1503764984,160008576,437062935,1707065306,3622233649,2218934982,3496503480,2185314755,697932208,1512910199,504303377,2075177163,2824099068,1841019862,739644986],g=[2781242211,2230877308,2582542199,2381740923,234877682,3184946027,2984144751,1418839493,1348481072,50462977,2848876391,2102799147,434634494,1656084439,3863849899,2599188086,1167051466,2636087938,1082771913,2281340285,368048890,3954334041,3381544775,201060592,3963727277,1739838676,4250903202,3930435503,3206782108,4149453988,2531553906,1536934080,3262494647,484572669,2923271059,1783375398,1517041206,1098792767,49674231,1334037708,1550332980,4098991525,886171109,150598129,2481090929,1940642008,1398944049,1059722517,201851908,1385547719,1699095331,1587397571,674240536,2704774806,252314885,3039795866,151914247,908333586,2602270848,1038082786,651029483,1766729511,3447698098,2682942837,454166793,2652734339,1951935532,775166490,758520603,3000790638,4004797018,4217086112,4137964114,1299594043,1639438038,3464344499,2068982057,1054729187,1901997871,2534638724,4121318227,1757008337,0,750906861,1614815264,535035132,3363418545,3988151131,3201591914,1183697867,3647454910,1265776953,3734260298,3566750796,3903871064,1250283471,1807470800,717615087,3847203498,384695291,3313910595,3617213773,1432761139,2484176261,3481945413,283769337,100925954,2180939647,4037038160,1148730428,3123027871,3813386408,4087501137,4267549603,3229630528,2315620239,2906624658,3156319645,1215313976,82966005,3747855548,3245848246,1974459098,1665278241,807407632,451280895,251524083,1841287890,1283575245,337120268,891687699,801369324,3787349855,2721421207,3431482436,959321879,1469301956,4065699751,2197585534,1199193405,2898814052,3887750493,724703513,2514908019,2696962144,2551808385,3516813135,2141445340,1715741218,2119445034,2872807568,2198571144,3398190662,700968686,3547052216,1009259540,2041044702,3803995742,487983883,1991105499,1004265696,1449407026,1316239930,504629770,3683797321,168560134,1816667172,3837287516,1570751170,1857934291,4014189740,2797888098,2822345105,2754712981,936633572,2347923833,852879335,1133234376,1500395319,3084545389,2348912013,1689376213,3533459022,3762923945,3034082412,4205598294,133428468,634383082,2949277029,2398386810,3913789102,403703816,3580869306,2297460856,1867130149,1918643758,607656988,4049053350,3346248884,1368901318,600565992,2090982877,2632479860,557719327,3717614411,3697393085,2249034635,2232388234,2430627952,1115438654,3295786421,2865522278,3633334344,84280067,33027830,303828494,2747425121,1600795957,4188952407,3496589753,2434238086,1486471617,658119965,3106381470,953803233,334231800,3005978776,857870609,3151128937,1890179545,2298973838,2805175444,3056442267,574365214,2450884487,550103529,1233637070,4289353045,2018519080,2057691103,2399374476,4166623649,2148108681,387583245,3664101311,836232934,3330556482,3100665960,3280093505,2955516313,2002398509,287182607,3413881008,4238890068,3597515707,975967766],y=[1671808611,2089089148,2006576759,2072901243,4061003762,1807603307,1873927791,3310653893,810573872,16974337,1739181671,729634347,4263110654,3613570519,2883997099,1989864566,3393556426,2191335298,3376449993,2106063485,4195741690,1508618841,1204391495,4027317232,2917941677,3563566036,2734514082,2951366063,2629772188,2767672228,1922491506,3227229120,3082974647,4246528509,2477669779,644500518,911895606,1061256767,4144166391,3427763148,878471220,2784252325,3845444069,4043897329,1905517169,3631459288,827548209,356461077,67897348,3344078279,593839651,3277757891,405286936,2527147926,84871685,2595565466,118033927,305538066,2157648768,3795705826,3945188843,661212711,2999812018,1973414517,152769033,2208177539,745822252,439235610,455947803,1857215598,1525593178,2700827552,1391895634,994932283,3596728278,3016654259,695947817,3812548067,795958831,2224493444,1408607827,3513301457,0,3979133421,543178784,4229948412,2982705585,1542305371,1790891114,3410398667,3201918910,961245753,1256100938,1289001036,1491644504,3477767631,3496721360,4012557807,2867154858,4212583931,1137018435,1305975373,861234739,2241073541,1171229253,4178635257,33948674,2139225727,1357946960,1011120188,2679776671,2833468328,1374921297,2751356323,1086357568,2408187279,2460827538,2646352285,944271416,4110742005,3168756668,3066132406,3665145818,560153121,271589392,4279952895,4077846003,3530407890,3444343245,202643468,322250259,3962553324,1608629855,2543990167,1154254916,389623319,3294073796,2817676711,2122513534,1028094525,1689045092,1575467613,422261273,1939203699,1621147744,2174228865,1339137615,3699352540,577127458,712922154,2427141008,2290289544,1187679302,3995715566,3100863416,339486740,3732514782,1591917662,186455563,3681988059,3762019296,844522546,978220090,169743370,1239126601,101321734,611076132,1558493276,3260915650,3547250131,2901361580,1655096418,2443721105,2510565781,3828863972,2039214713,3878868455,3359869896,928607799,1840765549,2374762893,3580146133,1322425422,2850048425,1823791212,1459268694,4094161908,3928346602,1706019429,2056189050,2934523822,135794696,3134549946,2022240376,628050469,779246638,472135708,2800834470,3032970164,3327236038,3894660072,3715932637,1956440180,522272287,1272813131,3185336765,2340818315,2323976074,1888542832,1044544574,3049550261,1722469478,1222152264,50660867,4127324150,236067854,1638122081,895445557,1475980887,3117443513,2257655686,3243809217,489110045,2662934430,3778599393,4162055160,2561878936,288563729,1773916777,3648039385,2391345038,2493985684,2612407707,505560094,2274497927,3911240169,3460925390,1442818645,678973480,3749357023,2358182796,2717407649,2306869641,219617805,3218761151,3862026214,1120306242,1756942440,1103331905,2578459033,762796589,252780047,2966125488,1425844308,3151392187,372911126],w=[1667474886,2088535288,2004326894,2071694838,4075949567,1802223062,1869591006,3318043793,808472672,16843522,1734846926,724270422,4278065639,3621216949,2880169549,1987484396,3402253711,2189597983,3385409673,2105378810,4210693615,1499065266,1195886990,4042263547,2913856577,3570689971,2728590687,2947541573,2627518243,2762274643,1920112356,3233831835,3082273397,4261223649,2475929149,640051788,909531756,1061110142,4160160501,3435941763,875846760,2779116625,3857003729,4059105529,1903268834,3638064043,825316194,353713962,67374088,3351728789,589522246,3284360861,404236336,2526454071,84217610,2593830191,117901582,303183396,2155911963,3806477791,3958056653,656894286,2998062463,1970642922,151591698,2206440989,741110872,437923380,454765878,1852748508,1515908788,2694904667,1381168804,993742198,3604373943,3014905469,690584402,3823320797,791638366,2223281939,1398011302,3520161977,0,3991743681,538992704,4244381667,2981218425,1532751286,1785380564,3419096717,3200178535,960056178,1246420628,1280103576,1482221744,3486468741,3503319995,4025428677,2863326543,4227536621,1128514950,1296947098,859002214,2240123921,1162203018,4193849577,33687044,2139062782,1347481760,1010582648,2678045221,2829640523,1364325282,2745433693,1077985408,2408548869,2459086143,2644360225,943212656,4126475505,3166494563,3065430391,3671750063,555836226,269496352,4294908645,4092792573,3537006015,3452783745,202118168,320025894,3974901699,1600119230,2543297077,1145359496,387397934,3301201811,2812801621,2122220284,1027426170,1684319432,1566435258,421079858,1936954854,1616945344,2172753945,1330631070,3705438115,572679748,707427924,2425400123,2290647819,1179044492,4008585671,3099120491,336870440,3739122087,1583276732,185277718,3688593069,3772791771,842159716,976899700,168435220,1229577106,101059084,606366792,1549591736,3267517855,3553849021,2897014595,1650632388,2442242105,2509612081,3840161747,2038008818,3890688725,3368567691,926374254,1835907034,2374863873,3587531953,1313788572,2846482505,1819063512,1448540844,4109633523,3941213647,1701162954,2054852340,2930698567,134748176,3132806511,2021165296,623210314,774795868,471606328,2795958615,3031746419,3334885783,3907527627,3722280097,1953799400,522133822,1263263126,3183336545,2341176845,2324333839,1886425312,1044267644,3048588401,1718004428,1212733584,50529542,4143317495,235803164,1633788866,892690282,1465383342,3115962473,2256965911,3250673817,488449850,2661202215,3789633753,4177007595,2560144171,286339874,1768537042,3654906025,2391705863,2492770099,2610673197,505291324,2273808917,3924369609,3469625735,1431699370,673740880,3755965093,2358021891,2711746649,2307489801,218961690,3217021541,3873845719,1111672452,1751693520,1094828930,2576986153,757954394,252645662,2964376443,1414855848,3149649517,370555436],E=[1374988112,2118214995,437757123,975658646,1001089995,530400753,2902087851,1273168787,540080725,2910219766,2295101073,4110568485,1340463100,3307916247,641025152,3043140495,3736164937,632953703,1172967064,1576976609,3274667266,2169303058,2370213795,1809054150,59727847,361929877,3211623147,2505202138,3569255213,1484005843,1239443753,2395588676,1975683434,4102977912,2572697195,666464733,3202437046,4035489047,3374361702,2110667444,1675577880,3843699074,2538681184,1649639237,2976151520,3144396420,4269907996,4178062228,1883793496,2403728665,2497604743,1383856311,2876494627,1917518562,3810496343,1716890410,3001755655,800440835,2261089178,3543599269,807962610,599762354,33778362,3977675356,2328828971,2809771154,4077384432,1315562145,1708848333,101039829,3509871135,3299278474,875451293,2733856160,92987698,2767645557,193195065,1080094634,1584504582,3178106961,1042385657,2531067453,3711829422,1306967366,2438237621,1908694277,67556463,1615861247,429456164,3602770327,2302690252,1742315127,2968011453,126454664,3877198648,2043211483,2709260871,2084704233,4169408201,0,159417987,841739592,504459436,1817866830,4245618683,260388950,1034867998,908933415,168810852,1750902305,2606453969,607530554,202008497,2472011535,3035535058,463180190,2160117071,1641816226,1517767529,470948374,3801332234,3231722213,1008918595,303765277,235474187,4069246893,766945465,337553864,1475418501,2943682380,4003061179,2743034109,4144047775,1551037884,1147550661,1543208500,2336434550,3408119516,3069049960,3102011747,3610369226,1113818384,328671808,2227573024,2236228733,3535486456,2935566865,3341394285,496906059,3702665459,226906860,2009195472,733156972,2842737049,294930682,1206477858,2835123396,2700099354,1451044056,573804783,2269728455,3644379585,2362090238,2564033334,2801107407,2776292904,3669462566,1068351396,742039012,1350078989,1784663195,1417561698,4136440770,2430122216,775550814,2193862645,2673705150,1775276924,1876241833,3475313331,3366754619,270040487,3902563182,3678124923,3441850377,1851332852,3969562369,2203032232,3868552805,2868897406,566021896,4011190502,3135740889,1248802510,3936291284,699432150,832877231,708780849,3332740144,899835584,1951317047,4236429990,3767586992,866637845,4043610186,1106041591,2144161806,395441711,1984812685,1139781709,3433712980,3835036895,2664543715,1282050075,3240894392,1181045119,2640243204,25965917,4203181171,4211818798,3009879386,2463879762,3910161971,1842759443,2597806476,933301370,1509430414,3943906441,3467192302,3076639029,3776767469,2051518780,2631065433,1441952575,404016761,1942435775,1408749034,1610459739,3745345300,2017778566,3400528769,3110650942,941896748,3265478751,371049330,3168937228,675039627,4279080257,967311729,135050206,3635733660,1683407248,2076935265,3576870512,1215061108,3501741890],m=[1347548327,1400783205,3273267108,2520393566,3409685355,4045380933,2880240216,2471224067,1428173050,4138563181,2441661558,636813900,4233094615,3620022987,2149987652,2411029155,1239331162,1730525723,2554718734,3781033664,46346101,310463728,2743944855,3328955385,3875770207,2501218972,3955191162,3667219033,768917123,3545789473,692707433,1150208456,1786102409,2029293177,1805211710,3710368113,3065962831,401639597,1724457132,3028143674,409198410,2196052529,1620529459,1164071807,3769721975,2226875310,486441376,2499348523,1483753576,428819965,2274680428,3075636216,598438867,3799141122,1474502543,711349675,129166120,53458370,2592523643,2782082824,4063242375,2988687269,3120694122,1559041666,730517276,2460449204,4042459122,2706270690,3446004468,3573941694,533804130,2328143614,2637442643,2695033685,839224033,1973745387,957055980,2856345839,106852767,1371368976,4181598602,1033297158,2933734917,1179510461,3046200461,91341917,1862534868,4284502037,605657339,2547432937,3431546947,2003294622,3182487618,2282195339,954669403,3682191598,1201765386,3917234703,3388507166,0,2198438022,1211247597,2887651696,1315723890,4227665663,1443857720,507358933,657861945,1678381017,560487590,3516619604,975451694,2970356327,261314535,3535072918,2652609425,1333838021,2724322336,1767536459,370938394,182621114,3854606378,1128014560,487725847,185469197,2918353863,3106780840,3356761769,2237133081,1286567175,3152976349,4255350624,2683765030,3160175349,3309594171,878443390,1988838185,3704300486,1756818940,1673061617,3403100636,272786309,1075025698,545572369,2105887268,4174560061,296679730,1841768865,1260232239,4091327024,3960309330,3497509347,1814803222,2578018489,4195456072,575138148,3299409036,446754879,3629546796,4011996048,3347532110,3252238545,4270639778,915985419,3483825537,681933534,651868046,2755636671,3828103837,223377554,2607439820,1649704518,3270937875,3901806776,1580087799,4118987695,3198115200,2087309459,2842678573,3016697106,1003007129,2802849917,1860738147,2077965243,164439672,4100872472,32283319,2827177882,1709610350,2125135846,136428751,3874428392,3652904859,3460984630,3572145929,3593056380,2939266226,824852259,818324884,3224740454,930369212,2801566410,2967507152,355706840,1257309336,4148292826,243256656,790073846,2373340630,1296297904,1422699085,3756299780,3818836405,457992840,3099667487,2135319889,77422314,1560382517,1945798516,788204353,1521706781,1385356242,870912086,325965383,2358957921,2050466060,2388260884,2313884476,4006521127,901210569,3990953189,1014646705,1503449823,1062597235,2031621326,3212035895,3931371469,1533017514,350174575,2256028891,2177544179,1052338372,741876788,1606591296,1914052035,213705253,2334669897,1107234197,1899603969,3725069491,2631447780,2422494913,1635502980,1893020342,1950903388,1120974935],b=[2807058932,1699970625,2764249623,1586903591,1808481195,1173430173,1487645946,59984867,4199882800,1844882806,1989249228,1277555970,3623636965,3419915562,1149249077,2744104290,1514790577,459744698,244860394,3235995134,1963115311,4027744588,2544078150,4190530515,1608975247,2627016082,2062270317,1507497298,2200818878,567498868,1764313568,3359936201,2305455554,2037970062,1047239e3,1910319033,1337376481,2904027272,2892417312,984907214,1243112415,830661914,861968209,2135253587,2011214180,2927934315,2686254721,731183368,1750626376,4246310725,1820824798,4172763771,3542330227,48394827,2404901663,2871682645,671593195,3254988725,2073724613,145085239,2280796200,2779915199,1790575107,2187128086,472615631,3029510009,4075877127,3802222185,4107101658,3201631749,1646252340,4270507174,1402811438,1436590835,3778151818,3950355702,3963161475,4020912224,2667994737,273792366,2331590177,104699613,95345982,3175501286,2377486676,1560637892,3564045318,369057872,4213447064,3919042237,1137477952,2658625497,1119727848,2340947849,1530455833,4007360968,172466556,266959938,516552836,0,2256734592,3980931627,1890328081,1917742170,4294704398,945164165,3575528878,958871085,3647212047,2787207260,1423022939,775562294,1739656202,3876557655,2530391278,2443058075,3310321856,547512796,1265195639,437656594,3121275539,719700128,3762502690,387781147,218828297,3350065803,2830708150,2848461854,428169201,122466165,3720081049,1627235199,648017665,4122762354,1002783846,2117360635,695634755,3336358691,4234721005,4049844452,3704280881,2232435299,574624663,287343814,612205898,1039717051,840019705,2708326185,793451934,821288114,1391201670,3822090177,376187827,3113855344,1224348052,1679968233,2361698556,1058709744,752375421,2431590963,1321699145,3519142200,2734591178,188127444,2177869557,3727205754,2384911031,3215212461,2648976442,2450346104,3432737375,1180849278,331544205,3102249176,4150144569,2952102595,2159976285,2474404304,766078933,313773861,2570832044,2108100632,1668212892,3145456443,2013908262,418672217,3070356634,2594734927,1852171925,3867060991,3473416636,3907448597,2614737639,919489135,164948639,2094410160,2997825956,590424639,2486224549,1723872674,3157750862,3399941250,3501252752,3625268135,2555048196,3673637356,1343127501,4130281361,3599595085,2957853679,1297403050,81781910,3051593425,2283490410,532201772,1367295589,3926170974,895287692,1953757831,1093597963,492483431,3528626907,1446242576,1192455638,1636604631,209336225,344873464,1015671571,669961897,3375740769,3857572124,2973530695,3747192018,1933530610,3464042516,935293895,3454686199,2858115069,1863638845,3683022916,4085369519,3292445032,875313188,1080017571,3279033885,621591778,1233856572,2504130317,24197544,3017672716,3835484340,3247465558,2220981195,3060847922,1551124588,1463996600],v=[4104605777,1097159550,396673818,660510266,2875968315,2638606623,4200115116,3808662347,821712160,1986918061,3430322568,38544885,3856137295,718002117,893681702,1654886325,2975484382,3122358053,3926825029,4274053469,796197571,1290801793,1184342925,3556361835,2405426947,2459735317,1836772287,1381620373,3196267988,1948373848,3764988233,3385345166,3263785589,2390325492,1480485785,3111247143,3780097726,2293045232,548169417,3459953789,3746175075,439452389,1362321559,1400849762,1685577905,1806599355,2174754046,137073913,1214797936,1174215055,3731654548,2079897426,1943217067,1258480242,529487843,1437280870,3945269170,3049390895,3313212038,923313619,679998e3,3215307299,57326082,377642221,3474729866,2041877159,133361907,1776460110,3673476453,96392454,878845905,2801699524,777231668,4082475170,2330014213,4142626212,2213296395,1626319424,1906247262,1846563261,562755902,3708173718,1040559837,3871163981,1418573201,3294430577,114585348,1343618912,2566595609,3186202582,1078185097,3651041127,3896688048,2307622919,425408743,3371096953,2081048481,1108339068,2216610296,0,2156299017,736970802,292596766,1517440620,251657213,2235061775,2933202493,758720310,265905162,1554391400,1532285339,908999204,174567692,1474760595,4002861748,2610011675,3234156416,3693126241,2001430874,303699484,2478443234,2687165888,585122620,454499602,151849742,2345119218,3064510765,514443284,4044981591,1963412655,2581445614,2137062819,19308535,1928707164,1715193156,4219352155,1126790795,600235211,3992742070,3841024952,836553431,1669664834,2535604243,3323011204,1243905413,3141400786,4180808110,698445255,2653899549,2989552604,2253581325,3252932727,3004591147,1891211689,2487810577,3915653703,4237083816,4030667424,2100090966,865136418,1229899655,953270745,3399679628,3557504664,4118925222,2061379749,3079546586,2915017791,983426092,2022837584,1607244650,2118541908,2366882550,3635996816,972512814,3283088770,1568718495,3499326569,3576539503,621982671,2895723464,410887952,2623762152,1002142683,645401037,1494807662,2595684844,1335535747,2507040230,4293295786,3167684641,367585007,3885750714,1865862730,2668221674,2960971305,2763173681,1059270954,2777952454,2724642869,1320957812,2194319100,2429595872,2815956275,77089521,3973773121,3444575871,2448830231,1305906550,4021308739,2857194700,2516901860,3518358430,1787304780,740276417,1699839814,1592394909,2352307457,2272556026,188821243,1729977011,3687994002,274084841,3594982253,3613494426,2701949495,4162096729,322734571,2837966542,1640576439,484830689,1202797690,3537852828,4067639125,349075736,3342319475,4157467219,4255800159,1030690015,1155237496,2951971274,1757691577,607398968,2738905026,499347990,3794078908,1011452712,227885567,2818666809,213114376,3034881240,1455525988,3414450555,850817237,1817998408,3092726480],_=[0,235474187,470948374,303765277,941896748,908933415,607530554,708780849,1883793496,2118214995,1817866830,1649639237,1215061108,1181045119,1417561698,1517767529,3767586992,4003061179,4236429990,4069246893,3635733660,3602770327,3299278474,3400528769,2430122216,2664543715,2362090238,2193862645,2835123396,2801107407,3035535058,3135740889,3678124923,3576870512,3341394285,3374361702,3810496343,3977675356,4279080257,4043610186,2876494627,2776292904,3076639029,3110650942,2472011535,2640243204,2403728665,2169303058,1001089995,899835584,666464733,699432150,59727847,226906860,530400753,294930682,1273168787,1172967064,1475418501,1509430414,1942435775,2110667444,1876241833,1641816226,2910219766,2743034109,2976151520,3211623147,2505202138,2606453969,2302690252,2269728455,3711829422,3543599269,3240894392,3475313331,3843699074,3943906441,4178062228,4144047775,1306967366,1139781709,1374988112,1610459739,1975683434,2076935265,1775276924,1742315127,1034867998,866637845,566021896,800440835,92987698,193195065,429456164,395441711,1984812685,2017778566,1784663195,1683407248,1315562145,1080094634,1383856311,1551037884,101039829,135050206,437757123,337553864,1042385657,807962610,573804783,742039012,2531067453,2564033334,2328828971,2227573024,2935566865,2700099354,3001755655,3168937228,3868552805,3902563182,4203181171,4102977912,3736164937,3501741890,3265478751,3433712980,1106041591,1340463100,1576976609,1408749034,2043211483,2009195472,1708848333,1809054150,832877231,1068351396,766945465,599762354,159417987,126454664,361929877,463180190,2709260871,2943682380,3178106961,3009879386,2572697195,2538681184,2236228733,2336434550,3509871135,3745345300,3441850377,3274667266,3910161971,3877198648,4110568485,4211818798,2597806476,2497604743,2261089178,2295101073,2733856160,2902087851,3202437046,2968011453,3936291284,3835036895,4136440770,4169408201,3535486456,3702665459,3467192302,3231722213,2051518780,1951317047,1716890410,1750902305,1113818384,1282050075,1584504582,1350078989,168810852,67556463,371049330,404016761,841739592,1008918595,775550814,540080725,3969562369,3801332234,4035489047,4269907996,3569255213,3669462566,3366754619,3332740144,2631065433,2463879762,2160117071,2395588676,2767645557,2868897406,3102011747,3069049960,202008497,33778362,270040487,504459436,875451293,975658646,675039627,641025152,2084704233,1917518562,1615861247,1851332852,1147550661,1248802510,1484005843,1451044056,933301370,967311729,733156972,632953703,260388950,25965917,328671808,496906059,1206477858,1239443753,1543208500,1441952575,2144161806,1908694277,1675577880,1842759443,3610369226,3644379585,3408119516,3307916247,4011190502,3776767469,4077384432,4245618683,2809771154,2842737049,3144396420,3043140495,2673705150,2438237621,2203032232,2370213795],S=[0,185469197,370938394,487725847,741876788,657861945,975451694,824852259,1483753576,1400783205,1315723890,1164071807,1950903388,2135319889,1649704518,1767536459,2967507152,3152976349,2801566410,2918353863,2631447780,2547432937,2328143614,2177544179,3901806776,3818836405,4270639778,4118987695,3299409036,3483825537,3535072918,3652904859,2077965243,1893020342,1841768865,1724457132,1474502543,1559041666,1107234197,1257309336,598438867,681933534,901210569,1052338372,261314535,77422314,428819965,310463728,3409685355,3224740454,3710368113,3593056380,3875770207,3960309330,4045380933,4195456072,2471224067,2554718734,2237133081,2388260884,3212035895,3028143674,2842678573,2724322336,4138563181,4255350624,3769721975,3955191162,3667219033,3516619604,3431546947,3347532110,2933734917,2782082824,3099667487,3016697106,2196052529,2313884476,2499348523,2683765030,1179510461,1296297904,1347548327,1533017514,1786102409,1635502980,2087309459,2003294622,507358933,355706840,136428751,53458370,839224033,957055980,605657339,790073846,2373340630,2256028891,2607439820,2422494913,2706270690,2856345839,3075636216,3160175349,3573941694,3725069491,3273267108,3356761769,4181598602,4063242375,4011996048,3828103837,1033297158,915985419,730517276,545572369,296679730,446754879,129166120,213705253,1709610350,1860738147,1945798516,2029293177,1239331162,1120974935,1606591296,1422699085,4148292826,4233094615,3781033664,3931371469,3682191598,3497509347,3446004468,3328955385,2939266226,2755636671,3106780840,2988687269,2198438022,2282195339,2501218972,2652609425,1201765386,1286567175,1371368976,1521706781,1805211710,1620529459,2105887268,1988838185,533804130,350174575,164439672,46346101,870912086,954669403,636813900,788204353,2358957921,2274680428,2592523643,2441661558,2695033685,2880240216,3065962831,3182487618,3572145929,3756299780,3270937875,3388507166,4174560061,4091327024,4006521127,3854606378,1014646705,930369212,711349675,560487590,272786309,457992840,106852767,223377554,1678381017,1862534868,1914052035,2031621326,1211247597,1128014560,1580087799,1428173050,32283319,182621114,401639597,486441376,768917123,651868046,1003007129,818324884,1503449823,1385356242,1333838021,1150208456,1973745387,2125135846,1673061617,1756818940,2970356327,3120694122,2802849917,2887651696,2637442643,2520393566,2334669897,2149987652,3917234703,3799141122,4284502037,4100872472,3309594171,3460984630,3545789473,3629546796,2050466060,1899603969,1814803222,1730525723,1443857720,1560382517,1075025698,1260232239,575138148,692707433,878443390,1062597235,243256656,91341917,409198410,325965383,3403100636,3252238545,3704300486,3620022987,3874428392,3990953189,4042459122,4227665663,2460449204,2578018489,2226875310,2411029155,3198115200,3046200461,2827177882,2743944855],A=[0,218828297,437656594,387781147,875313188,958871085,775562294,590424639,1750626376,1699970625,1917742170,2135253587,1551124588,1367295589,1180849278,1265195639,3501252752,3720081049,3399941250,3350065803,3835484340,3919042237,4270507174,4085369519,3102249176,3051593425,2734591178,2952102595,2361698556,2177869557,2530391278,2614737639,3145456443,3060847922,2708326185,2892417312,2404901663,2187128086,2504130317,2555048196,3542330227,3727205754,3375740769,3292445032,3876557655,3926170974,4246310725,4027744588,1808481195,1723872674,1910319033,2094410160,1608975247,1391201670,1173430173,1224348052,59984867,244860394,428169201,344873464,935293895,984907214,766078933,547512796,1844882806,1627235199,2011214180,2062270317,1507497298,1423022939,1137477952,1321699145,95345982,145085239,532201772,313773861,830661914,1015671571,731183368,648017665,3175501286,2957853679,2807058932,2858115069,2305455554,2220981195,2474404304,2658625497,3575528878,3625268135,3473416636,3254988725,3778151818,3963161475,4213447064,4130281361,3599595085,3683022916,3432737375,3247465558,3802222185,4020912224,4172763771,4122762354,3201631749,3017672716,2764249623,2848461854,2331590177,2280796200,2431590963,2648976442,104699613,188127444,472615631,287343814,840019705,1058709744,671593195,621591778,1852171925,1668212892,1953757831,2037970062,1514790577,1463996600,1080017571,1297403050,3673637356,3623636965,3235995134,3454686199,4007360968,3822090177,4107101658,4190530515,2997825956,3215212461,2830708150,2779915199,2256734592,2340947849,2627016082,2443058075,172466556,122466165,273792366,492483431,1047239e3,861968209,612205898,695634755,1646252340,1863638845,2013908262,1963115311,1446242576,1530455833,1277555970,1093597963,1636604631,1820824798,2073724613,1989249228,1436590835,1487645946,1337376481,1119727848,164948639,81781910,331544205,516552836,1039717051,821288114,669961897,719700128,2973530695,3157750862,2871682645,2787207260,2232435299,2283490410,2667994737,2450346104,3647212047,3564045318,3279033885,3464042516,3980931627,3762502690,4150144569,4199882800,3070356634,3121275539,2904027272,2686254721,2200818878,2384911031,2570832044,2486224549,3747192018,3528626907,3310321856,3359936201,3950355702,3867060991,4049844452,4234721005,1739656202,1790575107,2108100632,1890328081,1402811438,1586903591,1233856572,1149249077,266959938,48394827,369057872,418672217,1002783846,919489135,567498868,752375421,209336225,24197544,376187827,459744698,945164165,895287692,574624663,793451934,1679968233,1764313568,2117360635,1933530610,1343127501,1560637892,1243112415,1192455638,3704280881,3519142200,3336358691,3419915562,3907448597,3857572124,4075877127,4294704398,3029510009,3113855344,2927934315,2744104290,2159976285,2377486676,2594734927,2544078150],I=[0,151849742,303699484,454499602,607398968,758720310,908999204,1059270954,1214797936,1097159550,1517440620,1400849762,1817998408,1699839814,2118541908,2001430874,2429595872,2581445614,2194319100,2345119218,3034881240,3186202582,2801699524,2951971274,3635996816,3518358430,3399679628,3283088770,4237083816,4118925222,4002861748,3885750714,1002142683,850817237,698445255,548169417,529487843,377642221,227885567,77089521,1943217067,2061379749,1640576439,1757691577,1474760595,1592394909,1174215055,1290801793,2875968315,2724642869,3111247143,2960971305,2405426947,2253581325,2638606623,2487810577,3808662347,3926825029,4044981591,4162096729,3342319475,3459953789,3576539503,3693126241,1986918061,2137062819,1685577905,1836772287,1381620373,1532285339,1078185097,1229899655,1040559837,923313619,740276417,621982671,439452389,322734571,137073913,19308535,3871163981,4021308739,4104605777,4255800159,3263785589,3414450555,3499326569,3651041127,2933202493,2815956275,3167684641,3049390895,2330014213,2213296395,2566595609,2448830231,1305906550,1155237496,1607244650,1455525988,1776460110,1626319424,2079897426,1928707164,96392454,213114376,396673818,514443284,562755902,679998e3,865136418,983426092,3708173718,3557504664,3474729866,3323011204,4180808110,4030667424,3945269170,3794078908,2507040230,2623762152,2272556026,2390325492,2975484382,3092726480,2738905026,2857194700,3973773121,3856137295,4274053469,4157467219,3371096953,3252932727,3673476453,3556361835,2763173681,2915017791,3064510765,3215307299,2156299017,2307622919,2459735317,2610011675,2081048481,1963412655,1846563261,1729977011,1480485785,1362321559,1243905413,1126790795,878845905,1030690015,645401037,796197571,274084841,425408743,38544885,188821243,3613494426,3731654548,3313212038,3430322568,4082475170,4200115116,3780097726,3896688048,2668221674,2516901860,2366882550,2216610296,3141400786,2989552604,2837966542,2687165888,1202797690,1320957812,1437280870,1554391400,1669664834,1787304780,1906247262,2022837584,265905162,114585348,499347990,349075736,736970802,585122620,972512814,821712160,2595684844,2478443234,2293045232,2174754046,3196267988,3079546586,2895723464,2777952454,3537852828,3687994002,3234156416,3385345166,4142626212,4293295786,3841024952,3992742070,174567692,57326082,410887952,292596766,777231668,660510266,1011452712,893681702,1108339068,1258480242,1343618912,1494807662,1715193156,1865862730,1948373848,2100090966,2701949495,2818666809,3004591147,3122358053,2235061775,2352307457,2535604243,2653899549,3915653703,3764988233,4219352155,4067639125,3444575871,3294430577,3746175075,3594982253,836553431,953270745,600235211,718002117,367585007,484830689,133361907,251657213,2041877159,1891211689,1806599355,1654886325,1568718495,1418573201,1335535747,1184342925];function T(t){for(var e=[],r=0;r<t.length;r+=4)e.push(t[r]<<24|t[r+1]<<16|t[r+2]<<8|t[r+3]);return e}var U=function(t){if(!(this instanceof U))throw Error("AES must be instanitated with `new`");Object.defineProperty(this,"key",{value:i(t,!0)}),this._prepare()};U.prototype._prepare=function(){var t=c[this.key.length];if(null==t)throw new Error("invalid key size (must be 16, 24 or 32 bytes)");this._Ke=[],this._Kd=[];for(var e=0;e<=t;e++)this._Ke.push([0,0,0,0]),this._Kd.push([0,0,0,0]);var r,n=4*(t+1),i=this.key.length/4,s=T(this.key);for(e=0;e<i;e++)r=e>>2,this._Ke[r][e%4]=s[e],this._Kd[t-r][e%4]=s[e];for(var o,a=0,u=i;u<n;){if(o=s[i-1],s[0]^=l[o>>16&255]<<24^l[o>>8&255]<<16^l[255&o]<<8^l[o>>24&255]^f[a]<<24,a+=1,8!=i)for(e=1;e<i;e++)s[e]^=s[e-1];else{for(e=1;e<i/2;e++)s[e]^=s[e-1];for(o=s[i/2-1],s[i/2]^=l[255&o]^l[o>>8&255]<<8^l[o>>16&255]<<16^l[o>>24&255]<<24,e=i/2+1;e<i;e++)s[e]^=s[e-1]}for(e=0;e<i&&u<n;)h=u>>2,p=u%4,this._Ke[h][p]=s[e],this._Kd[t-h][p]=s[e++],u++}for(var h=1;h<t;h++)for(var p=0;p<4;p++)o=this._Kd[h][p],this._Kd[h][p]=_[o>>24&255]^S[o>>16&255]^A[o>>8&255]^I[255&o]},U.prototype.encrypt=function(t){if(16!=t.length)throw new Error("invalid plaintext size (must be 16 bytes)");for(var e=this._Ke.length-1,r=[0,0,0,0],n=T(t),i=0;i<4;i++)n[i]^=this._Ke[0][i];for(var o=1;o<e;o++){for(i=0;i<4;i++)r[i]=d[n[i]>>24&255]^g[n[(i+1)%4]>>16&255]^y[n[(i+2)%4]>>8&255]^w[255&n[(i+3)%4]]^this._Ke[o][i];n=r.slice()}var a,u=s(16);for(i=0;i<4;i++)a=this._Ke[e][i],u[4*i]=255&(l[n[i]>>24&255]^a>>24),u[4*i+1]=255&(l[n[(i+1)%4]>>16&255]^a>>16),u[4*i+2]=255&(l[n[(i+2)%4]>>8&255]^a>>8),u[4*i+3]=255&(l[255&n[(i+3)%4]]^a);return u},U.prototype.decrypt=function(t){if(16!=t.length)throw new Error("invalid ciphertext size (must be 16 bytes)");for(var e=this._Kd.length-1,r=[0,0,0,0],n=T(t),i=0;i<4;i++)n[i]^=this._Kd[0][i];for(var o=1;o<e;o++){for(i=0;i<4;i++)r[i]=E[n[i]>>24&255]^m[n[(i+3)%4]>>16&255]^b[n[(i+2)%4]>>8&255]^v[255&n[(i+1)%4]]^this._Kd[o][i];n=r.slice()}var a,u=s(16);for(i=0;i<4;i++)a=this._Kd[e][i],u[4*i]=255&(p[n[i]>>24&255]^a>>24),u[4*i+1]=255&(p[n[(i+3)%4]>>16&255]^a>>16),u[4*i+2]=255&(p[n[(i+2)%4]>>8&255]^a>>8),u[4*i+3]=255&(p[255&n[(i+1)%4]]^a);return u};var R=function(t){if(!(this instanceof R))throw Error("AES must be instanitated with `new`");this.description="Electronic Code Block",this.name="ecb",this._aes=new U(t)};R.prototype.encrypt=function(t){if((t=i(t)).length%16!=0)throw new Error("invalid plaintext size (must be multiple of 16 bytes)");for(var e=s(t.length),r=s(16),n=0;n<t.length;n+=16)o(t,r,0,n,n+16),o(r=this._aes.encrypt(r),e,n);return e},R.prototype.decrypt=function(t){if((t=i(t)).length%16!=0)throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");for(var e=s(t.length),r=s(16),n=0;n<t.length;n+=16)o(t,r,0,n,n+16),o(r=this._aes.decrypt(r),e,n);return e};var x=function(t,e){if(!(this instanceof x))throw Error("AES must be instanitated with `new`");if(this.description="Cipher Block Chaining",this.name="cbc",e){if(16!=e.length)throw new Error("invalid initialation vector size (must be 16 bytes)")}else e=s(16);this._lastCipherblock=i(e,!0),this._aes=new U(t)};x.prototype.encrypt=function(t){if((t=i(t)).length%16!=0)throw new Error("invalid plaintext size (must be multiple of 16 bytes)");for(var e=s(t.length),r=s(16),n=0;n<t.length;n+=16){o(t,r,0,n,n+16);for(var a=0;a<16;a++)r[a]^=this._lastCipherblock[a];this._lastCipherblock=this._aes.encrypt(r),o(this._lastCipherblock,e,n)}return e},x.prototype.decrypt=function(t){if((t=i(t)).length%16!=0)throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");for(var e=s(t.length),r=s(16),n=0;n<t.length;n+=16){o(t,r,0,n,n+16),r=this._aes.decrypt(r);for(var a=0;a<16;a++)e[n+a]=r[a]^this._lastCipherblock[a];o(t,this._lastCipherblock,0,n,n+16)}return e};var P=function(t,e,r){if(!(this instanceof P))throw Error("AES must be instanitated with `new`");if(this.description="Cipher Feedback",this.name="cfb",e){if(16!=e.length)throw new Error("invalid initialation vector size (must be 16 size)")}else e=s(16);r||(r=1),this.segmentSize=r,this._shiftRegister=i(e,!0),this._aes=new U(t)};P.prototype.encrypt=function(t){if(t.length%this.segmentSize!=0)throw new Error("invalid plaintext size (must be segmentSize bytes)");for(var e,r=i(t,!0),n=0;n<r.length;n+=this.segmentSize){e=this._aes.encrypt(this._shiftRegister);for(var s=0;s<this.segmentSize;s++)r[n+s]^=e[s];o(this._shiftRegister,this._shiftRegister,0,this.segmentSize),o(r,this._shiftRegister,16-this.segmentSize,n,n+this.segmentSize)}return r},P.prototype.decrypt=function(t){if(t.length%this.segmentSize!=0)throw new Error("invalid ciphertext size (must be segmentSize bytes)");for(var e,r=i(t,!0),n=0;n<r.length;n+=this.segmentSize){e=this._aes.encrypt(this._shiftRegister);for(var s=0;s<this.segmentSize;s++)r[n+s]^=e[s];o(this._shiftRegister,this._shiftRegister,0,this.segmentSize),o(t,this._shiftRegister,16-this.segmentSize,n,n+this.segmentSize)}return r};var B=function(t,e){if(!(this instanceof B))throw Error("AES must be instanitated with `new`");if(this.description="Output Feedback",this.name="ofb",e){if(16!=e.length)throw new Error("invalid initialation vector size (must be 16 bytes)")}else e=s(16);this._lastPrecipher=i(e,!0),this._lastPrecipherIndex=16,this._aes=new U(t)};B.prototype.encrypt=function(t){for(var e=i(t,!0),r=0;r<e.length;r++)16===this._lastPrecipherIndex&&(this._lastPrecipher=this._aes.encrypt(this._lastPrecipher),this._lastPrecipherIndex=0),e[r]^=this._lastPrecipher[this._lastPrecipherIndex++];return e},B.prototype.decrypt=B.prototype.encrypt;var N=function(t){if(!(this instanceof N))throw Error("Counter must be instanitated with `new`");0===t||t||(t=1),"number"==typeof t?(this._counter=s(16),this.setValue(t)):this.setBytes(t)};N.prototype.setValue=function(t){if("number"!=typeof t||parseInt(t)!=t)throw new Error("invalid counter value (must be an integer)");if(t>Number.MAX_SAFE_INTEGER)throw new Error("integer value out of safe range");for(var e=15;e>=0;--e)this._counter[e]=t%256,t=parseInt(t/256)},N.prototype.setBytes=function(t){if(16!=(t=i(t,!0)).length)throw new Error("invalid counter bytes size (must be 16 bytes)");this._counter=t},N.prototype.increment=function(){for(var t=15;t>=0;t--){if(255!==this._counter[t]){this._counter[t]++;break}this._counter[t]=0}};var L=function(t,e){if(!(this instanceof L))throw Error("AES must be instanitated with `new`");this.description="Counter",this.name="ctr",e instanceof N||(e=new N(e)),this._counter=e,this._remainingCounter=null,this._remainingCounterIndex=16,this._aes=new U(t)};L.prototype.encrypt=function(t){for(var e=i(t,!0),r=0;r<e.length;r++)16===this._remainingCounterIndex&&(this._remainingCounter=this._aes.encrypt(this._counter._counter),this._remainingCounterIndex=0,this._counter.increment()),e[r]^=this._remainingCounter[this._remainingCounterIndex++];return e},L.prototype.decrypt=L.prototype.encrypt;var O={AES:U,Counter:N,ModeOfOperation:{ecb:R,cbc:x,cfb:P,ofb:B,ctr:L},utils:{hex:h,utf8:u},padding:{pkcs7:{pad:function(t){var e=16-(t=i(t,!0)).length%16,r=s(t.length+e);o(t,r);for(var n=t.length;n<r.length;n++)r[n]=e;return r},strip:function(t){if((t=i(t,!0)).length<16)throw new Error("PKCS#7 invalid length");var e=t[t.length-1];if(e>16)throw new Error("PKCS#7 padding byte out of range");for(var r=t.length-e,n=0;n<e;n++)if(t[r+n]!==e)throw new Error("PKCS#7 invalid padding byte");var a=s(r);return o(t,a,0,0,r),a}}},_arrayTest:{coerceArray:i,createArray:s,copyArray:o}};t.exports=O}()},89547:(t,e)=>{"use strict";e.gW=void 0;const r="qpzry9x8gf2tvdw0s3jn54khce6mua7l",n={};for(let t=0;t<r.length;t++){const e=r.charAt(t);n[e]=t}function i(t){const e=t>>25;return(33554431&t)<<5^996825010&-(e>>0&1)^642813549&-(e>>1&1)^513874426&-(e>>2&1)^1027748829&-(e>>3&1)^705979059&-(e>>4&1)}function s(t){let e=1;for(let r=0;r<t.length;++r){const n=t.charCodeAt(r);if(n<33||n>126)return"Invalid prefix ("+t+")";e=i(e)^n>>5}e=i(e);for(let r=0;r<t.length;++r){const n=t.charCodeAt(r);e=i(e)^31&n}return e}function o(t,e,r,n){let i=0,s=0;const o=(1<<r)-1,a=[];for(let n=0;n<t.length;++n)for(i=i<<e|t[n],s+=e;s>=r;)s-=r,a.push(i>>s&o);if(n)s>0&&a.push(i<<r-s&o);else{if(s>=e)return"Excess padding";if(i<<r-s&o)return"Non-zero padding"}return a}function a(t){return o(t,8,5,!0)}function u(t){const e=o(t,5,8,!1);if(Array.isArray(e))return e}function h(t){const e=o(t,5,8,!1);if(Array.isArray(e))return e;throw new Error(e)}function c(t){let e;function o(t,r){if(r=r||90,t.length<8)return t+" too short";if(t.length>r)return"Exceeds length limit";const o=t.toLowerCase(),a=t.toUpperCase();if(t!==o&&t!==a)return"Mixed-case string "+t;const u=(t=o).lastIndexOf("1");if(-1===u)return"No separator character for "+t;if(0===u)return"Missing prefix for "+t;const h=t.slice(0,u),c=t.slice(u+1);if(c.length<6)return"Data too short";let f=s(h);if("string"==typeof f)return f;const l=[];for(let t=0;t<c.length;++t){const e=c.charAt(t),r=n[e];if(void 0===r)return"Unknown character "+e;f=i(f)^r,t+6>=c.length||l.push(r)}return f!==e?"Invalid checksum for "+t:{prefix:h,words:l}}return e="bech32"===t?1:734539939,{decodeUnsafe:function(t,e){const r=o(t,e);if("object"==typeof r)return r},decode:function(t,e){const r=o(t,e);if("object"==typeof r)return r;throw new Error(r)},encode:function(t,n,o){if(o=o||90,t.length+7+n.length>o)throw new TypeError("Exceeds length limit");let a=s(t=t.toLowerCase());if("string"==typeof a)throw new Error(a);let u=t+"1";for(let t=0;t<n.length;++t){const e=n[t];if(e>>5!=0)throw new Error("Non 5-bit word");a=i(a)^e,u+=r.charAt(e)}for(let t=0;t<6;++t)a=i(a);a^=e;for(let t=0;t<6;++t)u+=r.charAt(a>>5*(5-t)&31);return u},toWords:a,fromWordsUnsafe:u,fromWords:h}}e.gW=c("bech32"),c("bech32m")},76857:(t,e,r)=>{"use strict";var n=r(79742),i=r(80645),s="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.lW=u,e.h2=50;var o=2147483647;function a(t){if(t>o)throw new RangeError('The value "'+t+'" is invalid for option "size"');var e=new Uint8Array(t);return Object.setPrototypeOf(e,u.prototype),e}function u(t,e,r){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return f(t)}return h(t,e,r)}function h(t,e,r){if("string"==typeof t)return function(t,e){if("string"==typeof e&&""!==e||(e="utf8"),!u.isEncoding(e))throw new TypeError("Unknown encoding: "+e);var r=0|g(t,e),n=a(r),i=n.write(t,e);return i!==r&&(n=n.slice(0,i)),n}(t,e);if(ArrayBuffer.isView(t))return function(t){if(H(t,Uint8Array)){var e=new Uint8Array(t);return p(e.buffer,e.byteOffset,e.byteLength)}return l(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(H(t,ArrayBuffer)||t&&H(t.buffer,ArrayBuffer))return p(t,e,r);if("undefined"!=typeof SharedArrayBuffer&&(H(t,SharedArrayBuffer)||t&&H(t.buffer,SharedArrayBuffer)))return p(t,e,r);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');var n=t.valueOf&&t.valueOf();if(null!=n&&n!==t)return u.from(n,e,r);var i=function(t){if(u.isBuffer(t)){var e=0|d(t.length),r=a(e);return 0===r.length||t.copy(r,0,0,e),r}return void 0!==t.length?"number"!=typeof t.length||j(t.length)?a(0):l(t):"Buffer"===t.type&&Array.isArray(t.data)?l(t.data):void 0}(t);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return u.from(t[Symbol.toPrimitive]("string"),e,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function f(t){return c(t),a(t<0?0:0|d(t))}function l(t){for(var e=t.length<0?0:0|d(t.length),r=a(e),n=0;n<e;n+=1)r[n]=255&t[n];return r}function p(t,e,r){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(r||0))throw new RangeError('"length" is outside of buffer bounds');var n;return n=void 0===e&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,e):new Uint8Array(t,e,r),Object.setPrototypeOf(n,u.prototype),n}function d(t){if(t>=o)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o.toString(16)+" bytes");return 0|t}function g(t,e){if(u.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||H(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);var r=t.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;for(var i=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return M(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return F(t).length;default:if(i)return n?-1:M(t).length;e=(""+e).toLowerCase(),i=!0}}function y(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return P(this,e,r);case"utf8":case"utf-8":return T(this,e,r);case"ascii":return R(this,e,r);case"latin1":case"binary":return x(this,e,r);case"base64":return I(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return B(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function w(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function E(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),j(r=+r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=u.from(e,n)),u.isBuffer(e))return 0===e.length?-1:m(t,e,r,n,i);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):m(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function m(t,e,r,n,i){var s,o=1,a=t.length,u=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;o=2,a/=2,u/=2,r/=2}function h(t,e){return 1===o?t[e]:t.readUInt16BE(e*o)}if(i){var c=-1;for(s=r;s<a;s++)if(h(t,s)===h(e,-1===c?0:s-c)){if(-1===c&&(c=s),s-c+1===u)return c*o}else-1!==c&&(s-=s-c),c=-1}else for(r+u>a&&(r=a-u),s=r;s>=0;s--){for(var f=!0,l=0;l<u;l++)if(h(t,s+l)!==h(e,l)){f=!1;break}if(f)return s}return-1}function b(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var s=e.length;n>s/2&&(n=s/2);for(var o=0;o<n;++o){var a=parseInt(e.substr(2*o,2),16);if(j(a))return o;t[r+o]=a}return o}function v(t,e,r,n){return z(M(e,t.length-r),t,r,n)}function _(t,e,r,n){return z(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function S(t,e,r,n){return z(F(e),t,r,n)}function A(t,e,r,n){return z(function(t,e){for(var r,n,i,s=[],o=0;o<t.length&&!((e-=2)<0);++o)n=(r=t.charCodeAt(o))>>8,i=r%256,s.push(i),s.push(n);return s}(e,t.length-r),t,r,n)}function I(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function T(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var s,o,a,u,h=t[i],c=null,f=h>239?4:h>223?3:h>191?2:1;if(i+f<=r)switch(f){case 1:h<128&&(c=h);break;case 2:128==(192&(s=t[i+1]))&&(u=(31&h)<<6|63&s)>127&&(c=u);break;case 3:s=t[i+1],o=t[i+2],128==(192&s)&&128==(192&o)&&(u=(15&h)<<12|(63&s)<<6|63&o)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:s=t[i+1],o=t[i+2],a=t[i+3],128==(192&s)&&128==(192&o)&&128==(192&a)&&(u=(15&h)<<18|(63&s)<<12|(63&o)<<6|63&a)>65535&&u<1114112&&(c=u)}null===c?(c=65533,f=1):c>65535&&(c-=65536,n.push(c>>>10&1023|55296),c=56320|1023&c),n.push(c),i+=f}return function(t){var e=t.length;if(e<=U)return String.fromCharCode.apply(String,t);for(var r="",n=0;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=U));return r}(n)}u.TYPED_ARRAY_SUPPORT=function(){try{var t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),u.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(u.prototype,"parent",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.buffer}}),Object.defineProperty(u.prototype,"offset",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.byteOffset}}),u.poolSize=8192,u.from=function(t,e,r){return h(t,e,r)},Object.setPrototypeOf(u.prototype,Uint8Array.prototype),Object.setPrototypeOf(u,Uint8Array),u.alloc=function(t,e,r){return function(t,e,r){return c(t),t<=0?a(t):void 0!==e?"string"==typeof r?a(t).fill(e,r):a(t).fill(e):a(t)}(t,e,r)},u.allocUnsafe=function(t){return f(t)},u.allocUnsafeSlow=function(t){return f(t)},u.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==u.prototype},u.compare=function(t,e){if(H(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),H(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;for(var r=t.length,n=e.length,i=0,s=Math.min(r,n);i<s;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=u.allocUnsafe(e),i=0;for(r=0;r<t.length;++r){var s=t[r];if(H(s,Uint8Array))i+s.length>n.length?u.from(s).copy(n,i):Uint8Array.prototype.set.call(n,s,i);else{if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(n,i)}i+=s.length}return n},u.byteLength=g,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)w(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)w(this,e,e+3),w(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)w(this,e,e+7),w(this,e+1,e+6),w(this,e+2,e+5),w(this,e+3,e+4);return this},u.prototype.toString=function(){var t=this.length;return 0===t?"":0===arguments.length?T(this,0,t):y.apply(this,arguments)},u.prototype.toLocaleString=u.prototype.toString,u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",r=e.h2;return t=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(t+=" ... "),"<Buffer "+t+">"},s&&(u.prototype[s]=u.prototype.inspect),u.prototype.compare=function(t,e,r,n,i){if(H(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),!u.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(this===t)return 0;for(var s=(i>>>=0)-(n>>>=0),o=(r>>>=0)-(e>>>=0),a=Math.min(s,o),h=this.slice(n,i),c=t.slice(e,r),f=0;f<a;++f)if(h[f]!==c[f]){s=h[f],o=c[f];break}return s<o?-1:o<s?1:0},u.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},u.prototype.indexOf=function(t,e,r){return E(this,t,e,r,!0)},u.prototype.lastIndexOf=function(t,e,r){return E(this,t,e,r,!1)},u.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var s=!1;;)switch(n){case"hex":return b(this,t,e,r);case"utf8":case"utf-8":return v(this,t,e,r);case"ascii":case"latin1":case"binary":return _(this,t,e,r);case"base64":return S(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,e,r);default:if(s)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),s=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var U=4096;function R(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function x(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function P(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var i="",s=e;s<r;++s)i+=$[t[s]];return i}function B(t,e,r){for(var n=t.slice(e,r),i="",s=0;s<n.length-1;s+=2)i+=String.fromCharCode(n[s]+256*n[s+1]);return i}function N(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function L(t,e,r,n,i,s){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<s)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function O(t,e,r,n,i,s){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function k(t,e,r,n,s){return e=+e,r>>>=0,s||O(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function D(t,e,r,n,s){return e=+e,r>>>=0,s||O(t,0,r,8),i.write(t,e,r,n,52,8),r+8}u.prototype.slice=function(t,e){var r=this.length;(t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t);var n=this.subarray(t,e);return Object.setPrototypeOf(n,u.prototype),n},u.prototype.readUintLE=u.prototype.readUIntLE=function(t,e,r){t>>>=0,e>>>=0,r||N(t,e,this.length);for(var n=this[t],i=1,s=0;++s<e&&(i*=256);)n+=this[t+s]*i;return n},u.prototype.readUintBE=u.prototype.readUIntBE=function(t,e,r){t>>>=0,e>>>=0,r||N(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},u.prototype.readUint8=u.prototype.readUInt8=function(t,e){return t>>>=0,e||N(t,1,this.length),this[t]},u.prototype.readUint16LE=u.prototype.readUInt16LE=function(t,e){return t>>>=0,e||N(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUint16BE=u.prototype.readUInt16BE=function(t,e){return t>>>=0,e||N(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUint32LE=u.prototype.readUInt32LE=function(t,e){return t>>>=0,e||N(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUint32BE=u.prototype.readUInt32BE=function(t,e){return t>>>=0,e||N(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,r){t>>>=0,e>>>=0,r||N(t,e,this.length);for(var n=this[t],i=1,s=0;++s<e&&(i*=256);)n+=this[t+s]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*e)),n},u.prototype.readIntBE=function(t,e,r){t>>>=0,e>>>=0,r||N(t,e,this.length);for(var n=e,i=1,s=this[t+--n];n>0&&(i*=256);)s+=this[t+--n]*i;return s>=(i*=128)&&(s-=Math.pow(2,8*e)),s},u.prototype.readInt8=function(t,e){return t>>>=0,e||N(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){t>>>=0,e||N(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(t,e){t>>>=0,e||N(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(t,e){return t>>>=0,e||N(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return t>>>=0,e||N(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return t>>>=0,e||N(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return t>>>=0,e||N(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return t>>>=0,e||N(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return t>>>=0,e||N(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUintLE=u.prototype.writeUIntLE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||L(this,t,e,r,Math.pow(2,8*r)-1,0);var i=1,s=0;for(this[e]=255&t;++s<r&&(i*=256);)this[e+s]=t/i&255;return e+r},u.prototype.writeUintBE=u.prototype.writeUIntBE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||L(this,t,e,r,Math.pow(2,8*r)-1,0);var i=r-1,s=1;for(this[e+i]=255&t;--i>=0&&(s*=256);)this[e+i]=t/s&255;return e+r},u.prototype.writeUint8=u.prototype.writeUInt8=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,1,255,0),this[e]=255&t,e+1},u.prototype.writeUint16LE=u.prototype.writeUInt16LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},u.prototype.writeUint16BE=u.prototype.writeUInt16BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},u.prototype.writeUint32LE=u.prototype.writeUInt32LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},u.prototype.writeUint32BE=u.prototype.writeUInt32BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},u.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e>>>=0,!n){var i=Math.pow(2,8*r-1);L(this,t,e,r,i-1,-i)}var s=0,o=1,a=0;for(this[e]=255&t;++s<r&&(o*=256);)t<0&&0===a&&0!==this[e+s-1]&&(a=1),this[e+s]=(t/o>>0)-a&255;return e+r},u.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e>>>=0,!n){var i=Math.pow(2,8*r-1);L(this,t,e,r,i-1,-i)}var s=r-1,o=1,a=0;for(this[e+s]=255&t;--s>=0&&(o*=256);)t<0&&0===a&&0!==this[e+s+1]&&(a=1),this[e+s]=(t/o>>0)-a&255;return e+r},u.prototype.writeInt8=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},u.prototype.writeInt16BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},u.prototype.writeInt32LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},u.prototype.writeInt32BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},u.prototype.writeFloatLE=function(t,e,r){return k(this,t,e,!0,r)},u.prototype.writeFloatBE=function(t,e,r){return k(this,t,e,!1,r)},u.prototype.writeDoubleLE=function(t,e,r){return D(this,t,e,!0,r)},u.prototype.writeDoubleBE=function(t,e,r){return D(this,t,e,!1,r)},u.prototype.copy=function(t,e,r,n){if(!u.isBuffer(t))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i=n-r;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,r,n):Uint8Array.prototype.set.call(t,this.subarray(r,n),e),i},u.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===t.length){var i=t.charCodeAt(0);("utf8"===n&&i<128||"latin1"===n)&&(t=i)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var s;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(s=e;s<r;++s)this[s]=t;else{var o=u.isBuffer(t)?t:u.from(t,n),a=o.length;if(0===a)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(s=0;s<r-e;++s)this[s+e]=o[s%a]}return this};var C=/[^+/0-9A-Za-z-_]/g;function M(t,e){var r;e=e||1/0;for(var n=t.length,i=null,s=[],o=0;o<n;++o){if((r=t.charCodeAt(o))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&s.push(239,191,189);continue}if(o+1===n){(e-=3)>-1&&s.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&s.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&s.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;s.push(r)}else if(r<2048){if((e-=2)<0)break;s.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;s.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;s.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return s}function F(t){return n.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(C,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function z(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}function H(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function j(t){return t!=t}var $=function(){for(var t="0123456789abcdef",e=new Array(256),r=0;r<16;++r)for(var n=16*r,i=0;i<16;++i)e[n+i]=t[r]+t[i];return e}()},86207:(t,e,r)=>{t.exports=r(50767)(r(31317))},31317:(t,e,r)=>{const n=new(0,r(86266).ec)("secp256k1"),i=n.curve,s=i.n.constructor;function o(t){const e=t[0];switch(e){case 2:case 3:return 33!==t.length?null:function(t,e){let r=new s(e);if(r.cmp(i.p)>=0)return null;r=r.toRed(i.red);let o=r.redSqr().redIMul(r).redIAdd(i.b).redSqrt();return 3===t!==o.isOdd()&&(o=o.redNeg()),n.keyPair({pub:{x:r,y:o}})}(e,t.subarray(1,33));case 4:case 6:case 7:return 65!==t.length?null:function(t,e,r){let o=new s(e),a=new s(r);if(o.cmp(i.p)>=0||a.cmp(i.p)>=0)return null;if(o=o.toRed(i.red),a=a.toRed(i.red),(6===t||7===t)&&a.isOdd()!==(7===t))return null;const u=o.redSqr().redIMul(o);return a.redSqr().redISub(u.redIAdd(i.b)).isZero()?n.keyPair({pub:{x:o,y:a}}):null}(e,t.subarray(1,33),t.subarray(33,65));default:return null}}function a(t,e){const r=e.encode(null,33===t.length);for(let e=0;e<t.length;++e)t[e]=r[e]}t.exports={contextRandomize:()=>0,privateKeyVerify(t){const e=new s(t);return e.cmp(i.n)<0&&!e.isZero()?0:1},privateKeyNegate(t){const e=new s(t),r=i.n.sub(e).umod(i.n).toArrayLike(Uint8Array,"be",32);return t.set(r),0},privateKeyTweakAdd(t,e){const r=new s(e);if(r.cmp(i.n)>=0)return 1;if(r.iadd(new s(t)),r.cmp(i.n)>=0&&r.isub(i.n),r.isZero())return 1;const n=r.toArrayLike(Uint8Array,"be",32);return t.set(n),0},privateKeyTweakMul(t,e){let r=new s(e);if(r.cmp(i.n)>=0||r.isZero())return 1;r.imul(new s(t)),r.cmp(i.n)>=0&&(r=r.umod(i.n));const n=r.toArrayLike(Uint8Array,"be",32);return t.set(n),0},publicKeyVerify:t=>null===o(t)?1:0,publicKeyCreate(t,e){const r=new s(e);return r.cmp(i.n)>=0||r.isZero()?1:(a(t,n.keyFromPrivate(e).getPublic()),0)},publicKeyConvert(t,e){const r=o(e);return null===r?1:(a(t,r.getPublic()),0)},publicKeyNegate(t,e){const r=o(e);if(null===r)return 1;const n=r.getPublic();return n.y=n.y.redNeg(),a(t,n),0},publicKeyCombine(t,e){const r=new Array(e.length);for(let t=0;t<e.length;++t)if(r[t]=o(e[t]),null===r[t])return 1;let n=r[0].getPublic();for(let t=1;t<r.length;++t)n=n.add(r[t].pub);return n.isInfinity()?2:(a(t,n),0)},publicKeyTweakAdd(t,e,r){const n=o(e);if(null===n)return 1;if((r=new s(r)).cmp(i.n)>=0)return 2;const u=n.getPublic().add(i.g.mul(r));return u.isInfinity()?2:(a(t,u),0)},publicKeyTweakMul(t,e,r){const n=o(e);return null===n?1:(r=new s(r)).cmp(i.n)>=0||r.isZero()?2:(a(t,n.getPublic().mul(r)),0)},signatureNormalize(t){const e=new s(t.subarray(0,32)),r=new s(t.subarray(32,64));return e.cmp(i.n)>=0||r.cmp(i.n)>=0?1:(1===r.cmp(n.nh)&&t.set(i.n.sub(r).toArrayLike(Uint8Array,"be",32),32),0)},signatureExport(t,e){const r=e.subarray(0,32),n=e.subarray(32,64);if(new s(r).cmp(i.n)>=0)return 1;if(new s(n).cmp(i.n)>=0)return 1;const{output:o}=t;let a=o.subarray(4,37);a[0]=0,a.set(r,1);let u=33,h=0;for(;u>1&&0===a[h]&&!(128&a[h+1]);--u,++h);if(a=a.subarray(h),128&a[0])return 1;if(u>1&&0===a[0]&&!(128&a[1]))return 1;let c=o.subarray(39,72);c[0]=0,c.set(n,1);let f=33,l=0;for(;f>1&&0===c[l]&&!(128&c[l+1]);--f,++l);return c=c.subarray(l),128&c[0]||f>1&&0===c[0]&&!(128&c[1])?1:(t.outputlen=6+u+f,o[0]=48,o[1]=t.outputlen-2,o[2]=2,o[3]=a.length,o.set(a,4),o[4+u]=2,o[5+u]=c.length,o.set(c,6+u),0)},signatureImport(t,e){if(e.length<8)return 1;if(e.length>72)return 1;if(48!==e[0])return 1;if(e[1]!==e.length-2)return 1;if(2!==e[2])return 1;const r=e[3];if(0===r)return 1;if(5+r>=e.length)return 1;if(2!==e[4+r])return 1;const n=e[5+r];if(0===n)return 1;if(6+r+n!==e.length)return 1;if(128&e[4])return 1;if(r>1&&0===e[4]&&!(128&e[5]))return 1;if(128&e[r+6])return 1;if(n>1&&0===e[r+6]&&!(128&e[r+7]))return 1;let o=e.subarray(4,4+r);if(33===o.length&&0===o[0]&&(o=o.subarray(1)),o.length>32)return 1;let a=e.subarray(6+r);if(33===a.length&&0===a[0]&&(a=a.slice(1)),a.length>32)throw new Error("S length is too long");let u=new s(o);u.cmp(i.n)>=0&&(u=new s(0));let h=new s(e.subarray(6+r));return h.cmp(i.n)>=0&&(h=new s(0)),t.set(u.toArrayLike(Uint8Array,"be",32),0),t.set(h.toArrayLike(Uint8Array,"be",32),32),0},ecdsaSign(t,e,r,o,a){if(a){const t=a;a=n=>{const i=t(e,r,null,o,n);if(!(i instanceof Uint8Array&&32===i.length))throw new Error("This is the way");return new s(i)}}const u=new s(r);if(u.cmp(i.n)>=0||u.isZero())return 1;let h;try{h=n.sign(e,r,{canonical:!0,k:a,pers:o})}catch(t){return 1}return t.signature.set(h.r.toArrayLike(Uint8Array,"be",32),0),t.signature.set(h.s.toArrayLike(Uint8Array,"be",32),32),t.recid=h.recoveryParam,0},ecdsaVerify(t,e,r){const a={r:t.subarray(0,32),s:t.subarray(32,64)},u=new s(a.r),h=new s(a.s);if(u.cmp(i.n)>=0||h.cmp(i.n)>=0)return 1;if(1===h.cmp(n.nh)||u.isZero()||h.isZero())return 3;const c=o(r);if(null===c)return 2;const f=c.getPublic();return n.verify(e,a,f)?0:3},ecdsaRecover(t,e,r,o){const u={r:e.slice(0,32),s:e.slice(32,64)},h=new s(u.r),c=new s(u.s);if(h.cmp(i.n)>=0||c.cmp(i.n)>=0)return 1;if(h.isZero()||c.isZero())return 2;let f;try{f=n.recoverPubKey(o,u,r)}catch(t){return 2}return a(t,f),0},ecdh(t,e,r,a,u,h,c){const f=o(e);if(null===f)return 1;const l=new s(r);if(l.cmp(i.n)>=0||l.isZero())return 2;const p=f.getPublic().mul(l);if(void 0===u){const e=p.encode(null,!0),r=n.hash().update(e).digest();for(let e=0;e<32;++e)t[e]=r[e]}else{h||(h=new Uint8Array(32));const e=p.getX().toArray("be",32);for(let t=0;t<32;++t)h[t]=e[t];c||(c=new Uint8Array(32));const r=p.getY().toArray("be",32);for(let t=0;t<32;++t)c[t]=r[t];const n=u(h,c,a);if(!(n instanceof Uint8Array&&n.length===t.length))return 2;t.set(n)}return 0}}},50767:t=>{const e="Impossible case. Please create issue.",r="The tweak was out of range or the resulted private key is invalid",n="The tweak was out of range or equal to zero",i="Public Key could not be parsed",s="Public Key serialization error",o="Signature could not be parsed";function a(t,e){if(!t)throw new Error(e)}function u(t,e,r){if(a(e instanceof Uint8Array,`Expected ${t} to be an Uint8Array`),void 0!==r)if(Array.isArray(r)){const n=`Expected ${t} to be an Uint8Array with length [${r.join(", ")}]`;a(r.includes(e.length),n)}else{const n=`Expected ${t} to be an Uint8Array with length ${r}`;a(e.length===r,n)}}function h(t){a("Boolean"===f(t),"Expected compressed to be a Boolean")}function c(t=(t=>new Uint8Array(t)),e){return"function"==typeof t&&(t=t(e)),u("output",t,e),t}function f(t){return Object.prototype.toString.call(t).slice(8,-1)}t.exports=t=>({contextRandomize(e){switch(a(null===e||e instanceof Uint8Array,"Expected seed to be an Uint8Array or null"),null!==e&&u("seed",e,32),t.contextRandomize(e)){case 1:throw new Error("Unknow error on context randomization")}},privateKeyVerify:e=>(u("private key",e,32),0===t.privateKeyVerify(e)),privateKeyNegate(r){switch(u("private key",r,32),t.privateKeyNegate(r)){case 0:return r;case 1:throw new Error(e)}},privateKeyTweakAdd(e,n){switch(u("private key",e,32),u("tweak",n,32),t.privateKeyTweakAdd(e,n)){case 0:return e;case 1:throw new Error(r)}},privateKeyTweakMul(e,r){switch(u("private key",e,32),u("tweak",r,32),t.privateKeyTweakMul(e,r)){case 0:return e;case 1:throw new Error(n)}},publicKeyVerify:e=>(u("public key",e,[33,65]),0===t.publicKeyVerify(e)),publicKeyCreate(e,r=!0,n){switch(u("private key",e,32),h(r),n=c(n,r?33:65),t.publicKeyCreate(n,e)){case 0:return n;case 1:throw new Error("Private Key is invalid");case 2:throw new Error(s)}},publicKeyConvert(e,r=!0,n){switch(u("public key",e,[33,65]),h(r),n=c(n,r?33:65),t.publicKeyConvert(n,e)){case 0:return n;case 1:throw new Error(i);case 2:throw new Error(s)}},publicKeyNegate(r,n=!0,o){switch(u("public key",r,[33,65]),h(n),o=c(o,n?33:65),t.publicKeyNegate(o,r)){case 0:return o;case 1:throw new Error(i);case 2:throw new Error(e);case 3:throw new Error(s)}},publicKeyCombine(e,r=!0,n){a(Array.isArray(e),"Expected public keys to be an Array"),a(e.length>0,"Expected public keys array will have more than zero items");for(const t of e)u("public key",t,[33,65]);switch(h(r),n=c(n,r?33:65),t.publicKeyCombine(n,e)){case 0:return n;case 1:throw new Error(i);case 2:throw new Error("The sum of the public keys is not valid");case 3:throw new Error(s)}},publicKeyTweakAdd(e,n,s=!0,o){switch(u("public key",e,[33,65]),u("tweak",n,32),h(s),o=c(o,s?33:65),t.publicKeyTweakAdd(o,e,n)){case 0:return o;case 1:throw new Error(i);case 2:throw new Error(r)}},publicKeyTweakMul(e,r,s=!0,o){switch(u("public key",e,[33,65]),u("tweak",r,32),h(s),o=c(o,s?33:65),t.publicKeyTweakMul(o,e,r)){case 0:return o;case 1:throw new Error(i);case 2:throw new Error(n)}},signatureNormalize(e){switch(u("signature",e,64),t.signatureNormalize(e)){case 0:return e;case 1:throw new Error(o)}},signatureExport(r,n){u("signature",r,64);const i={output:n=c(n,72),outputlen:72};switch(t.signatureExport(i,r)){case 0:return n.slice(0,i.outputlen);case 1:throw new Error(o);case 2:throw new Error(e)}},signatureImport(r,n){switch(u("signature",r),n=c(n,64),t.signatureImport(n,r)){case 0:return n;case 1:throw new Error(o);case 2:throw new Error(e)}},ecdsaSign(r,n,i={},s){u("message",r,32),u("private key",n,32),a("Object"===f(i),"Expected options to be an Object"),void 0!==i.data&&u("options.data",i.data),void 0!==i.noncefn&&a("Function"===f(i.noncefn),"Expected options.noncefn to be a Function");const o={signature:s=c(s,64),recid:null};switch(t.ecdsaSign(o,r,n,i.data,i.noncefn)){case 0:return o;case 1:throw new Error("The nonce generation function failed, or the private key was invalid");case 2:throw new Error(e)}},ecdsaVerify(e,r,n){switch(u("signature",e,64),u("message",r,32),u("public key",n,[33,65]),t.ecdsaVerify(e,r,n)){case 0:return!0;case 3:return!1;case 1:throw new Error(o);case 2:throw new Error(i)}},ecdsaRecover(r,n,i,s=!0,l){switch(u("signature",r,64),a("Number"===f(n)&&n>=0&&n<=3,"Expected recovery id to be a Number within interval [0, 3]"),u("message",i,32),h(s),l=c(l,s?33:65),t.ecdsaRecover(l,r,n,i)){case 0:return l;case 1:throw new Error(o);case 2:throw new Error("Public key could not be recover");case 3:throw new Error(e)}},ecdh(e,r,n={},s){switch(u("public key",e,[33,65]),u("private key",r,32),a("Object"===f(n),"Expected options to be an Object"),void 0!==n.data&&u("options.data",n.data),void 0!==n.hashfn?(a("Function"===f(n.hashfn),"Expected options.hashfn to be a Function"),void 0!==n.xbuf&&u("options.xbuf",n.xbuf,32),void 0!==n.ybuf&&u("options.ybuf",n.ybuf,32),u("output",s)):s=c(s,32),t.ecdh(s,e,r,n.data,n.hashfn,n.xbuf,n.ybuf)){case 0:return s;case 1:throw new Error(i);case 2:throw new Error("Scalar was invalid (zero or overflow)")}}})},73596:(t,e,r)=>{const n=r(89547).gW,i=r(58334),s=r(76857).lW,o=r(22028),a=s.from("01","hex"),{HARDENED_OFFSET:u}=r(22028),h=[44+u,u,u,1,0],c={LEGACY:0,SEGWIT:5,TESTNET:111,SEGWIT_TESTNET:196,SEGWIT_NATIVE_V0:208,SEGWIT_NATIVE_V0_TESTNET:240};e.addressVersion=c;const f={P2PKH:1,P2SH:2,P2SH_P2WPKH:3,P2WPKH_V0:4};function l(t,e){return s.concat([t,e])}function p(t){const e=s.alloc(4);return e.writeUInt32LE(t),e}function d(t){let e;return t<253?(e=s.alloc(1),e.writeUInt8(t)):t<=65535?(e=s.alloc(3),e.writeUInt8(253,0),e.writeUInt16LE(t,1)):t<4294967295?(e=s.alloc(5),e.writeUInt8(254,0),e.writeUInt32LE(t,1)):(e=s.alloc(9),e.writeUInt8(255,0),e.writeUInt32LE(t>>>0,1),e.writeUInt32LE(t/4294967296|0,5)),e}function g(t,e,r){"number"==typeof t&&(t=t.toString(16));const n=s.alloc(8),i=t.length%2==0?t.toString(16):`0${t.toString(16)}`;return s.from(i,"hex").reverse().copy(n,0),n.copy(e,r),n}function y(t){let e,r;try{e=i.decode(t)[0],r=i.decode(t).slice(1)}catch(i){try{const i=n.decode(t);if("bc"===i.prefix)e=208;else{if("tb"!==i.prefix)throw new Error("Unsupported prefix: must be bc or tb.");e=240}if(0!==i.words[0])throw new Error(`Unsupported segwit version: must be 0, got ${i.words[0]}`);r=s.from(n.fromWords(i.words.slice(1)))}catch(e){throw new Error(`Unable to decode address: ${t}: ${e.message}`)}}return{versionByte:e,pkh:r}}e.scriptTypes=f,e.buildBitcoinTxRequest=function(t){try{const{prevOuts:e,recipient:r,value:n,changePath:i=h,fee:a,isSegwit:u=null,changeVersion:l="SEGWIT",spenderScriptType:p=null}=t;if(5!==i.length)throw new Error("Please provide a full change path.");const d=s.alloc(59+69*e.length);let w=0;if(void 0===c[l])throw new Error("Invalid change version specified.");d.writeUInt8(c[l]),w++,d.writeUInt32LE(i.length,w),w+=4;for(let t=0;t<i.length;t++)d.writeUInt32LE(i[t],w),w+=4;d.writeUInt32LE(a,w),w+=4;const E=y(r);d.writeUInt8(E.versionByte,w),w++,E.pkh.copy(d,w),w+=E.pkh.length,g(n,d,w),w+=8,d.writeUInt8(e.length,w),w++;let m,b=0;if(null!==p&&f[p])m=f[p];else{if(null===u)throw new Error("Unsupported spender script type or none provided.");m=!0===u?f.P2SH_P2WPKH:f.P2PKH}return e.forEach((t=>{if(!t.signerPath||5!==t.signerPath.length)throw new Error("Full recipient path not specified ");d.writeUInt32LE(t.signerPath.length,w),w+=4;for(let e=0;e<t.signerPath.length;e++)d.writeUInt32LE(t.signerPath[e],w),w+=4;d.writeUInt32LE(t.index,w),w+=4,g(t.value,d,w),w+=8,b+=t.value,d.writeUInt8(m,w),w++,s.isBuffer(t.txHash)||(t.txHash=s.from(t.txHash,"hex")),t.txHash.copy(d,w),w+=t.txHash.length})),{payload:d,spenderScriptType:m,schema:o.signingSchema.BTC_TRANSFER,origData:t,changeData:{changeVersion:l,value:b-(n+a)}}}catch(t){return{err:t}}},e.serializeTx=function(t){const{inputs:e,outputs:r,spenderScriptType:n,lockTime:i=0,crypto:o}=t;let u=s.alloc(4),h=0;u.writeUInt32LE(2,h),h+=4,n===f.P2SH_P2WPKH&&(u=l(u,s.from("00","hex")),u=l(u,s.from("01","hex")));const w=d(e.length);u=l(u,w),h+=w.length,e.forEach((t=>{u=l(u,t.hash.reverse()),h+=t.hash.length;const e=p(t.index);if(u=l(u,e),h+=e.length,n===f.P2SH_P2WPKH){const e=function(t,e){const r=s.alloc(22),n=e.createHash("sha256").update(t).digest(),i=e.createHash("rmd160").update(n).digest();return r.writeUInt8(0),r.writeUInt8(i.length,1),i.copy(r,2),r}(t.pubkey,o),r=d(e.length),n=s.concat([r,e]),i=d(n.length);u=l(u,i),h+=i.length,u=l(u,n),h+=n.length}else{const e=function(t,e){const r=d((t=s.concat([t,a])).length),n=d(e.length),i=s.concat([r,t,n,e]),o=d(i.length);return s.concat([o,i])}(t.sig,t.pubkey);u=l(u,e),h+=e.length}const r=p(4294967295);u=l(u,r),h+=r.length}));const E=d(r.length);if(u=l(u,E),h+=E.length,r.forEach((t=>{const e=function(t){const e=s.alloc(8);return g(t,e,0),e}(t.value);u=l(u,e),h+=e.length;const r=function(t){const e=y(t);switch(e.versionByte){case c.SEGWIT_NATIVE_V0:case c.SEGWIT_NATIVE_V0_TESTNET:return function(t){const e=s.alloc(2+t.length);return e.writeUInt8(0,0),e.writeUInt8(t.length,1),t.copy(e,2),e}(e.pkh);case c.SEGWIT:case c.SEGWIT_TESTNET:return function(t){const e=s.alloc(3+t.length);let r=0;return e.writeUInt8(169,r),r++,e.writeUInt8(t.length,r),r++,t.copy(e,r),r+=t.length,e.writeUInt8(135,r),r++,e}(e.pkh);case c.LEGACY:case c.TESTNET:return function(t){const e=s.alloc(5+t.length);let r=0;return e.writeUInt8(118,r),r++,e.writeUInt8(169,r),r++,e.writeUInt8(t.length,r),r++,t.copy(e,r),r+=t.length,e.writeUInt8(136,r),r++,e.writeUInt8(172,r),r++,e}(e.pkh);default:throw new Error(`Unknown version byte: ${e.versionByte}. Cannot build BTC transaction.`)}}(t.recipient),n=d(r.length);u=l(u,n),h+=n.length,u=l(u,r),h+=r.length})),n===f.P2SH_P2WPKH){const t=[],r=[];for(let n=0;n<e.length;n++)t.push(e[n].sig),r.push(e[n].pubkey);const n=function(t,e){let r=s.alloc(0);const n=s.alloc(1);n.writeUInt8(2);for(let i=0;i<t.length;i++){const o=s.concat([t[i],a]),u=d(o.length),h=e[i],c=d(h.length);r=s.concat([r,n,u,o,c,h])}return r}(t,r);u=l(u,n),h+=n.length}return s.concat([u,p(i)]).toString("hex")},e.getBitcoinAddress=function(t,e){return i.encode(s.concat([s.from([e]),t]))}},35362:(t,e,r)=>{const n=r(69912),i=r(80569),s=r(73596),o=r(25389),{buildAddAbiPayload:a,abiParsers:u,MAX_ABI_DEFS:h}=r(26103),{isValidAssetPath:c,isValidCoinType:f,signReqResolver:l,aes256_decrypt:p,aes256_encrypt:d,parseDER:g,checksum:y,ensureHexBuffer:w,getP256KeyPair:E,getP256KeyPairFromPub:m,parseLattice1Response:b,toPaddedDER:v}=r(51757),{getFwVersionConst:_,ADDR_STR_LEN:S,ENC_MSG_LEN:A,decResLengths:I,deviceCodes:T,encReqCodes:U,responseCodes:R,REQUEST_TYPE_BYTE:x,VERSION_BYTE:P,messageConstants:B,BASE_URL:N,signingSchema:L}=r(22028),O=r(76857).lW,k=O.alloc(32);t.exports=class{constructor({baseUrl:t,crypto:e,name:r,privKey:n,timeout:i,retryCount:s}={}){if(r&&r.length>24)throw new Error("name must be less than 24 characters");if(!e)throw new Error("crypto provider is required");this.baseUrl=t||N,this.crypto=e,this.name=r||"Unknown",this.privKey=n||this.crypto.randomBytes(32),this.key=E(this.privKey),this.ephemeralPub=null,this.sharedSecret=null,this.timeout=i||6e4,this.deviceId=null,this.isPaired=!1,this.retryCount=s||3,this.activeWallets={internal:{uid:k,name:null,capabilities:null,external:!1},external:{uid:k,name:null,capabilities:null,external:!0}}}connect(t,e){if("function"==typeof t){if(!this.deviceId)return e("No device ID has been stored. Please connect with your device ID first.");e=t}else this.deviceId=t;const r=this._buildRequest(T.CONNECT,this.pubKeyBytes());this._request(r,((t,r)=>t?e(t):(this.isPaired=this._handleConnect(r)||!1,this.isPaired?void this._getActiveWallet((t=>e(t,this.isPaired)),!0):e(null))))}pair(t,e){const r=this.pubKeyBytes(),n=O.alloc(25);if(this.name.length>24)return e("Name is too many characters. Please change it to <25 characters.");n.write(this.name);const i=O.concat([r,n,O.from(t)]),s=this.crypto.createHash("sha256").update(i).digest(),o=this.key.sign(s),a=v(o),u=O.concat([n,a]),h=this._buildEncRequest(U.FINALIZE_PAIRING,u);this._request(h,((t,r)=>{if(t)return e(t);const n=this._handlePair(r);if(n)return e(n);this._getActiveWallet((t=>t?e(t):e(null,this.hasActiveWallet())),!0)}))}test(t,e){if(!t.payload)return e("First argument must contain `testID` and `payload` fields.");const r=O.alloc(506);r.writeUInt32BE(t.testID,0),r.writeUInt16BE(t.payload.length,4),t.payload.copy(r,6);const n=this._buildEncRequest(U.TEST,r);this._request(n,((t,r)=>{if(t)return e(t);const n=this._handleEncResponse(r,I.test);return null!==n.err?e(n.err):e(null,n.data.slice(65))}))}getAddresses(t,e){const{startPath:r,n:i,skipCache:s=!0}=t;if(void 0===r||void 0===i)return e("Please provide `startPath` and `n` options");if(r.length<2||r.length>5)return e("Path must include between 2 and 5 indices");if(i>10)return e("You may only request 10 addresses at once.");if(!1===s&&!1===c(r)||!0===s&&!1===f(r))return e("Parent path is not supported");const o=_(this.fwVersion);let a=53;if(o.varAddrPathSzAllowed)a+=1;else if(5!==r.length)return e("Your Lattice firmware only supports derivation paths with 5 indices. Please upgrade.");const u=O.alloc(a);let h=0;const l=this.getActiveWallet();if(null===l)return e("No active wallet.");l.uid.copy(u,h),h+=32,o.varAddrPathSzAllowed&&(u.writeUInt8(r.length,h),h+=1);for(let t=0;t<5;t++)t<=r.length&&u.writeUInt32BE(r[t],h),h+=4;let p;if(!0===o.addrFlagsAllowed){const t=!0===s?n.nibble.read(1):n.nibble.read(0),e=n.nibble.read(i);p=n.byte.write(t.concat(e))}else p=i;u.writeUInt8(p,h),h++;const d=this._buildEncRequest(U.GET_ADDRESSES,u);return this._request(d,((t,r)=>{if(t)return e(t);const n=this._handleGetAddresses(r);return n.err?e(n.err):e(null,n.data)}))}sign(t,e,r=null,n=null){const{currency:i}=t;let{data:s}=t;if(void 0===i||void 0===s)return e("Please provide `currency` and `data` options");if(void 0===l[i])return e("Unsupported currency");const o=_(this.fwVersion);let a,u,h;if(s={fwConstants:o,...s},null!==r&&null!==n)a=r,u=O.concat([n,a.extraDataPayloads.shift()]),h=L.EXTRA_DATA;else{if(a=l[i](s),void 0!==a.err)return e(a.err);if(a.payload.length>o.reqMaxDataSz)return e("Transaction is too large");u=a.payload,h=a.schema}const c=O.alloc(2+o.reqMaxDataSz);let f=0;const p=a.extraDataPayloads&&Number(a.extraDataPayloads.length>0);c.writeUInt8(p,f),f+=1,c.writeUInt8(h,f),f+=1;const d=this.getActiveWallet();if(null===d)return e("No active wallet.");d.uid.copy(c,f),f+=d.uid.length,u.copy(c,f);const g=this._buildEncRequest(U.SIGN_TRANSACTION,c);return this._request(g,((s,o,u)=>{if(u===R.RESP_ERR_WALLET_NOT_PRESENT)this._getActiveWallet((i=>i?e(i):this.sign(t,e,r,n)));else{if(!s){if(p){const i=this._handleEncResponse(o,I.sign);return n=i.data.slice(65,73),r||(r=a),this.sign(t,e,r,n)}{const t=this._handleSign(o,i,a);return e(t.err,t.data)}}if(s)return e(s)}}))}addAbiDefs(t,e,r=null){const n=t.slice(0,h);let i;t=t.slice(h);try{i=a(n)}catch(t){return e(t)}const s=O.alloc(i.length+10);s.writeUInt16LE(t.length),null!==r&&r.copy(s,2),i.copy(s,10);const o=this._buildEncRequest(U.ADD_ABI_DEFS,s);return this._request(o,((n,i,s)=>{if(s&&s!==R.RESP_SUCCESS)return e("Error making request.");if(n)return e(n);const o=this._handleEncResponse(i,I.addAbiDefs);if(r=o.data.slice(65,73),0===t.length)return e(null);this.addAbiDefs(t,e,r,t)}))}addPermissionV0(t,e){const{currency:r,timeWindow:n,limit:i,decimals:s,asset:o}=t;if(!r||void 0===n||void 0===i||void 0===s||null===n||null===i||null===s)return e("currency, timeWindow, decimals, and limit are all required options.");if(0===n||0===i)return e("Time window and spending limit must be positive.");let a=r;o&&(a+=`_${o}`);const u=O.alloc(293);if(O.from(a).length>255)return e("Asset name too long.");O.from(a).copy(u,0);const h=w(i);if(h.length>32)return e("Limit too large.");h.copy(u,32-h.length+256),u.writeUInt32BE(n,288),u.writeUInt8(s,292);const c=this._buildEncRequest(U.ADD_PERMISSION_V0,u);return this._request(c,((r,n,i)=>{if(i===R.RESP_ERR_WALLET_NOT_PRESENT)this._getActiveWallet((r=>r?e(r):this.addPermissionV0(t,e)));else{if(!r){const t=this._handleEncResponse(n,I.finalizePair);return t.err?e(t.err):e(null)}if(r)return e(r)}}))}_getActiveWallet(t,e=!1){if(!0===e||!0!==this.hasActiveWallet()&&!0===this.isPaired){const e=O.alloc(0),r=this._buildEncRequest(U.GET_WALLETS,e);return this._request(r,((e,r)=>e?(this._resetActiveWallets(),t(e)):t(this._handleGetWallets(r))))}return t(null)}_getSharedSecret(){return O.from(this.key.derive(this.ephemeralPub.getPublic()).toArray("be",32))}_getEphemId(){if(null===this.ephemeralPub)return null;const t=this._getSharedSecret();return this.crypto.createHash("sha256").update(t).digest().slice(0,4)}_buildEncRequest(t,e){const r=parseInt(this._getEphemId().toString("hex"),16),n=O.concat([O.from([t]),e]),i=y(n),s=O.alloc(n.length+4);n.copy(s,0),s.writeUInt32LE(i,n.length);const o=this._getSharedSecret(),a=d(s,o),u=O.alloc(A+4);return u.writeUInt32LE(r,0),a.copy(u,4),this._buildRequest(T.ENCRYPTED_REQUEST,u)}_buildRequest(t,e){let r=e&&O.isBuffer(e)?e.length+1:1;t===T.ENCRYPTED_REQUEST&&(r=1+e.length);let n=0;const i=O.alloc(r+8);n=i.writeUInt8(P,n),n=i.writeUInt8(x,n);const s=this.crypto.randomBytes(4);n=i.writeUInt32BE(parseInt(`0x${s.toString("hex")}`),n),n=i.writeUInt16BE(r,n),n=i.writeUInt8(t,n),r>1&&(n=e.copy(i,n));const o=y(i),a=O.alloc(i.length+4);return n=i.copy(a),a.writeUInt32BE(o,n),a}_request(t,e,r=this.retryCount){if(!this.deviceId)return e("Serial is not set. Please set it and try again.");const n=`${this.baseUrl}/${this.deviceId}`;i.post(n).timeout(this.timeout).send({data:t}).then((n=>{if(!n||!n.body)return e(`Invalid response: ${n}`);if(200!==n.body.status)return e(`Error code ${n.body.status}: ${n.body.message}`);const i=b(n.body.message);return(i.responseCode===R.RESP_ERR_DEV_BUSY||i.responseCode===R.RESP_ERR_GCE_TIMEOUT)&&r>0?setTimeout((()=>{this._request(t,e,r-1)}),3e3):(i.responseCode===R.RESP_ERR_WALLET_NOT_PRESENT&&this._resetActiveWallets(),i.err?e(i.err):e(null,i.data,i.responseCode))})).catch((t=>{const r="ECONNABORTED"===t.code&&"ETIME"===t.errno;return e(r?"Timeout waiting for device. Please ensure it is connected to the internet and try again in a minute.":"Failed to make request to device.")}))}_handleConnect(t){let e=0;const r=t.readUInt8(e);e++;const n=t.slice(e,e+65).toString("hex");return e+=65,this.fwVersion=t.slice(e,e+4),this.ephemeralPub=m(n),r===B.PAIRED}_handleEncResponse(t,e){const r=this._getSharedSecret(),n=t.slice(0,A),i=p(n,r);e+=65;const s=i.slice(0,e),o=parseInt(`0x${i.slice(e,e+4).toString("hex")}`),a=y(s);if(o!==a)return{err:`Checksum mismatch in response from Lattice (calculated ${a}, wanted ${o})`};const u=i.slice(0,65).toString("hex");try{return this.ephemeralPub=m(u),{err:null,data:i}}catch(t){return{err:`Error handling getAddresses response: ${t.toString()}`}}}_handlePair(t){const e=this._handleEncResponse(t,I.finalizePair);return e.err?e.err:(this.pairingSalt=null,this.isPaired=!0,null)}_handleGetAddresses(t){const e=this._handleEncResponse(t,I.getAddresses);if(null!==e.err)return e;const r=e.data;let n=65;const i=[];for(;n+4<I.getAddresses;){const t=r.slice(n,n+S);n+=S;const e=t.indexOf(0);e>0&&i.push(t.slice(0,e).toString())}return{data:i,err:null}}_handleGetWallets(t){const e=this._handleEncResponse(t,I.getWallets);if(null!==e.err)return e;const r=e.data;let n,i=65,s=!1;return n=r.slice(i,i+32),this.activeWallets.internal.uid=n,this.activeWallets.internal.capabilities=r.readUInt32BE(i+32),this.activeWallets.internal.name=r.slice(i+36,i+71),n.equals(k)||(s=!0),i+=71,n=r.slice(i,i+32),this.activeWallets.external.uid=n,this.activeWallets.external.capabilities=r.readUInt32BE(i+32),this.activeWallets.external.name=r.slice(i+36,i+71),n.equals(k)||(s=!0),!0===s?null:"No active wallet."}_handleSign(t,e,r=null){const n=this._handleEncResponse(t,I.sign);if(null!==n.err)return{err:n.err};let i=65;const a=n.data;let u;if("BTC"===e){const t=s.addressVersion[r.changeData.changeVersion],e=a.slice(i,i+20);i+=20,u=s.getBitcoinAddress(e,t)}const h={err:null,data:null};if("BTC"===e){const t=33,e=[],n=[];let o=0;for(;i<a.length&&48===a[i];){const r=i,s=i+2+a[i+1];n.push(a.slice(r,s));const u=o*t+825,h=(o+1)*t+825;e.push(a.slice(u,h)),i+=74,o+=1}const c={inputs:[],outputs:[],spenderScriptType:r.spenderScriptType,network:r.origData.network,crypto:this.crypto};c.outputs.push({value:r.origData.value,recipient:r.origData.recipient}),r.changeData.value>0&&c.outputs.push({value:r.changeData.value,recipient:u});for(let t=0;t<n.length;t++)c.inputs.push({hash:r.origData.prevOuts[t].txHash,index:r.origData.prevOuts[t].index,sig:n[t],pubkey:e[t]});const f=s.serializeTx(c);let l=f;!0===c.isSegwitSpend&&(c.isSegwitSpend=!1,l=s.serializeTx(c));let p=this.crypto.createHash("sha256").update(O.from(l,"hex")).digest();p=this.crypto.createHash("sha256").update(p).digest().reverse().toString("hex"),h.data={tx:f,txHash:p,changeRecipient:u,sigs:n}}else if("ETH"===e){const t=g(a.slice(i,i+2+a[i+1]));i+=74;const e=a.slice(i,i+20),n=o.buildEthRawTx(r,t,e,r.useEIP155);h.data={tx:`0x${n}`,txHash:`0x${o.hashTransaction(n)}`,sig:{v:t.v,r:t.r.toString("hex"),s:t.s.toString("hex")},signer:e}}else if("ETH_MSG"===e){const t=g(a.slice(i,i+2+a[i+1]));i+=74;const e=a.slice(i,i+20),n=o.validateEthereumMsgResponse({signer:e,sig:t},r);h.data={sig:{v:n.v,r:n.r.toString("hex"),s:n.s.toString("hex")},signer:e}}return h}_resetActiveWallets(){this.activeWallets.internal.uid=k,this.activeWallets.internal.name=null,this.activeWallets.internal.capabilities=null,this.activeWallets.external.uid=k,this.activeWallets.external.name=null,this.activeWallets.external.capabilities=null}getActiveWallet(){return k.equals(this.activeWallets.external.uid)?k.equals(this.activeWallets.internal.uid)?null:this.activeWallets.internal:this.activeWallets.external}hasActiveWallet(){return null!==this.getActiveWallet()}pubKeyBytes(t=!1){const e=this.key.getPublic().encode("hex"),r=O.from(e,"hex");if(!0===t){const t=r.slice(1,33).reverse(),e=r.slice(33,65).reverse();return O.concat([r[0],t,e])}return r}parseAbi(t,e,r=!1){switch(t){case"etherscan":return u[t](e,r);default:return{err:`No ${t} parser available.`}}}}},22028:t=>{const e={finalizePair:0,getAddresses:1290,sign:1090,getWallets:142,addAbiDefs:8,test:1646};let r=0;Object.keys(e).forEach((t=>{e[t]+82>r&&(r=e[t]+82)}));const n={RESP_SUCCESS:0,RESP_ERR_INVALID_MSG:128,RESP_ERR_UNSUPPORTED_VER:129,RESP_ERR_DEV_BUSY:130,RESP_ERR_USER_TIMEOUT:131,RESP_ERR_USER_DECLINED:132,RESP_ERR_PAIR_FAIL:133,RESP_ERR_PAIR_DISABLED:134,RESP_ERR_PERMISSION_DISABLED:135,RESP_ERR_INTERNAL:136,RESP_ERR_GCE_TIMEOUT:137,RESP_ERR_WALLET_NOT_PRESENT:138,RESP_ERR_DEV_LOCKED:139,RESP_ERR_DISABLED:140,RESP_ERR_ALREADY:141},i={[n.RESP_SUCCESS]:0,[n.RESP_ERR_INVALID_MSG]:"Invalid Request",[n.RESP_ERR_UNSUPPORTED_VER]:"Unsupported Version",[n.RESP_ERR_DEV_BUSY]:"Device Busy",[n.RESP_ERR_USER_TIMEOUT]:"Timeout Waiting for User",[n.RESP_ERR_USER_DECLINED]:"Request Declined by User",[n.RESP_ERR_PAIR_FAIL]:"Pairing Failed",[n.RESP_ERR_PAIR_DISABLED]:"Pairing is Currently Disabled",[n.RESP_ERR_PERMISSION_DISABLED]:"Automated Signing is Currently Disabled",[n.RESP_ERR_INTERNAL]:"Device Error",[n.RESP_ERR_GCE_TIMEOUT]:"Timeout",[n.RESP_ERR_WALLET_NOT_PRESENT]:"Incorrect Wallet UID Provided",[n.RESP_ERR_DEV_LOCKED]:"Device Locked",[n.RESP_ERR_DISABLED]:"Disabled",[n.RESP_ERR_ALREADY]:"Record already exists. You must first remove it on your device."},s={address:1,bool:2,uint8:3,uint16:4,uint24:5,uint32:6,uint40:7,uint48:8,uint56:9,uint64:10,uint72:11,uint80:12,uint88:13,uint96:14,uint104:15,uint112:16,uint120:17,uint128:18,uint136:19,uint144:20,uint152:21,uint160:22,uint168:23,uint176:24,uint184:25,uint192:26,uint200:27,uint208:28,uint216:29,uint224:30,uint232:31,uint240:32,uint248:33,uint256:34,int8:35,int16:36,int24:37,int32:38,int40:39,int48:40,int56:41,int64:42,int72:43,int80:44,int88:45,int96:46,int104:47,int112:48,int120:49,int128:50,int136:51,int144:52,int152:53,int160:54,int168:55,int176:56,int184:57,int192:58,int200:59,int208:60,int216:61,int224:62,int232:63,int240:64,int248:65,int256:66,uint:67,bytes1:69,bytes2:70,bytes3:71,bytes4:72,bytes5:73,bytes6:74,bytes7:75,bytes8:76,bytes9:77,bytes10:78,bytes11:79,bytes12:80,bytes13:81,bytes14:82,bytes15:83,bytes16:84,bytes17:85,bytes18:86,bytes19:87,bytes20:88,bytes21:89,bytes22:90,bytes23:91,bytes24:92,bytes25:93,bytes26:94,bytes27:95,bytes28:96,bytes29:97,bytes30:98,bytes31:99,bytes32:100,bytes:101,string:102},o={...s,tuple1:103,tuple2:104,tuple3:105,tuple4:106,tuple5:107,tuple6:108,tuple7:109,tuple8:110,tuple9:111,tuple10:112,tuple11:113,tuple12:114,tuple13:115,tuple14:116,tuple15:117,tuple16:118,tuple17:119},a={SIGN_PERSONAL:{str:"signPersonal",enumIdx:0},TYPED_DATA:{str:"typedData",enumIdx:1,rawDataMaxLen:1629,typeCodes:s}};t.exports={getFwVersionConst:function(t){const e={extraDataFrameSz:0,extraDataMaxFrames:0};function r(t,e){return t[2]>e[0]||t[2]===e[0]&&t[1]>e[1]||t[2]===e[0]&&t[1]===e[1]&&t[0]>e[2]||t[2]===e[0]&&t[1]===e[1]&&t[0]===e[2]}const n=0===t.length;return!n&&r(t,[0,10,10])&&(e.ethMsgPreHashAllowed=!0),!n&&r(t,[0,10,8])&&(e.prehashAllowed=!0),!n&&r(t,[0,10,5])&&(e.varAddrPathSzAllowed=!0,e.eip712Supported=!0),!n&&r(t,[0,10,4])&&(e.extraDataFrameSz=1500,e.extraDataMaxFrames=1),!n&&r(t,[0,10,4])||!n&&r(t,[0,10,0])?(e.reqMaxDataSz=1678,e.ethMaxDataSz=e.reqMaxDataSz-128,e.ethMaxMsgSz=e.ethMaxDataSz,e.ethMaxGasPrice=2e13,e.addrFlagsAllowed=!0):(e.reqMaxDataSz=1152,e.ethMaxDataSz=e.reqMaxDataSz-128,e.ethMaxMsgSz=e.ethMaxDataSz,e.ethMaxGasPrice=5e11,e.addrFlagsAllowed=!1),e},ADDR_STR_LEN:129,AES_IV:[109,121,115,101,99,114,101,116,112,97,115,115,119,111,114,100],BASE_URL:"https://signing.gridpl.us",ENC_MSG_LEN:r,addressSizes:{BTC:20,ETH:20},decResLengths:e,deviceCodes:{CONNECT:1,ENCRYPTED_REQUEST:2},encReqCodes:{FINALIZE_PAIRING:0,GET_ADDRESSES:1,ADD_PERMISSION:2,SIGN_TRANSACTION:3,GET_WALLETS:4,ADD_PERMISSION_V0:5,ADD_ABI_DEFS:6,TEST:7},ethMsgProtocol:a,messageConstants:{NOT_PAIRED:0,PAIRED:1},responseCodes:n,responseMsgs:i,signingSchema:{BTC_TRANSFER:0,ETH_TRANSFER:1,ERC20_TRANSFER:2,ETH_MSG:3,EXTRA_DATA:4},REQUEST_TYPE_BYTE:2,VERSION_BYTE:1,HARDENED_OFFSET:2147483648,HANDLE_LARGER_CHAIN_ID:255,MAX_CHAIN_ID_BYTES:8,ETH_ABI_LATTICE_FW_TYPE_MAP:o}},25389:(t,e,r)=>{const n=r(44431),i=r(76857).lW,s=r(77756),o=r(22028),a=r(78048),u=r(33645),h=r(91094).keccak256,c=r(66479),f=r(86207);function l(t){let e=t[0];for(;t.length>0&&"0"===e.toString();)e=(t=t.slice(1))[0];return t}function p(t,e,r,n,s){try{const o=new Uint8Array(t);let a=0;const u=g(e.r,32);e.r=u;const h=g(e.s,32);e.s=h;const c=new Uint8Array(i.concat([u,h]));let l=f.ecdsaRecover(c,a,o,!1).slice(1);if(d(l)===r.toString("hex"))return e.v=y(a,s,n),e;if(a=1,l=f.ecdsaRecover(c,a,o,!1).slice(1),d(l)===r.toString("hex"))return e.v=y(a,s,n),e;throw new Error("Invalid Ethereum signature returned.")}catch(t){throw new Error(t)}}function d(t){return h(t).slice(-40)}function g(t,e){const r=i.alloc(e);return t.length<e?(t.copy(r,e-t.length),r):t.slice(-e)}function y(t,e,r=null){if(!1===e||null===r)return i.from(new n(t).plus(27).toString(16),"hex");const s=m(r);return v(`0x${new n(s.toString("hex"),16).times(2).plus(35).plus(t).toString(16)}`)}function w(t){return/^[\x00-\x7F]+$/.test(t)}e.buildEthereumMsgRequest=function(t){if(!t.payload||!t.protocol||!t.signerPath)throw new Error("You must provide `payload`, `signerPath`, and `protocol` arguments in the messsage request");if(t.signerPath.length>5||t.signerPath.length<2)throw new Error("Please provide a signer path with 2-5 indices");const e={schema:o.signingSchema.ETH_MSG,payload:null,input:t,msg:null};try{switch(t.protocol){case"signPersonal":return function(t,e){const r=e.fwConstants.ethMaxMsgSz,n=e.fwConstants.varAddrPathSzAllowed,s=24+r+4;let a=0;t.payload=i.alloc(s),t.payload.writeUInt8(o.ethMsgProtocol.SIGN_PERSONAL,0),a+=1;const u=_(e.signerPath,n);u.copy(t.payload,a),a+=u.length;let c=e.payload,f=!1;if("string"==typeof e.payload)if("0x"===e.payload.slice(0,2))c=v(e.payload),f=!1===w(i.from(e.payload.slice(2),"hex").toString());else{if(!1===function(t){for(let e=0;e<t.length;e++)if(t.charCodeAt(e)<32||t.charCodeAt(e)>127)return!1;return!0}(e.payload))throw new Error("Currently, the Lattice can only display ASCII strings.");c=i.from(e.payload)}else if("boolean"==typeof e.displayHex)f=e.displayHex;else{if(!e.payload.toString)throw new Error("Unsupported input data type");f=!1===w(e.payload.toString())}const l=e.fwConstants,p=r+l.extraDataMaxFrames*l.extraDataFrameSz;if(l.ethMsgPreHashAllowed&&c.length>p){t.payload.writeUInt8(f,a),a+=1,t.payload.writeUInt16LE(c.length,a),a+=2;const e=i.from(h(i.concat([T(c.length),c])),"hex");e.copy(t.payload,a),t.prehash=e}else{const r=S(c,e);t.extraDataPayloads=r,t.msg=c,t.payload.writeUInt8(f,a),a+=1,t.payload.writeUInt16LE(c.length,a),a+=2,c.copy(t.payload,a)}return t}(e,t);case"eip712":if(!t.fwConstants.eip712Supported)throw new Error("EIP712 is not supported by your Lattice firmware version. Please upgrade.");return function(t,e){try{const r=e.fwConstants.ethMaxMsgSz,n=e.fwConstants.varAddrPathSzAllowed,a=o.ethMsgProtocol.TYPED_DATA,c=24+r+4;let f=0;t.payload=i.alloc(c),t.payload.writeUInt8(a.enumIdx,0),f+=1;const l=_(e.signerPath,n);l.copy(t.payload,f),f+=l.length;const p=JSON.parse(JSON.stringify(e.payload));if(!p.primaryType||!p.types[p.primaryType])throw new Error("primaryType must be specified and the type must be included.");if(!p.message||!p.domain)throw new Error("message and domain must be specified.");if(0>Object.keys(p.types).indexOf("EIP712Domain"))throw new Error("EIP712Domain type must be defined.");e.payload.message=I(JSON.parse(JSON.stringify(p.message)),JSON.parse(JSON.stringify(p.primaryType)),JSON.parse(JSON.stringify(p.types)),!0),e.payload.domain=I(JSON.parse(JSON.stringify(p.domain)),"EIP712Domain",JSON.parse(JSON.stringify(p.types)),!0),p.domain=I(p.domain,"EIP712Domain",p.types,!1),p.message=I(p.message,p.primaryType,p.types,!1);const d=i.from(s.encode(p)),g=e.fwConstants,y=r+g.extraDataMaxFrames*g.extraDataFrameSz;if(g.ethMsgPreHashAllowed&&d.length>y){t.payload.writeUInt16LE(d.length,f),f+=2;const e=i.from(h(u.TypedDataUtils.encodeDigest(t.input.payload),"hex"),"hex");e.copy(t.payload,f),t.prehash=e}else{const r=S(d,e);t.extraDataPayloads=r,t.payload.writeUInt16LE(d.length,f),f+=2,d.copy(t.payload,f),f+=d.length,t.payload=t.payload.slice(0,f)}return t}catch(t){return{err:`Failed to build EIP712 request: ${t.message}`}}}(e,t);default:throw new Error("Unsupported protocol")}}catch(t){return{err:t.toString()}}},e.validateEthereumMsgResponse=function(t,e){const{signer:r,sig:n}=t,{input:s,msg:o,prehash:a=null}=e;if("signPersonal"===s.protocol)return p(a||i.from(h(i.concat([T(o.length),o])),"hex"),n,r,1,!1);if("eip712"===s.protocol)return p(a||u.TypedDataUtils.encodeDigest(e.input.payload),n,r);throw new Error("Unsupported protocol")},e.buildEthereumTxRequest=function(t){try{let{chainId:e=1}=t;const{signerPath:r,eip155:n=null,fwConstants:s}=t,{extraDataFrameSz:a,extraDataMaxFrames:u,prehashAllowed:f}=s,l=a>0&&u>0,p=s.ethMaxDataSz,d=s.varAddrPathSzAllowed;if("number"!=typeof e&&!1===b(e)&&(e=E[e]),!e)throw new Error("Unsupported chain ID or name");if(!r)throw new Error("`signerPath` not provided");let g=function(t){switch(t){case 3:case 4:return!1;case 1:case 42:case 5:default:return!0}}(e);null!==n&&"boolean"==typeof n&&(g=n),t.value||(t.value=0);const y=[],w=v(t.nonce),S=v(t.gasPrice),I=v(t.gasLimit),T=v(t.to),U=v(t.value),R=v(t.data);y.push(w),y.push(S),y.push(I),y.push(T),y.push(U),y.push(R),!0===g&&(y.push(v(e)),y.push(v(null)),y.push(v(null)));const x=122,P=i.alloc(p+x);let B,N=0;P.writeUInt8(Number(g),N),N++;let L=0;if(!0===function(t){const e=m(t);return 1!==e.length||255===e.readUInt8(0)}(e)){if(B=m(e),L=B.length,L>o.MAX_CHAIN_ID_BYTES)throw new Error("ChainID provided is too large.");P.writeUInt8(o.HANDLE_LARGER_CHAIN_ID,N),N++}else{if(B=v(e),1!==B.length)throw new Error("Error parsing chainID");B.copy(P,N),N+=B.length}const O=_(r,d);if(O.copy(P,N),N+=O.length,w.length>4)throw new Error("Nonce too large");if(w.copy(P,N+(4-w.length)),N+=4,S.length>8)throw new Error("Gas price too large");if(S.copy(P,N+(8-S.length)),N+=8,I.length>4)throw new Error("Gas limit too large");if(I.copy(P,N+(4-I.length)),N+=4,20!==T.length)throw new Error("Invalid `to` address");if(T.copy(P,N),N+=20,U.length>32)throw new Error("Value too large");U.copy(P,N+(32-U.length)),N+=32;const k=[];let D=null;if(R&&R.length>p){const t=L>0?L+1:0,e=R.length+t,r=p+u*a,n=i.alloc(R.length+t);if(t>0?(n.writeUInt8(L,0),B.copy(n,1),R.copy(n,t)):R.copy(n,0),f&&e>r)D=i.from(h(c.encode(y)),"hex");else{if(!l||l&&e>r)throw new Error(`Data field too large (got ${R.length}; must be <=${r-t} bytes)`);A(n.slice(p),a).forEach((t=>{const e=i.alloc(4);e.writeUInt32LE(t.length),k.push(i.concat([e,t]))}))}}return P.writeUInt16BE(R.length,N),N+=2,L>0&&(P.writeUInt8(L,N),N++,B.copy(P,N),N+=L),D?(D.copy(P,N),N+=p):(R.slice(0,p).copy(P,N),N+=p),{rawTx:y,payload:P.slice(0,N),extraDataPayloads:k,schema:o.signingSchema.ETH_TRANSFER,chainId:e,useEIP155:g,signerPath:r}}catch(t){return{err:t.message}}},e.buildEthRawTx=function(t,e,r,n=!0){const s=c.encode(t.rawTx),o=p(i.from(h(s),"hex"),e,r,t.chainId,n),a=t.rawTx.slice(0,6);return a.push(o.v),a.push(l(o.r)),a.push(l(o.s)),c.encode(a).toString("hex")},e.hashTransaction=function(t){return h(i.from(t,"hex"))};const E={mainnet:1,roptsten:3,rinkeby:4,kovan:42,goerli:5};function m(t){let e,r;if(e=!0===b(t)?v(t):v(`0x${new n(t).toString(16)}`),e.length>8)throw new Error("ChainID provided is too large.");return e.length<=2||4===e.length||8===e.length?e:(3===e.length?(r=i.alloc(4),r.writeUInt32BE(t)):e.length<=8&&(r=i.alloc(8),e.copy(r,8-e.length)),r)}function b(t){if("string"!=typeof t)return!1;if("0x"!==t.slice(0,2))return!1;try{return!1===new n(t,16).isNaN()}catch(t){return!1}}function v(t,e=!0){try{if(null===t||0===t&&!0===e)return i.alloc(0);const r="number"==typeof t||function(t){const e=new n(t).toString().split(".").join(""),r=new String(t);return e.slice(0,8)===r.slice(0,8)}(t);return(t=r?`${new n(t).toString(16)}`:"string"==typeof t&&"0x"===t.slice(0,2)?t.slice(2):t.toString("hex")).length%2>0&&(t=`0${t}`),"00"!==t||r?i.from(t,"hex"):i.alloc(0)}catch(e){throw new Error(`Cannot convert ${t.toString()} to hex buffer (${e.toString()})`)}}function _(t,e){const r=i.alloc(24);let n=0;if(e&&t.length>5)throw new Error("Signer path must be <=5 indices.");if(!e&&5!==t.length)throw new Error("Your Lattice firmware only supports 5-index derivation paths. Please upgrade.");r.writeUInt32LE(t.length,n),n+=4;for(let e=0;e<5;e++)e<t.length?r.writeUInt32LE(t[e],n):r.writeUInt32LE(0,n),n+=4;return r}function S(t,e){const{ethMaxMsgSz:r,extraDataFrameSz:n,extraDataMaxFrames:s}=e.fwConstants,o=r,a=n>0&&s>0,u=[];if(t.length>o){const e=o+s*n;if(!a)throw new Error(`Your message is ${t.length} bytes, but can only be a maximum of ${o}`);if(a&&t.length>e)throw new Error(`Your message is ${t.length} bytes, but can only be a maximum of ${e}`);A(t.slice(o),n).forEach((t=>{const e=i.alloc(4);e.writeUInt32LE(t.length),u.push(i.concat([e,t]))}))}return u}function A(t,e){const r=[],n=Math.ceil(t.length/e);let i=0;for(let s=0;s<n;s++)r.push(t.slice(i,i+e)),i+=e;return r}function I(t,e,r,n=!1){try{r[e].forEach((e=>{const u=Object.keys(r).indexOf(e.type)>-1;t[e.name]=!0===u?I(t[e.name],e.type,r,n):function(t,e,r=!1){if("bytes"===e)t=v(t);else if("bytes"===e.slice(0,5)){const r=parseInt(e.slice(5));if((t=v(t)).length!==r)throw new Error(`Expected ${e} type, but got ${t.length} bytes`)}else if("address"===e){if(0===(t=v(t)).length&&(t=i.alloc(20)),20!==t.length)throw new Error(`Address type must be 20 bytes, but got ${t.length} bytes`);!0===r&&(t=`0x${t.toString("hex")}`)}else if(o.ethMsgProtocol.TYPED_DATA.typeCodes[e]&&(e.indexOf("uint")>-1||e.indexOf("int")>-1)){let e=v(t);0===e.length&&(e=i.from("00","hex")),t=!0===r?a.BigNumber.from(`0x${e.toString("hex")}`):(new s.Encoder).semanticTypes[1][0](e.toString("hex"),16)}else"bool"===e&&(t=!0===t?1:0);return t}(t[e.name],e.type,n)}))}catch(t){throw new Error(t.message)}return t}function T(t){return i.from(`Ethereum Signed Message:\n${t.toString()}`,"utf-8")}e.chainIds=E,e.ensureHexBuffer=v},26103:(t,e,r)=>{const n=r(76857).lW,i=r(91094).keccak256,{ETH_ABI_LATTICE_FW_TYPE_MAP:s}=r(22028);function o(t,e=[],r=!1){let n=[];if(t.forEach((t=>{const i=t.type,a={isArray:!1,arraySz:0,name:t.name},u=i.indexOf("["),h=i.indexOf("]");if(i.split("[").length>2)throw new Error("Skipping function with unsupported multidimensional array type");{if(u>-1&&h>-1)if(u>=h);else if(u+1===h)a.isArray=!0;else{const t=parseInt(i.slice(u,h));if(isNaN(t))return a;a.isArray=!0,a.arraySz=t}let c=u>-1?i.slice(0,u):i;if("tuple"===c){if(!0===r)throw new Error("Nested tuples are not supported");c=`tuple${t.components.length}`,n=o(t.components,n,!0)}if(a.latticeTypeIdx=s[c],!a.latticeTypeIdx)throw new Error(`Unsupported type: ${i}`);e.push(a)}})),e.concat(n).length>18)throw new Error("Function has too many parameters for Lattice firmware (18 max)");return e.concat(n)}e.MAX_ABI_DEFS=2,e.buildAddAbiPayload=function(t){if(!t||!Array.isArray(t))throw new Error("Missing definitions.");if(t.length>e.MAX_ABI_DEFS)throw new Error("You may only add 2 ABI definitions per request.");const r=n.alloc(1211);let i=0;return r.writeUInt8(t.length,i),i++,t.forEach((t=>{if(!t.sig||!t.name||!t.params)throw new Error("name, sig, and params must be present for every ABI definition.");const e=n.from(t.sig,"hex");if(4!==e.length)throw new Error("Function signatures must always be four bytes.");if(e.copy(r,i),i+=e.length,n.from(t.name).length>99)throw new Error("Only function names shorter than 99 characters are supported.");n.from(t.name).slice(0,100).copy(r,i),i+=100;const s=Array.isArray(t.params)?t.params.length:0;if(r.writeUInt8(s,i),i++,t.category&&"string"==typeof t.category){const e=n.from(t.category);if(e.length>31)throw new Error(`Category name must be shorter than 31. Got ${e.length}`);e.copy(r,i)}if(i+=32,s>18)throw new Error("Currently only ABI defintions with <=10 parameters are supported.");s>0?(t.params.forEach((t=>{if(void 0===t.name||void 0===t.latticeTypeIdx||void 0===t.isArray||void 0===t.arraySz)throw new Error("name, latticeTypeIdx, isArray, and arraySz must be defined for all ABI params.");n.from(t.name).slice(0,20).copy(r,i),i+=20})),i+=20*(18-s),t.params.forEach((t=>{r.writeUInt8(t.latticeTypeIdx,i),i++,r.writeUInt8(!0===t.isArray,i),i++,r.writeUInt32LE(t.arraySz,i),i+=4})),i+=6*(18-s)):i+=468})),r},e.getFuncSig=function(t){let e=`${t.name}(`;return t.inputs.forEach((t=>{if(t.type.indexOf("tuple")>-1){const r=t.type.slice(t.type.indexOf("tuple")+5);e+="(",t.components.forEach(((r,n)=>{e+=`${r.type}${n===t.components.length-1?"":","}`})),e+=`)${r},`}else e+=`${t.type},`})),t.inputs.length>0&&(e=e.slice(0,e.length-1)),e+=")",i(e).slice(0,8)},e.abiParsers={etherscan:function(t,r=!1){const n=[];return t.forEach((t=>{if(t.name&&t.inputs&&"function"===t.type&&"view"!==t.stateMutability&&!0!==t.constant)try{const r=e.getFuncSig(t),i=o(t.inputs);n.push({name:t.name,sig:r,params:i})}catch(e){if(!0!==r)throw new Error(e);console.error("Failed to load def:",t.name,e.toString())}})),n}}},51757:(t,e,r)=>{const{buildBitcoinTxRequest:n}=r(73596),{buildEthereumTxRequest:i,buildEthereumMsgRequest:s,ensureHexBuffer:o}=r(25389),a=r(76857).lW,u=r(39930),h=r(34606),c=r(86266),{AES_IV:f,responseCodes:l,responseMsgs:p,VERSION_BYTE:d}=r(22028),g=new(0,c.ec)("p256");function y(t){return h.buf(t)>>>0}const w={BTC:n,ETH:i,ETH_MSG:s};t.exports={isValidAssetPath:function(t){const e=2147483648,r=[e,2147483649,2147483708],n=[e];return[2147483697,2147483692].indexOf(t[0])>=0&&r.indexOf(t[1])>=0&&n.indexOf(t[2])>=0&&[0,1].indexOf(t[3])>=0},isValidCoinType:function(t){return[2147483648,2147483649,2147483708].indexOf(t[1])>=0},ensureHexBuffer:o,signReqResolver:w,aes256_decrypt:function(t,e){const r=a.from(f),n=new u.ModeOfOperation.cbc(e,r);return a.from(n.decrypt(t))},aes256_encrypt:function(t,e){const r=a.from(f),n=new u.ModeOfOperation.cbc(e,r),i=t.length%16==0?t:u.padding.pkcs7.pad(t);return a.from(n.encrypt(i))},parseDER:function(t){if(48!==t[0]||2!==t[2])return null;let e=3;const r={r:null,s:null},n=t[e];if(e++,r.r=t.slice(e,e+n),e+=n,2!==t[e])return null;e++;const i=t[e];return e++,r.s=t.slice(e,e+i),r},checksum:y,parseLattice1Response:function(t){const e={err:null,data:null},r=a.from(t,"hex");let n=0;const i=r.readUInt8(n);if(n++,i!==d)return e.err="Incorrect protocol version. Please update your SDK",e;const s=r.readUInt8(n);if(n++,0!==s)return e.err="Incorrect response from Lattice1",e;r.readUInt32BE(n),n+=4;const o=r.readUInt16BE(n);n+=2;const u=r.slice(n,n+o);n+=o;const h=u.readUInt8(0);return h!==l.RESP_SUCCESS?(e.err=`Error from device: ${p[h]?p[h]:"Unknown Error"}`,e.responseCode=h,e):(e.data=u.slice(1,u.length),r.readUInt32BE(n)!==y(r.slice(0,r.length-4))?(e.err="Invalid checksum from device response",e.data=null,e):e)},getP256KeyPair:function(t){return g.keyFromPrivate(t,"hex")},getP256KeyPairFromPub:function(t){return g.keyFromPublic(t,"hex")},toPaddedDER:function(t){const e=a.alloc(74);return a.from(t.toDER()).copy(e),e}}},17745:(t,e,r)=>{"use strict";const{URLWithLegacySupport:n,format:i,URLSearchParams:s,defaultBase:o}=r(82049),a=r(15939);t.exports={URL:n,URLSearchParams:s,format:i,relative:a,defaultBase:o}},15939:(t,e,r)=>{"use strict";const{URLWithLegacySupport:n,format:i}=r(82049);t.exports=(t,e={},r={},s)=>{let o,a=e.protocol?e.protocol.replace(":",""):"http";a=(r[a]||s||a)+":";try{o=new n(t)}catch(t){o={}}const u=Object.assign({},e,{protocol:a||o.protocol,host:e.host||o.host});return new n(t,i(u)).toString()}},82049:t=>{"use strict";const e=self.location?self.location.protocol+"//"+self.location.host:"",r=self.URL;t.exports={URLWithLegacySupport:class{constructor(t="",n=e){this.super=new r(t,n),this.path=this.pathname+this.search,this.auth=this.username&&this.password?this.username+":"+this.password:null,this.query=this.search&&this.search.startsWith("?")?this.search.slice(1):null}get hash(){return this.super.hash}get host(){return this.super.host}get hostname(){return this.super.hostname}get href(){return this.super.href}get origin(){return this.super.origin}get password(){return this.super.password}get pathname(){return this.super.pathname}get port(){return this.super.port}get protocol(){return this.super.protocol}get search(){return this.super.search}get searchParams(){return this.super.searchParams}get username(){return this.super.username}set hash(t){this.super.hash=t}set host(t){this.super.host=t}set hostname(t){this.super.hostname=t}set href(t){this.super.href=t}set origin(t){this.super.origin=t}set password(t){this.super.password=t}set pathname(t){this.super.pathname=t}set port(t){this.super.port=t}set protocol(t){this.super.protocol=t}set search(t){this.super.search=t}set searchParams(t){this.super.searchParams=t}set username(t){this.super.username=t}createObjectURL(t){return this.super.createObjectURL(t)}revokeObjectURL(t){this.super.revokeObjectURL(t)}toJSON(){return this.super.toJSON()}toString(){return this.super.toString()}format(){return this.toString()}},URLSearchParams:self.URLSearchParams,defaultBase:e,format:function(t){if("string"==typeof t)return new r(t).toString();if(!(t instanceof r)){const e=t.username&&t.password?`${t.username}:${t.password}@`:"",r=t.auth?t.auth+"@":"",n=t.port?":"+t.port:"",i=t.protocol?t.protocol+"//":"",s=t.host||"",o=t.hostname||"",a=t.search||(t.query?"?"+t.query:""),u=t.hash||"",h=t.pathname||"";return`${i}${e||r}${s||o+n}${t.path||h+a}${u}`}}}},66479:(t,e,r)=>{const n=r(48583),i=r(99906).lW;function s(t,e){if("00"===t.slice(0,2))throw new Error("invalid RLP: extra zeros");return parseInt(t,e)}function o(t,e){if(t<56)return new i([t+e]);var r=h(t),n=h(e+55+r.length/2);return new i(n+r,"hex")}function a(t){var e,r,n,o,u,h=[],c=t[0];if(c<=127)return{data:t.slice(0,1),remainder:t.slice(1)};if(c<=183){if(e=c-127,n=128===c?new i([]):t.slice(1,e),2===e&&n[0]<128)throw new Error("invalid rlp encoding: byte must be less 0x80");return{data:n,remainder:t.slice(e)}}if(c<=191){if(r=c-182,e=s(t.slice(1,r).toString("hex"),16),(n=t.slice(r,e+r)).length<e)throw new Error("invalid RLP");return{data:n,remainder:t.slice(e+r)}}if(c<=247){for(e=c-191,o=t.slice(1,e);o.length;)u=a(o),h.push(u.data),o=u.remainder;return{data:h,remainder:t.slice(e)}}var f=(r=c-246)+(e=s(t.slice(1,r).toString("hex"),16));if(f>t.length)throw new Error("invalid rlp: total length is larger than the data");if(0===(o=t.slice(r,f)).length)throw new Error("invalid rlp, List has a invalid length");for(;o.length;)u=a(o),h.push(u.data),o=u.remainder;return{data:h,remainder:t.slice(f)}}function u(t){return"0x"===t.slice(0,2)}function h(t){var e=t.toString(16);return e.length%2&&(e="0"+e),e}function c(t){if(!i.isBuffer(t))if("string"==typeof t)t=u(t)?new i(((r="string"!=typeof(n=t)?n:u(n)?n.slice(2):n).length%2&&(r="0"+r),r),"hex"):new i(t);else if("number"==typeof t)t?(e=h(t),t=new i(e,"hex")):t=new i([]);else if(null==t)t=new i([]);else{if(!t.toArray)throw new Error("invalid type");t=new i(t.toArray())}var e,r,n;return t}e.encode=function(t){if(t instanceof Array){for(var r=[],n=0;n<t.length;n++)r.push(e.encode(t[n]));var s=i.concat(r);return i.concat([o(s.length,192),s])}return 1===(t=c(t)).length&&t[0]<128?t:i.concat([o(t.length,128),t])},e.decode=function(t,e){if(!t||0===t.length)return new i([]);var r=a(t=c(t));return e?r:(n.equal(r.remainder.length,0,"invalid remainder"),r.data)},e.getLength=function(t){if(!t||0===t.length)return new i([]);var e=(t=c(t))[0];if(e<=127)return t.length;if(e<=183)return e-127;if(e<=191)return e-182;if(e<=247)return e-191;var r=e-246;return r+s(t.slice(1,r).toString("hex"),16)}},99906:(t,e,r)=>{"use strict";var n=r(79742),i=r(80645),s="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.lW=u,e.h2=50;var o=2147483647;function a(t){if(t>o)throw new RangeError('The value "'+t+'" is invalid for option "size"');var e=new Uint8Array(t);return Object.setPrototypeOf(e,u.prototype),e}function u(t,e,r){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return f(t)}return h(t,e,r)}function h(t,e,r){if("string"==typeof t)return function(t,e){if("string"==typeof e&&""!==e||(e="utf8"),!u.isEncoding(e))throw new TypeError("Unknown encoding: "+e);var r=0|g(t,e),n=a(r),i=n.write(t,e);return i!==r&&(n=n.slice(0,i)),n}(t,e);if(ArrayBuffer.isView(t))return function(t){if(H(t,Uint8Array)){var e=new Uint8Array(t);return p(e.buffer,e.byteOffset,e.byteLength)}return l(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(H(t,ArrayBuffer)||t&&H(t.buffer,ArrayBuffer))return p(t,e,r);if("undefined"!=typeof SharedArrayBuffer&&(H(t,SharedArrayBuffer)||t&&H(t.buffer,SharedArrayBuffer)))return p(t,e,r);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');var n=t.valueOf&&t.valueOf();if(null!=n&&n!==t)return u.from(n,e,r);var i=function(t){if(u.isBuffer(t)){var e=0|d(t.length),r=a(e);return 0===r.length||t.copy(r,0,0,e),r}return void 0!==t.length?"number"!=typeof t.length||j(t.length)?a(0):l(t):"Buffer"===t.type&&Array.isArray(t.data)?l(t.data):void 0}(t);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return u.from(t[Symbol.toPrimitive]("string"),e,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function f(t){return c(t),a(t<0?0:0|d(t))}function l(t){for(var e=t.length<0?0:0|d(t.length),r=a(e),n=0;n<e;n+=1)r[n]=255&t[n];return r}function p(t,e,r){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(r||0))throw new RangeError('"length" is outside of buffer bounds');var n;return n=void 0===e&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,e):new Uint8Array(t,e,r),Object.setPrototypeOf(n,u.prototype),n}function d(t){if(t>=o)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o.toString(16)+" bytes");return 0|t}function g(t,e){if(u.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||H(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);var r=t.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;for(var i=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return M(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return F(t).length;default:if(i)return n?-1:M(t).length;e=(""+e).toLowerCase(),i=!0}}function y(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return P(this,e,r);case"utf8":case"utf-8":return T(this,e,r);case"ascii":return R(this,e,r);case"latin1":case"binary":return x(this,e,r);case"base64":return I(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return B(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function w(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function E(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),j(r=+r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=u.from(e,n)),u.isBuffer(e))return 0===e.length?-1:m(t,e,r,n,i);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):m(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function m(t,e,r,n,i){var s,o=1,a=t.length,u=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;o=2,a/=2,u/=2,r/=2}function h(t,e){return 1===o?t[e]:t.readUInt16BE(e*o)}if(i){var c=-1;for(s=r;s<a;s++)if(h(t,s)===h(e,-1===c?0:s-c)){if(-1===c&&(c=s),s-c+1===u)return c*o}else-1!==c&&(s-=s-c),c=-1}else for(r+u>a&&(r=a-u),s=r;s>=0;s--){for(var f=!0,l=0;l<u;l++)if(h(t,s+l)!==h(e,l)){f=!1;break}if(f)return s}return-1}function b(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var s=e.length;n>s/2&&(n=s/2);for(var o=0;o<n;++o){var a=parseInt(e.substr(2*o,2),16);if(j(a))return o;t[r+o]=a}return o}function v(t,e,r,n){return z(M(e,t.length-r),t,r,n)}function _(t,e,r,n){return z(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function S(t,e,r,n){return z(F(e),t,r,n)}function A(t,e,r,n){return z(function(t,e){for(var r,n,i,s=[],o=0;o<t.length&&!((e-=2)<0);++o)n=(r=t.charCodeAt(o))>>8,i=r%256,s.push(i),s.push(n);return s}(e,t.length-r),t,r,n)}function I(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function T(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var s,o,a,u,h=t[i],c=null,f=h>239?4:h>223?3:h>191?2:1;if(i+f<=r)switch(f){case 1:h<128&&(c=h);break;case 2:128==(192&(s=t[i+1]))&&(u=(31&h)<<6|63&s)>127&&(c=u);break;case 3:s=t[i+1],o=t[i+2],128==(192&s)&&128==(192&o)&&(u=(15&h)<<12|(63&s)<<6|63&o)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:s=t[i+1],o=t[i+2],a=t[i+3],128==(192&s)&&128==(192&o)&&128==(192&a)&&(u=(15&h)<<18|(63&s)<<12|(63&o)<<6|63&a)>65535&&u<1114112&&(c=u)}null===c?(c=65533,f=1):c>65535&&(c-=65536,n.push(c>>>10&1023|55296),c=56320|1023&c),n.push(c),i+=f}return function(t){var e=t.length;if(e<=U)return String.fromCharCode.apply(String,t);for(var r="",n=0;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=U));return r}(n)}u.TYPED_ARRAY_SUPPORT=function(){try{var t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),u.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(u.prototype,"parent",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.buffer}}),Object.defineProperty(u.prototype,"offset",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.byteOffset}}),u.poolSize=8192,u.from=function(t,e,r){return h(t,e,r)},Object.setPrototypeOf(u.prototype,Uint8Array.prototype),Object.setPrototypeOf(u,Uint8Array),u.alloc=function(t,e,r){return function(t,e,r){return c(t),t<=0?a(t):void 0!==e?"string"==typeof r?a(t).fill(e,r):a(t).fill(e):a(t)}(t,e,r)},u.allocUnsafe=function(t){return f(t)},u.allocUnsafeSlow=function(t){return f(t)},u.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==u.prototype},u.compare=function(t,e){if(H(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),H(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;for(var r=t.length,n=e.length,i=0,s=Math.min(r,n);i<s;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=u.allocUnsafe(e),i=0;for(r=0;r<t.length;++r){var s=t[r];if(H(s,Uint8Array))i+s.length>n.length?u.from(s).copy(n,i):Uint8Array.prototype.set.call(n,s,i);else{if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(n,i)}i+=s.length}return n},u.byteLength=g,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)w(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)w(this,e,e+3),w(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)w(this,e,e+7),w(this,e+1,e+6),w(this,e+2,e+5),w(this,e+3,e+4);return this},u.prototype.toString=function(){var t=this.length;return 0===t?"":0===arguments.length?T(this,0,t):y.apply(this,arguments)},u.prototype.toLocaleString=u.prototype.toString,u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",r=e.h2;return t=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(t+=" ... "),"<Buffer "+t+">"},s&&(u.prototype[s]=u.prototype.inspect),u.prototype.compare=function(t,e,r,n,i){if(H(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),!u.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(this===t)return 0;for(var s=(i>>>=0)-(n>>>=0),o=(r>>>=0)-(e>>>=0),a=Math.min(s,o),h=this.slice(n,i),c=t.slice(e,r),f=0;f<a;++f)if(h[f]!==c[f]){s=h[f],o=c[f];break}return s<o?-1:o<s?1:0},u.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},u.prototype.indexOf=function(t,e,r){return E(this,t,e,r,!0)},u.prototype.lastIndexOf=function(t,e,r){return E(this,t,e,r,!1)},u.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var s=!1;;)switch(n){case"hex":return b(this,t,e,r);case"utf8":case"utf-8":return v(this,t,e,r);case"ascii":case"latin1":case"binary":return _(this,t,e,r);case"base64":return S(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,e,r);default:if(s)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),s=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var U=4096;function R(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function x(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function P(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var i="",s=e;s<r;++s)i+=$[t[s]];return i}function B(t,e,r){for(var n=t.slice(e,r),i="",s=0;s<n.length-1;s+=2)i+=String.fromCharCode(n[s]+256*n[s+1]);return i}function N(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function L(t,e,r,n,i,s){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<s)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function O(t,e,r,n,i,s){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function k(t,e,r,n,s){return e=+e,r>>>=0,s||O(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function D(t,e,r,n,s){return e=+e,r>>>=0,s||O(t,0,r,8),i.write(t,e,r,n,52,8),r+8}u.prototype.slice=function(t,e){var r=this.length;(t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t);var n=this.subarray(t,e);return Object.setPrototypeOf(n,u.prototype),n},u.prototype.readUintLE=u.prototype.readUIntLE=function(t,e,r){t>>>=0,e>>>=0,r||N(t,e,this.length);for(var n=this[t],i=1,s=0;++s<e&&(i*=256);)n+=this[t+s]*i;return n},u.prototype.readUintBE=u.prototype.readUIntBE=function(t,e,r){t>>>=0,e>>>=0,r||N(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},u.prototype.readUint8=u.prototype.readUInt8=function(t,e){return t>>>=0,e||N(t,1,this.length),this[t]},u.prototype.readUint16LE=u.prototype.readUInt16LE=function(t,e){return t>>>=0,e||N(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUint16BE=u.prototype.readUInt16BE=function(t,e){return t>>>=0,e||N(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUint32LE=u.prototype.readUInt32LE=function(t,e){return t>>>=0,e||N(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUint32BE=u.prototype.readUInt32BE=function(t,e){return t>>>=0,e||N(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,r){t>>>=0,e>>>=0,r||N(t,e,this.length);for(var n=this[t],i=1,s=0;++s<e&&(i*=256);)n+=this[t+s]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*e)),n},u.prototype.readIntBE=function(t,e,r){t>>>=0,e>>>=0,r||N(t,e,this.length);for(var n=e,i=1,s=this[t+--n];n>0&&(i*=256);)s+=this[t+--n]*i;return s>=(i*=128)&&(s-=Math.pow(2,8*e)),s},u.prototype.readInt8=function(t,e){return t>>>=0,e||N(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){t>>>=0,e||N(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(t,e){t>>>=0,e||N(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(t,e){return t>>>=0,e||N(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return t>>>=0,e||N(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return t>>>=0,e||N(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return t>>>=0,e||N(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return t>>>=0,e||N(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return t>>>=0,e||N(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUintLE=u.prototype.writeUIntLE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||L(this,t,e,r,Math.pow(2,8*r)-1,0);var i=1,s=0;for(this[e]=255&t;++s<r&&(i*=256);)this[e+s]=t/i&255;return e+r},u.prototype.writeUintBE=u.prototype.writeUIntBE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||L(this,t,e,r,Math.pow(2,8*r)-1,0);var i=r-1,s=1;for(this[e+i]=255&t;--i>=0&&(s*=256);)this[e+i]=t/s&255;return e+r},u.prototype.writeUint8=u.prototype.writeUInt8=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,1,255,0),this[e]=255&t,e+1},u.prototype.writeUint16LE=u.prototype.writeUInt16LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},u.prototype.writeUint16BE=u.prototype.writeUInt16BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},u.prototype.writeUint32LE=u.prototype.writeUInt32LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},u.prototype.writeUint32BE=u.prototype.writeUInt32BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},u.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e>>>=0,!n){var i=Math.pow(2,8*r-1);L(this,t,e,r,i-1,-i)}var s=0,o=1,a=0;for(this[e]=255&t;++s<r&&(o*=256);)t<0&&0===a&&0!==this[e+s-1]&&(a=1),this[e+s]=(t/o>>0)-a&255;return e+r},u.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e>>>=0,!n){var i=Math.pow(2,8*r-1);L(this,t,e,r,i-1,-i)}var s=r-1,o=1,a=0;for(this[e+s]=255&t;--s>=0&&(o*=256);)t<0&&0===a&&0!==this[e+s+1]&&(a=1),this[e+s]=(t/o>>0)-a&255;return e+r},u.prototype.writeInt8=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},u.prototype.writeInt16BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},u.prototype.writeInt32LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},u.prototype.writeInt32BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},u.prototype.writeFloatLE=function(t,e,r){return k(this,t,e,!0,r)},u.prototype.writeFloatBE=function(t,e,r){return k(this,t,e,!1,r)},u.prototype.writeDoubleLE=function(t,e,r){return D(this,t,e,!0,r)},u.prototype.writeDoubleBE=function(t,e,r){return D(this,t,e,!1,r)},u.prototype.copy=function(t,e,r,n){if(!u.isBuffer(t))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i=n-r;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,r,n):Uint8Array.prototype.set.call(t,this.subarray(r,n),e),i},u.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===t.length){var i=t.charCodeAt(0);("utf8"===n&&i<128||"latin1"===n)&&(t=i)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var s;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(s=e;s<r;++s)this[s]=t;else{var o=u.isBuffer(t)?t:u.from(t,n),a=o.length;if(0===a)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(s=0;s<r-e;++s)this[s+e]=o[s%a]}return this};var C=/[^+/0-9A-Za-z-_]/g;function M(t,e){var r;e=e||1/0;for(var n=t.length,i=null,s=[],o=0;o<n;++o){if((r=t.charCodeAt(o))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&s.push(239,191,189);continue}if(o+1===n){(e-=3)>-1&&s.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&s.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&s.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;s.push(r)}else if(r<2048){if((e-=2)<0)break;s.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;s.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;s.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return s}function F(t){return n.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(C,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function z(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}function H(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function j(t){return t!=t}var $=function(){for(var t="0123456789abcdef",e=new Array(256),r=0;r<16;++r)for(var n=16*r,i=0;i<16;++i)e[n+i]=t[r]+t[i];return e}()},37903:t=>{function e(){this._defaults=[]}["use","on","once","set","query","type","accept","auth","withCredentials","sortQuery","retry","ok","redirects","timeout","buffer","serialize","parse","ca","key","pfx","cert"].forEach((function(t){e.prototype[t]=function(){return this._defaults.push({fn:t,arguments}),this}})),e.prototype._setDefaults=function(t){this._defaults.forEach((function(e){t[e.fn].apply(t,e.arguments)}))},t.exports=e},80569:function(t,e,r){var n;"undefined"!=typeof window?n=window:"undefined"!=typeof self?n=self:(console.warn("Using browser-only version of superagent in non-browser environment"),n=this);var i=r(98767),s=r(28899),o=r(54960),a=r(81097),u=r(37903);function h(){}var c=e=t.exports=function(t,r){return"function"==typeof r?new e.Request("GET",t).end(r):1==arguments.length?new e.Request("GET",t):new e.Request(t,r)};e.Request=w,c.getXHR=function(){if(!(!n.XMLHttpRequest||n.location&&"file:"==n.location.protocol&&n.ActiveXObject))return new XMLHttpRequest;try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(t){}try{return new ActiveXObject("Msxml2.XMLHTTP.6.0")}catch(t){}try{return new ActiveXObject("Msxml2.XMLHTTP.3.0")}catch(t){}try{return new ActiveXObject("Msxml2.XMLHTTP")}catch(t){}throw Error("Browser-only version of superagent could not find XHR")};var f="".trim?function(t){return t.trim()}:function(t){return t.replace(/(^\s*|\s*$)/g,"")};function l(t){if(!o(t))return t;var e=[];for(var r in t)p(e,r,t[r]);return e.join("&")}function p(t,e,r){if(null!=r)if(Array.isArray(r))r.forEach((function(r){p(t,e,r)}));else if(o(r))for(var n in r)p(t,e+"["+n+"]",r[n]);else t.push(encodeURIComponent(e)+"="+encodeURIComponent(r));else null===r&&t.push(encodeURIComponent(e))}function d(t){for(var e,r,n={},i=t.split("&"),s=0,o=i.length;s<o;++s)-1==(r=(e=i[s]).indexOf("="))?n[decodeURIComponent(e)]="":n[decodeURIComponent(e.slice(0,r))]=decodeURIComponent(e.slice(r+1));return n}function g(t){return/[\/+]json($|[^-\w])/.test(t)}function y(t){this.req=t,this.xhr=this.req.xhr,this.text="HEAD"!=this.req.method&&(""===this.xhr.responseType||"text"===this.xhr.responseType)||void 0===this.xhr.responseType?this.xhr.responseText:null,this.statusText=this.req.xhr.statusText;var e=this.xhr.status;1223===e&&(e=204),this._setStatusProperties(e),this.header=this.headers=function(t){for(var e,r,n,i,s=t.split(/\r?\n/),o={},a=0,u=s.length;a<u;++a)-1!==(e=(r=s[a]).indexOf(":"))&&(n=r.slice(0,e).toLowerCase(),i=f(r.slice(e+1)),o[n]=i);return o}(this.xhr.getAllResponseHeaders()),this.header["content-type"]=this.xhr.getResponseHeader("content-type"),this._setHeaderProperties(this.header),null===this.text&&t._responseType?this.body=this.xhr.response:this.body="HEAD"!=this.req.method?this._parseBody(this.text?this.text:this.xhr.response):null}function w(t,e){var r=this;this._query=this._query||[],this.method=t,this.url=e,this.header={},this._header={},this.on("end",(function(){var t,e=null,n=null;try{n=new y(r)}catch(t){return(e=new Error("Parser is unable to parse the response")).parse=!0,e.original=t,r.xhr?(e.rawResponse=void 0===r.xhr.responseType?r.xhr.responseText:r.xhr.response,e.status=r.xhr.status?r.xhr.status:null,e.statusCode=e.status):(e.rawResponse=null,e.status=null),r.callback(e)}r.emit("response",n);try{r._isResponseOK(n)||(t=new Error(n.statusText||"Unsuccessful HTTP response"))}catch(e){t=e}t?(t.original=e,t.response=n,t.status=n.status,r.callback(t,n)):r.callback(null,n)}))}function E(t,e,r){var n=c("DELETE",t);return"function"==typeof e&&(r=e,e=null),e&&n.send(e),r&&n.end(r),n}c.serializeObject=l,c.parseString=d,c.types={html:"text/html",json:"application/json",xml:"text/xml",urlencoded:"application/x-www-form-urlencoded",form:"application/x-www-form-urlencoded","form-data":"application/x-www-form-urlencoded"},c.serialize={"application/x-www-form-urlencoded":l,"application/json":JSON.stringify},c.parse={"application/x-www-form-urlencoded":d,"application/json":JSON.parse},a(y.prototype),y.prototype._parseBody=function(t){var e=c.parse[this.type];return this.req._parser?this.req._parser(this,t):(!e&&g(this.type)&&(e=c.parse["application/json"]),e&&t&&(t.length||t instanceof Object)?e(t):null)},y.prototype.toError=function(){var t=this.req,e=t.method,r=t.url,n="cannot "+e+" "+r+" ("+this.status+")",i=new Error(n);return i.status=this.status,i.method=e,i.url=r,i},c.Response=y,i(w.prototype),s(w.prototype),w.prototype.type=function(t){return this.set("Content-Type",c.types[t]||t),this},w.prototype.accept=function(t){return this.set("Accept",c.types[t]||t),this},w.prototype.auth=function(t,e,r){1===arguments.length&&(e=""),"object"==typeof e&&null!==e&&(r=e,e=""),r||(r={type:"function"==typeof btoa?"basic":"auto"});var n=function(t){if("function"==typeof btoa)return btoa(t);throw new Error("Cannot use basic auth, btoa is not a function")};return this._auth(t,e,r,n)},w.prototype.query=function(t){return"string"!=typeof t&&(t=l(t)),t&&this._query.push(t),this},w.prototype.attach=function(t,e,r){if(e){if(this._data)throw Error("superagent can't mix .send() and .attach()");this._getFormData().append(t,e,r||e.name)}return this},w.prototype._getFormData=function(){return this._formData||(this._formData=new n.FormData),this._formData},w.prototype.callback=function(t,e){if(this._shouldRetry(t,e))return this._retry();var r=this._callback;this.clearTimeout(),t&&(this._maxRetries&&(t.retries=this._retries-1),this.emit("error",t)),r(t,e)},w.prototype.crossDomainError=function(){var t=new Error("Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.");t.crossDomain=!0,t.status=this.status,t.method=this.method,t.url=this.url,this.callback(t)},w.prototype.buffer=w.prototype.ca=w.prototype.agent=function(){return console.warn("This is not supported in browser version of superagent"),this},w.prototype.pipe=w.prototype.write=function(){throw Error("Streaming is not supported in browser version of superagent")},w.prototype._isHost=function(t){return t&&"object"==typeof t&&!Array.isArray(t)&&"[object Object]"!==Object.prototype.toString.call(t)},w.prototype.end=function(t){return this._endCalled&&console.warn("Warning: .end() was called twice. This is not supported in superagent"),this._endCalled=!0,this._callback=t||h,this._finalizeQueryString(),this._end()},w.prototype._end=function(){var t=this,e=this.xhr=c.getXHR(),r=this._formData||this._data;this._setTimeouts(),e.onreadystatechange=function(){var r=e.readyState;if(r>=2&&t._responseTimeoutTimer&&clearTimeout(t._responseTimeoutTimer),4==r){var n;try{n=e.status}catch(t){n=0}if(!n){if(t.timedout||t._aborted)return;return t.crossDomainError()}t.emit("end")}};var n=function(e,r){r.total>0&&(r.percent=r.loaded/r.total*100),r.direction=e,t.emit("progress",r)};if(this.hasListeners("progress"))try{e.onprogress=n.bind(null,"download"),e.upload&&(e.upload.onprogress=n.bind(null,"upload"))}catch(t){}try{this.username&&this.password?e.open(this.method,this.url,!0,this.username,this.password):e.open(this.method,this.url,!0)}catch(t){return this.callback(t)}if(this._withCredentials&&(e.withCredentials=!0),!this._formData&&"GET"!=this.method&&"HEAD"!=this.method&&"string"!=typeof r&&!this._isHost(r)){var i=this._header["content-type"],s=this._serializer||c.serialize[i?i.split(";")[0]:""];!s&&g(i)&&(s=c.serialize["application/json"]),s&&(r=s(r))}for(var o in this.header)null!=this.header[o]&&this.header.hasOwnProperty(o)&&e.setRequestHeader(o,this.header[o]);return this._responseType&&(e.responseType=this._responseType),this.emit("request",this),e.send(void 0!==r?r:null),this},c.agent=function(){return new u},["GET","POST","OPTIONS","PATCH","PUT","DELETE"].forEach((function(t){u.prototype[t.toLowerCase()]=function(e,r){var n=new c.Request(t,e);return this._setDefaults(n),r&&n.end(r),n}})),u.prototype.del=u.prototype.delete,c.get=function(t,e,r){var n=c("GET",t);return"function"==typeof e&&(r=e,e=null),e&&n.query(e),r&&n.end(r),n},c.head=function(t,e,r){var n=c("HEAD",t);return"function"==typeof e&&(r=e,e=null),e&&n.query(e),r&&n.end(r),n},c.options=function(t,e,r){var n=c("OPTIONS",t);return"function"==typeof e&&(r=e,e=null),e&&n.send(e),r&&n.end(r),n},c.del=E,c.delete=E,c.patch=function(t,e,r){var n=c("PATCH",t);return"function"==typeof e&&(r=e,e=null),e&&n.send(e),r&&n.end(r),n},c.post=function(t,e,r){var n=c("POST",t);return"function"==typeof e&&(r=e,e=null),e&&n.send(e),r&&n.end(r),n},c.put=function(t,e,r){var n=c("PUT",t);return"function"==typeof e&&(r=e,e=null),e&&n.send(e),r&&n.end(r),n}},54960:t=>{"use strict";t.exports=function(t){return null!==t&&"object"==typeof t}},28899:(t,e,r)=>{"use strict";var n=r(54960);function i(t){if(t)return function(t){for(var e in i.prototype)t[e]=i.prototype[e];return t}(t)}t.exports=i,i.prototype.clearTimeout=function(){return clearTimeout(this._timer),clearTimeout(this._responseTimeoutTimer),delete this._timer,delete this._responseTimeoutTimer,this},i.prototype.parse=function(t){return this._parser=t,this},i.prototype.responseType=function(t){return this._responseType=t,this},i.prototype.serialize=function(t){return this._serializer=t,this},i.prototype.timeout=function(t){if(!t||"object"!=typeof t)return this._timeout=t,this._responseTimeout=0,this;for(var e in t)switch(e){case"deadline":this._timeout=t.deadline;break;case"response":this._responseTimeout=t.response;break;default:console.warn("Unknown timeout option",e)}return this},i.prototype.retry=function(t,e){return 0!==arguments.length&&!0!==t||(t=1),t<=0&&(t=0),this._maxRetries=t,this._retries=0,this._retryCallback=e,this};var s=["ECONNRESET","ETIMEDOUT","EADDRINFO","ESOCKETTIMEDOUT"];i.prototype._shouldRetry=function(t,e){if(!this._maxRetries||this._retries++>=this._maxRetries)return!1;if(this._retryCallback)try{var r=this._retryCallback(t,e);if(!0===r)return!0;if(!1===r)return!1}catch(t){console.error(t)}if(e&&e.status&&e.status>=500&&501!=e.status)return!0;if(t){if(t.code&&~s.indexOf(t.code))return!0;if(t.timeout&&"ECONNABORTED"==t.code)return!0;if(t.crossDomain)return!0}return!1},i.prototype._retry=function(){return this.clearTimeout(),this.req&&(this.req=null,this.req=this.request()),this._aborted=!1,this.timedout=!1,this._end()},i.prototype.then=function(t,e){if(!this._fullfilledPromise){var r=this;this._endCalled&&console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises"),this._fullfilledPromise=new Promise((function(t,e){r.end((function(r,n){r?e(r):t(n)}))}))}return this._fullfilledPromise.then(t,e)},i.prototype.catch=function(t){return this.then(void 0,t)},i.prototype.use=function(t){return t(this),this},i.prototype.ok=function(t){if("function"!=typeof t)throw Error("Callback required");return this._okCallback=t,this},i.prototype._isResponseOK=function(t){return!!t&&(this._okCallback?this._okCallback(t):t.status>=200&&t.status<300)},i.prototype.get=function(t){return this._header[t.toLowerCase()]},i.prototype.getHeader=i.prototype.get,i.prototype.set=function(t,e){if(n(t)){for(var r in t)this.set(r,t[r]);return this}return this._header[t.toLowerCase()]=e,this.header[t]=e,this},i.prototype.unset=function(t){return delete this._header[t.toLowerCase()],delete this.header[t],this},i.prototype.field=function(t,e){if(null==t)throw new Error(".field(name, val) name can not be empty");if(this._data&&console.error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()"),n(t)){for(var r in t)this.field(r,t[r]);return this}if(Array.isArray(e)){for(var i in e)this.field(t,e[i]);return this}if(null==e)throw new Error(".field(name, val) val can not be empty");return"boolean"==typeof e&&(e=""+e),this._getFormData().append(t,e),this},i.prototype.abort=function(){return this._aborted||(this._aborted=!0,this.xhr&&this.xhr.abort(),this.req&&this.req.abort(),this.clearTimeout(),this.emit("abort")),this},i.prototype._auth=function(t,e,r,n){switch(r.type){case"basic":this.set("Authorization","Basic "+n(t+":"+e));break;case"auto":this.username=t,this.password=e;break;case"bearer":this.set("Authorization","Bearer "+t)}return this},i.prototype.withCredentials=function(t){return null==t&&(t=!0),this._withCredentials=t,this},i.prototype.redirects=function(t){return this._maxRedirects=t,this},i.prototype.maxResponseSize=function(t){if("number"!=typeof t)throw TypeError("Invalid argument");return this._maxResponseSize=t,this},i.prototype.toJSON=function(){return{method:this.method,url:this.url,data:this._data,headers:this._header}},i.prototype.send=function(t){var e=n(t),r=this._header["content-type"];if(this._formData&&console.error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()"),e&&!this._data)Array.isArray(t)?this._data=[]:this._isHost(t)||(this._data={});else if(t&&this._data&&this._isHost(this._data))throw Error("Can't merge these send calls");if(e&&n(this._data))for(var i in t)this._data[i]=t[i];else"string"==typeof t?(r||this.type("form"),r=this._header["content-type"],this._data="application/x-www-form-urlencoded"==r?this._data?this._data+"&"+t:t:(this._data||"")+t):this._data=t;return!e||this._isHost(t)||r||this.type("json"),this},i.prototype.sortQuery=function(t){return this._sort=void 0===t||t,this},i.prototype._finalizeQueryString=function(){var t=this._query.join("&");if(t&&(this.url+=(this.url.indexOf("?")>=0?"&":"?")+t),this._query.length=0,this._sort){var e=this.url.indexOf("?");if(e>=0){var r=this.url.substring(e+1).split("&");"function"==typeof this._sort?r.sort(this._sort):r.sort(),this.url=this.url.substring(0,e)+"?"+r.join("&")}}},i.prototype._appendQueryString=function(){console.trace("Unsupported")},i.prototype._timeoutError=function(t,e,r){if(!this._aborted){var n=new Error(t+e+"ms exceeded");n.timeout=e,n.code="ECONNABORTED",n.errno=r,this.timedout=!0,this.abort(),this.callback(n)}},i.prototype._setTimeouts=function(){var t=this;this._timeout&&!this._timer&&(this._timer=setTimeout((function(){t._timeoutError("Timeout of ",t._timeout,"ETIME")}),this._timeout)),this._responseTimeout&&!this._responseTimeoutTimer&&(this._responseTimeoutTimer=setTimeout((function(){t._timeoutError("Response timeout of ",t._responseTimeout,"ETIMEDOUT")}),this._responseTimeout))}},81097:(t,e,r)=>{"use strict";var n=r(64506);function i(t){if(t)return function(t){for(var e in i.prototype)t[e]=i.prototype[e];return t}(t)}t.exports=i,i.prototype.get=function(t){return this.header[t.toLowerCase()]},i.prototype._setHeaderProperties=function(t){var e=t["content-type"]||"";this.type=n.type(e);var r=n.params(e);for(var i in r)this[i]=r[i];this.links={};try{t.link&&(this.links=n.parseLinks(t.link))}catch(t){}},i.prototype._setStatusProperties=function(t){var e=t/100|0;this.status=this.statusCode=t,this.statusType=e,this.info=1==e,this.ok=2==e,this.redirect=3==e,this.clientError=4==e,this.serverError=5==e,this.error=(4==e||5==e)&&this.toError(),this.created=201==t,this.accepted=202==t,this.noContent=204==t,this.badRequest=400==t,this.unauthorized=401==t,this.notAcceptable=406==t,this.forbidden=403==t,this.notFound=404==t,this.unprocessableEntity=422==t}},64506:(t,e)=>{"use strict";e.type=function(t){return t.split(/ *; */).shift()},e.params=function(t){return t.split(/ *; */).reduce((function(t,e){var r=e.split(/ *= */),n=r.shift(),i=r.shift();return n&&i&&(t[n]=i),t}),{})},e.parseLinks=function(t){return t.split(/ *, */).reduce((function(t,e){var r=e.split(/ *; */),n=r[0].slice(1,-1);return t[r[1].split(/ *= */)[1].slice(1,-1)]=n,t}),{})},e.cleanHeader=function(t,e){return delete t["content-type"],delete t["content-length"],delete t["transfer-encoding"],delete t.host,e&&(delete t.authorization,delete t.cookie),t}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
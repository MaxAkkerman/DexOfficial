(self.webpackChunkmy_swap=self.webpackChunkmy_swap||[]).push([[5728],{47371:(e,n,t)=>{"use strict";t.d(n,{c:()=>r});var r='\n\t<svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">\n\t\t<path d="M20 40C31.0457 40 40 31.0457 40 20C40 8.9543 31.0457 0 20 0C8.9543 0 0 8.9543 0 20C0 31.0457 8.9543 40 20 40Z" fill="#1652F0"/>\n\t\t<path fill-rule="evenodd" clip-rule="evenodd" d="M5.45508 20.0006C5.45508 28.0338 11.9673 34.546 20.0006 34.546C28.0338 34.546 34.546 28.0338 34.546 20.0006C34.546 11.9673 28.0338 5.45508 20.0006 5.45508C11.9673 5.45508 5.45508 11.9673 5.45508 20.0006ZM17.3137 15.3145C16.2091 15.3145 15.3137 16.2099 15.3137 17.3145V22.6882C15.3137 23.7928 16.2091 24.6882 17.3137 24.6882H22.6874C23.792 24.6882 24.6874 23.7928 24.6874 22.6882V17.3145C24.6874 16.2099 23.792 15.3145 22.6874 15.3145H17.3137Z" fill="white"/>\n\t</svg>\n'},25728:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});var r=t(47371);function o(e,n,t,r,o,a,c){try{var i=e[a](c),u=i.value}catch(e){return void t(e)}i.done?n(u):Promise.resolve(u).then(r,o)}const a=function(e){var n,a,c=e.rpcUrl,i=e.appName,u=e.appLogoUrl,s=e.networkId,l=e.preferred,p=e.label,d=e.iconSrc;return{name:p||"Coinbase Wallet",svg:e.svg||r.c,iconSrc:d,wallet:(n=regeneratorRuntime.mark((function e(n){var r,o,a,l,p,d,f;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=n.getBalance,o=n.getAddress,a=n.getNetwork,e.next=3,Promise.all([t.e(8847),t.e(7994),t.e(3714),t.e(4143),t.e(8090),t.e(1717),t.e(983),t.e(2753)]).then(t.bind(t,80983));case 3:return l=e.sent,p=l.default,d=new p({appName:i,appLogoUrl:u}),f=d.makeWeb3Provider(c,s),e.abrupt("return",{provider:f,interface:{name:"Coinbase Wallet",connect:function(){return new Promise((function(e,n){f.enable().then((function(n){return e(n)})).catch((function(){return n({message:"This dapp needs access to your account information."})}))}))},disconnect:function(){f.disconnect()},address:{get:function(){return o(f)}},network:{get:function(){return a(f)}},balance:{get:function(){return r(f)}}}});case 8:case"end":return e.stop()}}),e)})),a=function(){var e=this,t=arguments;return new Promise((function(r,a){var c=n.apply(e,t);function i(e){o(c,r,a,i,u,"next",e)}function u(e){o(c,r,a,i,u,"throw",e)}i(void 0)}))},function(e){return a.apply(this,arguments)}),type:"sdk",desktop:!0,preferred:l}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
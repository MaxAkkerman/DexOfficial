(self.webpackChunkmy_swap=self.webpackChunkmy_swap||[]).push([[490],{14803:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s}),n(35666);var r=n(14113);function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t,n,r,o,i,a){try{var c=e[i](a),u=c.value}catch(e){return void n(e)}c.done?t(u):Promise.resolve(u).then(r,o)}function u(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){c(i,r,o,a,u,"next",e)}function u(e){c(i,r,o,a,u,"throw",e)}a(void 0)}))}}n(44431),n(5942),n(51206);const s=function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.heading,o=t.description,a=t.icon,c=t.html,s=t.button,l=!1;return r.a.subscribe((function(t){var n=t.walletCheckInProgress;!1===e&&!0===n&&(l=!1),e=n})),function(){var e=u(regeneratorRuntime.mark((function e(t){var f,p,w,h,b,d,v,k,y;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(f=t.network,p=t.appNetworkId,w=t.walletSelect,h=t.walletCheck,b=t.exit,d=t.stateSyncStatus,v=t.stateStore,k=t.wallet,null!==f){e.next=5;break}if(!d.network){e.next=5;break}return e.next=5,new Promise((function(e){d.network&&d.network.then(e),setTimeout((function(){null===f&&e(void 0)}),500)}));case 5:if(l||v.network.get()==p||"WalletConnect"===(0,r.f)(null==k?void 0:k.provider)){e.next=14;break}return e.prev=6,l=!0,e.next=10,null==k||null===(y=k.provider)||void 0===y?void 0:y.request({method:"wallet_switchEthereumChain",params:[{chainId:"0x"+(null==p?void 0:p.toString(16))}]});case 10:e.next=14;break;case 12:e.prev=12,e.t0=e.catch(6);case 14:if(v.network.get()==p){e.next=16;break}return e.abrupt("return",{heading:n||"You Must Change Networks",description:o||"We've detected that you need to switch your wallet's network from <b>".concat((0,r.n)(f),"</b> to <b>").concat((0,r.n)(p),'</b> for this Dapp. <br><br> <i style="font-size: inherit; font-family: inherit;">*Some wallets may not support changing networks. If you can not change networks in your wallet you may consider switching to a different wallet.</i>'),eventCode:"networkFail",button:s||{onclick:function(){var e=u(regeneratorRuntime.mark((function e(){var t,n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return b(!1,{switchingWallets:!0}),e.next=3,w();case 3:if(t=e.sent,e.t0=t,!e.t0){e.next=9;break}return e.next=8,h();case 8:e.t0=e.sent;case 9:n=e.t0,r.a.update((function(e){return i(i({},e),{},{switchingWallets:!1,walletCheckCompleted:n})}));case 11:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),text:"Switch Wallet"},html:c,icon:a||r.h});case 16:case"end":return e.stop()}}),e,null,[[6,12]])})));return function(t){return e.apply(this,arguments)}}()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
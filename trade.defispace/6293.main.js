(self.webpackChunkmy_swap=self.webpackChunkmy_swap||[]).push([[6293],{86293:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>T});var r=n(71823),o=n(17187),i=n.n(o),s={},a={},u=function(e,t){a[e]=t},c=function(e){var t=function(t,n){Object.assign(this,n),this.name=e,this.message=t||e,this.stack=(new Error).stack};return t.prototype=new Error,s[e]=t,t};c("AccountNameRequired"),c("AccountNotSupported"),c("AmountRequired"),c("BluetoothRequired"),c("BtcUnmatchedApp"),c("CantOpenDevice"),c("CashAddrNotSupported"),c("CurrencyNotSupported"),c("DeviceAppVerifyNotSupported"),c("DeviceGenuineSocketEarlyClose"),c("DeviceNotGenuine"),c("DeviceOnDashboardExpected"),c("DeviceOnDashboardUnexpected"),c("DeviceInOSUExpected"),c("DeviceHalted"),c("DeviceNameInvalid"),c("DeviceSocketFail"),c("DeviceSocketNoBulkStatus"),c("DisconnectedDevice"),c("DisconnectedDeviceDuringOperation"),c("EnpointConfig"),c("EthAppPleaseEnableContractData"),c("FeeEstimationFailed"),c("FirmwareNotRecognized"),c("HardResetFail"),c("InvalidXRPTag"),c("InvalidAddress"),c("InvalidAddressBecauseDestinationIsAlsoSource"),c("LatestMCUInstalledError"),c("UnknownMCU"),c("LedgerAPIError"),c("LedgerAPIErrorWithMessage"),c("LedgerAPINotAvailable"),c("ManagerAppAlreadyInstalled"),c("ManagerAppRelyOnBTC"),c("ManagerAppDepInstallRequired"),c("ManagerAppDepUninstallRequired"),c("ManagerDeviceLocked"),c("ManagerFirmwareNotEnoughSpace"),c("ManagerNotEnoughSpace"),c("ManagerUninstallBTCDep"),c("NetworkDown"),c("NoAddressesFound"),c("NotEnoughBalance"),c("NotEnoughBalanceToDelegate"),c("NotEnoughBalanceInParentAccount"),c("NotEnoughSpendableBalance"),c("NotEnoughBalanceBecauseDestinationNotCreated"),c("NoAccessToCamera"),c("NotEnoughGas"),c("NotSupportedLegacyAddress"),c("GasLessThanEstimate"),c("PasswordsDontMatch"),c("PasswordIncorrect"),c("RecommendSubAccountsToEmpty"),c("RecommendUndelegation"),c("TimeoutTagged"),c("UnexpectedBootloader"),c("MCUNotGenuineToDashboard"),c("RecipientRequired"),c("UnavailableTezosOriginatedAccountReceive"),c("UnavailableTezosOriginatedAccountSend"),c("UpdateFetchFileFail"),c("UpdateIncorrectHash"),c("UpdateIncorrectSig"),c("UpdateYourApp"),c("UserRefusedDeviceNameChange"),c("UserRefusedAddress"),c("UserRefusedFirmwareUpdate"),c("UserRefusedAllowManager"),c("UserRefusedOnDevice"),c("TransportOpenUserCancelled"),c("TransportInterfaceNotAvailable");var p=c("TransportRaceCondition");function l(e,t){this.name="TransportError",this.message=e,this.stack=(new Error).stack,this.id=t}c("TransportWebUSBGestureRequired"),c("DeviceShouldStayInApp"),c("WebsocketConnectionError"),c("WebsocketConnectionFailed"),c("WrongDeviceForAccount"),c("WrongAppForCurrency"),c("ETHAddressNonEIP"),c("CantScanQRCode"),c("FeeNotLoaded"),c("FeeRequired"),c("FeeTooHigh"),c("SyncError"),c("PairingFailed"),c("GenuineCheckFailed"),c("LedgerAPI4xx"),c("LedgerAPI5xx"),c("FirmwareOrAppUpdateRequired"),c("NoDBPathGiven"),c("DBWrongPassword"),c("DBNotReset"),l.prototype=new Error,u("TransportError",(function(e){return new l(e.message,e.id)}));var d={PIN_REMAINING_ATTEMPTS:25536,INCORRECT_LENGTH:26368,MISSING_CRITICAL_PARAMETER:26624,COMMAND_INCOMPATIBLE_FILE_STRUCTURE:27009,SECURITY_STATUS_NOT_SATISFIED:27010,CONDITIONS_OF_USE_NOT_SATISFIED:27013,INCORRECT_DATA:27264,NOT_ENOUGH_MEMORY_SPACE:27268,REFERENCED_DATA_NOT_FOUND:27272,FILE_ALREADY_EXISTS:27273,INCORRECT_P1_P2:27392,INS_NOT_SUPPORTED:27904,CLA_NOT_SUPPORTED:28160,TECHNICAL_PROBLEM:28416,OK:36864,MEMORY_PROBLEM:37440,NO_EF_SELECTED:37888,INVALID_OFFSET:37890,FILE_NOT_FOUND:37892,INCONSISTENT_FILE:37896,ALGORITHM_NOT_SUPPORTED:38020,INVALID_KCV:38021,CODE_NOT_INITIALIZED:38914,ACCESS_CONDITION_NOT_FULFILLED:38916,CONTRADICTION_SECRET_CODE_STATUS:38920,CONTRADICTION_INVALIDATION:38928,CODE_BLOCKED:38976,MAX_VALUE_REACHED:38992,GP_AUTH_FAILED:25344,LICENSING:28482,HALTED:28586};function f(e){this.name="TransportStatusError";var t=Object.keys(d).find((function(t){return d[t]===e}))||"UNKNOWN_ERROR",n=function(e){switch(e){case 26368:return"Incorrect length";case 26624:return"Missing critical parameter";case 27010:return"Security not satisfied (dongle locked or have invalid access rights)";case 27013:return"Condition of use not satisfied (denied by the user?)";case 27264:return"Invalid data received";case 27392:return"Invalid parameter received"}if(28416<=e&&e<=28671)return"Internal error, please report"}(e)||t,r=e.toString(16);this.message="Ledger device: "+n+" (0x"+r+")",this.stack=(new Error).stack,this.statusCode=e,this.statusText=t}f.prototype=new Error,u("TransportStatusError",(function(e){return new f(e.statusCode)}));class h{constructor(){this.exchangeTimeout=3e4,this.unresponsiveTimeout=15e3,this.deviceModel=null,this._events=new(i()),this.send=async(e,t,n,r,o=Buffer.alloc(0),i=[d.OK])=>{if(o.length>=256)throw new l("data.length exceed 256 bytes limit. Got: "+o.length,"DataLengthTooBig");const s=await this.exchange(Buffer.concat([Buffer.from([e,t,n,r]),Buffer.from([o.length]),o])),a=s.readUInt16BE(s.length-2);if(!i.some((e=>e===a)))throw new f(a);return s},this.exchangeBusyPromise=void 0,this.exchangeAtomicImpl=async e=>{if(this.exchangeBusyPromise)throw new p("An action was already pending on the Ledger device. Please deny or reconnect.");let t;const n=new Promise((e=>{t=e}));this.exchangeBusyPromise=n;let r=!1;const o=setTimeout((()=>{r=!0,this.emit("unresponsive")}),this.unresponsiveTimeout);try{const n=await e();return r&&this.emit("responsive"),n}finally{clearTimeout(o),t&&t(),this.exchangeBusyPromise=null}},this._appAPIlock=null}exchange(e){throw new Error("exchange not implemented")}setScrambleKey(e){}close(){return Promise.resolve()}on(e,t){this._events.on(e,t)}off(e,t){this._events.removeListener(e,t)}emit(e,...t){this._events.emit(e,...t)}setDebugMode(){console.warn("setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.")}setExchangeTimeout(e){this.exchangeTimeout=e}setExchangeUnresponsiveTimeout(e){this.unresponsiveTimeout=e}static create(e=3e3,t){return new Promise(((n,r)=>{let o=!1;const i=this.listen({next:t=>{o=!0,i&&i.unsubscribe(),s&&clearTimeout(s),this.open(t.descriptor,e).then(n,r)},error:e=>{s&&clearTimeout(s),r(e)},complete:()=>{s&&clearTimeout(s),o||r(new l(this.ErrorMessage_NoDeviceFound,"NoDeviceFound"))}}),s=t?setTimeout((()=>{i.unsubscribe(),r(new l(this.ErrorMessage_ListenTimeout,"ListenTimeout"))}),t):null}))}decorateAppAPIMethods(e,t,n){for(let r of t)e[r]=this.decorateAppAPIMethod(r,e[r],e,n)}decorateAppAPIMethod(e,t,n,r){return async(...o)=>{const{_appAPIlock:i}=this;if(i)return Promise.reject(new l("Ledger Device is busy (lock "+i+")","TransportLocked"));try{return this._appAPIlock=e,this.setScrambleKey(r),await t.apply(n,o)}finally{this._appAPIlock=null}}}}h.isSupported=void 0,h.list=void 0,h.listen=void 0,h.open=void 0,h.ErrorMessage_ListenTimeout="No Ledger device found (timeout)",h.ErrorMessage_NoDeviceFound="No Ledger device found";let g=0;const v=[],m=(e,t,n)=>{const r={type:e,id:String(++g),date:new Date};t&&(r.message=t),n&&(r.data=n),function(e){for(let t=0;t<v.length;t++)try{v[t](e)}catch(e){console.error(e)}}(r)};"undefined"!=typeof window&&(window.__ledgerLogsListen=e=>(v.push(e),()=>{const t=v.indexOf(e);-1!==t&&(v[t]=v[v.length-1],v.pop())}));const E=e=>e.replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"");let _=[];class T extends h{static async open(e,t=5e3){return new T}constructor(){super(),this.scrambleKey=void 0,this.unwrap=!0,_.push(this)}async exchange(e){try{return await function(e,t,n,o){const i=function(e,t){const n=Buffer.alloc(e.length);for(let r=0;r<e.length;r++)n[r]=e[r]^t[r%t.length];return n}(e,n),s=Buffer.from("0000000000000000000000000000000000000000000000000000000000000000","hex"),a={version:"U2F_V2",keyHandle:E(i.toString("base64")),challenge:E(s.toString("base64")),appId:location.origin};return m("apdu","=> "+e.toString("hex")),(0,r.sign)(a,t/1e3).then((e=>{const{signatureData:t}=e;if("string"==typeof t){const e=Buffer.from((n=t).replace(/-/g,"+").replace(/_/g,"/")+"==".substring(0,3*n.length%4),"base64");let r;return r=o?e.slice(5):e,m("apdu","<= "+r.toString("hex")),r}throw e;var n}))}(e,this.exchangeTimeout,this.scrambleKey,this.unwrap)}catch(e){throw"object"==typeof e.metaData?(5===e.metaData.code&&(_.forEach((e=>e.emit("disconnect"))),_=[]),function(e,t,n){const r=new l(t,n);return r.originalError=e,r}(e,"Failed to sign with Ledger device: U2F "+e.metaData.type,"U2F_"+e.metaData.code)):e}}setScrambleKey(e){this.scrambleKey=Buffer.from(e,"ascii")}setUnwrap(e){this.unwrap=e}close(){return Promise.resolve()}}T.isSupported=r.isSupported,T.list=()=>(0,r.isSupported)().then((e=>e?[null]:[])),T.listen=e=>{let t=!1;return(0,r.isSupported)().then((n=>{t||(n?(e.next({type:"add",descriptor:null}),e.complete()):e.error(new l("U2F browser support is needed for Ledger. Please use Chrome, Opera or Firefox with a U2F extension. Also make sure you're on an HTTPS connection","U2FNotSupported")))})),{unsubscribe:()=>{t=!0}}}},17187:e=>{"use strict";var t,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function i(){i.init.call(this)}e.exports=i,e.exports.once=function(e,t){return new Promise((function(n,r){function o(n){e.removeListener(t,i),r(n)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",o),n([].slice.call(arguments))}g(e,t,i,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&g(e,"error",t,{once:!0})}(e,o)}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var s=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function u(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function c(e,t,n,r){var o,i,s,c;if(a(n),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),i=e._events),s=i[t]),void 0===s)s=i[t]=n,++e._eventsCount;else if("function"==typeof s?s=i[t]=r?[n,s]:[s,n]:r?s.unshift(n):s.push(n),(o=u(e))>0&&s.length>o&&!s.warned){s.warned=!0;var p=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");p.name="MaxListenersExceededWarning",p.emitter=e,p.type=t,p.count=s.length,c=p,console&&console.warn&&console.warn(c)}return e}function p(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function l(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},o=p.bind(r);return o.listener=n,r.wrapFn=o,o}function d(e,t,n){var r=e._events;if(void 0===r)return[];var o=r[t];return void 0===o?[]:"function"==typeof o?n?[o.listener||o]:[o]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(o):h(o,o.length)}function f(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function h(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function g(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function o(i){r.once&&e.removeEventListener(t,o),n(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return s},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");s=e}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return u(this)},i.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var o="error"===e,i=this._events;if(void 0!==i)o=o&&void 0===i.error;else if(!o)return!1;if(o){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var u=i[e];if(void 0===u)return!1;if("function"==typeof u)r(u,this,t);else{var c=u.length,p=h(u,c);for(n=0;n<c;++n)r(p[n],this,t)}return!0},i.prototype.addListener=function(e,t){return c(this,e,t,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,t){return c(this,e,t,!0)},i.prototype.once=function(e,t){return a(t),this.on(e,l(this,e,t)),this},i.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,l(this,e,t)),this},i.prototype.removeListener=function(e,t){var n,r,o,i,s;if(a(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,i=n.length-1;i>=0;i--)if(n[i]===t||n[i].listener===t){s=n[i].listener,o=i;break}if(o<0)return this;0===o?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,o),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,s||t)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var o,i=Object.keys(n);for(r=0;r<i.length;++r)"removeListener"!==(o=i[r])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},i.prototype.listeners=function(e){return d(this,e,!0)},i.prototype.rawListeners=function(e){return d(this,e,!1)},i.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):f.call(e,t)},i.prototype.listenerCount=f,i.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},71823:(e,t,n)=>{"use strict";e.exports=n(49145)},63845:e=>{"use strict";var t=t||{};e.exports=t,t.EXTENSION_ID="kmendfapggjehodndflmmgagdbamhnfd",t.MessageTypes={U2F_REGISTER_REQUEST:"u2f_register_request",U2F_SIGN_REQUEST:"u2f_sign_request",U2F_REGISTER_RESPONSE:"u2f_register_response",U2F_SIGN_RESPONSE:"u2f_sign_response"},t.ErrorCodes={OK:0,OTHER_ERROR:1,BAD_REQUEST:2,CONFIGURATION_UNSUPPORTED:3,DEVICE_INELIGIBLE:4,TIMEOUT:5},t.Request,t.Response,t.Error,t.SignRequest,t.SignResponse,t.RegisterRequest,t.RegisterResponse,t.disconnect=function(){t.port_&&t.port_.port_&&(t.port_.port_.disconnect(),t.port_=null)},t.getMessagePort=function(e){if("undefined"!=typeof chrome&&chrome.runtime){var n={type:t.MessageTypes.U2F_SIGN_REQUEST,signRequests:[]};chrome.runtime.sendMessage(t.EXTENSION_ID,n,(function(){chrome.runtime.lastError?t.getIframePort_(e):t.getChromeRuntimePort_(e)}))}else t.getIframePort_(e)},t.getChromeRuntimePort_=function(e){var n=chrome.runtime.connect(t.EXTENSION_ID,{includeTlsChannelId:!0});setTimeout((function(){e(null,new t.WrappedChromeRuntimePort_(n))}),0)},t.WrappedChromeRuntimePort_=function(e){this.port_=e},t.WrappedChromeRuntimePort_.prototype.postMessage=function(e){this.port_.postMessage(e)},t.WrappedChromeRuntimePort_.prototype.addEventListener=function(e,t){var n=e.toLowerCase();"message"==n||"onmessage"==n?this.port_.onMessage.addListener((function(e){t({data:e})})):console.error("WrappedChromeRuntimePort only supports onMessage")},t.getIframePort_=function(e){var n="chrome-extension://"+t.EXTENSION_ID,r=document.createElement("iframe");r.src=n+"/u2f-comms.html",r.setAttribute("style","display:none"),document.body.appendChild(r);var o=!1,i=new MessageChannel,s=function(t){"ready"==t.data?(i.port1.removeEventListener("message",s),o||(o=!0,e(null,i.port1))):console.error('First event on iframe port was not "ready"')};i.port1.addEventListener("message",s),i.port1.start(),r.addEventListener("load",(function(){r.contentWindow.postMessage("init",n,[i.port2])})),setTimeout((function(){o||(o=!0,e(new Error("IFrame extension not supported")))}),200)},t.EXTENSION_TIMEOUT_SEC=30,t.port_=null,t.waitingForPort_=[],t.reqCounter_=0,t.callbackMap_={},t.getPortSingleton_=function(e){t.port_?e(null,t.port_):(0==t.waitingForPort_.length&&t.getMessagePort((function(e,n){for(e||(t.port_=n,t.port_.addEventListener("message",t.responseHandler_));t.waitingForPort_.length;)t.waitingForPort_.shift()(e,n)})),t.waitingForPort_.push(e))},t.responseHandler_=function(e){var n=e.data,r=n.requestId;if(r&&t.callbackMap_[r]){var o=t.callbackMap_[r];delete t.callbackMap_[r],o(null,n.responseData)}else console.error("Unknown or missing requestId in response.")},t.isSupported=function(e){t.getPortSingleton_((function(t,n){e(!t)}))},t.sign=function(e,n,r){t.getPortSingleton_((function(o,i){if(o)return n(o);var s=++t.reqCounter_;t.callbackMap_[s]=n;var a={type:t.MessageTypes.U2F_SIGN_REQUEST,signRequests:e,timeoutSeconds:void 0!==r?r:t.EXTENSION_TIMEOUT_SEC,requestId:s};i.postMessage(a)}))},t.register=function(e,n,r,o){t.getPortSingleton_((function(i,s){if(i)return r(i);var a=++t.reqCounter_;t.callbackMap_[a]=r;var u={type:t.MessageTypes.U2F_REGISTER_REQUEST,signRequests:n,registerRequests:e,timeoutSeconds:void 0!==o?o:t.EXTENSION_TIMEOUT_SEC,requestId:a};s.postMessage(u)}))}},49145:(e,t,n)=>{"use strict";e.exports=c;var r=n(63845),o="undefined"!=typeof navigator&&!!navigator.userAgent,i=o&&navigator.userAgent.match(/Safari\//)&&!navigator.userAgent.match(/Chrome\//),s=o&&navigator.userAgent.match(/Edge\/1[2345]/),a=null;function u(e){return a||(a=new e((function(e,t){function n(){e({u2f:null,native:!0})}return o?i?n():(void 0!==window.u2f&&"function"==typeof window.u2f.sign&&e({u2f:window.u2f,native:!0}),s||"http:"===location.protocol||"undefined"==typeof MessageChannel?n():void r.isSupported((function(t){t?e({u2f:r,native:!1}):n()}))):n()}))),a}function c(e){return{isSupported:d.bind(e),ensureSupport:h.bind(e),register:g.bind(e),sign:v.bind(e),ErrorCodes:c.ErrorCodes,ErrorNames:c.ErrorNames}}function p(e,t){var n=null!=t?t.errorCode:1,r=c.ErrorNames[""+n],o=new Error(e);return o.metaData={type:r,code:n},o}function l(e,t){var n={};return n.promise=new e((function(e,r){n.resolve=e,n.reject=r,t.then(e,r)})),n.promise.cancel=function(t,r){u(e).then((function(e){r&&!e.native&&e.u2f.disconnect(),n.reject(p(t,{errorCode:-1}))}))},n}function d(){return u(this).then((function(e){return!!e.u2f}))}function f(e){if(!e.u2f){if("http:"===location.protocol)throw new Error("U2F isn't supported over http, only https");throw new Error("U2F not supported")}}function h(){return u(this).then(f)}function g(e,t,n){var r=this;return Array.isArray(e)||(e=[e]),"number"==typeof t&&void 0===n&&(n=t,t=null),t||(t=[]),l(r,u(r).then((function(o){f(o);var i=o.native,s=o.u2f;return new r((function(r,o){if(i){var a=e[0].appId;s.register(a,e,t,(function(e){e.errorCode?o(p("Registration failed",e)):(delete e.errorCode,r(e))}),n)}else s.register(e,t,(function(e,t){e?o(e):t.errorCode?o(p("Registration failed",t)):r(t)}),n)}))}))).promise}function v(e,t){var n=this;return Array.isArray(e)||(e=[e]),l(n,u(n).then((function(r){f(r);var o=r.native,i=r.u2f;return new n((function(n,r){if(o){var s=e[0].appId,a=e[0].challenge;i.sign(s,a,e,(function(e){e.errorCode?r(p("Sign failed",e)):(delete e.errorCode,n(e))}),t)}else i.sign(e,(function(e,t){e?r(e):t.errorCode?r(p("Sign failed",t)):n(t)}),t)}))}))).promise}function m(e){c[e]=function(){if(!n.g.Promise)throw new Error("The platform doesn't natively support promises");var t=[].slice.call(arguments);return c(n.g.Promise)[e].apply(null,t)}}c.ErrorCodes={CANCELLED:-1,OK:0,OTHER_ERROR:1,BAD_REQUEST:2,CONFIGURATION_UNSUPPORTED:3,DEVICE_INELIGIBLE:4,TIMEOUT:5},c.ErrorNames={"-1":"CANCELLED",0:"OK",1:"OTHER_ERROR",2:"BAD_REQUEST",3:"CONFIGURATION_UNSUPPORTED",4:"DEVICE_INELIGIBLE",5:"TIMEOUT"},m("isSupported"),m("ensureSupport"),m("register"),m("sign")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
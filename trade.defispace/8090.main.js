(self.webpackChunkmy_swap=self.webpackChunkmy_swap||[]).push([[8090],{85078:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(70655),o=r(2403),s=function(){function e(){this._semaphore=new o.default(1)}return e.prototype.acquire=function(){return n.__awaiter(this,void 0,void 0,(function(){return n.__generator(this,(function(e){switch(e.label){case 0:return[4,this._semaphore.acquire()];case 1:return[2,e.sent()[1]]}}))}))},e.prototype.runExclusive=function(e){return this._semaphore.runExclusive((function(){return e()}))},e.prototype.isLocked=function(){return this._semaphore.isLocked()},e.prototype.release=function(){this._semaphore.release()},e}();t.default=s},2403:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(70655),o=function(){function e(e){if(this._maxConcurrency=e,this._queue=[],e<=0)throw new Error("semaphore must be initialized to a positive value");this._value=e}return e.prototype.acquire=function(){var e=this,t=this.isLocked(),r=new Promise((function(t){return e._queue.push(t)}));return t||this._dispatch(),r},e.prototype.runExclusive=function(e){return n.__awaiter(this,void 0,void 0,(function(){var t,r,o;return n.__generator(this,(function(n){switch(n.label){case 0:return[4,this.acquire()];case 1:t=n.sent(),r=t[0],o=t[1],n.label=2;case 2:return n.trys.push([2,,4,5]),[4,e(r)];case 3:return[2,n.sent()];case 4:return o(),[7];case 5:return[2]}}))}))},e.prototype.isLocked=function(){return this._value<=0},e.prototype.release=function(){if(this._maxConcurrency>1)throw new Error("this method is unavailabel on semaphores with concurrency > 1; use the scoped release returned by acquire instead");if(this._currentReleaser){var e=this._currentReleaser;this._currentReleaser=void 0,e()}},e.prototype._dispatch=function(){var e=this,t=this._queue.shift();if(t){var r=!1;this._currentReleaser=function(){r||(r=!0,e._value++,e._dispatch())},t([this._value--,this._currentReleaser])}},e}();t.default=o},48125:(e,t,r)=>{"use strict";t.WU=void 0;var n=r(85078);Object.defineProperty(t,"WU",{enumerable:!0,get:function(){return n.default}});r(2403),r(41960)},41960:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.withTimeout=void 0;var n=r(70655);t.withTimeout=function(e,t,r){var o=this;return void 0===r&&(r=new Error("timeout")),{acquire:function(){return new Promise((function(s,i){return n.__awaiter(o,void 0,void 0,(function(){var o,a;return n.__generator(this,(function(n){switch(n.label){case 0:return o=!1,setTimeout((function(){o=!0,i(r)}),t),[4,e.acquire()];case 1:return a=n.sent(),o?(Array.isArray(a)?a[1]:a)():s(a),[2]}}))}))}))},runExclusive:function(e){return n.__awaiter(this,void 0,void 0,(function(){var t,r;return n.__generator(this,(function(n){switch(n.label){case 0:t=function(){},n.label=1;case 1:return n.trys.push([1,,7,8]),[4,this.acquire()];case 2:return r=n.sent(),Array.isArray(r)?(t=r[1],[4,e(r[0])]):[3,4];case 3:return[2,n.sent()];case 4:return t=r,[4,e()];case 5:return[2,n.sent()];case 6:return[3,8];case 7:return t(),[7];case 8:return[2]}}))}))},release:function(){e.release()},isLocked:function(){return e.isLocked()}}}},53786:e=>{"use strict";const t=(e,t)=>function(){const r=t.promiseModule,n=new Array(arguments.length);for(let e=0;e<arguments.length;e++)n[e]=arguments[e];return new r(((r,o)=>{t.errorFirst?n.push((function(e,n){if(t.multiArgs){const t=new Array(arguments.length-1);for(let e=1;e<arguments.length;e++)t[e-1]=arguments[e];e?(t.unshift(e),o(t)):r(t)}else e?o(e):r(n)})):n.push((function(e){if(t.multiArgs){const e=new Array(arguments.length-1);for(let t=0;t<arguments.length;t++)e[t]=arguments[t];r(e)}else r(e)})),e.apply(this,n)}))};e.exports=(e,r)=>{r=Object.assign({exclude:[/.+(Sync|Stream)$/],errorFirst:!0,promiseModule:Promise},r);const n=e=>{const t=t=>"string"==typeof t?e===t:t.test(e);return r.include?r.include.some(t):!r.exclude.some(t)};let o;o="function"==typeof e?function(){return r.excludeMain?e.apply(this,arguments):t(e,r).apply(this,arguments)}:Object.create(Object.getPrototypeOf(e));for(const s in e){const i=e[s];o[s]="function"==typeof i&&n(s)?t(i,r):i}return o}},55850:(e,t,r)=>{r(75682),r(53786);const n=r(37253),o=(e,t)=>e+t,s=["sync","latest"];function i(e){return Number.parseInt(e,16)}e.exports=class extends n{constructor(e={}){super(),this._blockResetDuration=e.blockResetDuration||2e4,this._blockResetTimeout,this._currentBlock=null,this._isRunning=!1,this._onNewListener=this._onNewListener.bind(this),this._onRemoveListener=this._onRemoveListener.bind(this),this._resetCurrentBlock=this._resetCurrentBlock.bind(this),this._setupInternalEvents()}isRunning(){return this._isRunning}getCurrentBlock(){return this._currentBlock}async getLatestBlock(){return this._currentBlock?this._currentBlock:await new Promise((e=>this.once("latest",e)))}removeAllListeners(e){e?super.removeAllListeners(e):super.removeAllListeners(),this._setupInternalEvents(),this._onRemoveListener()}_start(){}_end(){}_setupInternalEvents(){this.removeListener("newListener",this._onNewListener),this.removeListener("removeListener",this._onRemoveListener),this.on("newListener",this._onNewListener),this.on("removeListener",this._onRemoveListener)}_onNewListener(e,t){s.includes(e)&&this._maybeStart()}_onRemoveListener(e,t){this._getBlockTrackerEventCount()>0||this._maybeEnd()}_maybeStart(){this._isRunning||(this._isRunning=!0,this._cancelBlockResetTimeout(),this._start())}_maybeEnd(){this._isRunning&&(this._isRunning=!1,this._setupBlockResetTimeout(),this._end())}_getBlockTrackerEventCount(){return s.map((e=>this.listenerCount(e))).reduce(o)}_newPotentialLatest(e){const t=this._currentBlock;t&&i(e)<=i(t)||this._setCurrentBlock(e)}_setCurrentBlock(e){const t=this._currentBlock;this._currentBlock=e,this.emit("latest",e),this.emit("sync",{oldBlock:t,newBlock:e})}_setupBlockResetTimeout(){this._cancelBlockResetTimeout(),this._blockResetTimeout=setTimeout(this._resetCurrentBlock,this._blockResetDuration),this._blockResetTimeout.unref&&this._blockResetTimeout.unref()}_cancelBlockResetTimeout(){clearTimeout(this._blockResetTimeout)}_resetCurrentBlock(){this._currentBlock=null}}},75012:(e,t,r)=>{const n=r(53786),o=r(55850);function s(e,t){return new Promise((r=>{const n=setTimeout(r,e);n.unref&&t&&n.unref()}))}e.exports=class extends o{constructor(e={}){if(!e.provider)throw new Error("PollingBlockTracker - no provider specified.");const t=e.pollingInterval||2e4,r=e.retryTimeout||t/10,n=void 0===e.keepEventLoopActive||e.keepEventLoopActive,o=e.setSkipCacheFlag||!1;super(Object.assign({blockResetDuration:t},e)),this._provider=e.provider,this._pollingInterval=t,this._retryTimeout=r,this._keepEventLoopActive=n,this._setSkipCacheFlag=o}async checkForLatestBlock(){return await this._updateLatestBlock(),await this.getLatestBlock()}_start(){this._performSync().catch((e=>this.emit("error",e)))}async _performSync(){for(;this._isRunning;)try{await this._updateLatestBlock(),await s(this._pollingInterval,!this._keepEventLoopActive)}catch(e){const t=new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\n${e.stack}`);try{this.emit("error",t)}catch(e){console.error(t)}await s(this._retryTimeout,!this._keepEventLoopActive)}}async _updateLatestBlock(){const e=await this._fetchLatestBlock();this._newPotentialLatest(e)}async _fetchLatestBlock(){const e={jsonrpc:"2.0",id:1,method:"eth_blockNumber",params:[]};this._setSkipCacheFlag&&(e.skipCache=!0);const t=await n((t=>this._provider.sendAsync(e,t)))();if(t.error)throw new Error(`PollingBlockTracker - encountered error fetching block:\n${t.error}`);return t.result}}},23256:(e,t,r)=>{const n=r(76622);e.exports=class extends n{constructor(){super(),this.allResults=[]}async update(){throw new Error("BaseFilterWithHistory - no update method specified")}addResults(e){this.allResults=this.allResults.concat(e),super.addResults(e)}addInitialResults(e){this.allResults=this.allResults.concat(e),super.addInitialResults(e)}getAllResults(){return this.allResults}}},76622:(e,t,r)=>{const n=r(19394).default;e.exports=class extends n{constructor(){super(),this.updates=[]}async initialize(){}async update(){throw new Error("BaseFilter - no update method specified")}addResults(e){this.updates=this.updates.concat(e),e.forEach((e=>this.emit("update",e)))}addInitialResults(e){}getChangesAndClear(){const e=this.updates;return this.updates=[],e}}},72785:(e,t,r)=>{const n=r(76622),o=r(40207),{incrementHexInt:s}=r(98112);e.exports=class extends n{constructor({provider:e,params:t}){super(),this.type="block",this.provider=e}async update({oldBlock:e,newBlock:t}){const r=t,n=s(e),i=(await o({provider:this.provider,fromBlock:n,toBlock:r})).map((e=>e.hash));this.addResults(i)}}},40207:e=>{function t(e){return null==e?e:Number.parseInt(e,16)}function r(e){return null==e?e:"0x"+e.toString(16)}e.exports=async function({provider:e,fromBlock:n,toBlock:o}){n||(n=o);const s=t(n),i=t(o),a=Array(i-s+1).fill().map(((e,t)=>s+t)).map(r);return await Promise.all(a.map((t=>function(e,t,r){return new Promise(((t,n)=>{e.sendAsync({id:1,jsonrpc:"2.0",method:"eth_getBlockByNumber",params:r},((e,r)=>{if(e)return n(e);t(r.result)}))}))}(e,0,[t,!1]))))}},98112:e=>{function t(e){return e.sort(((e,t)=>"latest"===e||"earliest"===t?1:"latest"===t||"earliest"===e?-1:r(e)-r(t)))}function r(e){return null==e?e:Number.parseInt(e,16)}function n(e){if(null==e)return e;let t=e.toString(16);return t.length%2&&(t="0"+t),"0x"+t}function o(){return Math.floor(16*Math.random()).toString(16)}e.exports={minBlockRef:function(...e){return t(e)[0]},maxBlockRef:function(...e){const r=t(e);return r[r.length-1]},sortBlockRefs:t,bnToHex:function(e){return"0x"+e.toString(16)},blockRefIsNumber:function(e){return e&&!["earliest","latest","pending"].includes(e)},hexToInt:r,incrementHexInt:function(e){return null==e?e:n(r(e)+1)},intToHex:n,unsafeRandomBytes:function(e){let t="0x";for(let r=0;r<e;r++)t+=o(),t+=o();return t}}},98406:(e,t,r)=>{const n=r(48125).WU,{createAsyncMiddleware:o}=r(88625),s=r(57688),i=r(81663),a=r(72785),c=r(25792),{intToHex:u,hexToInt:l}=r(98112);function p(e){return h((async(...t)=>{const r=await e(...t);return u(r.id)}))}function h(e){return o((async(t,r)=>{const n=await e.apply(null,t.params);r.result=n}))}function d(e,t){const r=[];for(let t in e)r.push(e[t]);return r}e.exports=function({blockTracker:e,provider:t}){let r=0,o={};const f=new n,y=function({mutex:e}){return t=>async(r,n,o,s)=>{(await e.acquire())(),t(r,n,o,s)}}({mutex:f}),m=s({eth_newFilter:y(p(g)),eth_newBlockFilter:y(p(w)),eth_newPendingTransactionFilter:y(p(k)),eth_uninstallFilter:y(h(b)),eth_getFilterChanges:y(h(v)),eth_getFilterLogs:y(h(B))}),_=async({oldBlock:e,newBlock:t})=>{if(0===o.length)return;const r=await f.acquire();try{await Promise.all(d(o).map((async r=>{try{await r.update({oldBlock:e,newBlock:t})}catch(e){console.error(e)}})))}catch(e){console.error(e)}r()};return m.newLogFilter=g,m.newBlockFilter=w,m.newPendingTransactionFilter=k,m.uninstallFilter=b,m.getFilterChanges=v,m.getFilterLogs=B,m.destroy=()=>{!async function(){const e=d(o).length;o={},x({prevFilterCount:e,newFilterCount:0})}()},m;async function g(e){const r=new i({provider:t,params:e});return await R(r),r}async function w(){const e=new a({provider:t});return await R(e),e}async function k(){const e=new c({provider:t});return await R(e),e}async function v(e){const t=l(e),r=o[t];if(!r)throw new Error(`No filter for index "${t}"`);return r.getChangesAndClear()}async function B(e){const t=l(e),r=o[t];if(!r)throw new Error(`No filter for index "${t}"`);return"log"===r.type?results=r.getAllResults():results=[],results}async function b(e){const t=l(e),r=o[t],n=Boolean(r);return n&&await async function(e){const t=d(o).length;delete o[e];x({prevFilterCount:t,newFilterCount:d(o).length})}(t),n}async function R(t){const n=d(o).length,s=await e.getLatestBlock();return await t.initialize({currentBlock:s}),r++,o[r]=t,t.id=r,t.idHex=u(r),x({prevFilterCount:n,newFilterCount:d(o).length}),r}function x({prevFilterCount:t,newFilterCount:r}){0===t&&r>0?e.on("sync",_):t>0&&0===r&&e.removeListener("sync",_)}}},81663:(e,t,r)=>{const n=r(75682),o=r(6417),s=r(23256),{bnToHex:i,hexToInt:a,incrementHexInt:c,minBlockRef:u,blockRefIsNumber:l}=r(98112);e.exports=class extends s{constructor({provider:e,params:t}){super(),this.type="log",this.ethQuery=new n(e),this.params=Object.assign({fromBlock:"latest",toBlock:"latest",address:void 0,topics:[]},t),this.params.address&&(Array.isArray(this.params.address)||(this.params.address=[this.params.address]),this.params.address=this.params.address.map((e=>e.toLowerCase())))}async initialize({currentBlock:e}){let t=this.params.fromBlock;["latest","pending"].includes(t)&&(t=e),"earliest"===t&&(t="0x0"),this.params.fromBlock=t;const r=u(this.params.toBlock,e),n=Object.assign({},this.params,{toBlock:r}),o=await this._fetchLogs(n);this.addInitialResults(o)}async update({oldBlock:e,newBlock:t}){const r=t;let n;n=e?c(e):t;const o=Object.assign({},this.params,{fromBlock:n,toBlock:r}),s=(await this._fetchLogs(o)).filter((e=>this.matchLog(e)));this.addResults(s)}async _fetchLogs(e){return await o((t=>this.ethQuery.getLogs(e,t)))()}matchLog(e){if(a(this.params.fromBlock)>=a(e.blockNumber))return!1;if(l(this.params.toBlock)&&a(this.params.toBlock)<=a(e.blockNumber))return!1;const t=e.address&&e.address.toLowerCase();return!(this.params.address&&t&&!this.params.address.includes(t))&&this.params.topics.every(((t,r)=>{let n=e.topics[r];if(!n)return!1;n=n.toLowerCase();let o=Array.isArray(t)?t:[t];return!!o.includes(null)||(o=o.map((e=>e.toLowerCase())),o.includes(n))}))}}},6417:e=>{"use strict";const t=(e,t,r,n)=>function(...o){return new(0,t.promiseModule)(((s,i)=>{t.multiArgs?o.push(((...e)=>{t.errorFirst?e[0]?i(e):(e.shift(),s(e)):s(e)})):t.errorFirst?o.push(((e,t)=>{e?i(e):s(t)})):o.push(s);const a=this===r?n:this;Reflect.apply(e,a,o)}))},r=new WeakMap;e.exports=(e,n)=>{n={exclude:[/.+(?:Sync|Stream)$/],errorFirst:!0,promiseModule:Promise,...n};const o=typeof e;if(null===e||"object"!==o&&"function"!==o)throw new TypeError(`Expected \`input\` to be a \`Function\` or \`Object\`, got \`${null===e?"null":o}\``);const s=new WeakMap,i=new Proxy(e,{apply(e,r,o){const a=s.get(e);if(a)return Reflect.apply(a,r,o);const c=n.excludeMain?e:t(e,n,i,e);return s.set(e,c),Reflect.apply(c,r,o)},get(e,o){const a=e[o];if(!((e,t)=>{let o=r.get(e);if(o||(o={},r.set(e,o)),t in o)return o[t];const s=e=>"string"==typeof e||"symbol"==typeof t?t===e:e.test(t),i=Reflect.getOwnPropertyDescriptor(e,t),a=void 0===i||i.writable||i.configurable,c=(n.include?n.include.some(s):!n.exclude.some(s))&&a;return o[t]=c,c})(e,o)||a===Function.prototype[o])return a;const c=s.get(a);if(c)return c;if("function"==typeof a){const r=t(a,n,i,e);return s.set(a,r),r}return a}});return i}},68961:(e,t,r)=>{const n=r(19394).default,o=r(57688),{createAsyncMiddleware:s}=r(88625),i=r(98406),{unsafeRandomBytes:a,incrementHexInt:c}=r(98112),u=r(40207);function l(e){return{hash:e.hash,parentHash:e.parentHash,sha3Uncles:e.sha3Uncles,miner:e.miner,stateRoot:e.stateRoot,transactionsRoot:e.transactionsRoot,receiptsRoot:e.receiptsRoot,logsBloom:e.logsBloom,difficulty:e.difficulty,number:e.number,gasLimit:e.gasLimit,gasUsed:e.gasUsed,nonce:e.nonce,mixHash:e.mixHash,timestamp:e.timestamp,extraData:e.extraData}}e.exports=function({blockTracker:e,provider:t}){const r={},p=i({blockTracker:e,provider:t});let h=!1;const d=new n,f=o({eth_subscribe:s((async function(n,o){if(h)throw new Error("SubscriptionManager - attempting to use after destroying");const s=n.params[0],i=a(16);let d;switch(s){case"newHeads":d=function({subId:r}){const n={type:s,destroy:async()=>{e.removeListener("sync",n.update)},update:async({oldBlock:e,newBlock:n})=>{const o=n,s=c(e);(await u({provider:t,fromBlock:s,toBlock:o})).map(l).forEach((e=>{y(r,e)}))}};return e.on("sync",n.update),n}({subId:i});break;case"logs":const r=n.params[1];d=function({subId:e,filter:t}){return t.on("update",(t=>y(e,t))),{type:s,destroy:async()=>await p.uninstallFilter(t.idHex)}}({subId:i,filter:await p.newLogFilter(r)});break;default:throw new Error(`SubscriptionManager - unsupported subscription type "${s}"`)}return r[i]=d,void(o.result=i)})),eth_unsubscribe:s((async function(e,t){if(h)throw new Error("SubscriptionManager - attempting to use after destroying");const n=e.params[0],o=r[n];o?(delete r[n],await o.destroy(),t.result=!0):t.result=!1}))});return f.destroy=function(){d.removeAllListeners();for(const e in r)r[e].destroy(),delete r[e];h=!0},{events:d,middleware:f};function y(e,t){d.emit("notification",{jsonrpc:"2.0",method:"eth_subscription",params:{subscription:e,result:t}})}}},25792:(e,t,r)=>{const n=r(76622),o=r(40207),{incrementHexInt:s}=r(98112);e.exports=class extends n{constructor({provider:e}){super(),this.type="tx",this.provider=e}async update({oldBlock:e}){const t=e,r=s(e),n=await o({provider:this.provider,fromBlock:r,toBlock:t}),i=[];for(const e of n)i.push(...e.transactions);this.addResults(i)}}},59721:e=>{e.exports=function(e){return(t,r,n,o)=>{const s=e[t.method];return void 0===s?n():"function"==typeof s?s(t,r,n,o):(r.result=s,o())}}},57688:(e,t,r)=>{e.exports=r(59721)},75682:(e,t,r)=>{const n=r(47529),o=r(23420)();function s(e){this.currentProvider=e}function i(e){return function(){const t=this;var r=[].slice.call(arguments),n=r.pop();t.sendAsync({method:e,params:r},n)}}function a(e,t){return function(){const r=this;var n=[].slice.call(arguments),o=n.pop();n.length<e&&n.push("latest"),r.sendAsync({method:t,params:n},o)}}e.exports=s,s.prototype.getBalance=a(2,"eth_getBalance"),s.prototype.getCode=a(2,"eth_getCode"),s.prototype.getTransactionCount=a(2,"eth_getTransactionCount"),s.prototype.getStorageAt=a(3,"eth_getStorageAt"),s.prototype.call=a(2,"eth_call"),s.prototype.protocolVersion=i("eth_protocolVersion"),s.prototype.syncing=i("eth_syncing"),s.prototype.coinbase=i("eth_coinbase"),s.prototype.mining=i("eth_mining"),s.prototype.hashrate=i("eth_hashrate"),s.prototype.gasPrice=i("eth_gasPrice"),s.prototype.accounts=i("eth_accounts"),s.prototype.blockNumber=i("eth_blockNumber"),s.prototype.getBlockTransactionCountByHash=i("eth_getBlockTransactionCountByHash"),s.prototype.getBlockTransactionCountByNumber=i("eth_getBlockTransactionCountByNumber"),s.prototype.getUncleCountByBlockHash=i("eth_getUncleCountByBlockHash"),s.prototype.getUncleCountByBlockNumber=i("eth_getUncleCountByBlockNumber"),s.prototype.sign=i("eth_sign"),s.prototype.sendTransaction=i("eth_sendTransaction"),s.prototype.sendRawTransaction=i("eth_sendRawTransaction"),s.prototype.estimateGas=i("eth_estimateGas"),s.prototype.getBlockByHash=i("eth_getBlockByHash"),s.prototype.getBlockByNumber=i("eth_getBlockByNumber"),s.prototype.getTransactionByHash=i("eth_getTransactionByHash"),s.prototype.getTransactionByBlockHashAndIndex=i("eth_getTransactionByBlockHashAndIndex"),s.prototype.getTransactionByBlockNumberAndIndex=i("eth_getTransactionByBlockNumberAndIndex"),s.prototype.getTransactionReceipt=i("eth_getTransactionReceipt"),s.prototype.getUncleByBlockHashAndIndex=i("eth_getUncleByBlockHashAndIndex"),s.prototype.getUncleByBlockNumberAndIndex=i("eth_getUncleByBlockNumberAndIndex"),s.prototype.getCompilers=i("eth_getCompilers"),s.prototype.compileLLL=i("eth_compileLLL"),s.prototype.compileSolidity=i("eth_compileSolidity"),s.prototype.compileSerpent=i("eth_compileSerpent"),s.prototype.newFilter=i("eth_newFilter"),s.prototype.newBlockFilter=i("eth_newBlockFilter"),s.prototype.newPendingTransactionFilter=i("eth_newPendingTransactionFilter"),s.prototype.uninstallFilter=i("eth_uninstallFilter"),s.prototype.getFilterChanges=i("eth_getFilterChanges"),s.prototype.getFilterLogs=i("eth_getFilterLogs"),s.prototype.getLogs=i("eth_getLogs"),s.prototype.getWork=i("eth_getWork"),s.prototype.submitWork=i("eth_submitWork"),s.prototype.submitHashrate=i("eth_submitHashrate"),s.prototype.sendAsync=function(e,t){var r;this.currentProvider.sendAsync((r=e,n({id:o(),jsonrpc:"2.0",params:[]},r)),(function(e,r){if(!e&&r.error&&(e=new Error("EthQuery - RPC Error - "+r.error.message)),e)return t(e);t(null,r.result)}))}},17398:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.JsonRpcEngine=void 0;const o=n(r(19394)),s=r(79826);class i extends o.default{constructor(){super(),this._middleware=[]}push(e){this._middleware.push(e)}handle(e,t){if(t&&"function"!=typeof t)throw new Error('"callback" must be a function if provided.');return Array.isArray(e)?t?this._handleBatch(e,t):this._handleBatch(e):t?this._handle(e,t):this._promiseHandle(e)}asMiddleware(){return async(e,t,r,n)=>{try{const[o,s,a]=await i._runAllMiddleware(e,t,this._middleware);return s?(await i._runReturnHandlers(a),n(o)):r((async e=>{try{await i._runReturnHandlers(a)}catch(t){return e(t)}return e()}))}catch(e){return n(e)}}}async _handleBatch(e,t){try{const r=await Promise.all(e.map(this._promiseHandle.bind(this)));return t?t(null,r):r}catch(e){if(t)return t(e);throw e}}_promiseHandle(e){return new Promise((t=>{this._handle(e,((e,r)=>{t(r)}))}))}async _handle(e,t){if(!e||Array.isArray(e)||"object"!=typeof e){const r=new s.EthereumRpcError(s.errorCodes.rpc.invalidRequest,"Requests must be plain objects. Received: "+typeof e,{request:e});return t(r,{id:void 0,jsonrpc:"2.0",error:r})}if("string"!=typeof e.method){const r=new s.EthereumRpcError(s.errorCodes.rpc.invalidRequest,"Must specify a string method. Received: "+typeof e.method,{request:e});return t(r,{id:e.id,jsonrpc:"2.0",error:r})}const r=Object.assign({},e),n={id:r.id,jsonrpc:r.jsonrpc};let o=null;try{await this._processRequest(r,n)}catch(e){o=e}return o&&(delete n.result,n.error||(n.error=s.serializeError(o))),t(o,n)}async _processRequest(e,t){const[r,n,o]=await i._runAllMiddleware(e,t,this._middleware);if(i._checkForCompletion(e,t,n),await i._runReturnHandlers(o),r)throw r}static async _runAllMiddleware(e,t,r){const n=[];let o=null,s=!1;for(const a of r)if([o,s]=await i._runMiddleware(e,t,a,n),s)break;return[o,s,n.reverse()]}static _runMiddleware(e,t,r,n){return new Promise((o=>{const i=e=>{const r=e||t.error;r&&(t.error=s.serializeError(r)),o([r,!0])},c=r=>{t.error?i(t.error):(r&&("function"!=typeof r&&i(new s.EthereumRpcError(s.errorCodes.rpc.internal,`JsonRpcEngine: "next" return handlers must be functions. Received "${typeof r}" for request:\n${a(e)}`,{request:e})),n.push(r)),o([null,!1]))};try{r(e,t,c,i)}catch(e){i(e)}}))}static async _runReturnHandlers(e){for(const t of e)await new Promise(((e,r)=>{t((t=>t?r(t):e()))}))}static _checkForCompletion(e,t,r){if(!("result"in t)&&!("error"in t))throw new s.EthereumRpcError(s.errorCodes.rpc.internal,`JsonRpcEngine: Response has no error or result for request:\n${a(e)}`,{request:e});if(!r)throw new s.EthereumRpcError(s.errorCodes.rpc.internal,`JsonRpcEngine: Nothing ended request:\n${a(e)}`,{request:e})}}function a(e){return JSON.stringify(e,null,2)}t.JsonRpcEngine=i},31841:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createAsyncMiddleware=void 0,t.createAsyncMiddleware=function(e){return async(t,r,n,o)=>{let s;const i=new Promise((e=>{s=e}));let a=null,c=!1;const u=async()=>{c=!0,n((e=>{a=e,s()})),await i};try{await e(t,r,u),c?(await i,a(null)):o(null)}catch(e){a?a(e):o(e)}}}},48508:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createScaffoldMiddleware=void 0,t.createScaffoldMiddleware=function(e){return(t,r,n,o)=>{const s=e[t.method];return void 0===s?n():"function"==typeof s?s(t,r,n,o):(r.result=s,o())}}},33107:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getUniqueId=void 0;const r=4294967295;let n=Math.floor(Math.random()*r);t.getUniqueId=function(){return n=(n+1)%r,n}},85086:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createIdRemapMiddleware=void 0;const n=r(33107);t.createIdRemapMiddleware=function(){return(e,t,r,o)=>{const s=e.id,i=n.getUniqueId();e.id=i,t.id=i,r((r=>{e.id=s,t.id=s,r()}))}}},88625:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(85086),t),o(r(31841),t),o(r(48508),t),o(r(33107),t),o(r(17398),t),o(r(79962),t)},79962:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mergeMiddleware=void 0;const n=r(17398);t.mergeMiddleware=function(e){const t=new n.JsonRpcEngine;return e.forEach((e=>t.push(e))),t.asMiddleware()}},23420:e=>{e.exports=function(e){var t=(e=e||{}).max||Number.MAX_SAFE_INTEGER,r=void 0!==e.start?e.start:Math.floor(Math.random()*t);return function(){return r%=t,r++}}},37253:(e,t,r)=>{const n=r(89539),o=r(17187);var s="object"==typeof Reflect?Reflect:null,i=s&&"function"==typeof s.apply?s.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};function a(){o.call(this)}function c(e,t,r){try{i(e,t,r)}catch(e){setTimeout((()=>{throw e}))}}function u(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}e.exports=a,n.inherits(a,o),a.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,o=this._events;if(void 0!==o)n=n&&void 0===o.error;else if(!n)return!1;if(n){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var i=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw i.context=s,i}var a=o[e];if(void 0===a)return!1;if("function"==typeof a)c(a,this,t);else{var l=a.length,p=u(a,l);for(r=0;r<l;++r)c(p[r],this,t)}return!0}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(self.webpackChunkmy_swap=self.webpackChunkmy_swap||[]).push([[9840],{58162:(e,r,t)=>{"use strict";var n=t(89509).Buffer;e.exports=function(e){if(e.length>=255)throw new TypeError("Alphabet too long");for(var r=new Uint8Array(256),t=0;t<r.length;t++)r[t]=255;for(var i=0;i<e.length;i++){var o=e.charAt(i),a=o.charCodeAt(0);if(255!==r[a])throw new TypeError(o+" is ambiguous");r[a]=i}var c=e.length,s=e.charAt(0),u=Math.log(c)/Math.log(256),l=Math.log(256)/Math.log(c);function p(e){if("string"!=typeof e)throw new TypeError("Expected String");if(0===e.length)return n.alloc(0);for(var t=0,i=0,o=0;e[t]===s;)i++,t++;for(var a=(e.length-t)*u+1>>>0,l=new Uint8Array(a);e[t];){var p=r[e.charCodeAt(t)];if(255===p)return;for(var h=0,y=a-1;(0!==p||h<o)&&-1!==y;y--,h++)p+=c*l[y]>>>0,l[y]=p%256>>>0,p=p/256>>>0;if(0!==p)throw new Error("Non-zero carry");o=h,t++}for(var d=a-o;d!==a&&0===l[d];)d++;var f=n.allocUnsafe(i+(a-d));f.fill(0,0,i);for(var w=i;d!==a;)f[w++]=l[d++];return f}return{encode:function(r){if((Array.isArray(r)||r instanceof Uint8Array)&&(r=n.from(r)),!n.isBuffer(r))throw new TypeError("Expected Buffer");if(0===r.length)return"";for(var t=0,i=0,o=0,a=r.length;o!==a&&0===r[o];)o++,t++;for(var u=(a-o)*l+1>>>0,p=new Uint8Array(u);o!==a;){for(var h=r[o],y=0,d=u-1;(0!==h||y<i)&&-1!==d;d--,y++)h+=256*p[d]>>>0,p[d]=h%c>>>0,h=h/c>>>0;if(0!==h)throw new Error("Non-zero carry");i=y,o++}for(var f=u-i;f!==u&&0===p[f];)f++;for(var w=s.repeat(t);f<u;++f)w+=e.charAt(p[f]);return w},decodeUnsafe:p,decode:function(e){var r=p(e);if(r)return r;throw new Error("Non-base"+c+" character")}}}},77191:(e,r,t)=>{var n=t(58162);e.exports=n("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")},53310:(e,r,t)=>{"use strict";var n=t(77191),i=t(89509).Buffer;e.exports=function(e){function r(r){var t=r.slice(0,-4),n=r.slice(-4),i=e(t);if(!(n[0]^i[0]|n[1]^i[1]|n[2]^i[2]|n[3]^i[3]))return t}return{encode:function(r){var t=e(r);return n.encode(i.concat([r,t],r.length+4))},decode:function(e){var t=r(n.decode(e));if(!t)throw new Error("Invalid checksum");return t},decodeUnsafe:function(e){var t=n.decodeUnsafe(e);if(t)return r(t)}}}},58334:(e,r,t)=>{"use strict";var n=t(23482),i=t(53310);e.exports=i((function(e){var r=n("sha256").update(e).digest();return n("sha256").update(r).digest()}))},49840:(e,r,t)=>{var n=t(48583),i=t(89509).Buffer,o=t(55835),a=t(58334),c=t(24667),s=i.from("Bitcoin seed","utf8"),u=2147483648,l={private:76066276,public:76067358};function p(e){this.versions=e||l,this.depth=0,this.index=0,this._privateKey=null,this._publicKey=null,this.chainCode=null,this._fingerprint=0,this.parentFingerprint=0}function h(e,r,t){var n=i.allocUnsafe(78);n.writeUInt32BE(r,0),n.writeUInt8(e.depth,4);var o=e.depth?e.parentFingerprint:0;return n.writeUInt32BE(o,5),n.writeUInt32BE(e.index,9),e.chainCode.copy(n,13),t.copy(n,45),n}function y(e){var r=o.createHash("sha256").update(e).digest();return o.createHash("ripemd160").update(r).digest()}Object.defineProperty(p.prototype,"fingerprint",{get:function(){return this._fingerprint}}),Object.defineProperty(p.prototype,"identifier",{get:function(){return this._identifier}}),Object.defineProperty(p.prototype,"pubKeyHash",{get:function(){return this.identifier}}),Object.defineProperty(p.prototype,"privateKey",{get:function(){return this._privateKey},set:function(e){n.equal(e.length,32,"Private key must be 32 bytes."),n(!0===c.privateKeyVerify(e),"Invalid private key"),this._privateKey=e,this._publicKey=i.from(c.publicKeyCreate(e,!0)),this._identifier=y(this.publicKey),this._fingerprint=this._identifier.slice(0,4).readUInt32BE(0)}}),Object.defineProperty(p.prototype,"publicKey",{get:function(){return this._publicKey},set:function(e){n(33===e.length||65===e.length,"Public key must be 33 or 65 bytes."),n(!0===c.publicKeyVerify(e),"Invalid public key"),this._publicKey=i.from(c.publicKeyConvert(e,!0)),this._identifier=y(this.publicKey),this._fingerprint=this._identifier.slice(0,4).readUInt32BE(0),this._privateKey=null}}),Object.defineProperty(p.prototype,"privateExtendedKey",{get:function(){return this._privateKey?a.encode(h(this,this.versions.private,i.concat([i.alloc(1,0),this.privateKey]))):null}}),Object.defineProperty(p.prototype,"publicExtendedKey",{get:function(){return a.encode(h(this,this.versions.public,this.publicKey))}}),p.prototype.derive=function(e){if("m"===e||"M"===e||"m'"===e||"M'"===e)return this;var r=e.split("/"),t=this;return r.forEach((function(e,r){if(0!==r){var i=e.length>1&&"'"===e[e.length-1],o=parseInt(e,10);n(o<u,"Invalid index"),i&&(o+=u),t=t.deriveChild(o)}else n(/^[mM]{1}/.test(e),'Path must start with "m" or "M"')})),t},p.prototype.deriveChild=function(e){var r,t=e>=u,a=i.allocUnsafe(4);if(a.writeUInt32BE(e,0),t){n(this.privateKey,"Could not derive hardened child key");var s=this.privateKey,l=i.alloc(1,0);s=i.concat([l,s]),r=i.concat([s,a])}else r=i.concat([this.publicKey,a]);var h=o.createHmac("sha512",this.chainCode).update(r).digest(),y=h.slice(0,32),d=h.slice(32),f=new p(this.versions);if(this.privateKey)try{f.privateKey=i.from(c.privateKeyTweakAdd(i.from(this.privateKey),y))}catch(r){return this.deriveChild(e+1)}else try{f.publicKey=i.from(c.publicKeyTweakAdd(i.from(this.publicKey),y,!0))}catch(r){return this.deriveChild(e+1)}return f.chainCode=d,f.depth=this.depth+1,f.parentFingerprint=this.fingerprint,f.index=e,f},p.prototype.sign=function(e){return i.from(c.ecdsaSign(e,this.privateKey).signature)},p.prototype.verify=function(e,r){return c.ecdsaVerify(Uint8Array.from(r),Uint8Array.from(e),Uint8Array.from(this.publicKey))},p.prototype.wipePrivateData=function(){return this._privateKey&&o.randomBytes(this._privateKey.length).copy(this._privateKey),this._privateKey=null,this},p.prototype.toJSON=function(){return{xpriv:this.privateExtendedKey,xpub:this.publicExtendedKey}},p.fromMasterSeed=function(e,r){var t=o.createHmac("sha512",s).update(e).digest(),n=t.slice(0,32),i=t.slice(32),a=new p(r);return a.chainCode=i,a.privateKey=n,a},p.fromExtendedKey=function(e,r){var t=new p(r=r||l),i=a.decode(e),o=i.readUInt32BE(0);n(o===r.private||o===r.public,"Version mismatch: does not match private or public"),t.depth=i.readUInt8(4),t.parentFingerprint=i.readUInt32BE(5),t.index=i.readUInt32BE(9),t.chainCode=i.slice(13,45);var c=i.slice(45);return 0===c.readUInt8(0)?(n(o===r.private,"Version mismatch: version does not match private"),t.privateKey=c.slice(1)):(n(o===r.public,"Version mismatch: version does not match public"),t.publicKey=c),t},p.fromJSON=function(e){return p.fromExtendedKey(e.xpriv)},p.HARDENED_OFFSET=u,e.exports=p},24667:(e,r,t)=>{e.exports=t(96509)(t(61560))},61560:(e,r,t)=>{const n=new(0,t(86266).ec)("secp256k1"),i=n.curve,o=i.n.constructor;function a(e){const r=e[0];switch(r){case 2:case 3:return 33!==e.length?null:function(e,r){let t=new o(r);if(t.cmp(i.p)>=0)return null;t=t.toRed(i.red);let a=t.redSqr().redIMul(t).redIAdd(i.b).redSqrt();return 3===e!==a.isOdd()&&(a=a.redNeg()),n.keyPair({pub:{x:t,y:a}})}(r,e.subarray(1,33));case 4:case 6:case 7:return 65!==e.length?null:function(e,r,t){let a=new o(r),c=new o(t);if(a.cmp(i.p)>=0||c.cmp(i.p)>=0)return null;if(a=a.toRed(i.red),c=c.toRed(i.red),(6===e||7===e)&&c.isOdd()!==(7===e))return null;const s=a.redSqr().redIMul(a);return c.redSqr().redISub(s.redIAdd(i.b)).isZero()?n.keyPair({pub:{x:a,y:c}}):null}(r,e.subarray(1,33),e.subarray(33,65));default:return null}}function c(e,r){const t=r.encode(null,33===e.length);for(let r=0;r<e.length;++r)e[r]=t[r]}e.exports={contextRandomize:()=>0,privateKeyVerify(e){const r=new o(e);return r.cmp(i.n)<0&&!r.isZero()?0:1},privateKeyNegate(e){const r=new o(e),t=i.n.sub(r).umod(i.n).toArrayLike(Uint8Array,"be",32);return e.set(t),0},privateKeyTweakAdd(e,r){const t=new o(r);if(t.cmp(i.n)>=0)return 1;if(t.iadd(new o(e)),t.cmp(i.n)>=0&&t.isub(i.n),t.isZero())return 1;const n=t.toArrayLike(Uint8Array,"be",32);return e.set(n),0},privateKeyTweakMul(e,r){let t=new o(r);if(t.cmp(i.n)>=0||t.isZero())return 1;t.imul(new o(e)),t.cmp(i.n)>=0&&(t=t.umod(i.n));const n=t.toArrayLike(Uint8Array,"be",32);return e.set(n),0},publicKeyVerify:e=>null===a(e)?1:0,publicKeyCreate(e,r){const t=new o(r);return t.cmp(i.n)>=0||t.isZero()?1:(c(e,n.keyFromPrivate(r).getPublic()),0)},publicKeyConvert(e,r){const t=a(r);return null===t?1:(c(e,t.getPublic()),0)},publicKeyNegate(e,r){const t=a(r);if(null===t)return 1;const n=t.getPublic();return n.y=n.y.redNeg(),c(e,n),0},publicKeyCombine(e,r){const t=new Array(r.length);for(let e=0;e<r.length;++e)if(t[e]=a(r[e]),null===t[e])return 1;let n=t[0].getPublic();for(let e=1;e<t.length;++e)n=n.add(t[e].pub);return n.isInfinity()?2:(c(e,n),0)},publicKeyTweakAdd(e,r,t){const n=a(r);if(null===n)return 1;if((t=new o(t)).cmp(i.n)>=0)return 2;const s=n.getPublic().add(i.g.mul(t));return s.isInfinity()?2:(c(e,s),0)},publicKeyTweakMul(e,r,t){const n=a(r);return null===n?1:(t=new o(t)).cmp(i.n)>=0||t.isZero()?2:(c(e,n.getPublic().mul(t)),0)},signatureNormalize(e){const r=new o(e.subarray(0,32)),t=new o(e.subarray(32,64));return r.cmp(i.n)>=0||t.cmp(i.n)>=0?1:(1===t.cmp(n.nh)&&e.set(i.n.sub(t).toArrayLike(Uint8Array,"be",32),32),0)},signatureExport(e,r){const t=r.subarray(0,32),n=r.subarray(32,64);if(new o(t).cmp(i.n)>=0)return 1;if(new o(n).cmp(i.n)>=0)return 1;const{output:a}=e;let c=a.subarray(4,37);c[0]=0,c.set(t,1);let s=33,u=0;for(;s>1&&0===c[u]&&!(128&c[u+1]);--s,++u);if(c=c.subarray(u),128&c[0])return 1;if(s>1&&0===c[0]&&!(128&c[1]))return 1;let l=a.subarray(39,72);l[0]=0,l.set(n,1);let p=33,h=0;for(;p>1&&0===l[h]&&!(128&l[h+1]);--p,++h);return l=l.subarray(h),128&l[0]||p>1&&0===l[0]&&!(128&l[1])?1:(e.outputlen=6+s+p,a[0]=48,a[1]=e.outputlen-2,a[2]=2,a[3]=c.length,a.set(c,4),a[4+s]=2,a[5+s]=l.length,a.set(l,6+s),0)},signatureImport(e,r){if(r.length<8)return 1;if(r.length>72)return 1;if(48!==r[0])return 1;if(r[1]!==r.length-2)return 1;if(2!==r[2])return 1;const t=r[3];if(0===t)return 1;if(5+t>=r.length)return 1;if(2!==r[4+t])return 1;const n=r[5+t];if(0===n)return 1;if(6+t+n!==r.length)return 1;if(128&r[4])return 1;if(t>1&&0===r[4]&&!(128&r[5]))return 1;if(128&r[t+6])return 1;if(n>1&&0===r[t+6]&&!(128&r[t+7]))return 1;let a=r.subarray(4,4+t);if(33===a.length&&0===a[0]&&(a=a.subarray(1)),a.length>32)return 1;let c=r.subarray(6+t);if(33===c.length&&0===c[0]&&(c=c.slice(1)),c.length>32)throw new Error("S length is too long");let s=new o(a);s.cmp(i.n)>=0&&(s=new o(0));let u=new o(r.subarray(6+t));return u.cmp(i.n)>=0&&(u=new o(0)),e.set(s.toArrayLike(Uint8Array,"be",32),0),e.set(u.toArrayLike(Uint8Array,"be",32),32),0},ecdsaSign(e,r,t,a,c){if(c){const e=c;c=n=>{const i=e(r,t,null,a,n);if(!(i instanceof Uint8Array&&32===i.length))throw new Error("This is the way");return new o(i)}}const s=new o(t);if(s.cmp(i.n)>=0||s.isZero())return 1;let u;try{u=n.sign(r,t,{canonical:!0,k:c,pers:a})}catch(e){return 1}return e.signature.set(u.r.toArrayLike(Uint8Array,"be",32),0),e.signature.set(u.s.toArrayLike(Uint8Array,"be",32),32),e.recid=u.recoveryParam,0},ecdsaVerify(e,r,t){const c={r:e.subarray(0,32),s:e.subarray(32,64)},s=new o(c.r),u=new o(c.s);if(s.cmp(i.n)>=0||u.cmp(i.n)>=0)return 1;if(1===u.cmp(n.nh)||s.isZero()||u.isZero())return 3;const l=a(t);if(null===l)return 2;const p=l.getPublic();return n.verify(r,c,p)?0:3},ecdsaRecover(e,r,t,a){const s={r:r.slice(0,32),s:r.slice(32,64)},u=new o(s.r),l=new o(s.s);if(u.cmp(i.n)>=0||l.cmp(i.n)>=0)return 1;if(u.isZero()||l.isZero())return 2;let p;try{p=n.recoverPubKey(a,s,t)}catch(e){return 2}return c(e,p),0},ecdh(e,r,t,c,s,u,l){const p=a(r);if(null===p)return 1;const h=new o(t);if(h.cmp(i.n)>=0||h.isZero())return 2;const y=p.getPublic().mul(h);if(void 0===s){const r=y.encode(null,!0),t=n.hash().update(r).digest();for(let r=0;r<32;++r)e[r]=t[r]}else{u||(u=new Uint8Array(32));const r=y.getX().toArray("be",32);for(let e=0;e<32;++e)u[e]=r[e];l||(l=new Uint8Array(32));const t=y.getY().toArray("be",32);for(let e=0;e<32;++e)l[e]=t[e];const n=s(u,l,c);if(!(n instanceof Uint8Array&&n.length===e.length))return 2;e.set(n)}return 0}}},96509:e=>{const r="Impossible case. Please create issue.",t="The tweak was out of range or the resulted private key is invalid",n="The tweak was out of range or equal to zero",i="Public Key could not be parsed",o="Public Key serialization error",a="Signature could not be parsed";function c(e,r){if(!e)throw new Error(r)}function s(e,r,t){if(c(r instanceof Uint8Array,`Expected ${e} to be an Uint8Array`),void 0!==t)if(Array.isArray(t)){const n=`Expected ${e} to be an Uint8Array with length [${t.join(", ")}]`;c(t.includes(r.length),n)}else{const n=`Expected ${e} to be an Uint8Array with length ${t}`;c(r.length===t,n)}}function u(e){c("Boolean"===p(e),"Expected compressed to be a Boolean")}function l(e=(e=>new Uint8Array(e)),r){return"function"==typeof e&&(e=e(r)),s("output",e,r),e}function p(e){return Object.prototype.toString.call(e).slice(8,-1)}e.exports=e=>({contextRandomize(r){switch(c(null===r||r instanceof Uint8Array,"Expected seed to be an Uint8Array or null"),null!==r&&s("seed",r,32),e.contextRandomize(r)){case 1:throw new Error("Unknow error on context randomization")}},privateKeyVerify:r=>(s("private key",r,32),0===e.privateKeyVerify(r)),privateKeyNegate(t){switch(s("private key",t,32),e.privateKeyNegate(t)){case 0:return t;case 1:throw new Error(r)}},privateKeyTweakAdd(r,n){switch(s("private key",r,32),s("tweak",n,32),e.privateKeyTweakAdd(r,n)){case 0:return r;case 1:throw new Error(t)}},privateKeyTweakMul(r,t){switch(s("private key",r,32),s("tweak",t,32),e.privateKeyTweakMul(r,t)){case 0:return r;case 1:throw new Error(n)}},publicKeyVerify:r=>(s("public key",r,[33,65]),0===e.publicKeyVerify(r)),publicKeyCreate(r,t=!0,n){switch(s("private key",r,32),u(t),n=l(n,t?33:65),e.publicKeyCreate(n,r)){case 0:return n;case 1:throw new Error("Private Key is invalid");case 2:throw new Error(o)}},publicKeyConvert(r,t=!0,n){switch(s("public key",r,[33,65]),u(t),n=l(n,t?33:65),e.publicKeyConvert(n,r)){case 0:return n;case 1:throw new Error(i);case 2:throw new Error(o)}},publicKeyNegate(t,n=!0,a){switch(s("public key",t,[33,65]),u(n),a=l(a,n?33:65),e.publicKeyNegate(a,t)){case 0:return a;case 1:throw new Error(i);case 2:throw new Error(r);case 3:throw new Error(o)}},publicKeyCombine(r,t=!0,n){c(Array.isArray(r),"Expected public keys to be an Array"),c(r.length>0,"Expected public keys array will have more than zero items");for(const e of r)s("public key",e,[33,65]);switch(u(t),n=l(n,t?33:65),e.publicKeyCombine(n,r)){case 0:return n;case 1:throw new Error(i);case 2:throw new Error("The sum of the public keys is not valid");case 3:throw new Error(o)}},publicKeyTweakAdd(r,n,o=!0,a){switch(s("public key",r,[33,65]),s("tweak",n,32),u(o),a=l(a,o?33:65),e.publicKeyTweakAdd(a,r,n)){case 0:return a;case 1:throw new Error(i);case 2:throw new Error(t)}},publicKeyTweakMul(r,t,o=!0,a){switch(s("public key",r,[33,65]),s("tweak",t,32),u(o),a=l(a,o?33:65),e.publicKeyTweakMul(a,r,t)){case 0:return a;case 1:throw new Error(i);case 2:throw new Error(n)}},signatureNormalize(r){switch(s("signature",r,64),e.signatureNormalize(r)){case 0:return r;case 1:throw new Error(a)}},signatureExport(t,n){s("signature",t,64);const i={output:n=l(n,72),outputlen:72};switch(e.signatureExport(i,t)){case 0:return n.slice(0,i.outputlen);case 1:throw new Error(a);case 2:throw new Error(r)}},signatureImport(t,n){switch(s("signature",t),n=l(n,64),e.signatureImport(n,t)){case 0:return n;case 1:throw new Error(a);case 2:throw new Error(r)}},ecdsaSign(t,n,i={},o){s("message",t,32),s("private key",n,32),c("Object"===p(i),"Expected options to be an Object"),void 0!==i.data&&s("options.data",i.data),void 0!==i.noncefn&&c("Function"===p(i.noncefn),"Expected options.noncefn to be a Function");const a={signature:o=l(o,64),recid:null};switch(e.ecdsaSign(a,t,n,i.data,i.noncefn)){case 0:return a;case 1:throw new Error("The nonce generation function failed, or the private key was invalid");case 2:throw new Error(r)}},ecdsaVerify(r,t,n){switch(s("signature",r,64),s("message",t,32),s("public key",n,[33,65]),e.ecdsaVerify(r,t,n)){case 0:return!0;case 3:return!1;case 1:throw new Error(a);case 2:throw new Error(i)}},ecdsaRecover(t,n,i,o=!0,h){switch(s("signature",t,64),c("Number"===p(n)&&n>=0&&n<=3,"Expected recovery id to be a Number within interval [0, 3]"),s("message",i,32),u(o),h=l(h,o?33:65),e.ecdsaRecover(h,t,n,i)){case 0:return h;case 1:throw new Error(a);case 2:throw new Error("Public key could not be recover");case 3:throw new Error(r)}},ecdh(r,t,n={},o){switch(s("public key",r,[33,65]),s("private key",t,32),c("Object"===p(n),"Expected options to be an Object"),void 0!==n.data&&s("options.data",n.data),void 0!==n.hashfn?(c("Function"===p(n.hashfn),"Expected options.hashfn to be a Function"),void 0!==n.xbuf&&s("options.xbuf",n.xbuf,32),void 0!==n.ybuf&&s("options.ybuf",n.ybuf,32),s("output",o)):o=l(o,32),e.ecdh(o,r,t,n.data,n.hashfn,n.xbuf,n.ybuf)){case 0:return o;case 1:throw new Error(i);case 2:throw new Error("Scalar was invalid (zero or overflow)")}}})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
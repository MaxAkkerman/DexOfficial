(self.webpackChunkmy_swap=self.webpackChunkmy_swap||[]).push([[6052],{36225:function(e,t,r){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,r,i){void 0===i&&(i=r),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,i){void 0===i&&(i=r),e[i]=t[r]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&i(t,e,r);return n(t,e),t},a=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},s=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,n,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)a.push(i.value)}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return a};Object.defineProperty(t,"__esModule",{value:!0}),t.BaseTransaction=void 0;var c=o(r(2832)),h=r(22751),u=r(63458),f=function(){function e(e){this.cache={hash:void 0,dataFee:void 0},this.activeCapabilities=[],this.DEFAULT_CHAIN=c.Chain.Mainnet,this.DEFAULT_HARDFORK=c.Hardfork.Istanbul;var t=e.nonce,r=e.gasLimit,i=e.to,n=e.value,o=e.data,a=e.v,s=e.r,u=e.s,f=e.type;this._type=new h.BN((0,h.toBuffer)(f)).toNumber();var d=(0,h.toBuffer)(""===i?"0x":i),l=(0,h.toBuffer)(""===a?"0x":a),p=(0,h.toBuffer)(""===s?"0x":s),v=(0,h.toBuffer)(""===u?"0x":u);this.nonce=new h.BN((0,h.toBuffer)(""===t?"0x":t)),this.gasLimit=new h.BN((0,h.toBuffer)(""===r?"0x":r)),this.to=d.length>0?new h.Address(d):void 0,this.value=new h.BN((0,h.toBuffer)(""===n?"0x":n)),this.data=(0,h.toBuffer)(""===o?"0x":o),this.v=l.length>0?new h.BN(l):void 0,this.r=p.length>0?new h.BN(p):void 0,this.s=v.length>0?new h.BN(v):void 0,this._validateCannotExceedMaxInteger({nonce:this.nonce,gasLimit:this.gasLimit,value:this.value,r:this.r,s:this.s})}return Object.defineProperty(e.prototype,"transactionType",{get:function(){return this.type},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"type",{get:function(){return this._type},enumerable:!1,configurable:!0}),e.prototype.supports=function(e){return this.activeCapabilities.includes(e)},e.prototype.validate=function(e){void 0===e&&(e=!1);var t=[];return this.getBaseFee().gt(this.gasLimit)&&t.push("gasLimit is too low. given "+this.gasLimit+", need at least "+this.getBaseFee()),this.isSigned()&&!this.verifySignature()&&t.push("Invalid Signature"),e?t:0===t.length},e.prototype.getBaseFee=function(){var e=this.getDataFee().addn(this.common.param("gasPrices","tx"));return this.common.gteHardfork("homestead")&&this.toCreationAddress()&&e.iaddn(this.common.param("gasPrices","txCreation")),e},e.prototype.getDataFee=function(){for(var e=this.common.param("gasPrices","txDataZero"),t=this.common.param("gasPrices","txDataNonZero"),r=0,i=0;i<this.data.length;i++)0===this.data[i]?r+=e:r+=t;return new h.BN(r)},e.prototype.toCreationAddress=function(){return void 0===this.to||0===this.to.buf.length},e.prototype.isSigned=function(){var e=this,t=e.v,r=e.r,i=e.s;return 0===this.type?!!(t&&r&&i):!(void 0===t||!r||!i)},e.prototype.verifySignature=function(){try{var e=this.getSenderPublicKey();return 0!==(0,h.unpadBuffer)(e).length}catch(e){return!1}},e.prototype.getSenderAddress=function(){return new h.Address((0,h.publicToAddress)(this.getSenderPublicKey()))},e.prototype.sign=function(e){if(32!==e.length){var t=this._errorMsg("Private key must be 32 bytes in length.");throw new Error(t)}var r=!1;0===this.type&&this.common.gteHardfork("spuriousDragon")&&!this.supports(u.Capability.EIP155ReplayProtection)&&(this.activeCapabilities.push(u.Capability.EIP155ReplayProtection),r=!0);var i=this.getMessageToSign(!0),n=(0,h.ecsign)(i,e),o=n.v,a=n.r,s=n.s,c=this._processSignature(o,a,s);if(r){var f=this.activeCapabilities.indexOf(u.Capability.EIP155ReplayProtection);f>-1&&this.activeCapabilities.splice(f,1)}return c},e.prototype._getCommon=function(e,t){var r;if(t){var i=new h.BN((0,h.toBuffer)(t));if(e){if(!e.chainIdBN().eq(i)){var n=this._errorMsg("The chain ID does not match the chain ID of Common");throw new Error(n)}return e.copy()}return c.default.isSupportedChainId(i)?new c.default({chain:i,hardfork:this.DEFAULT_HARDFORK}):c.default.forCustomChain(this.DEFAULT_CHAIN,{name:"custom-chain",networkId:i,chainId:i},this.DEFAULT_HARDFORK)}return null!==(r=null==e?void 0:e.copy())&&void 0!==r?r:new c.default({chain:this.DEFAULT_CHAIN,hardfork:this.DEFAULT_HARDFORK})},e.prototype._validateCannotExceedMaxInteger=function(e,t){var r,i;void 0===t&&(t=53);try{for(var n=a(Object.entries(e)),o=n.next();!o.done;o=n.next()){var c=s(o.value,2),u=c[0],f=c[1];if(53===t){if(null==f?void 0:f.gt(h.MAX_INTEGER)){var d=this._errorMsg(u+" cannot exceed MAX_INTEGER, given "+f);throw new Error(d)}}else{if(256!==t)throw d=this._errorMsg("unimplemented bits value"),new Error(d);if(null==f?void 0:f.gte(h.TWO_POW256)){d=this._errorMsg(u+" must be less than 2^256, given "+f);throw new Error(d)}}}}catch(e){r={error:e}}finally{try{o&&!o.done&&(i=n.return)&&i.call(n)}finally{if(r)throw r.error}}},e.prototype._getSharedErrorPostfix=function(){var e="";try{e=this.isSigned()?(0,h.bufferToHex)(this.hash()):"not available (unsigned)"}catch(t){e="error"}var t="";try{t=this.isSigned().toString()}catch(t){e="error"}var r="";try{r=this.common.hardfork()}catch(e){r="error"}return"tx type="+this.type+" hash="+e+" nonce="+this.nonce+" value="+this.value+" "+"signed="+t+" hf="+r},e}();t.BaseTransaction=f},47669:function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var t,r=1,i=arguments.length;r<i;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},a=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,n,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)a.push(i.value)}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return a};Object.defineProperty(t,"__esModule",{value:!0});var s=r(22751),c=r(36225),h=r(63458),u=r(82942),f=Buffer.from(2..toString(16).padStart(2,"0"),"hex"),d=function(e){function t(t,r){var i,n;void 0===r&&(r={});var a=e.call(this,o(o({},t),{type:2}))||this;a.DEFAULT_HARDFORK="london";var c=t.chainId,f=t.accessList,d=t.maxFeePerGas,l=t.maxPriorityFeePerGas;if(a.common=a._getCommon(r.common,c),a.chainId=a.common.chainIdBN(),!a.common.isActivatedEIP(1559))throw new Error("EIP-1559 not enabled on Common");a.activeCapabilities=a.activeCapabilities.concat([1559,2718,2930]);var p=u.AccessLists.getAccessListData(null!=f?f:[]);if(a.accessList=p.accessList,a.AccessListJSON=p.AccessListJSON,u.AccessLists.verifyAccessList(a.accessList),a.maxFeePerGas=new s.BN((0,s.toBuffer)(""===d?"0x":d)),a.maxPriorityFeePerGas=new s.BN((0,s.toBuffer)(""===l?"0x":l)),a._validateCannotExceedMaxInteger({maxFeePerGas:a.maxFeePerGas,maxPriorityFeePerGas:a.maxPriorityFeePerGas},256),a.maxFeePerGas.lt(a.maxPriorityFeePerGas)){var v=a._errorMsg("maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)");throw new Error(v)}if(a.v&&!a.v.eqn(0)&&!a.v.eqn(1))throw v=a._errorMsg("The y-parity of the transaction should either be 0 or 1"),new Error(v);if(a.common.gteHardfork("homestead")&&(null===(i=a.s)||void 0===i?void 0:i.gt(h.N_DIV_2)))throw v=a._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid"),new Error(v);return(null===(n=null==r?void 0:r.freeze)||void 0===n||n)&&Object.freeze(a),a}return n(t,e),Object.defineProperty(t.prototype,"senderR",{get:function(){return this.r},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"senderS",{get:function(){return this.s},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"yParity",{get:function(){return this.v},enumerable:!1,configurable:!0}),t.fromTxData=function(e,r){return void 0===r&&(r={}),new t(e,r)},t.fromSerializedTx=function(e,r){if(void 0===r&&(r={}),!e.slice(0,1).equals(f))throw new Error("Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: 2, received: "+e.slice(0,1).toString("hex"));var i=s.rlp.decode(e.slice(1));if(!Array.isArray(i))throw new Error("Invalid serialized tx input: must be array");return t.fromValuesArray(i,r)},t.fromRlpSerializedTx=function(e,r){return void 0===r&&(r={}),t.fromSerializedTx(e,r)},t.fromValuesArray=function(e,r){if(void 0===r&&(r={}),9!==e.length&&12!==e.length)throw new Error("Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).");var i=a(e,12),n=i[0],o=i[1],c=i[2],h=i[3],u=i[4],f=i[5],d=i[6],l=i[7],p=i[8],v=i[9],g=i[10],y=i[11];return new t({chainId:new s.BN(n),nonce:o,maxPriorityFeePerGas:c,maxFeePerGas:h,gasLimit:u,to:f,value:d,data:l,accessList:null!=p?p:[],v:void 0!==v?new s.BN(v):void 0,r:g,s:y},r)},t.prototype.getDataFee=function(){if(this.cache.dataFee&&this.cache.dataFee.hardfork===this.common.hardfork())return this.cache.dataFee.value;var t=e.prototype.getDataFee.call(this);return t.iaddn(u.AccessLists.getDataFeeEIP2930(this.accessList,this.common)),Object.isFrozen(this)&&(this.cache.dataFee={value:t,hardfork:this.common.hardfork()}),t},t.prototype.getUpfrontCost=function(e){void 0===e&&(e=new s.BN(0));var t=s.BN.min(this.maxPriorityFeePerGas,this.maxFeePerGas.sub(e)).add(e);return this.gasLimit.mul(t).add(this.value)},t.prototype.raw=function(){return[(0,s.bnToUnpaddedBuffer)(this.chainId),(0,s.bnToUnpaddedBuffer)(this.nonce),(0,s.bnToUnpaddedBuffer)(this.maxPriorityFeePerGas),(0,s.bnToUnpaddedBuffer)(this.maxFeePerGas),(0,s.bnToUnpaddedBuffer)(this.gasLimit),void 0!==this.to?this.to.buf:Buffer.from([]),(0,s.bnToUnpaddedBuffer)(this.value),this.data,this.accessList,void 0!==this.v?(0,s.bnToUnpaddedBuffer)(this.v):Buffer.from([]),void 0!==this.r?(0,s.bnToUnpaddedBuffer)(this.r):Buffer.from([]),void 0!==this.s?(0,s.bnToUnpaddedBuffer)(this.s):Buffer.from([])]},t.prototype.serialize=function(){var e=this.raw();return Buffer.concat([f,s.rlp.encode(e)])},t.prototype.getMessageToSign=function(e){void 0===e&&(e=!0);var t=this.raw().slice(0,9),r=Buffer.concat([f,s.rlp.encode(t)]);return e?(0,s.keccak256)(r):r},t.prototype.hash=function(){if(!this.isSigned()){var e=this._errorMsg("Cannot call hash method if transaction is not signed");throw new Error(e)}return Object.isFrozen(this)?(this.cache.hash||(this.cache.hash=(0,s.keccak256)(this.serialize())),this.cache.hash):(0,s.keccak256)(this.serialize())},t.prototype.getMessageToVerifySignature=function(){return this.getMessageToSign()},t.prototype.getSenderPublicKey=function(){var e;if(!this.isSigned()){var t=this._errorMsg("Cannot call this method if transaction is not signed");throw new Error(t)}var r=this.getMessageToVerifySignature();if(this.common.gteHardfork("homestead")&&(null===(e=this.s)||void 0===e?void 0:e.gt(h.N_DIV_2)))throw t=this._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid"),new Error(t);var i=this,n=i.v,o=i.r,a=i.s;try{return(0,s.ecrecover)(r,n.addn(27),(0,s.bnToUnpaddedBuffer)(o),(0,s.bnToUnpaddedBuffer)(a))}catch(e){throw t=this._errorMsg("Invalid Signature"),new Error(t)}},t.prototype._processSignature=function(e,r,i){var n={common:this.common};return t.fromTxData({chainId:this.chainId,nonce:this.nonce,maxPriorityFeePerGas:this.maxPriorityFeePerGas,maxFeePerGas:this.maxFeePerGas,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,accessList:this.accessList,v:new s.BN(e-27),r:new s.BN(r),s:new s.BN(i)},n)},t.prototype.toJSON=function(){var e=u.AccessLists.getAccessListJSON(this.accessList);return{chainId:(0,s.bnToHex)(this.chainId),nonce:(0,s.bnToHex)(this.nonce),maxPriorityFeePerGas:(0,s.bnToHex)(this.maxPriorityFeePerGas),maxFeePerGas:(0,s.bnToHex)(this.maxFeePerGas),gasLimit:(0,s.bnToHex)(this.gasLimit),to:void 0!==this.to?this.to.toString():void 0,value:(0,s.bnToHex)(this.value),data:"0x"+this.data.toString("hex"),accessList:e,v:void 0!==this.v?(0,s.bnToHex)(this.v):void 0,r:void 0!==this.r?(0,s.bnToHex)(this.r):void 0,s:void 0!==this.s?(0,s.bnToHex)(this.s):void 0}},t.prototype.errorStr=function(){return this._getSharedErrorPostfix()+" maxFeePerGas="+this.maxFeePerGas+" maxPriorityFeePerGas="+this.maxPriorityFeePerGas},t.prototype._errorMsg=function(e){return e+" ("+this.errorStr()+")"},t}(c.BaseTransaction);t.default=d},29325:function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var t,r=1,i=arguments.length;r<i;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},a=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,n,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)a.push(i.value)}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return a};Object.defineProperty(t,"__esModule",{value:!0});var s=r(22751),c=r(36225),h=r(63458),u=r(82942),f=Buffer.from(1..toString(16).padStart(2,"0"),"hex"),d=function(e){function t(t,r){var i,n;void 0===r&&(r={});var a=e.call(this,o(o({},t),{type:1}))||this;a.DEFAULT_HARDFORK="berlin";var c=t.chainId,f=t.accessList,d=t.gasPrice;if(a.common=a._getCommon(r.common,c),a.chainId=a.common.chainIdBN(),!a.common.isActivatedEIP(2930))throw new Error("EIP-2930 not enabled on Common");a.activeCapabilities=a.activeCapabilities.concat([2718,2930]);var l=u.AccessLists.getAccessListData(null!=f?f:[]);if(a.accessList=l.accessList,a.AccessListJSON=l.AccessListJSON,u.AccessLists.verifyAccessList(a.accessList),a.gasPrice=new s.BN((0,s.toBuffer)(""===d?"0x":d)),a._validateCannotExceedMaxInteger({gasPrice:a.gasPrice}),a.v&&!a.v.eqn(0)&&!a.v.eqn(1)){var p=a._errorMsg("The y-parity of the transaction should either be 0 or 1");throw new Error(p)}if(a.common.gteHardfork("homestead")&&(null===(i=a.s)||void 0===i?void 0:i.gt(h.N_DIV_2)))throw p=a._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid"),new Error(p);return(null===(n=null==r?void 0:r.freeze)||void 0===n||n)&&Object.freeze(a),a}return n(t,e),Object.defineProperty(t.prototype,"senderR",{get:function(){return this.r},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"senderS",{get:function(){return this.s},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"yParity",{get:function(){return this.v},enumerable:!1,configurable:!0}),t.fromTxData=function(e,r){return void 0===r&&(r={}),new t(e,r)},t.fromSerializedTx=function(e,r){if(void 0===r&&(r={}),!e.slice(0,1).equals(f))throw new Error("Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: 1, received: "+e.slice(0,1).toString("hex"));var i=s.rlp.decode(e.slice(1));if(!Array.isArray(i))throw new Error("Invalid serialized tx input: must be array");return t.fromValuesArray(i,r)},t.fromRlpSerializedTx=function(e,r){return void 0===r&&(r={}),t.fromSerializedTx(e,r)},t.fromValuesArray=function(e,r){if(void 0===r&&(r={}),8!==e.length&&11!==e.length)throw new Error("Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).");var i=a(e,11),n=i[0],o=i[1],c=i[2],h=i[3],u=i[4],f=i[5],d=i[6],l=i[7],p=i[8],v=i[9],g=i[10];return new t({chainId:new s.BN(n),nonce:o,gasPrice:c,gasLimit:h,to:u,value:f,data:d,accessList:null!=l?l:[],v:void 0!==p?new s.BN(p):void 0,r:v,s:g},r)},t.prototype.getDataFee=function(){if(this.cache.dataFee&&this.cache.dataFee.hardfork===this.common.hardfork())return this.cache.dataFee.value;var t=e.prototype.getDataFee.call(this);return t.iaddn(u.AccessLists.getDataFeeEIP2930(this.accessList,this.common)),Object.isFrozen(this)&&(this.cache.dataFee={value:t,hardfork:this.common.hardfork()}),t},t.prototype.getUpfrontCost=function(){return this.gasLimit.mul(this.gasPrice).add(this.value)},t.prototype.raw=function(){return[(0,s.bnToUnpaddedBuffer)(this.chainId),(0,s.bnToUnpaddedBuffer)(this.nonce),(0,s.bnToUnpaddedBuffer)(this.gasPrice),(0,s.bnToUnpaddedBuffer)(this.gasLimit),void 0!==this.to?this.to.buf:Buffer.from([]),(0,s.bnToUnpaddedBuffer)(this.value),this.data,this.accessList,void 0!==this.v?(0,s.bnToUnpaddedBuffer)(this.v):Buffer.from([]),void 0!==this.r?(0,s.bnToUnpaddedBuffer)(this.r):Buffer.from([]),void 0!==this.s?(0,s.bnToUnpaddedBuffer)(this.s):Buffer.from([])]},t.prototype.serialize=function(){var e=this.raw();return Buffer.concat([f,s.rlp.encode(e)])},t.prototype.getMessageToSign=function(e){void 0===e&&(e=!0);var t=this.raw().slice(0,8),r=Buffer.concat([f,s.rlp.encode(t)]);return e?(0,s.keccak256)(r):r},t.prototype.hash=function(){if(!this.isSigned()){var e=this._errorMsg("Cannot call hash method if transaction is not signed");throw new Error(e)}return Object.isFrozen(this)?(this.cache.hash||(this.cache.hash=(0,s.keccak256)(this.serialize())),this.cache.hash):(0,s.keccak256)(this.serialize())},t.prototype.getMessageToVerifySignature=function(){return this.getMessageToSign()},t.prototype.getSenderPublicKey=function(){var e;if(!this.isSigned()){var t=this._errorMsg("Cannot call this method if transaction is not signed");throw new Error(t)}var r=this.getMessageToVerifySignature();if(this.common.gteHardfork("homestead")&&(null===(e=this.s)||void 0===e?void 0:e.gt(h.N_DIV_2)))throw t=this._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid"),new Error(t);var i=this,n=i.yParity,o=i.r,a=i.s;try{return(0,s.ecrecover)(r,n.addn(27),(0,s.bnToUnpaddedBuffer)(o),(0,s.bnToUnpaddedBuffer)(a))}catch(e){throw t=this._errorMsg("Invalid Signature"),new Error(t)}},t.prototype._processSignature=function(e,r,i){var n={common:this.common};return t.fromTxData({chainId:this.chainId,nonce:this.nonce,gasPrice:this.gasPrice,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,accessList:this.accessList,v:new s.BN(e-27),r:new s.BN(r),s:new s.BN(i)},n)},t.prototype.toJSON=function(){var e=u.AccessLists.getAccessListJSON(this.accessList);return{chainId:(0,s.bnToHex)(this.chainId),nonce:(0,s.bnToHex)(this.nonce),gasPrice:(0,s.bnToHex)(this.gasPrice),gasLimit:(0,s.bnToHex)(this.gasLimit),to:void 0!==this.to?this.to.toString():void 0,value:(0,s.bnToHex)(this.value),data:"0x"+this.data.toString("hex"),accessList:e,v:void 0!==this.v?(0,s.bnToHex)(this.v):void 0,r:void 0!==this.r?(0,s.bnToHex)(this.r):void 0,s:void 0!==this.s?(0,s.bnToHex)(this.s):void 0}},t.prototype.errorStr=function(){var e,t;return this._getSharedErrorPostfix()+" gasPrice="+this.gasPrice+" accessListCount="+(null!==(t=null===(e=this.accessList)||void 0===e?void 0:e.length)&&void 0!==t?t:0)},t.prototype._errorMsg=function(e){return e+" ("+this.errorStr()+")"},t}(c.BaseTransaction);t.default=d},66052:function(e,t,r){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,r,i){void 0===i&&(i=r),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,i){void 0===i&&(i=r),e[i]=t[r]}),n=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||i(t,e,r)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FeeMarketEIP1559Transaction=t.TransactionFactory=t.AccessListEIP2930Transaction=t.Transaction=void 0;var a=r(35534);Object.defineProperty(t,"Transaction",{enumerable:!0,get:function(){return o(a).default}});var s=r(29325);Object.defineProperty(t,"AccessListEIP2930Transaction",{enumerable:!0,get:function(){return o(s).default}});var c=r(31932);Object.defineProperty(t,"TransactionFactory",{enumerable:!0,get:function(){return o(c).default}});var h=r(47669);Object.defineProperty(t,"FeeMarketEIP1559Transaction",{enumerable:!0,get:function(){return o(h).default}}),n(r(63458),t)},35534:function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var t,r=1,i=arguments.length;r<i;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},a=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,n,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)a.push(i.value)}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return a};Object.defineProperty(t,"__esModule",{value:!0});var s=r(22751),c=r(63458),h=function(e){function t(t,r){var i;void 0===r&&(r={});var n=e.call(this,o(o({},t),{type:0}))||this;if(n.common=n._validateTxV(n.v,r.common),n.gasPrice=new s.BN((0,s.toBuffer)(""===t.gasPrice?"0x":t.gasPrice)),n._validateCannotExceedMaxInteger({gasPrice:n.gasPrice}),n.common.gteHardfork("spuriousDragon"))if(n.isSigned()){var a=n.v,h=n.common.chainIdBN().muln(2);(a.eq(h.addn(35))||a.eq(h.addn(36)))&&n.activeCapabilities.push(c.Capability.EIP155ReplayProtection)}else n.activeCapabilities.push(c.Capability.EIP155ReplayProtection);return(null===(i=null==r?void 0:r.freeze)||void 0===i||i)&&Object.freeze(n),n}return n(t,e),t.fromTxData=function(e,r){return void 0===r&&(r={}),new t(e,r)},t.fromSerializedTx=function(e,t){void 0===t&&(t={});var r=s.rlp.decode(e);if(!Array.isArray(r))throw new Error("Invalid serialized tx input. Must be array");return this.fromValuesArray(r,t)},t.fromRlpSerializedTx=function(e,r){return void 0===r&&(r={}),t.fromSerializedTx(e,r)},t.fromValuesArray=function(e,r){if(void 0===r&&(r={}),6!==e.length&&9!==e.length)throw new Error("Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).");var i=a(e,9);return new t({nonce:i[0],gasPrice:i[1],gasLimit:i[2],to:i[3],value:i[4],data:i[5],v:i[6],r:i[7],s:i[8]},r)},t.prototype.raw=function(){return[(0,s.bnToUnpaddedBuffer)(this.nonce),(0,s.bnToUnpaddedBuffer)(this.gasPrice),(0,s.bnToUnpaddedBuffer)(this.gasLimit),void 0!==this.to?this.to.buf:Buffer.from([]),(0,s.bnToUnpaddedBuffer)(this.value),this.data,void 0!==this.v?(0,s.bnToUnpaddedBuffer)(this.v):Buffer.from([]),void 0!==this.r?(0,s.bnToUnpaddedBuffer)(this.r):Buffer.from([]),void 0!==this.s?(0,s.bnToUnpaddedBuffer)(this.s):Buffer.from([])]},t.prototype.serialize=function(){return s.rlp.encode(this.raw())},t.prototype._getMessageToSign=function(){var e=[(0,s.bnToUnpaddedBuffer)(this.nonce),(0,s.bnToUnpaddedBuffer)(this.gasPrice),(0,s.bnToUnpaddedBuffer)(this.gasLimit),void 0!==this.to?this.to.buf:Buffer.from([]),(0,s.bnToUnpaddedBuffer)(this.value),this.data];return this.supports(c.Capability.EIP155ReplayProtection)&&(e.push((0,s.toBuffer)(this.common.chainIdBN())),e.push((0,s.unpadBuffer)((0,s.toBuffer)(0))),e.push((0,s.unpadBuffer)((0,s.toBuffer)(0)))),e},t.prototype.getMessageToSign=function(e){void 0===e&&(e=!0);var t=this._getMessageToSign();return e?(0,s.rlphash)(t):t},t.prototype.getDataFee=function(){return this.cache.dataFee&&this.cache.dataFee.hardfork===this.common.hardfork()?this.cache.dataFee.value:(Object.isFrozen(this)&&(this.cache.dataFee={value:e.prototype.getDataFee.call(this),hardfork:this.common.hardfork()}),e.prototype.getDataFee.call(this))},t.prototype.getUpfrontCost=function(){return this.gasLimit.mul(this.gasPrice).add(this.value)},t.prototype.hash=function(){return Object.isFrozen(this)?(this.cache.hash||(this.cache.hash=(0,s.rlphash)(this.raw())),this.cache.hash):(0,s.rlphash)(this.raw())},t.prototype.getMessageToVerifySignature=function(){if(!this.isSigned()){var e=this._errorMsg("This transaction is not signed");throw new Error(e)}var t=this._getMessageToSign();return(0,s.rlphash)(t)},t.prototype.getSenderPublicKey=function(){var e,t=this.getMessageToVerifySignature();if(this.common.gteHardfork("homestead")&&(null===(e=this.s)||void 0===e?void 0:e.gt(c.N_DIV_2))){var r=this._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");throw new Error(r)}var i=this,n=i.v,o=i.r,a=i.s;try{return(0,s.ecrecover)(t,n,(0,s.bnToUnpaddedBuffer)(o),(0,s.bnToUnpaddedBuffer)(a),this.supports(c.Capability.EIP155ReplayProtection)?this.common.chainIdBN():void 0)}catch(e){throw r=this._errorMsg("Invalid Signature"),new Error(r)}},t.prototype._processSignature=function(e,r,i){var n=new s.BN(e);this.supports(c.Capability.EIP155ReplayProtection)&&n.iadd(this.common.chainIdBN().muln(2).addn(8));var o={common:this.common};return t.fromTxData({nonce:this.nonce,gasPrice:this.gasPrice,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,v:n,r:new s.BN(r),s:new s.BN(i)},o)},t.prototype.toJSON=function(){return{nonce:(0,s.bnToHex)(this.nonce),gasPrice:(0,s.bnToHex)(this.gasPrice),gasLimit:(0,s.bnToHex)(this.gasLimit),to:void 0!==this.to?this.to.toString():void 0,value:(0,s.bnToHex)(this.value),data:"0x"+this.data.toString("hex"),v:void 0!==this.v?(0,s.bnToHex)(this.v):void 0,r:void 0!==this.r?(0,s.bnToHex)(this.r):void 0,s:void 0!==this.s?(0,s.bnToHex)(this.s):void 0}},t.prototype._validateTxV=function(e,t){var r;if(void 0!==e&&!e.eqn(0)&&(!t||t.gteHardfork("spuriousDragon"))&&!e.eqn(27)&&!e.eqn(28))if(t){var i=t.chainIdBN().muln(2);if(!e.eq(i.addn(35))&&!e.eq(i.addn(36)))throw new Error("Incompatible EIP155-based V "+e+" and chain id "+t.chainIdBN()+". See the Common parameter of the Transaction constructor to set the chain id.")}else{var n;n=e.subn(35).isEven()?35:36,r=e.subn(n).divn(2)}return this._getCommon(t,r)},t.prototype._unsignedTxImplementsEIP155=function(){return this.common.gteHardfork("spuriousDragon")},t.prototype._signedTxImplementsEIP155=function(){if(!this.isSigned()){var e=this._errorMsg("This transaction is not signed");throw new Error(e)}var t=this.common.gteHardfork("spuriousDragon"),r=this.v,i=this.common.chainIdBN().muln(2);return(r.eq(i.addn(35))||r.eq(i.addn(36)))&&t},t.prototype.errorStr=function(){return this._getSharedErrorPostfix()+" gasPrice="+this.gasPrice},t.prototype._errorMsg=function(e){return e+" ("+this.errorStr()+")"},t}(r(36225).BaseTransaction);t.default=h},31932:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r(22751),n=r(66052),o=function(){function e(){}return e.fromTxData=function(e,t){if(void 0===t&&(t={}),"type"in e&&void 0!==e.type){var r=new i.BN((0,i.toBuffer)(e.type)).toNumber();if(0===r)return n.Transaction.fromTxData(e,t);if(1===r)return n.AccessListEIP2930Transaction.fromTxData(e,t);if(2===r)return n.FeeMarketEIP1559Transaction.fromTxData(e,t);throw new Error("Tx instantiation with type "+r+" not supported")}return n.Transaction.fromTxData(e,t)},e.fromSerializedData=function(e,t){if(void 0===t&&(t={}),e[0]<=127){var r=void 0;switch(e[0]){case 1:r=2930;break;case 2:r=1559;break;default:throw new Error("TypedTransaction with ID "+e[0]+" unknown")}return 1559===r?n.FeeMarketEIP1559Transaction.fromSerializedTx(e,t):n.AccessListEIP2930Transaction.fromSerializedTx(e,t)}return n.Transaction.fromSerializedTx(e,t)},e.fromBlockBodyData=function(e,t){if(void 0===t&&(t={}),Buffer.isBuffer(e))return this.fromSerializedData(e,t);if(Array.isArray(e))return n.Transaction.fromValuesArray(e,t);throw new Error("Cannot decode transaction: unknown type input")},e.getTransactionClass=function(e,t){if(void 0===e&&(e=0),0==e||e>=128&&e<=255)return n.Transaction;switch(e){case 1:return n.AccessListEIP2930Transaction;case 2:return n.FeeMarketEIP1559Transaction;default:throw new Error("TypedTransaction with ID "+e+" unknown")}},e}();t.default=o},63458:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.N_DIV_2=t.isAccessList=t.isAccessListBuffer=t.Capability=void 0;var i,n=r(22751);function o(e){if(0===e.length)return!0;var t=e[0];return!!Array.isArray(t)}(i=t.Capability||(t.Capability={}))[i.EIP155ReplayProtection=155]="EIP155ReplayProtection",i[i.EIP1559FeeMarket=1559]="EIP1559FeeMarket",i[i.EIP2718TypedTransaction=2718]="EIP2718TypedTransaction",i[i.EIP2930AccessLists=2930]="EIP2930AccessLists",t.isAccessListBuffer=o,t.isAccessList=function(e){return!o(e)},t.N_DIV_2=new n.BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0",16)},82942:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AccessLists=void 0;var i=r(22751),n=r(63458),o=function(){function e(){}return e.getAccessListData=function(e){var t,r;if(e&&(0,n.isAccessList)(e)){t=e;for(var o=[],a=0;a<e.length;a++){for(var s=e[a],c=(0,i.toBuffer)(s.address),h=[],u=0;u<s.storageKeys.length;u++)h.push((0,i.toBuffer)(s.storageKeys[u]));o.push([c,h])}r=o}else{r=null!=e?e:[];var f=[];for(a=0;a<r.length;a++){var d=r[a],l=(0,i.bufferToHex)(d[0]),p=[];for(s=0;s<d[1].length;s++)p.push((0,i.bufferToHex)(d[1][s]));var v={address:l,storageKeys:p};f.push(v)}t=f}return{AccessListJSON:t,accessList:r}},e.verifyAccessList=function(e){for(var t=0;t<e.length;t++){var r=e[t],i=r[0],n=r[1];if(void 0!==r[2])throw new Error("Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.");if(20!=i.length)throw new Error("Invalid EIP-2930 transaction: address length should be 20 bytes");for(var o=0;o<n.length;o++)if(32!=n[o].length)throw new Error("Invalid EIP-2930 transaction: storage slot length should be 32 bytes")}},e.getAccessListJSON=function(e){for(var t=[],r=0;r<e.length;r++){for(var n=e[r],o={address:"0x"+(0,i.setLengthLeft)(n[0],20).toString("hex"),storageKeys:[]},a=n[1],s=0;s<a.length;s++){var c=a[s];o.storageKeys.push("0x"+(0,i.setLengthLeft)(c,32).toString("hex"))}t.push(o)}return t},e.getDataFeeEIP2930=function(e,t){for(var r=t.param("gasPrices","accessListStorageKeyCost"),i=t.param("gasPrices","accessListAddressCost"),n=0,o=0;o<e.length;o++)n+=e[o][1].length;return e.length*i+n*r},e}();t.AccessLists=o}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
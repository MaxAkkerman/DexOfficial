(self.webpackChunkmy_swap=self.webpackChunkmy_swap||[]).push([[125],{57204:(e,t,r)=>{"use strict";var n=r(25532),o={data:Buffer.alloc(0),dataLength:0,sequence:0};t.Z=function(e,t){return{makeBlocks:function(r){var n,o,i=Buffer.concat([(n=r.length,o=Buffer.alloc(2),o.writeUInt16BE(n,0),o),r]),s=t-5,a=Math.ceil(i.length/s);i=Buffer.concat([i,Buffer.alloc(a*s-i.length+1).fill(0)]);for(var c=[],l=0;l<a;l++){var u=Buffer.alloc(5);u.writeUInt16BE(e,0),u.writeUInt8(5,2),u.writeUInt16BE(l,3);var h=i.slice(l*s,(l+1)*s);c.push(Buffer.concat([u,h]))}return c},reduceResponse:function(t,r){var i=t||o,s=i.data,a=i.dataLength,c=i.sequence;if(r.readUInt16BE(0)!==e)throw new n.TransportError("Invalid channel","InvalidChannel");if(5!==r.readUInt8(2))throw new n.TransportError("Invalid tag","InvalidTag");if(r.readUInt16BE(3)!==c)throw new n.TransportError("Invalid sequence","InvalidSequence");t||(a=r.readUInt16BE(5)),c++;var l=r.slice(t?5:7);return(s=Buffer.concat([s,l])).length>a&&(s=s.slice(0,a)),{data:s,dataLength:a,sequence:c}},getReducedResult:function(e){if(e&&e.dataLength===e.data.length)return e.data}}}},67801:(e,t,r)=>{const n=Symbol("SemVer ANY");class o{static get ANY(){return n}constructor(e,t){if(t=i(t),e instanceof o){if(e.loose===!!t.loose)return e;e=e.value}l("comparator",e,t),this.options=t,this.loose=!!t.loose,this.parse(e),this.semver===n?this.value="":this.value=this.operator+this.semver.version,l("comp",this)}parse(e){const t=this.options.loose?s[a.COMPARATORLOOSE]:s[a.COMPARATOR],r=e.match(t);if(!r)throw new TypeError(`Invalid comparator: ${e}`);this.operator=void 0!==r[1]?r[1]:"","="===this.operator&&(this.operator=""),r[2]?this.semver=new u(r[2],this.options.loose):this.semver=n}toString(){return this.value}test(e){if(l("Comparator.test",e,this.options.loose),this.semver===n||e===n)return!0;if("string"==typeof e)try{e=new u(e,this.options)}catch(e){return!1}return c(e,this.operator,this.semver,this.options)}intersects(e,t){if(!(e instanceof o))throw new TypeError("a Comparator is required");if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),""===this.operator)return""===this.value||new h(e.value,t).test(this.value);if(""===e.operator)return""===e.value||new h(this.value,t).test(e.semver);const r=!(">="!==this.operator&&">"!==this.operator||">="!==e.operator&&">"!==e.operator),n=!("<="!==this.operator&&"<"!==this.operator||"<="!==e.operator&&"<"!==e.operator),i=this.semver.version===e.semver.version,s=!(">="!==this.operator&&"<="!==this.operator||">="!==e.operator&&"<="!==e.operator),a=c(this.semver,"<",e.semver,t)&&(">="===this.operator||">"===this.operator)&&("<="===e.operator||"<"===e.operator),l=c(this.semver,">",e.semver,t)&&("<="===this.operator||"<"===this.operator)&&(">="===e.operator||">"===e.operator);return r||n||i&&s||a||l}}e.exports=o;const i=r(25518),{re:s,t:a}=r(41870),c=r(82864),l=r(86322),u=r(86244),h=r(89061)},89061:(e,t,r)=>{class n{constructor(e,t){if(t=i(t),e instanceof n)return e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease?e:new n(e.raw,t);if(e instanceof s)return this.raw=e.value,this.set=[[e]],this.format(),this;if(this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease,this.raw=e,this.set=e.split(/\s*\|\|\s*/).map((e=>this.parseRange(e.trim()))).filter((e=>e.length)),!this.set.length)throw new TypeError(`Invalid SemVer Range: ${e}`);if(this.set.length>1){const e=this.set[0];if(this.set=this.set.filter((e=>!d(e[0]))),0===this.set.length)this.set=[e];else if(this.set.length>1)for(const e of this.set)if(1===e.length&&v(e[0])){this.set=[e];break}}this.format()}format(){return this.range=this.set.map((e=>e.join(" ").trim())).join("||").trim(),this.range}toString(){return this.range}parseRange(e){e=e.trim();const t=`parseRange:${Object.keys(this.options).join(",")}:${e}`,r=o.get(t);if(r)return r;const n=this.options.loose,i=n?l[u.HYPHENRANGELOOSE]:l[u.HYPHENRANGE];e=e.replace(i,S(this.options.includePrerelease)),a("hyphen replace",e),e=e.replace(l[u.COMPARATORTRIM],h),a("comparator trim",e,l[u.COMPARATORTRIM]),e=(e=(e=e.replace(l[u.TILDETRIM],p)).replace(l[u.CARETTRIM],f)).split(/\s+/).join(" ");const c=n?l[u.COMPARATORLOOSE]:l[u.COMPARATOR],v=e.split(" ").map((e=>m(e,this.options))).join(" ").split(/\s+/).map((e=>O(e,this.options))).filter(this.options.loose?e=>!!e.match(c):()=>!0).map((e=>new s(e,this.options))),E=(v.length,new Map);for(const e of v){if(d(e))return[e];E.set(e.value,e)}E.size>1&&E.has("")&&E.delete("");const g=[...E.values()];return o.set(t,g),g}intersects(e,t){if(!(e instanceof n))throw new TypeError("a Range is required");return this.set.some((r=>E(r,t)&&e.set.some((e=>E(e,t)&&r.every((r=>e.every((e=>r.intersects(e,t)))))))))}test(e){if(!e)return!1;if("string"==typeof e)try{e=new c(e,this.options)}catch(e){return!1}for(let t=0;t<this.set.length;t++)if(b(this.set[t],e,this.options))return!0;return!1}}e.exports=n;const o=new(r(39593))({max:1e3}),i=r(25518),s=r(67801),a=r(86322),c=r(86244),{re:l,t:u,comparatorTrimReplace:h,tildeTrimReplace:p,caretTrimReplace:f}=r(41870),d=e=>"<0.0.0-0"===e.value,v=e=>""===e.value,E=(e,t)=>{let r=!0;const n=e.slice();let o=n.pop();for(;r&&n.length;)r=n.every((e=>o.intersects(e,t))),o=n.pop();return r},m=(e,t)=>(a("comp",e,t),e=w(e,t),a("caret",e),e=y(e,t),a("tildes",e),e=R(e,t),a("xrange",e),e=T(e,t),a("stars",e),e),g=e=>!e||"x"===e.toLowerCase()||"*"===e,y=(e,t)=>e.trim().split(/\s+/).map((e=>I(e,t))).join(" "),I=(e,t)=>{const r=t.loose?l[u.TILDELOOSE]:l[u.TILDE];return e.replace(r,((t,r,n,o,i)=>{let s;return a("tilde",e,t,r,n,o,i),g(r)?s="":g(n)?s=`>=${r}.0.0 <${+r+1}.0.0-0`:g(o)?s=`>=${r}.${n}.0 <${r}.${+n+1}.0-0`:i?(a("replaceTilde pr",i),s=`>=${r}.${n}.${o}-${i} <${r}.${+n+1}.0-0`):s=`>=${r}.${n}.${o} <${r}.${+n+1}.0-0`,a("tilde return",s),s}))},w=(e,t)=>e.trim().split(/\s+/).map((e=>N(e,t))).join(" "),N=(e,t)=>{a("caret",e,t);const r=t.loose?l[u.CARETLOOSE]:l[u.CARET],n=t.includePrerelease?"-0":"";return e.replace(r,((t,r,o,i,s)=>{let c;return a("caret",e,t,r,o,i,s),g(r)?c="":g(o)?c=`>=${r}.0.0${n} <${+r+1}.0.0-0`:g(i)?c="0"===r?`>=${r}.${o}.0${n} <${r}.${+o+1}.0-0`:`>=${r}.${o}.0${n} <${+r+1}.0.0-0`:s?(a("replaceCaret pr",s),c="0"===r?"0"===o?`>=${r}.${o}.${i}-${s} <${r}.${o}.${+i+1}-0`:`>=${r}.${o}.${i}-${s} <${r}.${+o+1}.0-0`:`>=${r}.${o}.${i}-${s} <${+r+1}.0.0-0`):(a("no pr"),c="0"===r?"0"===o?`>=${r}.${o}.${i}${n} <${r}.${o}.${+i+1}-0`:`>=${r}.${o}.${i}${n} <${r}.${+o+1}.0-0`:`>=${r}.${o}.${i} <${+r+1}.0.0-0`),a("caret return",c),c}))},R=(e,t)=>(a("replaceXRanges",e,t),e.split(/\s+/).map((e=>A(e,t))).join(" ")),A=(e,t)=>{e=e.trim();const r=t.loose?l[u.XRANGELOOSE]:l[u.XRANGE];return e.replace(r,((r,n,o,i,s,c)=>{a("xRange",e,r,n,o,i,s,c);const l=g(o),u=l||g(i),h=u||g(s),p=h;return"="===n&&p&&(n=""),c=t.includePrerelease?"-0":"",l?r=">"===n||"<"===n?"<0.0.0-0":"*":n&&p?(u&&(i=0),s=0,">"===n?(n=">=",u?(o=+o+1,i=0,s=0):(i=+i+1,s=0)):"<="===n&&(n="<",u?o=+o+1:i=+i+1),"<"===n&&(c="-0"),r=`${n+o}.${i}.${s}${c}`):u?r=`>=${o}.0.0${c} <${+o+1}.0.0-0`:h&&(r=`>=${o}.${i}.0${c} <${o}.${+i+1}.0-0`),a("xRange return",r),r}))},T=(e,t)=>(a("replaceStars",e,t),e.trim().replace(l[u.STAR],"")),O=(e,t)=>(a("replaceGTE0",e,t),e.trim().replace(l[t.includePrerelease?u.GTE0PRE:u.GTE0],"")),S=e=>(t,r,n,o,i,s,a,c,l,u,h,p,f)=>`${r=g(n)?"":g(o)?`>=${n}.0.0${e?"-0":""}`:g(i)?`>=${n}.${o}.0${e?"-0":""}`:s?`>=${r}`:`>=${r}${e?"-0":""}`} ${c=g(l)?"":g(u)?`<${+l+1}.0.0-0`:g(h)?`<${l}.${+u+1}.0-0`:p?`<=${l}.${u}.${h}-${p}`:e?`<${l}.${u}.${+h+1}-0`:`<=${c}`}`.trim(),b=(e,t,r)=>{for(let r=0;r<e.length;r++)if(!e[r].test(t))return!1;if(t.prerelease.length&&!r.includePrerelease){for(let r=0;r<e.length;r++)if(a(e[r].semver),e[r].semver!==s.ANY&&e[r].semver.prerelease.length>0){const n=e[r].semver;if(n.major===t.major&&n.minor===t.minor&&n.patch===t.patch)return!0}return!1}return!0}},86244:(e,t,r)=>{const n=r(86322),{MAX_LENGTH:o,MAX_SAFE_INTEGER:i}=r(40602),{re:s,t:a}=r(41870),c=r(25518),{compareIdentifiers:l}=r(13189);class u{constructor(e,t){if(t=c(t),e instanceof u){if(e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease)return e;e=e.version}else if("string"!=typeof e)throw new TypeError(`Invalid Version: ${e}`);if(e.length>o)throw new TypeError(`version is longer than ${o} characters`);n("SemVer",e,t),this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease;const r=e.trim().match(t.loose?s[a.LOOSE]:s[a.FULL]);if(!r)throw new TypeError(`Invalid Version: ${e}`);if(this.raw=e,this.major=+r[1],this.minor=+r[2],this.patch=+r[3],this.major>i||this.major<0)throw new TypeError("Invalid major version");if(this.minor>i||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>i||this.patch<0)throw new TypeError("Invalid patch version");r[4]?this.prerelease=r[4].split(".").map((e=>{if(/^[0-9]+$/.test(e)){const t=+e;if(t>=0&&t<i)return t}return e})):this.prerelease=[],this.build=r[5]?r[5].split("."):[],this.format()}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(".")}`),this.version}toString(){return this.version}compare(e){if(n("SemVer.compare",this.version,this.options,e),!(e instanceof u)){if("string"==typeof e&&e===this.version)return 0;e=new u(e,this.options)}return e.version===this.version?0:this.compareMain(e)||this.comparePre(e)}compareMain(e){return e instanceof u||(e=new u(e,this.options)),l(this.major,e.major)||l(this.minor,e.minor)||l(this.patch,e.patch)}comparePre(e){if(e instanceof u||(e=new u(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;let t=0;do{const r=this.prerelease[t],o=e.prerelease[t];if(n("prerelease compare",t,r,o),void 0===r&&void 0===o)return 0;if(void 0===o)return 1;if(void 0===r)return-1;if(r!==o)return l(r,o)}while(++t)}compareBuild(e){e instanceof u||(e=new u(e,this.options));let t=0;do{const r=this.build[t],o=e.build[t];if(n("prerelease compare",t,r,o),void 0===r&&void 0===o)return 0;if(void 0===o)return 1;if(void 0===r)return-1;if(r!==o)return l(r,o)}while(++t)}inc(e,t){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",t);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",t);break;case"prepatch":this.prerelease.length=0,this.inc("patch",t),this.inc("pre",t);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",t),this.inc("pre",t);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":if(0===this.prerelease.length)this.prerelease=[0];else{let e=this.prerelease.length;for(;--e>=0;)"number"==typeof this.prerelease[e]&&(this.prerelease[e]++,e=-2);-1===e&&this.prerelease.push(0)}t&&(this.prerelease[0]===t?isNaN(this.prerelease[1])&&(this.prerelease=[t,0]):this.prerelease=[t,0]);break;default:throw new Error(`invalid increment argument: ${e}`)}return this.format(),this.raw=this.version,this}}e.exports=u},32340:(e,t,r)=>{const n=r(82362);e.exports=(e,t)=>{const r=n(e.trim().replace(/^[=v]+/,""),t);return r?r.version:null}},82864:(e,t,r)=>{const n=r(65254),o=r(16570),i=r(81666),s=r(63041),a=r(98771),c=r(77179);e.exports=(e,t,r,l)=>{switch(t){case"===":return"object"==typeof e&&(e=e.version),"object"==typeof r&&(r=r.version),e===r;case"!==":return"object"==typeof e&&(e=e.version),"object"==typeof r&&(r=r.version),e!==r;case"":case"=":case"==":return n(e,r,l);case"!=":return o(e,r,l);case">":return i(e,r,l);case">=":return s(e,r,l);case"<":return a(e,r,l);case"<=":return c(e,r,l);default:throw new TypeError(`Invalid operator: ${t}`)}}},88384:(e,t,r)=>{const n=r(86244),o=r(82362),{re:i,t:s}=r(41870);e.exports=(e,t)=>{if(e instanceof n)return e;if("number"==typeof e&&(e=String(e)),"string"!=typeof e)return null;let r=null;if((t=t||{}).rtl){let t;for(;(t=i[s.COERCERTL].exec(e))&&(!r||r.index+r[0].length!==e.length);)r&&t.index+t[0].length===r.index+r[0].length||(r=t),i[s.COERCERTL].lastIndex=t.index+t[1].length+t[2].length;i[s.COERCERTL].lastIndex=-1}else r=e.match(i[s.COERCE]);return null===r?null:o(`${r[2]}.${r[3]||"0"}.${r[4]||"0"}`,t)}},62754:(e,t,r)=>{const n=r(86244);e.exports=(e,t,r)=>{const o=new n(e,r),i=new n(t,r);return o.compare(i)||o.compareBuild(i)}},20869:(e,t,r)=>{const n=r(32641);e.exports=(e,t)=>n(e,t,!0)},32641:(e,t,r)=>{const n=r(86244);e.exports=(e,t,r)=>new n(e,r).compare(new n(t,r))},92330:(e,t,r)=>{const n=r(82362),o=r(65254);e.exports=(e,t)=>{if(o(e,t))return null;{const r=n(e),o=n(t),i=r.prerelease.length||o.prerelease.length,s=i?"pre":"",a=i?"prerelease":"";for(const e in r)if(("major"===e||"minor"===e||"patch"===e)&&r[e]!==o[e])return s+e;return a}}},65254:(e,t,r)=>{const n=r(32641);e.exports=(e,t,r)=>0===n(e,t,r)},81666:(e,t,r)=>{const n=r(32641);e.exports=(e,t,r)=>n(e,t,r)>0},63041:(e,t,r)=>{const n=r(32641);e.exports=(e,t,r)=>n(e,t,r)>=0},64156:(e,t,r)=>{const n=r(86244);e.exports=(e,t,r,o)=>{"string"==typeof r&&(o=r,r=void 0);try{return new n(e,r).inc(t,o).version}catch(e){return null}}},98771:(e,t,r)=>{const n=r(32641);e.exports=(e,t,r)=>n(e,t,r)<0},77179:(e,t,r)=>{const n=r(32641);e.exports=(e,t,r)=>n(e,t,r)<=0},71522:(e,t,r)=>{const n=r(86244);e.exports=(e,t)=>new n(e,t).major},71801:(e,t,r)=>{const n=r(86244);e.exports=(e,t)=>new n(e,t).minor},16570:(e,t,r)=>{const n=r(32641);e.exports=(e,t,r)=>0!==n(e,t,r)},82362:(e,t,r)=>{const{MAX_LENGTH:n}=r(40602),{re:o,t:i}=r(41870),s=r(86244),a=r(25518);e.exports=(e,t)=>{if(t=a(t),e instanceof s)return e;if("string"!=typeof e)return null;if(e.length>n)return null;if(!(t.loose?o[i.LOOSE]:o[i.FULL]).test(e))return null;try{return new s(e,t)}catch(e){return null}}},47184:(e,t,r)=>{const n=r(86244);e.exports=(e,t)=>new n(e,t).patch},6399:(e,t,r)=>{const n=r(82362);e.exports=(e,t)=>{const r=n(e,t);return r&&r.prerelease.length?r.prerelease:null}},58209:(e,t,r)=>{const n=r(32641);e.exports=(e,t,r)=>n(t,e,r)},53729:(e,t,r)=>{const n=r(62754);e.exports=(e,t)=>e.sort(((e,r)=>n(r,e,t)))},8139:(e,t,r)=>{const n=r(89061);e.exports=(e,t,r)=>{try{t=new n(t,r)}catch(e){return!1}return t.test(e)}},46184:(e,t,r)=>{const n=r(62754);e.exports=(e,t)=>e.sort(((e,r)=>n(e,r,t)))},87705:(e,t,r)=>{const n=r(82362);e.exports=(e,t)=>{const r=n(e,t);return r?r.version:null}},28371:(e,t,r)=>{const n=r(41870);e.exports={re:n.re,src:n.src,tokens:n.t,SEMVER_SPEC_VERSION:r(40602).SEMVER_SPEC_VERSION,SemVer:r(86244),compareIdentifiers:r(13189).compareIdentifiers,rcompareIdentifiers:r(13189).rcompareIdentifiers,parse:r(82362),valid:r(87705),clean:r(32340),inc:r(64156),diff:r(92330),major:r(71522),minor:r(71801),patch:r(47184),prerelease:r(6399),compare:r(32641),rcompare:r(58209),compareLoose:r(20869),compareBuild:r(62754),sort:r(46184),rsort:r(53729),gt:r(81666),lt:r(98771),eq:r(65254),neq:r(16570),gte:r(63041),lte:r(77179),cmp:r(82864),coerce:r(88384),Comparator:r(67801),Range:r(89061),satisfies:r(8139),toComparators:r(92811),maxSatisfying:r(59290),minSatisfying:r(62465),minVersion:r(91785),validRange:r(77855),outside:r(86049),gtr:r(42097),ltr:r(59850),intersects:r(34298),simplifyRange:r(29905),subset:r(1254)}},40602:e=>{const t=Number.MAX_SAFE_INTEGER||9007199254740991;e.exports={SEMVER_SPEC_VERSION:"2.0.0",MAX_LENGTH:256,MAX_SAFE_INTEGER:t,MAX_SAFE_COMPONENT_LENGTH:16}},86322:e=>{const t="object"==typeof process&&"MISSING_ENV_VAR".NODE_DEBUG&&/\bsemver\b/i.test("MISSING_ENV_VAR".NODE_DEBUG)?(...e)=>console.error("SEMVER",...e):()=>{};e.exports=t},13189:e=>{const t=/^[0-9]+$/,r=(e,r)=>{const n=t.test(e),o=t.test(r);return n&&o&&(e=+e,r=+r),e===r?0:n&&!o?-1:o&&!n?1:e<r?-1:1};e.exports={compareIdentifiers:r,rcompareIdentifiers:(e,t)=>r(t,e)}},25518:e=>{const t=["includePrerelease","loose","rtl"];e.exports=e=>e?"object"!=typeof e?{loose:!0}:t.filter((t=>e[t])).reduce(((e,t)=>(e[t]=!0,e)),{}):{}},41870:(e,t,r)=>{const{MAX_SAFE_COMPONENT_LENGTH:n}=r(40602),o=r(86322),i=(t=e.exports={}).re=[],s=t.src=[],a=t.t={};let c=0;const l=(e,t,r)=>{const n=c++;o(n,t),a[e]=n,s[n]=t,i[n]=new RegExp(t,r?"g":void 0)};l("NUMERICIDENTIFIER","0|[1-9]\\d*"),l("NUMERICIDENTIFIERLOOSE","[0-9]+"),l("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*"),l("MAINVERSION",`(${s[a.NUMERICIDENTIFIER]})\\.(${s[a.NUMERICIDENTIFIER]})\\.(${s[a.NUMERICIDENTIFIER]})`),l("MAINVERSIONLOOSE",`(${s[a.NUMERICIDENTIFIERLOOSE]})\\.(${s[a.NUMERICIDENTIFIERLOOSE]})\\.(${s[a.NUMERICIDENTIFIERLOOSE]})`),l("PRERELEASEIDENTIFIER",`(?:${s[a.NUMERICIDENTIFIER]}|${s[a.NONNUMERICIDENTIFIER]})`),l("PRERELEASEIDENTIFIERLOOSE",`(?:${s[a.NUMERICIDENTIFIERLOOSE]}|${s[a.NONNUMERICIDENTIFIER]})`),l("PRERELEASE",`(?:-(${s[a.PRERELEASEIDENTIFIER]}(?:\\.${s[a.PRERELEASEIDENTIFIER]})*))`),l("PRERELEASELOOSE",`(?:-?(${s[a.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${s[a.PRERELEASEIDENTIFIERLOOSE]})*))`),l("BUILDIDENTIFIER","[0-9A-Za-z-]+"),l("BUILD",`(?:\\+(${s[a.BUILDIDENTIFIER]}(?:\\.${s[a.BUILDIDENTIFIER]})*))`),l("FULLPLAIN",`v?${s[a.MAINVERSION]}${s[a.PRERELEASE]}?${s[a.BUILD]}?`),l("FULL",`^${s[a.FULLPLAIN]}$`),l("LOOSEPLAIN",`[v=\\s]*${s[a.MAINVERSIONLOOSE]}${s[a.PRERELEASELOOSE]}?${s[a.BUILD]}?`),l("LOOSE",`^${s[a.LOOSEPLAIN]}$`),l("GTLT","((?:<|>)?=?)"),l("XRANGEIDENTIFIERLOOSE",`${s[a.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`),l("XRANGEIDENTIFIER",`${s[a.NUMERICIDENTIFIER]}|x|X|\\*`),l("XRANGEPLAIN",`[v=\\s]*(${s[a.XRANGEIDENTIFIER]})(?:\\.(${s[a.XRANGEIDENTIFIER]})(?:\\.(${s[a.XRANGEIDENTIFIER]})(?:${s[a.PRERELEASE]})?${s[a.BUILD]}?)?)?`),l("XRANGEPLAINLOOSE",`[v=\\s]*(${s[a.XRANGEIDENTIFIERLOOSE]})(?:\\.(${s[a.XRANGEIDENTIFIERLOOSE]})(?:\\.(${s[a.XRANGEIDENTIFIERLOOSE]})(?:${s[a.PRERELEASELOOSE]})?${s[a.BUILD]}?)?)?`),l("XRANGE",`^${s[a.GTLT]}\\s*${s[a.XRANGEPLAIN]}$`),l("XRANGELOOSE",`^${s[a.GTLT]}\\s*${s[a.XRANGEPLAINLOOSE]}$`),l("COERCE",`(^|[^\\d])(\\d{1,${n}})(?:\\.(\\d{1,${n}}))?(?:\\.(\\d{1,${n}}))?(?:$|[^\\d])`),l("COERCERTL",s[a.COERCE],!0),l("LONETILDE","(?:~>?)"),l("TILDETRIM",`(\\s*)${s[a.LONETILDE]}\\s+`,!0),t.tildeTrimReplace="$1~",l("TILDE",`^${s[a.LONETILDE]}${s[a.XRANGEPLAIN]}$`),l("TILDELOOSE",`^${s[a.LONETILDE]}${s[a.XRANGEPLAINLOOSE]}$`),l("LONECARET","(?:\\^)"),l("CARETTRIM",`(\\s*)${s[a.LONECARET]}\\s+`,!0),t.caretTrimReplace="$1^",l("CARET",`^${s[a.LONECARET]}${s[a.XRANGEPLAIN]}$`),l("CARETLOOSE",`^${s[a.LONECARET]}${s[a.XRANGEPLAINLOOSE]}$`),l("COMPARATORLOOSE",`^${s[a.GTLT]}\\s*(${s[a.LOOSEPLAIN]})$|^$`),l("COMPARATOR",`^${s[a.GTLT]}\\s*(${s[a.FULLPLAIN]})$|^$`),l("COMPARATORTRIM",`(\\s*)${s[a.GTLT]}\\s*(${s[a.LOOSEPLAIN]}|${s[a.XRANGEPLAIN]})`,!0),t.comparatorTrimReplace="$1$2$3",l("HYPHENRANGE",`^\\s*(${s[a.XRANGEPLAIN]})\\s+-\\s+(${s[a.XRANGEPLAIN]})\\s*$`),l("HYPHENRANGELOOSE",`^\\s*(${s[a.XRANGEPLAINLOOSE]})\\s+-\\s+(${s[a.XRANGEPLAINLOOSE]})\\s*$`),l("STAR","(<|>)?=?\\s*\\*"),l("GTE0","^\\s*>=\\s*0.0.0\\s*$"),l("GTE0PRE","^\\s*>=\\s*0.0.0-0\\s*$")},42097:(e,t,r)=>{const n=r(86049);e.exports=(e,t,r)=>n(e,t,">",r)},34298:(e,t,r)=>{const n=r(89061);e.exports=(e,t,r)=>(e=new n(e,r),t=new n(t,r),e.intersects(t))},59850:(e,t,r)=>{const n=r(86049);e.exports=(e,t,r)=>n(e,t,"<",r)},59290:(e,t,r)=>{const n=r(86244),o=r(89061);e.exports=(e,t,r)=>{let i=null,s=null,a=null;try{a=new o(t,r)}catch(e){return null}return e.forEach((e=>{a.test(e)&&(i&&-1!==s.compare(e)||(i=e,s=new n(i,r)))})),i}},62465:(e,t,r)=>{const n=r(86244),o=r(89061);e.exports=(e,t,r)=>{let i=null,s=null,a=null;try{a=new o(t,r)}catch(e){return null}return e.forEach((e=>{a.test(e)&&(i&&1!==s.compare(e)||(i=e,s=new n(i,r)))})),i}},91785:(e,t,r)=>{const n=r(86244),o=r(89061),i=r(81666);e.exports=(e,t)=>{e=new o(e,t);let r=new n("0.0.0");if(e.test(r))return r;if(r=new n("0.0.0-0"),e.test(r))return r;r=null;for(let t=0;t<e.set.length;++t){const o=e.set[t];let s=null;o.forEach((e=>{const t=new n(e.semver.version);switch(e.operator){case">":0===t.prerelease.length?t.patch++:t.prerelease.push(0),t.raw=t.format();case"":case">=":s&&!i(t,s)||(s=t);break;case"<":case"<=":break;default:throw new Error(`Unexpected operation: ${e.operator}`)}})),!s||r&&!i(r,s)||(r=s)}return r&&e.test(r)?r:null}},86049:(e,t,r)=>{const n=r(86244),o=r(67801),{ANY:i}=o,s=r(89061),a=r(8139),c=r(81666),l=r(98771),u=r(77179),h=r(63041);e.exports=(e,t,r,p)=>{let f,d,v,E,m;switch(e=new n(e,p),t=new s(t,p),r){case">":f=c,d=u,v=l,E=">",m=">=";break;case"<":f=l,d=h,v=c,E="<",m="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(a(e,t,p))return!1;for(let r=0;r<t.set.length;++r){const n=t.set[r];let s=null,a=null;if(n.forEach((e=>{e.semver===i&&(e=new o(">=0.0.0")),s=s||e,a=a||e,f(e.semver,s.semver,p)?s=e:v(e.semver,a.semver,p)&&(a=e)})),s.operator===E||s.operator===m)return!1;if((!a.operator||a.operator===E)&&d(e,a.semver))return!1;if(a.operator===m&&v(e,a.semver))return!1}return!0}},29905:(e,t,r)=>{const n=r(8139),o=r(32641);e.exports=(e,t,r)=>{const i=[];let s=null,a=null;const c=e.sort(((e,t)=>o(e,t,r)));for(const e of c)n(e,t,r)?(a=e,s||(s=e)):(a&&i.push([s,a]),a=null,s=null);s&&i.push([s,null]);const l=[];for(const[e,t]of i)e===t?l.push(e):t||e!==c[0]?t?e===c[0]?l.push(`<=${t}`):l.push(`${e} - ${t}`):l.push(`>=${e}`):l.push("*");const u=l.join(" || "),h="string"==typeof t.raw?t.raw:String(t);return u.length<h.length?u:t}},1254:(e,t,r)=>{const n=r(89061),o=r(67801),{ANY:i}=o,s=r(8139),a=r(32641),c=(e,t,r)=>{if(e===t)return!0;if(1===e.length&&e[0].semver===i){if(1===t.length&&t[0].semver===i)return!0;e=r.includePrerelease?[new o(">=0.0.0-0")]:[new o(">=0.0.0")]}if(1===t.length&&t[0].semver===i){if(r.includePrerelease)return!0;t=[new o(">=0.0.0")]}const n=new Set;let c,h,p,f,d,v,E;for(const t of e)">"===t.operator||">="===t.operator?c=l(c,t,r):"<"===t.operator||"<="===t.operator?h=u(h,t,r):n.add(t.semver);if(n.size>1)return null;if(c&&h){if(p=a(c.semver,h.semver,r),p>0)return null;if(0===p&&(">="!==c.operator||"<="!==h.operator))return null}for(const e of n){if(c&&!s(e,String(c),r))return null;if(h&&!s(e,String(h),r))return null;for(const n of t)if(!s(e,String(n),r))return!1;return!0}let m=!(!h||r.includePrerelease||!h.semver.prerelease.length)&&h.semver,g=!(!c||r.includePrerelease||!c.semver.prerelease.length)&&c.semver;m&&1===m.prerelease.length&&"<"===h.operator&&0===m.prerelease[0]&&(m=!1);for(const e of t){if(E=E||">"===e.operator||">="===e.operator,v=v||"<"===e.operator||"<="===e.operator,c)if(g&&e.semver.prerelease&&e.semver.prerelease.length&&e.semver.major===g.major&&e.semver.minor===g.minor&&e.semver.patch===g.patch&&(g=!1),">"===e.operator||">="===e.operator){if(f=l(c,e,r),f===e&&f!==c)return!1}else if(">="===c.operator&&!s(c.semver,String(e),r))return!1;if(h)if(m&&e.semver.prerelease&&e.semver.prerelease.length&&e.semver.major===m.major&&e.semver.minor===m.minor&&e.semver.patch===m.patch&&(m=!1),"<"===e.operator||"<="===e.operator){if(d=u(h,e,r),d===e&&d!==h)return!1}else if("<="===h.operator&&!s(h.semver,String(e),r))return!1;if(!e.operator&&(h||c)&&0!==p)return!1}return!(c&&v&&!h&&0!==p||h&&E&&!c&&0!==p||g||m)},l=(e,t,r)=>{if(!e)return t;const n=a(e.semver,t.semver,r);return n>0?e:n<0||">"===t.operator&&">="===e.operator?t:e},u=(e,t,r)=>{if(!e)return t;const n=a(e.semver,t.semver,r);return n<0?e:n>0||"<"===t.operator&&"<="===e.operator?t:e};e.exports=(e,t,r={})=>{if(e===t)return!0;e=new n(e,r),t=new n(t,r);let o=!1;e:for(const n of e.set){for(const e of t.set){const t=c(n,e,r);if(o=o||null!==t,t)continue e}if(o)return!1}return!0}},92811:(e,t,r)=>{const n=r(89061);e.exports=(e,t)=>new n(e,t).set.map((e=>e.map((e=>e.value)).join(" ").trim().split(" ")))},77855:(e,t,r)=>{const n=r(89061);e.exports=(e,t)=>{try{return new n(e,t).range||"*"}catch(e){return null}}},25532:(e,t,r)=>{"use strict";r.r(t),r.d(t,{AccountNameRequiredError:()=>u,AccountNotSupported:()=>h,AmountRequired:()=>p,BluetoothRequired:()=>f,BtcUnmatchedApp:()=>d,CantOpenDevice:()=>v,CantScanQRCode:()=>Ue,CashAddrNotSupported:()=>E,CurrencyNotSupported:()=>m,DBNotReset:()=>Ye,DBWrongPassword:()=>We,DeviceAppVerifyNotSupported:()=>g,DeviceGenuineSocketEarlyClose:()=>y,DeviceHalted:()=>A,DeviceInOSUExpected:()=>R,DeviceNameInvalid:()=>T,DeviceNotGenuineError:()=>I,DeviceOnDashboardExpected:()=>w,DeviceOnDashboardUnexpected:()=>N,DeviceShouldStayInApp:()=>xe,DeviceSocketFail:()=>O,DeviceSocketNoBulkStatus:()=>S,DisconnectedDevice:()=>b,DisconnectedDeviceDuringOperation:()=>L,ETHAddressNonEIP:()=>Me,EnpointConfigError:()=>$,EthAppPleaseEnableContractData:()=>x,FeeEstimationFailed:()=>D,FeeNotLoaded:()=>Fe,FeeRequired:()=>ke,FeeTooHigh:()=>Be,FirmwareNotRecognized:()=>C,FirmwareOrAppUpdateRequired:()=>Ve,GasLessThanEstimate:()=>ae,GenuineCheckFailed:()=>Xe,HardResetFail:()=>P,InvalidAddress:()=>M,InvalidAddressBecauseDestinationIsAlsoSource:()=>U,InvalidXRPTag:()=>_,LatestMCUInstalledError:()=>F,LedgerAPI4xx:()=>qe,LedgerAPI5xx:()=>He,LedgerAPIError:()=>B,LedgerAPIErrorWithMessage:()=>G,LedgerAPINotAvailable:()=>j,MCUNotGenuineToDashboard:()=>de,ManagerAppAlreadyInstalledError:()=>X,ManagerAppDepInstallRequired:()=>H,ManagerAppDepUninstallRequired:()=>V,ManagerAppRelyOnBTCError:()=>q,ManagerDeviceLockedError:()=>z,ManagerFirmwareNotEnoughSpaceError:()=>W,ManagerNotEnoughSpaceError:()=>Y,ManagerUninstallBTCDep:()=>K,NetworkDown:()=>Z,NoAccessToCamera:()=>oe,NoAddressesFound:()=>Q,NoDBPathGiven:()=>ze,NotEnoughBalance:()=>J,NotEnoughBalanceBecauseDestinationNotCreated:()=>ne,NotEnoughBalanceInParentAccount:()=>te,NotEnoughBalanceToDelegate:()=>ee,NotEnoughGas:()=>ie,NotEnoughSpendableBalance:()=>re,NotSupportedLegacyAddress:()=>se,PairingFailed:()=>je,PasswordIncorrectError:()=>le,PasswordsDontMatchError:()=>ce,RecipientRequired:()=>ve,RecommendSubAccountsToEmpty:()=>ue,RecommendUndelegation:()=>he,StatusCodes:()=>Ze,SyncError:()=>Ge,TimeoutTagged:()=>pe,TransportError:()=>Ke,TransportInterfaceNotAvailable:()=>be,TransportOpenUserCancelled:()=>Se,TransportRaceCondition:()=>Le,TransportStatusError:()=>Je,TransportWebUSBGestureRequired:()=>$e,UnavailableTezosOriginatedAccountReceive:()=>Ee,UnavailableTezosOriginatedAccountSend:()=>me,UnexpectedBootloader:()=>fe,UnknownMCU:()=>k,UpdateFetchFileFail:()=>ge,UpdateIncorrectHash:()=>ye,UpdateIncorrectSig:()=>Ie,UpdateYourApp:()=>we,UserRefusedAddress:()=>Re,UserRefusedAllowManager:()=>Te,UserRefusedDeviceNameChange:()=>Ne,UserRefusedFirmwareUpdate:()=>Ae,UserRefusedOnDevice:()=>Oe,WebsocketConnectionError:()=>De,WebsocketConnectionFailed:()=>Ce,WrongAppForCurrency:()=>_e,WrongDeviceForAccount:()=>Pe,addCustomErrorDeserializer:()=>i,createCustomErrorClass:()=>s,deserializeError:()=>a,getAltStatusMessage:()=>Qe,serializeError:()=>c});var n={},o={},i=function(e,t){o[e]=t},s=function(e){var t=function(t,r){Object.assign(this,r),this.name=e,this.message=t||e,this.stack=(new Error).stack};return t.prototype=new Error,n[e]=t,t},a=function(e){if("object"==typeof e&&e){try{var t=JSON.parse(e.message);t.message&&t.name&&(e=t)}catch(e){}var r=void 0;if("string"==typeof e.name){var i=e.name,c=o[i];if(c)r=c(e);else{var l="Error"===i?Error:n[i];l||(console.warn("deserializing an unknown class '"+i+"'"),l=s(i)),r=Object.create(l.prototype);try{for(var u in e)e.hasOwnProperty(u)&&(r[u]=e[u])}catch(e){}}}else r=new Error(e.message);return!r.stack&&Error.captureStackTrace&&Error.captureStackTrace(r,a),r}return new Error(String(e))},c=function(e){return e?"object"==typeof e?l(e,[]):"function"==typeof e?"[Function: "+(e.name||"anonymous")+"]":e:e};function l(e,t){var r,n,o={};t.push(e);try{for(var i=function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(Object.keys(e)),s=i.next();!s.done;s=i.next()){var a=s.value,c=e[a];"function"!=typeof c&&(c&&"object"==typeof c?-1!==t.indexOf(e[a])?o[a]="[Circular]":o[a]=l(e[a],t.slice(0)):o[a]=c)}}catch(e){r={error:e}}finally{try{s&&!s.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}return"string"==typeof e.name&&(o.name=e.name),"string"==typeof e.message&&(o.message=e.message),"string"==typeof e.stack&&(o.stack=e.stack),o}var u=s("AccountNameRequired"),h=s("AccountNotSupported"),p=s("AmountRequired"),f=s("BluetoothRequired"),d=s("BtcUnmatchedApp"),v=s("CantOpenDevice"),E=s("CashAddrNotSupported"),m=s("CurrencyNotSupported"),g=s("DeviceAppVerifyNotSupported"),y=s("DeviceGenuineSocketEarlyClose"),I=s("DeviceNotGenuine"),w=s("DeviceOnDashboardExpected"),N=s("DeviceOnDashboardUnexpected"),R=s("DeviceInOSUExpected"),A=s("DeviceHalted"),T=s("DeviceNameInvalid"),O=s("DeviceSocketFail"),S=s("DeviceSocketNoBulkStatus"),b=s("DisconnectedDevice"),L=s("DisconnectedDeviceDuringOperation"),$=s("EnpointConfig"),x=s("EthAppPleaseEnableContractData"),D=s("FeeEstimationFailed"),C=s("FirmwareNotRecognized"),P=s("HardResetFail"),_=s("InvalidXRPTag"),M=s("InvalidAddress"),U=s("InvalidAddressBecauseDestinationIsAlsoSource"),F=s("LatestMCUInstalledError"),k=s("UnknownMCU"),B=s("LedgerAPIError"),G=s("LedgerAPIErrorWithMessage"),j=s("LedgerAPINotAvailable"),X=s("ManagerAppAlreadyInstalled"),q=s("ManagerAppRelyOnBTC"),H=s("ManagerAppDepInstallRequired"),V=s("ManagerAppDepUninstallRequired"),z=s("ManagerDeviceLocked"),W=s("ManagerFirmwareNotEnoughSpace"),Y=s("ManagerNotEnoughSpace"),K=s("ManagerUninstallBTCDep"),Z=s("NetworkDown"),Q=s("NoAddressesFound"),J=s("NotEnoughBalance"),ee=s("NotEnoughBalanceToDelegate"),te=s("NotEnoughBalanceInParentAccount"),re=s("NotEnoughSpendableBalance"),ne=s("NotEnoughBalanceBecauseDestinationNotCreated"),oe=s("NoAccessToCamera"),ie=s("NotEnoughGas"),se=s("NotSupportedLegacyAddress"),ae=s("GasLessThanEstimate"),ce=s("PasswordsDontMatch"),le=s("PasswordIncorrect"),ue=s("RecommendSubAccountsToEmpty"),he=s("RecommendUndelegation"),pe=s("TimeoutTagged"),fe=s("UnexpectedBootloader"),de=s("MCUNotGenuineToDashboard"),ve=s("RecipientRequired"),Ee=s("UnavailableTezosOriginatedAccountReceive"),me=s("UnavailableTezosOriginatedAccountSend"),ge=s("UpdateFetchFileFail"),ye=s("UpdateIncorrectHash"),Ie=s("UpdateIncorrectSig"),we=s("UpdateYourApp"),Ne=s("UserRefusedDeviceNameChange"),Re=s("UserRefusedAddress"),Ae=s("UserRefusedFirmwareUpdate"),Te=s("UserRefusedAllowManager"),Oe=s("UserRefusedOnDevice"),Se=s("TransportOpenUserCancelled"),be=s("TransportInterfaceNotAvailable"),Le=s("TransportRaceCondition"),$e=s("TransportWebUSBGestureRequired"),xe=s("DeviceShouldStayInApp"),De=s("WebsocketConnectionError"),Ce=s("WebsocketConnectionFailed"),Pe=s("WrongDeviceForAccount"),_e=s("WrongAppForCurrency"),Me=s("ETHAddressNonEIP"),Ue=s("CantScanQRCode"),Fe=s("FeeNotLoaded"),ke=s("FeeRequired"),Be=s("FeeTooHigh"),Ge=s("SyncError"),je=s("PairingFailed"),Xe=s("GenuineCheckFailed"),qe=s("LedgerAPI4xx"),He=s("LedgerAPI5xx"),Ve=s("FirmwareOrAppUpdateRequired"),ze=s("NoDBPathGiven"),We=s("DBWrongPassword"),Ye=s("DBNotReset");function Ke(e,t){this.name="TransportError",this.message=e,this.stack=(new Error).stack,this.id=t}Ke.prototype=new Error,i("TransportError",(function(e){return new Ke(e.message,e.id)}));var Ze={PIN_REMAINING_ATTEMPTS:25536,INCORRECT_LENGTH:26368,MISSING_CRITICAL_PARAMETER:26624,COMMAND_INCOMPATIBLE_FILE_STRUCTURE:27009,SECURITY_STATUS_NOT_SATISFIED:27010,CONDITIONS_OF_USE_NOT_SATISFIED:27013,INCORRECT_DATA:27264,NOT_ENOUGH_MEMORY_SPACE:27268,REFERENCED_DATA_NOT_FOUND:27272,FILE_ALREADY_EXISTS:27273,INCORRECT_P1_P2:27392,INS_NOT_SUPPORTED:27904,CLA_NOT_SUPPORTED:28160,TECHNICAL_PROBLEM:28416,OK:36864,MEMORY_PROBLEM:37440,NO_EF_SELECTED:37888,INVALID_OFFSET:37890,FILE_NOT_FOUND:37892,INCONSISTENT_FILE:37896,ALGORITHM_NOT_SUPPORTED:38020,INVALID_KCV:38021,CODE_NOT_INITIALIZED:38914,ACCESS_CONDITION_NOT_FULFILLED:38916,CONTRADICTION_SECRET_CODE_STATUS:38920,CONTRADICTION_INVALIDATION:38928,CODE_BLOCKED:38976,MAX_VALUE_REACHED:38992,GP_AUTH_FAILED:25344,LICENSING:28482,HALTED:28586};function Qe(e){switch(e){case 26368:return"Incorrect length";case 26624:return"Missing critical parameter";case 27010:return"Security not satisfied (dongle locked or have invalid access rights)";case 27013:return"Condition of use not satisfied (denied by the user?)";case 27264:return"Invalid data received";case 27392:return"Invalid parameter received"}if(28416<=e&&e<=28671)return"Internal error, please report"}function Je(e){this.name="TransportStatusError";var t=Object.keys(Ze).find((function(t){return Ze[t]===e}))||"UNKNOWN_ERROR",r=Qe(e)||t,n=e.toString(16);this.message="Ledger device: "+r+" (0x"+n+")",this.stack=(new Error).stack,this.statusCode=e,this.statusText=t}Je.prototype=new Error,i("TransportStatusError",(function(e){return new Je(e.statusCode)}))},20125:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>F});var n=r(17187),o=r.n(n),i=r(25532),s=function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))},a=function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},c=function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)s.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return s},l=function(e,t,r){if(r||2===arguments.length)for(var n,o=0,i=t.length;o<i;o++)!n&&o in t||(n||(n=Array.prototype.slice.call(t,0,o)),n[o]=t[o]);return e.concat(n||Array.prototype.slice.call(t))};const u=function(){function e(){var e=this;this.exchangeTimeout=3e4,this.unresponsiveTimeout=15e3,this.deviceModel=null,this._events=new(o()),this.send=function(t,r,n,o,c,l){return void 0===c&&(c=Buffer.alloc(0)),void 0===l&&(l=[i.StatusCodes.OK]),s(e,void 0,void 0,(function(){var e,s;return a(this,(function(a){switch(a.label){case 0:if(c.length>=256)throw new i.TransportError("data.length exceed 256 bytes limit. Got: "+c.length,"DataLengthTooBig");return[4,this.exchange(Buffer.concat([Buffer.from([t,r,n,o]),Buffer.from([c.length]),c]))];case 1:if(e=a.sent(),s=e.readUInt16BE(e.length-2),!l.some((function(e){return e===s})))throw new i.TransportStatusError(s);return[2,e]}}))}))},this.exchangeAtomicImpl=function(t){return s(e,void 0,void 0,(function(){var e,r,n,o,s,c=this;return a(this,(function(a){switch(a.label){case 0:if(this.exchangeBusyPromise)throw new i.TransportRaceCondition("An action was already pending on the Ledger device. Please deny or reconnect.");r=new Promise((function(t){e=t})),this.exchangeBusyPromise=r,n=!1,o=setTimeout((function(){n=!0,c.emit("unresponsive")}),this.unresponsiveTimeout),a.label=1;case 1:return a.trys.push([1,,3,4]),[4,t()];case 2:return s=a.sent(),n&&this.emit("responsive"),[2,s];case 3:return clearTimeout(o),e&&e(),this.exchangeBusyPromise=null,[7];case 4:return[2]}}))}))},this._appAPIlock=null}return e.prototype.exchange=function(e){throw new Error("exchange not implemented")},e.prototype.setScrambleKey=function(e){},e.prototype.close=function(){return Promise.resolve()},e.prototype.on=function(e,t){this._events.on(e,t)},e.prototype.off=function(e,t){this._events.removeListener(e,t)},e.prototype.emit=function(e){for(var t,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];(t=this._events).emit.apply(t,l([e],c(r),!1))},e.prototype.setDebugMode=function(){console.warn("setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.")},e.prototype.setExchangeTimeout=function(e){this.exchangeTimeout=e},e.prototype.setExchangeUnresponsiveTimeout=function(e){this.unresponsiveTimeout=e},e.create=function(e,t){var r=this;return void 0===e&&(e=3e3),new Promise((function(n,o){var s=!1,a=r.listen({next:function(t){s=!0,a&&a.unsubscribe(),c&&clearTimeout(c),r.open(t.descriptor,e).then(n,o)},error:function(e){c&&clearTimeout(c),o(e)},complete:function(){c&&clearTimeout(c),s||o(new i.TransportError(r.ErrorMessage_NoDeviceFound,"NoDeviceFound"))}}),c=t?setTimeout((function(){a.unsubscribe(),o(new i.TransportError(r.ErrorMessage_ListenTimeout,"ListenTimeout"))}),t):null}))},e.prototype.decorateAppAPIMethods=function(e,t,r){var n,o;try{for(var i=function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(t),s=i.next();!s.done;s=i.next()){var a=s.value;e[a]=this.decorateAppAPIMethod(a,e[a],e,r)}}catch(e){n={error:e}}finally{try{s&&!s.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}},e.prototype.decorateAppAPIMethod=function(e,t,r,n){var o=this;return function(){for(var c=[],l=0;l<arguments.length;l++)c[l]=arguments[l];return s(o,void 0,void 0,(function(){var o;return a(this,(function(s){switch(s.label){case 0:if(o=this._appAPIlock)return[2,Promise.reject(new i.TransportError("Ledger Device is busy (lock "+o+")","TransportLocked"))];s.label=1;case 1:return s.trys.push([1,,3,4]),this._appAPIlock=e,this.setScrambleKey(n),[4,t.apply(r,c)];case 2:return[2,s.sent()];case 3:return this._appAPIlock=null,[7];case 4:return[2]}}))}))}},e.ErrorMessage_ListenTimeout="No Ledger device found (timeout)",e.ErrorMessage_NoDeviceFound="No Ledger device found",e}();var h,p,f=r(57204),d=r(28371),v=r.n(d),E=function(){return(E=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};!function(e){e.blue="blue",e.nanoS="nanoS",e.nanoSP="nanoSP",e.nanoX="nanoX"}(p||(p={}));var m=((h={})[p.blue]={id:p.blue,productName:"Ledger Blue",productIdMM:0,legacyUsbProductId:0,usbOnly:!0,memorySize:491520,masks:[822083584,822149120],getBlockSize:function(e){return 4096}},h[p.nanoS]={id:p.nanoS,productName:"Ledger Nano S",productIdMM:16,legacyUsbProductId:1,usbOnly:!0,memorySize:327680,masks:[823132160],getBlockSize:function(e){var t;return v().lt(null!==(t=v().coerce(e))&&void 0!==t?t:"","2.0.0")?4096:2048}},h[p.nanoSP]={id:p.nanoSP,productName:"Ledger Nano SP",productIdMM:80,legacyUsbProductId:5,usbOnly:!0,memorySize:1569792,masks:[856686592],getBlockSize:function(e){return 32}},h[p.nanoX]={id:p.nanoX,productName:"Ledger Nano X",productIdMM:64,legacyUsbProductId:4,usbOnly:!1,memorySize:2097152,masks:[855638016],getBlockSize:function(e){return 4096},bluetoothSpec:[{serviceUuid:"d973f2e0-b19e-11e2-9e96-0800200c9a66",notifyUuid:"d973f2e1-b19e-11e2-9e96-0800200c9a66",writeUuid:"d973f2e2-b19e-11e2-9e96-0800200c9a66",writeCmdUuid:"d973f2e3-b19e-11e2-9e96-0800200c9a66"},{serviceUuid:"13d63400-2c97-0004-0000-4c6564676572",notifyUuid:"13d63400-2c97-0004-0001-4c6564676572",writeUuid:"13d63400-2c97-0004-0002-4c6564676572",writeCmdUuid:"13d63400-2c97-0004-0003-4c6564676572"}]},h),g=(p.blue,p.nanoS,p.nanoX,Object.values(m)),y=function(e){var t=g.find((function(t){return t.legacyUsbProductId===e}));if(t)return t;var r=e>>8;return g.find((function(e){return e.productIdMM===r}))},I=[],w={};for(var N in m){var R=m[N],A=R.bluetoothSpec;if(A)for(var T=0;T<A.length;T++){var O=A[T];I.push(O.serviceUuid),w[O.serviceUuid]=w[O.serviceUuid.replace(/-/g,"")]=E({deviceModel:R},O)}}var S=r(28716),b=function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))},L=function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},$=[{vendorId:11415}];function x(){return b(this,void 0,void 0,(function(){return L(this,(function(e){switch(e.label){case 0:return[4,navigator.usb.requestDevice({filters:$})];case 1:return[2,e.sent()]}}))}))}function D(){return b(this,void 0,void 0,(function(){return L(this,(function(e){switch(e.label){case 0:return[4,navigator.usb.getDevices()];case 1:return[2,e.sent().filter((function(e){return 11415===e.vendorId}))]}}))}))}var C,P=function(){return Promise.resolve(!!navigator&&!!navigator.usb&&"function"==typeof navigator.usb.getDevices)},_=(C=function(e,t){return(C=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}C(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),M=function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))},U=function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};const F=function(e){function t(t,r){var n=e.call(this)||this;return n.channel=Math.floor(65535*Math.random()),n.packetSize=64,n._disconnectEmitted=!1,n._emitDisconnect=function(e){n._disconnectEmitted||(n._disconnectEmitted=!0,n.emit("disconnect",e))},n.device=t,n.interfaceNumber=r,n.deviceModel=y(t.productId),n}return _(t,e),t.request=function(){return M(this,void 0,void 0,(function(){var e;return U(this,(function(r){switch(r.label){case 0:return[4,x()];case 1:return e=r.sent(),[2,t.open(e)]}}))}))},t.openConnected=function(){return M(this,void 0,void 0,(function(){var e;return U(this,(function(r){switch(r.label){case 0:return[4,D()];case 1:return 0===(e=r.sent()).length?[2,null]:[2,t.open(e[0])]}}))}))},t.open=function(e){return M(this,void 0,void 0,(function(){var r,n,o,s,a;return U(this,(function(c){switch(c.label){case 0:return[4,e.open()];case 1:return c.sent(),null!==e.configuration?[3,3]:[4,e.selectConfiguration(1)];case 2:c.sent(),c.label=3;case 3:return[4,k(e)];case 4:if(c.sent(),!(r=e.configurations[0].interfaces.find((function(e){return e.alternates.some((function(e){return 255===e.interfaceClass}))}))))throw new i.TransportInterfaceNotAvailable("No WebUSB interface found for your Ledger device. Please upgrade firmware or contact techsupport.");n=r.interfaceNumber,c.label=5;case 5:return c.trys.push([5,7,,9]),[4,e.claimInterface(n)];case 6:return c.sent(),[3,9];case 7:return o=c.sent(),[4,e.close()];case 8:throw c.sent(),new i.TransportInterfaceNotAvailable(o.message);case 9:return s=new t(e,n),a=function(t){e===t.device&&(navigator.usb.removeEventListener("disconnect",a),s._emitDisconnect(new i.DisconnectedDevice))},navigator.usb.addEventListener("disconnect",a),[2,s]}}))}))},t.prototype.close=function(){return M(this,void 0,void 0,(function(){return U(this,(function(e){switch(e.label){case 0:return[4,this.exchangeBusyPromise];case 1:return e.sent(),[4,this.device.releaseInterface(this.interfaceNumber)];case 2:return e.sent(),[4,k(this.device)];case 3:return e.sent(),[4,this.device.close()];case 4:return e.sent(),[2]}}))}))},t.prototype.exchange=function(e){return M(this,void 0,void 0,(function(){var t=this;return U(this,(function(r){switch(r.label){case 0:return[4,this.exchangeAtomicImpl((function(){return M(t,void 0,void 0,(function(){var t,r,n,o,i,s,a,c,l,u;return U(this,(function(h){switch(h.label){case 0:r=(t=this).channel,n=t.packetSize,(0,S.c)("apdu","=> "+e.toString("hex")),o=(0,f.Z)(r,n),i=o.makeBlocks(e),s=0,h.label=1;case 1:return s<i.length?[4,this.device.transferOut(3,i[s])]:[3,4];case 2:h.sent(),h.label=3;case 3:return s++,[3,1];case 4:return(a=o.getReducedResult(c))?[3,6]:[4,this.device.transferIn(3,n)];case 5:return l=h.sent(),u=Buffer.from(l.data.buffer),c=o.reduceResponse(c,u),[3,4];case 6:return(0,S.c)("apdu","<= "+a.toString("hex")),[2,a]}}))}))})).catch((function(e){if(e&&e.message&&e.message.includes("disconnected"))throw t._emitDisconnect(e),new i.DisconnectedDeviceDuringOperation(e.message);throw e}))];case 1:return[2,r.sent()]}}))}))},t.prototype.setScrambleKey=function(){},t.isSupported=P,t.list=D,t.listen=function(e){var t=!1;return function(){return b(this,void 0,void 0,(function(){var e;return L(this,(function(t){switch(t.label){case 0:return[4,D()];case 1:return(e=t.sent()).length>0?[2,e[0]]:[2,x()]}}))}))}().then((function(r){if(!t){var n=y(r.productId);e.next({type:"add",descriptor:r,deviceModel:n}),e.complete()}}),(function(t){window.DOMException&&t instanceof window.DOMException&&18===t.code?e.error(new i.TransportWebUSBGestureRequired(t.message)):e.error(new i.TransportOpenUserCancelled(t.message))})),{unsubscribe:function(){t=!0}}},t}(u);function k(e){return M(this,void 0,void 0,(function(){var t;return U(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,e.reset()];case 1:return r.sent(),[3,3];case 2:return t=r.sent(),console.warn(t),[3,3];case 3:return[2]}}))}))}},28716:(e,t,r)=>{"use strict";r.d(t,{c:()=>i});var n=0,o=[],i=function(e,t,r){var i={type:e,id:String(++n),date:new Date};t&&(i.message=t),r&&(i.data=r),function(e){for(var t=0;t<o.length;t++)try{o[t](e)}catch(e){console.error(e)}}(i)};"undefined"!=typeof window&&(window.__ledgerLogsListen=function(e){return o.push(e),function(){var t=o.indexOf(e);-1!==t&&(o[t]=o[o.length-1],o.pop())}})},17187:e=>{"use strict";var t,r="object"==typeof Reflect?Reflect:null,n=r&&"function"==typeof r.apply?r.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};t=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function i(){i.init.call(this)}e.exports=i,e.exports.once=function(e,t){return new Promise((function(r,n){function o(r){e.removeListener(t,i),n(r)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",o),r([].slice.call(arguments))}v(e,t,i,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&v(e,"error",t,{once:!0})}(e,o)}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var s=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function c(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function l(e,t,r,n){var o,i,s,l;if(a(r),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),i=e._events),s=i[t]),void 0===s)s=i[t]=r,++e._eventsCount;else if("function"==typeof s?s=i[t]=n?[r,s]:[s,r]:n?s.unshift(r):s.push(r),(o=c(e))>0&&s.length>o&&!s.warned){s.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=s.length,l=u,console&&console.warn&&console.warn(l)}return e}function u(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function h(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},o=u.bind(n);return o.listener=r,n.wrapFn=o,o}function p(e,t,r){var n=e._events;if(void 0===n)return[];var o=n[t];return void 0===o?[]:"function"==typeof o?r?[o.listener||o]:[o]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(o):d(o,o.length)}function f(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function d(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function v(e,t,r,n){if("function"==typeof e.on)n.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function o(i){n.once&&e.removeEventListener(t,o),r(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return s},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");s=e}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return c(this)},i.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var o="error"===e,i=this._events;if(void 0!==i)o=o&&void 0===i.error;else if(!o)return!1;if(o){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var c=i[e];if(void 0===c)return!1;if("function"==typeof c)n(c,this,t);else{var l=c.length,u=d(c,l);for(r=0;r<l;++r)n(u[r],this,t)}return!0},i.prototype.addListener=function(e,t){return l(this,e,t,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,t){return l(this,e,t,!0)},i.prototype.once=function(e,t){return a(t),this.on(e,h(this,e,t)),this},i.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,h(this,e,t)),this},i.prototype.removeListener=function(e,t){var r,n,o,i,s;if(a(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(o=-1,i=r.length-1;i>=0;i--)if(r[i]===t||r[i].listener===t){s=r[i].listener,o=i;break}if(o<0)return this;0===o?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,o),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,s||t)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var o,i=Object.keys(r);for(n=0;n<i.length;++n)"removeListener"!==(o=i[n])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},i.prototype.listeners=function(e){return p(this,e,!0)},i.prototype.rawListeners=function(e){return p(this,e,!1)},i.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):f.call(e,t)},i.prototype.listenerCount=f,i.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},39593:(e,t,r)=>{"use strict";const n=r(34411),o=Symbol("max"),i=Symbol("length"),s=Symbol("lengthCalculator"),a=Symbol("allowStale"),c=Symbol("maxAge"),l=Symbol("dispose"),u=Symbol("noDisposeOnSet"),h=Symbol("lruList"),p=Symbol("cache"),f=Symbol("updateAgeOnGet"),d=()=>1,v=(e,t,r)=>{const n=e[p].get(t);if(n){const t=n.value;if(E(e,t)){if(g(e,n),!e[a])return}else r&&(e[f]&&(n.value.now=Date.now()),e[h].unshiftNode(n));return t.value}},E=(e,t)=>{if(!t||!t.maxAge&&!e[c])return!1;const r=Date.now()-t.now;return t.maxAge?r>t.maxAge:e[c]&&r>e[c]},m=e=>{if(e[i]>e[o])for(let t=e[h].tail;e[i]>e[o]&&null!==t;){const r=t.prev;g(e,t),t=r}},g=(e,t)=>{if(t){const r=t.value;e[l]&&e[l](r.key,r.value),e[i]-=r.length,e[p].delete(r.key),e[h].removeNode(t)}};class y{constructor(e,t,r,n,o){this.key=e,this.value=t,this.length=r,this.now=n,this.maxAge=o||0}}const I=(e,t,r,n)=>{let o=r.value;E(e,o)&&(g(e,r),e[a]||(o=void 0)),o&&t.call(n,o.value,o.key,e)};e.exports=class{constructor(e){if("number"==typeof e&&(e={max:e}),e||(e={}),e.max&&("number"!=typeof e.max||e.max<0))throw new TypeError("max must be a non-negative number");this[o]=e.max||1/0;const t=e.length||d;if(this[s]="function"!=typeof t?d:t,this[a]=e.stale||!1,e.maxAge&&"number"!=typeof e.maxAge)throw new TypeError("maxAge must be a number");this[c]=e.maxAge||0,this[l]=e.dispose,this[u]=e.noDisposeOnSet||!1,this[f]=e.updateAgeOnGet||!1,this.reset()}set max(e){if("number"!=typeof e||e<0)throw new TypeError("max must be a non-negative number");this[o]=e||1/0,m(this)}get max(){return this[o]}set allowStale(e){this[a]=!!e}get allowStale(){return this[a]}set maxAge(e){if("number"!=typeof e)throw new TypeError("maxAge must be a non-negative number");this[c]=e,m(this)}get maxAge(){return this[c]}set lengthCalculator(e){"function"!=typeof e&&(e=d),e!==this[s]&&(this[s]=e,this[i]=0,this[h].forEach((e=>{e.length=this[s](e.value,e.key),this[i]+=e.length}))),m(this)}get lengthCalculator(){return this[s]}get length(){return this[i]}get itemCount(){return this[h].length}rforEach(e,t){t=t||this;for(let r=this[h].tail;null!==r;){const n=r.prev;I(this,e,r,t),r=n}}forEach(e,t){t=t||this;for(let r=this[h].head;null!==r;){const n=r.next;I(this,e,r,t),r=n}}keys(){return this[h].toArray().map((e=>e.key))}values(){return this[h].toArray().map((e=>e.value))}reset(){this[l]&&this[h]&&this[h].length&&this[h].forEach((e=>this[l](e.key,e.value))),this[p]=new Map,this[h]=new n,this[i]=0}dump(){return this[h].map((e=>!E(this,e)&&{k:e.key,v:e.value,e:e.now+(e.maxAge||0)})).toArray().filter((e=>e))}dumpLru(){return this[h]}set(e,t,r){if((r=r||this[c])&&"number"!=typeof r)throw new TypeError("maxAge must be a number");const n=r?Date.now():0,a=this[s](t,e);if(this[p].has(e)){if(a>this[o])return g(this,this[p].get(e)),!1;const s=this[p].get(e).value;return this[l]&&(this[u]||this[l](e,s.value)),s.now=n,s.maxAge=r,s.value=t,this[i]+=a-s.length,s.length=a,this.get(e),m(this),!0}const f=new y(e,t,a,n,r);return f.length>this[o]?(this[l]&&this[l](e,t),!1):(this[i]+=f.length,this[h].unshift(f),this[p].set(e,this[h].head),m(this),!0)}has(e){if(!this[p].has(e))return!1;const t=this[p].get(e).value;return!E(this,t)}get(e){return v(this,e,!0)}peek(e){return v(this,e,!1)}pop(){const e=this[h].tail;return e?(g(this,e),e.value):null}del(e){g(this,this[p].get(e))}load(e){this.reset();const t=Date.now();for(let r=e.length-1;r>=0;r--){const n=e[r],o=n.e||0;if(0===o)this.set(n.k,n.v);else{const e=o-t;e>0&&this.set(n.k,n.v,e)}}}prune(){this[p].forEach(((e,t)=>v(this,t,!1)))}}},49602:e=>{"use strict";e.exports=function(e){e.prototype[Symbol.iterator]=function*(){for(let e=this.head;e;e=e.next)yield e.value}}},34411:(e,t,r)=>{"use strict";function n(e){var t=this;if(t instanceof n||(t=new n),t.tail=null,t.head=null,t.length=0,e&&"function"==typeof e.forEach)e.forEach((function(e){t.push(e)}));else if(arguments.length>0)for(var r=0,o=arguments.length;r<o;r++)t.push(arguments[r]);return t}function o(e,t,r){var n=t===e.head?new a(r,null,t,e):new a(r,t,t.next,e);return null===n.next&&(e.tail=n),null===n.prev&&(e.head=n),e.length++,n}function i(e,t){e.tail=new a(t,e.tail,null,e),e.head||(e.head=e.tail),e.length++}function s(e,t){e.head=new a(t,null,e.head,e),e.tail||(e.tail=e.head),e.length++}function a(e,t,r,n){if(!(this instanceof a))return new a(e,t,r,n);this.list=n,this.value=e,t?(t.next=this,this.prev=t):this.prev=null,r?(r.prev=this,this.next=r):this.next=null}e.exports=n,n.Node=a,n.create=n,n.prototype.removeNode=function(e){if(e.list!==this)throw new Error("removing node which does not belong to this list");var t=e.next,r=e.prev;return t&&(t.prev=r),r&&(r.next=t),e===this.head&&(this.head=t),e===this.tail&&(this.tail=r),e.list.length--,e.next=null,e.prev=null,e.list=null,t},n.prototype.unshiftNode=function(e){if(e!==this.head){e.list&&e.list.removeNode(e);var t=this.head;e.list=this,e.next=t,t&&(t.prev=e),this.head=e,this.tail||(this.tail=e),this.length++}},n.prototype.pushNode=function(e){if(e!==this.tail){e.list&&e.list.removeNode(e);var t=this.tail;e.list=this,e.prev=t,t&&(t.next=e),this.tail=e,this.head||(this.head=e),this.length++}},n.prototype.push=function(){for(var e=0,t=arguments.length;e<t;e++)i(this,arguments[e]);return this.length},n.prototype.unshift=function(){for(var e=0,t=arguments.length;e<t;e++)s(this,arguments[e]);return this.length},n.prototype.pop=function(){if(this.tail){var e=this.tail.value;return this.tail=this.tail.prev,this.tail?this.tail.next=null:this.head=null,this.length--,e}},n.prototype.shift=function(){if(this.head){var e=this.head.value;return this.head=this.head.next,this.head?this.head.prev=null:this.tail=null,this.length--,e}},n.prototype.forEach=function(e,t){t=t||this;for(var r=this.head,n=0;null!==r;n++)e.call(t,r.value,n,this),r=r.next},n.prototype.forEachReverse=function(e,t){t=t||this;for(var r=this.tail,n=this.length-1;null!==r;n--)e.call(t,r.value,n,this),r=r.prev},n.prototype.get=function(e){for(var t=0,r=this.head;null!==r&&t<e;t++)r=r.next;if(t===e&&null!==r)return r.value},n.prototype.getReverse=function(e){for(var t=0,r=this.tail;null!==r&&t<e;t++)r=r.prev;if(t===e&&null!==r)return r.value},n.prototype.map=function(e,t){t=t||this;for(var r=new n,o=this.head;null!==o;)r.push(e.call(t,o.value,this)),o=o.next;return r},n.prototype.mapReverse=function(e,t){t=t||this;for(var r=new n,o=this.tail;null!==o;)r.push(e.call(t,o.value,this)),o=o.prev;return r},n.prototype.reduce=function(e,t){var r,n=this.head;if(arguments.length>1)r=t;else{if(!this.head)throw new TypeError("Reduce of empty list with no initial value");n=this.head.next,r=this.head.value}for(var o=0;null!==n;o++)r=e(r,n.value,o),n=n.next;return r},n.prototype.reduceReverse=function(e,t){var r,n=this.tail;if(arguments.length>1)r=t;else{if(!this.tail)throw new TypeError("Reduce of empty list with no initial value");n=this.tail.prev,r=this.tail.value}for(var o=this.length-1;null!==n;o--)r=e(r,n.value,o),n=n.prev;return r},n.prototype.toArray=function(){for(var e=new Array(this.length),t=0,r=this.head;null!==r;t++)e[t]=r.value,r=r.next;return e},n.prototype.toArrayReverse=function(){for(var e=new Array(this.length),t=0,r=this.tail;null!==r;t++)e[t]=r.value,r=r.prev;return e},n.prototype.slice=function(e,t){(t=t||this.length)<0&&(t+=this.length),(e=e||0)<0&&(e+=this.length);var r=new n;if(t<e||t<0)return r;e<0&&(e=0),t>this.length&&(t=this.length);for(var o=0,i=this.head;null!==i&&o<e;o++)i=i.next;for(;null!==i&&o<t;o++,i=i.next)r.push(i.value);return r},n.prototype.sliceReverse=function(e,t){(t=t||this.length)<0&&(t+=this.length),(e=e||0)<0&&(e+=this.length);var r=new n;if(t<e||t<0)return r;e<0&&(e=0),t>this.length&&(t=this.length);for(var o=this.length,i=this.tail;null!==i&&o>t;o--)i=i.prev;for(;null!==i&&o>e;o--,i=i.prev)r.push(i.value);return r},n.prototype.splice=function(e,t,...r){e>this.length&&(e=this.length-1),e<0&&(e=this.length+e);for(var n=0,i=this.head;null!==i&&n<e;n++)i=i.next;var s=[];for(n=0;i&&n<t;n++)s.push(i.value),i=this.removeNode(i);for(null===i&&(i=this.tail),i!==this.head&&i!==this.tail&&(i=i.prev),n=0;n<r.length;n++)i=o(this,i,r[n]);return s},n.prototype.reverse=function(){for(var e=this.head,t=this.tail,r=e;null!==r;r=r.prev){var n=r.prev;r.prev=r.next,r.next=n}return this.head=t,this.tail=e,this};try{r(49602)(n)}catch(e){}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
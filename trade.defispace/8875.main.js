(self.webpackChunkmy_swap=self.webpackChunkmy_swap||[]).push([[8875],{81506:e=>{e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e},e.exports.default=e.exports,e.exports.__esModule=!0},48926:e=>{function t(e,t,n,r,o,i,a){try{var s=e[i](a),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,o)}e.exports=function(e){return function(){var n=this,r=arguments;return new Promise((function(o,i){var a=e.apply(n,r);function s(e){t(a,o,i,s,c,"next",e)}function c(e){t(a,o,i,s,c,"throw",e)}s(void 0)}))}},e.exports.default=e.exports,e.exports.__esModule=!0},69100:(e,t,n)=>{var r=n(99489),o=n(4043);function i(t,n,a){return o()?(e.exports=i=Reflect.construct,e.exports.default=e.exports,e.exports.__esModule=!0):(e.exports=i=function(e,t,n){var o=[null];o.push.apply(o,t);var i=new(Function.bind.apply(e,o));return n&&r(i,n.prototype),i},e.exports.default=e.exports,e.exports.__esModule=!0),i.apply(null,arguments)}e.exports=i,e.exports.default=e.exports,e.exports.__esModule=!0},59713:e=>{e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},e.exports.default=e.exports,e.exports.__esModule=!0},29754:e=>{function t(n){return e.exports=t=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},e.exports.default=e.exports,e.exports.__esModule=!0,t(n)}e.exports=t,e.exports.default=e.exports,e.exports.__esModule=!0},85354:(e,t,n)=>{var r=n(99489);e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,r(e,t)},e.exports.default=e.exports,e.exports.__esModule=!0},70430:e=>{e.exports=function(e){return-1!==Function.toString.call(e).indexOf("[native code]")},e.exports.default=e.exports,e.exports.__esModule=!0},4043:e=>{e.exports=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}},e.exports.default=e.exports,e.exports.__esModule=!0},99489:e=>{function t(n,r){return e.exports=t=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},e.exports.default=e.exports,e.exports.__esModule=!0,t(n,r)}e.exports=t,e.exports.default=e.exports,e.exports.__esModule=!0},65957:(e,t,n)=>{var r=n(29754),o=n(99489),i=n(70430),a=n(69100);function s(t){var n="function"==typeof Map?new Map:void 0;return e.exports=s=function(e){if(null===e||!i(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(e))return n.get(e);n.set(e,t)}function t(){return a(e,arguments,r(this).constructor)}return t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),o(t,e)},e.exports.default=e.exports,e.exports.__esModule=!0,s(t)}e.exports=s,e.exports.default=e.exports,e.exports.__esModule=!0},87757:(e,t,n)=>{e.exports=n(35666)},54098:function(e,t){var n="undefined"!=typeof self?self:this,r=function(){function e(){this.fetch=!1,this.DOMException=n.DOMException}return e.prototype=n,new e}();!function(e){!function(t){var n="URLSearchParams"in e,r="Symbol"in e&&"iterator"in Symbol,o="FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return!1}}(),i="FormData"in e,a="ArrayBuffer"in e;if(a)var s=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],c=ArrayBuffer.isView||function(e){return e&&s.indexOf(Object.prototype.toString.call(e))>-1};function u(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function l(e){return"string"!=typeof e&&(e=String(e)),e}function p(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return r&&(t[Symbol.iterator]=function(){return t}),t}function d(e){this.map={},e instanceof d?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function f(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function E(e){return new Promise((function(t,n){e.onload=function(){t(e.result)},e.onerror=function(){n(e.error)}}))}function h(e){var t=new FileReader,n=E(t);return t.readAsArrayBuffer(e),n}function _(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function m(){return this.bodyUsed=!1,this._initBody=function(e){var t;this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:o&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:i&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:n&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():a&&o&&(t=e)&&DataView.prototype.isPrototypeOf(t)?(this._bodyArrayBuffer=_(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):a&&(ArrayBuffer.prototype.isPrototypeOf(e)||c(e))?this._bodyArrayBuffer=_(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):n&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},o&&(this.blob=function(){var e=f(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?f(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(h)}),this.text=function(){var e,t,n,r=f(this);if(r)return r;if(this._bodyBlob)return e=this._bodyBlob,n=E(t=new FileReader),t.readAsText(e),n;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),r=0;r<t.length;r++)n[r]=String.fromCharCode(t[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},i&&(this.formData=function(){return this.text().then(b)}),this.json=function(){return this.text().then(JSON.parse)},this}d.prototype.append=function(e,t){e=u(e),t=l(t);var n=this.map[e];this.map[e]=n?n+", "+t:t},d.prototype.delete=function(e){delete this.map[u(e)]},d.prototype.get=function(e){return e=u(e),this.has(e)?this.map[e]:null},d.prototype.has=function(e){return this.map.hasOwnProperty(u(e))},d.prototype.set=function(e,t){this.map[u(e)]=l(t)},d.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},d.prototype.keys=function(){var e=[];return this.forEach((function(t,n){e.push(n)})),p(e)},d.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),p(e)},d.prototype.entries=function(){var e=[];return this.forEach((function(t,n){e.push([n,t])})),p(e)},r&&(d.prototype[Symbol.iterator]=d.prototype.entries);var y=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function v(e,t){var n,r,o=(t=t||{}).body;if(e instanceof v){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new d(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,o||null==e._bodyInit||(o=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new d(t.headers)),this.method=(r=(n=t.method||this.method||"GET").toUpperCase(),y.indexOf(r)>-1?r:n),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(o)}function b(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var n=e.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(o))}})),t}function T(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new d(t.headers),this.url=t.url||"",this._initBody(e)}v.prototype.clone=function(){return new v(this,{body:this._bodyInit})},m.call(v.prototype),m.call(T.prototype),T.prototype.clone=function(){return new T(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new d(this.headers),url:this.url})},T.error=function(){var e=new T(null,{status:0,statusText:""});return e.type="error",e};var S=[301,302,303,307,308];T.redirect=function(e,t){if(-1===S.indexOf(t))throw new RangeError("Invalid status code");return new T(null,{status:t,headers:{location:e}})},t.DOMException=e.DOMException;try{new t.DOMException}catch(e){t.DOMException=function(e,t){this.message=e,this.name=t;var n=Error(e);this.stack=n.stack},t.DOMException.prototype=Object.create(Error.prototype),t.DOMException.prototype.constructor=t.DOMException}function O(e,n){return new Promise((function(r,i){var a=new v(e,n);if(a.signal&&a.signal.aborted)return i(new t.DOMException("Aborted","AbortError"));var s=new XMLHttpRequest;function c(){s.abort()}s.onload=function(){var e,t,n={status:s.status,statusText:s.statusText,headers:(e=s.getAllResponseHeaders()||"",t=new d,e.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(e){var n=e.split(":"),r=n.shift().trim();if(r){var o=n.join(":").trim();t.append(r,o)}})),t)};n.url="responseURL"in s?s.responseURL:n.headers.get("X-Request-URL");var o="response"in s?s.response:s.responseText;r(new T(o,n))},s.onerror=function(){i(new TypeError("Network request failed"))},s.ontimeout=function(){i(new TypeError("Network request failed"))},s.onabort=function(){i(new t.DOMException("Aborted","AbortError"))},s.open(a.method,a.url,!0),"include"===a.credentials?s.withCredentials=!0:"omit"===a.credentials&&(s.withCredentials=!1),"responseType"in s&&o&&(s.responseType="blob"),a.headers.forEach((function(e,t){s.setRequestHeader(t,e)})),a.signal&&(a.signal.addEventListener("abort",c),s.onreadystatechange=function(){4===s.readyState&&a.signal.removeEventListener("abort",c)}),s.send(void 0===a._bodyInit?null:a._bodyInit)}))}O.polyfill=!0,e.fetch||(e.fetch=O,e.Headers=d,e.Request=v,e.Response=T),t.Headers=d,t.Request=v,t.Response=T,t.fetch=O,Object.defineProperty(t,"__esModule",{value:!0})}({})}(r),r.fetch.ponyfill=!0,delete r.fetch.polyfill;var o=r;(t=o.fetch).default=o.fetch,t.fetch=o.fetch,t.Headers=o.Headers,t.Request=o.Request,t.Response=o.Response,e.exports=t},17187:e=>{"use strict";var t,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function i(){i.init.call(this)}e.exports=i,e.exports.once=function(e,t){return new Promise((function(n,r){function o(n){e.removeListener(t,i),r(n)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",o),n([].slice.call(arguments))}h(e,t,i,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&h(e,"error",t,{once:!0})}(e,o)}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var a=10;function s(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function c(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function u(e,t,n,r){var o,i,a,u;if(s(n),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),i=e._events),a=i[t]),void 0===a)a=i[t]=n,++e._eventsCount;else if("function"==typeof a?a=i[t]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),(o=c(e))>0&&a.length>o&&!a.warned){a.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=a.length,u=l,console&&console.warn&&console.warn(u)}return e}function l(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function p(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},o=l.bind(r);return o.listener=n,r.wrapFn=o,o}function d(e,t,n){var r=e._events;if(void 0===r)return[];var o=r[t];return void 0===o?[]:"function"==typeof o?n?[o.listener||o]:[o]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(o):E(o,o.length)}function f(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function E(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function h(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function o(i){r.once&&e.removeEventListener(t,o),n(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");a=e}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return c(this)},i.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var o="error"===e,i=this._events;if(void 0!==i)o=o&&void 0===i.error;else if(!o)return!1;if(o){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var c=i[e];if(void 0===c)return!1;if("function"==typeof c)r(c,this,t);else{var u=c.length,l=E(c,u);for(n=0;n<u;++n)r(l[n],this,t)}return!0},i.prototype.addListener=function(e,t){return u(this,e,t,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,t){return u(this,e,t,!0)},i.prototype.once=function(e,t){return s(t),this.on(e,p(this,e,t)),this},i.prototype.prependOnceListener=function(e,t){return s(t),this.prependListener(e,p(this,e,t)),this},i.prototype.removeListener=function(e,t){var n,r,o,i,a;if(s(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,i=n.length-1;i>=0;i--)if(n[i]===t||n[i].listener===t){a=n[i].listener,o=i;break}if(o<0)return this;0===o?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,o),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,a||t)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var o,i=Object.keys(n);for(r=0;r<i.length;++r)"removeListener"!==(o=i[r])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},i.prototype.listeners=function(e){return d(this,e,!0)},i.prototype.rawListeners=function(e){return d(this,e,!1)},i.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):f.call(e,t)},i.prototype.listenerCount=f,i.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},61670:(e,t)=>{"use strict";t.__esModule=!0,t.FIAT_RATES_UPDATE=t.NOTIFICATION=t.BLOCK=t.CONNECT=t.ERROR=void 0,t.ERROR="blockchain-error",t.CONNECT="blockchain-connect",t.BLOCK="blockchain-block",t.NOTIFICATION="blockchain-notification",t.FIAT_RATES_UPDATE="fiat-rates-update"},46753:(e,t)=>{"use strict";t.__esModule=!0,t.POOL_RELAY_TYPE=t.CERTIFICATE_TYPE=t.ADDRESS_TYPE=t.NETWORK_IDS=t.PROTOCOL_MAGICS=void 0;var n=Object.freeze({mainnet:764824073,testnet:42});t.PROTOCOL_MAGICS=n;var r=Object.freeze({mainnet:1,testnet:0});t.NETWORK_IDS=r;var o=Object.freeze({Base:0,Pointer:4,Enterprise:6,Byron:8,Reward:14});t.ADDRESS_TYPE=o;var i=Object.freeze({StakeRegistration:0,StakeDeregistration:1,StakeDelegation:2,StakePoolRegistration:3});t.CERTIFICATE_TYPE=i;var a=Object.freeze({SingleHostIp:0,SingleHostName:1,MultipleHostName:2});t.POOL_RELAY_TYPE=a},29597:(e,t)=>{"use strict";t.__esModule=!0,t.WAIT_FOR_SELECTION=t.WORD=t.PASSPHRASE_ON_DEVICE=t.PASSPHRASE=t.PIN=t.BUTTON=t.LOADING=t.USED_ELSEWHERE=t.RELEASED=t.ACQUIRED=t.RELEASE=t.ACQUIRE=t.CHANGED=t.DISCONNECT=t.CONNECT_UNACQUIRED=t.CONNECT=void 0,t.CONNECT="device-connect",t.CONNECT_UNACQUIRED="device-connect_unacquired",t.DISCONNECT="device-disconnect",t.CHANGED="device-changed",t.ACQUIRE="device-acquire",t.RELEASE="device-release",t.ACQUIRED="device-acquired",t.RELEASED="device-released",t.USED_ELSEWHERE="device-used_elsewhere",t.LOADING="device-loading",t.BUTTON="button",t.PIN="pin",t.PASSPHRASE="passphrase",t.PASSPHRASE_ON_DEVICE="passphrase_on_device",t.WORD="word",t.WAIT_FOR_SELECTION="device-wait_for_selection"},59654:(e,t,n)=>{"use strict";var r=n(95318);t.__esModule=!0,t.LIBUSB_ERROR_MESSAGE=t.WEBUSB_ERROR_MESSAGE=t.INVALID_PIN_ERROR_MESSAGE=t.WRONG_PREVIOUS_SESSION_ERROR_MESSAGE=t.TypedError=t.TrezorError=t.ERROR_CODES=void 0;var o=r(n(85354)),i=r(n(65957)),a={Init_NotInitialized:"TrezorConnect not yet initialized",Init_AlreadyInitialized:"TrezorConnect has been already initialized",Init_IframeBlocked:"Iframe blocked",Init_IframeTimeout:"Iframe timeout",Init_ManifestMissing:"Manifest not set. Read more at https://github.com/trezor/connect/blob/develop/docs/index.md",Popup_ConnectionMissing:"Unable to establish connection with iframe",Transport_Missing:"Transport is missing",Transport_InvalidProtobuf:"",Method_InvalidPackage:"This version of trezor-connect is not suitable to work without browser. Use trezor-connect@extended package instead",Method_InvalidParameter:"",Method_NotAllowed:"Method not allowed for this configuration",Method_PermissionsNotGranted:"Permissions not granted",Method_Cancel:"Cancelled",Method_Interrupted:"Popup closed",Method_UnknownCoin:"Coin not found",Method_AddressNotMatch:"Addresses do not match",Method_FirmwareUpdate_DownloadFailed:"Failed to download firmware binary",Method_CustomMessage_Callback:'Parameter "callback" is not a function',Method_Discovery_BundleException:"",Method_Override:"override",Method_NoResponse:"Call resolved without response",Backend_NotSupported:"BlockchainLink settings not found in coins.json",Backend_WorkerMissing:"",Backend_Disconnected:"Backend disconnected",Backend_Invalid:"Invalid backend",Backend_Error:"",Runtime:"",Device_NotFound:"Device not found",Device_InitializeFailed:"",Device_FwException:"",Device_ModeException:"",Device_Disconnected:"Device disconnected",Device_UsedElsewhere:"Device is used in another window",Device_InvalidState:"Passphrase is incorrect",Device_CallInProgress:"Device call in progress"};t.ERROR_CODES=a;var s=function(e){function t(t,n){var r;return(r=e.call(this,n)||this).code=t,r.message=n,r}return(0,o.default)(t,e),t}((0,i.default)(Error));t.TrezorError=s,t.TypedError=function(e,t){return new s(e,t||a[e])},t.WRONG_PREVIOUS_SESSION_ERROR_MESSAGE="wrong previous session",t.INVALID_PIN_ERROR_MESSAGE="PIN invalid",t.WEBUSB_ERROR_MESSAGE="NetworkError: Unable to claim interface.",t.LIBUSB_ERROR_MESSAGE="LIBUSB_ERROR"},7589:(e,t)=>{"use strict";t.__esModule=!0,t.CALL=t.ERROR=t.INIT=t.LOADED=t.BOOTSTRAP=void 0,t.BOOTSTRAP="iframe-bootstrap",t.LOADED="iframe-loaded",t.INIT="iframe-init",t.ERROR="iframe-error",t.CALL="iframe-call"},68908:(e,t,n)=>{"use strict";t.__esModule=!0,t.CARDANO=t.UI=t.TRANSPORT=t.POPUP=t.NETWORK=t.IFRAME=t.ERRORS=t.DEVICE=t.BLOCKCHAIN=t.BLOCKCHAIN_EVENT=t.RESPONSE_EVENT=t.TRANSPORT_EVENT=t.DEVICE_EVENT=t.UI_EVENT=t.CORE_EVENT=void 0;var r=f(n(61670));t.BLOCKCHAIN=r;var o=f(n(29597));t.DEVICE=o;var i=f(n(59654));t.ERRORS=i;var a=f(n(7589));t.IFRAME=a;var s=f(n(17154));t.NETWORK=s;var c=f(n(98083));t.POPUP=c;var u=f(n(17082));t.TRANSPORT=u;var l=f(n(78334));t.UI=l;var p=f(n(46753));function d(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(d=function(e){return e?n:t})(e)}function f(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var n=d(t);if(n&&n.has(e))return n.get(e);var r={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if("default"!==i&&Object.prototype.hasOwnProperty.call(e,i)){var a=o?Object.getOwnPropertyDescriptor(e,i):null;a&&(a.get||a.set)?Object.defineProperty(r,i,a):r[i]=e[i]}return r.default=e,n&&n.set(e,r),r}t.CARDANO=p,t.CORE_EVENT="CORE_EVENT",t.UI_EVENT="UI_EVENT",t.DEVICE_EVENT="DEVICE_EVENT",t.TRANSPORT_EVENT="TRANSPORT_EVENT",t.RESPONSE_EVENT="RESPONSE_EVENT",t.BLOCKCHAIN_EVENT="BLOCKCHAIN_EVENT"},17154:(e,t)=>{"use strict";t.__esModule=!0,t.TYPES=void 0;var n=Object.freeze({bitcoin:"Bitcoin",ethereum:"Ethereum",eos:"Eos",nem:"NEM",stellar:"Stellar",cardano:"Cardano",ripple:"Ripple",tezos:"Tezors",binance:"Binance"});t.TYPES=n},98083:(e,t)=>{"use strict";t.__esModule=!0,t.CLOSE_WINDOW=t.CANCEL_POPUP_REQUEST=t.CLOSED=t.HANDSHAKE=t.EXTENSION_USB_PERMISSIONS=t.ERROR=t.INIT=t.LOADED=t.BOOTSTRAP=void 0,t.BOOTSTRAP="popup-bootstrap",t.LOADED="popup-loaded",t.INIT="popup-init",t.ERROR="popup-error",t.EXTENSION_USB_PERMISSIONS="open-usb-permissions",t.HANDSHAKE="popup-handshake",t.CLOSED="popup-closed",t.CANCEL_POPUP_REQUEST="ui-cancel-popup-request",t.CLOSE_WINDOW="window.close"},17082:(e,t)=>{"use strict";t.__esModule=!0,t.START_PENDING=t.DISABLE_WEBUSB=t.REQUEST=t.STREAM=t.UPDATE=t.ERROR=t.START=void 0,t.START="transport-start",t.ERROR="transport-error",t.UPDATE="transport-update",t.STREAM="transport-stream",t.REQUEST="transport-request_device",t.DISABLE_WEBUSB="transport-disable_webusb",t.START_PENDING="transport-start_pending"},78334:(e,t)=>{"use strict";t.__esModule=!0,t.IFRAME_FAILURE=t.ADDRESS_VALIDATION=t.BUNDLE_PROGRESS=t.LOGIN_CHALLENGE_RESPONSE=t.LOGIN_CHALLENGE_REQUEST=t.CUSTOM_MESSAGE_RESPONSE=t.CUSTOM_MESSAGE_REQUEST=t.CHANGE_SETTINGS=t.RECEIVE_WORD=t.RECEIVE_FEE=t.RECEIVE_ACCOUNT=t.CHANGE_ACCOUNT=t.RECEIVE_DEVICE=t.RECEIVE_PASSPHRASE=t.RECEIVE_PIN=t.RECEIVE_CONFIRMATION=t.RECEIVE_PERMISSION=t.REQUEST_WORD=t.REQUEST_BUTTON=t.INSUFFICIENT_FUNDS=t.UPDATE_CUSTOM_FEE=t.SELECT_FEE=t.SELECT_ACCOUNT=t.SELECT_DEVICE=t.SET_OPERATION=t.LOADING=t.CONNECT=t.INVALID_PASSPHRASE_ACTION=t.INVALID_PASSPHRASE=t.REQUEST_PASSPHRASE_ON_DEVICE=t.REQUEST_PASSPHRASE=t.INVALID_PIN=t.REQUEST_PIN=t.REQUEST_CONFIRMATION=t.REQUEST_PERMISSION=t.CLOSE_UI_WINDOW=t.REQUEST_UI_WINDOW=t.DEVICE_NEEDS_BACKUP=t.FIRMWARE_PROGRESS=t.FIRMWARE_NOT_INSTALLED=t.FIRMWARE_NOT_COMPATIBLE=t.FIRMWARE_NOT_SUPPORTED=t.FIRMWARE_OUTDATED=t.FIRMWARE_OLD=t.SEEDLESS=t.INITIALIZE=t.REQUIRE_MODE=t.NOT_IN_BOOTLOADER=t.BOOTLOADER=t.TRANSPORT=void 0,t.TRANSPORT="ui-no_transport",t.BOOTLOADER="ui-device_bootloader_mode",t.NOT_IN_BOOTLOADER="ui-device_not_in_bootloader_mode",t.REQUIRE_MODE="ui-device_require_mode",t.INITIALIZE="ui-device_not_initialized",t.SEEDLESS="ui-device_seedless",t.FIRMWARE_OLD="ui-device_firmware_old",t.FIRMWARE_OUTDATED="ui-device_firmware_outdated",t.FIRMWARE_NOT_SUPPORTED="ui-device_firmware_unsupported",t.FIRMWARE_NOT_COMPATIBLE="ui-device_firmware_not_compatible",t.FIRMWARE_NOT_INSTALLED="ui-device_firmware_not_installed",t.FIRMWARE_PROGRESS="ui-firmware-progress",t.DEVICE_NEEDS_BACKUP="ui-device_needs_backup",t.REQUEST_UI_WINDOW="ui-request_window",t.CLOSE_UI_WINDOW="ui-close_window",t.REQUEST_PERMISSION="ui-request_permission",t.REQUEST_CONFIRMATION="ui-request_confirmation",t.REQUEST_PIN="ui-request_pin",t.INVALID_PIN="ui-invalid_pin",t.REQUEST_PASSPHRASE="ui-request_passphrase",t.REQUEST_PASSPHRASE_ON_DEVICE="ui-request_passphrase_on_device",t.INVALID_PASSPHRASE="ui-invalid_passphrase",t.INVALID_PASSPHRASE_ACTION="ui-invalid_passphrase_action",t.CONNECT="ui-connect",t.LOADING="ui-loading",t.SET_OPERATION="ui-set_operation",t.SELECT_DEVICE="ui-select_device",t.SELECT_ACCOUNT="ui-select_account",t.SELECT_FEE="ui-select_fee",t.UPDATE_CUSTOM_FEE="ui-update_custom_fee",t.INSUFFICIENT_FUNDS="ui-insufficient_funds",t.REQUEST_BUTTON="ui-button",t.REQUEST_WORD="ui-request_word",t.RECEIVE_PERMISSION="ui-receive_permission",t.RECEIVE_CONFIRMATION="ui-receive_confirmation",t.RECEIVE_PIN="ui-receive_pin",t.RECEIVE_PASSPHRASE="ui-receive_passphrase",t.RECEIVE_DEVICE="ui-receive_device",t.CHANGE_ACCOUNT="ui-change_account",t.RECEIVE_ACCOUNT="ui-receive_account",t.RECEIVE_FEE="ui-receive_fee",t.RECEIVE_WORD="ui-receive_word",t.CHANGE_SETTINGS="ui-change_settings",t.CUSTOM_MESSAGE_REQUEST="ui-custom_request",t.CUSTOM_MESSAGE_RESPONSE="ui-custom_response",t.LOGIN_CHALLENGE_REQUEST="ui-login_challenge_request",t.LOGIN_CHALLENGE_RESPONSE="ui-login_challenge_response",t.BUNDLE_PROGRESS="ui-bundle_progress",t.ADDRESS_VALIDATION="ui-address_validation",t.IFRAME_FAILURE="ui-iframe_failure"},7371:(e,t,n)=>{"use strict";var r=n(95318);t.__esModule=!0,t.parse=t.corsValidator=t.getEnv=t.DEFAULT_PRIORITY=void 0;var o=r(n(59713));function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var a="8.2.4",s="https://connect.trezor.io/"+a.split(".").map((function(e){return parseInt(e,10)}))[0]+"/";t.DEFAULT_PRIORITY=2;var c={configSrc:"./data/config.json",version:a,debug:!1,priority:2,trustedHost:!1,connectSrc:s,iframeSrc:s+"iframe.html",popup:!0,popupSrc:s+"popup.html",webusbSrc:s+"webusb.html",transportReconnect:!1,webusb:!0,pendingTransportEvent:!0,supportedBrowser:"undefined"==typeof navigator||!/Trident|MSIE|Edge/.test(navigator.userAgent),manifest:null,env:"web",lazyLoad:!1,timestamp:(new Date).getTime(),interactionTimeout:600},u=function(){if("undefined"!=typeof chrome&&chrome.runtime&&void 0!==chrome.runtime.onConnect)return"webextension";if("undefined"!=typeof navigator){if("string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase())return"react-native";if(navigator.userAgent.toLowerCase().indexOf(" electron/")>-1)return"electron"}return"web"};t.getEnv=u;var l=function(e){if("string"==typeof e)return e.match(/^https:\/\/([A-Za-z0-9\-_]+\.)*trezor\.io\//)||e.match(/^https?:\/\/localhost:[58][0-9]{3}\//)||e.match(/^https:\/\/([A-Za-z0-9\-_]+\.)*sldev\.cz\//)||e.match(/^https?:\/\/([A-Za-z0-9\-_]+\.)*trezoriovpjcahpzkrewelclulmszwbqpzmzgub37gbcjlvluxtruqad\.onion\//)?e:void 0};t.corsValidator=l,t.parse=function(e){void 0===e&&(e={});var t=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){(0,o.default)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},c);if(Object.prototype.hasOwnProperty.call(e,"debug")&&(Array.isArray(e),"boolean"==typeof e.debug?t.debug=e.debug:"string"==typeof e.debug&&(t.debug="true"===e.debug)),"string"==typeof e.connectSrc&&(t.connectSrc=e.connectSrc),void 0!==n.g&&"string"==typeof n.g.__TREZOR_CONNECT_SRC&&(t.connectSrc=l(n.g.__TREZOR_CONNECT_SRC),t.debug=!0),"undefined"!=typeof window&&window.location&&"string"==typeof window.location.search){var r=window.location.search.split("&").find((function(e){return e.indexOf("trezor-connect-src")>=0}));if(r){var a=r.split("=")[1];t.connectSrc=l(decodeURIComponent(a)),t.debug=!0}}var p=t.connectSrc||s;return t.iframeSrc=p+"iframe.html",t.popupSrc=p+"popup.html",t.webusbSrc=p+"webusb.html","boolean"==typeof e.transportReconnect&&(t.transportReconnect=e.transportReconnect),"boolean"==typeof e.webusb&&(t.webusb=e.webusb),"boolean"==typeof e.popup&&(t.popup=e.popup),"boolean"==typeof e.lazyLoad&&(t.lazyLoad=e.lazyLoad),"boolean"==typeof e.pendingTransportEvent&&(t.pendingTransportEvent=e.pendingTransportEvent),"undefined"!=typeof window&&window.location&&"file:"===window.location.protocol&&(t.origin="file://"+window.location.pathname,t.webusb=!1),"string"==typeof e.extension&&(t.extension=e.extension),"string"==typeof e.env?t.env=e.env:t.env=u(),"number"==typeof e.timestamp&&(t.timestamp=e.timestamp),"number"==typeof e.interactionTimeout&&(t.interactionTimeout=e.interactionTimeout),"object"==typeof e.manifest&&(t.manifest=function(e){if(e&&"string"==typeof e.email&&"string"==typeof e.appUrl)return{email:e.email,appUrl:e.appUrl}}(e.manifest)),c=t}},93250:(e,t,n)=>{"use strict";var r=n(95318);t.__esModule=!0,t.disableWebUSB=t.requestLogin=t.customMessage=t.getSettings=t.renderWebUSBButton=t.uiResponse=t.call=t.init=t.cancel=t.dispose=t.manifest=t.eventEmitter=void 0;var o=r(n(87757)),i=r(n(59713)),a=r(n(48926)),s=r(n(17187)),c=r(n(67625)),u=m(n(79670)),l=r(n(23273)),p=n(9048),d=n(59345),f=n(7371),E=n(62383),h=n(68908);function _(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(_=function(e){return e?n:t})(e)}function m(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var n=_(t);if(n&&n.has(e))return n.get(e);var r={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if("default"!==i&&Object.prototype.hasOwnProperty.call(e,i)){var a=o?Object.getOwnPropertyDescriptor(e,i):null;a&&(a.get||a.set)?Object.defineProperty(r,i,a):r[i]=e[i]}return r.default=e,n&&n.set(e,r),r}function y(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function v(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?y(Object(n),!0).forEach((function(t){(0,i.default)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):y(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}m(n(27025));var b=new s.default;t.eventEmitter=b;var T,S,O=(0,E.initLog)("[trezor-connect.js]"),R=function(){var e=new c.default(T);return e.on(h.POPUP.CLOSED,(function(e){u.postMessage({type:h.POPUP.CLOSED,payload:e?{error:e}:null},!1)})),e};t.manifest=function(e){T=(0,f.parse)({manifest:e})};var g=function(){b.removeAllListeners(),u.dispose(),S&&S.close()};t.dispose=g,t.cancel=function(e){S&&S.emit(h.POPUP.CLOSED,e)};var I=function(e){if(e.origin===u.origin){var t=(0,p.parseMessage)(e.data),n=t.event,r=t.type,o=t.payload,i=t.id||0;switch(O.log("handleMessage",t),n){case h.RESPONSE_EVENT:u.messagePromises[i]?(u.messagePromises[i].resolve({id:i,success:t.success,payload:o}),delete u.messagePromises[i]):O.warn("Unknown message id "+i);break;case h.DEVICE_EVENT:case h.TRANSPORT_EVENT:case h.BLOCKCHAIN_EVENT:b.emit(n,t),b.emit(r,o);break;case h.UI_EVENT:if(r===h.IFRAME.BOOTSTRAP){u.clearTimeout();break}r===h.IFRAME.LOADED&&u.initPromise.resolve(),r===h.IFRAME.ERROR&&u.initPromise.reject(o.error),b.emit(n,t),b.emit(r,o);break;default:O.log("Undefined message",n,e)}}},w=function(){var e=(0,a.default)(o.default.mark((function e(t){return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(void 0===t&&(t={}),!u.instance){e.next=3;break}throw h.ERRORS.TypedError("Init_AlreadyInitialized");case 3:if(T||(T=(0,f.parse)(t)),T.manifest){e.next=6;break}throw h.ERRORS.TypedError("Init_ManifestMissing");case 6:if(!T.lazyLoad){e.next=9;break}return T.lazyLoad=!1,e.abrupt("return");case 9:return S||(S=R()),O.enabled=!!T.debug,window.addEventListener("message",I),window.addEventListener("unload",g),e.next=15,u.init(T);case 15:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();t.init=w;var A=function(){var e=(0,a.default)(o.default.mark((function e(t){var n;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(u.instance||u.timeout){e.next=15;break}if((T=(0,f.parse)(T)).manifest){e.next=4;break}return e.abrupt("return",(0,p.errorMessage)(h.ERRORS.TypedError("Init_ManifestMissing")));case 4:return S||(S=R()),S.request(!0),e.prev=6,e.next=9,w(T);case 9:e.next=15;break;case 11:return e.prev=11,e.t0=e.catch(6),S&&(["Init_IframeBlocked","Init_IframeTimeout"].includes(e.t0.code)?S.postMessage((0,d.UiMessage)(h.UI.IFRAME_FAILURE)):S.close()),e.abrupt("return",(0,p.errorMessage)(e.t0));case 15:if(!u.timeout){e.next=17;break}return e.abrupt("return",(0,p.errorMessage)(h.ERRORS.TypedError("Init_ManifestMissing")));case 17:if(!u.error){e.next=19;break}return e.abrupt("return",(0,p.errorMessage)(u.error));case 19:return T.popup&&S&&S.request(),e.prev=20,e.next=23,u.postMessage({type:h.IFRAME.CALL,payload:t});case 23:if(!(n=e.sent)){e.next=27;break}return!n.success&&"Device_CallInProgress"!==n.payload.code&&S&&S.unlock(),e.abrupt("return",n);case 27:return S&&S.unlock(),e.abrupt("return",(0,p.errorMessage)(h.ERRORS.TypedError("Method_NoResponse")));case 31:return e.prev=31,e.t1=e.catch(20),O.error("__call error",e.t1),S&&S.close(),e.abrupt("return",(0,p.errorMessage)(e.t1));case 36:case"end":return e.stop()}}),e,null,[[6,11],[20,31]])})));return function(t){return e.apply(this,arguments)}}();t.call=A;var N=function(e){u.postMessage({event:h.UI_EVENT,type:h.UI.CUSTOM_MESSAGE_RESPONSE,payload:e})};t.uiResponse=function(e){var t=e.type,n=e.payload;u.postMessage({event:h.UI_EVENT,type:t,payload:n})},t.renderWebUSBButton=function(e){(0,l.default)(e,T.webusbSrc,u.origin)},t.getSettings=function(){return u.instance?A({method:"getSettings"}):Promise.resolve((0,p.errorMessage)(h.ERRORS.TypedError("Init_NotInitialized")))};var C=function(){var e=(0,a.default)(o.default.mark((function e(t){var n,r,i;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("function"==typeof t.callback){e.next=2;break}return e.abrupt("return",(0,p.errorMessage)(h.ERRORS.TypedError("Method_CustomMessage_Callback")));case 2:return n=t.callback,r=function(){var e=(0,a.default)(o.default.mark((function e(t){var r,i;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(r=t.data)||r.type!==h.UI.CUSTOM_MESSAGE_REQUEST){e.next=6;break}return e.next=4,n(r.payload);case 4:i=e.sent,N(i||{message:"release"});case 6:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),window.addEventListener("message",r,!1),e.next=7,A(v(v({method:"customMessage"},t),{},{callback:null}));case 7:return i=e.sent,window.removeEventListener("message",r),e.abrupt("return",i);case 10:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();t.customMessage=C;var x=function(){var e=(0,a.default)(o.default.mark((function e(t){var n,r,i;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("function"!=typeof t.callback){e.next=9;break}return n=t.callback,r=function(){var e=(0,a.default)(o.default.mark((function e(t){var r,i;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(r=t.data)||r.type!==h.UI.LOGIN_CHALLENGE_REQUEST){e.next=12;break}return e.prev=2,e.next=5,n();case 5:i=e.sent,u.postMessage({event:h.UI_EVENT,type:h.UI.LOGIN_CHALLENGE_RESPONSE,payload:i}),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(2),u.postMessage({event:h.UI_EVENT,type:h.UI.LOGIN_CHALLENGE_RESPONSE,payload:e.t0.message});case 12:case"end":return e.stop()}}),e,null,[[2,9]])})));return function(t){return e.apply(this,arguments)}}(),window.addEventListener("message",r,!1),e.next=6,A(v(v({method:"requestLogin"},t),{},{asyncChallenge:!0,callback:null}));case 6:return i=e.sent,window.removeEventListener("message",r),e.abrupt("return",i);case 9:return e.abrupt("return",A(v({method:"requestLogin"},t)));case 10:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();t.requestLogin=x,t.disableWebUSB=function(){u.postMessage({event:h.UI_EVENT,type:h.TRANSPORT.DISABLE_WEBUSB})}},50153:(e,t,n)=>{"use strict";var r=n(95318);t.__esModule=!0,t.getOrigin=t.httpRequest=void 0;var o=r(n(87757)),i=r(n(48926)),a=r(n(54098)),s=function(){var e=(0,i.default)(o.default.mark((function e(t,n){var r,i;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return void 0===n&&(n="text"),e.next=3,(0,a.default)(t,{credentials:"same-origin"});case 3:if(!(r=e.sent).ok){e.next=13;break}if("json"!==n){e.next=10;break}return e.next=8,r.text();case 8:return i=e.sent,e.abrupt("return",JSON.parse(i));case 10:if("binary"!==n){e.next=12;break}return e.abrupt("return",r.arrayBuffer());case 12:return e.abrupt("return",r.text());case 13:throw new Error("httpRequest error: "+t+" "+r.statusText);case 14:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}();t.httpRequest=s,t.getOrigin=function(e){if(0===e.indexOf("file://"))return"file://";var t=e.match(/^.+\:\/\/[^\/]+/);return Array.isArray(t)&&t.length>0?t[0]:"unknown"}},79670:(e,t,n)=>{"use strict";var r=n(95318);t.__esModule=!0,t.clearTimeout=t.dispose=t.postMessage=t.init=t.messagePromises=t.error=t.timeout=t.initPromise=t.origin=t.instance=void 0;var o,i,a=r(n(87757)),s=r(n(48926)),c=n(94380),u=n(68908),l=n(50153),p=r(n(23634));t.instance=o,t.origin=i;var d=(0,c.create)();t.initPromise=d;var f,E=0;t.timeout=E,t.error=f;var h=0,_={};t.messagePromises=_;var m=function(){var e=(0,s.default)(a.default.mark((function e(n){var r,s,p,f,h;return a.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.initPromise=d=(0,c.create)(),(r=document.getElementById("trezorconnect"))?t.instance=o=r:(t.instance=o=document.createElement("iframe"),o.frameBorder="0",o.width="0px",o.height="0px",o.style.position="absolute",o.style.display="none",o.style.border="0px",o.style.width="0px",o.style.height="0px",o.id="trezorconnect"),"web"===n.env?(p=n.manifest?JSON.stringify(n.manifest):"undefined",f="version="+n.version+"&manifest="+encodeURIComponent(btoa(JSON.stringify(p))),s=n.iframeSrc+"?"+f):s=n.iframeSrc,o.setAttribute("src",s),n.webusb&&o.setAttribute("allow","usb"),t.origin=i=(0,l.getOrigin)(o.src),t.timeout=E=window.setTimeout((function(){d.reject(u.ERRORS.TypedError("Init_IframeTimeout"))}),1e4),h=function(){if(o){try{var e=o.contentWindow.location.origin;if(!e||"null"===e)return void v()}catch(e){}var t;"undefined"!=typeof chrome&&chrome.runtime&&void 0!==chrome.runtime.onConnect&&(chrome.runtime.onConnect.addListener((function(){})),t=chrome.runtime.id),o.contentWindow.postMessage({type:u.IFRAME.INIT,payload:{settings:n,extension:t}},i),o.onload=void 0}else d.reject(u.ERRORS.TypedError("Init_IframeBlocked"))},o.attachEvent?o.attachEvent("onload",h):o.onload=h,document.body&&(document.body.appendChild(o),y()),e.prev=11,e.next=14,d.promise;case 14:e.next=20;break;case 16:throw e.prev=16,e.t0=e.catch(11),o&&(o.parentNode&&o.parentNode.removeChild(o),t.instance=o=null),e.t0;case 20:return e.prev=20,window.clearTimeout(E),t.timeout=E=0,e.finish(20);case 24:case"end":return e.stop()}}),e,null,[[11,16,20,24]])})));return function(t){return e.apply(this,arguments)}}();t.init=m;var y=function(){if(!o)throw u.ERRORS.TypedError("Init_IframeBlocked");var e=o.ownerDocument,t=e.head||e.getElementsByTagName("head")[0],n=document.createElement("style");n.setAttribute("type","text/css"),n.setAttribute("id","TrezorConnectStylesheet"),n.styleSheet?(n.styleSheet.cssText=p.default,t.appendChild(n)):(n.appendChild(document.createTextNode(p.default)),t.append(n))},v=function(){window.clearTimeout(E),t.error=f=u.ERRORS.TypedError("Init_IframeBlocked"),b(),d.reject(f)};t.postMessage=function(e,t){if(void 0===t&&(t=!0),!o)throw u.ERRORS.TypedError("Init_IframeBlocked");if(t){h++,e.id=h,_[h]=(0,c.create)();var n=_[h].promise;return o.contentWindow.postMessage(e,i),n}return o.contentWindow.postMessage(e,i),null};var b=function(){if(o&&o.parentNode)try{o.parentNode.removeChild(o)}catch(e){}t.instance=o=null,t.timeout=E=0};t.dispose=b,t.clearTimeout=function(){window.clearTimeout(E)}},23634:(e,t)=>{"use strict";t.__esModule=!0,t.default=void 0,t.default='.trezorconnect-container{position:fixed!important;display:-webkit-box!important;display:-webkit-flex!important;display:-ms-flexbox!important;display:flex!important;-webkit-box-orient:vertical!important;-webkit-box-direction:normal!important;-webkit-flex-direction:column!important;-ms-flex-direction:column!important;flex-direction:column!important;-webkit-box-align:center!important;-webkit-align-items:center!important;-ms-flex-align:center!important;align-items:center!important;z-index:10000!important;width:100%!important;height:100%!important;top:0!important;left:0!important;background:rgba(0,0,0,.35)!important;overflow:auto!important;padding:20px!important;margin:0!important}.trezorconnect-container .trezorconnect-window{position:relative!important;display:block!important;width:370px!important;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif!important;margin:auto!important;border-radius:3px!important;background-color:#fff!important;text-align:center!important;overflow:hidden!important}.trezorconnect-container .trezorconnect-window .trezorconnect-head{text-align:left;padding:12px 24px!important;display:-webkit-box!important;display:-webkit-flex!important;display:-ms-flexbox!important;display:flex!important;-webkit-box-align:center!important;-webkit-align-items:center!important;-ms-flex-align:center!important;align-items:center!important}.trezorconnect-container .trezorconnect-window .trezorconnect-head .trezorconnect-logo{-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1}.trezorconnect-container .trezorconnect-window .trezorconnect-head .trezorconnect-close{cursor:pointer!important;height:24px!important}.trezorconnect-container .trezorconnect-window .trezorconnect-head .trezorconnect-close svg{fill:#757575;-webkit-transition:fill .3s ease-in-out!important;transition:fill .3s ease-in-out!important}.trezorconnect-container .trezorconnect-window .trezorconnect-head .trezorconnect-close:hover svg{fill:#494949}.trezorconnect-container .trezorconnect-window .trezorconnect-body{padding:24px 24px 32px!important;background:#FBFBFB!important;border-top:1px solid #EBEBEB}.trezorconnect-container .trezorconnect-window .trezorconnect-body h3{color:#505050!important;font-size:16px!important;font-weight:500!important}.trezorconnect-container .trezorconnect-window .trezorconnect-body p{margin:8px 0 24px!important;font-weight:400!important;color:#A9A9A9!important;font-size:12px!important}.trezorconnect-container .trezorconnect-window .trezorconnect-body button{width:100%!important;padding:12px 24px!important;margin:0!important;border-radius:3px!important;font-size:14px!important;font-weight:300!important;cursor:pointer!important;background:#01B757!important;color:#fff!important;border:0!important;-webkit-transition:background-color .3s ease-in-out!important;transition:background-color .3s ease-in-out!important}.trezorconnect-container .trezorconnect-window .trezorconnect-body button:hover{background-color:#00AB51!important}.trezorconnect-container .trezorconnect-window .trezorconnect-body button:active{background-color:#009546!important}/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlucHV0IiwiJHN0ZGluIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWNBLHlCQUNJLFNBQUEsZ0JBQ0EsUUFBQSxzQkFDQSxRQUFBLHVCQUNBLFFBQUEsc0JBRUEsUUFBQSxlQUNBLG1CQUFBLG1CQUNBLHNCQUFBLGlCQUNBLHVCQUFBLGlCQUNBLG1CQUFBLGlCQUNBLGVBQUEsaUJBRUEsa0JBQUEsaUJBQ0Esb0JBQUEsaUJBQ0EsZUFBQSxpQkNmTSxZQUFhLGlCREFyQixRQUFTLGdCQWtCSCxNQUFBLGVBQ0EsT0FBQSxlQUNBLElBQUEsWUFDQSxLQUFBLFlBQ0EsV0FBQSwwQkFDQSxTQUFBLGVBQ0EsUUFBQSxlQUNBLE9BQUEsWUNkUiwrQ0RYRSxTQUFVLG1CQTZCQSxRQUFBLGdCQUNBLE1BQUEsZ0JBQ0EsWUFBQSxjQUFBLG1CQUFBLFdBQUEsT0FBQSxpQkFBQSxNQUFBLHFCQUNBLE9BQUEsZUNmVixjQUFlLGNEakJmLGlCQWlCRSxlQWtCWSxXQUFBLGlCQ2ZkLFNBQVUsaUJEbUJJLG1FQUNBLFdBQUEsS0NoQmQsUUFBUyxLQUFLLGVEeEJkLFFBQVMsc0JBMENTLFFBQUEsdUJBQ0EsUUFBQSxzQkNmbEIsUUFBUyxlRGlCSyxrQkE1QlosaUJBOEJvQixvQkFBQSxpQkNoQmxCLGVBQWdCLGlCRC9CWixZQWlCTixpQkFzQ1EsdUZBQ0EsaUJBQUEsRUNwQlYsYUFBYyxFRHBDVixTQUFVLEVBMkRBLEtBQUEsRUFFQSx3RkNwQmQsT0FBUSxrQkR6Q1IsT0FBUSxlQWlFTSw0RkFDQSxLQUFBLFFBQ0EsbUJBQUEsS0FBQSxJQUFBLHNCQ3BCZCxXQUFZLEtBQUssSUFBSyxzQkR3QlIsa0dBQ0EsS0FBQSxRQUVBLG1FQUNBLFFBQUEsS0FBQSxLQUFBLGVBQ0EsV0FBQSxrQkFDQSxXQUFBLElBQUEsTUFBQSxRQUVBLHNFQUNBLE1BQUEsa0JBQ0EsVUFBQSxlQ3JCZCxZQUFhLGNEd0JLLHFFQ3JCbEIsT0FBUSxJQUFJLEVBQUksZUR3QkYsWUFBQSxjQUNJLE1BQUEsa0JDdEJsQixVQUFXLGVBRWIsMEVBQ0UsTUFBTyxlQUNQLFFBQVMsS0FBSyxlQUNkLE9BQVEsWUFDUixjQUFlLGNBQ2YsVUFBVyxlQUNYLFlBQWEsY0FDYixPQUFRLGtCQUNSLFdBQVksa0JBQ1osTUFBTyxlQUNQLE9BQVEsWUFDUixtQkFBb0IsaUJBQWlCLElBQUssc0JBQzFDLFdBQVksaUJBQWlCLElBQUssc0JBRXBDLGdGQUNFLGlCQUFrQixrQkFFcEIsaUZBQ0UsaUJBQWtCIn0= */'},8875:(e,t,n)=>{"use strict";var r=n(95318);t.__esModule=!0;var o={};t.default=void 0;var i=r(n(59713)),a=n(68908);Object.keys(a).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(o,e)||e in t&&t[e]===a[e]||(t[e]=a[e]))}));var s=n(93250),c=n(27025);function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){(0,i.default)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}Object.keys(c).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(o,e)||e in t&&t[e]===c[e]||(t[e]=c[e]))}));var p={manifest:s.manifest,init:s.init,getSettings:s.getSettings,on:function(e,t){s.eventEmitter.on(e,t)},off:function(e,t){s.eventEmitter.removeListener(e,t)},removeAllListeners:function(){s.eventEmitter.removeAllListeners()},uiResponse:s.uiResponse,blockchainGetAccountBalanceHistory:function(e){return(0,s.call)(l({method:"blockchainGetAccountBalanceHistory"},e))},blockchainGetCurrentFiatRates:function(e){return(0,s.call)(l({method:"blockchainGetCurrentFiatRates"},e))},blockchainGetFiatRatesForTimestamps:function(e){return(0,s.call)(l({method:"blockchainGetFiatRatesForTimestamps"},e))},blockchainDisconnect:function(e){return(0,s.call)(l({method:"blockchainDisconnect"},e))},blockchainEstimateFee:function(e){return(0,s.call)(l({method:"blockchainEstimateFee"},e))},blockchainGetTransactions:function(e){return(0,s.call)(l({method:"blockchainGetTransactions"},e))},blockchainSetCustomBackend:function(e){return(0,s.call)(l({method:"blockchainSetCustomBackend"},e))},blockchainSubscribe:function(e){return(0,s.call)(l({method:"blockchainSubscribe"},e))},blockchainSubscribeFiatRates:function(e){return(0,s.call)(l({method:"blockchainSubscribeFiatRates"},e))},blockchainUnsubscribe:function(e){return(0,s.call)(l({method:"blockchainUnsubscribe"},e))},blockchainUnsubscribeFiatRates:function(e){return(0,s.call)(l({method:"blockchainUnsubscribeFiatRates"},e))},customMessage:function(e){return(0,s.customMessage)(e)},requestLogin:function(e){return(0,s.requestLogin)(e)},cardanoGetAddress:function(e){var t=s.eventEmitter.listenerCount(a.UI.ADDRESS_VALIDATION)>0;return(0,s.call)(l(l({method:"cardanoGetAddress"},e),{},{useEventListener:t}))},cardanoGetNativeScriptHash:function(e){return(0,s.call)(l({method:"cardanoGetNativeScriptHash"},e))},cardanoGetPublicKey:function(e){return(0,s.call)(l({method:"cardanoGetPublicKey"},e))},cardanoSignTransaction:function(e){return(0,s.call)(l({method:"cardanoSignTransaction"},e))},cipherKeyValue:function(e){return(0,s.call)(l({method:"cipherKeyValue"},e))},composeTransaction:function(e){return(0,s.call)(l({method:"composeTransaction"},e))},debugLinkDecision:function(e){return(0,s.call)(l({method:"debugLinkDecision"},e))},debugLinkGetState:function(e){return(0,s.call)(l({method:"debugLinkGetState"},e))},ethereumGetAddress:function(e){var t=s.eventEmitter.listenerCount(a.UI.ADDRESS_VALIDATION)>0;return(0,s.call)(l(l({method:"ethereumGetAddress"},e),{},{useEventListener:t}))},ethereumGetPublicKey:function(e){return(0,s.call)(l({method:"ethereumGetPublicKey"},e))},ethereumSignMessage:function(e){return(0,s.call)(l({method:"ethereumSignMessage"},e))},ethereumSignTransaction:function(e){return(0,s.call)(l({method:"ethereumSignTransaction"},e))},ethereumVerifyMessage:function(e){return(0,s.call)(l({method:"ethereumVerifyMessage"},e))},getAccountInfo:function(e){return(0,s.call)(l({method:"getAccountInfo"},e))},getAddress:function(e){var t=s.eventEmitter.listenerCount(a.UI.ADDRESS_VALIDATION)>0;return(0,s.call)(l(l({method:"getAddress"},e),{},{useEventListener:t}))},getDeviceState:function(e){return(0,s.call)(l({method:"getDeviceState"},e))},getFeatures:function(e){return(0,s.call)(l({method:"getFeatures"},e))},getPublicKey:function(e){return(0,s.call)(l({method:"getPublicKey"},e))},liskGetAddress:function(){return(0,s.call)({method:"liskDeprecated"})},liskGetPublicKey:function(){return(0,s.call)({method:"liskDeprecated"})},liskSignMessage:function(){return(0,s.call)({method:"liskDeprecated"})},liskSignTransaction:function(){return(0,s.call)({method:"liskDeprecated"})},liskVerifyMessage:function(){return(0,s.call)({method:"liskDeprecated"})},nemGetAddress:function(e){var t=s.eventEmitter.listenerCount(a.UI.ADDRESS_VALIDATION)>0;return(0,s.call)(l(l({method:"nemGetAddress"},e),{},{useEventListener:t}))},nemSignTransaction:function(e){return(0,s.call)(l({method:"nemSignTransaction"},e))},pushTransaction:function(e){return(0,s.call)(l({method:"pushTransaction"},e))},rippleGetAddress:function(e){var t=s.eventEmitter.listenerCount(a.UI.ADDRESS_VALIDATION)>0;return(0,s.call)(l(l({method:"rippleGetAddress"},e),{},{useEventListener:t}))},rippleSignTransaction:function(e){return(0,s.call)(l({method:"rippleSignTransaction"},e))},signMessage:function(e){return(0,s.call)(l({method:"signMessage"},e))},signTransaction:function(e){return(0,s.call)(l({method:"signTransaction"},e))},stellarGetAddress:function(e){var t=s.eventEmitter.listenerCount(a.UI.ADDRESS_VALIDATION)>0;return(0,s.call)(l(l({method:"stellarGetAddress"},e),{},{useEventListener:t}))},stellarSignTransaction:function(e){return(0,s.call)(l({method:"stellarSignTransaction"},e))},tezosGetAddress:function(e){var t=s.eventEmitter.listenerCount(a.UI.ADDRESS_VALIDATION)>0;return(0,s.call)(l(l({method:"tezosGetAddress"},e),{},{useEventListener:t}))},tezosGetPublicKey:function(e){return(0,s.call)(l({method:"tezosGetPublicKey"},e))},tezosSignTransaction:function(e){return(0,s.call)(l({method:"tezosSignTransaction"},e))},eosGetPublicKey:function(e){return(0,s.call)(l({method:"eosGetPublicKey"},e))},eosSignTransaction:function(e){return(0,s.call)(l({method:"eosSignTransaction"},e))},binanceGetAddress:function(e){var t=s.eventEmitter.listenerCount(a.UI.ADDRESS_VALIDATION)>0;return(0,s.call)(l(l({method:"binanceGetAddress"},e),{},{useEventListener:t}))},binanceGetPublicKey:function(e){return(0,s.call)(l({method:"binanceGetPublicKey"},e))},binanceSignTransaction:function(e){return(0,s.call)(l({method:"binanceSignTransaction"},e))},verifyMessage:function(e){return(0,s.call)(l({method:"verifyMessage"},e))},resetDevice:function(e){return(0,s.call)(l({method:"resetDevice"},e))},wipeDevice:function(e){return(0,s.call)(l({method:"wipeDevice"},e))},applyFlags:function(e){return(0,s.call)(l({method:"applyFlags"},e))},applySettings:function(e){return(0,s.call)(l({method:"applySettings"},e))},backupDevice:function(e){return(0,s.call)(l({method:"backupDevice"},e))},changePin:function(e){return(0,s.call)(l({method:"changePin"},e))},firmwareUpdate:function(e){return(0,s.call)(l({method:"firmwareUpdate"},e))},recoveryDevice:function(e){return(0,s.call)(l({method:"recoveryDevice"},e))},getCoinInfo:function(e){return(0,s.call)(l({method:"getCoinInfo"},e))},rebootToBootloader:function(e){return(0,s.call)(l({method:"rebootToBootloader"},e))},dispose:s.dispose,cancel:s.cancel,renderWebUSBButton:s.renderWebUSBButton,disableWebUSB:s.disableWebUSB};t.default=p},59345:(e,t,n)=>{"use strict";var r=n(95318);t.__esModule=!0,t.BlockchainMessage=t.ResponseMessage=t.TransportMessage=t.DeviceMessage=t.UiMessage=void 0;var o=r(n(59713)),i=n(68908);function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){(0,o.default)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}t.UiMessage=function(e,t){return{event:i.UI_EVENT,type:e,payload:t}},t.DeviceMessage=function(e,t){return{event:i.DEVICE_EVENT,type:e,payload:t}},t.TransportMessage=function(e,t){return{event:i.TRANSPORT_EVENT,type:e,payload:t.error?s(s({},t),{},{error:t.error.message,code:t.error.code}):t}},t.ResponseMessage=function(e,t,n){return void 0===n&&(n=null),{event:i.RESPONSE_EVENT,type:i.RESPONSE_EVENT,id:e,success:t,payload:t?n:{error:n.error.message,code:n.error.code}}},t.BlockchainMessage=function(e,t){return{event:i.BLOCKCHAIN_EVENT,type:e,payload:t}}},9048:(e,t)=>{"use strict";t.__esModule=!0,t.errorMessage=t.parseMessage=void 0,t.parseMessage=function(e){var t={event:e.event,type:e.type,payload:e.payload};return"number"==typeof e.id&&(t.id=e.id),"boolean"==typeof e.success&&(t.success=e.success),t},t.errorMessage=function(e){return{success:!1,payload:{error:e.message,code:e.code}}}},67625:(e,t,n)=>{"use strict";var r=n(95318);t.__esModule=!0,t.default=void 0;var o=r(n(87757)),i=r(n(48926)),a=r(n(81506)),s=r(n(85354)),c=r(n(59713)),u=r(n(17187)),l=m(n(98083)),p=m(n(7589)),d=m(n(78334)),f=n(77160),E=n(50153),h=n(94380);function _(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(_=function(e){return e?n:t})(e)}function m(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var n=_(t);if(n&&n.has(e))return n.get(e);var r={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if("default"!==i&&Object.prototype.hasOwnProperty.call(e,i)){var a=o?Object.getOwnPropertyDescriptor(e,i):null;a&&(a.get||a.set)?Object.defineProperty(r,i,a):r[i]=e[i]}return r.default=e,n&&n.set(e,r),r}var y=function(e){function t(t){var n;return n=e.call(this)||this,(0,c.default)((0,a.default)(n),"requestTimeout",0),(0,c.default)((0,a.default)(n),"closeInterval",0),(0,c.default)((0,a.default)(n),"extensionTabId",0),n.settings=t,n.origin=(0,E.getOrigin)(t.popupSrc),n.handleMessage=n.handleMessage.bind((0,a.default)(n)),n.iframeHandshake=(0,h.create)(p.LOADED),"webextension"===n.settings.env&&(n.handleExtensionConnect=n.handleExtensionConnect.bind((0,a.default)(n)),n.handleExtensionMessage=n.handleExtensionMessage.bind((0,a.default)(n)),chrome.runtime.onConnect.addListener(n.handleExtensionConnect)),window.addEventListener("message",n.handleMessage,!1),n}(0,s.default)(t,e);var n=t.prototype;return n.request=function(e){var t=this;if(void 0===e&&(e=!1),this.locked)this._window&&("webextension"===this.settings.env?chrome.tabs.update(this._window.id,{active:!0}):this._window.focus());else{var n=this.open.bind(this);if(this.locked=!0,this.settings.supportedBrowser){var r=e||"webextension"===this.settings.env?1:850;this.requestTimeout=window.setTimeout((function(){t.requestTimeout=0,n(e)}),r)}else n()}},n.cancel=function(){this.close()},n.unlock=function(){this.locked=!1},n.open=function(e){var t=this,n=this.settings.popupSrc;this.settings.supportedBrowser?(this.popupPromise=(0,h.create)(l.LOADED),this.openWrapper(e?n+"#loading":n),this.closeInterval=window.setInterval((function(){t._window&&("webextension"===t.settings.env?chrome.tabs.get(t._window.id,(function(e){e||(t.close(),t.emit(l.CLOSED))})):t._window.closed&&(t.close(),t.emit(l.CLOSED)))}),500),this.openTimeout=window.setTimeout((function(){t.close(),(0,f.showPopupRequest)(t.open.bind(t),(function(){t.emit(l.CLOSED)}))}),3e3)):this.openWrapper(n+"#unsupported")},n.openWrapper=function(e){var t=this;"webextension"===this.settings.env?chrome.windows.getCurrent(null,(function(n){"normal"!==n.type?chrome.windows.create({url:e},(function(e){chrome.tabs.query({windowId:e.id,active:!0},(function(e){t._window=e[0]}))})):chrome.tabs.query({currentWindow:!0,active:!0},(function(n){t.extensionTabId=n[0].id,chrome.tabs.create({url:e,index:n[0].index+1},(function(e){t._window=e}))}))})):"electron"===this.settings.env?this._window=window.open(e,"modal"):(this._window=window.open("","_blank"),this._window&&(this._window.location.href=e))},n.handleExtensionConnect=function(e){"trezor-connect"===e.name&&(!this._window||this._window&&this._window.id!==e.sender.tab.id?e.disconnect():(window.clearTimeout(this.openTimeout),this.extensionPort=e,this.extensionPort.onMessage.addListener(this.handleExtensionMessage)))},n.handleExtensionMessage=function(e){var t=this;if(this.extensionPort){var n=this.extensionPort,r=e.data;if(r&&"object"==typeof r)if(r.type===l.ERROR){var o=r.payload&&"string"==typeof r.payload.error?r.payload.error:null;this.emit(l.CLOSED,o?"Popup error: "+o:null),this.close()}else r.type===l.LOADED?(this.popupPromise&&this.popupPromise.resolve(),this.iframeHandshake.promise.then((function(e){n.postMessage({type:l.INIT,payload:{settings:t.settings,useBroadcastChannel:e}})}))):r.type===l.EXTENSION_USB_PERMISSIONS?chrome.tabs.query({currentWindow:!0,active:!0},(function(e){chrome.tabs.create({url:"trezor-usb-permissions.html",index:e[0].index+1},(function(e){}))})):r.type===l.CLOSE_WINDOW&&(this.emit(l.CLOSED),this.close())}},n.handleMessage=function(e){var t=this,n=e.data;if((0,E.getOrigin)(e.origin)===this.origin&&n&&"object"==typeof n)if(n.type===p.LOADED){var r=!(!n.payload||"boolean"!=typeof n.payload.useBroadcastChannel)&&n.payload.useBroadcastChannel;this.iframeHandshake.resolve(r)}else if(n.type===l.BOOTSTRAP)window.clearTimeout(this.openTimeout);else if(n.type===l.ERROR&&this._window){var o=n.payload&&"string"==typeof n.payload.error?n.payload.error:null;this.emit(l.CLOSED,o?"Popup error: "+o:null),this.close()}else n.type===l.LOADED?(this.popupPromise&&this.popupPromise.resolve(),this.iframeHandshake.promise.then((function(e){t._window.postMessage({type:l.INIT,payload:{settings:t.settings,useBroadcastChannel:e}},t.origin)}))):n.type!==l.CANCEL_POPUP_REQUEST&&n.type!==d.CLOSE_UI_WINDOW||this.close()},n.close=function(){this.locked=!1,this.popupPromise=void 0,this.requestTimeout&&(window.clearTimeout(this.requestTimeout),this.requestTimeout=0),this.openTimeout&&(window.clearTimeout(this.openTimeout),this.openTimeout=0),this.closeInterval&&(window.clearInterval(this.closeInterval),this.closeInterval=0),this.extensionPort&&(this.extensionPort.disconnect(),this.extensionPort=null),this.extensionTabId&&(chrome.tabs.update(this.extensionTabId,{active:!0}),this.extensionTabId=0),this._window&&("webextension"===this.settings.env?(chrome.runtime.lastError,chrome.tabs.remove(this._window.id,(function(){chrome.runtime.lastError}))):this._window.close(),this._window=null)},n.postMessage=function(){var e=(0,i.default)(o.default.mark((function e(t){var n=this;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this._window||t.type===d.REQUEST_UI_WINDOW||!this.openTimeout){e.next=4;break}return this.close(),(0,f.showPopupRequest)(this.open.bind(this),(function(){n.emit(l.CLOSED)})),e.abrupt("return");case 4:if(!this.popupPromise){e.next=7;break}return e.next=7,this.popupPromise.promise;case 7:this._window&&this._window.postMessage(t,this.origin);case 8:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}(),t}(u.default);t.default=y},77160:(e,t)=>{"use strict";t.__esModule=!0,t.showPopupRequest=void 0;var n="TrezorConnectInteractionLayer";t.showPopupRequest=function(e,t){if(!document.getElementById(n)){var r=document.createElement("div");r.id=n,r.className="trezorconnect-container",r.innerHTML='\n    <div class="trezorconnect-container" id="TrezorConnectInteractionLayer">\n        <div class="trezorconnect-window">\n            <div class="trezorconnect-head">\n                <svg class="trezorconnect-logo" x="0px" y="0px" viewBox="0 0 163.7 41.9" width="78px" height="20px" preserveAspectRatio="xMinYMin meet">\n                    <polygon points="101.1,12.8 118.2,12.8 118.2,17.3 108.9,29.9 118.2,29.9 118.2,35.2 101.1,35.2 101.1,30.7 110.4,18.1 101.1,18.1"/>\n                    <path d="M158.8,26.9c2.1-0.8,4.3-2.9,4.3-6.6c0-4.5-3.1-7.4-7.7-7.4h-10.5v22.3h5.8v-7.5h2.2l4.1,7.5h6.7L158.8,26.9z M154.7,22.5 h-4V18h4c1.5,0,2.5,0.9,2.5,2.2C157.2,21.6,156.2,22.5,154.7,22.5z"/>\n                    <path d="M130.8,12.5c-6.8,0-11.6,4.9-11.6,11.5s4.9,11.5,11.6,11.5s11.7-4.9,11.7-11.5S137.6,12.5,130.8,12.5z M130.8,30.3 c-3.4,0-5.7-2.6-5.7-6.3c0-3.8,2.3-6.3,5.7-6.3c3.4,0,5.8,2.6,5.8,6.3C136.6,27.7,134.2,30.3,130.8,30.3z"/>\n                    <polygon points="82.1,12.8 98.3,12.8 98.3,18 87.9,18 87.9,21.3 98,21.3 98,26.4 87.9,26.4 87.9,30 98.3,30 98.3,35.2 82.1,35.2 "/>\n                    <path d="M24.6,9.7C24.6,4.4,20,0,14.4,0S4.2,4.4,4.2,9.7v3.1H0v22.3h0l14.4,6.7l14.4-6.7h0V12.9h-4.2V9.7z M9.4,9.7 c0-2.5,2.2-4.5,5-4.5s5,2,5,4.5v3.1H9.4V9.7z M23,31.5l-8.6,4l-8.6-4V18.1H23V31.5z"/>\n                    <path d="M79.4,20.3c0-4.5-3.1-7.4-7.7-7.4H61.2v22.3H67v-7.5h2.2l4.1,7.5H80l-4.9-8.3C77.2,26.1,79.4,24,79.4,20.3z M71,22.5h-4V18 h4c1.5,0,2.5,0.9,2.5,2.2C73.5,21.6,72.5,22.5,71,22.5z"/>\n                    <polygon points="40.5,12.8 58.6,12.8 58.6,18.1 52.4,18.1 52.4,35.2 46.6,35.2 46.6,18.1 40.5,18.1 "/>\n                </svg>\n                <div class="trezorconnect-close">\n                    <svg x="0px" y="0px" viewBox="24 24 60 60" width="24px" height="24px" preserveAspectRatio="xMinYMin meet">\n                        <polygon class="st0" points="40,67.9 42.1,70 55,57.1 67.9,70 70,67.9 57.1,55 70,42.1 67.9,40 55,52.9 42.1,40 40,42.1 52.9,55 "/>\n                    </svg>\n                </div>\n            </div>\n            <div class="trezorconnect-body">\n                <h3>Popup was blocked</h3>\n                <p>Please click to “Continue” to open popup manually</p>\n                <button class="trezorconnect-open">Continue</button>\n            </div>\n        </div>\n    </div>\n',document.body&&document.body.appendChild(r),r.getElementsByClassName("trezorconnect-open")[0].onclick=function(){e(),document.body&&document.body.removeChild(r)},r.getElementsByClassName("trezorconnect-close")[0].onclick=function(){t(),document.body&&document.body.removeChild(r)}}}},10130:()=>{},48827:(e,t,n)=>{"use strict";function r(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(r=function(e){return e?n:t})(e)}function o(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var n=r(t);if(n&&n.has(e))return n.get(e);var o={},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if("default"!==a&&Object.prototype.hasOwnProperty.call(e,a)){var s=i?Object.getOwnPropertyDescriptor(e,a):null;s&&(s.get||s.set)?Object.defineProperty(o,a,s):o[a]=e[a]}return o.default=e,n&&n.set(e,o),o}o(n(68908)),o(n(68569)),o(n(52026)),o(n(56768)),o(n(36095)),o(n(10130)),o(n(88570)),o(n(60031)),o(n(39206)),o(n(45007)),o(n(90705)),o(n(40767)),o(n(73897)),o(n(92878)),o(n(54628)),o(n(59116)),o(n(65361)),o(n(49342)),o(n(8962))},8962:(e,t,n)=>{"use strict";n(68908)},94511:()=>{},49342:(e,t,n)=>{"use strict";n(68908)},27025:(e,t,n)=>{"use strict";t.__esModule=!0;var r=n(48827);Object.keys(r).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===r[e]||(t[e]=r[e]))}));var o=n(49342);Object.keys(o).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===o[e]||(t[e]=o[e]))}));var i=n(65361);Object.keys(i).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===i[e]||(t[e]=i[e]))}));var a=n(68569);Object.keys(a).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===a[e]||(t[e]=a[e]))}));var s=n(10130);Object.keys(s).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===s[e]||(t[e]=s[e]))}));var c=n(52026);Object.keys(c).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===c[e]||(t[e]=c[e]))}));var u=n(56768);Object.keys(u).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===u[e]||(t[e]=u[e]))}));var l=n(88570);Object.keys(l).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===l[e]||(t[e]=l[e]))}));var p=n(60031);Object.keys(p).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===p[e]||(t[e]=p[e]))}));var d=n(39206);Object.keys(d).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===d[e]||(t[e]=d[e]))}));var f=n(45007);Object.keys(f).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===f[e]||(t[e]=f[e]))}));var E=n(90705);Object.keys(E).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===E[e]||(t[e]=E[e]))}));var h=n(40767);Object.keys(h).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===h[e]||(t[e]=h[e]))}));var _=n(73897);Object.keys(_).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===_[e]||(t[e]=_[e]))}));var m=n(92878);Object.keys(m).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===m[e]||(t[e]=m[e]))}));var y=n(54628);Object.keys(y).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===y[e]||(t[e]=y[e]))}));var v=n(59116);Object.keys(v).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===v[e]||(t[e]=v[e]))}));var b=n(8962);Object.keys(b).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===b[e]||(t[e]=b[e]))}));var T=n(94511);Object.keys(T).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===T[e]||(t[e]=T[e]))}))},65361:()=>{},60031:()=>{},88570:()=>{},39206:(e,t,n)=>{"use strict";t.__esModule=!0,t.CardanoTxWitnessType=t.CardanoTxSigningMode=t.CardanoPoolRelayType=t.CardanoNativeScriptHashDisplayFormat=t.CardanoNativeScriptType=t.CardanoCertificateType=t.CardanoAddressType=void 0;var r=n(36095);t.CardanoAddressType=r.Enum_CardanoAddressType,t.CardanoCertificateType=r.Enum_CardanoCertificateType,t.CardanoNativeScriptType=r.Enum_CardanoNativeScriptType,t.CardanoNativeScriptHashDisplayFormat=r.Enum_CardanoNativeScriptHashDisplayFormat,t.CardanoPoolRelayType=r.Enum_CardanoPoolRelayType,t.CardanoTxSigningMode=r.Enum_CardanoTxSigningMode,t.CardanoTxWitnessType=r.Enum_CardanoTxWitnessType},45007:()=>{},90705:()=>{},40767:()=>{},73897:()=>{},92878:()=>{},54628:()=>{},59116:()=>{},68569:()=>{},52026:(e,t,n)=>{"use strict";n(68908)},56768:()=>{},36095:(e,t)=>{"use strict";t.__esModule=!0,t.Enum_TezosBallotType=t.Enum_TezosContractType=t.Enum_StellarSignerType=t.Enum_StellarMemoType=t.Enum_StellarAssetType=t.Enum_NEMImportanceTransferMode=t.Enum_NEMModificationType=t.Enum_NEMSupplyChangeType=t.Enum_NEMMosaicLevy=t.Enum_WordRequestType=t.Enum_RecoveryDeviceType=t.Enum_SdProtectOperationType=t.Enum_Capability=t.Enum_SafetyCheckLevel=t.Enum_EthereumDataType=t.Enum_BackupType=t.Enum_DebugSwipeDirection=t.Enum_PinMatrixRequestType=t.Enum_ButtonRequestType=t.Enum_FailureType=t.Enum_CardanoTxWitnessType=t.Enum_CardanoTxSigningMode=t.Enum_CardanoTxAuxiliaryDataSupplementType=t.Enum_CardanoPoolRelayType=t.Enum_CardanoCertificateType=t.Enum_CardanoNativeScriptHashDisplayFormat=t.Enum_CardanoNativeScriptType=t.Enum_CardanoAddressType=t.Enum_CardanoDerivationType=t.Enum_RequestType=t.Enum_AmountUnit=t.Enum_DecredStakingSpendType=t.Enum_OutputScriptType=t.Enum_InputScriptType=t.Enum_BinanceTimeInForce=t.Enum_BinanceOrderSide=t.Enum_BinanceOrderType=void 0;var n=Object.freeze({OT_UNKNOWN:0,MARKET:1,LIMIT:2,OT_RESERVED:3});t.Enum_BinanceOrderType=n;var r=Object.freeze({SIDE_UNKNOWN:0,BUY:1,SELL:2});t.Enum_BinanceOrderSide=r;var o=Object.freeze({TIF_UNKNOWN:0,GTE:1,TIF_RESERVED:2,IOC:3});t.Enum_BinanceTimeInForce=o;var i=Object.freeze({SPENDADDRESS:0,SPENDMULTISIG:1,EXTERNAL:2,SPENDWITNESS:3,SPENDP2SHWITNESS:4,SPENDTAPROOT:5});t.Enum_InputScriptType=i;var a=Object.freeze({PAYTOADDRESS:0,PAYTOSCRIPTHASH:1,PAYTOMULTISIG:2,PAYTOOPRETURN:3,PAYTOWITNESS:4,PAYTOP2SHWITNESS:5,PAYTOTAPROOT:6});t.Enum_OutputScriptType=a;var s=Object.freeze({SSGen:0,SSRTX:1});t.Enum_DecredStakingSpendType=s;var c=Object.freeze({BITCOIN:0,MILLIBITCOIN:1,MICROBITCOIN:2,SATOSHI:3});t.Enum_AmountUnit=c;var u=Object.freeze({TXINPUT:0,TXOUTPUT:1,TXMETA:2,TXFINISHED:3,TXEXTRADATA:4,TXORIGINPUT:5,TXORIGOUTPUT:6});t.Enum_RequestType=u;var l=Object.freeze({LEDGER:0,ICARUS:1,ICARUS_TREZOR:2});t.Enum_CardanoDerivationType=l;var p=Object.freeze({BASE:0,BASE_SCRIPT_KEY:1,BASE_KEY_SCRIPT:2,BASE_SCRIPT_SCRIPT:3,POINTER:4,POINTER_SCRIPT:5,ENTERPRISE:6,ENTERPRISE_SCRIPT:7,BYRON:8,REWARD:14,REWARD_SCRIPT:15});t.Enum_CardanoAddressType=p;var d=Object.freeze({PUB_KEY:0,ALL:1,ANY:2,N_OF_K:3,INVALID_BEFORE:4,INVALID_HEREAFTER:5});t.Enum_CardanoNativeScriptType=d;var f=Object.freeze({HIDE:0,BECH32:1,POLICY_ID:2});t.Enum_CardanoNativeScriptHashDisplayFormat=f;var E=Object.freeze({STAKE_REGISTRATION:0,STAKE_DEREGISTRATION:1,STAKE_DELEGATION:2,STAKE_POOL_REGISTRATION:3});t.Enum_CardanoCertificateType=E;var h=Object.freeze({SINGLE_HOST_IP:0,SINGLE_HOST_NAME:1,MULTIPLE_HOST_NAME:2});t.Enum_CardanoPoolRelayType=h;var _=Object.freeze({NONE:0,CATALYST_REGISTRATION_SIGNATURE:1});t.Enum_CardanoTxAuxiliaryDataSupplementType=_;var m=Object.freeze({ORDINARY_TRANSACTION:0,POOL_REGISTRATION_AS_OWNER:1,MULTISIG_TRANSACTION:2});t.Enum_CardanoTxSigningMode=m;var y=Object.freeze({BYRON_WITNESS:0,SHELLEY_WITNESS:1});t.Enum_CardanoTxWitnessType=y;var v=Object.freeze({Failure_UnexpectedMessage:1,Failure_ButtonExpected:2,Failure_DataError:3,Failure_ActionCancelled:4,Failure_PinExpected:5,Failure_PinCancelled:6,Failure_PinInvalid:7,Failure_InvalidSignature:8,Failure_ProcessError:9,Failure_NotEnoughFunds:10,Failure_NotInitialized:11,Failure_PinMismatch:12,Failure_WipeCodeMismatch:13,Failure_InvalidSession:14,Failure_FirmwareError:99});t.Enum_FailureType=v;var b=Object.freeze({ButtonRequest_Other:1,ButtonRequest_FeeOverThreshold:2,ButtonRequest_ConfirmOutput:3,ButtonRequest_ResetDevice:4,ButtonRequest_ConfirmWord:5,ButtonRequest_WipeDevice:6,ButtonRequest_ProtectCall:7,ButtonRequest_SignTx:8,ButtonRequest_FirmwareCheck:9,ButtonRequest_Address:10,ButtonRequest_PublicKey:11,ButtonRequest_MnemonicWordCount:12,ButtonRequest_MnemonicInput:13,_Deprecated_ButtonRequest_PassphraseType:14,ButtonRequest_UnknownDerivationPath:15,ButtonRequest_RecoveryHomepage:16,ButtonRequest_Success:17,ButtonRequest_Warning:18,ButtonRequest_PassphraseEntry:19,ButtonRequest_PinEntry:20});t.Enum_ButtonRequestType=b;var T=Object.freeze({PinMatrixRequestType_Current:1,PinMatrixRequestType_NewFirst:2,PinMatrixRequestType_NewSecond:3,PinMatrixRequestType_WipeCodeFirst:4,PinMatrixRequestType_WipeCodeSecond:5});t.Enum_PinMatrixRequestType=T;var S=Object.freeze({UP:0,DOWN:1,LEFT:2,RIGHT:3});t.Enum_DebugSwipeDirection=S;var O=Object.freeze({Bip39:0,Slip39_Basic:1,Slip39_Advanced:2});t.Enum_BackupType=O;var R=Object.freeze({UINT:1,INT:2,BYTES:3,STRING:4,BOOL:5,ADDRESS:6,ARRAY:7,STRUCT:8});t.Enum_EthereumDataType=R;var g=Object.freeze({Strict:0,PromptAlways:1,PromptTemporarily:2});t.Enum_SafetyCheckLevel=g;var I=Object.freeze({Capability_Bitcoin:1,Capability_Bitcoin_like:2,Capability_Binance:3,Capability_Cardano:4,Capability_Crypto:5,Capability_EOS:6,Capability_Ethereum:7,Capability_Lisk:8,Capability_Monero:9,Capability_NEM:10,Capability_Ripple:11,Capability_Stellar:12,Capability_Tezos:13,Capability_U2F:14,Capability_Shamir:15,Capability_ShamirGroups:16,Capability_PassphraseEntry:17});t.Enum_Capability=I;var w=Object.freeze({DISABLE:0,ENABLE:1,REFRESH:2});t.Enum_SdProtectOperationType=w;var A=Object.freeze({RecoveryDeviceType_ScrambledWords:0,RecoveryDeviceType_Matrix:1});t.Enum_RecoveryDeviceType=A;var N=Object.freeze({WordRequestType_Plain:0,WordRequestType_Matrix9:1,WordRequestType_Matrix6:2});t.Enum_WordRequestType=N;var C=Object.freeze({MosaicLevy_Absolute:1,MosaicLevy_Percentile:2});t.Enum_NEMMosaicLevy=C;var x=Object.freeze({SupplyChange_Increase:1,SupplyChange_Decrease:2});t.Enum_NEMSupplyChangeType=x;var P=Object.freeze({CosignatoryModification_Add:1,CosignatoryModification_Delete:2});t.Enum_NEMModificationType=P;var L=Object.freeze({ImportanceTransfer_Activate:1,ImportanceTransfer_Deactivate:2});t.Enum_NEMImportanceTransferMode=L;var U=Object.freeze({NATIVE:0,ALPHANUM4:1,ALPHANUM12:2});t.Enum_StellarAssetType=U;var M=Object.freeze({NONE:0,TEXT:1,ID:2,HASH:3,RETURN:4});t.Enum_StellarMemoType=M;var B=Object.freeze({ACCOUNT:0,PRE_AUTH:1,HASH:2});t.Enum_StellarSignerType=B;var D=Object.freeze({Implicit:0,Originated:1});t.Enum_TezosContractType=D;var k=Object.freeze({Yay:0,Nay:1,Pass:2});t.Enum_TezosBallotType=k},62383:(e,t)=>{"use strict";t.__esModule=!0,t.getLog=t.enableLogByPrefix=t.enableLog=t.initLog=void 0;var n={DescriptorStream:"color: #77ab59",DeviceList:"color: #36802d",Device:"color: #bada55",Core:"color: #c9df8a",IFrame:"color: #FFFFFF; background: #f4a742;",Popup:"color: #f48a00"},r=function(){function e(e,t){this.prefix=e,this.enabled=t,this.messages=[],this.css=n[e]||"color: #000000; background: #FFFFFF;"}var t=e.prototype;return t.addMessage=function(e,t){for(var n=arguments.length,r=new Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];this.messages.push({level:e,prefix:t,message:r,timestamp:(new Date).getTime()}),this.messages.length>100&&this.messages.shift()},t.log=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r;this.addMessage.apply(this,["log",this.prefix].concat(t)),this.enabled&&(r=console).log.apply(r,[this.prefix].concat(t))},t.error=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r;this.addMessage.apply(this,["error",this.prefix].concat(t)),this.enabled&&(r=console).error.apply(r,[this.prefix].concat(t))},t.warn=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r;this.addMessage.apply(this,["warn",this.prefix].concat(t)),this.enabled&&(r=console).warn.apply(r,[this.prefix].concat(t))},t.debug=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r;this.addMessage.apply(this,["debug",this.prefix].concat(t)),this.enabled&&(r=console).log.apply(r,["%c"+this.prefix,this.css].concat(t))},e}(),o={};t.initLog=function(e,t){var n=new r(e,!!t);return o[e]=n,n},t.enableLog=function(e){Object.keys(o).forEach((function(t){o[t].enabled=e}))},t.enableLogByPrefix=function(e,t){o[e]&&(o[e].enabled=t)},t.getLog=function(){var e=[];return Object.keys(o).forEach((function(t){e=e.concat(o[t].messages)})),e.sort((function(e,t){return e.timestamp-t.timestamp})),e}},94380:(e,t,n)=>{"use strict";var r=n(95318);t.__esModule=!0,t.create=function(e,t){var n,r=function(e){},a=function(e){},s=new Promise(function(){var t=(0,i.default)(o.default.mark((function t(i,s){return o.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r=i,a=s,"function"!=typeof e){t.next=11;break}return t.prev=3,t.next=6,e();case 6:t.next=11;break;case 8:t.prev=8,t.t0=t.catch(3),s(t.t0);case 11:"string"==typeof e&&(n=e);case 12:case"end":return t.stop()}}),t,null,[[3,8]])})));return function(e,n){return t.apply(this,arguments)}}());return{id:n,device:t,resolve:r,reject:a,promise:s}},t.createAsync=function(e){var t=function(e){},n=function(e){},r=new Promise((function(e,r){t=e,n=r})),a=function(){var t=(0,i.default)(o.default.mark((function t(){return o.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e();case 2:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}();return{resolve:t,reject:n,promise:r,run:function(){return a(),r}}},t.resolveTimeoutPromise=function(e,t){return new Promise((function(n){setTimeout((function(){n(t)}),e)}))},t.rejectTimeoutPromise=void 0;var o=r(n(87757)),i=r(n(48926));t.rejectTimeoutPromise=function(e,t){return new Promise((function(n,r){setTimeout((function(){r(t)}),e)}))}},23273:(e,t)=>{"use strict";t.__esModule=!0,t.default=void 0;t.default=function(e,t,n){var r=e||".trezor-webusb-button",o=document.querySelectorAll(r),i=t+"?"+Date.now();o.forEach((function(e){if(e.getElementsByTagName("iframe").length<1){var t=e.getBoundingClientRect(),r=document.createElement("iframe");r.frameBorder="0",r.width=Math.round(t.width)+"px",r.height=Math.round(t.height)+"px",r.style.position="absolute",r.style.top="0px",r.style.left="0px",r.style.zIndex="1",r.setAttribute("allow","usb"),r.setAttribute("scrolling","no"),r.onload=function(){r.contentWindow.postMessage({},n)},r.src=i,e.append(r)}}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
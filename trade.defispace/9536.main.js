(self.webpackChunkmy_swap=self.webpackChunkmy_swap||[]).push([[9536],{50584:e=>{e.exports={100:"Continue",101:"Switching Protocols",102:"Processing",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",208:"Already Reported",226:"IM Used",300:"Multiple Choices",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",308:"Permanent Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Payload Too Large",414:"URI Too Long",415:"Unsupported Media Type",416:"Range Not Satisfiable",417:"Expectation Failed",418:"I'm a teapot",421:"Misdirected Request",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",425:"Unordered Collection",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",451:"Unavailable For Legal Reasons",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"HTTP Version Not Supported",506:"Variant Also Negotiates",507:"Insufficient Storage",508:"Loop Detected",509:"Bandwidth Limit Exceeded",510:"Not Extended",511:"Network Authentication Required"}},37866:(e,t)=>{!function(){"use strict";function e(t,r,s,o){return this instanceof e?(this.domain=t||void 0,this.path=r||"/",this.secure=!!s,this.script=!!o,this):new e(t,r,s,o)}function r(e,t,s){return e instanceof r?e:this instanceof r?(this.name=null,this.value=null,this.expiration_date=1/0,this.path=String(s||"/"),this.explicit_path=!1,this.domain=t||null,this.explicit_domain=!1,this.secure=!1,this.noscript=!1,e&&this.parse(e,t,s),this):new r(e,t,s)}e.All=Object.freeze(Object.create(null)),t.CookieAccessInfo=e,t.Cookie=r,r.prototype.toString=function(){var e=[this.name+"="+this.value];return this.expiration_date!==1/0&&e.push("expires="+new Date(this.expiration_date).toGMTString()),this.domain&&e.push("domain="+this.domain),this.path&&e.push("path="+this.path),this.secure&&e.push("secure"),this.noscript&&e.push("httponly"),e.join("; ")},r.prototype.toValueString=function(){return this.name+"="+this.value};var s=/[:](?=\s*[a-zA-Z0-9_\-]+\s*[=])/g;function o(){var e,t;return this instanceof o?(e=Object.create(null),this.setCookie=function(s,o,n){var i,a;if(i=(s=new r(s,o,n)).expiration_date<=Date.now(),void 0!==e[s.name]){for(t=e[s.name],a=0;a<t.length;a+=1)if(t[a].collidesWith(s))return i?(t.splice(a,1),0===t.length&&delete e[s.name],!1):(t[a]=s,s);return!i&&(t.push(s),s)}return!i&&(e[s.name]=[s],e[s.name])},this.getCookie=function(r,s){var o,n;if(t=e[r])for(n=0;n<t.length;n+=1)if((o=t[n]).expiration_date<=Date.now())0===t.length&&delete e[o.name];else if(o.matches(s))return o},this.getCookies=function(t){var r,s,o=[];for(r in e)(s=this.getCookie(r,t))&&o.push(s);return o.toString=function(){return o.join(":")},o.toValueString=function(){return o.map((function(e){return e.toValueString()})).join("; ")},o},this):new o}r.prototype.parse=function(e,t,s){if(this instanceof r){var o,n=e.split(";").filter((function(e){return!!e})),i=n[0].match(/([^=]+)=([\s\S]*)/);if(!i)return void console.warn("Invalid cookie header encountered. Header: '"+e+"'");var a=i[1],h=i[2];if("string"!=typeof a||0===a.length||"string"!=typeof h)return void console.warn("Unable to extract values from cookie header. Cookie: '"+e+"'");for(this.name=a,this.value=h,o=1;o<n.length;o+=1)switch(a=(i=n[o].match(/([^=]+)(?:=([\s\S]*))?/))[1].trim().toLowerCase(),h=i[2],a){case"httponly":this.noscript=!0;break;case"expires":this.expiration_date=h?Number(Date.parse(h)):1/0;break;case"path":this.path=h?h.trim():"",this.explicit_path=!0;break;case"domain":this.domain=h?h.trim():"",this.explicit_domain=!!this.domain;break;case"secure":this.secure=!0}return this.explicit_path||(this.path=s||"/"),this.explicit_domain||(this.domain=t),this}return(new r).parse(e,t,s)},r.prototype.matches=function(t){return t===e.All||!(this.noscript&&t.script||this.secure&&!t.secure||!this.collidesWith(t))},r.prototype.collidesWith=function(e){if(this.path&&!e.path||this.domain&&!e.domain)return!1;if(this.path&&0!==e.path.indexOf(this.path))return!1;if(this.explicit_path&&0!==e.path.indexOf(this.path))return!1;var t=e.domain&&e.domain.replace(/^[\.]/,""),r=this.domain&&this.domain.replace(/^[\.]/,"");if(r===t)return!0;if(r){if(!this.explicit_domain)return!1;var s=t.indexOf(r);return-1!==s&&s===t.length-r.length}return!0},t.CookieJar=o,o.prototype.setCookies=function(e,t,o){var n,i,a=[];for(e=(e=Array.isArray(e)?e:e.split(s)).map((function(e){return new r(e,t,o)})),n=0;n<e.length;n+=1)i=e[n],this.setCookie(i,t,o)&&a.push(i);return a}}()},79267:(e,t,r)=>{var s=r(8501),o=r(8575),n=e.exports;for(var i in s)s.hasOwnProperty(i)&&(n[i]=s[i]);function a(e){if("string"==typeof e&&(e=o.parse(e)),e.protocol||(e.protocol="https:"),"https:"!==e.protocol)throw new Error('Protocol "'+e.protocol+'" not supported. Expected "https:"');return e}n.request=function(e,t){return e=a(e),s.request.call(this,e,t)},n.get=function(e,t){return e=a(e),s.get.call(this,e,t)}},8501:(e,t,r)=>{var s=r(11989),o=r(43665),n=r(47529),i=r(50584),a=r(8575),h=t;h.request=function(e,t){e="string"==typeof e?a.parse(e):n(e);var o=-1===r.g.location.protocol.search(/^https?:$/)?"http:":"",i=e.protocol||o,h=e.hostname||e.host,u=e.port,p=e.path||"/";h&&-1!==h.indexOf(":")&&(h="["+h+"]"),e.url=(h?i+"//"+h:"")+(u?":"+u:"")+p,e.method=(e.method||"GET").toUpperCase(),e.headers=e.headers||{};var l=new s(e);return t&&l.on("response",t),l},h.get=function(e,t){var r=h.request(e,t);return r.end(),r},h.ClientRequest=s,h.IncomingMessage=o.IncomingMessage,h.Agent=function(){},h.Agent.defaultMaxSockets=4,h.globalAgent=new h.Agent,h.STATUS_CODES=i,h.METHODS=["CHECKOUT","CONNECT","COPY","DELETE","GET","HEAD","LOCK","M-SEARCH","MERGE","MKACTIVITY","MKCOL","MOVE","NOTIFY","OPTIONS","PATCH","POST","PROPFIND","PROPPATCH","PURGE","PUT","REPORT","SEARCH","SUBSCRIBE","TRACE","UNLOCK","UNSUBSCRIBE"]},8725:(e,t,r)=>{var s;function o(){if(void 0!==s)return s;if(r.g.XMLHttpRequest){s=new r.g.XMLHttpRequest;try{s.open("GET",r.g.XDomainRequest?"/":"https://example.com")}catch(e){s=null}}else s=null;return s}function n(e){var t=o();if(!t)return!1;try{return t.responseType=e,t.responseType===e}catch(e){}return!1}function i(e){return"function"==typeof e}t.fetch=i(r.g.fetch)&&i(r.g.ReadableStream),t.writableStream=i(r.g.WritableStream),t.abortController=i(r.g.AbortController),t.arraybuffer=t.fetch||n("arraybuffer"),t.msstream=!t.fetch&&n("ms-stream"),t.mozchunkedarraybuffer=!t.fetch&&n("moz-chunked-arraybuffer"),t.overrideMimeType=t.fetch||!!o()&&i(o().overrideMimeType),s=null},11989:(e,t,r)=>{var s=r(8725),o=r(35717),n=r(43665),i=r(88473),a=n.IncomingMessage,h=n.readyStates,u=e.exports=function(e){var t,r=this;i.Writable.call(r),r._opts=e,r._body=[],r._headers={},e.auth&&r.setHeader("Authorization","Basic "+Buffer.from(e.auth).toString("base64")),Object.keys(e.headers).forEach((function(t){r.setHeader(t,e.headers[t])}));var o=!0;if("disable-fetch"===e.mode||"requestTimeout"in e&&!s.abortController)o=!1,t=!0;else if("prefer-streaming"===e.mode)t=!1;else if("allow-wrong-content-type"===e.mode)t=!s.overrideMimeType;else{if(e.mode&&"default"!==e.mode&&"prefer-fast"!==e.mode)throw new Error("Invalid value for opts.mode");t=!0}r._mode=function(e,t){return s.fetch&&t?"fetch":s.mozchunkedarraybuffer?"moz-chunked-arraybuffer":s.msstream?"ms-stream":s.arraybuffer&&e?"arraybuffer":"text"}(t,o),r._fetchTimer=null,r._socketTimeout=null,r._socketTimer=null,r.on("finish",(function(){r._onFinish()}))};o(u,i.Writable),u.prototype.setHeader=function(e,t){var r=e.toLowerCase();-1===p.indexOf(r)&&(this._headers[r]={name:e,value:t})},u.prototype.getHeader=function(e){var t=this._headers[e.toLowerCase()];return t?t.value:null},u.prototype.removeHeader=function(e){delete this._headers[e.toLowerCase()]},u.prototype._onFinish=function(){var e=this;if(!e._destroyed){var t=e._opts;"timeout"in t&&0!==t.timeout&&e.setTimeout(t.timeout);var o=e._headers,n=null;"GET"!==t.method&&"HEAD"!==t.method&&(n=new Blob(e._body,{type:(o["content-type"]||{}).value||""}));var i=[];if(Object.keys(o).forEach((function(e){var t=o[e].name,r=o[e].value;Array.isArray(r)?r.forEach((function(e){i.push([t,e])})):i.push([t,r])})),"fetch"===e._mode){var a=null;if(s.abortController){var u=new AbortController;a=u.signal,e._fetchAbortController=u,"requestTimeout"in t&&0!==t.requestTimeout&&(e._fetchTimer=r.g.setTimeout((function(){e.emit("requestTimeout"),e._fetchAbortController&&e._fetchAbortController.abort()}),t.requestTimeout))}r.g.fetch(e._opts.url,{method:e._opts.method,headers:i,body:n||void 0,mode:"cors",credentials:t.withCredentials?"include":"same-origin",signal:a}).then((function(t){e._fetchResponse=t,e._resetTimers(!1),e._connect()}),(function(t){e._resetTimers(!0),e._destroyed||e.emit("error",t)}))}else{var p=e._xhr=new r.g.XMLHttpRequest;try{p.open(e._opts.method,e._opts.url,!0)}catch(t){return void process.nextTick((function(){e.emit("error",t)}))}"responseType"in p&&(p.responseType=e._mode),"withCredentials"in p&&(p.withCredentials=!!t.withCredentials),"text"===e._mode&&"overrideMimeType"in p&&p.overrideMimeType("text/plain; charset=x-user-defined"),"requestTimeout"in t&&(p.timeout=t.requestTimeout,p.ontimeout=function(){e.emit("requestTimeout")}),i.forEach((function(e){p.setRequestHeader(e[0],e[1])})),e._response=null,p.onreadystatechange=function(){switch(p.readyState){case h.LOADING:case h.DONE:e._onXHRProgress()}},"moz-chunked-arraybuffer"===e._mode&&(p.onprogress=function(){e._onXHRProgress()}),p.onerror=function(){e._destroyed||(e._resetTimers(!0),e.emit("error",new Error("XHR error")))};try{p.send(n)}catch(t){return void process.nextTick((function(){e.emit("error",t)}))}}}},u.prototype._onXHRProgress=function(){var e=this;e._resetTimers(!1),function(e){try{var t=e.status;return null!==t&&0!==t}catch(e){return!1}}(e._xhr)&&!e._destroyed&&(e._response||e._connect(),e._response._onXHRProgress(e._resetTimers.bind(e)))},u.prototype._connect=function(){var e=this;e._destroyed||(e._response=new a(e._xhr,e._fetchResponse,e._mode,e._resetTimers.bind(e)),e._response.on("error",(function(t){e.emit("error",t)})),e.emit("response",e._response))},u.prototype._write=function(e,t,r){this._body.push(e),r()},u.prototype._resetTimers=function(e){var t=this;r.g.clearTimeout(t._socketTimer),t._socketTimer=null,e?(r.g.clearTimeout(t._fetchTimer),t._fetchTimer=null):t._socketTimeout&&(t._socketTimer=r.g.setTimeout((function(){t.emit("timeout")}),t._socketTimeout))},u.prototype.abort=u.prototype.destroy=function(e){var t=this;t._destroyed=!0,t._resetTimers(!0),t._response&&(t._response._destroyed=!0),t._xhr?t._xhr.abort():t._fetchAbortController&&t._fetchAbortController.abort(),e&&t.emit("error",e)},u.prototype.end=function(e,t,r){"function"==typeof e&&(r=e,e=void 0),i.Writable.prototype.end.call(this,e,t,r)},u.prototype.setTimeout=function(e,t){var r=this;t&&r.once("timeout",t),r._socketTimeout=e,r._resetTimers(!1)},u.prototype.flushHeaders=function(){},u.prototype.setNoDelay=function(){},u.prototype.setSocketKeepAlive=function(){};var p=["accept-charset","accept-encoding","access-control-request-headers","access-control-request-method","connection","content-length","cookie","cookie2","date","dnt","expect","host","keep-alive","origin","referer","te","trailer","transfer-encoding","upgrade","via"]},43665:(e,t,r)=>{var s=r(8725),o=r(35717),n=r(88473),i=t.readyStates={UNSENT:0,OPENED:1,HEADERS_RECEIVED:2,LOADING:3,DONE:4},a=t.IncomingMessage=function(e,t,r,o){var i=this;if(n.Readable.call(i),i._mode=r,i.headers={},i.rawHeaders=[],i.trailers={},i.rawTrailers=[],i.on("end",(function(){process.nextTick((function(){i.emit("close")}))})),"fetch"===r){if(i._fetchResponse=t,i.url=t.url,i.statusCode=t.status,i.statusMessage=t.statusText,t.headers.forEach((function(e,t){i.headers[t.toLowerCase()]=e,i.rawHeaders.push(t,e)})),s.writableStream){var a=new WritableStream({write:function(e){return o(!1),new Promise((function(t,r){i._destroyed?r():i.push(Buffer.from(e))?t():i._resumeFetch=t}))},close:function(){o(!0),i._destroyed||i.push(null)},abort:function(e){o(!0),i._destroyed||i.emit("error",e)}});try{return void t.body.pipeTo(a).catch((function(e){o(!0),i._destroyed||i.emit("error",e)}))}catch(e){}}var h=t.body.getReader();!function e(){h.read().then((function(t){i._destroyed||(o(t.done),t.done?i.push(null):(i.push(Buffer.from(t.value)),e()))})).catch((function(e){o(!0),i._destroyed||i.emit("error",e)}))}()}else if(i._xhr=e,i._pos=0,i.url=e.responseURL,i.statusCode=e.status,i.statusMessage=e.statusText,e.getAllResponseHeaders().split(/\r?\n/).forEach((function(e){var t=e.match(/^([^:]+):\s*(.*)/);if(t){var r=t[1].toLowerCase();"set-cookie"===r?(void 0===i.headers[r]&&(i.headers[r]=[]),i.headers[r].push(t[2])):void 0!==i.headers[r]?i.headers[r]+=", "+t[2]:i.headers[r]=t[2],i.rawHeaders.push(t[1],t[2])}})),i._charset="x-user-defined",!s.overrideMimeType){var u=i.rawHeaders["mime-type"];if(u){var p=u.match(/;\s*charset=([^;])(;|$)/);p&&(i._charset=p[1].toLowerCase())}i._charset||(i._charset="utf-8")}};o(a,n.Readable),a.prototype._read=function(){var e=this._resumeFetch;e&&(this._resumeFetch=null,e())},a.prototype._onXHRProgress=function(e){var t=this,s=t._xhr,o=null;switch(t._mode){case"text":if((o=s.responseText).length>t._pos){var n=o.substr(t._pos);if("x-user-defined"===t._charset){for(var a=Buffer.alloc(n.length),h=0;h<n.length;h++)a[h]=255&n.charCodeAt(h);t.push(a)}else t.push(n,t._charset);t._pos=o.length}break;case"arraybuffer":if(s.readyState!==i.DONE||!s.response)break;o=s.response,t.push(Buffer.from(new Uint8Array(o)));break;case"moz-chunked-arraybuffer":if(o=s.response,s.readyState!==i.LOADING||!o)break;t.push(Buffer.from(new Uint8Array(o)));break;case"ms-stream":if(o=s.response,s.readyState!==i.LOADING)break;var u=new r.g.MSStreamReader;u.onprogress=function(){u.result.byteLength>t._pos&&(t.push(Buffer.from(new Uint8Array(u.result.slice(t._pos)))),t._pos=u.result.byteLength)},u.onload=function(){e(!0),t.push(null)},u.readAsArrayBuffer(o)}t._xhr.readyState===i.DONE&&"ms-stream"!==t._mode&&(e(!0),t.push(null))}},98355:function(e,t){"use strict";var r,s=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function s(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)});Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t}(Error);t.SecurityError=o;var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t}(Error);t.InvalidStateError=n;var i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t}(Error);t.NetworkError=i;var a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t}(Error);t.SyntaxError=a},59536:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(96763));var s=r(40335);t.XMLHttpRequestEventTarget=s.XMLHttpRequestEventTarget},67296:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.ProgressEvent=function(e){this.type=e,this.bubbles=!1,this.cancelable=!1,this.loaded=0,this.lengthComputable=!1,this.total=0}},40335:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.listeners={}}return e.prototype.addEventListener=function(e,t){e=e.toLowerCase(),this.listeners[e]=this.listeners[e]||[],this.listeners[e].push(t.handleEvent||t)},e.prototype.removeEventListener=function(e,t){if(e=e.toLowerCase(),this.listeners[e]){var r=this.listeners[e].indexOf(t.handleEvent||t);r<0||this.listeners[e].splice(r,1)}},e.prototype.dispatchEvent=function(e){var t=e.type.toLowerCase();if(e.target=this,this.listeners[t])for(var r=0,s=this.listeners[t];r<s.length;r++)s[r].call(this,e);var o=this["on"+t];return o&&o.call(this,e),!0},e}();t.XMLHttpRequestEventTarget=r},77983:function(e,t,r){"use strict";var s,o=this&&this.__extends||(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}s(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var n=function(e){function t(){var t=e.call(this)||this;return t._contentType=null,t._body=null,t._reset(),t}return o(t,e),t.prototype._reset=function(){this._contentType=null,this._body=null},t.prototype._setData=function(e){if(null!=e)if("string"==typeof e)0!==e.length&&(this._contentType="text/plain;charset=UTF-8"),this._body=new Buffer(e,"utf-8");else if(Buffer.isBuffer(e))this._body=e;else if(e instanceof ArrayBuffer){for(var t=new Buffer(e.byteLength),r=new Uint8Array(e),s=0;s<e.byteLength;s++)t[s]=r[s];this._body=t}else{if(!(e.buffer&&e.buffer instanceof ArrayBuffer))throw new Error("Unsupported send() data "+e);t=new Buffer(e.byteLength);var o=e.byteOffset;for(r=new Uint8Array(e.buffer),s=0;s<e.byteLength;s++)t[s]=r[s+o];this._body=t}},t.prototype._finalizeHeaders=function(e,t){this._contentType&&!t["content-type"]&&(e["Content-Type"]=this._contentType),this._body&&(e["Content-Length"]=this._body.length.toString())},t.prototype._startUpload=function(e){this._body&&e.write(this._body),e.end()},t}(r(40335).XMLHttpRequestEventTarget);t.XMLHttpRequestUpload=n},96763:function(e,t,r){"use strict";var s,o=this&&this.__extends||(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}s(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),n=this&&this.__assign||Object.assign||function(e){for(var t,r=1,s=arguments.length;r<s;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0});var i=r(8501),a=r(79267),h=r(67435),u=r(8575),p=r(67296),l=r(98355),c=r(40335),d=r(77983),f=r(37866),_=function(e){function t(r){void 0===r&&(r={});var s=e.call(this)||this;return s.UNSENT=t.UNSENT,s.OPENED=t.OPENED,s.HEADERS_RECEIVED=t.HEADERS_RECEIVED,s.LOADING=t.LOADING,s.DONE=t.DONE,s.onreadystatechange=null,s.readyState=t.UNSENT,s.response=null,s.responseText="",s.responseType="",s.status=0,s.statusText="",s.timeout=0,s.upload=new d.XMLHttpRequestUpload,s.responseUrl="",s.withCredentials=!1,s._method=null,s._url=null,s._sync=!1,s._headers={},s._loweredHeaders={},s._mimeOverride=null,s._request=null,s._response=null,s._responseParts=null,s._responseHeaders=null,s._aborting=null,s._error=null,s._loadedBytes=0,s._totalBytes=0,s._lengthComputable=!1,s._restrictedMethods={CONNECT:!0,TRACE:!0,TRACK:!0},s._restrictedHeaders={"accept-charset":!0,"accept-encoding":!0,"access-control-request-headers":!0,"access-control-request-method":!0,connection:!0,"content-length":!0,cookie:!0,cookie2:!0,date:!0,dnt:!0,expect:!0,host:!0,"keep-alive":!0,origin:!0,referer:!0,te:!0,trailer:!0,"transfer-encoding":!0,upgrade:!0,"user-agent":!0,via:!0},s._privateHeaders={"set-cookie":!0,"set-cookie2":!0},s._userAgent="Mozilla/5.0 ("+h.type()+" "+h.arch()+") node.js/"+process.versions.node+" v8/"+process.versions.v8,s._anonymous=r.anon||!1,s}return o(t,e),t.prototype.open=function(e,r,s,o,n){if(void 0===s&&(s=!0),e=e.toUpperCase(),this._restrictedMethods[e])throw new t.SecurityError("HTTP method "+e+" is not allowed in XHR");var i=this._parseUrl(r,o,n);this.readyState===t.HEADERS_RECEIVED||(this.readyState,t.LOADING),this._method=e,this._url=i,this._sync=!s,this._headers={},this._loweredHeaders={},this._mimeOverride=null,this._setReadyState(t.OPENED),this._request=null,this._response=null,this.status=0,this.statusText="",this._responseParts=[],this._responseHeaders=null,this._loadedBytes=0,this._totalBytes=0,this._lengthComputable=!1},t.prototype.setRequestHeader=function(e,r){if(this.readyState!==t.OPENED)throw new t.InvalidStateError("XHR readyState must be OPENED");var s=e.toLowerCase();this._restrictedHeaders[s]||/^sec-/.test(s)||/^proxy-/.test(s)?console.warn('Refused to set unsafe header "'+e+'"'):(r=r.toString(),null!=this._loweredHeaders[s]?(e=this._loweredHeaders[s],this._headers[e]=this._headers[e]+", "+r):(this._loweredHeaders[s]=e,this._headers[e]=r))},t.prototype.send=function(e){if(this.readyState!==t.OPENED)throw new t.InvalidStateError("XHR readyState must be OPENED");if(this._request)throw new t.InvalidStateError("send() already called");switch(this._url.protocol){case"file:":return this._sendFile(e);case"http:":case"https:":return this._sendHttp(e);default:throw new t.NetworkError("Unsupported protocol "+this._url.protocol)}},t.prototype.abort=function(){null!=this._request&&(this._request.abort(),this._setError(),this._dispatchProgress("abort"),this._dispatchProgress("loadend"))},t.prototype.getResponseHeader=function(e){if(null==this._responseHeaders||null==e)return null;var t=e.toLowerCase();return this._responseHeaders.hasOwnProperty(t)?this._responseHeaders[e.toLowerCase()]:null},t.prototype.getAllResponseHeaders=function(){var e=this;return null==this._responseHeaders?"":Object.keys(this._responseHeaders).map((function(t){return t+": "+e._responseHeaders[t]})).join("\r\n")},t.prototype.overrideMimeType=function(e){if(this.readyState===t.LOADING||this.readyState===t.DONE)throw new t.InvalidStateError("overrideMimeType() not allowed in LOADING or DONE");this._mimeOverride=e.toLowerCase()},t.prototype.nodejsSet=function(e){if(this.nodejsHttpAgent=e.httpAgent||this.nodejsHttpAgent,this.nodejsHttpsAgent=e.httpsAgent||this.nodejsHttpsAgent,e.hasOwnProperty("baseUrl")){if(null!=e.baseUrl&&!u.parse(e.baseUrl,!1,!0).protocol)throw new t.SyntaxError("baseUrl must be an absolute URL");this.nodejsBaseUrl=e.baseUrl}},t.nodejsSet=function(e){t.prototype.nodejsSet(e)},t.prototype._setReadyState=function(e){this.readyState=e,this.dispatchEvent(new p.ProgressEvent("readystatechange"))},t.prototype._sendFile=function(e){throw new Error("Protocol file: not implemented")},t.prototype._sendHttp=function(e){if(this._sync)throw new Error("Synchronous XHR processing not implemented");!e||"GET"!==this._method&&"HEAD"!==this._method?e=e||"":(console.warn("Discarding entity body for "+this._method+" requests"),e=null),this.upload._setData(e),this._finalizeHeaders(),this._sendHxxpRequest()},t.prototype._sendHxxpRequest=function(){var e=this;if(this.withCredentials){var r=t.cookieJar.getCookies(f.CookieAccessInfo(this._url.hostname,this._url.pathname,"https:"===this._url.protocol)).toValueString();this._headers.cookie=this._headers.cookie2=r}var s="http:"===this._url.protocol?[i,this.nodejsHttpAgent]:[a,this.nodejsHttpsAgent],o=s[0],n=s[1],h=o.request.bind(o)({hostname:this._url.hostname,port:+this._url.port,path:this._url.path,auth:this._url.auth,method:this._method,headers:this._headers,agent:n});this._request=h,this.timeout&&h.setTimeout(this.timeout,(function(){return e._onHttpTimeout(h)})),h.on("response",(function(t){return e._onHttpResponse(h,t)})),h.on("error",(function(t){return e._onHttpRequestError(h,t)})),this.upload._startUpload(h),this._request===h&&this._dispatchProgress("loadstart")},t.prototype._finalizeHeaders=function(){this._headers=n({},this._headers,{Connection:"keep-alive",Host:this._url.host,"User-Agent":this._userAgent},this._anonymous?{Referer:"about:blank"}:{}),this.upload._finalizeHeaders(this._headers,this._loweredHeaders)},t.prototype._onHttpResponse=function(e,r){var s=this;if(this._request===e){if(this.withCredentials&&(r.headers["set-cookie"]||r.headers["set-cookie2"])&&t.cookieJar.setCookies(r.headers["set-cookie"]||r.headers["set-cookie2"]),[301,302,303,307,308].indexOf(r.statusCode)>=0)return this._url=this._parseUrl(r.headers.location),this._method="GET",this._loweredHeaders["content-type"]&&(delete this._headers[this._loweredHeaders["content-type"]],delete this._loweredHeaders["content-type"]),null!=this._headers["Content-Type"]&&delete this._headers["Content-Type"],delete this._headers["Content-Length"],this.upload._reset(),this._finalizeHeaders(),void this._sendHxxpRequest();this._response=r,this._response.on("data",(function(e){return s._onHttpResponseData(r,e)})),this._response.on("end",(function(){return s._onHttpResponseEnd(r)})),this._response.on("close",(function(){return s._onHttpResponseClose(r)})),this.responseUrl=this._url.href.split("#")[0],this.status=r.statusCode,this.statusText=i.STATUS_CODES[this.status],this._parseResponseHeaders(r);var o=this._responseHeaders["content-length"]||"";this._totalBytes=+o,this._lengthComputable=!!o,this._setReadyState(t.HEADERS_RECEIVED)}},t.prototype._onHttpResponseData=function(e,r){this._response===e&&(this._responseParts.push(new Buffer(r)),this._loadedBytes+=r.length,this.readyState!==t.LOADING&&this._setReadyState(t.LOADING),this._dispatchProgress("progress"))},t.prototype._onHttpResponseEnd=function(e){this._response===e&&(this._parseResponse(),this._request=null,this._response=null,this._setReadyState(t.DONE),this._dispatchProgress("load"),this._dispatchProgress("loadend"))},t.prototype._onHttpResponseClose=function(e){if(this._response===e){var r=this._request;this._setError(),r.abort(),this._setReadyState(t.DONE),this._dispatchProgress("error"),this._dispatchProgress("loadend")}},t.prototype._onHttpTimeout=function(e){this._request===e&&(this._setError(),e.abort(),this._setReadyState(t.DONE),this._dispatchProgress("timeout"),this._dispatchProgress("loadend"))},t.prototype._onHttpRequestError=function(e,r){this._request===e&&(this._setError(),e.abort(),this._setReadyState(t.DONE),this._dispatchProgress("error"),this._dispatchProgress("loadend"))},t.prototype._dispatchProgress=function(e){var r=new t.ProgressEvent(e);r.lengthComputable=this._lengthComputable,r.loaded=this._loadedBytes,r.total=this._totalBytes,this.dispatchEvent(r)},t.prototype._setError=function(){this._request=null,this._response=null,this._responseHeaders=null,this._responseParts=null},t.prototype._parseUrl=function(e,t,r){var s=null==this.nodejsBaseUrl?e:u.resolve(this.nodejsBaseUrl,e),o=u.parse(s,!1,!0);o.hash=null;var n=(o.auth||"").split(":"),i=n[0],a=n[1];return(i||a||t||r)&&(o.auth=(t||i||"")+":"+(r||a||"")),o},t.prototype._parseResponseHeaders=function(e){for(var t in this._responseHeaders={},e.headers){var r=t.toLowerCase();this._privateHeaders[r]||(this._responseHeaders[r]=e.headers[t])}null!=this._mimeOverride&&(this._responseHeaders["content-type"]=this._mimeOverride)},t.prototype._parseResponse=function(){var e=Buffer.concat(this._responseParts);switch(this._responseParts=null,this.responseType){case"json":this.responseText=null;try{this.response=JSON.parse(e.toString("utf-8"))}catch(e){this.response=null}return;case"buffer":return this.responseText=null,void(this.response=e);case"arraybuffer":this.responseText=null;for(var t=new ArrayBuffer(e.length),r=new Uint8Array(t),s=0;s<e.length;s++)r[s]=e[s];return void(this.response=t);case"text":default:try{this.responseText=e.toString(this._parseResponseEncoding())}catch(t){this.responseText=e.toString("binary")}this.response=this.responseText}},t.prototype._parseResponseEncoding=function(){return/;\s*charset=(.*)$/.exec(this._responseHeaders["content-type"]||"")[1]||"utf-8"},t.ProgressEvent=p.ProgressEvent,t.InvalidStateError=l.InvalidStateError,t.NetworkError=l.NetworkError,t.SecurityError=l.SecurityError,t.SyntaxError=l.SyntaxError,t.XMLHttpRequestUpload=d.XMLHttpRequestUpload,t.UNSENT=0,t.OPENED=1,t.HEADERS_RECEIVED=2,t.LOADING=3,t.DONE=4,t.cookieJar=f.CookieJar(),t}(c.XMLHttpRequestEventTarget);t.XMLHttpRequest=_,_.prototype.nodejsHttpAgent=i.globalAgent,_.prototype.nodejsHttpsAgent=a.globalAgent,_.prototype.nodejsBaseUrl=null}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
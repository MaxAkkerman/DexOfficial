(self.webpackChunkmy_swap=self.webpackChunkmy_swap||[]).push([[3133],{13133:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>s}),r(35666);var t=r(14113);function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function c(e,n,r,t,o,i,a){try{var c=e[i](a),u=c.value}catch(e){return void r(e)}c.done?n(u):Promise.resolve(u).then(t,o)}function u(e){return function(){var n=this,r=arguments;return new Promise((function(t,o){var i=e.apply(n,r);function a(e){c(i,t,o,a,u,"next",e)}function u(e){c(i,t,o,a,u,"throw",e)}a(void 0)}))}}r(44431),r(5942),r(51206);const s=function(e){var n,o=e.networkId,a=e.preferred,c=e.label,s=e.iconSrc,l=e.svg,f=e.buttonPosition,p=e.modalZIndex,d=e.apiKey,h=e.buildEnv,b=e.enableLogging,g=e.enabledVerifiers,w=e.loginConfig,v=e.showTorusButton,m=e.integrity,y=e.whiteLabel,O=e.loginMethod,P=e.rpcUrl;return{name:c||"Torus",svg:l||'<svg width="257" height="277" viewBox="0 0 257 277" fill="none" xmlns="http://www.w3.org/2000/svg">\n<rect width="153.889" height="82.0741" fill="#0364FF" />\n<rect x="71.8135" width="82.0741" height="277" fill="#0364FF" />\n<path d="M215.443 82.0741C238.107 82.0741 256.48 63.7012 256.48 41.037C256.48 18.3729 238.107 0 215.443 \n0C192.779 0 174.406 18.3729 174.406 41.037C174.406 63.7012 192.779 82.0741 215.443 82.0741Z" fill="#0364FF" />\n</svg>',iconSrc:s,wallet:(n=u(regeneratorRuntime.mark((function e(n){var a,c,s,l,k;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=n.createModernProviderInterface,e.next=3,Promise.all([r.e(8847),r.e(7359),r.e(7895),r.e(2751),r.e(5835),r.e(7994),r.e(3714),r.e(9831),r.e(3600),r.e(7662),r.e(9536),r.e(8934),r.e(3096)]).then(r.bind(r,81477));case 3:return c=e.sent,s=c.default,l=new s({buttonPosition:f,modalZIndex:p,apiKey:d}),e.next=8,l.init({buildEnv:h,enableLogging:b,network:{host:P||(0,t.n)(o),chainId:o,networkName:"".concat((0,t.n)(o)," Network")},showTorusButton:v,enabledVerifiers:g,loginConfig:w,integrity:m,whiteLabel:y});case 8:return k=l.provider,e.abrupt("return",{provider:k,interface:i(i({},a(k)),{},{name:"Torus",dashboard:function(){return l.showWallet("home")},connect:function(){var e=u(regeneratorRuntime.mark((function e(){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,l.login({verifier:O});case 2:return n=e.sent,e.abrupt("return",{message:n[0]});case 4:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),disconnect:function(){return l.cleanUp()}}),instance:l});case 10:case"end":return e.stop()}}),e)}))),function(e){return n.apply(this,arguments)}),type:"sdk",desktop:!0,mobile:!0,preferred:a}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
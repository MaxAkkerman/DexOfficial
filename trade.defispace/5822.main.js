(self.webpackChunkmy_swap=self.webpackChunkmy_swap||[]).push([[5822],{90798:e=>{"use strict";e.exports=JSON.parse('{"name":"@gnosis.pm/safe-apps-sdk","version":"3.0.0","description":"SDK developed to integrate third-party apps with Safe-Multisig app.","main":"dist/src/index.js","typings":"dist/src/index.d.ts","_files":["dist/**/*","README.md"],"keywords":["Gnosis","sdk","apps"],"scripts":{"test":"jest","format-dist":"sed -i \'\' \'s/\\"files\\":/\\"_files\\":/\' dist/package.json","build":"yarn rimraf dist && tsc && yarn format-dist","format":"prettier --write \\"src/**/*.ts\\"","lint":"tslint -p tsconfig.json","prepublishOnly":"yarn build"},"author":"Gnosis (https://gnosis.io)","license":"MIT","dependencies":{},"devDependencies":{"@types/jest":"^26.0.23","@types/node":"^15.3.0","husky":"^6.0.0","lint-staged":"^11.0.0","prettier":"^2.2.1","rimraf":"^3.0.2"},"husky":{"hooks":{"pre-commit":"lint-staged"}},"lint-staged":{"src/**/!(*test).ts":["yarn lint","prettier --write"]},"repository":{"type":"git","url":"git+https://github.com/gnosis/safe-apps-sdk.git"},"bugs":{"url":"https://github.com/gnosis/safe-apps-sdk/issues"},"homepage":"https://github.com/gnosis/safe-apps-sdk#readme"}')},55621:function(e,t,s){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,s,r){void 0===r&&(r=s),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[s]}})}:function(e,t,s,r){void 0===r&&(r=s),e[r]=t[s]}),i=this&&this.__exportStar||function(e,t){for(var s in e)"default"===s||Object.prototype.hasOwnProperty.call(t,s)||r(t,e,s)};Object.defineProperty(t,"__esModule",{value:!0});const a=s(36750);t.default=class{constructor(e=null,t=!1){this.allowedOrigins=null,this.callbacks=new Map,this.debugMode=!1,this.isValidMessage=({origin:e,data:t,source:s})=>{const r=!t,i=s===window.parent,a=(void 0!==t.version&&parseInt(t.version.split(".")[0]))>=1;let n=!0;return Array.isArray(this.allowedOrigins)&&(n=void 0!==this.allowedOrigins.find((t=>t.test(e)))),!r&&i&&a&&n},this.logIncomingMessage=e=>{console.info(`Safe Apps SDK v1: A message was received from origin ${e.origin}. `,e.data)},this.onParentMessage=e=>{this.isValidMessage(e)&&(this.debugMode&&this.logIncomingMessage(e),this.handleIncomingMessage(e.data))},this.handleIncomingMessage=e=>{const{id:t}=e,s=this.callbacks.get(t);s&&(s(e),this.callbacks.delete(t))},this.send=(e,t)=>{const s=a.MessageFormatter.makeRequest(e,t);if("undefined"==typeof window)throw new Error("Window doesn't exist");return window.parent.postMessage(s,"*"),new Promise((e=>{this.callbacks.set(s.id,(t=>{e(t)}))}))},this.allowedOrigins=e,this.debugMode=t,window.addEventListener("message",this.onParentMessage)}},i(s(92628),t)},36750:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MessageFormatter=void 0;const r=s(78855),i=s(56036);class a{}t.MessageFormatter=a,a.makeRequest=(e,t)=>({id:r.generateRequestId(),method:e,params:t,env:{sdkVersion:i.getSDKVersion()}}),a.makeResponse=(e,t,s)=>({id:e,success:!0,version:s,data:t}),a.makeErrorResponse=(e,t,s)=>({id:e,success:!1,error:t,version:s})},92628:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.METHODS=void 0,t.METHODS={getEnvInfo:"getEnvInfo",sendTransactions:"sendTransactions",rpcCall:"rpcCall",getSafeInfo:"getSafeInfo"}},78855:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generateRequestId=void 0;const s=e=>e.toString(16).padStart(2,"0");t.generateRequestId=()=>"undefined"!=typeof window?(e=>{const t=new Uint8Array(5);return window.crypto.getRandomValues(t),Array.from(t,s).join("")})():(new Date).getTime().toString(36)},71068:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RPC_CALLS=void 0,t.RPC_CALLS={eth_call:"eth_call",eth_getLogs:"eth_getLogs",eth_getBalance:"eth_getBalance",eth_getCode:"eth_getCode",eth_getBlockByHash:"eth_getBlockByHash",eth_getBlockByNumber:"eth_getBlockByNumber",eth_getStorageAt:"eth_getStorageAt",eth_getTransactionByHash:"eth_getTransactionByHash",eth_getTransactionReceipt:"eth_getTransactionReceipt"}},60770:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Eth=void 0;const r=s(71068),i=s(92628),a={defaultBlockParam:(e="latest")=>e,returnFullTxObjectParam:(e=!1)=>e,blockNumberToHex:e=>Number.isInteger(e)?`0x${e.toString(16)}`:e};t.Eth=class{constructor(e){this.communicator=e,this.call=this.buildRequest({call:r.RPC_CALLS.eth_call,formatters:[null,a.defaultBlockParam]}),this.getBalance=this.buildRequest({call:r.RPC_CALLS.eth_getBalance,formatters:[null,a.defaultBlockParam]}),this.getCode=this.buildRequest({call:r.RPC_CALLS.eth_getCode,formatters:[null,a.defaultBlockParam]}),this.getStorageAt=this.buildRequest({call:r.RPC_CALLS.eth_getStorageAt,formatters:[null,a.blockNumberToHex,a.defaultBlockParam]}),this.getPastLogs=this.buildRequest({call:r.RPC_CALLS.eth_getLogs}),this.getBlockByHash=this.buildRequest({call:r.RPC_CALLS.eth_getBlockByHash,formatters:[null,a.returnFullTxObjectParam]}),this.getBlockByNumber=this.buildRequest({call:r.RPC_CALLS.eth_getBlockByNumber,formatters:[a.blockNumberToHex,a.returnFullTxObjectParam]}),this.getTransactionByHash=this.buildRequest({call:r.RPC_CALLS.eth_getTransactionByHash}),this.getTransactionReceipt=this.buildRequest({call:r.RPC_CALLS.eth_getTransactionReceipt})}buildRequest({call:e,formatters:t}){return async s=>{t&&Array.isArray(s)&&t.forEach(((e,t)=>{e&&(s[t]=e(s[t]))}));const r={call:e,params:s},a=await this.communicator.send(i.METHODS.rpcCall,r);if(!a.success)throw new Error(a.error);return a.data}}}},85822:function(e,t,s){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,s,r){void 0===r&&(r=s),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[s]}})}:function(e,t,s,r){void 0===r&&(r=s),e[r]=t[s]}),i=this&&this.__exportStar||function(e,t){for(var s in e)"default"===s||Object.prototype.hasOwnProperty.call(t,s)||r(t,e,s)},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getSDKVersion=void 0;const n=a(s(15381));t.default=n.default,i(s(15381),t),i(s(87633),t),i(s(92628),t),i(s(36750),t);var o=s(56036);Object.defineProperty(t,"getSDKVersion",{enumerable:!0,get:function(){return o.getSDKVersion}})},15381:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=s(55621),a=r(s(55621)),n=s(9786),o=s(60770);t.default=class{constructor(e={}){if("undefined"==typeof window)throw new Error("Error initializing the sdk: window is undefined");const{whitelistedDomains:t=null,debug:s=!1}=e;this.communicator=new a.default(t,s),this.eth=new o.Eth(this.communicator),this.txs=new n.TXs(this.communicator),this.bootstrap()}async bootstrap(){const{txServiceUrl:e}=await this.getEnvInfo();this.txs.setTxServiceUrl(e)}async getEnvInfo(){const e=await this.communicator.send(i.METHODS.getEnvInfo,void 0);if(!e.success)throw new Error(e.error);return e.data}async getSafeInfo(){const e=await this.communicator.send(i.METHODS.getSafeInfo,void 0);if(!e.success)throw new Error(e.error);return e.data}}},9786:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TXs=void 0;const r=s(92628);t.TXs=class{constructor(e){this.txServiceUrl=null,this.communicator=e}async getBySafeTxHash(e){if(!this.txServiceUrl)throw new Error("ENV information hasn't been synced yet or there was an error during the process");const t=new AbortController,s={method:"GET",signal:t.signal};setTimeout((()=>t.abort()),1e4);try{const t=await fetch(`${this.txServiceUrl}/transactions/${e}`,s);if(200!==t.status)throw new Error("Failed to get the transaction. Either safeTxHash is incorrect or transaction hasn't been indexed by the service yet");return await t.json()}catch(e){throw e}}async send({txs:e,params:t}){if(!e||!e.length)throw new Error("No transactions were passed");const s={txs:e,params:t},i=await this.communicator.send(r.METHODS.sendTransactions,s);if(!i.success)throw new Error(i.error);return i.data}setTxServiceUrl(e){this.txServiceUrl=e}}},87633:(e,t,s)=>{"use strict";var r,i,a;Object.defineProperty(t,"__esModule",{value:!0}),t.SettingsChangeMethods=t.TransferMethods=t.Operation=void 0,s(92628),(a=t.Operation||(t.Operation={}))[a.CALL=0]="CALL",a[a.DELEGATE_CALL=1]="DELEGATE_CALL",a[a.CREATE=2]="CREATE",(i=t.TransferMethods||(t.TransferMethods={})).TRANSFER="transfer",i.TRANSFER_FROM="transferFrom",i.SAFE_TRANSFER_FROM="safeTransferFrom",(r=t.SettingsChangeMethods||(t.SettingsChangeMethods={})).SETUP="setup",r.SET_FALLBACK_HANDLER="setFallbackHandler",r.ADD_OWNER_WITH_THRESHOLD="addOwnerWithThreshold",r.REMOVE_OWNER="removeOwner",r.REMOVE_OWNER_WITH_THRESHOLD="removeOwnerWithThreshold",r.SWAP_OWNER="swapOwner",r.CHANGE_THRESHOLD="changeThreshold",r.CHANGE_MASTER_COPY="changeMasterCopy",r.ENABLE_MODULE="enableModule",r.DISABLE_MODULE="disableModule",r.EXEC_TRANSACTION_FROM_MODULE="execTransactionFromModule",r.APPROVE_HASH="approveHash",r.EXEC_TRANSACTION="execTransaction"},56036:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getSDKVersion=void 0;const i=r(s(90798));t.getSDKVersion=()=>i.default.version.slice(0,5)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
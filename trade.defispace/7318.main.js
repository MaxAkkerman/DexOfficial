(self.webpackChunkmy_swap=self.webpackChunkmy_swap||[]).push([[7318],{7318:(n,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>i}),r(35666);var t=r(14113);function u(n,e,r,t,u,o,i){try{var a=n[o](i),c=a.value}catch(n){return void r(n)}a.done?e(c):Promise.resolve(c).then(t,u)}function o(n){return function(){var e=this,r=arguments;return new Promise((function(t,o){var i=n.apply(e,r);function a(n){u(i,t,o,a,c,"next",n)}function c(n){u(i,t,o,a,c,"throw",n)}a(void 0)}))}}r(44431),r(5942),r(51206);const i=function(n){var e,u=n.apiKey,i=n.rpcUrl,a=n.networkId,c=n.preferred,s=n.label,f=n.iconSrc;return{name:s||"Fortmatic",svg:n.svg||'\n  <svg \n    height="40" \n    viewBox="0 0 40 40" \n    width="40" \n    xmlns="http://www.w3.org/2000/svg"\n  >\n    <path d="m2744.99995 1155h9.99997 10.00008v9.98139h-10.00008-9.99997-9.99998v9.9814.64001 9.28323.05815 9.9234h-9.99997v-9.9234-.05815-9.28323-.64001-9.9814-9.98139h9.99997zm9.99961 29.88552h-9.94167v-9.92324h19.93595v10.27235c0 2.55359-1.01622 5.00299-2.82437 6.80909-1.80867 1.8061-4.26182 2.82181-6.82018 2.82335h-.34973z" \n      fill="#617bff" \n      fill-rule="evenodd" \n      transform="translate(-2725 -1155)"/>\n  </svg>\n',iconSrc:f,wallet:(e=o(regeneratorRuntime.mark((function n(e){var c,s,f,l,p,v,d;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,r.e(769).then(r.t.bind(r,769,23));case 2:return c=n.sent,s=c.default,f=new s(u,i?{chainId:a,rpcUrl:i}:1===a?void 0:(0,t.n)(a)),l=f.getProvider(),p=e.BigNumber,v=e.getAddress,n.abrupt("return",{provider:l,instance:f,interface:{name:"Fortmatic",connect:function(){return f.user.login().then((function(n){return d=!0,n}))},disconnect:function(){return f.user.logout()},address:{get:function(){return d?v(l):Promise.resolve()}},network:{get:function(){return Promise.resolve(a)}},balance:{get:function(){var n=o(regeneratorRuntime.mark((function n(){return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.abrupt("return",d&&f.user.getBalances().then((function(n){return n[0]?p(n[0].crypto_amount).times(p("1000000000000000000")).toString(10):null})));case 1:case"end":return n.stop()}}),n)})));return function(){return n.apply(this,arguments)}}()},dashboard:function(){return f.user.settings()}}});case 8:case"end":return n.stop()}}),n)}))),function(n){return e.apply(this,arguments)}),type:"sdk",desktop:!0,mobile:!0,preferred:c}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
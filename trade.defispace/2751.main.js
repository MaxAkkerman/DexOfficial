(self.webpackChunkmy_swap=self.webpackChunkmy_swap||[]).push([[2751],{48670:function(e,r,t){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,r,t,n){void 0===n&&(n=t),Object.defineProperty(e,n,{enumerable:!0,get:function(){return r[t]}})}:function(e,r,t,n){void 0===n&&(n=t),e[n]=r[t]}),f=this&&this.__setModuleDefault||(Object.create?function(e,r){Object.defineProperty(e,"default",{enumerable:!0,value:r})}:function(e,r){e.default=r}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&n(r,e,t);return f(r,e),r},o=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,f,i=t.call(e),o=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)o.push(n.value)}catch(e){f={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(f)throw f.error}}return o},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0}),r.isZeroAddress=r.zeroAddress=r.importPublic=r.privateToAddress=r.privateToPublic=r.publicToAddress=r.pubToAddress=r.isValidPublic=r.isValidPrivate=r.generateAddress2=r.generateAddress=r.isValidChecksumAddress=r.toChecksumAddress=r.isValidAddress=r.Account=void 0;var a=u(t(48583)),s=u(t(13550)),c=i(t(51675)),d=t(95053),l=t(54846),p=t(56861),h=t(14651),g=t(45641),y=t(63746),v=t(2971),b=function(){function e(e,r,t,n){void 0===e&&(e=new s.default(0)),void 0===r&&(r=new s.default(0)),void 0===t&&(t=p.KECCAK256_RLP),void 0===n&&(n=p.KECCAK256_NULL),this.nonce=e,this.balance=r,this.stateRoot=t,this.codeHash=n,this._validate()}return e.fromAccountData=function(r){var t=r.nonce,n=r.balance,f=r.stateRoot,i=r.codeHash;return new e(t?new s.default((0,h.toBuffer)(t)):void 0,n?new s.default((0,h.toBuffer)(n)):void 0,f?(0,h.toBuffer)(f):void 0,i?(0,h.toBuffer)(i):void 0)},e.fromRlpSerializedAccount=function(e){var r=c.decode(e);if(!Array.isArray(r))throw new Error("Invalid serialized account input. Must be array");return this.fromValuesArray(r)},e.fromValuesArray=function(r){var t=o(r,4),n=t[0],f=t[1],i=t[2],u=t[3];return new e(new s.default(n),new s.default(f),i,u)},e.prototype._validate=function(){if(this.nonce.lt(new s.default(0)))throw new Error("nonce must be greater than zero");if(this.balance.lt(new s.default(0)))throw new Error("balance must be greater than zero");if(32!==this.stateRoot.length)throw new Error("stateRoot must have a length of 32");if(32!==this.codeHash.length)throw new Error("codeHash must have a length of 32")},e.prototype.raw=function(){return[(0,v.bnToUnpaddedBuffer)(this.nonce),(0,v.bnToUnpaddedBuffer)(this.balance),this.stateRoot,this.codeHash]},e.prototype.serialize=function(){return c.encode(this.raw())},e.prototype.isContract=function(){return!this.codeHash.equals(p.KECCAK256_NULL)},e.prototype.isEmpty=function(){return this.balance.isZero()&&this.nonce.isZero()&&this.codeHash.equals(p.KECCAK256_NULL)},e}();r.Account=b,r.isValidAddress=function(e){try{(0,y.assertIsString)(e)}catch(e){return!1}return/^0x[0-9a-fA-F]{40}$/.test(e)},r.toChecksumAddress=function(e,r){(0,y.assertIsHexString)(e);var t=(0,l.stripHexPrefix)(e).toLowerCase(),n="";r&&(n=(0,v.toType)(r,v.TypeOutput.BN).toString()+"0x");for(var f=(0,g.keccakFromString)(n+t).toString("hex"),i="0x",o=0;o<t.length;o++)parseInt(f[o],16)>=8?i+=t[o].toUpperCase():i+=t[o];return i},r.isValidChecksumAddress=function(e,t){return(0,r.isValidAddress)(e)&&(0,r.toChecksumAddress)(e,t)===e},r.generateAddress=function(e,r){(0,y.assertIsBuffer)(e),(0,y.assertIsBuffer)(r);var t=new s.default(r);return t.isZero()?(0,g.rlphash)([e,null]).slice(-20):(0,g.rlphash)([e,Buffer.from(t.toArray())]).slice(-20)},r.generateAddress2=function(e,r,t){return(0,y.assertIsBuffer)(e),(0,y.assertIsBuffer)(r),(0,y.assertIsBuffer)(t),(0,a.default)(20===e.length),(0,a.default)(32===r.length),(0,g.keccak256)(Buffer.concat([Buffer.from("ff","hex"),e,r,(0,g.keccak256)(t)])).slice(-20)},r.isValidPrivate=function(e){return(0,d.privateKeyVerify)(e)},r.isValidPublic=function(e,r){return void 0===r&&(r=!1),(0,y.assertIsBuffer)(e),64===e.length?(0,d.publicKeyVerify)(Buffer.concat([Buffer.from([4]),e])):!!r&&(0,d.publicKeyVerify)(e)},r.pubToAddress=function(e,r){return void 0===r&&(r=!1),(0,y.assertIsBuffer)(e),r&&64!==e.length&&(e=Buffer.from((0,d.publicKeyConvert)(e,!1).slice(1))),(0,a.default)(64===e.length),(0,g.keccak)(e).slice(-20)},r.publicToAddress=r.pubToAddress,r.privateToPublic=function(e){return(0,y.assertIsBuffer)(e),Buffer.from((0,d.publicKeyCreate)(e,!1)).slice(1)},r.privateToAddress=function(e){return(0,r.publicToAddress)((0,r.privateToPublic)(e))},r.importPublic=function(e){return(0,y.assertIsBuffer)(e),64!==e.length&&(e=Buffer.from((0,d.publicKeyConvert)(e,!1).slice(1))),e},r.zeroAddress=function(){var e=(0,h.zeros)(20);return(0,h.bufferToHex)(e)},r.isZeroAddress=function(e){try{(0,y.assertIsString)(e)}catch(e){return!1}return(0,r.zeroAddress)()===e}},6871:function(e,r,t){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0}),r.Address=void 0;var f=n(t(48583)),i=n(t(13550)),o=t(14651),u=t(48670),a=function(){function e(e){(0,f.default)(20===e.length,"Invalid address length"),this.buf=e}return e.zero=function(){return new e((0,o.zeros)(20))},e.fromString=function(r){return(0,f.default)((0,u.isValidAddress)(r),"Invalid address"),new e((0,o.toBuffer)(r))},e.fromPublicKey=function(r){return(0,f.default)(Buffer.isBuffer(r),"Public key should be Buffer"),new e((0,u.pubToAddress)(r))},e.fromPrivateKey=function(r){return(0,f.default)(Buffer.isBuffer(r),"Private key should be Buffer"),new e((0,u.privateToAddress)(r))},e.generate=function(r,t){return(0,f.default)(i.default.isBN(t)),new e((0,u.generateAddress)(r.buf,t.toArrayLike(Buffer)))},e.generate2=function(r,t,n){return(0,f.default)(Buffer.isBuffer(t)),(0,f.default)(Buffer.isBuffer(n)),new e((0,u.generateAddress2)(r.buf,t,n))},e.prototype.equals=function(e){return this.buf.equals(e.buf)},e.prototype.isZero=function(){return this.equals(e.zero())},e.prototype.isPrecompileOrSystemAddress=function(){var e=new i.default(this.buf),r=new i.default(0),t=new i.default("ffff","hex");return e.gte(r)&&e.lte(t)},e.prototype.toString=function(){return"0x"+this.buf.toString("hex")},e.prototype.toBuffer=function(){return Buffer.from(this.buf)},e}();r.Address=a},14651:function(e,r,t){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0}),r.baToJSON=r.toUtf8=r.addHexPrefix=r.toUnsigned=r.fromSigned=r.bufferToHex=r.bufferToInt=r.toBuffer=r.unpadHexString=r.unpadArray=r.unpadBuffer=r.setLengthRight=r.setLengthLeft=r.zeros=r.intToBuffer=r.intToHex=void 0;var f=n(t(13550)),i=t(54846),o=t(63746);r.intToHex=function(e){if(!Number.isSafeInteger(e)||e<0)throw new Error("Received an invalid integer type: "+e);return"0x"+e.toString(16)},r.intToBuffer=function(e){var t=(0,r.intToHex)(e);return Buffer.from((0,i.padToEven)(t.slice(2)),"hex")},r.zeros=function(e){return Buffer.allocUnsafe(e).fill(0)};var u=function(e,t,n){var f=(0,r.zeros)(t);return n?e.length<t?(e.copy(f),f):e.slice(0,t):e.length<t?(e.copy(f,t-e.length),f):e.slice(-t)};r.setLengthLeft=function(e,r){return(0,o.assertIsBuffer)(e),u(e,r,!1)},r.setLengthRight=function(e,r){return(0,o.assertIsBuffer)(e),u(e,r,!0)};var a=function(e){for(var r=e[0];e.length>0&&"0"===r.toString();)r=(e=e.slice(1))[0];return e};r.unpadBuffer=function(e){return(0,o.assertIsBuffer)(e),a(e)},r.unpadArray=function(e){return(0,o.assertIsArray)(e),a(e)},r.unpadHexString=function(e){return(0,o.assertIsHexString)(e),e=(0,i.stripHexPrefix)(e),a(e)},r.toBuffer=function(e){if(null==e)return Buffer.allocUnsafe(0);if(Buffer.isBuffer(e))return Buffer.from(e);if(Array.isArray(e)||e instanceof Uint8Array)return Buffer.from(e);if("string"==typeof e){if(!(0,i.isHexString)(e))throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: "+e);return Buffer.from((0,i.padToEven)((0,i.stripHexPrefix)(e)),"hex")}if("number"==typeof e)return(0,r.intToBuffer)(e);if(f.default.isBN(e))return e.toArrayLike(Buffer);if(e.toArray)return Buffer.from(e.toArray());if(e.toBuffer)return Buffer.from(e.toBuffer());throw new Error("invalid type")},r.bufferToInt=function(e){return new f.default((0,r.toBuffer)(e)).toNumber()},r.bufferToHex=function(e){return"0x"+(e=(0,r.toBuffer)(e)).toString("hex")},r.fromSigned=function(e){return new f.default(e).fromTwos(256)},r.toUnsigned=function(e){return Buffer.from(e.toTwos(256).toArray())},r.addHexPrefix=function(e){return"string"!=typeof e||(0,i.isHexPrefixed)(e)?e:"0x"+e},r.toUtf8=function(e){if((e=(0,i.stripHexPrefix)(e)).length%2!=0)throw new Error("Invalid non-even hex string input for toUtf8() provided");return Buffer.from(e.replace(/^(00)+|(00)+$/g,""),"hex").toString("utf8")},r.baToJSON=function(e){if(Buffer.isBuffer(e))return"0x"+e.toString("hex");if(e instanceof Array){for(var t=[],n=0;n<e.length;n++)t.push((0,r.baToJSON)(e[n]));return t}}},56861:function(e,r,t){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0}),r.KECCAK256_RLP=r.KECCAK256_RLP_S=r.KECCAK256_RLP_ARRAY=r.KECCAK256_RLP_ARRAY_S=r.KECCAK256_NULL=r.KECCAK256_NULL_S=r.TWO_POW256=r.MAX_INTEGER=void 0;var f=t(48764).Buffer,i=n(t(13550));r.MAX_INTEGER=new i.default("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",16),r.TWO_POW256=new i.default("10000000000000000000000000000000000000000000000000000000000000000",16),r.KECCAK256_NULL_S="c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",r.KECCAK256_NULL=f.from(r.KECCAK256_NULL_S,"hex"),r.KECCAK256_RLP_ARRAY_S="1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",r.KECCAK256_RLP_ARRAY=f.from(r.KECCAK256_RLP_ARRAY_S,"hex"),r.KECCAK256_RLP_S="56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",r.KECCAK256_RLP=f.from(r.KECCAK256_RLP_S,"hex")},14538:function(e,r,t){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,r,t,n){void 0===n&&(n=t),Object.defineProperty(e,n,{enumerable:!0,get:function(){return r[t]}})}:function(e,r,t,n){void 0===n&&(n=t),e[n]=r[t]}),f=this&&this.__setModuleDefault||(Object.create?function(e,r){Object.defineProperty(e,"default",{enumerable:!0,value:r})}:function(e,r){e.default=r}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&n(r,e,t);return f(r,e),r},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0}),r.rlp=r.BN=void 0;var u=o(t(13550));r.BN=u.default;var a=i(t(51675));r.rlp=a},45641:function(e,r,t){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,r,t,n){void 0===n&&(n=t),Object.defineProperty(e,n,{enumerable:!0,get:function(){return r[t]}})}:function(e,r,t,n){void 0===n&&(n=t),e[n]=r[t]}),f=this&&this.__setModuleDefault||(Object.create?function(e,r){Object.defineProperty(e,"default",{enumerable:!0,value:r})}:function(e,r){e.default=r}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&n(r,e,t);return f(r,e),r};Object.defineProperty(r,"__esModule",{value:!0}),r.rlphash=r.ripemd160FromArray=r.ripemd160FromString=r.ripemd160=r.sha256FromArray=r.sha256FromString=r.sha256=r.keccakFromArray=r.keccakFromHexString=r.keccakFromString=r.keccak256=r.keccak=void 0;var o=t(82192),u=t(23482),a=i(t(51675)),s=t(14651),c=t(63746);r.keccak=function(e,r){switch(void 0===r&&(r=256),(0,c.assertIsBuffer)(e),r){case 224:return(0,o.keccak224)(e);case 256:return(0,o.keccak256)(e);case 384:return(0,o.keccak384)(e);case 512:return(0,o.keccak512)(e);default:throw new Error("Invald algorithm: keccak"+r)}},r.keccak256=function(e){return(0,r.keccak)(e)},r.keccakFromString=function(e,t){void 0===t&&(t=256),(0,c.assertIsString)(e);var n=Buffer.from(e,"utf8");return(0,r.keccak)(n,t)},r.keccakFromHexString=function(e,t){return void 0===t&&(t=256),(0,c.assertIsHexString)(e),(0,r.keccak)((0,s.toBuffer)(e),t)},r.keccakFromArray=function(e,t){return void 0===t&&(t=256),(0,c.assertIsArray)(e),(0,r.keccak)((0,s.toBuffer)(e),t)};var d=function(e){return e=(0,s.toBuffer)(e),u("sha256").update(e).digest()};r.sha256=function(e){return(0,c.assertIsBuffer)(e),d(e)},r.sha256FromString=function(e){return(0,c.assertIsString)(e),d(e)},r.sha256FromArray=function(e){return(0,c.assertIsArray)(e),d(e)};var l=function(e,r){e=(0,s.toBuffer)(e);var t=u("rmd160").update(e).digest();return!0===r?(0,s.setLengthLeft)(t,32):t};r.ripemd160=function(e,r){return(0,c.assertIsBuffer)(e),l(e,r)},r.ripemd160FromString=function(e,r){return(0,c.assertIsString)(e),l(e,r)},r.ripemd160FromArray=function(e,r){return(0,c.assertIsArray)(e),l(e,r)},r.rlphash=function(e){return(0,r.keccak)(a.encode(e))}},63746:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.assertIsString=r.assertIsArray=r.assertIsBuffer=r.assertIsHexString=void 0;var n=t(54846);r.assertIsHexString=function(e){if(!(0,n.isHexString)(e))throw new Error("This method only supports 0x-prefixed hex strings but input was: "+e)},r.assertIsBuffer=function(e){if(!Buffer.isBuffer(e))throw new Error("This method only supports Buffer but input was: "+e)},r.assertIsArray=function(e){if(!Array.isArray(e))throw new Error("This method only supports number arrays but input was: "+e)},r.assertIsString=function(e){if("string"!=typeof e)throw new Error("This method only supports strings but input was: "+e)}},22751:function(e,r,t){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,r,t,n){void 0===n&&(n=t),Object.defineProperty(e,n,{enumerable:!0,get:function(){return r[t]}})}:function(e,r,t,n){void 0===n&&(n=t),e[n]=r[t]}),f=this&&this.__exportStar||function(e,r){for(var t in e)"default"===t||Object.prototype.hasOwnProperty.call(r,t)||n(r,e,t)};Object.defineProperty(r,"__esModule",{value:!0}),r.isHexString=r.getKeys=r.fromAscii=r.fromUtf8=r.toAscii=r.arrayContainsArray=r.getBinarySize=r.padToEven=r.stripHexPrefix=r.isHexPrefixed=void 0,f(t(56861),r),f(t(48670),r),f(t(6871),r),f(t(45641),r),f(t(77112),r),f(t(14651),r),f(t(80867),r),f(t(14538),r),f(t(2971),r);var i=t(54846);Object.defineProperty(r,"isHexPrefixed",{enumerable:!0,get:function(){return i.isHexPrefixed}}),Object.defineProperty(r,"stripHexPrefix",{enumerable:!0,get:function(){return i.stripHexPrefix}}),Object.defineProperty(r,"padToEven",{enumerable:!0,get:function(){return i.padToEven}}),Object.defineProperty(r,"getBinarySize",{enumerable:!0,get:function(){return i.getBinarySize}}),Object.defineProperty(r,"arrayContainsArray",{enumerable:!0,get:function(){return i.arrayContainsArray}}),Object.defineProperty(r,"toAscii",{enumerable:!0,get:function(){return i.toAscii}}),Object.defineProperty(r,"fromUtf8",{enumerable:!0,get:function(){return i.fromUtf8}}),Object.defineProperty(r,"fromAscii",{enumerable:!0,get:function(){return i.fromAscii}}),Object.defineProperty(r,"getKeys",{enumerable:!0,get:function(){return i.getKeys}}),Object.defineProperty(r,"isHexString",{enumerable:!0,get:function(){return i.isHexString}})},54846:(e,r)=>{"use strict";function t(e){if("string"!=typeof e)throw new Error("[isHexPrefixed] input must be type 'string', received type "+typeof e);return"0"===e[0]&&"x"===e[1]}function n(e){var r=e;if("string"!=typeof r)throw new Error("[padToEven] value must be type 'string', received "+typeof r);return r.length%2&&(r="0"+r),r}Object.defineProperty(r,"__esModule",{value:!0}),r.isHexString=r.getKeys=r.fromAscii=r.fromUtf8=r.toAscii=r.arrayContainsArray=r.getBinarySize=r.padToEven=r.stripHexPrefix=r.isHexPrefixed=void 0,r.isHexPrefixed=t,r.stripHexPrefix=function(e){if("string"!=typeof e)throw new Error("[stripHexPrefix] input must be type 'string', received "+typeof e);return t(e)?e.slice(2):e},r.padToEven=n,r.getBinarySize=function(e){if("string"!=typeof e)throw new Error("[getBinarySize] method requires input type 'string', recieved "+typeof e);return Buffer.byteLength(e,"utf8")},r.arrayContainsArray=function(e,r,t){if(!0!==Array.isArray(e))throw new Error("[arrayContainsArray] method requires input 'superset' to be an array, got type '"+typeof e+"'");if(!0!==Array.isArray(r))throw new Error("[arrayContainsArray] method requires input 'subset' to be an array, got type '"+typeof r+"'");return r[t?"some":"every"]((function(r){return e.indexOf(r)>=0}))},r.toAscii=function(e){var r="",t=0,n=e.length;for("0x"===e.substring(0,2)&&(t=2);t<n;t+=2){var f=parseInt(e.substr(t,2),16);r+=String.fromCharCode(f)}return r},r.fromUtf8=function(e){return"0x"+n(Buffer.from(e,"utf8").toString("hex")).replace(/^0+|0+$/g,"")},r.fromAscii=function(e){for(var r="",t=0;t<e.length;t++){var n=e.charCodeAt(t).toString(16);r+=n.length<2?"0"+n:n}return"0x"+r},r.getKeys=function(e,r,t){if(!Array.isArray(e))throw new Error("[getKeys] method expects input 'params' to be an array, got "+typeof e);if("string"!=typeof r)throw new Error("[getKeys] method expects input 'key' to be type 'string', got "+typeof e);for(var n=[],f=0;f<e.length;f++){var i=e[f][r];if(t&&!i)i="";else if("string"!=typeof i)throw new Error("invalid abi - expected type 'string', received "+typeof i);n.push(i)}return n},r.isHexString=function(e,r){return!("string"!=typeof e||!e.match(/^0x[0-9A-Fa-f]*$/)||r&&e.length!==2+2*r)}},80867:function(e,r,t){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,r,t,n){void 0===n&&(n=t),Object.defineProperty(e,n,{enumerable:!0,get:function(){return r[t]}})}:function(e,r,t,n){void 0===n&&(n=t),e[n]=r[t]}),f=this&&this.__setModuleDefault||(Object.create?function(e,r){Object.defineProperty(e,"default",{enumerable:!0,value:r})}:function(e,r){e.default=r}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&n(r,e,t);return f(r,e),r},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0}),r.defineProperties=void 0;var u=o(t(48583)),a=t(54846),s=i(t(51675)),c=t(14651);r.defineProperties=function(e,r,t){if(e.raw=[],e._fields=[],e.toJSON=function(r){if(void 0===r&&(r=!1),r){var t={};return e._fields.forEach((function(r){t[r]="0x"+e[r].toString("hex")})),t}return(0,c.baToJSON)(e.raw)},e.serialize=function(){return s.encode(e.raw)},r.forEach((function(r,t){function n(){return e.raw[t]}function f(n){"00"!==(n=(0,c.toBuffer)(n)).toString("hex")||r.allowZero||(n=Buffer.allocUnsafe(0)),r.allowLess&&r.length?(n=(0,c.unpadBuffer)(n),(0,u.default)(r.length>=n.length,"The field "+r.name+" must not have more "+r.length+" bytes")):r.allowZero&&0===n.length||!r.length||(0,u.default)(r.length===n.length,"The field "+r.name+" must have byte length of "+r.length),e.raw[t]=n}e._fields.push(r.name),Object.defineProperty(e,r.name,{enumerable:!0,configurable:!0,get:n,set:f}),r.default&&(e[r.name]=r.default),r.alias&&Object.defineProperty(e,r.alias,{enumerable:!1,configurable:!0,set:f,get:n})})),t)if("string"==typeof t&&(t=Buffer.from((0,a.stripHexPrefix)(t),"hex")),Buffer.isBuffer(t)&&(t=s.decode(t)),Array.isArray(t)){if(t.length>e._fields.length)throw new Error("wrong number of fields in data");t.forEach((function(r,t){e[e._fields[t]]=(0,c.toBuffer)(r)}))}else{if("object"!=typeof t)throw new Error("invalid data");var n=Object.keys(t);r.forEach((function(r){-1!==n.indexOf(r.name)&&(e[r.name]=t[r.name]),-1!==n.indexOf(r.alias)&&(e[r.alias]=t[r.alias])}))}}},77112:function(e,r,t){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0}),r.hashPersonalMessage=r.isValidSignature=r.fromRpcSig=r.toCompactSig=r.toRpcSig=r.ecrecover=r.ecsign=void 0;var f=t(95053),i=n(t(13550)),o=t(14651),u=t(45641),a=t(63746),s=t(2971);function c(e,r){var t=(0,s.toType)(e,s.TypeOutput.BN);if(!r)return t.subn(27);var n=(0,s.toType)(r,s.TypeOutput.BN);return t.sub(n.muln(2).addn(35))}function d(e){var r=new i.default(e);return r.eqn(0)||r.eqn(1)}r.ecsign=function(e,r,t){var n=(0,f.ecdsaSign)(e,r),i=n.signature,o=n.recid,u=Buffer.from(i.slice(0,32)),a=Buffer.from(i.slice(32,64));if(!t||"number"==typeof t){if(t&&!Number.isSafeInteger(t))throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");return{r:u,s:a,v:t?o+(2*t+35):o+27}}return{r:u,s:a,v:(0,s.toType)(t,s.TypeOutput.BN).muln(2).addn(35).addn(o).toArrayLike(Buffer)}},r.ecrecover=function(e,r,t,n,i){var u=Buffer.concat([(0,o.setLengthLeft)(t,32),(0,o.setLengthLeft)(n,32)],64),a=c(r,i);if(!d(a))throw new Error("Invalid signature v value");var s=(0,f.ecdsaRecover)(u,a.toNumber(),e);return Buffer.from((0,f.publicKeyConvert)(s,!1).slice(1))},r.toRpcSig=function(e,r,t,n){if(!d(c(e,n)))throw new Error("Invalid signature v value");return(0,o.bufferToHex)(Buffer.concat([(0,o.setLengthLeft)(r,32),(0,o.setLengthLeft)(t,32),(0,o.toBuffer)(e)]))},r.toCompactSig=function(e,r,t,n){if(!d(c(e,n)))throw new Error("Invalid signature v value");var f=(0,s.toType)(e,s.TypeOutput.Number),i=t;return(f>28&&f%2==1||1===f||28===f)&&((i=Buffer.from(t))[0]|=128),(0,o.bufferToHex)(Buffer.concat([(0,o.setLengthLeft)(r,32),(0,o.setLengthLeft)(i,32)]))},r.fromRpcSig=function(e){var r,t,n,f=(0,o.toBuffer)(e);if(f.length>=65)r=f.slice(0,32),t=f.slice(32,64),n=(0,o.bufferToInt)(f.slice(64));else{if(64!==f.length)throw new Error("Invalid signature length");r=f.slice(0,32),t=f.slice(32,64),n=(0,o.bufferToInt)(f.slice(32,33))>>7,t[0]&=127}return n<27&&(n+=27),{v:n,r,s:t}},r.isValidSignature=function(e,r,t,n,f){void 0===n&&(n=!0);var o=new i.default("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0",16),u=new i.default("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",16);if(32!==r.length||32!==t.length)return!1;if(!d(c(e,f)))return!1;var a=new i.default(r),s=new i.default(t);return!(a.isZero()||a.gt(u)||s.isZero()||s.gt(u)||n&&1===s.cmp(o))},r.hashPersonalMessage=function(e){(0,a.assertIsBuffer)(e);var r=Buffer.from("Ethereum Signed Message:\n"+e.length,"utf-8");return(0,u.keccak)(Buffer.concat([r,e]))}},2971:function(e,r,t){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0}),r.toType=r.TypeOutput=r.bnToRlp=r.bnToUnpaddedBuffer=r.bnToHex=void 0;var f,i=n(t(13550)),o=t(54846),u=t(14651);function a(e){return(0,u.unpadBuffer)(e.toArrayLike(Buffer))}r.bnToHex=function(e){return"0x"+e.toString(16)},r.bnToUnpaddedBuffer=a,r.bnToRlp=function(e){return a(e)},function(e){e[e.Number=0]="Number",e[e.BN=1]="BN",e[e.Buffer=2]="Buffer",e[e.PrefixedHexString=3]="PrefixedHexString"}(f=r.TypeOutput||(r.TypeOutput={})),r.toType=function(e,r){if(null===e)return null;if(void 0!==e){if("string"==typeof e&&!(0,o.isHexString)(e))throw new Error("A string must be provided with a 0x-prefix, given: "+e);if("number"==typeof e&&!Number.isSafeInteger(e))throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");var t=(0,u.toBuffer)(e);if(r===f.Buffer)return t;if(r===f.BN)return new i.default(t);if(r===f.Number){var n=new i.default(t),a=new i.default(Number.MAX_SAFE_INTEGER.toString());if(n.gt(a))throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");return n.toNumber()}return"0x"+t.toString("hex")}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0LmJyb3dzZXIvYWNjb3VudC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0LmJyb3dzZXIvYWRkcmVzcy5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0LmJyb3dzZXIvYnl0ZXMuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLXV0aWwvZGlzdC5icm93c2VyL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0LmJyb3dzZXIvZXh0ZXJuYWxzLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3QuYnJvd3Nlci9oYXNoLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3QuYnJvd3Nlci9oZWxwZXJzLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3QuYnJvd3Nlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0LmJyb3dzZXIvaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLXV0aWwvZGlzdC5icm93c2VyL29iamVjdC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0LmJyb3dzZXIvc2lnbmF0dXJlLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3QuYnJvd3Nlci90eXBlcy5qcyJdLCJuYW1lcyI6WyJfX2NyZWF0ZUJpbmRpbmciLCJ0aGlzIiwiT2JqZWN0IiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJfX3NldE1vZHVsZURlZmF1bHQiLCJ2IiwidmFsdWUiLCJfX2ltcG9ydFN0YXIiLCJtb2QiLCJfX2VzTW9kdWxlIiwicmVzdWx0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiX19yZWFkIiwibiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiciIsImUiLCJpIiwiYXIiLCJuZXh0IiwiZG9uZSIsInB1c2giLCJlcnJvciIsIl9faW1wb3J0RGVmYXVsdCIsImV4cG9ydHMiLCJpc1plcm9BZGRyZXNzIiwiemVyb0FkZHJlc3MiLCJpbXBvcnRQdWJsaWMiLCJwcml2YXRlVG9BZGRyZXNzIiwicHJpdmF0ZVRvUHVibGljIiwicHVibGljVG9BZGRyZXNzIiwicHViVG9BZGRyZXNzIiwiaXNWYWxpZFB1YmxpYyIsImlzVmFsaWRQcml2YXRlIiwiZ2VuZXJhdGVBZGRyZXNzMiIsImdlbmVyYXRlQWRkcmVzcyIsImlzVmFsaWRDaGVja3N1bUFkZHJlc3MiLCJ0b0NoZWNrc3VtQWRkcmVzcyIsImlzVmFsaWRBZGRyZXNzIiwiQWNjb3VudCIsImFzc2VydF8xIiwiYm5fanNfMSIsInJscCIsInNlY3AyNTZrMV8xIiwiaW50ZXJuYWxfMSIsImNvbnN0YW50c18xIiwiYnl0ZXNfMSIsImhhc2hfMSIsImhlbHBlcnNfMSIsInR5cGVzXzEiLCJub25jZSIsImJhbGFuY2UiLCJzdGF0ZVJvb3QiLCJjb2RlSGFzaCIsImRlZmF1bHQiLCJLRUNDQUsyNTZfUkxQIiwiS0VDQ0FLMjU2X05VTEwiLCJfdmFsaWRhdGUiLCJmcm9tQWNjb3VudERhdGEiLCJhY2NvdW50RGF0YSIsInRvQnVmZmVyIiwiZnJvbVJscFNlcmlhbGl6ZWRBY2NvdW50Iiwic2VyaWFsaXplZCIsInZhbHVlcyIsImRlY29kZSIsIkFycmF5IiwiaXNBcnJheSIsIkVycm9yIiwiZnJvbVZhbHVlc0FycmF5IiwiX2EiLCJsdCIsImxlbmd0aCIsInJhdyIsImJuVG9VbnBhZGRlZEJ1ZmZlciIsInNlcmlhbGl6ZSIsImVuY29kZSIsImlzQ29udHJhY3QiLCJlcXVhbHMiLCJpc0VtcHR5IiwiaXNaZXJvIiwiaGV4QWRkcmVzcyIsImFzc2VydElzU3RyaW5nIiwidGVzdCIsImVpcDExOTFDaGFpbklkIiwiYXNzZXJ0SXNIZXhTdHJpbmciLCJhZGRyZXNzIiwic3RyaXBIZXhQcmVmaXgiLCJ0b0xvd2VyQ2FzZSIsInByZWZpeCIsInRvVHlwZSIsIlR5cGVPdXRwdXQiLCJCTiIsInRvU3RyaW5nIiwiaGFzaCIsImtlY2Nha0Zyb21TdHJpbmciLCJyZXQiLCJwYXJzZUludCIsInRvVXBwZXJDYXNlIiwiZnJvbSIsImFzc2VydElzQnVmZmVyIiwibm9uY2VCTiIsInJscGhhc2giLCJzbGljZSIsIkJ1ZmZlciIsInRvQXJyYXkiLCJzYWx0IiwiaW5pdENvZGUiLCJrZWNjYWsyNTYiLCJjb25jYXQiLCJwcml2YXRlS2V5IiwicHJpdmF0ZUtleVZlcmlmeSIsInB1YmxpY0tleSIsInNhbml0aXplIiwicHVibGljS2V5VmVyaWZ5IiwicHViS2V5IiwicHVibGljS2V5Q29udmVydCIsImtlY2NhayIsInB1YmxpY0tleUNyZWF0ZSIsImFkZHIiLCJ6ZXJvcyIsImJ1ZmZlclRvSGV4IiwiQWRkcmVzcyIsImFjY291bnRfMSIsImJ1ZiIsInplcm8iLCJmcm9tU3RyaW5nIiwic3RyIiwiZnJvbVB1YmxpY0tleSIsImlzQnVmZmVyIiwiZnJvbVByaXZhdGVLZXkiLCJnZW5lcmF0ZSIsImlzQk4iLCJ0b0FycmF5TGlrZSIsImdlbmVyYXRlMiIsImlzUHJlY29tcGlsZU9yU3lzdGVtQWRkcmVzcyIsImFkZHJlc3NCTiIsInJhbmdlTWluIiwicmFuZ2VNYXgiLCJndGUiLCJsdGUiLCJiYVRvSlNPTiIsInRvVXRmOCIsImFkZEhleFByZWZpeCIsInRvVW5zaWduZWQiLCJmcm9tU2lnbmVkIiwiYnVmZmVyVG9JbnQiLCJ1bnBhZEhleFN0cmluZyIsInVucGFkQXJyYXkiLCJ1bnBhZEJ1ZmZlciIsInNldExlbmd0aFJpZ2h0Iiwic2V0TGVuZ3RoTGVmdCIsImludFRvQnVmZmVyIiwiaW50VG9IZXgiLCJOdW1iZXIiLCJpc1NhZmVJbnRlZ2VyIiwiaGV4IiwicGFkVG9FdmVuIiwiYnl0ZXMiLCJhbGxvY1Vuc2FmZSIsImZpbGwiLCJzZXRMZW5ndGgiLCJtc2ciLCJyaWdodCIsImNvcHkiLCJzdHJpcFplcm9zIiwiYSIsImZpcnN0IiwiYXNzZXJ0SXNBcnJheSIsIlVpbnQ4QXJyYXkiLCJpc0hleFN0cmluZyIsInRvTnVtYmVyIiwibnVtIiwiZnJvbVR3b3MiLCJ0b1R3b3MiLCJpc0hleFByZWZpeGVkIiwicmVwbGFjZSIsImJhIiwiYXJyYXkiLCJLRUNDQUsyNTZfUkxQX1MiLCJLRUNDQUsyNTZfUkxQX0FSUkFZIiwiS0VDQ0FLMjU2X1JMUF9BUlJBWV9TIiwiS0VDQ0FLMjU2X05VTExfUyIsIlRXT19QT1cyNTYiLCJNQVhfSU5URUdFUiIsInJpcGVtZDE2MEZyb21BcnJheSIsInJpcGVtZDE2MEZyb21TdHJpbmciLCJyaXBlbWQxNjAiLCJzaGEyNTZGcm9tQXJyYXkiLCJzaGEyNTZGcm9tU3RyaW5nIiwic2hhMjU2Iiwia2VjY2FrRnJvbUFycmF5Iiwia2VjY2FrRnJvbUhleFN0cmluZyIsImtlY2Nha18xIiwiY3JlYXRlSGFzaCIsImJpdHMiLCJrZWNjYWsyMjQiLCJrZWNjYWszODQiLCJrZWNjYWs1MTIiLCJfc2hhMjU2IiwidXBkYXRlIiwiZGlnZXN0IiwiX3JpcGVtZDE2MCIsInBhZGRlZCIsImlucHV0IiwiX19leHBvcnRTdGFyIiwicCIsImdldEtleXMiLCJmcm9tQXNjaWkiLCJmcm9tVXRmOCIsInRvQXNjaWkiLCJhcnJheUNvbnRhaW5zQXJyYXkiLCJnZXRCaW5hcnlTaXplIiwiYnl0ZUxlbmd0aCIsInN1cGVyc2V0Iiwic3Vic2V0Iiwic29tZSIsImluZGV4T2YiLCJsIiwic3Vic3RyaW5nIiwiY29kZSIsInN1YnN0ciIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInN0cmluZ1ZhbHVlIiwiY2hhckNvZGVBdCIsInBhcmFtcyIsImtleSIsImFsbG93RW1wdHkiLCJtYXRjaCIsImRlZmluZVByb3BlcnRpZXMiLCJzZWxmIiwiZmllbGRzIiwiZGF0YSIsIl9maWVsZHMiLCJ0b0pTT04iLCJsYWJlbCIsIm9ial8xIiwiZm9yRWFjaCIsImZpZWxkIiwiZ2V0dGVyIiwic2V0dGVyIiwiYWxsb3daZXJvIiwiYWxsb3dMZXNzIiwibmFtZSIsImNvbmZpZ3VyYWJsZSIsInNldCIsImFsaWFzIiwiZCIsImtleXNfMSIsImtleXMiLCJoYXNoUGVyc29uYWxNZXNzYWdlIiwiaXNWYWxpZFNpZ25hdHVyZSIsImZyb21ScGNTaWciLCJ0b0NvbXBhY3RTaWciLCJ0b1JwY1NpZyIsImVjcmVjb3ZlciIsImVjc2lnbiIsImNhbGN1bGF0ZVNpZ1JlY292ZXJ5IiwiY2hhaW5JZCIsInZCTiIsInN1Ym4iLCJjaGFpbklkQk4iLCJzdWIiLCJtdWxuIiwiYWRkbiIsImlzVmFsaWRTaWdSZWNvdmVyeSIsInJlY292ZXJ5IiwicmVjIiwiZXFuIiwibXNnSGFzaCIsImVjZHNhU2lnbiIsInNpZ25hdHVyZSIsInJlY2lkIiwicyIsInNlbmRlclB1YktleSIsImVjZHNhUmVjb3ZlciIsInZuIiwic3MiLCJzaWciLCJob21lc3RlYWRPckxhdGVyIiwiU0VDUDI1NksxX05fRElWXzIiLCJTRUNQMjU2SzFfTiIsInJCTiIsInNCTiIsImd0IiwiY21wIiwibWVzc2FnZSIsImJuVG9SbHAiLCJiblRvSGV4Iiwib3V0cHV0VHlwZSIsIm91dHB1dCIsImJuIiwibWF4IiwiTUFYX1NBRkVfSU5URUdFUiJdLCJtYXBwaW5ncyI6InlHQUNBLElBQUlBLEVBQW1CQyxNQUFRQSxLQUFLRCxrQkFBcUJFLE9BQU9DLE9BQVMsU0FBVUMsRUFBR0MsRUFBR0MsRUFBR0Ms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QWFqQ3BFLEVBQVFpRCxtQkFBcUJBLEVBUTdCakQsRUFBUXVRLFFBSFIsU0FBaUI1UixHQUNiLE9BQU9zRSxFQUFtQnRFLElBTzlCLFNBQVd1RixHQUNQQSxFQUFXQSxFQUFtQixPQUFJLEdBQUssU0FDdkNBLEVBQVdBLEVBQWUsR0FBSSxHQUFLLEtBQ25DQSxFQUFXQSxFQUFtQixPQUFJLEdBQUssU0FDdkNBLEVBQVdBLEVBQThCLGtCQUFJLEdBQUssb0JBSnRELENBS0dBLEVBQWFsRSxFQUFRa0UsYUFBZWxFLEVBQVFrRSxXQUFhLEtBa0M1RGxFLEVBQVFpRSxPQWpDUixTQUFnQmtILEVBQU9zRixHQUNuQixHQUFjLE9BQVZ0RixFQUNBLE9BQU8sS0FFWCxRQUFjOU0sSUFBVjhNLEVBQUosQ0FHQSxHQUFxQixpQkFBVkEsS0FBdUIsRUFBSS9KLEVBQVc2SCxhQUFha0MsR0FDMUQsTUFBTSxJQUFJeEksTUFBTSxzREFBd0R3SSxHQUV2RSxHQUFxQixpQkFBVkEsSUFBdUJsRCxPQUFPQyxjQUFjaUQsR0FDeEQsTUFBTSxJQUFJeEksTUFBTSwrRkFFcEIsSUFBSStOLEdBQVMsRUFBSXBQLEVBQVFjLFVBQVUrSSxHQUNuQyxHQUFJc0YsSUFBZXZNLEVBQVdhLE9BQzFCLE9BQU8yTCxFQUVOLEdBQUlELElBQWV2TSxFQUFXQyxHQUMvQixPQUFPLElBQUlsRCxFQUFRYSxRQUFRNE8sR0FFMUIsR0FBSUQsSUFBZXZNLEVBQVcrRCxPQUFRLENBQ3ZDLElBQUkwSSxFQUFLLElBQUkxUCxFQUFRYSxRQUFRNE8sR0FDekJFLEVBQU0sSUFBSTNQLEVBQVFhLFFBQVFtRyxPQUFPNEksaUJBQWlCek0sWUFDdEQsR0FBSXVNLEVBQUdQLEdBQUdRLEdBQ04sTUFBTSxJQUFJak8sTUFBTSxnR0FFcEIsT0FBT2dPLEVBQUd6SCxXQUlWLE1BQU8sS0FBT3dILEVBQU90TSxTQUFTIiwiZmlsZSI6IjI3NTEubWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzWmVyb0FkZHJlc3MgPSBleHBvcnRzLnplcm9BZGRyZXNzID0gZXhwb3J0cy5pbXBvcnRQdWJsaWMgPSBleHBvcnRzLnByaXZhdGVUb0FkZHJlc3MgPSBleHBvcnRzLnByaXZhdGVUb1B1YmxpYyA9IGV4cG9ydHMucHVibGljVG9BZGRyZXNzID0gZXhwb3J0cy5wdWJUb0FkZHJlc3MgPSBleHBvcnRzLmlzVmFsaWRQdWJsaWMgPSBleHBvcnRzLmlzVmFsaWRQcml2YXRlID0gZXhwb3J0cy5nZW5lcmF0ZUFkZHJlc3MyID0gZXhwb3J0cy5nZW5lcmF0ZUFkZHJlc3MgPSBleHBvcnRzLmlzVmFsaWRDaGVja3N1bUFkZHJlc3MgPSBleHBvcnRzLnRvQ2hlY2tzdW1BZGRyZXNzID0gZXhwb3J0cy5pc1ZhbGlkQWRkcmVzcyA9IGV4cG9ydHMuQWNjb3VudCA9IHZvaWQgMDtcbnZhciBhc3NlcnRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYXNzZXJ0XCIpKTtcbnZhciBibl9qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJibi5qc1wiKSk7XG52YXIgcmxwID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJybHBcIikpO1xudmFyIHNlY3AyNTZrMV8xID0gcmVxdWlyZShcImV0aGVyZXVtLWNyeXB0b2dyYXBoeS9zZWNwMjU2azFcIik7XG52YXIgaW50ZXJuYWxfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsXCIpO1xudmFyIGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xudmFyIGJ5dGVzXzEgPSByZXF1aXJlKFwiLi9ieXRlc1wiKTtcbnZhciBoYXNoXzEgPSByZXF1aXJlKFwiLi9oYXNoXCIpO1xudmFyIGhlbHBlcnNfMSA9IHJlcXVpcmUoXCIuL2hlbHBlcnNcIik7XG52YXIgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xudmFyIEFjY291bnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogVGhpcyBjb25zdHJ1Y3RvciBhc3NpZ25zIGFuZCB2YWxpZGF0ZXMgdGhlIHZhbHVlcy5cbiAgICAgKiBVc2UgdGhlIHN0YXRpYyBmYWN0b3J5IG1ldGhvZHMgdG8gYXNzaXN0IGluIGNyZWF0aW5nIGFuIEFjY291bnQgZnJvbSB2YXJ5aW5nIGRhdGEgdHlwZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gQWNjb3VudChub25jZSwgYmFsYW5jZSwgc3RhdGVSb290LCBjb2RlSGFzaCkge1xuICAgICAgICBpZiAobm9uY2UgPT09IHZvaWQgMCkgeyBub25jZSA9IG5ldyBibl9qc18xLmRlZmF1bHQoMCk7IH1cbiAgICAgICAgaWYgKGJhbGFuY2UgPT09IHZvaWQgMCkgeyBiYWxhbmNlID0gbmV3IGJuX2pzXzEuZGVmYXVsdCgwKTsgfVxuICAgICAgICBpZiAoc3RhdGVSb290ID09PSB2b2lkIDApIHsgc3RhdGVSb290ID0gY29uc3RhbnRzXzEuS0VDQ0FLMjU2X1JMUDsgfVxuICAgICAgICBpZiAoY29kZUhhc2ggPT09IHZvaWQgMCkgeyBjb2RlSGFzaCA9IGNvbnN0YW50c18xLktFQ0NBSzI1Nl9OVUxMOyB9XG4gICAgICAgIHRoaXMubm9uY2UgPSBub25jZTtcbiAgICAgICAgdGhpcy5iYWxhbmNlID0gYmFsYW5jZTtcbiAgICAgICAgdGhpcy5zdGF0ZVJvb3QgPSBzdGF0ZVJvb3Q7XG4gICAgICAgIHRoaXMuY29kZUhhc2ggPSBjb2RlSGFzaDtcbiAgICAgICAgdGhpcy5fdmFsaWRhdGUoKTtcbiAgICB9XG4gICAgQWNjb3VudC5mcm9tQWNjb3VudERhdGEgPSBmdW5jdGlvbiAoYWNjb3VudERhdGEpIHtcbiAgICAgICAgdmFyIG5vbmNlID0gYWNjb3VudERhdGEubm9uY2UsIGJhbGFuY2UgPSBhY2NvdW50RGF0YS5iYWxhbmNlLCBzdGF0ZVJvb3QgPSBhY2NvdW50RGF0YS5zdGF0ZVJvb3QsIGNvZGVIYXNoID0gYWNjb3VudERhdGEuY29kZUhhc2g7XG4gICAgICAgIHJldHVybiBuZXcgQWNjb3VudChub25jZSA/IG5ldyBibl9qc18xLmRlZmF1bHQoKDAsIGJ5dGVzXzEudG9CdWZmZXIpKG5vbmNlKSkgOiB1bmRlZmluZWQsIGJhbGFuY2UgPyBuZXcgYm5fanNfMS5kZWZhdWx0KCgwLCBieXRlc18xLnRvQnVmZmVyKShiYWxhbmNlKSkgOiB1bmRlZmluZWQsIHN0YXRlUm9vdCA/ICgwLCBieXRlc18xLnRvQnVmZmVyKShzdGF0ZVJvb3QpIDogdW5kZWZpbmVkLCBjb2RlSGFzaCA/ICgwLCBieXRlc18xLnRvQnVmZmVyKShjb2RlSGFzaCkgOiB1bmRlZmluZWQpO1xuICAgIH07XG4gICAgQWNjb3VudC5mcm9tUmxwU2VyaWFsaXplZEFjY291bnQgPSBmdW5jdGlvbiAoc2VyaWFsaXplZCkge1xuICAgICAgICB2YXIgdmFsdWVzID0gcmxwLmRlY29kZShzZXJpYWxpemVkKTtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzZXJpYWxpemVkIGFjY291bnQgaW5wdXQuIE11c3QgYmUgYXJyYXknKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5mcm9tVmFsdWVzQXJyYXkodmFsdWVzKTtcbiAgICB9O1xuICAgIEFjY291bnQuZnJvbVZhbHVlc0FycmF5ID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgICB2YXIgX2EgPSBfX3JlYWQodmFsdWVzLCA0KSwgbm9uY2UgPSBfYVswXSwgYmFsYW5jZSA9IF9hWzFdLCBzdGF0ZVJvb3QgPSBfYVsyXSwgY29kZUhhc2ggPSBfYVszXTtcbiAgICAgICAgcmV0dXJuIG5ldyBBY2NvdW50KG5ldyBibl9qc18xLmRlZmF1bHQobm9uY2UpLCBuZXcgYm5fanNfMS5kZWZhdWx0KGJhbGFuY2UpLCBzdGF0ZVJvb3QsIGNvZGVIYXNoKTtcbiAgICB9O1xuICAgIEFjY291bnQucHJvdG90eXBlLl92YWxpZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMubm9uY2UubHQobmV3IGJuX2pzXzEuZGVmYXVsdCgwKSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm9uY2UgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVybycpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmJhbGFuY2UubHQobmV3IGJuX2pzXzEuZGVmYXVsdCgwKSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYmFsYW5jZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RhdGVSb290Lmxlbmd0aCAhPT0gMzIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc3RhdGVSb290IG11c3QgaGF2ZSBhIGxlbmd0aCBvZiAzMicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNvZGVIYXNoLmxlbmd0aCAhPT0gMzIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY29kZUhhc2ggbXVzdCBoYXZlIGEgbGVuZ3RoIG9mIDMyJyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBCdWZmZXIgQXJyYXkgb2YgdGhlIHJhdyBCdWZmZXJzIGZvciB0aGUgYWNjb3VudCwgaW4gb3JkZXIuXG4gICAgICovXG4gICAgQWNjb3VudC5wcm90b3R5cGUucmF3ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgKDAsIHR5cGVzXzEuYm5Ub1VucGFkZGVkQnVmZmVyKSh0aGlzLm5vbmNlKSxcbiAgICAgICAgICAgICgwLCB0eXBlc18xLmJuVG9VbnBhZGRlZEJ1ZmZlcikodGhpcy5iYWxhbmNlKSxcbiAgICAgICAgICAgIHRoaXMuc3RhdGVSb290LFxuICAgICAgICAgICAgdGhpcy5jb2RlSGFzaCxcbiAgICAgICAgXTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIFJMUCBzZXJpYWxpemF0aW9uIG9mIHRoZSBhY2NvdW50IGFzIGEgYEJ1ZmZlcmAuXG4gICAgICovXG4gICAgQWNjb3VudC5wcm90b3R5cGUuc2VyaWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcmxwLmVuY29kZSh0aGlzLnJhdygpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBgQm9vbGVhbmAgZGV0ZXJtaW5pbmcgaWYgdGhlIGFjY291bnQgaXMgYSBjb250cmFjdC5cbiAgICAgKi9cbiAgICBBY2NvdW50LnByb3RvdHlwZS5pc0NvbnRyYWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuY29kZUhhc2guZXF1YWxzKGNvbnN0YW50c18xLktFQ0NBSzI1Nl9OVUxMKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBgQm9vbGVhbmAgZGV0ZXJtaW5pbmcgaWYgdGhlIGFjY291bnQgaXMgZW1wdHkgY29tcGx5aW5nIHRvIHRoZSBkZWZpbml0aW9uIG9mXG4gICAgICogYWNjb3VudCBlbXB0aW5lc3MgaW4gW0VJUC0xNjFdKGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMTYxKTpcbiAgICAgKiBcIkFuIGFjY291bnQgaXMgY29uc2lkZXJlZCBlbXB0eSB3aGVuIGl0IGhhcyBubyBjb2RlIGFuZCB6ZXJvIG5vbmNlIGFuZCB6ZXJvIGJhbGFuY2UuXCJcbiAgICAgKi9cbiAgICBBY2NvdW50LnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYWxhbmNlLmlzWmVybygpICYmIHRoaXMubm9uY2UuaXNaZXJvKCkgJiYgdGhpcy5jb2RlSGFzaC5lcXVhbHMoY29uc3RhbnRzXzEuS0VDQ0FLMjU2X05VTEwpO1xuICAgIH07XG4gICAgcmV0dXJuIEFjY291bnQ7XG59KCkpO1xuZXhwb3J0cy5BY2NvdW50ID0gQWNjb3VudDtcbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBhZGRyZXNzIGlzIGEgdmFsaWQuIEFjY2VwdHMgY2hlY2tzdW1tZWQgYWRkcmVzc2VzIHRvby5cbiAqL1xudmFyIGlzVmFsaWRBZGRyZXNzID0gZnVuY3Rpb24gKGhleEFkZHJlc3MpIHtcbiAgICB0cnkge1xuICAgICAgICAoMCwgaGVscGVyc18xLmFzc2VydElzU3RyaW5nKShoZXhBZGRyZXNzKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gL14weFswLTlhLWZBLUZdezQwfSQvLnRlc3QoaGV4QWRkcmVzcyk7XG59O1xuZXhwb3J0cy5pc1ZhbGlkQWRkcmVzcyA9IGlzVmFsaWRBZGRyZXNzO1xuLyoqXG4gKiBSZXR1cm5zIGEgY2hlY2tzdW1tZWQgYWRkcmVzcy5cbiAqXG4gKiBJZiBhbiBlaXAxMTkxQ2hhaW5JZCBpcyBwcm92aWRlZCwgdGhlIGNoYWluSWQgd2lsbCBiZSBpbmNsdWRlZCBpbiB0aGUgY2hlY2tzdW0gY2FsY3VsYXRpb24uIFRoaXNcbiAqIGhhcyB0aGUgZWZmZWN0IG9mIGNoZWNrc3VtbWVkIGFkZHJlc3NlcyBmb3Igb25lIGNoYWluIGhhdmluZyBpbnZhbGlkIGNoZWNrc3VtcyBmb3Igb3RoZXJzLlxuICogRm9yIG1vcmUgZGV0YWlscyBzZWUgW0VJUC0xMTkxXShodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTExOTEpLlxuICpcbiAqIFdBUk5JTkc6IENoZWNrc3VtcyB3aXRoIGFuZCB3aXRob3V0IHRoZSBjaGFpbklkIHdpbGwgZGlmZmVyIGFuZCB0aGUgRUlQLTExOTEgY2hlY2tzdW0gaXMgbm90XG4gKiBiYWNrd2FyZHMgY29tcGF0aWJsZSB0byB0aGUgb3JpZ2luYWwgd2lkZWx5IGFkb3B0ZWQgY2hlY2tzdW0gZm9ybWF0IHN0YW5kYXJkIGludHJvZHVjZWQgaW5cbiAqIFtFSVAtNTVdKGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtNTUpLCBzbyB0aGlzIHdpbGwgYnJlYWsgaW4gZXhpc3RpbmcgYXBwbGljYXRpb25zLlxuICogVXNhZ2Ugb2YgdGhpcyBFSVAgaXMgdGhlcmVmb3JlIGRpc2NvdXJhZ2VkIHVubGVzcyB5b3UgaGF2ZSBhIHZlcnkgdGFyZ2V0ZWQgdXNlIGNhc2UuXG4gKi9cbnZhciB0b0NoZWNrc3VtQWRkcmVzcyA9IGZ1bmN0aW9uIChoZXhBZGRyZXNzLCBlaXAxMTkxQ2hhaW5JZCkge1xuICAgICgwLCBoZWxwZXJzXzEuYXNzZXJ0SXNIZXhTdHJpbmcpKGhleEFkZHJlc3MpO1xuICAgIHZhciBhZGRyZXNzID0gKDAsIGludGVybmFsXzEuc3RyaXBIZXhQcmVmaXgpKGhleEFkZHJlc3MpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFyIHByZWZpeCA9ICcnO1xuICAgIGlmIChlaXAxMTkxQ2hhaW5JZCkge1xuICAgICAgICB2YXIgY2hhaW5JZCA9ICgwLCB0eXBlc18xLnRvVHlwZSkoZWlwMTE5MUNoYWluSWQsIHR5cGVzXzEuVHlwZU91dHB1dC5CTik7XG4gICAgICAgIHByZWZpeCA9IGNoYWluSWQudG9TdHJpbmcoKSArICcweCc7XG4gICAgfVxuICAgIHZhciBoYXNoID0gKDAsIGhhc2hfMS5rZWNjYWtGcm9tU3RyaW5nKShwcmVmaXggKyBhZGRyZXNzKS50b1N0cmluZygnaGV4Jyk7XG4gICAgdmFyIHJldCA9ICcweCc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhZGRyZXNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChwYXJzZUludChoYXNoW2ldLCAxNikgPj0gOCkge1xuICAgICAgICAgICAgcmV0ICs9IGFkZHJlc3NbaV0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldCArPSBhZGRyZXNzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59O1xuZXhwb3J0cy50b0NoZWNrc3VtQWRkcmVzcyA9IHRvQ2hlY2tzdW1BZGRyZXNzO1xuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGFkZHJlc3MgaXMgYSB2YWxpZCBjaGVja3N1bW1lZCBhZGRyZXNzLlxuICpcbiAqIFNlZSB0b0NoZWNrc3VtQWRkcmVzcycgZG9jdW1lbnRhdGlvbiBmb3IgZGV0YWlscyBhYm91dCB0aGUgZWlwMTE5MUNoYWluSWQgcGFyYW1ldGVyLlxuICovXG52YXIgaXNWYWxpZENoZWNrc3VtQWRkcmVzcyA9IGZ1bmN0aW9uIChoZXhBZGRyZXNzLCBlaXAxMTkxQ2hhaW5JZCkge1xuICAgIHJldHVybiAoMCwgZXhwb3J0cy5pc1ZhbGlkQWRkcmVzcykoaGV4QWRkcmVzcykgJiYgKDAsIGV4cG9ydHMudG9DaGVja3N1bUFkZHJlc3MpKGhleEFkZHJlc3MsIGVpcDExOTFDaGFpbklkKSA9PT0gaGV4QWRkcmVzcztcbn07XG5leHBvcnRzLmlzVmFsaWRDaGVja3N1bUFkZHJlc3MgPSBpc1ZhbGlkQ2hlY2tzdW1BZGRyZXNzO1xuLyoqXG4gKiBHZW5lcmF0ZXMgYW4gYWRkcmVzcyBvZiBhIG5ld2x5IGNyZWF0ZWQgY29udHJhY3QuXG4gKiBAcGFyYW0gZnJvbSBUaGUgYWRkcmVzcyB3aGljaCBpcyBjcmVhdGluZyB0aGlzIG5ldyBhZGRyZXNzXG4gKiBAcGFyYW0gbm9uY2UgVGhlIG5vbmNlIG9mIHRoZSBmcm9tIGFjY291bnRcbiAqL1xudmFyIGdlbmVyYXRlQWRkcmVzcyA9IGZ1bmN0aW9uIChmcm9tLCBub25jZSkge1xuICAgICgwLCBoZWxwZXJzXzEuYXNzZXJ0SXNCdWZmZXIpKGZyb20pO1xuICAgICgwLCBoZWxwZXJzXzEuYXNzZXJ0SXNCdWZmZXIpKG5vbmNlKTtcbiAgICB2YXIgbm9uY2VCTiA9IG5ldyBibl9qc18xLmRlZmF1bHQobm9uY2UpO1xuICAgIGlmIChub25jZUJOLmlzWmVybygpKSB7XG4gICAgICAgIC8vIGluIFJMUCB3ZSB3YW50IHRvIGVuY29kZSBudWxsIGluIHRoZSBjYXNlIG9mIHplcm8gbm9uY2VcbiAgICAgICAgLy8gcmVhZCB0aGUgUkxQIGRvY3VtZW50YXRpb24gZm9yIGFuIGFuc3dlciBpZiB5b3UgZGFyZVxuICAgICAgICByZXR1cm4gKDAsIGhhc2hfMS5ybHBoYXNoKShbZnJvbSwgbnVsbF0pLnNsaWNlKC0yMCk7XG4gICAgfVxuICAgIC8vIE9ubHkgdGFrZSB0aGUgbG93ZXIgMTYwYml0cyBvZiB0aGUgaGFzaFxuICAgIHJldHVybiAoMCwgaGFzaF8xLnJscGhhc2gpKFtmcm9tLCBCdWZmZXIuZnJvbShub25jZUJOLnRvQXJyYXkoKSldKS5zbGljZSgtMjApO1xufTtcbmV4cG9ydHMuZ2VuZXJhdGVBZGRyZXNzID0gZ2VuZXJhdGVBZGRyZXNzO1xuLyoqXG4gKiBHZW5lcmF0ZXMgYW4gYWRkcmVzcyBmb3IgYSBjb250cmFjdCBjcmVhdGVkIHVzaW5nIENSRUFURTIuXG4gKiBAcGFyYW0gZnJvbSBUaGUgYWRkcmVzcyB3aGljaCBpcyBjcmVhdGluZyB0aGlzIG5ldyBhZGRyZXNzXG4gKiBAcGFyYW0gc2FsdCBBIHNhbHRcbiAqIEBwYXJhbSBpbml0Q29kZSBUaGUgaW5pdCBjb2RlIG9mIHRoZSBjb250cmFjdCBiZWluZyBjcmVhdGVkXG4gKi9cbnZhciBnZW5lcmF0ZUFkZHJlc3MyID0gZnVuY3Rpb24gKGZyb20sIHNhbHQsIGluaXRDb2RlKSB7XG4gICAgKDAsIGhlbHBlcnNfMS5hc3NlcnRJc0J1ZmZlcikoZnJvbSk7XG4gICAgKDAsIGhlbHBlcnNfMS5hc3NlcnRJc0J1ZmZlcikoc2FsdCk7XG4gICAgKDAsIGhlbHBlcnNfMS5hc3NlcnRJc0J1ZmZlcikoaW5pdENvZGUpO1xuICAgICgwLCBhc3NlcnRfMS5kZWZhdWx0KShmcm9tLmxlbmd0aCA9PT0gMjApO1xuICAgICgwLCBhc3NlcnRfMS5kZWZhdWx0KShzYWx0Lmxlbmd0aCA9PT0gMzIpO1xuICAgIHZhciBhZGRyZXNzID0gKDAsIGhhc2hfMS5rZWNjYWsyNTYpKEJ1ZmZlci5jb25jYXQoW0J1ZmZlci5mcm9tKCdmZicsICdoZXgnKSwgZnJvbSwgc2FsdCwgKDAsIGhhc2hfMS5rZWNjYWsyNTYpKGluaXRDb2RlKV0pKTtcbiAgICByZXR1cm4gYWRkcmVzcy5zbGljZSgtMjApO1xufTtcbmV4cG9ydHMuZ2VuZXJhdGVBZGRyZXNzMiA9IGdlbmVyYXRlQWRkcmVzczI7XG4vKipcbiAqIENoZWNrcyBpZiB0aGUgcHJpdmF0ZSBrZXkgc2F0aXNmaWVzIHRoZSBydWxlcyBvZiB0aGUgY3VydmUgc2VjcDI1NmsxLlxuICovXG52YXIgaXNWYWxpZFByaXZhdGUgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSkge1xuICAgIHJldHVybiAoMCwgc2VjcDI1NmsxXzEucHJpdmF0ZUtleVZlcmlmeSkocHJpdmF0ZUtleSk7XG59O1xuZXhwb3J0cy5pc1ZhbGlkUHJpdmF0ZSA9IGlzVmFsaWRQcml2YXRlO1xuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHB1YmxpYyBrZXkgc2F0aXNmaWVzIHRoZSBydWxlcyBvZiB0aGUgY3VydmUgc2VjcDI1NmsxXG4gKiBhbmQgdGhlIHJlcXVpcmVtZW50cyBvZiBFdGhlcmV1bS5cbiAqIEBwYXJhbSBwdWJsaWNLZXkgVGhlIHR3byBwb2ludHMgb2YgYW4gdW5jb21wcmVzc2VkIGtleSwgdW5sZXNzIHNhbml0aXplIGlzIGVuYWJsZWRcbiAqIEBwYXJhbSBzYW5pdGl6ZSBBY2NlcHQgcHVibGljIGtleXMgaW4gb3RoZXIgZm9ybWF0c1xuICovXG52YXIgaXNWYWxpZFB1YmxpYyA9IGZ1bmN0aW9uIChwdWJsaWNLZXksIHNhbml0aXplKSB7XG4gICAgaWYgKHNhbml0aXplID09PSB2b2lkIDApIHsgc2FuaXRpemUgPSBmYWxzZTsgfVxuICAgICgwLCBoZWxwZXJzXzEuYXNzZXJ0SXNCdWZmZXIpKHB1YmxpY0tleSk7XG4gICAgaWYgKHB1YmxpY0tleS5sZW5ndGggPT09IDY0KSB7XG4gICAgICAgIC8vIENvbnZlcnQgdG8gU0VDMSBmb3Igc2VjcDI1NmsxXG4gICAgICAgIHJldHVybiAoMCwgc2VjcDI1NmsxXzEucHVibGljS2V5VmVyaWZ5KShCdWZmZXIuY29uY2F0KFtCdWZmZXIuZnJvbShbNF0pLCBwdWJsaWNLZXldKSk7XG4gICAgfVxuICAgIGlmICghc2FuaXRpemUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gKDAsIHNlY3AyNTZrMV8xLnB1YmxpY0tleVZlcmlmeSkocHVibGljS2V5KTtcbn07XG5leHBvcnRzLmlzVmFsaWRQdWJsaWMgPSBpc1ZhbGlkUHVibGljO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBldGhlcmV1bSBhZGRyZXNzIG9mIGEgZ2l2ZW4gcHVibGljIGtleS5cbiAqIEFjY2VwdHMgXCJFdGhlcmV1bSBwdWJsaWMga2V5c1wiIGFuZCBTRUMxIGVuY29kZWQga2V5cy5cbiAqIEBwYXJhbSBwdWJLZXkgVGhlIHR3byBwb2ludHMgb2YgYW4gdW5jb21wcmVzc2VkIGtleSwgdW5sZXNzIHNhbml0aXplIGlzIGVuYWJsZWRcbiAqIEBwYXJhbSBzYW5pdGl6ZSBBY2NlcHQgcHVibGljIGtleXMgaW4gb3RoZXIgZm9ybWF0c1xuICovXG52YXIgcHViVG9BZGRyZXNzID0gZnVuY3Rpb24gKHB1YktleSwgc2FuaXRpemUpIHtcbiAgICBpZiAoc2FuaXRpemUgPT09IHZvaWQgMCkgeyBzYW5pdGl6ZSA9IGZhbHNlOyB9XG4gICAgKDAsIGhlbHBlcnNfMS5hc3NlcnRJc0J1ZmZlcikocHViS2V5KTtcbiAgICBpZiAoc2FuaXRpemUgJiYgcHViS2V5Lmxlbmd0aCAhPT0gNjQpIHtcbiAgICAgICAgcHViS2V5ID0gQnVmZmVyLmZyb20oKDAsIHNlY3AyNTZrMV8xLnB1YmxpY0tleUNvbnZlcnQpKHB1YktleSwgZmFsc2UpLnNsaWNlKDEpKTtcbiAgICB9XG4gICAgKDAsIGFzc2VydF8xLmRlZmF1bHQpKHB1YktleS5sZW5ndGggPT09IDY0KTtcbiAgICAvLyBPbmx5IHRha2UgdGhlIGxvd2VyIDE2MGJpdHMgb2YgdGhlIGhhc2hcbiAgICByZXR1cm4gKDAsIGhhc2hfMS5rZWNjYWspKHB1YktleSkuc2xpY2UoLTIwKTtcbn07XG5leHBvcnRzLnB1YlRvQWRkcmVzcyA9IHB1YlRvQWRkcmVzcztcbmV4cG9ydHMucHVibGljVG9BZGRyZXNzID0gZXhwb3J0cy5wdWJUb0FkZHJlc3M7XG4vKipcbiAqIFJldHVybnMgdGhlIGV0aGVyZXVtIHB1YmxpYyBrZXkgb2YgYSBnaXZlbiBwcml2YXRlIGtleS5cbiAqIEBwYXJhbSBwcml2YXRlS2V5IEEgcHJpdmF0ZSBrZXkgbXVzdCBiZSAyNTYgYml0cyB3aWRlXG4gKi9cbnZhciBwcml2YXRlVG9QdWJsaWMgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSkge1xuICAgICgwLCBoZWxwZXJzXzEuYXNzZXJ0SXNCdWZmZXIpKHByaXZhdGVLZXkpO1xuICAgIC8vIHNraXAgdGhlIHR5cGUgZmxhZyBhbmQgdXNlIHRoZSBYLCBZIHBvaW50c1xuICAgIHJldHVybiBCdWZmZXIuZnJvbSgoMCwgc2VjcDI1NmsxXzEucHVibGljS2V5Q3JlYXRlKShwcml2YXRlS2V5LCBmYWxzZSkpLnNsaWNlKDEpO1xufTtcbmV4cG9ydHMucHJpdmF0ZVRvUHVibGljID0gcHJpdmF0ZVRvUHVibGljO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBldGhlcmV1bSBhZGRyZXNzIG9mIGEgZ2l2ZW4gcHJpdmF0ZSBrZXkuXG4gKiBAcGFyYW0gcHJpdmF0ZUtleSBBIHByaXZhdGUga2V5IG11c3QgYmUgMjU2IGJpdHMgd2lkZVxuICovXG52YXIgcHJpdmF0ZVRvQWRkcmVzcyA9IGZ1bmN0aW9uIChwcml2YXRlS2V5KSB7XG4gICAgcmV0dXJuICgwLCBleHBvcnRzLnB1YmxpY1RvQWRkcmVzcykoKDAsIGV4cG9ydHMucHJpdmF0ZVRvUHVibGljKShwcml2YXRlS2V5KSk7XG59O1xuZXhwb3J0cy5wcml2YXRlVG9BZGRyZXNzID0gcHJpdmF0ZVRvQWRkcmVzcztcbi8qKlxuICogQ29udmVydHMgYSBwdWJsaWMga2V5IHRvIHRoZSBFdGhlcmV1bSBmb3JtYXQuXG4gKi9cbnZhciBpbXBvcnRQdWJsaWMgPSBmdW5jdGlvbiAocHVibGljS2V5KSB7XG4gICAgKDAsIGhlbHBlcnNfMS5hc3NlcnRJc0J1ZmZlcikocHVibGljS2V5KTtcbiAgICBpZiAocHVibGljS2V5Lmxlbmd0aCAhPT0gNjQpIHtcbiAgICAgICAgcHVibGljS2V5ID0gQnVmZmVyLmZyb20oKDAsIHNlY3AyNTZrMV8xLnB1YmxpY0tleUNvbnZlcnQpKHB1YmxpY0tleSwgZmFsc2UpLnNsaWNlKDEpKTtcbiAgICB9XG4gICAgcmV0dXJuIHB1YmxpY0tleTtcbn07XG5leHBvcnRzLmltcG9ydFB1YmxpYyA9IGltcG9ydFB1YmxpYztcbi8qKlxuICogUmV0dXJucyB0aGUgemVybyBhZGRyZXNzLlxuICovXG52YXIgemVyb0FkZHJlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFkZHJlc3NMZW5ndGggPSAyMDtcbiAgICB2YXIgYWRkciA9ICgwLCBieXRlc18xLnplcm9zKShhZGRyZXNzTGVuZ3RoKTtcbiAgICByZXR1cm4gKDAsIGJ5dGVzXzEuYnVmZmVyVG9IZXgpKGFkZHIpO1xufTtcbmV4cG9ydHMuemVyb0FkZHJlc3MgPSB6ZXJvQWRkcmVzcztcbi8qKlxuICogQ2hlY2tzIGlmIGEgZ2l2ZW4gYWRkcmVzcyBpcyB0aGUgemVybyBhZGRyZXNzLlxuICovXG52YXIgaXNaZXJvQWRkcmVzcyA9IGZ1bmN0aW9uIChoZXhBZGRyZXNzKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgKDAsIGhlbHBlcnNfMS5hc3NlcnRJc1N0cmluZykoaGV4QWRkcmVzcyk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHplcm9BZGRyID0gKDAsIGV4cG9ydHMuemVyb0FkZHJlc3MpKCk7XG4gICAgcmV0dXJuIHplcm9BZGRyID09PSBoZXhBZGRyZXNzO1xufTtcbmV4cG9ydHMuaXNaZXJvQWRkcmVzcyA9IGlzWmVyb0FkZHJlc3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hY2NvdW50LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BZGRyZXNzID0gdm9pZCAwO1xudmFyIGFzc2VydF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJhc3NlcnRcIikpO1xudmFyIGJuX2pzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImJuLmpzXCIpKTtcbnZhciBieXRlc18xID0gcmVxdWlyZShcIi4vYnl0ZXNcIik7XG52YXIgYWNjb3VudF8xID0gcmVxdWlyZShcIi4vYWNjb3VudFwiKTtcbnZhciBBZGRyZXNzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFkZHJlc3MoYnVmKSB7XG4gICAgICAgICgwLCBhc3NlcnRfMS5kZWZhdWx0KShidWYubGVuZ3RoID09PSAyMCwgJ0ludmFsaWQgYWRkcmVzcyBsZW5ndGgnKTtcbiAgICAgICAgdGhpcy5idWYgPSBidWY7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHplcm8gYWRkcmVzcy5cbiAgICAgKi9cbiAgICBBZGRyZXNzLnplcm8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQWRkcmVzcygoMCwgYnl0ZXNfMS56ZXJvcykoMjApKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gQWRkcmVzcyBvYmplY3QgZnJvbSBhIGhleC1lbmNvZGVkIHN0cmluZy5cbiAgICAgKiBAcGFyYW0gc3RyIC0gSGV4LWVuY29kZWQgYWRkcmVzc1xuICAgICAqL1xuICAgIEFkZHJlc3MuZnJvbVN0cmluZyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgKDAsIGFzc2VydF8xLmRlZmF1bHQpKCgwLCBhY2NvdW50XzEuaXNWYWxpZEFkZHJlc3MpKHN0ciksICdJbnZhbGlkIGFkZHJlc3MnKTtcbiAgICAgICAgcmV0dXJuIG5ldyBBZGRyZXNzKCgwLCBieXRlc18xLnRvQnVmZmVyKShzdHIpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYWRkcmVzcyBmb3IgYSBnaXZlbiBwdWJsaWMga2V5LlxuICAgICAqIEBwYXJhbSBwdWJLZXkgVGhlIHR3byBwb2ludHMgb2YgYW4gdW5jb21wcmVzc2VkIGtleVxuICAgICAqL1xuICAgIEFkZHJlc3MuZnJvbVB1YmxpY0tleSA9IGZ1bmN0aW9uIChwdWJLZXkpIHtcbiAgICAgICAgKDAsIGFzc2VydF8xLmRlZmF1bHQpKEJ1ZmZlci5pc0J1ZmZlcihwdWJLZXkpLCAnUHVibGljIGtleSBzaG91bGQgYmUgQnVmZmVyJyk7XG4gICAgICAgIHZhciBidWYgPSAoMCwgYWNjb3VudF8xLnB1YlRvQWRkcmVzcykocHViS2V5KTtcbiAgICAgICAgcmV0dXJuIG5ldyBBZGRyZXNzKGJ1Zik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGFkZHJlc3MgZm9yIGEgZ2l2ZW4gcHJpdmF0ZSBrZXkuXG4gICAgICogQHBhcmFtIHByaXZhdGVLZXkgQSBwcml2YXRlIGtleSBtdXN0IGJlIDI1NiBiaXRzIHdpZGVcbiAgICAgKi9cbiAgICBBZGRyZXNzLmZyb21Qcml2YXRlS2V5ID0gZnVuY3Rpb24gKHByaXZhdGVLZXkpIHtcbiAgICAgICAgKDAsIGFzc2VydF8xLmRlZmF1bHQpKEJ1ZmZlci5pc0J1ZmZlcihwcml2YXRlS2V5KSwgJ1ByaXZhdGUga2V5IHNob3VsZCBiZSBCdWZmZXInKTtcbiAgICAgICAgdmFyIGJ1ZiA9ICgwLCBhY2NvdW50XzEucHJpdmF0ZVRvQWRkcmVzcykocHJpdmF0ZUtleSk7XG4gICAgICAgIHJldHVybiBuZXcgQWRkcmVzcyhidWYpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGFuIGFkZHJlc3MgZm9yIGEgbmV3bHkgY3JlYXRlZCBjb250cmFjdC5cbiAgICAgKiBAcGFyYW0gZnJvbSBUaGUgYWRkcmVzcyB3aGljaCBpcyBjcmVhdGluZyB0aGlzIG5ldyBhZGRyZXNzXG4gICAgICogQHBhcmFtIG5vbmNlIFRoZSBub25jZSBvZiB0aGUgZnJvbSBhY2NvdW50XG4gICAgICovXG4gICAgQWRkcmVzcy5nZW5lcmF0ZSA9IGZ1bmN0aW9uIChmcm9tLCBub25jZSkge1xuICAgICAgICAoMCwgYXNzZXJ0XzEuZGVmYXVsdCkoYm5fanNfMS5kZWZhdWx0LmlzQk4obm9uY2UpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBBZGRyZXNzKCgwLCBhY2NvdW50XzEuZ2VuZXJhdGVBZGRyZXNzKShmcm9tLmJ1Ziwgbm9uY2UudG9BcnJheUxpa2UoQnVmZmVyKSkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGFuIGFkZHJlc3MgZm9yIGEgY29udHJhY3QgY3JlYXRlZCB1c2luZyBDUkVBVEUyLlxuICAgICAqIEBwYXJhbSBmcm9tIFRoZSBhZGRyZXNzIHdoaWNoIGlzIGNyZWF0aW5nIHRoaXMgbmV3IGFkZHJlc3NcbiAgICAgKiBAcGFyYW0gc2FsdCBBIHNhbHRcbiAgICAgKiBAcGFyYW0gaW5pdENvZGUgVGhlIGluaXQgY29kZSBvZiB0aGUgY29udHJhY3QgYmVpbmcgY3JlYXRlZFxuICAgICAqL1xuICAgIEFkZHJlc3MuZ2VuZXJhdGUyID0gZnVuY3Rpb24gKGZyb20sIHNhbHQsIGluaXRDb2RlKSB7XG4gICAgICAgICgwLCBhc3NlcnRfMS5kZWZhdWx0KShCdWZmZXIuaXNCdWZmZXIoc2FsdCkpO1xuICAgICAgICAoMCwgYXNzZXJ0XzEuZGVmYXVsdCkoQnVmZmVyLmlzQnVmZmVyKGluaXRDb2RlKSk7XG4gICAgICAgIHJldHVybiBuZXcgQWRkcmVzcygoMCwgYWNjb3VudF8xLmdlbmVyYXRlQWRkcmVzczIpKGZyb20uYnVmLCBzYWx0LCBpbml0Q29kZSkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSXMgYWRkcmVzcyBlcXVhbCB0byBhbm90aGVyLlxuICAgICAqL1xuICAgIEFkZHJlc3MucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChhZGRyZXNzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1Zi5lcXVhbHMoYWRkcmVzcy5idWYpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSXMgYWRkcmVzcyB6ZXJvLlxuICAgICAqL1xuICAgIEFkZHJlc3MucHJvdG90eXBlLmlzWmVybyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXF1YWxzKEFkZHJlc3MuemVybygpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRydWUgaWYgYWRkcmVzcyBpcyBpbiB0aGUgYWRkcmVzcyByYW5nZSBkZWZpbmVkXG4gICAgICogYnkgRUlQLTEzNTJcbiAgICAgKi9cbiAgICBBZGRyZXNzLnByb3RvdHlwZS5pc1ByZWNvbXBpbGVPclN5c3RlbUFkZHJlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhZGRyZXNzQk4gPSBuZXcgYm5fanNfMS5kZWZhdWx0KHRoaXMuYnVmKTtcbiAgICAgICAgdmFyIHJhbmdlTWluID0gbmV3IGJuX2pzXzEuZGVmYXVsdCgwKTtcbiAgICAgICAgdmFyIHJhbmdlTWF4ID0gbmV3IGJuX2pzXzEuZGVmYXVsdCgnZmZmZicsICdoZXgnKTtcbiAgICAgICAgcmV0dXJuIGFkZHJlc3NCTi5ndGUocmFuZ2VNaW4pICYmIGFkZHJlc3NCTi5sdGUocmFuZ2VNYXgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBoZXggZW5jb2Rpbmcgb2YgYWRkcmVzcy5cbiAgICAgKi9cbiAgICBBZGRyZXNzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcweCcgKyB0aGlzLmJ1Zi50b1N0cmluZygnaGV4Jyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIEJ1ZmZlciByZXByZXNlbnRhdGlvbiBvZiBhZGRyZXNzLlxuICAgICAqL1xuICAgIEFkZHJlc3MucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20odGhpcy5idWYpO1xuICAgIH07XG4gICAgcmV0dXJuIEFkZHJlc3M7XG59KCkpO1xuZXhwb3J0cy5BZGRyZXNzID0gQWRkcmVzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZHJlc3MuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJhVG9KU09OID0gZXhwb3J0cy50b1V0ZjggPSBleHBvcnRzLmFkZEhleFByZWZpeCA9IGV4cG9ydHMudG9VbnNpZ25lZCA9IGV4cG9ydHMuZnJvbVNpZ25lZCA9IGV4cG9ydHMuYnVmZmVyVG9IZXggPSBleHBvcnRzLmJ1ZmZlclRvSW50ID0gZXhwb3J0cy50b0J1ZmZlciA9IGV4cG9ydHMudW5wYWRIZXhTdHJpbmcgPSBleHBvcnRzLnVucGFkQXJyYXkgPSBleHBvcnRzLnVucGFkQnVmZmVyID0gZXhwb3J0cy5zZXRMZW5ndGhSaWdodCA9IGV4cG9ydHMuc2V0TGVuZ3RoTGVmdCA9IGV4cG9ydHMuemVyb3MgPSBleHBvcnRzLmludFRvQnVmZmVyID0gZXhwb3J0cy5pbnRUb0hleCA9IHZvaWQgMDtcbnZhciBibl9qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJibi5qc1wiKSk7XG52YXIgaW50ZXJuYWxfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsXCIpO1xudmFyIGhlbHBlcnNfMSA9IHJlcXVpcmUoXCIuL2hlbHBlcnNcIik7XG4vKipcbiAqIENvbnZlcnRzIGEgYE51bWJlcmAgaW50byBhIGhleCBgU3RyaW5nYFxuICogQHBhcmFtIHtOdW1iZXJ9IGlcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xudmFyIGludFRvSGV4ID0gZnVuY3Rpb24gKGkpIHtcbiAgICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKGkpIHx8IGkgPCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlY2VpdmVkIGFuIGludmFsaWQgaW50ZWdlciB0eXBlOiBcIiArIGkpO1xuICAgIH1cbiAgICByZXR1cm4gXCIweFwiICsgaS50b1N0cmluZygxNik7XG59O1xuZXhwb3J0cy5pbnRUb0hleCA9IGludFRvSGV4O1xuLyoqXG4gKiBDb252ZXJ0cyBhbiBgTnVtYmVyYCB0byBhIGBCdWZmZXJgXG4gKiBAcGFyYW0ge051bWJlcn0gaVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG52YXIgaW50VG9CdWZmZXIgPSBmdW5jdGlvbiAoaSkge1xuICAgIHZhciBoZXggPSAoMCwgZXhwb3J0cy5pbnRUb0hleCkoaSk7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKCgwLCBpbnRlcm5hbF8xLnBhZFRvRXZlbikoaGV4LnNsaWNlKDIpKSwgJ2hleCcpO1xufTtcbmV4cG9ydHMuaW50VG9CdWZmZXIgPSBpbnRUb0J1ZmZlcjtcbi8qKlxuICogUmV0dXJucyBhIGJ1ZmZlciBmaWxsZWQgd2l0aCAwcy5cbiAqIEBwYXJhbSBieXRlcyB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRoZSBidWZmZXIgc2hvdWxkIGJlXG4gKi9cbnZhciB6ZXJvcyA9IGZ1bmN0aW9uIChieXRlcykge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2NVbnNhZmUoYnl0ZXMpLmZpbGwoMCk7XG59O1xuZXhwb3J0cy56ZXJvcyA9IHplcm9zO1xuLyoqXG4gKiBQYWRzIGEgYEJ1ZmZlcmAgd2l0aCB6ZXJvcyB0aWxsIGl0IGhhcyBgbGVuZ3RoYCBieXRlcy5cbiAqIFRydW5jYXRlcyB0aGUgYmVnaW5uaW5nIG9yIGVuZCBvZiBpbnB1dCBpZiBpdHMgbGVuZ3RoIGV4Y2VlZHMgYGxlbmd0aGAuXG4gKiBAcGFyYW0gbXNnIHRoZSB2YWx1ZSB0byBwYWQgKEJ1ZmZlcilcbiAqIEBwYXJhbSBsZW5ndGggdGhlIG51bWJlciBvZiBieXRlcyB0aGUgb3V0cHV0IHNob3VsZCBiZVxuICogQHBhcmFtIHJpZ2h0IHdoZXRoZXIgdG8gc3RhcnQgcGFkZGluZyBmb3JtIHRoZSBsZWZ0IG9yIHJpZ2h0XG4gKiBAcmV0dXJuIChCdWZmZXIpXG4gKi9cbnZhciBzZXRMZW5ndGggPSBmdW5jdGlvbiAobXNnLCBsZW5ndGgsIHJpZ2h0KSB7XG4gICAgdmFyIGJ1ZiA9ICgwLCBleHBvcnRzLnplcm9zKShsZW5ndGgpO1xuICAgIGlmIChyaWdodCkge1xuICAgICAgICBpZiAobXNnLmxlbmd0aCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgbXNnLmNvcHkoYnVmKTtcbiAgICAgICAgICAgIHJldHVybiBidWY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1zZy5zbGljZSgwLCBsZW5ndGgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKG1zZy5sZW5ndGggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIG1zZy5jb3B5KGJ1ZiwgbGVuZ3RoIC0gbXNnLmxlbmd0aCk7XG4gICAgICAgICAgICByZXR1cm4gYnVmO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtc2cuc2xpY2UoLWxlbmd0aCk7XG4gICAgfVxufTtcbi8qKlxuICogTGVmdCBQYWRzIGEgYEJ1ZmZlcmAgd2l0aCBsZWFkaW5nIHplcm9zIHRpbGwgaXQgaGFzIGBsZW5ndGhgIGJ5dGVzLlxuICogT3IgaXQgdHJ1bmNhdGVzIHRoZSBiZWdpbm5pbmcgaWYgaXQgZXhjZWVkcy5cbiAqIEBwYXJhbSBtc2cgdGhlIHZhbHVlIHRvIHBhZCAoQnVmZmVyKVxuICogQHBhcmFtIGxlbmd0aCB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRoZSBvdXRwdXQgc2hvdWxkIGJlXG4gKiBAcmV0dXJuIChCdWZmZXIpXG4gKi9cbnZhciBzZXRMZW5ndGhMZWZ0ID0gZnVuY3Rpb24gKG1zZywgbGVuZ3RoKSB7XG4gICAgKDAsIGhlbHBlcnNfMS5hc3NlcnRJc0J1ZmZlcikobXNnKTtcbiAgICByZXR1cm4gc2V0TGVuZ3RoKG1zZywgbGVuZ3RoLCBmYWxzZSk7XG59O1xuZXhwb3J0cy5zZXRMZW5ndGhMZWZ0ID0gc2V0TGVuZ3RoTGVmdDtcbi8qKlxuICogUmlnaHQgUGFkcyBhIGBCdWZmZXJgIHdpdGggdHJhaWxpbmcgemVyb3MgdGlsbCBpdCBoYXMgYGxlbmd0aGAgYnl0ZXMuXG4gKiBpdCB0cnVuY2F0ZXMgdGhlIGVuZCBpZiBpdCBleGNlZWRzLlxuICogQHBhcmFtIG1zZyB0aGUgdmFsdWUgdG8gcGFkIChCdWZmZXIpXG4gKiBAcGFyYW0gbGVuZ3RoIHRoZSBudW1iZXIgb2YgYnl0ZXMgdGhlIG91dHB1dCBzaG91bGQgYmVcbiAqIEByZXR1cm4gKEJ1ZmZlcilcbiAqL1xudmFyIHNldExlbmd0aFJpZ2h0ID0gZnVuY3Rpb24gKG1zZywgbGVuZ3RoKSB7XG4gICAgKDAsIGhlbHBlcnNfMS5hc3NlcnRJc0J1ZmZlcikobXNnKTtcbiAgICByZXR1cm4gc2V0TGVuZ3RoKG1zZywgbGVuZ3RoLCB0cnVlKTtcbn07XG5leHBvcnRzLnNldExlbmd0aFJpZ2h0ID0gc2V0TGVuZ3RoUmlnaHQ7XG4vKipcbiAqIFRyaW1zIGxlYWRpbmcgemVyb3MgZnJvbSBhIGBCdWZmZXJgLCBgU3RyaW5nYCBvciBgTnVtYmVyW11gLlxuICogQHBhcmFtIGEgKEJ1ZmZlcnxBcnJheXxTdHJpbmcpXG4gKiBAcmV0dXJuIChCdWZmZXJ8QXJyYXl8U3RyaW5nKVxuICovXG52YXIgc3RyaXBaZXJvcyA9IGZ1bmN0aW9uIChhKSB7XG4gICAgdmFyIGZpcnN0ID0gYVswXTtcbiAgICB3aGlsZSAoYS5sZW5ndGggPiAwICYmIGZpcnN0LnRvU3RyaW5nKCkgPT09ICcwJykge1xuICAgICAgICBhID0gYS5zbGljZSgxKTtcbiAgICAgICAgZmlyc3QgPSBhWzBdO1xuICAgIH1cbiAgICByZXR1cm4gYTtcbn07XG4vKipcbiAqIFRyaW1zIGxlYWRpbmcgemVyb3MgZnJvbSBhIGBCdWZmZXJgLlxuICogQHBhcmFtIGEgKEJ1ZmZlcilcbiAqIEByZXR1cm4gKEJ1ZmZlcilcbiAqL1xudmFyIHVucGFkQnVmZmVyID0gZnVuY3Rpb24gKGEpIHtcbiAgICAoMCwgaGVscGVyc18xLmFzc2VydElzQnVmZmVyKShhKTtcbiAgICByZXR1cm4gc3RyaXBaZXJvcyhhKTtcbn07XG5leHBvcnRzLnVucGFkQnVmZmVyID0gdW5wYWRCdWZmZXI7XG4vKipcbiAqIFRyaW1zIGxlYWRpbmcgemVyb3MgZnJvbSBhbiBgQXJyYXlgIChvZiBudW1iZXJzKS5cbiAqIEBwYXJhbSBhIChudW1iZXJbXSlcbiAqIEByZXR1cm4gKG51bWJlcltdKVxuICovXG52YXIgdW5wYWRBcnJheSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgKDAsIGhlbHBlcnNfMS5hc3NlcnRJc0FycmF5KShhKTtcbiAgICByZXR1cm4gc3RyaXBaZXJvcyhhKTtcbn07XG5leHBvcnRzLnVucGFkQXJyYXkgPSB1bnBhZEFycmF5O1xuLyoqXG4gKiBUcmltcyBsZWFkaW5nIHplcm9zIGZyb20gYSBoZXgtcHJlZml4ZWQgYFN0cmluZ2AuXG4gKiBAcGFyYW0gYSAoU3RyaW5nKVxuICogQHJldHVybiAoU3RyaW5nKVxuICovXG52YXIgdW5wYWRIZXhTdHJpbmcgPSBmdW5jdGlvbiAoYSkge1xuICAgICgwLCBoZWxwZXJzXzEuYXNzZXJ0SXNIZXhTdHJpbmcpKGEpO1xuICAgIGEgPSAoMCwgaW50ZXJuYWxfMS5zdHJpcEhleFByZWZpeCkoYSk7XG4gICAgcmV0dXJuIHN0cmlwWmVyb3MoYSk7XG59O1xuZXhwb3J0cy51bnBhZEhleFN0cmluZyA9IHVucGFkSGV4U3RyaW5nO1xuLyoqXG4gKiBBdHRlbXB0cyB0byB0dXJuIGEgdmFsdWUgaW50byBhIGBCdWZmZXJgLlxuICogSW5wdXRzIHN1cHBvcnRlZDogYEJ1ZmZlcmAsIGBTdHJpbmdgIChoZXgtcHJlZml4ZWQpLCBgTnVtYmVyYCwgbnVsbC91bmRlZmluZWQsIGBCTmAgYW5kIG90aGVyIG9iamVjdHNcbiAqIHdpdGggYSBgdG9BcnJheSgpYCBvciBgdG9CdWZmZXIoKWAgbWV0aG9kLlxuICogQHBhcmFtIHYgdGhlIHZhbHVlXG4gKi9cbnZhciB0b0J1ZmZlciA9IGZ1bmN0aW9uICh2KSB7XG4gICAgaWYgKHYgPT09IG51bGwgfHwgdiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuYWxsb2NVbnNhZmUoMCk7XG4gICAgfVxuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIodikpIHtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHYpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2KSB8fCB2IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20odik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKCEoMCwgaW50ZXJuYWxfMS5pc0hleFN0cmluZykodikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb252ZXJ0IHN0cmluZyB0byBidWZmZXIuIHRvQnVmZmVyIG9ubHkgc3VwcG9ydHMgMHgtcHJlZml4ZWQgaGV4IHN0cmluZ3MgYW5kIHRoaXMgc3RyaW5nIHdhcyBnaXZlbjogXCIgKyB2KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oKDAsIGludGVybmFsXzEucGFkVG9FdmVuKSgoMCwgaW50ZXJuYWxfMS5zdHJpcEhleFByZWZpeCkodikpLCAnaGV4Jyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuICgwLCBleHBvcnRzLmludFRvQnVmZmVyKSh2KTtcbiAgICB9XG4gICAgaWYgKGJuX2pzXzEuZGVmYXVsdC5pc0JOKHYpKSB7XG4gICAgICAgIHJldHVybiB2LnRvQXJyYXlMaWtlKEJ1ZmZlcik7XG4gICAgfVxuICAgIGlmICh2LnRvQXJyYXkpIHtcbiAgICAgICAgLy8gY29udmVydHMgYSBCTiB0byBhIEJ1ZmZlclxuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20odi50b0FycmF5KCkpO1xuICAgIH1cbiAgICBpZiAodi50b0J1ZmZlcikge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20odi50b0J1ZmZlcigpKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHR5cGUnKTtcbn07XG5leHBvcnRzLnRvQnVmZmVyID0gdG9CdWZmZXI7XG4vKipcbiAqIENvbnZlcnRzIGEgYEJ1ZmZlcmAgdG8gYSBgTnVtYmVyYC5cbiAqIEBwYXJhbSBidWYgYEJ1ZmZlcmAgb2JqZWN0IHRvIGNvbnZlcnRcbiAqIEB0aHJvd3MgSWYgdGhlIGlucHV0IG51bWJlciBleGNlZWRzIDUzIGJpdHMuXG4gKi9cbnZhciBidWZmZXJUb0ludCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgICByZXR1cm4gbmV3IGJuX2pzXzEuZGVmYXVsdCgoMCwgZXhwb3J0cy50b0J1ZmZlcikoYnVmKSkudG9OdW1iZXIoKTtcbn07XG5leHBvcnRzLmJ1ZmZlclRvSW50ID0gYnVmZmVyVG9JbnQ7XG4vKipcbiAqIENvbnZlcnRzIGEgYEJ1ZmZlcmAgaW50byBhIGAweGAtcHJlZml4ZWQgaGV4IGBTdHJpbmdgLlxuICogQHBhcmFtIGJ1ZiBgQnVmZmVyYCBvYmplY3QgdG8gY29udmVydFxuICovXG52YXIgYnVmZmVyVG9IZXggPSBmdW5jdGlvbiAoYnVmKSB7XG4gICAgYnVmID0gKDAsIGV4cG9ydHMudG9CdWZmZXIpKGJ1Zik7XG4gICAgcmV0dXJuICcweCcgKyBidWYudG9TdHJpbmcoJ2hleCcpO1xufTtcbmV4cG9ydHMuYnVmZmVyVG9IZXggPSBidWZmZXJUb0hleDtcbi8qKlxuICogSW50ZXJwcmV0cyBhIGBCdWZmZXJgIGFzIGEgc2lnbmVkIGludGVnZXIgYW5kIHJldHVybnMgYSBgQk5gLiBBc3N1bWVzIDI1Ni1iaXQgbnVtYmVycy5cbiAqIEBwYXJhbSBudW0gU2lnbmVkIGludGVnZXIgdmFsdWVcbiAqL1xudmFyIGZyb21TaWduZWQgPSBmdW5jdGlvbiAobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBibl9qc18xLmRlZmF1bHQobnVtKS5mcm9tVHdvcygyNTYpO1xufTtcbmV4cG9ydHMuZnJvbVNpZ25lZCA9IGZyb21TaWduZWQ7XG4vKipcbiAqIENvbnZlcnRzIGEgYEJOYCB0byBhbiB1bnNpZ25lZCBpbnRlZ2VyIGFuZCByZXR1cm5zIGl0IGFzIGEgYEJ1ZmZlcmAuIEFzc3VtZXMgMjU2LWJpdCBudW1iZXJzLlxuICogQHBhcmFtIG51bVxuICovXG52YXIgdG9VbnNpZ25lZCA9IGZ1bmN0aW9uIChudW0pIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20obnVtLnRvVHdvcygyNTYpLnRvQXJyYXkoKSk7XG59O1xuZXhwb3J0cy50b1Vuc2lnbmVkID0gdG9VbnNpZ25lZDtcbi8qKlxuICogQWRkcyBcIjB4XCIgdG8gYSBnaXZlbiBgU3RyaW5nYCBpZiBpdCBkb2VzIG5vdCBhbHJlYWR5IHN0YXJ0IHdpdGggXCIweFwiLlxuICovXG52YXIgYWRkSGV4UHJlZml4ID0gZnVuY3Rpb24gKHN0cikge1xuICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICByZXR1cm4gKDAsIGludGVybmFsXzEuaXNIZXhQcmVmaXhlZCkoc3RyKSA/IHN0ciA6ICcweCcgKyBzdHI7XG59O1xuZXhwb3J0cy5hZGRIZXhQcmVmaXggPSBhZGRIZXhQcmVmaXg7XG4vKipcbiAqIFJldHVybnMgdGhlIHV0Zjggc3RyaW5nIHJlcHJlc2VudGF0aW9uIGZyb20gYSBoZXggc3RyaW5nLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqIElucHV0IDE6ICc2NTc0Njg2NTcyNjU3NTZkMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJ1xuICogSW5wdXQgMjogJzY1NzQ2ODY1NzI2NTc1NmQnXG4gKiBJbnB1dCAzOiAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNjU3NDY4NjU3MjY1NzU2ZCdcbiAqXG4gKiBPdXRwdXQgKGFsbCAzIGlucHV0IHZhcmlhbnRzKTogJ2V0aGVyZXVtJ1xuICpcbiAqIE5vdGUgdGhhdCB0aGlzIG1ldGhvZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCB3aXRoIGhleCBzdHJpbmdzXG4gKiByZXByZXNlbnRpbmcgcXVhbnRpdGllcyBpbiBib3RoIGJpZyBlbmRpYW4gb3IgbGl0dGxlIGVuZGlhbiBub3RhdGlvbi5cbiAqXG4gKiBAcGFyYW0gc3RyaW5nIEhleCBzdHJpbmcsIHNob3VsZCBiZSBgMHhgIHByZWZpeGVkXG4gKiBAcmV0dXJuIFV0Zjggc3RyaW5nXG4gKi9cbnZhciB0b1V0ZjggPSBmdW5jdGlvbiAoaGV4KSB7XG4gICAgdmFyIHplcm9zUmVnZXhwID0gL14oMDApK3woMDApKyQvZztcbiAgICBoZXggPSAoMCwgaW50ZXJuYWxfMS5zdHJpcEhleFByZWZpeCkoaGV4KTtcbiAgICBpZiAoaGV4Lmxlbmd0aCAlIDIgIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG5vbi1ldmVuIGhleCBzdHJpbmcgaW5wdXQgZm9yIHRvVXRmOCgpIHByb3ZpZGVkJyk7XG4gICAgfVxuICAgIHZhciBidWZmZXJWYWwgPSBCdWZmZXIuZnJvbShoZXgucmVwbGFjZSh6ZXJvc1JlZ2V4cCwgJycpLCAnaGV4Jyk7XG4gICAgcmV0dXJuIGJ1ZmZlclZhbC50b1N0cmluZygndXRmOCcpO1xufTtcbmV4cG9ydHMudG9VdGY4ID0gdG9VdGY4O1xuLyoqXG4gKiBDb252ZXJ0cyBhIGBCdWZmZXJgIG9yIGBBcnJheWAgdG8gSlNPTi5cbiAqIEBwYXJhbSBiYSAoQnVmZmVyfEFycmF5KVxuICogQHJldHVybiAoQXJyYXl8U3RyaW5nfG51bGwpXG4gKi9cbnZhciBiYVRvSlNPTiA9IGZ1bmN0aW9uIChiYSkge1xuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoYmEpKSB7XG4gICAgICAgIHJldHVybiBcIjB4XCIgKyBiYS50b1N0cmluZygnaGV4Jyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGJhIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFycmF5LnB1c2goKDAsIGV4cG9ydHMuYmFUb0pTT04pKGJhW2ldKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cbn07XG5leHBvcnRzLmJhVG9KU09OID0gYmFUb0pTT047XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ieXRlcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUCA9IGV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9TID0gZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZID0gZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZX1MgPSBleHBvcnRzLktFQ0NBSzI1Nl9OVUxMID0gZXhwb3J0cy5LRUNDQUsyNTZfTlVMTF9TID0gZXhwb3J0cy5UV09fUE9XMjU2ID0gZXhwb3J0cy5NQVhfSU5URUdFUiA9IHZvaWQgMDtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG52YXIgYm5fanNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYm4uanNcIikpO1xuLyoqXG4gKiBUaGUgbWF4IGludGVnZXIgdGhhdCB0aGlzIFZNIGNhbiBoYW5kbGVcbiAqL1xuZXhwb3J0cy5NQVhfSU5URUdFUiA9IG5ldyBibl9qc18xLmRlZmF1bHQoJ2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYnLCAxNik7XG4vKipcbiAqIDJeMjU2XG4gKi9cbmV4cG9ydHMuVFdPX1BPVzI1NiA9IG5ldyBibl9qc18xLmRlZmF1bHQoJzEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJywgMTYpO1xuLyoqXG4gKiBLZWNjYWstMjU2IGhhc2ggb2YgbnVsbFxuICovXG5leHBvcnRzLktFQ0NBSzI1Nl9OVUxMX1MgPSAnYzVkMjQ2MDE4NmY3MjMzYzkyN2U3ZGIyZGNjNzAzYzBlNTAwYjY1M2NhODIyNzNiN2JmYWQ4MDQ1ZDg1YTQ3MCc7XG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiBudWxsXG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X05VTEwgPSBCdWZmZXIuZnJvbShleHBvcnRzLktFQ0NBSzI1Nl9OVUxMX1MsICdoZXgnKTtcbi8qKlxuICogS2VjY2FrLTI1NiBvZiBhbiBSTFAgb2YgYW4gZW1wdHkgYXJyYXlcbiAqL1xuZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZX1MgPSAnMWRjYzRkZThkZWM3NWQ3YWFiODViNTY3YjZjY2Q0MWFkMzEyNDUxYjk0OGE3NDEzZjBhMTQyZmQ0MGQ0OTM0Nyc7XG4vKipcbiAqIEtlY2Nhay0yNTYgb2YgYW4gUkxQIG9mIGFuIGVtcHR5IGFycmF5XG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWSA9IEJ1ZmZlci5mcm9tKGV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWV9TLCAnaGV4Jyk7XG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiB0aGUgUkxQIG9mIG51bGxcbiAqL1xuZXhwb3J0cy5LRUNDQUsyNTZfUkxQX1MgPSAnNTZlODFmMTcxYmNjNTVhNmZmODM0NWU2OTJjMGY4NmU1YjQ4ZTAxYjk5NmNhZGMwMDE2MjJmYjVlMzYzYjQyMSc7XG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiB0aGUgUkxQIG9mIG51bGxcbiAqL1xuZXhwb3J0cy5LRUNDQUsyNTZfUkxQID0gQnVmZmVyLmZyb20oZXhwb3J0cy5LRUNDQUsyNTZfUkxQX1MsICdoZXgnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogUmUtZXhwb3J0cyBjb21tb25seSB1c2VkIG1vZHVsZXM6XG4gKiAqIEV4cG9ydHMgW2BCTmBdKGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzKSwgW2BybHBgXShodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW1qcy9ybHApLlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ybHAgPSBleHBvcnRzLkJOID0gdm9pZCAwO1xudmFyIGJuX2pzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImJuLmpzXCIpKTtcbmV4cG9ydHMuQk4gPSBibl9qc18xLmRlZmF1bHQ7XG52YXIgcmxwID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJybHBcIikpO1xuZXhwb3J0cy5ybHAgPSBybHA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHRlcm5hbHMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmxwaGFzaCA9IGV4cG9ydHMucmlwZW1kMTYwRnJvbUFycmF5ID0gZXhwb3J0cy5yaXBlbWQxNjBGcm9tU3RyaW5nID0gZXhwb3J0cy5yaXBlbWQxNjAgPSBleHBvcnRzLnNoYTI1NkZyb21BcnJheSA9IGV4cG9ydHMuc2hhMjU2RnJvbVN0cmluZyA9IGV4cG9ydHMuc2hhMjU2ID0gZXhwb3J0cy5rZWNjYWtGcm9tQXJyYXkgPSBleHBvcnRzLmtlY2Nha0Zyb21IZXhTdHJpbmcgPSBleHBvcnRzLmtlY2Nha0Zyb21TdHJpbmcgPSBleHBvcnRzLmtlY2NhazI1NiA9IGV4cG9ydHMua2VjY2FrID0gdm9pZCAwO1xudmFyIGtlY2Nha18xID0gcmVxdWlyZShcImV0aGVyZXVtLWNyeXB0b2dyYXBoeS9rZWNjYWtcIik7XG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJyk7XG52YXIgcmxwID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJybHBcIikpO1xudmFyIGJ5dGVzXzEgPSByZXF1aXJlKFwiLi9ieXRlc1wiKTtcbnZhciBoZWxwZXJzXzEgPSByZXF1aXJlKFwiLi9oZWxwZXJzXCIpO1xuLyoqXG4gKiBDcmVhdGVzIEtlY2NhayBoYXNoIG9mIGEgQnVmZmVyIGlucHV0XG4gKiBAcGFyYW0gYSBUaGUgaW5wdXQgZGF0YSAoQnVmZmVyKVxuICogQHBhcmFtIGJpdHMgKG51bWJlciA9IDI1NikgVGhlIEtlY2NhayB3aWR0aFxuICovXG52YXIga2VjY2FrID0gZnVuY3Rpb24gKGEsIGJpdHMpIHtcbiAgICBpZiAoYml0cyA9PT0gdm9pZCAwKSB7IGJpdHMgPSAyNTY7IH1cbiAgICAoMCwgaGVscGVyc18xLmFzc2VydElzQnVmZmVyKShhKTtcbiAgICBzd2l0Y2ggKGJpdHMpIHtcbiAgICAgICAgY2FzZSAyMjQ6IHtcbiAgICAgICAgICAgIHJldHVybiAoMCwga2VjY2FrXzEua2VjY2FrMjI0KShhKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDI1Njoge1xuICAgICAgICAgICAgcmV0dXJuICgwLCBrZWNjYWtfMS5rZWNjYWsyNTYpKGEpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzg0OiB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIGtlY2Nha18xLmtlY2NhazM4NCkoYSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSA1MTI6IHtcbiAgICAgICAgICAgIHJldHVybiAoMCwga2VjY2FrXzEua2VjY2FrNTEyKShhKTtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGQgYWxnb3JpdGhtOiBrZWNjYWtcIiArIGJpdHMpO1xuICAgICAgICB9XG4gICAgfVxufTtcbmV4cG9ydHMua2VjY2FrID0ga2VjY2FrO1xuLyoqXG4gKiBDcmVhdGVzIEtlY2Nhay0yNTYgaGFzaCBvZiB0aGUgaW5wdXQsIGFsaWFzIGZvciBrZWNjYWsoYSwgMjU2KS5cbiAqIEBwYXJhbSBhIFRoZSBpbnB1dCBkYXRhIChCdWZmZXIpXG4gKi9cbnZhciBrZWNjYWsyNTYgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiAoMCwgZXhwb3J0cy5rZWNjYWspKGEpO1xufTtcbmV4cG9ydHMua2VjY2FrMjU2ID0ga2VjY2FrMjU2O1xuLyoqXG4gKiBDcmVhdGVzIEtlY2NhayBoYXNoIG9mIGEgdXRmLTggc3RyaW5nIGlucHV0XG4gKiBAcGFyYW0gYSBUaGUgaW5wdXQgZGF0YSAoU3RyaW5nKVxuICogQHBhcmFtIGJpdHMgKG51bWJlciA9IDI1NikgVGhlIEtlY2NhayB3aWR0aFxuICovXG52YXIga2VjY2FrRnJvbVN0cmluZyA9IGZ1bmN0aW9uIChhLCBiaXRzKSB7XG4gICAgaWYgKGJpdHMgPT09IHZvaWQgMCkgeyBiaXRzID0gMjU2OyB9XG4gICAgKDAsIGhlbHBlcnNfMS5hc3NlcnRJc1N0cmluZykoYSk7XG4gICAgdmFyIGJ1ZiA9IEJ1ZmZlci5mcm9tKGEsICd1dGY4Jyk7XG4gICAgcmV0dXJuICgwLCBleHBvcnRzLmtlY2NhaykoYnVmLCBiaXRzKTtcbn07XG5leHBvcnRzLmtlY2Nha0Zyb21TdHJpbmcgPSBrZWNjYWtGcm9tU3RyaW5nO1xuLyoqXG4gKiBDcmVhdGVzIEtlY2NhayBoYXNoIG9mIGFuIDB4LXByZWZpeGVkIHN0cmluZyBpbnB1dFxuICogQHBhcmFtIGEgVGhlIGlucHV0IGRhdGEgKFN0cmluZylcbiAqIEBwYXJhbSBiaXRzIChudW1iZXIgPSAyNTYpIFRoZSBLZWNjYWsgd2lkdGhcbiAqL1xudmFyIGtlY2Nha0Zyb21IZXhTdHJpbmcgPSBmdW5jdGlvbiAoYSwgYml0cykge1xuICAgIGlmIChiaXRzID09PSB2b2lkIDApIHsgYml0cyA9IDI1NjsgfVxuICAgICgwLCBoZWxwZXJzXzEuYXNzZXJ0SXNIZXhTdHJpbmcpKGEpO1xuICAgIHJldHVybiAoMCwgZXhwb3J0cy5rZWNjYWspKCgwLCBieXRlc18xLnRvQnVmZmVyKShhKSwgYml0cyk7XG59O1xuZXhwb3J0cy5rZWNjYWtGcm9tSGV4U3RyaW5nID0ga2VjY2FrRnJvbUhleFN0cmluZztcbi8qKlxuICogQ3JlYXRlcyBLZWNjYWsgaGFzaCBvZiBhIG51bWJlciBhcnJheSBpbnB1dFxuICogQHBhcmFtIGEgVGhlIGlucHV0IGRhdGEgKG51bWJlcltdKVxuICogQHBhcmFtIGJpdHMgKG51bWJlciA9IDI1NikgVGhlIEtlY2NhayB3aWR0aFxuICovXG52YXIga2VjY2FrRnJvbUFycmF5ID0gZnVuY3Rpb24gKGEsIGJpdHMpIHtcbiAgICBpZiAoYml0cyA9PT0gdm9pZCAwKSB7IGJpdHMgPSAyNTY7IH1cbiAgICAoMCwgaGVscGVyc18xLmFzc2VydElzQXJyYXkpKGEpO1xuICAgIHJldHVybiAoMCwgZXhwb3J0cy5rZWNjYWspKCgwLCBieXRlc18xLnRvQnVmZmVyKShhKSwgYml0cyk7XG59O1xuZXhwb3J0cy5rZWNjYWtGcm9tQXJyYXkgPSBrZWNjYWtGcm9tQXJyYXk7XG4vKipcbiAqIENyZWF0ZXMgU0hBMjU2IGhhc2ggb2YgYW4gaW5wdXQuXG4gKiBAcGFyYW0gIGEgVGhlIGlucHV0IGRhdGEgKEJ1ZmZlcnxBcnJheXxTdHJpbmcpXG4gKi9cbnZhciBfc2hhMjU2ID0gZnVuY3Rpb24gKGEpIHtcbiAgICBhID0gKDAsIGJ5dGVzXzEudG9CdWZmZXIpKGEpO1xuICAgIHJldHVybiBjcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoYSkuZGlnZXN0KCk7XG59O1xuLyoqXG4gKiBDcmVhdGVzIFNIQTI1NiBoYXNoIG9mIGEgQnVmZmVyIGlucHV0LlxuICogQHBhcmFtIGEgVGhlIGlucHV0IGRhdGEgKEJ1ZmZlcilcbiAqL1xudmFyIHNoYTI1NiA9IGZ1bmN0aW9uIChhKSB7XG4gICAgKDAsIGhlbHBlcnNfMS5hc3NlcnRJc0J1ZmZlcikoYSk7XG4gICAgcmV0dXJuIF9zaGEyNTYoYSk7XG59O1xuZXhwb3J0cy5zaGEyNTYgPSBzaGEyNTY7XG4vKipcbiAqIENyZWF0ZXMgU0hBMjU2IGhhc2ggb2YgYSBzdHJpbmcgaW5wdXQuXG4gKiBAcGFyYW0gYSBUaGUgaW5wdXQgZGF0YSAoc3RyaW5nKVxuICovXG52YXIgc2hhMjU2RnJvbVN0cmluZyA9IGZ1bmN0aW9uIChhKSB7XG4gICAgKDAsIGhlbHBlcnNfMS5hc3NlcnRJc1N0cmluZykoYSk7XG4gICAgcmV0dXJuIF9zaGEyNTYoYSk7XG59O1xuZXhwb3J0cy5zaGEyNTZGcm9tU3RyaW5nID0gc2hhMjU2RnJvbVN0cmluZztcbi8qKlxuICogQ3JlYXRlcyBTSEEyNTYgaGFzaCBvZiBhIG51bWJlcltdIGlucHV0LlxuICogQHBhcmFtIGEgVGhlIGlucHV0IGRhdGEgKG51bWJlcltdKVxuICovXG52YXIgc2hhMjU2RnJvbUFycmF5ID0gZnVuY3Rpb24gKGEpIHtcbiAgICAoMCwgaGVscGVyc18xLmFzc2VydElzQXJyYXkpKGEpO1xuICAgIHJldHVybiBfc2hhMjU2KGEpO1xufTtcbmV4cG9ydHMuc2hhMjU2RnJvbUFycmF5ID0gc2hhMjU2RnJvbUFycmF5O1xuLyoqXG4gKiBDcmVhdGVzIFJJUEVNRDE2MCBoYXNoIG9mIHRoZSBpbnB1dC5cbiAqIEBwYXJhbSBhIFRoZSBpbnB1dCBkYXRhIChCdWZmZXJ8QXJyYXl8U3RyaW5nfE51bWJlcilcbiAqIEBwYXJhbSBwYWRkZWQgV2hldGhlciBpdCBzaG91bGQgYmUgcGFkZGVkIHRvIDI1NiBiaXRzIG9yIG5vdFxuICovXG52YXIgX3JpcGVtZDE2MCA9IGZ1bmN0aW9uIChhLCBwYWRkZWQpIHtcbiAgICBhID0gKDAsIGJ5dGVzXzEudG9CdWZmZXIpKGEpO1xuICAgIHZhciBoYXNoID0gY3JlYXRlSGFzaCgncm1kMTYwJykudXBkYXRlKGEpLmRpZ2VzdCgpO1xuICAgIGlmIChwYWRkZWQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuICgwLCBieXRlc18xLnNldExlbmd0aExlZnQpKGhhc2gsIDMyKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBoYXNoO1xuICAgIH1cbn07XG4vKipcbiAqIENyZWF0ZXMgUklQRU1EMTYwIGhhc2ggb2YgYSBCdWZmZXIgaW5wdXQuXG4gKiBAcGFyYW0gYSBUaGUgaW5wdXQgZGF0YSAoQnVmZmVyKVxuICogQHBhcmFtIHBhZGRlZCBXaGV0aGVyIGl0IHNob3VsZCBiZSBwYWRkZWQgdG8gMjU2IGJpdHMgb3Igbm90XG4gKi9cbnZhciByaXBlbWQxNjAgPSBmdW5jdGlvbiAoYSwgcGFkZGVkKSB7XG4gICAgKDAsIGhlbHBlcnNfMS5hc3NlcnRJc0J1ZmZlcikoYSk7XG4gICAgcmV0dXJuIF9yaXBlbWQxNjAoYSwgcGFkZGVkKTtcbn07XG5leHBvcnRzLnJpcGVtZDE2MCA9IHJpcGVtZDE2MDtcbi8qKlxuICogQ3JlYXRlcyBSSVBFTUQxNjAgaGFzaCBvZiBhIHN0cmluZyBpbnB1dC5cbiAqIEBwYXJhbSBhIFRoZSBpbnB1dCBkYXRhIChTdHJpbmcpXG4gKiBAcGFyYW0gcGFkZGVkIFdoZXRoZXIgaXQgc2hvdWxkIGJlIHBhZGRlZCB0byAyNTYgYml0cyBvciBub3RcbiAqL1xudmFyIHJpcGVtZDE2MEZyb21TdHJpbmcgPSBmdW5jdGlvbiAoYSwgcGFkZGVkKSB7XG4gICAgKDAsIGhlbHBlcnNfMS5hc3NlcnRJc1N0cmluZykoYSk7XG4gICAgcmV0dXJuIF9yaXBlbWQxNjAoYSwgcGFkZGVkKTtcbn07XG5leHBvcnRzLnJpcGVtZDE2MEZyb21TdHJpbmcgPSByaXBlbWQxNjBGcm9tU3RyaW5nO1xuLyoqXG4gKiBDcmVhdGVzIFJJUEVNRDE2MCBoYXNoIG9mIGEgbnVtYmVyW10gaW5wdXQuXG4gKiBAcGFyYW0gYSBUaGUgaW5wdXQgZGF0YSAobnVtYmVyW10pXG4gKiBAcGFyYW0gcGFkZGVkIFdoZXRoZXIgaXQgc2hvdWxkIGJlIHBhZGRlZCB0byAyNTYgYml0cyBvciBub3RcbiAqL1xudmFyIHJpcGVtZDE2MEZyb21BcnJheSA9IGZ1bmN0aW9uIChhLCBwYWRkZWQpIHtcbiAgICAoMCwgaGVscGVyc18xLmFzc2VydElzQXJyYXkpKGEpO1xuICAgIHJldHVybiBfcmlwZW1kMTYwKGEsIHBhZGRlZCk7XG59O1xuZXhwb3J0cy5yaXBlbWQxNjBGcm9tQXJyYXkgPSByaXBlbWQxNjBGcm9tQXJyYXk7XG4vKipcbiAqIENyZWF0ZXMgU0hBLTMgaGFzaCBvZiB0aGUgUkxQIGVuY29kZWQgdmVyc2lvbiBvZiB0aGUgaW5wdXQuXG4gKiBAcGFyYW0gYSBUaGUgaW5wdXQgZGF0YVxuICovXG52YXIgcmxwaGFzaCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuICgwLCBleHBvcnRzLmtlY2NhaykocmxwLmVuY29kZShhKSk7XG59O1xuZXhwb3J0cy5ybHBoYXNoID0gcmxwaGFzaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhc2guanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFzc2VydElzU3RyaW5nID0gZXhwb3J0cy5hc3NlcnRJc0FycmF5ID0gZXhwb3J0cy5hc3NlcnRJc0J1ZmZlciA9IGV4cG9ydHMuYXNzZXJ0SXNIZXhTdHJpbmcgPSB2b2lkIDA7XG52YXIgaW50ZXJuYWxfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsXCIpO1xuLyoqXG4gKiBUaHJvd3MgaWYgYSBzdHJpbmcgaXMgbm90IGhleCBwcmVmaXhlZFxuICogQHBhcmFtIHtzdHJpbmd9IGlucHV0IHN0cmluZyB0byBjaGVjayBoZXggcHJlZml4IG9mXG4gKi9cbnZhciBhc3NlcnRJc0hleFN0cmluZyA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIGlmICghKDAsIGludGVybmFsXzEuaXNIZXhTdHJpbmcpKGlucHV0KSkge1xuICAgICAgICB2YXIgbXNnID0gXCJUaGlzIG1ldGhvZCBvbmx5IHN1cHBvcnRzIDB4LXByZWZpeGVkIGhleCBzdHJpbmdzIGJ1dCBpbnB1dCB3YXM6IFwiICsgaW5wdXQ7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbn07XG5leHBvcnRzLmFzc2VydElzSGV4U3RyaW5nID0gYXNzZXJ0SXNIZXhTdHJpbmc7XG4vKipcbiAqIFRocm93cyBpZiBpbnB1dCBpcyBub3QgYSBidWZmZXJcbiAqIEBwYXJhbSB7QnVmZmVyfSBpbnB1dCB2YWx1ZSB0byBjaGVja1xuICovXG52YXIgYXNzZXJ0SXNCdWZmZXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihpbnB1dCkpIHtcbiAgICAgICAgdmFyIG1zZyA9IFwiVGhpcyBtZXRob2Qgb25seSBzdXBwb3J0cyBCdWZmZXIgYnV0IGlucHV0IHdhczogXCIgKyBpbnB1dDtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxufTtcbmV4cG9ydHMuYXNzZXJ0SXNCdWZmZXIgPSBhc3NlcnRJc0J1ZmZlcjtcbi8qKlxuICogVGhyb3dzIGlmIGlucHV0IGlzIG5vdCBhbiBhcnJheVxuICogQHBhcmFtIHtudW1iZXJbXX0gaW5wdXQgdmFsdWUgdG8gY2hlY2tcbiAqL1xudmFyIGFzc2VydElzQXJyYXkgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgIHZhciBtc2cgPSBcIlRoaXMgbWV0aG9kIG9ubHkgc3VwcG9ydHMgbnVtYmVyIGFycmF5cyBidXQgaW5wdXQgd2FzOiBcIiArIGlucHV0O1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59O1xuZXhwb3J0cy5hc3NlcnRJc0FycmF5ID0gYXNzZXJ0SXNBcnJheTtcbi8qKlxuICogVGhyb3dzIGlmIGlucHV0IGlzIG5vdCBhIHN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IGlucHV0IHZhbHVlIHRvIGNoZWNrXG4gKi9cbnZhciBhc3NlcnRJc1N0cmluZyA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciBtc2cgPSBcIlRoaXMgbWV0aG9kIG9ubHkgc3VwcG9ydHMgc3RyaW5ncyBidXQgaW5wdXQgd2FzOiBcIiArIGlucHV0O1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59O1xuZXhwb3J0cy5hc3NlcnRJc1N0cmluZyA9IGFzc2VydElzU3RyaW5nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0hleFN0cmluZyA9IGV4cG9ydHMuZ2V0S2V5cyA9IGV4cG9ydHMuZnJvbUFzY2lpID0gZXhwb3J0cy5mcm9tVXRmOCA9IGV4cG9ydHMudG9Bc2NpaSA9IGV4cG9ydHMuYXJyYXlDb250YWluc0FycmF5ID0gZXhwb3J0cy5nZXRCaW5hcnlTaXplID0gZXhwb3J0cy5wYWRUb0V2ZW4gPSBleHBvcnRzLnN0cmlwSGV4UHJlZml4ID0gZXhwb3J0cy5pc0hleFByZWZpeGVkID0gdm9pZCAwO1xuLyoqXG4gKiBDb25zdGFudHNcbiAqL1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKSwgZXhwb3J0cyk7XG4vKipcbiAqIEFjY291bnQgY2xhc3MgYW5kIGhlbHBlciBmdW5jdGlvbnNcbiAqL1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2FjY291bnRcIiksIGV4cG9ydHMpO1xuLyoqXG4gKiBBZGRyZXNzIHR5cGVcbiAqL1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2FkZHJlc3NcIiksIGV4cG9ydHMpO1xuLyoqXG4gKiBIYXNoIGZ1bmN0aW9uc1xuICovXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGFzaFwiKSwgZXhwb3J0cyk7XG4vKipcbiAqIEVDRFNBIHNpZ25hdHVyZVxuICovXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc2lnbmF0dXJlXCIpLCBleHBvcnRzKTtcbi8qKlxuICogVXRpbGl0aWVzIGZvciBtYW5pcHVsYXRpbmcgQnVmZmVycywgYnl0ZSBhcnJheXMsIGV0Yy5cbiAqL1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2J5dGVzXCIpLCBleHBvcnRzKTtcbi8qKlxuICogRnVuY3Rpb24gZm9yIGRlZmluaW5pbmcgcHJvcGVydGllcyBvbiBhbiBvYmplY3RcbiAqL1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL29iamVjdFwiKSwgZXhwb3J0cyk7XG4vKipcbiAqIEV4dGVybmFsIGV4cG9ydHMgKEJOLCBybHAsIHNlY3AyNTZrMSlcbiAqL1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2V4dGVybmFsc1wiKSwgZXhwb3J0cyk7XG4vKipcbiAqIEhlbHBmdWwgVHlwZVNjcmlwdCB0eXBlc1xuICovXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZXNcIiksIGV4cG9ydHMpO1xuLyoqXG4gKiBFeHBvcnQgZXRoanMtdXRpbCBtZXRob2RzXG4gKi9cbnZhciBpbnRlcm5hbF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWxcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0hleFByZWZpeGVkXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbnRlcm5hbF8xLmlzSGV4UHJlZml4ZWQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzdHJpcEhleFByZWZpeFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJuYWxfMS5zdHJpcEhleFByZWZpeDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBhZFRvRXZlblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJuYWxfMS5wYWRUb0V2ZW47IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRCaW5hcnlTaXplXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbnRlcm5hbF8xLmdldEJpbmFyeVNpemU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhcnJheUNvbnRhaW5zQXJyYXlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGludGVybmFsXzEuYXJyYXlDb250YWluc0FycmF5OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidG9Bc2NpaVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJuYWxfMS50b0FzY2lpOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZnJvbVV0ZjhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGludGVybmFsXzEuZnJvbVV0Zjg7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmcm9tQXNjaWlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGludGVybmFsXzEuZnJvbUFzY2lpOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0S2V5c1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJuYWxfMS5nZXRLZXlzOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNIZXhTdHJpbmdcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGludGVybmFsXzEuaXNIZXhTdHJpbmc7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8qXG5UaGUgTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDE2IE5pY2sgRG9kc29uLiBuaWNrZG9kc29uLmNvbVxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkVcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0hleFN0cmluZyA9IGV4cG9ydHMuZ2V0S2V5cyA9IGV4cG9ydHMuZnJvbUFzY2lpID0gZXhwb3J0cy5mcm9tVXRmOCA9IGV4cG9ydHMudG9Bc2NpaSA9IGV4cG9ydHMuYXJyYXlDb250YWluc0FycmF5ID0gZXhwb3J0cy5nZXRCaW5hcnlTaXplID0gZXhwb3J0cy5wYWRUb0V2ZW4gPSBleHBvcnRzLnN0cmlwSGV4UHJlZml4ID0gZXhwb3J0cy5pc0hleFByZWZpeGVkID0gdm9pZCAwO1xuLyoqXG4gKiBSZXR1cm5zIGEgYEJvb2xlYW5gIG9uIHdoZXRoZXIgb3Igbm90IHRoZSBhIGBTdHJpbmdgIHN0YXJ0cyB3aXRoICcweCdcbiAqIEBwYXJhbSBzdHIgdGhlIHN0cmluZyBpbnB1dCB2YWx1ZVxuICogQHJldHVybiBhIGJvb2xlYW4gaWYgaXQgaXMgb3IgaXMgbm90IGhleCBwcmVmaXhlZFxuICogQHRocm93cyBpZiB0aGUgc3RyIGlucHV0IGlzIG5vdCBhIHN0cmluZ1xuICovXG5mdW5jdGlvbiBpc0hleFByZWZpeGVkKHN0cikge1xuICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbaXNIZXhQcmVmaXhlZF0gaW5wdXQgbXVzdCBiZSB0eXBlICdzdHJpbmcnLCByZWNlaXZlZCB0eXBlIFwiICsgdHlwZW9mIHN0cik7XG4gICAgfVxuICAgIHJldHVybiBzdHJbMF0gPT09ICcwJyAmJiBzdHJbMV0gPT09ICd4Jztcbn1cbmV4cG9ydHMuaXNIZXhQcmVmaXhlZCA9IGlzSGV4UHJlZml4ZWQ7XG4vKipcbiAqIFJlbW92ZXMgJzB4JyBmcm9tIGEgZ2l2ZW4gYFN0cmluZ2AgaWYgcHJlc2VudFxuICogQHBhcmFtIHN0ciB0aGUgc3RyaW5nIHZhbHVlXG4gKiBAcmV0dXJucyB0aGUgc3RyaW5nIHdpdGhvdXQgMHggcHJlZml4XG4gKi9cbnZhciBzdHJpcEhleFByZWZpeCA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIltzdHJpcEhleFByZWZpeF0gaW5wdXQgbXVzdCBiZSB0eXBlICdzdHJpbmcnLCByZWNlaXZlZCBcIiArIHR5cGVvZiBzdHIpO1xuICAgIHJldHVybiBpc0hleFByZWZpeGVkKHN0cikgPyBzdHIuc2xpY2UoMikgOiBzdHI7XG59O1xuZXhwb3J0cy5zdHJpcEhleFByZWZpeCA9IHN0cmlwSGV4UHJlZml4O1xuLyoqXG4gKiBQYWRzIGEgYFN0cmluZ2AgdG8gaGF2ZSBhbiBldmVuIGxlbmd0aFxuICogQHBhcmFtIHZhbHVlXG4gKiBAcmV0dXJuIG91dHB1dFxuICovXG5mdW5jdGlvbiBwYWRUb0V2ZW4odmFsdWUpIHtcbiAgICB2YXIgYSA9IHZhbHVlO1xuICAgIGlmICh0eXBlb2YgYSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW3BhZFRvRXZlbl0gdmFsdWUgbXVzdCBiZSB0eXBlICdzdHJpbmcnLCByZWNlaXZlZCBcIiArIHR5cGVvZiBhKTtcbiAgICB9XG4gICAgaWYgKGEubGVuZ3RoICUgMilcbiAgICAgICAgYSA9IFwiMFwiICsgYTtcbiAgICByZXR1cm4gYTtcbn1cbmV4cG9ydHMucGFkVG9FdmVuID0gcGFkVG9FdmVuO1xuLyoqXG4gKiBHZXQgdGhlIGJpbmFyeSBzaXplIG9mIGEgc3RyaW5nXG4gKiBAcGFyYW0gc3RyXG4gKiBAcmV0dXJucyB0aGUgbnVtYmVyIG9mIGJ5dGVzIGNvbnRhaW5lZCB3aXRoaW4gdGhlIHN0cmluZ1xuICovXG5mdW5jdGlvbiBnZXRCaW5hcnlTaXplKHN0cikge1xuICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbZ2V0QmluYXJ5U2l6ZV0gbWV0aG9kIHJlcXVpcmVzIGlucHV0IHR5cGUgJ3N0cmluZycsIHJlY2lldmVkIFwiICsgdHlwZW9mIHN0cik7XG4gICAgfVxuICAgIHJldHVybiBCdWZmZXIuYnl0ZUxlbmd0aChzdHIsICd1dGY4Jyk7XG59XG5leHBvcnRzLmdldEJpbmFyeVNpemUgPSBnZXRCaW5hcnlTaXplO1xuLyoqXG4gKiBSZXR1cm5zIFRSVUUgaWYgdGhlIGZpcnN0IHNwZWNpZmllZCBhcnJheSBjb250YWlucyBhbGwgZWxlbWVudHNcbiAqIGZyb20gdGhlIHNlY29uZCBvbmUuIEZBTFNFIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0gc3VwZXJzZXRcbiAqIEBwYXJhbSBzdWJzZXRcbiAqXG4gKi9cbmZ1bmN0aW9uIGFycmF5Q29udGFpbnNBcnJheShzdXBlcnNldCwgc3Vic2V0LCBzb21lKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3VwZXJzZXQpICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlthcnJheUNvbnRhaW5zQXJyYXldIG1ldGhvZCByZXF1aXJlcyBpbnB1dCAnc3VwZXJzZXQnIHRvIGJlIGFuIGFycmF5LCBnb3QgdHlwZSAnXCIgKyB0eXBlb2Ygc3VwZXJzZXQgKyBcIidcIik7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHN1YnNldCkgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW2FycmF5Q29udGFpbnNBcnJheV0gbWV0aG9kIHJlcXVpcmVzIGlucHV0ICdzdWJzZXQnIHRvIGJlIGFuIGFycmF5LCBnb3QgdHlwZSAnXCIgKyB0eXBlb2Ygc3Vic2V0ICsgXCInXCIpO1xuICAgIH1cbiAgICByZXR1cm4gc3Vic2V0W3NvbWUgPyAnc29tZScgOiAnZXZlcnknXShmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHN1cGVyc2V0LmluZGV4T2YodmFsdWUpID49IDA7IH0pO1xufVxuZXhwb3J0cy5hcnJheUNvbnRhaW5zQXJyYXkgPSBhcnJheUNvbnRhaW5zQXJyYXk7XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gZ2V0IGFzY2lpIGZyb20gaXRzIGhleCByZXByZXNlbnRhdGlvblxuICpcbiAqIEBwYXJhbSBzdHJpbmcgaW4gaGV4XG4gKiBAcmV0dXJucyBhc2NpaSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgaGV4IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRvQXNjaWkoaGV4KSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbCA9IGhleC5sZW5ndGg7XG4gICAgaWYgKGhleC5zdWJzdHJpbmcoMCwgMikgPT09ICcweCcpXG4gICAgICAgIGkgPSAyO1xuICAgIGZvciAoOyBpIDwgbDsgaSArPSAyKSB7XG4gICAgICAgIHZhciBjb2RlID0gcGFyc2VJbnQoaGV4LnN1YnN0cihpLCAyKSwgMTYpO1xuICAgICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn1cbmV4cG9ydHMudG9Bc2NpaSA9IHRvQXNjaWk7XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gZ2V0IGhleCByZXByZXNlbnRhdGlvbiAocHJlZml4ZWQgYnkgMHgpIG9mIHV0Zjggc3RyaW5nXG4gKlxuICogQHBhcmFtIHN0cmluZ1xuICogQHBhcmFtIG9wdGlvbmFsIHBhZGRpbmdcbiAqIEByZXR1cm5zIGhleCByZXByZXNlbnRhdGlvbiBvZiBpbnB1dCBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gZnJvbVV0Zjgoc3RyaW5nVmFsdWUpIHtcbiAgICB2YXIgc3RyID0gQnVmZmVyLmZyb20oc3RyaW5nVmFsdWUsICd1dGY4Jyk7XG4gICAgcmV0dXJuIFwiMHhcIiArIHBhZFRvRXZlbihzdHIudG9TdHJpbmcoJ2hleCcpKS5yZXBsYWNlKC9eMCt8MCskL2csICcnKTtcbn1cbmV4cG9ydHMuZnJvbVV0ZjggPSBmcm9tVXRmODtcbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBnZXQgaGV4IHJlcHJlc2VudGF0aW9uIChwcmVmaXhlZCBieSAweCkgb2YgYXNjaWkgc3RyaW5nXG4gKlxuICogQHBhcmFtICBzdHJpbmdcbiAqIEBwYXJhbSAgb3B0aW9uYWwgcGFkZGluZ1xuICogQHJldHVybnMgIGhleCByZXByZXNlbnRhdGlvbiBvZiBpbnB1dCBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gZnJvbUFzY2lpKHN0cmluZ1ZhbHVlKSB7XG4gICAgdmFyIGhleCA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNvZGUgPSBzdHJpbmdWYWx1ZS5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB2YXIgbiA9IGNvZGUudG9TdHJpbmcoMTYpO1xuICAgICAgICBoZXggKz0gbi5sZW5ndGggPCAyID8gXCIwXCIgKyBuIDogbjtcbiAgICB9XG4gICAgcmV0dXJuIFwiMHhcIiArIGhleDtcbn1cbmV4cG9ydHMuZnJvbUFzY2lpID0gZnJvbUFzY2lpO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBrZXlzIGZyb20gYW4gYXJyYXkgb2Ygb2JqZWN0cy5cbiAqIEBleGFtcGxlXG4gKiBgYGBqc1xuICogZ2V0S2V5cyhbe2E6ICcxJywgYjogJzInfSwge2E6ICczJywgYjogJzQnfV0sICdhJykgPT4gWycxJywgJzMnXVxuICpgYGBgXG4gKiBAcGFyYW0gIHBhcmFtc1xuICogQHBhcmFtICBrZXlcbiAqIEBwYXJhbSAgYWxsb3dFbXB0eVxuICogQHJldHVybnMgb3V0cHV0IGp1c3QgYSBzaW1wbGUgYXJyYXkgb2Ygb3V0cHV0IGtleXNcbiAqL1xuZnVuY3Rpb24gZ2V0S2V5cyhwYXJhbXMsIGtleSwgYWxsb3dFbXB0eSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShwYXJhbXMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIltnZXRLZXlzXSBtZXRob2QgZXhwZWN0cyBpbnB1dCAncGFyYW1zJyB0byBiZSBhbiBhcnJheSwgZ290IFwiICsgdHlwZW9mIHBhcmFtcyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbZ2V0S2V5c10gbWV0aG9kIGV4cGVjdHMgaW5wdXQgJ2tleScgdG8gYmUgdHlwZSAnc3RyaW5nJywgZ290IFwiICsgdHlwZW9mIHBhcmFtcyk7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdmFsdWUgPSBwYXJhbXNbaV1ba2V5XTtcbiAgICAgICAgaWYgKGFsbG93RW1wdHkgJiYgIXZhbHVlKSB7XG4gICAgICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgYWJpIC0gZXhwZWN0ZWQgdHlwZSAnc3RyaW5nJywgcmVjZWl2ZWQgXCIgKyB0eXBlb2YgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuZ2V0S2V5cyA9IGdldEtleXM7XG4vKipcbiAqIElzIHRoZSBzdHJpbmcgYSBoZXggc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAgdmFsdWVcbiAqIEBwYXJhbSAgbGVuZ3RoXG4gKiBAcmV0dXJucyAgb3V0cHV0IHRoZSBzdHJpbmcgaXMgYSBoZXggc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGlzSGV4U3RyaW5nKHZhbHVlLCBsZW5ndGgpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyB8fCAhdmFsdWUubWF0Y2goL14weFswLTlBLUZhLWZdKiQvKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChsZW5ndGggJiYgdmFsdWUubGVuZ3RoICE9PSAyICsgMiAqIGxlbmd0aClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0cy5pc0hleFN0cmluZyA9IGlzSGV4U3RyaW5nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJuYWwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmaW5lUHJvcGVydGllcyA9IHZvaWQgMDtcbnZhciBhc3NlcnRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYXNzZXJ0XCIpKTtcbnZhciBpbnRlcm5hbF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWxcIik7XG52YXIgcmxwID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJybHBcIikpO1xudmFyIGJ5dGVzXzEgPSByZXF1aXJlKFwiLi9ieXRlc1wiKTtcbi8qKlxuICogRGVmaW5lcyBwcm9wZXJ0aWVzIG9uIGEgYE9iamVjdGAuIEl0IG1ha2UgdGhlIGFzc3VtcHRpb24gdGhhdCB1bmRlcmx5aW5nIGRhdGEgaXMgYmluYXJ5LlxuICogQHBhcmFtIHNlbGYgdGhlIGBPYmplY3RgIHRvIGRlZmluZSBwcm9wZXJ0aWVzIG9uXG4gKiBAcGFyYW0gZmllbGRzIGFuIGFycmF5IGZpZWxkcyB0byBkZWZpbmUuIEZpZWxkcyBjYW4gY29udGFpbjpcbiAqICogYG5hbWVgIC0gdGhlIG5hbWUgb2YgdGhlIHByb3BlcnRpZXNcbiAqICogYGxlbmd0aGAgLSB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRoZSBmaWVsZCBjYW4gaGF2ZVxuICogKiBgYWxsb3dMZXNzYCAtIGlmIHRoZSBmaWVsZCBjYW4gYmUgbGVzcyB0aGFuIHRoZSBsZW5ndGhcbiAqICogYGFsbG93RW1wdHlgXG4gKiBAcGFyYW0gZGF0YSBkYXRhIHRvIGJlIHZhbGlkYXRlZCBhZ2FpbnN0IHRoZSBkZWZpbml0aW9uc1xuICogQGRlcHJlY2F0ZWRcbiAqL1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiAoc2VsZiwgZmllbGRzLCBkYXRhKSB7XG4gICAgc2VsZi5yYXcgPSBbXTtcbiAgICBzZWxmLl9maWVsZHMgPSBbXTtcbiAgICAvLyBhdHRhY2ggdGhlIGB0b0pTT05gXG4gICAgc2VsZi50b0pTT04gPSBmdW5jdGlvbiAobGFiZWwpIHtcbiAgICAgICAgaWYgKGxhYmVsID09PSB2b2lkIDApIHsgbGFiZWwgPSBmYWxzZTsgfVxuICAgICAgICBpZiAobGFiZWwpIHtcbiAgICAgICAgICAgIHZhciBvYmpfMSA9IHt9O1xuICAgICAgICAgICAgc2VsZi5fZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgb2JqXzFbZmllbGRdID0gXCIweFwiICsgc2VsZltmaWVsZF0udG9TdHJpbmcoJ2hleCcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gb2JqXzE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgwLCBieXRlc18xLmJhVG9KU09OKShzZWxmLnJhdyk7XG4gICAgfTtcbiAgICBzZWxmLnNlcmlhbGl6ZSA9IGZ1bmN0aW9uIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHJscC5lbmNvZGUoc2VsZi5yYXcpO1xuICAgIH07XG4gICAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkLCBpKSB7XG4gICAgICAgIHNlbGYuX2ZpZWxkcy5wdXNoKGZpZWxkLm5hbWUpO1xuICAgICAgICBmdW5jdGlvbiBnZXR0ZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi5yYXdbaV07XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2V0dGVyKHYpIHtcbiAgICAgICAgICAgIHYgPSAoMCwgYnl0ZXNfMS50b0J1ZmZlcikodik7XG4gICAgICAgICAgICBpZiAodi50b1N0cmluZygnaGV4JykgPT09ICcwMCcgJiYgIWZpZWxkLmFsbG93WmVybykge1xuICAgICAgICAgICAgICAgIHYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmllbGQuYWxsb3dMZXNzICYmIGZpZWxkLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHYgPSAoMCwgYnl0ZXNfMS51bnBhZEJ1ZmZlcikodik7XG4gICAgICAgICAgICAgICAgKDAsIGFzc2VydF8xLmRlZmF1bHQpKGZpZWxkLmxlbmd0aCA+PSB2Lmxlbmd0aCwgXCJUaGUgZmllbGQgXCIgKyBmaWVsZC5uYW1lICsgXCIgbXVzdCBub3QgaGF2ZSBtb3JlIFwiICsgZmllbGQubGVuZ3RoICsgXCIgYnl0ZXNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghKGZpZWxkLmFsbG93WmVybyAmJiB2Lmxlbmd0aCA9PT0gMCkgJiYgZmllbGQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgKDAsIGFzc2VydF8xLmRlZmF1bHQpKGZpZWxkLmxlbmd0aCA9PT0gdi5sZW5ndGgsIFwiVGhlIGZpZWxkIFwiICsgZmllbGQubmFtZSArIFwiIG11c3QgaGF2ZSBieXRlIGxlbmd0aCBvZiBcIiArIGZpZWxkLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLnJhd1tpXSA9IHY7XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNlbGYsIGZpZWxkLm5hbWUsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBnZXQ6IGdldHRlcixcbiAgICAgICAgICAgIHNldDogc2V0dGVyLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGZpZWxkLmRlZmF1bHQpIHtcbiAgICAgICAgICAgIHNlbGZbZmllbGQubmFtZV0gPSBmaWVsZC5kZWZhdWx0O1xuICAgICAgICB9XG4gICAgICAgIC8vIGF0dGFjaCBhbGlhc1xuICAgICAgICBpZiAoZmllbGQuYWxpYXMpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCBmaWVsZC5hbGlhcywge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzZXQ6IHNldHRlcixcbiAgICAgICAgICAgICAgICBnZXQ6IGdldHRlcixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gaWYgdGhlIGNvbnN0dWN0b3IgaXMgcGFzc2VkIGRhdGFcbiAgICBpZiAoZGF0YSkge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBkYXRhID0gQnVmZmVyLmZyb20oKDAsIGludGVybmFsXzEuc3RyaXBIZXhQcmVmaXgpKGRhdGEpLCAnaGV4Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkge1xuICAgICAgICAgICAgZGF0YSA9IHJscC5kZWNvZGUoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aCA+IHNlbGYuX2ZpZWxkcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIG51bWJlciBvZiBmaWVsZHMgaW4gZGF0YScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIGFsbCB0aGUgaXRlbXMgYXJlIGJ1ZmZlcnNcbiAgICAgICAgICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZCwgaSkge1xuICAgICAgICAgICAgICAgIHNlbGZbc2VsZi5fZmllbGRzW2ldXSA9ICgwLCBieXRlc18xLnRvQnVmZmVyKShkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdmFyIGtleXNfMSA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICAgICAgICAgICAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleXNfMS5pbmRleE9mKGZpZWxkLm5hbWUpICE9PSAtMSlcbiAgICAgICAgICAgICAgICAgICAgc2VsZltmaWVsZC5uYW1lXSA9IGRhdGFbZmllbGQubmFtZV07XG4gICAgICAgICAgICAgICAgaWYgKGtleXNfMS5pbmRleE9mKGZpZWxkLmFsaWFzKSAhPT0gLTEpXG4gICAgICAgICAgICAgICAgICAgIHNlbGZbZmllbGQuYWxpYXNdID0gZGF0YVtmaWVsZC5hbGlhc107XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBkYXRhJyk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuZXhwb3J0cy5kZWZpbmVQcm9wZXJ0aWVzID0gZGVmaW5lUHJvcGVydGllcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9iamVjdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGFzaFBlcnNvbmFsTWVzc2FnZSA9IGV4cG9ydHMuaXNWYWxpZFNpZ25hdHVyZSA9IGV4cG9ydHMuZnJvbVJwY1NpZyA9IGV4cG9ydHMudG9Db21wYWN0U2lnID0gZXhwb3J0cy50b1JwY1NpZyA9IGV4cG9ydHMuZWNyZWNvdmVyID0gZXhwb3J0cy5lY3NpZ24gPSB2b2lkIDA7XG52YXIgc2VjcDI1NmsxXzEgPSByZXF1aXJlKFwiZXRoZXJldW0tY3J5cHRvZ3JhcGh5L3NlY3AyNTZrMVwiKTtcbnZhciBibl9qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJibi5qc1wiKSk7XG52YXIgYnl0ZXNfMSA9IHJlcXVpcmUoXCIuL2J5dGVzXCIpO1xudmFyIGhhc2hfMSA9IHJlcXVpcmUoXCIuL2hhc2hcIik7XG52YXIgaGVscGVyc18xID0gcmVxdWlyZShcIi4vaGVscGVyc1wiKTtcbnZhciB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5mdW5jdGlvbiBlY3NpZ24obXNnSGFzaCwgcHJpdmF0ZUtleSwgY2hhaW5JZCkge1xuICAgIHZhciBfYSA9ICgwLCBzZWNwMjU2azFfMS5lY2RzYVNpZ24pKG1zZ0hhc2gsIHByaXZhdGVLZXkpLCBzaWduYXR1cmUgPSBfYS5zaWduYXR1cmUsIHJlY292ZXJ5ID0gX2EucmVjaWQ7XG4gICAgdmFyIHIgPSBCdWZmZXIuZnJvbShzaWduYXR1cmUuc2xpY2UoMCwgMzIpKTtcbiAgICB2YXIgcyA9IEJ1ZmZlci5mcm9tKHNpZ25hdHVyZS5zbGljZSgzMiwgNjQpKTtcbiAgICBpZiAoIWNoYWluSWQgfHwgdHlwZW9mIGNoYWluSWQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIC8vIHJldHVybiBsZWdhY3kgdHlwZSBFQ0RTQVNpZ25hdHVyZSAoZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBFQ0RTQVNpZ25hdHVyZUJ1ZmZlciB0byBoYW5kbGUgbGFyZ2UgY2hhaW5JZHMpXG4gICAgICAgIGlmIChjaGFpbklkICYmICFOdW1iZXIuaXNTYWZlSW50ZWdlcihjaGFpbklkKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgcHJvdmlkZWQgbnVtYmVyIGlzIGdyZWF0ZXIgdGhhbiBNQVhfU0FGRV9JTlRFR0VSIChwbGVhc2UgdXNlIGFuIGFsdGVybmF0aXZlIGlucHV0IHR5cGUpJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZfMSA9IGNoYWluSWQgPyByZWNvdmVyeSArIChjaGFpbklkICogMiArIDM1KSA6IHJlY292ZXJ5ICsgMjc7XG4gICAgICAgIHJldHVybiB7IHI6IHIsIHM6IHMsIHY6IHZfMSB9O1xuICAgIH1cbiAgICB2YXIgY2hhaW5JZEJOID0gKDAsIHR5cGVzXzEudG9UeXBlKShjaGFpbklkLCB0eXBlc18xLlR5cGVPdXRwdXQuQk4pO1xuICAgIHZhciB2ID0gY2hhaW5JZEJOLm11bG4oMikuYWRkbigzNSkuYWRkbihyZWNvdmVyeSkudG9BcnJheUxpa2UoQnVmZmVyKTtcbiAgICByZXR1cm4geyByOiByLCBzOiBzLCB2OiB2IH07XG59XG5leHBvcnRzLmVjc2lnbiA9IGVjc2lnbjtcbmZ1bmN0aW9uIGNhbGN1bGF0ZVNpZ1JlY292ZXJ5KHYsIGNoYWluSWQpIHtcbiAgICB2YXIgdkJOID0gKDAsIHR5cGVzXzEudG9UeXBlKSh2LCB0eXBlc18xLlR5cGVPdXRwdXQuQk4pO1xuICAgIGlmICghY2hhaW5JZCkge1xuICAgICAgICByZXR1cm4gdkJOLnN1Ym4oMjcpO1xuICAgIH1cbiAgICB2YXIgY2hhaW5JZEJOID0gKDAsIHR5cGVzXzEudG9UeXBlKShjaGFpbklkLCB0eXBlc18xLlR5cGVPdXRwdXQuQk4pO1xuICAgIHJldHVybiB2Qk4uc3ViKGNoYWluSWRCTi5tdWxuKDIpLmFkZG4oMzUpKTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRTaWdSZWNvdmVyeShyZWNvdmVyeSkge1xuICAgIHZhciByZWMgPSBuZXcgYm5fanNfMS5kZWZhdWx0KHJlY292ZXJ5KTtcbiAgICByZXR1cm4gcmVjLmVxbigwKSB8fCByZWMuZXFuKDEpO1xufVxuLyoqXG4gKiBFQ0RTQSBwdWJsaWMga2V5IHJlY292ZXJ5IGZyb20gc2lnbmF0dXJlLlxuICogQHJldHVybnMgUmVjb3ZlcmVkIHB1YmxpYyBrZXlcbiAqL1xudmFyIGVjcmVjb3ZlciA9IGZ1bmN0aW9uIChtc2dIYXNoLCB2LCByLCBzLCBjaGFpbklkKSB7XG4gICAgdmFyIHNpZ25hdHVyZSA9IEJ1ZmZlci5jb25jYXQoWygwLCBieXRlc18xLnNldExlbmd0aExlZnQpKHIsIDMyKSwgKDAsIGJ5dGVzXzEuc2V0TGVuZ3RoTGVmdCkocywgMzIpXSwgNjQpO1xuICAgIHZhciByZWNvdmVyeSA9IGNhbGN1bGF0ZVNpZ1JlY292ZXJ5KHYsIGNoYWluSWQpO1xuICAgIGlmICghaXNWYWxpZFNpZ1JlY292ZXJ5KHJlY292ZXJ5KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2lnbmF0dXJlIHYgdmFsdWUnKTtcbiAgICB9XG4gICAgdmFyIHNlbmRlclB1YktleSA9ICgwLCBzZWNwMjU2azFfMS5lY2RzYVJlY292ZXIpKHNpZ25hdHVyZSwgcmVjb3ZlcnkudG9OdW1iZXIoKSwgbXNnSGFzaCk7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKCgwLCBzZWNwMjU2azFfMS5wdWJsaWNLZXlDb252ZXJ0KShzZW5kZXJQdWJLZXksIGZhbHNlKS5zbGljZSgxKSk7XG59O1xuZXhwb3J0cy5lY3JlY292ZXIgPSBlY3JlY292ZXI7XG4vKipcbiAqIENvbnZlcnQgc2lnbmF0dXJlIHBhcmFtZXRlcnMgaW50byB0aGUgZm9ybWF0IG9mIGBldGhfc2lnbmAgUlBDIG1ldGhvZC5cbiAqIEByZXR1cm5zIFNpZ25hdHVyZVxuICovXG52YXIgdG9ScGNTaWcgPSBmdW5jdGlvbiAodiwgciwgcywgY2hhaW5JZCkge1xuICAgIHZhciByZWNvdmVyeSA9IGNhbGN1bGF0ZVNpZ1JlY292ZXJ5KHYsIGNoYWluSWQpO1xuICAgIGlmICghaXNWYWxpZFNpZ1JlY292ZXJ5KHJlY292ZXJ5KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2lnbmF0dXJlIHYgdmFsdWUnKTtcbiAgICB9XG4gICAgLy8gZ2V0aCAoYW5kIHRoZSBSUEMgZXRoX3NpZ24gbWV0aG9kKSB1c2VzIHRoZSA2NSBieXRlIGZvcm1hdCB1c2VkIGJ5IEJpdGNvaW5cbiAgICByZXR1cm4gKDAsIGJ5dGVzXzEuYnVmZmVyVG9IZXgpKEJ1ZmZlci5jb25jYXQoWygwLCBieXRlc18xLnNldExlbmd0aExlZnQpKHIsIDMyKSwgKDAsIGJ5dGVzXzEuc2V0TGVuZ3RoTGVmdCkocywgMzIpLCAoMCwgYnl0ZXNfMS50b0J1ZmZlcikodildKSk7XG59O1xuZXhwb3J0cy50b1JwY1NpZyA9IHRvUnBjU2lnO1xuLyoqXG4gKiBDb252ZXJ0IHNpZ25hdHVyZSBwYXJhbWV0ZXJzIGludG8gdGhlIGZvcm1hdCBvZiBDb21wYWN0IFNpZ25hdHVyZSBSZXByZXNlbnRhdGlvbiAoRUlQLTIwOTgpLlxuICogQHJldHVybnMgU2lnbmF0dXJlXG4gKi9cbnZhciB0b0NvbXBhY3RTaWcgPSBmdW5jdGlvbiAodiwgciwgcywgY2hhaW5JZCkge1xuICAgIHZhciByZWNvdmVyeSA9IGNhbGN1bGF0ZVNpZ1JlY292ZXJ5KHYsIGNoYWluSWQpO1xuICAgIGlmICghaXNWYWxpZFNpZ1JlY292ZXJ5KHJlY292ZXJ5KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2lnbmF0dXJlIHYgdmFsdWUnKTtcbiAgICB9XG4gICAgdmFyIHZuID0gKDAsIHR5cGVzXzEudG9UeXBlKSh2LCB0eXBlc18xLlR5cGVPdXRwdXQuTnVtYmVyKTtcbiAgICB2YXIgc3MgPSBzO1xuICAgIGlmICgodm4gPiAyOCAmJiB2biAlIDIgPT09IDEpIHx8IHZuID09PSAxIHx8IHZuID09PSAyOCkge1xuICAgICAgICBzcyA9IEJ1ZmZlci5mcm9tKHMpO1xuICAgICAgICBzc1swXSB8PSAweDgwO1xuICAgIH1cbiAgICByZXR1cm4gKDAsIGJ5dGVzXzEuYnVmZmVyVG9IZXgpKEJ1ZmZlci5jb25jYXQoWygwLCBieXRlc18xLnNldExlbmd0aExlZnQpKHIsIDMyKSwgKDAsIGJ5dGVzXzEuc2V0TGVuZ3RoTGVmdCkoc3MsIDMyKV0pKTtcbn07XG5leHBvcnRzLnRvQ29tcGFjdFNpZyA9IHRvQ29tcGFjdFNpZztcbi8qKlxuICogQ29udmVydCBzaWduYXR1cmUgZm9ybWF0IG9mIHRoZSBgZXRoX3NpZ25gIFJQQyBtZXRob2QgdG8gc2lnbmF0dXJlIHBhcmFtZXRlcnNcbiAqIE5PVEU6IGFsbCBiZWNhdXNlIG9mIGEgYnVnIGluIGdldGg6IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9nby1ldGhlcmV1bS9pc3N1ZXMvMjA1M1xuICovXG52YXIgZnJvbVJwY1NpZyA9IGZ1bmN0aW9uIChzaWcpIHtcbiAgICB2YXIgYnVmID0gKDAsIGJ5dGVzXzEudG9CdWZmZXIpKHNpZyk7XG4gICAgdmFyIHI7XG4gICAgdmFyIHM7XG4gICAgdmFyIHY7XG4gICAgaWYgKGJ1Zi5sZW5ndGggPj0gNjUpIHtcbiAgICAgICAgciA9IGJ1Zi5zbGljZSgwLCAzMik7XG4gICAgICAgIHMgPSBidWYuc2xpY2UoMzIsIDY0KTtcbiAgICAgICAgdiA9ICgwLCBieXRlc18xLmJ1ZmZlclRvSW50KShidWYuc2xpY2UoNjQpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYnVmLmxlbmd0aCA9PT0gNjQpIHtcbiAgICAgICAgLy8gQ29tcGFjdCBTaWduYXR1cmUgUmVwcmVzZW50YXRpb24gKGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMjA5OClcbiAgICAgICAgciA9IGJ1Zi5zbGljZSgwLCAzMik7XG4gICAgICAgIHMgPSBidWYuc2xpY2UoMzIsIDY0KTtcbiAgICAgICAgdiA9ICgwLCBieXRlc18xLmJ1ZmZlclRvSW50KShidWYuc2xpY2UoMzIsIDMzKSkgPj4gNztcbiAgICAgICAgc1swXSAmPSAweDdmO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNpZ25hdHVyZSBsZW5ndGgnKTtcbiAgICB9XG4gICAgLy8gc3VwcG9ydCBib3RoIHZlcnNpb25zIG9mIGBldGhfc2lnbmAgcmVzcG9uc2VzXG4gICAgaWYgKHYgPCAyNykge1xuICAgICAgICB2ICs9IDI3O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB2OiB2LFxuICAgICAgICByOiByLFxuICAgICAgICBzOiBzLFxuICAgIH07XG59O1xuZXhwb3J0cy5mcm9tUnBjU2lnID0gZnJvbVJwY1NpZztcbi8qKlxuICogVmFsaWRhdGUgYSBFQ0RTQSBzaWduYXR1cmUuXG4gKiBAcGFyYW0gaG9tZXN0ZWFkT3JMYXRlciBJbmRpY2F0ZXMgd2hldGhlciB0aGlzIGlzIGJlaW5nIHVzZWQgb24gZWl0aGVyIHRoZSBob21lc3RlYWQgaGFyZGZvcmsgb3IgYSBsYXRlciBvbmVcbiAqL1xudmFyIGlzVmFsaWRTaWduYXR1cmUgPSBmdW5jdGlvbiAodiwgciwgcywgaG9tZXN0ZWFkT3JMYXRlciwgY2hhaW5JZCkge1xuICAgIGlmIChob21lc3RlYWRPckxhdGVyID09PSB2b2lkIDApIHsgaG9tZXN0ZWFkT3JMYXRlciA9IHRydWU7IH1cbiAgICB2YXIgU0VDUDI1NksxX05fRElWXzIgPSBuZXcgYm5fanNfMS5kZWZhdWx0KCc3ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjVkNTc2ZTczNTdhNDUwMWRkZmU5MmY0NjY4MWIyMGEwJywgMTYpO1xuICAgIHZhciBTRUNQMjU2SzFfTiA9IG5ldyBibl9qc18xLmRlZmF1bHQoJ2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlYmFhZWRjZTZhZjQ4YTAzYmJmZDI1ZThjZDAzNjQxNDEnLCAxNik7XG4gICAgaWYgKHIubGVuZ3RoICE9PSAzMiB8fCBzLmxlbmd0aCAhPT0gMzIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIWlzVmFsaWRTaWdSZWNvdmVyeShjYWxjdWxhdGVTaWdSZWNvdmVyeSh2LCBjaGFpbklkKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgckJOID0gbmV3IGJuX2pzXzEuZGVmYXVsdChyKTtcbiAgICB2YXIgc0JOID0gbmV3IGJuX2pzXzEuZGVmYXVsdChzKTtcbiAgICBpZiAockJOLmlzWmVybygpIHx8IHJCTi5ndChTRUNQMjU2SzFfTikgfHwgc0JOLmlzWmVybygpIHx8IHNCTi5ndChTRUNQMjU2SzFfTikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaG9tZXN0ZWFkT3JMYXRlciAmJiBzQk4uY21wKFNFQ1AyNTZLMV9OX0RJVl8yKSA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbmV4cG9ydHMuaXNWYWxpZFNpZ25hdHVyZSA9IGlzVmFsaWRTaWduYXR1cmU7XG4vKipcbiAqIFJldHVybnMgdGhlIGtlY2Nhay0yNTYgaGFzaCBvZiBgbWVzc2FnZWAsIHByZWZpeGVkIHdpdGggdGhlIGhlYWRlciB1c2VkIGJ5IHRoZSBgZXRoX3NpZ25gIFJQQyBjYWxsLlxuICogVGhlIG91dHB1dCBvZiB0aGlzIGZ1bmN0aW9uIGNhbiBiZSBmZWQgaW50byBgZWNzaWduYCB0byBwcm9kdWNlIHRoZSBzYW1lIHNpZ25hdHVyZSBhcyB0aGUgYGV0aF9zaWduYFxuICogY2FsbCBmb3IgYSBnaXZlbiBgbWVzc2FnZWAsIG9yIGZlZCB0byBgZWNyZWNvdmVyYCBhbG9uZyB3aXRoIGEgc2lnbmF0dXJlIHRvIHJlY292ZXIgdGhlIHB1YmxpYyBrZXlcbiAqIHVzZWQgdG8gcHJvZHVjZSB0aGUgc2lnbmF0dXJlLlxuICovXG52YXIgaGFzaFBlcnNvbmFsTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgKDAsIGhlbHBlcnNfMS5hc3NlcnRJc0J1ZmZlcikobWVzc2FnZSk7XG4gICAgdmFyIHByZWZpeCA9IEJ1ZmZlci5mcm9tKFwiXFx1MDAxOUV0aGVyZXVtIFNpZ25lZCBNZXNzYWdlOlxcblwiICsgbWVzc2FnZS5sZW5ndGgsICd1dGYtOCcpO1xuICAgIHJldHVybiAoMCwgaGFzaF8xLmtlY2NhaykoQnVmZmVyLmNvbmNhdChbcHJlZml4LCBtZXNzYWdlXSkpO1xufTtcbmV4cG9ydHMuaGFzaFBlcnNvbmFsTWVzc2FnZSA9IGhhc2hQZXJzb25hbE1lc3NhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaWduYXR1cmUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRvVHlwZSA9IGV4cG9ydHMuVHlwZU91dHB1dCA9IGV4cG9ydHMuYm5Ub1JscCA9IGV4cG9ydHMuYm5Ub1VucGFkZGVkQnVmZmVyID0gZXhwb3J0cy5iblRvSGV4ID0gdm9pZCAwO1xudmFyIGJuX2pzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImJuLmpzXCIpKTtcbnZhciBpbnRlcm5hbF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWxcIik7XG52YXIgYnl0ZXNfMSA9IHJlcXVpcmUoXCIuL2J5dGVzXCIpO1xuLyoqXG4gKiBDb252ZXJ0IEJOIHRvIDB4LXByZWZpeGVkIGhleCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJuVG9IZXgodmFsdWUpIHtcbiAgICByZXR1cm4gXCIweFwiICsgdmFsdWUudG9TdHJpbmcoMTYpO1xufVxuZXhwb3J0cy5iblRvSGV4ID0gYm5Ub0hleDtcbi8qKlxuICogQ29udmVydCB2YWx1ZSBmcm9tIEJOIHRvIGFuIHVucGFkZGVkIEJ1ZmZlclxuICogKHVzZWZ1bCBmb3IgUkxQIHRyYW5zcG9ydClcbiAqIEBwYXJhbSB2YWx1ZSB2YWx1ZSB0byBjb252ZXJ0XG4gKi9cbmZ1bmN0aW9uIGJuVG9VbnBhZGRlZEJ1ZmZlcih2YWx1ZSkge1xuICAgIC8vIFVzaW5nIGBibi50b0FycmF5TGlrZShCdWZmZXIpYCBpbnN0ZWFkIG9mIGBibi50b0J1ZmZlcigpYFxuICAgIC8vIGZvciBjb21wYXRpYmlsaXR5IHdpdGggYnJvd3NlcmlmeSBhbmQgc2ltaWxhciB0b29sc1xuICAgIHJldHVybiAoMCwgYnl0ZXNfMS51bnBhZEJ1ZmZlcikodmFsdWUudG9BcnJheUxpa2UoQnVmZmVyKSk7XG59XG5leHBvcnRzLmJuVG9VbnBhZGRlZEJ1ZmZlciA9IGJuVG9VbnBhZGRlZEJ1ZmZlcjtcbi8qKlxuICogRGVwcmVjYXRlZCBhbGlhcyBmb3Ige0BsaW5rIGJuVG9VbnBhZGRlZEJ1ZmZlcn1cbiAqIEBkZXByZWNhdGVkXG4gKi9cbmZ1bmN0aW9uIGJuVG9SbHAodmFsdWUpIHtcbiAgICByZXR1cm4gYm5Ub1VucGFkZGVkQnVmZmVyKHZhbHVlKTtcbn1cbmV4cG9ydHMuYm5Ub1JscCA9IGJuVG9SbHA7XG4vKipcbiAqIFR5cGUgb3V0cHV0IG9wdGlvbnNcbiAqL1xudmFyIFR5cGVPdXRwdXQ7XG4oZnVuY3Rpb24gKFR5cGVPdXRwdXQpIHtcbiAgICBUeXBlT3V0cHV0W1R5cGVPdXRwdXRbXCJOdW1iZXJcIl0gPSAwXSA9IFwiTnVtYmVyXCI7XG4gICAgVHlwZU91dHB1dFtUeXBlT3V0cHV0W1wiQk5cIl0gPSAxXSA9IFwiQk5cIjtcbiAgICBUeXBlT3V0cHV0W1R5cGVPdXRwdXRbXCJCdWZmZXJcIl0gPSAyXSA9IFwiQnVmZmVyXCI7XG4gICAgVHlwZU91dHB1dFtUeXBlT3V0cHV0W1wiUHJlZml4ZWRIZXhTdHJpbmdcIl0gPSAzXSA9IFwiUHJlZml4ZWRIZXhTdHJpbmdcIjtcbn0pKFR5cGVPdXRwdXQgPSBleHBvcnRzLlR5cGVPdXRwdXQgfHwgKGV4cG9ydHMuVHlwZU91dHB1dCA9IHt9KSk7XG5mdW5jdGlvbiB0b1R5cGUoaW5wdXQsIG91dHB1dFR5cGUpIHtcbiAgICBpZiAoaW5wdXQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChpbnB1dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnICYmICEoMCwgaW50ZXJuYWxfMS5pc0hleFN0cmluZykoaW5wdXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkEgc3RyaW5nIG11c3QgYmUgcHJvdmlkZWQgd2l0aCBhIDB4LXByZWZpeCwgZ2l2ZW46IFwiICsgaW5wdXQpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInICYmICFOdW1iZXIuaXNTYWZlSW50ZWdlcihpbnB1dCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgcHJvdmlkZWQgbnVtYmVyIGlzIGdyZWF0ZXIgdGhhbiBNQVhfU0FGRV9JTlRFR0VSIChwbGVhc2UgdXNlIGFuIGFsdGVybmF0aXZlIGlucHV0IHR5cGUpJyk7XG4gICAgfVxuICAgIHZhciBvdXRwdXQgPSAoMCwgYnl0ZXNfMS50b0J1ZmZlcikoaW5wdXQpO1xuICAgIGlmIChvdXRwdXRUeXBlID09PSBUeXBlT3V0cHV0LkJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRUeXBlID09PSBUeXBlT3V0cHV0LkJOKSB7XG4gICAgICAgIHJldHVybiBuZXcgYm5fanNfMS5kZWZhdWx0KG91dHB1dCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFR5cGUgPT09IFR5cGVPdXRwdXQuTnVtYmVyKSB7XG4gICAgICAgIHZhciBibiA9IG5ldyBibl9qc18xLmRlZmF1bHQob3V0cHV0KTtcbiAgICAgICAgdmFyIG1heCA9IG5ldyBibl9qc18xLmRlZmF1bHQoTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIudG9TdHJpbmcoKSk7XG4gICAgICAgIGlmIChibi5ndChtYXgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBwcm92aWRlZCBudW1iZXIgaXMgZ3JlYXRlciB0aGFuIE1BWF9TQUZFX0lOVEVHRVIgKHBsZWFzZSB1c2UgYW4gYWx0ZXJuYXRpdmUgb3V0cHV0IHR5cGUpJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJuLnRvTnVtYmVyKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBvdXRwdXRUeXBlID09PSBUeXBlT3V0cHV0LlByZWZpeGVkSGV4U3RyaW5nXG4gICAgICAgIHJldHVybiBcIjB4XCIgKyBvdXRwdXQudG9TdHJpbmcoJ2hleCcpO1xuICAgIH1cbn1cbmV4cG9ydHMudG9UeXBlID0gdG9UeXBlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==
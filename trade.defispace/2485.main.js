/*! For license information please see 2485.main.js.LICENSE.txt */
(self.webpackChunkmy_swap=self.webpackChunkmy_swap||[]).push([[2485],{55522:(t,e,r)=>{"use strict";r.r(e),r.d(e,{detectEnv:()=>p,detectOS:()=>m,formatIOSMobile:()=>H,formatMobileRegistry:()=>G,formatMobileRegistryEntry:()=>$,getAppLogoUrl:()=>V,getClientMeta:()=>P,getCrypto:()=>B,getCryptoOrThrow:()=>C,getDappRegistryUrl:()=>Z,getDocument:()=>k,getDocumentOrThrow:()=>x,getFromWindow:()=>b,getFromWindowOrThrow:()=>M,getLocal:()=>U,getLocalStorage:()=>I,getLocalStorageOrThrow:()=>R,getLocation:()=>T,getLocationOrThrow:()=>S,getMobileLinkRegistry:()=>z,getMobileRegistryEntry:()=>D,getNavigator:()=>A,getNavigatorOrThrow:()=>E,getWalletRegistryUrl:()=>F,isAndroid:()=>g,isBrowser:()=>_,isIOS:()=>v,isMobile:()=>y,isNode:()=>w,mobileLinkChoiceKey:()=>K,removeLocal:()=>q,safeJsonParse:()=>L,safeJsonStringify:()=>N,saveMobileLinkInfo:()=>j,setLocal:()=>O});var n=r(65755),i=r(62873),o=function(t,e,r){this.name=t,this.version=e,this.os=r,this.type="browser"},s=function(t){this.version=t,this.type="node",this.name="node",this.os=process.platform},a=function(t,e,r,n){this.name=t,this.version=e,this.os=r,this.bot=n,this.type="bot-device"},u=function(){this.type="bot",this.bot=!0,this.name="bot",this.version=null,this.os=null},h=function(){this.type="react-native",this.name="react-native",this.version=null,this.os=null},c=/(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/,l=[["aol",/AOLShield\/([0-9\._]+)/],["edge",/Edge\/([0-9\._]+)/],["edge-ios",/EdgiOS\/([0-9\._]+)/],["yandexbrowser",/YaBrowser\/([0-9\._]+)/],["kakaotalk",/KAKAOTALK\s([0-9\.]+)/],["samsung",/SamsungBrowser\/([0-9\.]+)/],["silk",/\bSilk\/([0-9._-]+)\b/],["miui",/MiuiBrowser\/([0-9\.]+)$/],["beaker",/BeakerBrowser\/([0-9\.]+)/],["edge-chromium",/EdgA?\/([0-9\.]+)/],["chromium-webview",/(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["chrome",/(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["phantomjs",/PhantomJS\/([0-9\.]+)(:?\s|$)/],["crios",/CriOS\/([0-9\.]+)(:?\s|$)/],["firefox",/Firefox\/([0-9\.]+)(?:\s|$)/],["fxios",/FxiOS\/([0-9\.]+)/],["opera-mini",/Opera Mini.*Version\/([0-9\.]+)/],["opera",/Opera\/([0-9\.]+)(?:\s|$)/],["opera",/OPR\/([0-9\.]+)(:?\s|$)/],["ie",/Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],["ie",/MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],["ie",/MSIE\s(7\.0)/],["bb10",/BB10;\sTouch.*Version\/([0-9\.]+)/],["android",/Android\s([0-9\.]+)/],["ios",/Version\/([0-9\._]+).*Mobile.*Safari.*/],["safari",/Version\/([0-9\._]+).*Safari/],["facebook",/FBAV\/([0-9\.]+)/],["instagram",/Instagram\s([0-9\.]+)/],["ios-webview",/AppleWebKit\/([0-9\.]+).*Mobile/],["ios-webview",/AppleWebKit\/([0-9\.]+).*Gecko\)$/],["searchbot",/alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/]],f=[["iOS",/iP(hone|od|ad)/],["Android OS",/Android/],["BlackBerry OS",/BlackBerry|BB10/],["Windows Mobile",/IEMobile/],["Amazon OS",/Kindle/],["Windows 3.11",/Win16/],["Windows 95",/(Windows 95)|(Win95)|(Windows_95)/],["Windows 98",/(Windows 98)|(Win98)/],["Windows 2000",/(Windows NT 5.0)|(Windows 2000)/],["Windows XP",/(Windows NT 5.1)|(Windows XP)/],["Windows Server 2003",/(Windows NT 5.2)/],["Windows Vista",/(Windows NT 6.0)/],["Windows 7",/(Windows NT 6.1)/],["Windows 8",/(Windows NT 6.2)/],["Windows 8.1",/(Windows NT 6.3)/],["Windows 10",/(Windows NT 10.0)/],["Windows ME",/Windows ME/],["Open BSD",/OpenBSD/],["Sun OS",/SunOS/],["Chrome OS",/CrOS/],["Linux",/(Linux)|(X11)/],["Mac OS",/(Mac_PowerPC)|(Macintosh)/],["QNX",/QNX/],["BeOS",/BeOS/],["OS/2",/OS\/2/]];function d(t){var e=function(t){return""!==t&&l.reduce((function(e,r){var n=r[0],i=r[1];if(e)return e;var o=i.exec(t);return!!o&&[n,o]}),!1)}(t);if(!e)return null;var r=e[0],n=e[1];if("searchbot"===r)return new u;var i=n[1]&&n[1].split(/[._]/).slice(0,3);i?i.length<3&&(i=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,i++)n[i]=o[s];return n}(i,function(t){for(var e=[],r=0;r<t;r++)e.push("0");return e}(3-i.length))):i=[];var s=i.join("."),h=function(t){for(var e=0,r=f.length;e<r;e++){var n=f[e],i=n[0];if(n[1].exec(t))return i}return null}(t),d=c.exec(t);return d&&d[1]?new a(r,s,h,d[1]):new o(r,s,h)}function p(t){return function(t){return t?d(t):"undefined"==typeof document&&"undefined"!=typeof navigator&&"ReactNative"===navigator.product?new h:"undefined"!=typeof navigator?d(navigator.userAgent):"undefined"!=typeof process&&process.version?new s(process.version.slice(1)):null}(t)}function m(){const t=p();return t&&t.os?t.os:void 0}function g(){const t=m();return!!t&&t.toLowerCase().includes("android")}function v(){const t=m();return!!t&&(t.toLowerCase().includes("ios")||t.toLowerCase().includes("mac")&&navigator.maxTouchPoints>1)}function y(){return!!m()&&(g()||v())}function w(){const t=p();return!(!t||!t.name)&&"node"===t.name.toLowerCase()}function _(){return!w()&&!!A()}const b=i.getFromWindow,M=i.getFromWindowOrThrow,x=i.getDocumentOrThrow,k=i.getDocument,E=i.getNavigatorOrThrow,A=i.getNavigator,S=i.getLocationOrThrow,T=i.getLocation,C=i.getCryptoOrThrow,B=i.getCrypto,R=i.getLocalStorageOrThrow,I=i.getLocalStorage;function P(){return n.D()}const L=function(t){if("string"!=typeof t)throw new Error("Cannot safe json parse value of type "+typeof t);try{return JSON.parse(t)}catch(e){return t}},N=function(t){return"string"==typeof t?t:JSON.stringify(t)};function O(t,e){const r=N(e),n=I();n&&n.setItem(t,r)}function U(t){let e=null,r=null;const n=I();return n&&(r=n.getItem(t)),e=r?L(r):r,e}function q(t){const e=I();e&&e.removeItem(t)}const K="WALLETCONNECT_DEEPLINK_CHOICE";function H(t,e){const r=encodeURIComponent(t);return e.universalLink?`${e.universalLink}/wc?uri=${r}`:e.deepLink?`${e.deepLink}${e.deepLink.endsWith(":")?"//":"/"}wc?uri=${r}`:""}function j(t){const e=t.href.split("?")[0];O(K,Object.assign(Object.assign({},t),{href:e}))}function D(t,e){return t.filter((t=>t.name.toLowerCase().includes(e.toLowerCase())))[0]}function z(t,e){let r=t;return e&&(r=e.map((e=>D(t,e))).filter(Boolean)),r}const W="https://registry.walletconnect.org";function F(){return W+"/data/wallets.json"}function Z(){return W+"/data/dapps.json"}function V(t){return W+"/logo/sm/"+t+".jpeg"}function $(t,e="mobile"){return{name:t.name||"",shortName:t.metadata.shortName||"",color:t.metadata.colors.primary||"",logo:t.id?V(t.id):"",universalLink:t[e].universal||"",deepLink:t[e].native||""}}function G(t,e="mobile"){return Object.values(t).filter((t=>!!t[e].universal||!!t[e].native)).map((t=>$(t,e)))}},23087:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.removeHexLeadingZeros=e.sanitizeHex=e.addHexPrefix=e.removeHexPrefix=e.padRight=e.padLeft=e.sanitizeBytes=e.swapHex=e.swapBytes=e.splitBytes=e.calcByteLength=e.trimRight=e.trimLeft=e.concatArrays=e.concatBuffers=e.getEncoding=e.getType=e.isArrayBuffer=e.isTypedArray=e.isBuffer=e.isHexString=e.isBinaryString=e.binaryToNumber=e.binaryToUtf8=e.binaryToHex=e.binaryToArray=e.binaryToBuffer=e.numberToBinary=e.numberToUtf8=e.numberToHex=e.numberToArray=e.numberToBuffer=e.utf8ToBinary=e.utf8ToNumber=e.utf8ToHex=e.utf8ToArray=e.utf8ToBuffer=e.hexToBinary=e.hexToNumber=e.hexToUtf8=e.hexToArray=e.hexToBuffer=e.arrayToBinary=e.arrayToNumber=e.arrayToUtf8=e.arrayToHex=e.arrayToBuffer=e.bufferToBinary=e.bufferToNumber=e.bufferToUtf8=e.bufferToHex=e.bufferToArray=void 0;const i=n(r(4501)),o=n(r(65054)),s="hex",a="utf8";function u(t){return new Uint8Array(t)}function h(t,e=!1){const r=t.toString(s);return e?U(r):r}function c(t){return t.toString(a)}function l(t){return t.readUIntBE(0,t.length)}function f(t){return o.default(t)}function d(t,e=!1){return h(f(t),e)}function p(t){return c(f(t))}function m(t){return l(f(t))}function g(t){return Array.from(t).map(M).join("")}function v(t){return Buffer.from(O(t),s)}function y(t){return u(v(t))}function w(t){return g(y(t))}function _(t){return Buffer.from(t,a)}function b(t){return u(_(t))}function M(t){return L((t>>>0).toString(2))}function x(t){return f(k(t))}function k(t){return new Uint8Array(I(t).map((t=>parseInt(t,2))))}function E(t,e){return d(k(t),e)}function A(t){return!("string"!=typeof t||!new RegExp(/^[01]+$/).test(t))&&t.length%8==0}function S(t,e){return!("string"!=typeof t||!t.match(/^0x[0-9A-Fa-f]*$/)||e&&t.length!==2+2*e)}function T(t){return Buffer.isBuffer(t)}function C(t){return i.default.strict(t)&&!T(t)}function B(t){return!C(t)&&!T(t)&&void 0!==t.byteLength}function R(t,e=8){const r=t%e;return r?(t-r)/e*e+e:t}function I(t,e=8){const r=L(t).match(new RegExp(`.{${e}}`,"gi"));return Array.from(r||[])}function P(t){return I(t).map(q).join("")}function L(t,e=8,r="0"){return N(t,R(t.length,e),r)}function N(t,e,r="0"){return K(t,e,!0,r)}function O(t){return t.replace(/^0x/,"")}function U(t){return t.startsWith("0x")?t:`0x${t}`}function q(t){return t.split("").reverse().join("")}function K(t,e,r,n="0"){const i=e-t.length;let o=t;if(i>0){const e=n.repeat(i);o=r?e+t:t+e}return o}e.bufferToArray=u,e.bufferToHex=h,e.bufferToUtf8=c,e.bufferToNumber=l,e.bufferToBinary=function(t){return g(u(t))},e.arrayToBuffer=f,e.arrayToHex=d,e.arrayToUtf8=p,e.arrayToNumber=m,e.arrayToBinary=g,e.hexToBuffer=v,e.hexToArray=y,e.hexToUtf8=function(t){return c(v(t))},e.hexToNumber=function(t){return m(y(t))},e.hexToBinary=w,e.utf8ToBuffer=_,e.utf8ToArray=b,e.utf8ToHex=function(t,e=!1){return h(_(t),e)},e.utf8ToNumber=function(t){const e=parseInt(t,10);return function(t,e){if(!t)throw new Error("Number can only safely store up to 53 bits")}(!(void 0===e)),e},e.utf8ToBinary=function(t){return g(b(t))},e.numberToBuffer=function(t){return x(M(t))},e.numberToArray=function(t){return k(M(t))},e.numberToHex=function(t,e){return E(M(t),e)},e.numberToUtf8=function(t){return`${t}`},e.numberToBinary=M,e.binaryToBuffer=x,e.binaryToArray=k,e.binaryToHex=E,e.binaryToUtf8=function(t){return p(k(t))},e.binaryToNumber=function(t){return m(k(t))},e.isBinaryString=A,e.isHexString=S,e.isBuffer=T,e.isTypedArray=C,e.isArrayBuffer=B,e.getType=function(t){return T(t)?"buffer":C(t)?"typed-array":B(t)?"array-buffer":Array.isArray(t)?"array":typeof t},e.getEncoding=function(t){return A(t)?"binary":S(t)?s:a},e.concatBuffers=function(...t){return Buffer.concat(t)},e.concatArrays=function(...t){let e=[];return t.forEach((t=>e=e.concat(Array.from(t)))),new Uint8Array([...e])},e.trimLeft=function(t,e){const r=t.length-e;return r>0&&(t=t.slice(r)),t},e.trimRight=function(t,e){return t.slice(0,e)},e.calcByteLength=R,e.splitBytes=I,e.swapBytes=P,e.swapHex=function(t){return E(P(w(t)))},e.sanitizeBytes=L,e.padLeft=N,e.padRight=function(t,e,r="0"){return K(t,e,!1,r)},e.removeHexPrefix=O,e.addHexPrefix=U,e.sanitizeHex=function(t){return(t=L(t=O(t),2))&&(t=U(t)),t},e.removeHexLeadingZeros=function(t){const e=t.startsWith("0x");return t=(t=O(t)).startsWith("0")?t.substring(1):t,e?U(t):t}},40926:(t,e,r)=>{"use strict";function n(){return(null===r.g||void 0===r.g?void 0:r.g.crypto)||(null===r.g||void 0===r.g?void 0:r.g.msCrypto)||{}}function i(){const t=n();return t.subtle||t.webkitSubtle}Object.defineProperty(e,"__esModule",{value:!0}),e.isBrowserCryptoAvailable=e.getSubtleCrypto=e.getBrowerCrypto=void 0,e.getBrowerCrypto=n,e.getSubtleCrypto=i,e.isBrowserCryptoAvailable=function(){return!!n()&&!!i()}},88618:(t,e)=>{"use strict";function r(){return"undefined"==typeof document&&"undefined"!=typeof navigator&&"ReactNative"===navigator.product}function n(){return"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node}Object.defineProperty(e,"__esModule",{value:!0}),e.isBrowser=e.isNode=e.isReactNative=void 0,e.isReactNative=r,e.isNode=n,e.isBrowser=function(){return!r()&&!n()}},1468:function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),i=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||e.hasOwnProperty(r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),i(r(40926),e),i(r(88618),e)},4337:(t,e,r)=>{function n(t){return t&&"object"==typeof t&&"default"in t?t.default:t}var i=r(55522),o=n(r(92592)),s=n(r(20640)),a=r(18414);"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator")));var u="walletconnect-wrapper",h="walletconnect-style-sheet",c="walletconnect-qrcode-modal",l="walletconnect-qrcode-text";function f(t){return a.createElement("div",{className:"walletconnect-modal__header"},a.createElement("img",{src:"data:image/svg+xml,%3C?xml version='1.0' encoding='UTF-8'?%3E %3Csvg width='300px' height='185px' viewBox='0 0 300 185' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E %3C!-- Generator: Sketch 49.3 (51167) - http://www.bohemiancoding.com/sketch --%3E %3Ctitle%3EWalletConnect%3C/title%3E %3Cdesc%3ECreated with Sketch.%3C/desc%3E %3Cdefs%3E%3C/defs%3E %3Cg id='Page-1' stroke='none' stroke-width='1' fill='none' fill-rule='evenodd'%3E %3Cg id='walletconnect-logo-alt' fill='%233B99FC' fill-rule='nonzero'%3E %3Cpath d='M61.4385429,36.2562612 C110.349767,-11.6319051 189.65053,-11.6319051 238.561752,36.2562612 L244.448297,42.0196786 C246.893858,44.4140867 246.893858,48.2961898 244.448297,50.690599 L224.311602,70.406102 C223.088821,71.6033071 221.106302,71.6033071 219.883521,70.406102 L211.782937,62.4749541 C177.661245,29.0669724 122.339051,29.0669724 88.2173582,62.4749541 L79.542302,70.9685592 C78.3195204,72.1657633 76.337001,72.1657633 75.1142214,70.9685592 L54.9775265,51.2530561 C52.5319653,48.8586469 52.5319653,44.9765439 54.9775265,42.5821357 L61.4385429,36.2562612 Z M280.206339,77.0300061 L298.128036,94.5769031 C300.573585,96.9713 300.573599,100.85338 298.128067,103.247793 L217.317896,182.368927 C214.872352,184.763353 210.907314,184.76338 208.461736,182.368989 C208.461726,182.368979 208.461714,182.368967 208.461704,182.368957 L151.107561,126.214385 C150.496171,125.615783 149.504911,125.615783 148.893521,126.214385 C148.893517,126.214389 148.893514,126.214393 148.89351,126.214396 L91.5405888,182.368927 C89.095052,184.763359 85.1300133,184.763399 82.6844276,182.369014 C82.6844133,182.369 82.684398,182.368986 82.6843827,182.36897 L1.87196327,103.246785 C-0.573596939,100.852377 -0.573596939,96.9702735 1.87196327,94.5758653 L19.7936929,77.028998 C22.2392531,74.6345898 26.2042918,74.6345898 28.6498531,77.028998 L86.0048306,133.184355 C86.6162214,133.782957 87.6074796,133.782957 88.2188704,133.184355 C88.2188796,133.184346 88.2188878,133.184338 88.2188969,133.184331 L145.571,77.028998 C148.016505,74.6345347 151.981544,74.6344449 154.427161,77.028798 C154.427195,77.0288316 154.427229,77.0288653 154.427262,77.028899 L211.782164,133.184331 C212.393554,133.782932 213.384814,133.782932 213.996204,133.184331 L271.350179,77.0300061 C273.79574,74.6355969 277.760778,74.6355969 280.206339,77.0300061 Z' id='WalletConnect'%3E%3C/path%3E %3C/g%3E %3C/g%3E %3C/svg%3E",className:"walletconnect-modal__headerLogo"}),a.createElement("p",null,"WalletConnect"),a.createElement("div",{className:"walletconnect-modal__close__wrapper",onClick:t.onClose},a.createElement("div",{id:"walletconnect-qrcode-close",className:"walletconnect-modal__close__icon"},a.createElement("div",{className:"walletconnect-modal__close__line1"}),a.createElement("div",{className:"walletconnect-modal__close__line2"}))))}function d(t){return a.createElement("a",{className:"walletconnect-connect__button",href:t.href,id:"walletconnect-connect-button-"+t.name,onClick:t.onClick,rel:"noopener noreferrer",style:{backgroundColor:t.color},target:"_blank"},t.name)}function p(t){var e=t.color,r=t.href,n=t.name,i=t.logo,o=t.onClick;return a.createElement("a",{className:"walletconnect-modal__base__row",href:r,onClick:o,rel:"noopener noreferrer",target:"_blank"},a.createElement("h3",{className:"walletconnect-modal__base__row__h3"},n),a.createElement("div",{className:"walletconnect-modal__base__row__right"},a.createElement("div",{className:"walletconnect-modal__base__row__right__app-icon",style:{background:"url('"+i+"') "+e,backgroundSize:"100%"}}),a.createElement("img",{src:"data:image/svg+xml,%3Csvg width='8' height='18' viewBox='0 0 8 18' fill='none' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M0.586301 0.213898C0.150354 0.552968 0.0718197 1.18124 0.41089 1.61719L5.2892 7.88931C5.57007 8.25042 5.57007 8.75608 5.2892 9.11719L0.410889 15.3893C0.071819 15.8253 0.150353 16.4535 0.586301 16.7926C1.02225 17.1317 1.65052 17.0531 1.98959 16.6172L6.86791 10.3451C7.7105 9.26174 7.7105 7.74476 6.86791 6.66143L1.98959 0.38931C1.65052 -0.0466374 1.02225 -0.125172 0.586301 0.213898Z' fill='%233C4252'/%3E %3C/svg%3E",className:"walletconnect-modal__base__row__right__caret"})))}function m(t){var e=t.color,r=t.href,n=t.name,i=t.logo,o=t.onClick,s=window.innerWidth<768?(n.length>8?2.5:2.7)+"vw":"inherit";return a.createElement("a",{className:"walletconnect-connect__button__icon_anchor",href:r,onClick:o,rel:"noopener noreferrer",target:"_blank"},a.createElement("div",{className:"walletconnect-connect__button__icon",style:{background:"url('"+i+"') "+e,backgroundSize:"100%"}}),a.createElement("div",{style:{fontSize:s},className:"walletconnect-connect__button__text"},n))}function g(t){var e=i.isAndroid(),r=a.useState(""),n=r[0],o=r[1],s=a.useState(""),u=s[0],h=s[1],c=a.useState(1),f=c[0],g=c[1],v=u?t.links.filter((function(t){return t.name.toLowerCase().includes(u.toLowerCase())})):t.links,y=t.errorMessage,w=u||v.length>5,_=Math.ceil(v.length/12),b=[12*(f-1)+1,12*f],M=v.length?v.filter((function(t,e){return e+1>=b[0]&&e+1<=b[1]})):[],x=!(e||!(_>1)),k=void 0;return a.createElement("div",null,a.createElement("p",{id:l,className:"walletconnect-qrcode__text"},e?t.text.connect_mobile_wallet:t.text.choose_preferred_wallet),!e&&a.createElement("input",{className:"walletconnect-search__input",placeholder:"Search",value:n,onChange:function(t){o(t.target.value),clearTimeout(k),t.target.value?k=setTimeout((function(){h(t.target.value),g(1)}),1e3):(o(""),h(""),g(1))}}),a.createElement("div",{className:"walletconnect-connect__buttons__wrapper"+(e?"__android":w&&v.length?"__wrap":"")},e?a.createElement(d,{name:t.text.connect,color:"rgb(64, 153, 255)",href:t.uri,onClick:a.useCallback((function(){i.saveMobileLinkInfo({name:"Unknown",href:t.uri})}),[])}):M.length?M.map((function(e){var r=e.color,n=e.name,o=e.shortName,s=e.logo,u=i.formatIOSMobile(t.uri,e),h=a.useCallback((function(){i.saveMobileLinkInfo({name:n,href:u})}),[M]);return w?a.createElement(m,{color:r,href:u,name:o,logo:s,onClick:h}):a.createElement(p,{color:r,href:u,name:n,logo:s,onClick:h})})):a.createElement(a.Fragment,null,a.createElement("p",null,y.length?t.errorMessage:t.links.length&&!v.length?t.text.no_wallets_found:t.text.loading))),x&&a.createElement("div",{className:"walletconnect-modal__footer"},Array(_).fill(0).map((function(t,e){var r=e+1,n=f===r;return a.createElement("a",{style:{margin:"auto 10px",fontWeight:n?"bold":"normal"},onClick:function(){return g(r)}},r)}))))}function v(t){var e=!!t.message.trim();return a.createElement("div",{className:"walletconnect-qrcode__notification"+(e?" notification__show":"")},t.message)}function y(t){var e=a.useState(""),r=e[0],n=e[1],i=a.useState(""),u=i[0],h=i[1];return a.useEffect((function(){try{return Promise.resolve(function(t){try{var e="";return Promise.resolve(o.toString(t,{margin:0,type:"svg"})).then((function(t){return"string"==typeof t&&(e=t.replace("<svg",'<svg class="walletconnect-qrcode__image"')),e}))}catch(t){return Promise.reject(t)}}(t.uri)).then((function(t){h(t)}))}catch(t){Promise.reject(t)}}),[]),a.createElement("div",null,a.createElement("p",{id:l,className:"walletconnect-qrcode__text"},t.text.scan_qrcode_with_wallet),a.createElement("div",{dangerouslySetInnerHTML:{__html:u}}),a.createElement("div",{className:"walletconnect-modal__footer"},a.createElement("a",{onClick:function(){s(t.uri)?(n(t.text.copied_to_clipboard),setInterval((function(){return n("")}),1200)):(n("Error"),setInterval((function(){return n("")}),1200))}},t.text.copy_to_clipboard)),a.createElement(v,{message:r}))}function w(t){var e=i.isAndroid(),r=i.isMobile(),n=r?t.qrcodeModalOptions&&t.qrcodeModalOptions.mobileLinks?t.qrcodeModalOptions.mobileLinks:void 0:t.qrcodeModalOptions&&t.qrcodeModalOptions.desktopLinks?t.qrcodeModalOptions.desktopLinks:void 0,o=a.useState(!1),s=o[0],u=o[1],h=a.useState(!1),l=h[0],d=h[1],p=a.useState(!r),m=p[0],v=p[1],w={mobile:r,text:t.text,uri:t.uri,qrcodeModalOptions:t.qrcodeModalOptions},_=a.useState(""),b=_[0],M=_[1],x=a.useState(!1),k=x[0],E=x[1],A=a.useState([]),S=A[0],T=A[1],C=a.useState(""),B=C[0],R=C[1],I=function(){l||s||n&&!n.length||S.length>0||a.useEffect((function(){!function(){try{if(e)return Promise.resolve();u(!0);var o=function(e,o){try{var s=(a=t.qrcodeModalOptions&&t.qrcodeModalOptions.registryUrl?t.qrcodeModalOptions.registryUrl:i.getWalletRegistryUrl(),Promise.resolve(fetch(a).then((function(t){return t.json()}))).then((function(e){var o=r?"mobile":"desktop",s=i.getMobileLinkRegistry(i.formatMobileRegistry(e,o),n);u(!1),d(!0),R(s.length?"":t.text.no_supported_wallets),T(s);var a=1===s.length;a&&(M(i.formatIOSMobile(t.uri,s[0])),v(!0)),E(a)})))}catch(t){return o(t)}var a;return s&&s.then?s.then(void 0,o):s}(0,(function(e){u(!1),d(!0),R(t.text.something_went_wrong),console.error(e)}));Promise.resolve(o&&o.then?o.then((function(){})):void 0)}catch(t){return Promise.reject(t)}}()}))};I();var P=r?m:!m;return a.createElement("div",{id:c,className:"walletconnect-qrcode__base animated fadeIn"},a.createElement("div",{className:"walletconnect-modal__base"},a.createElement(f,{onClose:t.onClose}),k&&m?a.createElement("div",{className:"walletconnect-modal__single_wallet"},a.createElement("a",{onClick:function(){return i.saveMobileLinkInfo({name:S[0].name,href:b})},href:b,rel:"noopener noreferrer",target:"_blank"},t.text.connect_with+" "+(k?S[0].name:"")+" ›")):e||s||!s&&S.length?a.createElement("div",{className:"walletconnect-modal__mobile__toggle"+(P?" right__selected":"")},a.createElement("div",{className:"walletconnect-modal__mobile__toggle_selector"}),r?a.createElement(a.Fragment,null,a.createElement("a",{onClick:function(){return v(!1),I()}},t.text.mobile),a.createElement("a",{onClick:function(){return v(!0)}},t.text.qrcode)):a.createElement(a.Fragment,null,a.createElement("a",{onClick:function(){return v(!0)}},t.text.qrcode),a.createElement("a",{onClick:function(){return v(!1),I()}},t.text.desktop))):null,a.createElement("div",null,m||!e&&!s&&!S.length?a.createElement(y,Object.assign({},w)):a.createElement(g,Object.assign({},w,{links:S,errorMessage:B})))))}var _={de:{choose_preferred_wallet:"Wähle bevorzugte Wallet",connect_mobile_wallet:"Verbinde mit Mobile Wallet",scan_qrcode_with_wallet:"Scanne den QR-code mit einer WalletConnect kompatiblen Wallet",connect:"Verbinden",qrcode:"QR-Code",mobile:"Mobile",desktop:"Desktop",copy_to_clipboard:"In die Zwischenablage kopieren",copied_to_clipboard:"In die Zwischenablage kopiert!",connect_with:"Verbinden mit Hilfe von",loading:"Laden...",something_went_wrong:"Etwas ist schief gelaufen",no_supported_wallets:"Es gibt noch keine unterstützten Wallet",no_wallets_found:"keine Wallet gefunden"},en:{choose_preferred_wallet:"Choose your preferred wallet",connect_mobile_wallet:"Connect to Mobile Wallet",scan_qrcode_with_wallet:"Scan QR code with a WalletConnect-compatible wallet",connect:"Connect",qrcode:"QR Code",mobile:"Mobile",desktop:"Desktop",copy_to_clipboard:"Copy to clipboard",copied_to_clipboard:"Copied to clipboard!",connect_with:"Connect with",loading:"Loading...",something_went_wrong:"Something went wrong",no_supported_wallets:"There are no supported wallets yet",no_wallets_found:"No wallets found"},es:{choose_preferred_wallet:"Elige tu billetera preferida",connect_mobile_wallet:"Conectar a billetera móvil",scan_qrcode_with_wallet:"Escanea el código QR con una billetera compatible con WalletConnect",connect:"Conectar",qrcode:"Código QR",mobile:"Móvil",desktop:"Desktop",copy_to_clipboard:"Copiar",copied_to_clipboard:"Copiado!",connect_with:"Conectar mediante",loading:"Cargando...",something_went_wrong:"Algo salió mal",no_supported_wallets:"Todavía no hay billeteras compatibles",no_wallets_found:"No se encontraron billeteras"},fr:{choose_preferred_wallet:"Choisissez votre portefeuille préféré",connect_mobile_wallet:"Se connecter au portefeuille mobile",scan_qrcode_with_wallet:"Scannez le QR code avec un portefeuille compatible WalletConnect",connect:"Se connecter",qrcode:"QR Code",mobile:"Mobile",desktop:"Desktop",copy_to_clipboard:"Copier",copied_to_clipboard:"Copié!",connect_with:"Connectez-vous à l'aide de",loading:"Chargement...",something_went_wrong:"Quelque chose a mal tourné",no_supported_wallets:"Il n'y a pas encore de portefeuilles pris en charge",no_wallets_found:"Aucun portefeuille trouvé"},ko:{choose_preferred_wallet:"원하는 지갑을 선택하세요",connect_mobile_wallet:"모바일 지갑과 연결",scan_qrcode_with_wallet:"WalletConnect 지원 지갑에서 QR코드를 스캔하세요",connect:"연결",qrcode:"QR 코드",mobile:"모바일",desktop:"데스크탑",copy_to_clipboard:"클립보드에 복사",copied_to_clipboard:"클립보드에 복사되었습니다!",connect_with:"와 연결하다",loading:"로드 중...",something_went_wrong:"문제가 발생했습니다.",no_supported_wallets:"아직 지원되는 지갑이 없습니다",no_wallets_found:"지갑을 찾을 수 없습니다"},pt:{choose_preferred_wallet:"Escolha sua carteira preferida",connect_mobile_wallet:"Conectar-se à carteira móvel",scan_qrcode_with_wallet:"Ler o código QR com uma carteira compatível com WalletConnect",connect:"Conectar",qrcode:"Código QR",mobile:"Móvel",desktop:"Desktop",copy_to_clipboard:"Copiar",copied_to_clipboard:"Copiado!",connect_with:"Ligar por meio de",loading:"Carregamento...",something_went_wrong:"Algo correu mal",no_supported_wallets:"Ainda não há carteiras suportadas",no_wallets_found:"Nenhuma carteira encontrada"},zh:{choose_preferred_wallet:"选择你的钱包",connect_mobile_wallet:"连接至移动端钱包",scan_qrcode_with_wallet:"使用兼容 WalletConnect 的钱包扫描二维码",connect:"连接",qrcode:"二维码",mobile:"移动",desktop:"桌面",copy_to_clipboard:"复制到剪贴板",copied_to_clipboard:"复制到剪贴板成功！",connect_with:"通过以下方式连接",loading:"正在加载...",something_went_wrong:"出了问题",no_supported_wallets:"目前还没有支持的钱包",no_wallets_found:"没有找到钱包"},fa:{choose_preferred_wallet:"کیف پول مورد نظر خود را انتخاب کنید",connect_mobile_wallet:"به کیف پول موبایل وصل شوید",scan_qrcode_with_wallet:"کد QR را با یک کیف پول سازگار با WalletConnect اسکن کنید",connect:"اتصال",qrcode:"کد QR",mobile:"سیار",desktop:"دسکتاپ",copy_to_clipboard:"کپی به کلیپ بورد",copied_to_clipboard:"در کلیپ بورد کپی شد!",connect_with:"ارتباط با",loading:"...بارگذاری",something_went_wrong:"مشکلی پیش آمد",no_supported_wallets:"هنوز هیچ کیف پول پشتیبانی شده ای وجود ندارد",no_wallets_found:"هیچ کیف پولی پیدا نشد"}};function b(){var t=i.getDocumentOrThrow(),e=t.getElementById(c);e&&(e.className=e.className.replace("fadeIn","fadeOut"),setTimeout((function(){var e=t.getElementById(u);e&&t.body.removeChild(e)}),300))}function M(t){return function(){b(),t&&t()}}var x=function(){return"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node},k={open:function(t,e,r){console.log(t),x()?function(t){o.toString(t,{type:"terminal"}).then(console.log)}(t):function(t,e,r){!function(){var t=i.getDocumentOrThrow(),e=t.getElementById(h);e&&t.head.removeChild(e);var r=t.createElement("style");r.setAttribute("id",h),r.innerText=':root {\n  --animation-duration: 300ms;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.animated {\n  animation-duration: var(--animation-duration);\n  animation-fill-mode: both;\n}\n\n.fadeIn {\n  animation-name: fadeIn;\n}\n\n.fadeOut {\n  animation-name: fadeOut;\n}\n\n#walletconnect-wrapper {\n  -webkit-user-select: none;\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: center;\n  left: 0;\n  pointer-events: none;\n  position: fixed;\n  top: 0;\n  user-select: none;\n  width: 100%;\n  z-index: 99999999999999;\n}\n\n.walletconnect-modal__headerLogo {\n  height: 21px;\n}\n\n.walletconnect-modal__header p {\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0;\n  align-items: flex-start;\n  display: flex;\n  flex: 1;\n  margin-left: 5px;\n}\n\n.walletconnect-modal__close__wrapper {\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  z-index: 10000;\n  background: white;\n  border-radius: 26px;\n  padding: 6px;\n  box-sizing: border-box;\n  width: 26px;\n  height: 26px;\n  cursor: pointer;\n}\n\n.walletconnect-modal__close__icon {\n  position: relative;\n  top: 7px;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transform: rotate(45deg);\n}\n\n.walletconnect-modal__close__line1 {\n  position: absolute;\n  width: 100%;\n  border: 1px solid rgb(48, 52, 59);\n}\n\n.walletconnect-modal__close__line2 {\n  position: absolute;\n  width: 100%;\n  border: 1px solid rgb(48, 52, 59);\n  transform: rotate(90deg);\n}\n\n.walletconnect-qrcode__base {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  background: rgba(37, 41, 46, 0.95);\n  height: 100%;\n  left: 0;\n  pointer-events: auto;\n  position: fixed;\n  top: 0;\n  transition: 0.4s cubic-bezier(0.19, 1, 0.22, 1);\n  width: 100%;\n  will-change: opacity;\n  padding: 40px;\n  box-sizing: border-box;\n}\n\n.walletconnect-qrcode__text {\n  color: rgba(60, 66, 82, 0.6);\n  font-size: 16px;\n  font-weight: 600;\n  letter-spacing: 0;\n  line-height: 1.1875em;\n  margin: 10px 0 20px 0;\n  text-align: center;\n  width: 100%;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-qrcode__text {\n    font-size: 4vw;\n  }\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-qrcode__text {\n    font-size: 14px;\n  }\n}\n\n.walletconnect-qrcode__image {\n  width: calc(100% - 30px);\n  box-sizing: border-box;\n  cursor: none;\n  margin: 0 auto;\n}\n\n.walletconnect-qrcode__notification {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  font-size: 16px;\n  padding: 16px 20px;\n  border-radius: 16px;\n  text-align: center;\n  transition: all 0.1s ease-in-out;\n  background: white;\n  color: black;\n  margin-bottom: -60px;\n  opacity: 0;\n}\n\n.walletconnect-qrcode__notification.notification__show {\n  opacity: 1;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-modal__header {\n    height: 130px;\n  }\n  .walletconnect-modal__base {\n    overflow: auto;\n  }\n}\n\n@media only screen and (min-device-width: 415px) and (max-width: 768px) {\n  #content {\n    max-width: 768px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (min-width: 375px) and (max-width: 415px) {\n  #content {\n    max-width: 414px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (min-width: 320px) and (max-width: 375px) {\n  #content {\n    max-width: 375px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (max-width: 320px) {\n  #content {\n    max-width: 320px;\n    box-sizing: border-box;\n  }\n}\n\n.walletconnect-modal__base {\n  -webkit-font-smoothing: antialiased;\n  background: #ffffff;\n  border-radius: 24px;\n  box-shadow: 0 10px 50px 5px rgba(0, 0, 0, 0.4);\n  font-family: ui-rounded, "SF Pro Rounded", "SF Pro Text", medium-content-sans-serif-font,\n    -apple-system, BlinkMacSystemFont, ui-sans-serif, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell,\n    "Open Sans", "Helvetica Neue", sans-serif;\n  margin-top: 41px;\n  padding: 24px 24px 22px;\n  pointer-events: auto;\n  position: relative;\n  text-align: center;\n  transition: 0.4s cubic-bezier(0.19, 1, 0.22, 1);\n  will-change: transform;\n  overflow: visible;\n  transform: translateY(-50%);\n  top: 50%;\n  max-width: 500px;\n  margin: auto;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-modal__base {\n    padding: 24px 12px;\n  }\n}\n\n.walletconnect-modal__base .hidden {\n  transform: translateY(150%);\n  transition: 0.125s cubic-bezier(0.4, 0, 1, 1);\n}\n\n.walletconnect-modal__header {\n  align-items: center;\n  display: flex;\n  height: 26px;\n  left: 0;\n  justify-content: space-between;\n  position: absolute;\n  top: -42px;\n  width: 100%;\n}\n\n.walletconnect-modal__base .wc-logo {\n  align-items: center;\n  display: flex;\n  height: 26px;\n  margin-top: 15px;\n  padding-bottom: 15px;\n  pointer-events: auto;\n}\n\n.walletconnect-modal__base .wc-logo div {\n  background-color: #3399ff;\n  height: 21px;\n  margin-right: 5px;\n  mask-image: url("images/wc-logo.svg") center no-repeat;\n  width: 32px;\n}\n\n.walletconnect-modal__base .wc-logo p {\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0;\n}\n\n.walletconnect-modal__base h2 {\n  color: rgba(60, 66, 82, 0.6);\n  font-size: 16px;\n  font-weight: 600;\n  letter-spacing: 0;\n  line-height: 1.1875em;\n  margin: 0 0 19px 0;\n  text-align: center;\n  width: 100%;\n}\n\n.walletconnect-modal__base__row {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  align-items: center;\n  border-radius: 20px;\n  cursor: pointer;\n  display: flex;\n  height: 56px;\n  justify-content: space-between;\n  padding: 0 15px;\n  position: relative;\n  margin: 0px 0px 8px;\n  text-align: left;\n  transition: 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  will-change: transform;\n  text-decoration: none;\n}\n\n.walletconnect-modal__base__row:hover {\n  background: rgba(60, 66, 82, 0.06);\n}\n\n.walletconnect-modal__base__row:active {\n  background: rgba(60, 66, 82, 0.06);\n  transform: scale(0.975);\n  transition: 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n.walletconnect-modal__base__row__h3 {\n  color: #25292e;\n  font-size: 20px;\n  font-weight: 700;\n  margin: 0;\n  padding-bottom: 3px;\n}\n\n.walletconnect-modal__base__row__right {\n  align-items: center;\n  display: flex;\n  justify-content: center;\n}\n\n.walletconnect-modal__base__row__right__app-icon {\n  border-radius: 8px;\n  height: 34px;\n  margin: 0 11px 2px 0;\n  width: 34px;\n  background-size: 100%;\n  box-shadow: 0 4px 12px 0 rgba(37, 41, 46, 0.25);\n}\n\n.walletconnect-modal__base__row__right__caret {\n  height: 18px;\n  opacity: 0.3;\n  transition: 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  width: 8px;\n  will-change: opacity;\n}\n\n.walletconnect-modal__base__row:hover .caret,\n.walletconnect-modal__base__row:active .caret {\n  opacity: 0.6;\n}\n\n.walletconnect-modal__mobile__toggle {\n  width: 80%;\n  display: flex;\n  margin: 0 auto;\n  position: relative;\n  overflow: hidden;\n  border-radius: 8px;\n  margin-bottom: 18px;\n  background: #d4d5d9;\n}\n\n.walletconnect-modal__single_wallet {\n  display: flex;\n  justify-content: center;\n  margin-top: 7px;\n  margin-bottom: 18px;\n}\n\n.walletconnect-modal__single_wallet a {\n  cursor: pointer;\n  color: rgb(64, 153, 255);\n  font-size: 21px;\n  font-weight: 800;\n  text-decoration: none !important;\n  margin: 0 auto;\n}\n\n.walletconnect-modal__mobile__toggle_selector {\n  width: calc(50% - 8px);\n  background: white;\n  position: absolute;\n  border-radius: 5px;\n  height: calc(100% - 8px);\n  top: 4px;\n  transition: all 0.2s ease-in-out;\n  transform: translate3d(4px, 0, 0);\n}\n\n.walletconnect-modal__mobile__toggle.right__selected .walletconnect-modal__mobile__toggle_selector {\n  transform: translate3d(calc(100% + 12px), 0, 0);\n}\n\n.walletconnect-modal__mobile__toggle a {\n  font-size: 12px;\n  width: 50%;\n  text-align: center;\n  padding: 8px;\n  margin: 0;\n  font-weight: 600;\n  z-index: 1;\n}\n\n.walletconnect-modal__footer {\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-modal__footer {\n    margin-top: 5vw;\n  }\n}\n\n.walletconnect-modal__footer a {\n  cursor: pointer;\n  color: #898d97;\n  font-size: 15px;\n  margin: 0 auto;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-modal__footer a {\n    font-size: 14px;\n  }\n}\n\n.walletconnect-connect__buttons__wrapper {\n  max-height: 44vh;\n}\n\n.walletconnect-connect__buttons__wrapper__android {\n  margin: 50% 0;\n}\n\n.walletconnect-connect__buttons__wrapper__wrap {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  margin: 10px 0;\n}\n\n@media only screen and (min-width: 768px) {\n  .walletconnect-connect__buttons__wrapper__wrap {\n    margin-top: 40px;\n  }\n}\n\n.walletconnect-connect__button {\n  background-color: rgb(64, 153, 255);\n  padding: 12px;\n  border-radius: 8px;\n  text-decoration: none;\n  color: rgb(255, 255, 255);\n  font-weight: 500;\n}\n\n.walletconnect-connect__button__icon_anchor {\n  cursor: pointer;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  margin: 8px;\n  width: 42px;\n  justify-self: center;\n  flex-direction: column;\n  text-decoration: none !important;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-connect__button__icon_anchor {\n    margin: 4px;\n  }\n}\n\n.walletconnect-connect__button__icon {\n  border-radius: 10px;\n  height: 42px;\n  margin: 0;\n  width: 42px;\n  background-size: cover !important;\n  box-shadow: 0 4px 12px 0 rgba(37, 41, 46, 0.25);\n}\n\n.walletconnect-connect__button__text {\n  color: #424952;\n  font-size: 2.7vw;\n  text-decoration: none !important;\n  padding: 0;\n  margin-top: 1.8vw;\n  font-weight: 600;\n}\n\n@media only screen and (min-width: 768px) {\n  .walletconnect-connect__button__text {\n    font-size: 16px;\n    margin-top: 12px;\n  }\n}\n\n.walletconnect-search__input {\n  border: none;\n  background: #d4d5d9;\n  border-style: none;\n  padding: 8px 16px;\n  outline: none;\n  font-style: normal;\n  font-stretch: normal;\n  font-size: 16px;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: normal;\n  letter-spacing: normal;\n  text-align: left;\n  border-radius: 8px;\n  width: calc(100% - 16px);\n  margin: 0;\n  margin-bottom: 8px;\n}\n',t.head.appendChild(r)}();var n,o=function(){var t=i.getDocumentOrThrow(),e=t.createElement("div");return e.setAttribute("id",u),t.body.appendChild(e),e}();a.render(a.createElement(w,{text:(n=i.getNavigatorOrThrow().language.split("-")[0]||"en",_[n]||_.en),uri:t,onClose:M(e),qrcodeModalOptions:r}),o)}(t,e,r)},close:function(){x()||b()}};t.exports=k},18414:(t,e,r)=>{"use strict";r.r(e),r.d(e,{Children:()=>yt,Component:()=>w,Fragment:()=>y,PureComponent:()=>dt,Suspense:()=>bt,SuspenseList:()=>kt,cloneElement:()=>Ht,createContext:()=>q,createElement:()=>m,createFactory:()=>qt,createPortal:()=>Tt,createRef:()=>v,default:()=>Wt,findDOMNode:()=>Dt,forwardRef:()=>gt,hydrate:()=>It,isValidElement:()=>Kt,lazy:()=>xt,memo:()=>pt,render:()=>Rt,unmountComponentAtNode:()=>jt,unstable_batchedUpdates:()=>zt,useCallback:()=>rt,useContext:()=>nt,useDebugValue:()=>it,useEffect:()=>J,useErrorBoundary:()=>ot,useImperativeHandle:()=>tt,useLayoutEffect:()=>Q,useMemo:()=>et,useReducer:()=>Y,useRef:()=>X,useState:()=>G,version:()=>Ut});var n,i,o,s,a,u,h,c={},l=[],f=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord/i;function d(t,e){for(var r in e)t[r]=e[r];return t}function p(t){var e=t.parentNode;e&&e.removeChild(t)}function m(t,e,r){var n,i=arguments,o={};for(n in e)"key"!==n&&"ref"!==n&&(o[n]=e[n]);if(arguments.length>3)for(r=[r],n=3;n<arguments.length;n++)r.push(i[n]);if(null!=r&&(o.children=r),"function"==typeof t&&null!=t.defaultProps)for(n in t.defaultProps)void 0===o[n]&&(o[n]=t.defaultProps[n]);return g(t,o,e&&e.key,e&&e.ref,null)}function g(t,e,r,i,o){var s={type:t,props:e,key:r,ref:i,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,constructor:void 0,__v:o};return null==o&&(s.__v=s),n.vnode&&n.vnode(s),s}function v(){return{}}function y(t){return t.children}function w(t,e){this.props=t,this.context=e}function _(t,e){if(null==e)return t.__?_(t.__,t.__.__k.indexOf(t)+1):null;for(var r;e<t.__k.length;e++)if(null!=(r=t.__k[e])&&null!=r.__e)return r.__e;return"function"==typeof t.type?_(t):null}function b(t){var e,r;if(null!=(t=t.__)&&null!=t.__c){for(t.__e=t.__c.base=null,e=0;e<t.__k.length;e++)if(null!=(r=t.__k[e])&&null!=r.__e){t.__e=t.__c.base=r.__e;break}return b(t)}}function M(t){(!t.__d&&(t.__d=!0)&&i.push(t)&&!o++||a!==n.debounceRendering)&&((a=n.debounceRendering)||s)(x)}function x(){for(var t;o=i.length;)t=i.sort((function(t,e){return t.__v.__b-e.__v.__b})),i=[],t.some((function(t){var e,r,n,i,o,s,a;t.__d&&(s=(o=(e=t).__v).__e,(a=e.__P)&&(r=[],(n=d({},o)).__v=n,i=C(a,o,n,e.__n,void 0!==a.ownerSVGElement,null,r,null==s?_(o):s),B(r,o),i!=s&&b(o)))}))}function k(t,e,r,n,i,o,s,a,u){var h,f,d,m,g,v,y,w=r&&r.__k||l,b=w.length;if(a==c&&(a=null!=o?o[0]:b?_(r,0):null),h=0,e.__k=E(e.__k,(function(r){if(null!=r){if(r.__=e,r.__b=e.__b+1,null===(d=w[h])||d&&r.key==d.key&&r.type===d.type)w[h]=void 0;else for(f=0;f<b;f++){if((d=w[f])&&r.key==d.key&&r.type===d.type){w[f]=void 0;break}d=null}if(m=C(t,r,d=d||c,n,i,o,s,a,u),(f=r.ref)&&d.ref!=f&&(y||(y=[]),d.ref&&y.push(d.ref,null,r),y.push(f,r.__c||m,r)),null!=m){var l;if(null==v&&(v=m),void 0!==r.__d)l=r.__d,r.__d=void 0;else if(o==d||m!=a||null==m.parentNode){t:if(null==a||a.parentNode!==t)t.appendChild(m),l=null;else{for(g=a,f=0;(g=g.nextSibling)&&f<b;f+=2)if(g==m)break t;t.insertBefore(m,a),l=a}"option"==e.type&&(t.value="")}a=void 0!==l?l:m.nextSibling,"function"==typeof e.type&&(e.__d=a)}else a&&d.__e==a&&a.parentNode!=t&&(a=_(d))}return h++,r})),e.__e=v,null!=o&&"function"!=typeof e.type)for(h=o.length;h--;)null!=o[h]&&p(o[h]);for(h=b;h--;)null!=w[h]&&P(w[h],w[h]);if(y)for(h=0;h<y.length;h++)I(y[h],y[++h],y[++h])}function E(t,e,r){if(null==r&&(r=[]),null==t||"boolean"==typeof t)e&&r.push(e(null));else if(Array.isArray(t))for(var n=0;n<t.length;n++)E(t[n],e,r);else r.push(e?e("string"==typeof t||"number"==typeof t?g(null,t,null,null,t):null!=t.__e||null!=t.__c?g(t.type,t.props,t.key,null,t.__v):t):t);return r}function A(t,e,r){"-"===e[0]?t.setProperty(e,r):t[e]="number"==typeof r&&!1===f.test(e)?r+"px":null==r?"":r}function S(t,e,r,n,i){var o,s,a,u,h;if(i?"className"===e&&(e="class"):"class"===e&&(e="className"),"style"===e)if(o=t.style,"string"==typeof r)o.cssText=r;else{if("string"==typeof n&&(o.cssText="",n=null),n)for(u in n)r&&u in r||A(o,u,"");if(r)for(h in r)n&&r[h]===n[h]||A(o,h,r[h])}else"o"===e[0]&&"n"===e[1]?(s=e!==(e=e.replace(/Capture$/,"")),a=e.toLowerCase(),e=(a in t?a:e).slice(2),r?(n||t.addEventListener(e,T,s),(t.l||(t.l={}))[e]=r):t.removeEventListener(e,T,s)):"list"!==e&&"tagName"!==e&&"form"!==e&&"type"!==e&&"size"!==e&&!i&&e in t?t[e]=null==r?"":r:"function"!=typeof r&&"dangerouslySetInnerHTML"!==e&&(e!==(e=e.replace(/^xlink:?/,""))?null==r||!1===r?t.removeAttributeNS("http://www.w3.org/1999/xlink",e.toLowerCase()):t.setAttributeNS("http://www.w3.org/1999/xlink",e.toLowerCase(),r):null==r||!1===r&&!/^ar/.test(e)?t.removeAttribute(e):t.setAttribute(e,r))}function T(t){this.l[t.type](n.event?n.event(t):t)}function C(t,e,r,i,o,s,a,u,h){var c,l,f,p,m,g,v,_,b,M,x=e.type;if(void 0!==e.constructor)return null;(c=n.__b)&&c(e);try{t:if("function"==typeof x){if(_=e.props,b=(c=x.contextType)&&i[c.__c],M=c?b?b.props.value:c.__:i,r.__c?v=(l=e.__c=r.__c).__=l.__E:("prototype"in x&&x.prototype.render?e.__c=l=new x(_,M):(e.__c=l=new w(_,M),l.constructor=x,l.render=L),b&&b.sub(l),l.props=_,l.state||(l.state={}),l.context=M,l.__n=i,f=l.__d=!0,l.__h=[]),null==l.__s&&(l.__s=l.state),null!=x.getDerivedStateFromProps&&(l.__s==l.state&&(l.__s=d({},l.__s)),d(l.__s,x.getDerivedStateFromProps(_,l.__s))),p=l.props,m=l.state,f)null==x.getDerivedStateFromProps&&null!=l.componentWillMount&&l.componentWillMount(),null!=l.componentDidMount&&l.__h.push(l.componentDidMount);else{if(null==x.getDerivedStateFromProps&&_!==p&&null!=l.componentWillReceiveProps&&l.componentWillReceiveProps(_,M),!l.__e&&null!=l.shouldComponentUpdate&&!1===l.shouldComponentUpdate(_,l.__s,M)||e.__v===r.__v&&!l.__){for(l.props=_,l.state=l.__s,e.__v!==r.__v&&(l.__d=!1),l.__v=e,e.__e=r.__e,e.__k=r.__k,l.__h.length&&a.push(l),c=0;c<e.__k.length;c++)e.__k[c]&&(e.__k[c].__=e);break t}null!=l.componentWillUpdate&&l.componentWillUpdate(_,l.__s,M),null!=l.componentDidUpdate&&l.__h.push((function(){l.componentDidUpdate(p,m,g)}))}l.context=M,l.props=_,l.state=l.__s,(c=n.__r)&&c(e),l.__d=!1,l.__v=e,l.__P=t,c=l.render(l.props,l.state,l.context),e.__k=null!=c&&c.type==y&&null==c.key?c.props.children:Array.isArray(c)?c:[c],null!=l.getChildContext&&(i=d(d({},i),l.getChildContext())),f||null==l.getSnapshotBeforeUpdate||(g=l.getSnapshotBeforeUpdate(p,m)),k(t,e,r,i,o,s,a,u,h),l.base=e.__e,l.__h.length&&a.push(l),v&&(l.__E=l.__=null),l.__e=!1}else null==s&&e.__v===r.__v?(e.__k=r.__k,e.__e=r.__e):e.__e=R(r.__e,e,r,i,o,s,a,h);(c=n.diffed)&&c(e)}catch(t){e.__v=null,n.__e(t,e,r)}return e.__e}function B(t,e){n.__c&&n.__c(e,t),t.some((function(e){try{t=e.__h,e.__h=[],t.some((function(t){t.call(e)}))}catch(t){n.__e(t,e.__v)}}))}function R(t,e,r,n,i,o,s,a){var u,h,f,d,p,m=r.props,g=e.props;if(i="svg"===e.type||i,null!=o)for(u=0;u<o.length;u++)if(null!=(h=o[u])&&((null===e.type?3===h.nodeType:h.localName===e.type)||t==h)){t=h,o[u]=null;break}if(null==t){if(null===e.type)return document.createTextNode(g);t=i?document.createElementNS("http://www.w3.org/2000/svg",e.type):document.createElement(e.type,g.is&&{is:g.is}),o=null,a=!1}if(null===e.type)m!==g&&t.data!=g&&(t.data=g);else{if(null!=o&&(o=l.slice.call(t.childNodes)),f=(m=r.props||c).dangerouslySetInnerHTML,d=g.dangerouslySetInnerHTML,!a){if(m===c)for(m={},p=0;p<t.attributes.length;p++)m[t.attributes[p].name]=t.attributes[p].value;(d||f)&&(d&&f&&d.__html==f.__html||(t.innerHTML=d&&d.__html||""))}(function(t,e,r,n,i){var o;for(o in r)"children"===o||"key"===o||o in e||S(t,o,null,r[o],n);for(o in e)i&&"function"!=typeof e[o]||"children"===o||"key"===o||"value"===o||"checked"===o||r[o]===e[o]||S(t,o,e[o],r[o],n)})(t,g,m,i,a),d?e.__k=[]:(e.__k=e.props.children,k(t,e,r,n,"foreignObject"!==e.type&&i,o,s,c,a)),a||("value"in g&&void 0!==(u=g.value)&&u!==t.value&&S(t,"value",u,m.value,!1),"checked"in g&&void 0!==(u=g.checked)&&u!==t.checked&&S(t,"checked",u,m.checked,!1))}return t}function I(t,e,r){try{"function"==typeof t?t(e):t.current=e}catch(t){n.__e(t,r)}}function P(t,e,r){var i,o,s;if(n.unmount&&n.unmount(t),(i=t.ref)&&(i.current&&i.current!==t.__e||I(i,null,e)),r||"function"==typeof t.type||(r=null!=(o=t.__e)),t.__e=t.__d=void 0,null!=(i=t.__c)){if(i.componentWillUnmount)try{i.componentWillUnmount()}catch(t){n.__e(t,e)}i.base=i.__P=null}if(i=t.__k)for(s=0;s<i.length;s++)i[s]&&P(i[s],e,r);null!=o&&p(o)}function L(t,e,r){return this.constructor(t,r)}function N(t,e,r){var i,o,s;n.__&&n.__(t,e),o=(i=r===u)?null:r&&r.__k||e.__k,t=m(y,null,[t]),s=[],C(e,(i?e:r||e).__k=t,o||c,c,void 0!==e.ownerSVGElement,r&&!i?[r]:o?null:l.slice.call(e.childNodes),s,r||c,i),B(s,t)}function O(t,e){N(t,e,u)}function U(t,e){var r,n;for(n in e=d(d({},t.props),e),arguments.length>2&&(e.children=l.slice.call(arguments,2)),r={},e)"key"!==n&&"ref"!==n&&(r[n]=e[n]);return g(t.type,r,e.key||t.key,e.ref||t.ref,null)}function q(t){var e={},r={__c:"__cC"+h++,__:t,Consumer:function(t,e){return t.children(e)},Provider:function(t){var n,i=this;return this.getChildContext||(n=[],this.getChildContext=function(){return e[r.__c]=i,e},this.shouldComponentUpdate=function(t){i.props.value!==t.value&&n.some((function(e){e.context=t.value,M(e)}))},this.sub=function(t){n.push(t);var e=t.componentWillUnmount;t.componentWillUnmount=function(){n.splice(n.indexOf(t),1),e&&e.call(t)}}),t.children}};return r.Consumer.contextType=r,r.Provider.__=r,r}n={__e:function(t,e){for(var r,n;e=e.__;)if((r=e.__c)&&!r.__)try{if(r.constructor&&null!=r.constructor.getDerivedStateFromError&&(n=!0,r.setState(r.constructor.getDerivedStateFromError(t))),null!=r.componentDidCatch&&(n=!0,r.componentDidCatch(t)),n)return M(r.__E=r)}catch(e){t=e}throw t}},w.prototype.setState=function(t,e){var r;r=this.__s!==this.state?this.__s:this.__s=d({},this.state),"function"==typeof t&&(t=t(r,this.props)),t&&d(r,t),null!=t&&this.__v&&(e&&this.__h.push(e),M(this))},w.prototype.forceUpdate=function(t){this.__v&&(this.__e=!0,t&&this.__h.push(t),M(this))},w.prototype.render=y,i=[],o=0,s="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,u=c,h=0;var K,H,j,D=0,z=[],W=n.__r,F=n.diffed,Z=n.__c,V=n.unmount;function $(t,e){n.__h&&n.__h(H,t,D||e),D=0;var r=H.__H||(H.__H={__:[],__h:[]});return t>=r.__.length&&r.__.push({}),r.__[t]}function G(t){return D=1,Y(ct,t)}function Y(t,e,r){var n=$(K++,2);return n.__c||(n.__c=H,n.__=[r?r(e):ct(void 0,e),function(e){var r=t(n.__[0],e);n.__[0]!==r&&(n.__[0]=r,n.__c.setState({}))}]),n.__}function J(t,e){var r=$(K++,3);!n.__s&&ht(r.__H,e)&&(r.__=t,r.__H=e,H.__H.__h.push(r))}function Q(t,e){var r=$(K++,4);!n.__s&&ht(r.__H,e)&&(r.__=t,r.__H=e,H.__h.push(r))}function X(t){return D=5,et((function(){return{current:t}}),[])}function tt(t,e,r){D=6,Q((function(){"function"==typeof t?t(e()):t&&(t.current=e())}),null==r?r:r.concat(t))}function et(t,e){var r=$(K++,7);return ht(r.__H,e)?(r.__H=e,r.__h=t,r.__=t()):r.__}function rt(t,e){return D=8,et((function(){return t}),e)}function nt(t){var e=H.context[t.__c],r=$(K++,9);return r.__c=t,e?(null==r.__&&(r.__=!0,e.sub(H)),e.props.value):t.__}function it(t,e){n.useDebugValue&&n.useDebugValue(e?e(t):t)}function ot(t){var e=$(K++,10),r=G();return e.__=t,H.componentDidCatch||(H.componentDidCatch=function(t){e.__&&e.__(t),r[1](t)}),[r[0],function(){r[1](void 0)}]}function st(){z.some((function(t){if(t.__P)try{t.__H.__h.forEach(at),t.__H.__h.forEach(ut),t.__H.__h=[]}catch(e){return t.__H.__h=[],n.__e(e,t.__v),!0}})),z=[]}function at(t){t.t&&t.t()}function ut(t){var e=t.__();"function"==typeof e&&(t.t=e)}function ht(t,e){return!t||e.some((function(e,r){return e!==t[r]}))}function ct(t,e){return"function"==typeof e?e(t):e}function lt(t,e){for(var r in e)t[r]=e[r];return t}function ft(t,e){for(var r in t)if("__source"!==r&&!(r in e))return!0;for(var n in e)if("__source"!==n&&t[n]!==e[n])return!0;return!1}n.__r=function(t){W&&W(t),K=0,(H=t.__c).__H&&(H.__H.__h.forEach(at),H.__H.__h.forEach(ut),H.__H.__h=[])},n.diffed=function(t){F&&F(t);var e=t.__c;if(e){var r=e.__H;r&&r.__h.length&&(1!==z.push(e)&&j===n.requestAnimationFrame||((j=n.requestAnimationFrame)||function(t){var e,r=function(){clearTimeout(n),cancelAnimationFrame(e),setTimeout(t)},n=setTimeout(r,100);"undefined"!=typeof window&&(e=requestAnimationFrame(r))})(st))}},n.__c=function(t,e){e.some((function(t){try{t.__h.forEach(at),t.__h=t.__h.filter((function(t){return!t.__||ut(t)}))}catch(r){e.some((function(t){t.__h&&(t.__h=[])})),e=[],n.__e(r,t.__v)}})),Z&&Z(t,e)},n.unmount=function(t){V&&V(t);var e=t.__c;if(e){var r=e.__H;if(r)try{r.__.forEach((function(t){return t.t&&t.t()}))}catch(t){n.__e(t,e.__v)}}};var dt=function(t){var e,r;function n(e){var r;return(r=t.call(this,e)||this).isPureReactComponent=!0,r}return r=t,(e=n).prototype=Object.create(r.prototype),e.prototype.constructor=e,e.__proto__=r,n.prototype.shouldComponentUpdate=function(t,e){return ft(this.props,t)||ft(this.state,e)},n}(w);function pt(t,e){function r(t){var r=this.props.ref,n=r==t.ref;return!n&&r&&(r.call?r(null):r.current=null),e?!e(this.props,t)||!n:ft(this.props,t)}function n(e){return this.shouldComponentUpdate=r,m(t,lt({},e))}return n.prototype.isReactComponent=!0,n.displayName="Memo("+(t.displayName||t.name)+")",n.t=!0,n}var mt=n.__b;function gt(t){function e(e){var r=lt({},e);return delete r.ref,t(r,e.ref)}return e.prototype.isReactComponent=e.t=!0,e.displayName="ForwardRef("+(t.displayName||t.name)+")",e}n.__b=function(t){t.type&&t.type.t&&t.ref&&(t.props.ref=t.ref,t.ref=null),mt&&mt(t)};var vt=function(t,e){return t?E(t).reduce((function(t,r,n){return t.concat(e(r,n))}),[]):null},yt={map:vt,forEach:vt,count:function(t){return t?E(t).length:0},only:function(t){if(1!==(t=E(t)).length)throw new Error("Children.only() expects only one child.");return t[0]},toArray:E},wt=n.__e;function _t(t){return t&&((t=lt({},t)).__c=null,t.__k=t.__k&&t.__k.map(_t)),t}function bt(){this.__u=0,this.o=null,this.__b=null}function Mt(t){var e=t.__.__c;return e&&e.u&&e.u(t)}function xt(t){var e,r,n;function i(i){if(e||(e=t()).then((function(t){r=t.default||t}),(function(t){n=t})),n)throw n;if(!r)throw e;return m(r,i)}return i.displayName="Lazy",i.t=!0,i}function kt(){this.i=null,this.l=null}n.__e=function(t,e,r){if(t.then)for(var n,i=e;i=i.__;)if((n=i.__c)&&n.__c)return n.__c(t,e.__c);wt(t,e,r)},(bt.prototype=new w).__c=function(t,e){var r=this;null==r.o&&(r.o=[]),r.o.push(e);var n=Mt(r.__v),i=!1,o=function(){i||(i=!0,n?n(s):s())};e.__c=e.componentWillUnmount,e.componentWillUnmount=function(){o(),e.__c&&e.__c()};var s=function(){var t;if(!--r.__u)for(r.__v.__k[0]=r.state.u,r.setState({u:r.__b=null});t=r.o.pop();)t.forceUpdate()};r.__u++||r.setState({u:r.__b=r.__v.__k[0]}),t.then(o,o)},bt.prototype.render=function(t,e){return this.__b&&(this.__v.__k[0]=_t(this.__b),this.__b=null),[m(w,null,e.u?null:t.children),e.u&&t.fallback]};var Et=function(t,e,r){if(++r[1]===r[0]&&t.l.delete(e),t.props.revealOrder&&("t"!==t.props.revealOrder[0]||!t.l.size))for(r=t.i;r;){for(;r.length>3;)r.pop()();if(r[1]<r[0])break;t.i=r=r[2]}};(kt.prototype=new w).u=function(t){var e=this,r=Mt(e.__v),n=e.l.get(t);return n[0]++,function(i){var o=function(){e.props.revealOrder?(n.push(i),Et(e,t,n)):i()};r?r(o):o()}},kt.prototype.render=function(t){this.i=null,this.l=new Map;var e=E(t.children);t.revealOrder&&"b"===t.revealOrder[0]&&e.reverse();for(var r=e.length;r--;)this.l.set(e[r],this.i=[1,0,this.i]);return t.children},kt.prototype.componentDidUpdate=kt.prototype.componentDidMount=function(){var t=this;t.l.forEach((function(e,r){Et(t,r,e)}))};var At=function(){function t(){}var e=t.prototype;return e.getChildContext=function(){return this.props.context},e.render=function(t){return t.children},t}();function St(t){var e=this,r=t.container,n=m(At,{context:e.context},t.vnode);return e.s&&e.s!==r&&(e.v.parentNode&&e.s.removeChild(e.v),P(e.h),e.p=!1),t.vnode?e.p?(r.__k=e.__k,N(n,r),e.__k=r.__k):(e.v=document.createTextNode(""),O("",r),r.appendChild(e.v),e.p=!0,e.s=r,N(n,r,e.v),e.__k=e.v.__k):e.p&&(e.v.parentNode&&e.s.removeChild(e.v),P(e.h)),e.h=n,e.componentWillUnmount=function(){e.v.parentNode&&e.s.removeChild(e.v),P(e.h)},null}function Tt(t,e){return m(St,{vnode:t,container:e})}var Ct=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/;w.prototype.isReactComponent={};var Bt="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;function Rt(t,e,r){if(null==e.__k)for(;e.firstChild;)e.removeChild(e.firstChild);return N(t,e),"function"==typeof r&&r(),t?t.__c:null}function It(t,e,r){return O(t,e),"function"==typeof r&&r(),t?t.__c:null}var Pt=n.event;function Lt(t,e){t["UNSAFE_"+e]&&!t[e]&&Object.defineProperty(t,e,{configurable:!1,get:function(){return this["UNSAFE_"+e]},set:function(t){this["UNSAFE_"+e]=t}})}n.event=function(t){Pt&&(t=Pt(t)),t.persist=function(){};var e=!1,r=!1,n=t.stopPropagation;t.stopPropagation=function(){n.call(t),e=!0};var i=t.preventDefault;return t.preventDefault=function(){i.call(t),r=!0},t.isPropagationStopped=function(){return e},t.isDefaultPrevented=function(){return r},t.nativeEvent=t};var Nt={configurable:!0,get:function(){return this.class}},Ot=n.vnode;n.vnode=function(t){t.$$typeof=Bt;var e=t.type,r=t.props;if(e){if(r.class!=r.className&&(Nt.enumerable="className"in r,null!=r.className&&(r.class=r.className),Object.defineProperty(r,"className",Nt)),"function"!=typeof e){var n,i,o;for(o in r.defaultValue&&void 0!==r.value&&(r.value||0===r.value||(r.value=r.defaultValue),delete r.defaultValue),Array.isArray(r.value)&&r.multiple&&"select"===e&&(E(r.children).forEach((function(t){-1!=r.value.indexOf(t.props.value)&&(t.props.selected=!0)})),delete r.value),r)if(n=Ct.test(o))break;if(n)for(o in i=t.props={},r)i[Ct.test(o)?o.replace(/[A-Z0-9]/,"-$&").toLowerCase():o]=r[o]}!function(e){var r=t.type,n=t.props;if(n&&"string"==typeof r){var i={};for(var o in n)/^on(Ani|Tra|Tou)/.test(o)&&(n[o.toLowerCase()]=n[o],delete n[o]),i[o.toLowerCase()]=o;if(i.ondoubleclick&&(n.ondblclick=n[i.ondoubleclick],delete n[i.ondoubleclick]),i.onbeforeinput&&(n.onbeforeinput=n[i.onbeforeinput],delete n[i.onbeforeinput]),i.onchange&&("textarea"===r||"input"===r.toLowerCase()&&!/^fil|che|ra/i.test(n.type))){var s=i.oninput||"oninput";n[s]||(n[s]=n[i.onchange],delete n[i.onchange])}}}(),"function"==typeof e&&!e.m&&e.prototype&&(Lt(e.prototype,"componentWillMount"),Lt(e.prototype,"componentWillReceiveProps"),Lt(e.prototype,"componentWillUpdate"),e.m=!0)}Ot&&Ot(t)};var Ut="16.8.0";function qt(t){return m.bind(null,t)}function Kt(t){return!!t&&t.$$typeof===Bt}function Ht(t){return Kt(t)?U.apply(null,arguments):t}function jt(t){return!!t.__k&&(N(null,t),!0)}function Dt(t){return t&&(t.base||1===t.nodeType&&t)||null}var zt=function(t,e){return t(e)};const Wt={useState:G,useReducer:Y,useEffect:J,useLayoutEffect:Q,useRef:X,useImperativeHandle:tt,useMemo:et,useCallback:rt,useContext:nt,useDebugValue:it,version:"16.8.0",Children:yt,render:Rt,hydrate:Rt,unmountComponentAtNode:jt,createPortal:Tt,createElement:m,createContext:q,createFactory:qt,cloneElement:Ht,createRef:v,Fragment:y,isValidElement:Kt,findDOMNode:Dt,Component:w,PureComponent:dt,memo:pt,forwardRef:gt,unstable_batchedUpdates:zt,Suspense:bt,SuspenseList:kt,lazy:xt}},68007:t=>{"use strict";t.exports=function(){throw new Error("ws does not work in the browser. Browser clients must use the native WebSocket object")}},11460:function(t,e,r){!function(t,e){"use strict";function n(t,e){if(!t)throw new Error(e||"Assertion failed")}function i(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}function o(t,e,r){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(r=e,e=10),this._init(t||0,e||10,r||"be"))}var s;"object"==typeof t?t.exports=o:e.BN=o,o.BN=o,o.wordSize=26;try{s=r(36563).Buffer}catch(t){}function a(t,e,r){for(var n=0,i=Math.min(t.length,r),o=e;o<i;o++){var s=t.charCodeAt(o)-48;n<<=4,n|=s>=49&&s<=54?s-49+10:s>=17&&s<=22?s-17+10:15&s}return n}function u(t,e,r,n){for(var i=0,o=Math.min(t.length,r),s=e;s<o;s++){var a=t.charCodeAt(s)-48;i*=n,i+=a>=49?a-49+10:a>=17?a-17+10:a}return i}o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,e){return t.cmp(e)>0?t:e},o.min=function(t,e){return t.cmp(e)<0?t:e},o.prototype._init=function(t,e,r){if("number"==typeof t)return this._initNumber(t,e,r);if("object"==typeof t)return this._initArray(t,e,r);"hex"===e&&(e=16),n(e===(0|e)&&e>=2&&e<=36);var i=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&i++,16===e?this._parseHex(t,i):this._parseBase(t,e,i),"-"===t[0]&&(this.negative=1),this.strip(),"le"===r&&this._initArray(this.toArray(),e,r)},o.prototype._initNumber=function(t,e,r){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(n(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===r&&this._initArray(this.toArray(),e,r)},o.prototype._initArray=function(t,e,r){if(n("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var o,s,a=0;if("be"===r)for(i=t.length-1,o=0;i>=0;i-=3)s=t[i]|t[i-1]<<8|t[i-2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);else if("le"===r)for(i=0,o=0;i<t.length;i+=3)s=t[i]|t[i+1]<<8|t[i+2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);return this.strip()},o.prototype._parseHex=function(t,e){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var r=0;r<this.length;r++)this.words[r]=0;var n,i,o=0;for(r=t.length-6,n=0;r>=e;r-=6)i=a(t,r,r+6),this.words[n]|=i<<o&67108863,this.words[n+1]|=i>>>26-o&4194303,(o+=24)>=26&&(o-=26,n++);r+6!==e&&(i=a(t,e,r+6),this.words[n]|=i<<o&67108863,this.words[n+1]|=i>>>26-o&4194303),this.strip()},o.prototype._parseBase=function(t,e,r){this.words=[0],this.length=1;for(var n=0,i=1;i<=67108863;i*=e)n++;n--,i=i/e|0;for(var o=t.length-r,s=o%n,a=Math.min(o,o-s)+r,h=0,c=r;c<a;c+=n)h=u(t,c,c+n,e),this.imuln(i),this.words[0]+h<67108864?this.words[0]+=h:this._iaddn(h);if(0!==s){var l=1;for(h=u(t,c,t.length,e),c=0;c<s;c++)l*=e;this.imuln(l),this.words[0]+h<67108864?this.words[0]+=h:this._iaddn(h)}},o.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},o.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var h=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],c=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],l=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function f(t,e,r){r.negative=e.negative^t.negative;var n=t.length+e.length|0;r.length=n,n=n-1|0;var i=0|t.words[0],o=0|e.words[0],s=i*o,a=67108863&s,u=s/67108864|0;r.words[0]=a;for(var h=1;h<n;h++){for(var c=u>>>26,l=67108863&u,f=Math.min(h,e.length-1),d=Math.max(0,h-t.length+1);d<=f;d++){var p=h-d|0;c+=(s=(i=0|t.words[p])*(o=0|e.words[d])+l)/67108864|0,l=67108863&s}r.words[h]=0|l,u=0|c}return 0!==u?r.words[h]=0|u:r.length--,r.strip()}o.prototype.toString=function(t,e){var r;if(e=0|e||1,16===(t=t||10)||"hex"===t){r="";for(var i=0,o=0,s=0;s<this.length;s++){var a=this.words[s],u=(16777215&(a<<i|o)).toString(16);r=0!=(o=a>>>24-i&16777215)||s!==this.length-1?h[6-u.length]+u+r:u+r,(i+=2)>=26&&(i-=26,s--)}for(0!==o&&(r=o.toString(16)+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}if(t===(0|t)&&t>=2&&t<=36){var f=c[t],d=l[t];r="";var p=this.clone();for(p.negative=0;!p.isZero();){var m=p.modn(d).toString(t);r=(p=p.idivn(d)).isZero()?m+r:h[f-m.length]+m+r}for(this.isZero()&&(r="0"+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}n(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&n(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16)},o.prototype.toBuffer=function(t,e){return n(void 0!==s),this.toArrayLike(s,t,e)},o.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},o.prototype.toArrayLike=function(t,e,r){var i=this.byteLength(),o=r||Math.max(1,i);n(i<=o,"byte array longer than desired length"),n(o>0,"Requested array length <= 0"),this.strip();var s,a,u="le"===e,h=new t(o),c=this.clone();if(u){for(a=0;!c.isZero();a++)s=c.andln(255),c.iushrn(8),h[a]=s;for(;a<o;a++)h[a]=0}else{for(a=0;a<o-i;a++)h[a]=0;for(a=0;!c.isZero();a++)s=c.andln(255),c.iushrn(8),h[o-a-1]=s}return h},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var e=t,r=0;return e>=4096&&(r+=13,e>>>=13),e>=64&&(r+=7,e>>>=7),e>=8&&(r+=4,e>>>=4),e>=2&&(r+=2,e>>>=2),r+e},o.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,r=0;return 0==(8191&e)&&(r+=13,e>>>=13),0==(127&e)&&(r+=7,e>>>=7),0==(15&e)&&(r+=4,e>>>=4),0==(3&e)&&(r+=2,e>>>=2),0==(1&e)&&r++,r},o.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var r=this._zeroBits(this.words[e]);if(t+=r,26!==r)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},o.prototype.ior=function(t){return n(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var r=0;r<e.length;r++)this.words[r]=this.words[r]&t.words[r];return this.length=e.length,this.strip()},o.prototype.iand=function(t){return n(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var e,r;this.length>t.length?(e=this,r=t):(e=t,r=this);for(var n=0;n<r.length;n++)this.words[n]=e.words[n]^r.words[n];if(this!==e)for(;n<e.length;n++)this.words[n]=e.words[n];return this.length=e.length,this.strip()},o.prototype.ixor=function(t){return n(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){n("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),r=t%26;this._expand(e),r>0&&e--;for(var i=0;i<e;i++)this.words[i]=67108863&~this.words[i];return r>0&&(this.words[i]=~this.words[i]&67108863>>26-r),this.strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,e){n("number"==typeof t&&t>=0);var r=t/26|0,i=t%26;return this._expand(r+1),this.words[r]=e?this.words[r]|1<<i:this.words[r]&~(1<<i),this.strip()},o.prototype.iadd=function(t){var e,r,n;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(r=this,n=t):(r=t,n=this);for(var i=0,o=0;o<n.length;o++)e=(0|r.words[o])+(0|n.words[o])+i,this.words[o]=67108863&e,i=e>>>26;for(;0!==i&&o<r.length;o++)e=(0|r.words[o])+i,this.words[o]=67108863&e,i=e>>>26;if(this.length=r.length,0!==i)this.words[this.length]=i,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},o.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r,n,i=this.cmp(t);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(r=this,n=t):(r=t,n=this);for(var o=0,s=0;s<n.length;s++)o=(e=(0|r.words[s])-(0|n.words[s])+o)>>26,this.words[s]=67108863&e;for(;0!==o&&s<r.length;s++)o=(e=(0|r.words[s])+o)>>26,this.words[s]=67108863&e;if(0===o&&s<r.length&&r!==this)for(;s<r.length;s++)this.words[s]=r.words[s];return this.length=Math.max(this.length,s),r!==this&&(this.negative=1),this.strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var d=function(t,e,r){var n,i,o,s=t.words,a=e.words,u=r.words,h=0,c=0|s[0],l=8191&c,f=c>>>13,d=0|s[1],p=8191&d,m=d>>>13,g=0|s[2],v=8191&g,y=g>>>13,w=0|s[3],_=8191&w,b=w>>>13,M=0|s[4],x=8191&M,k=M>>>13,E=0|s[5],A=8191&E,S=E>>>13,T=0|s[6],C=8191&T,B=T>>>13,R=0|s[7],I=8191&R,P=R>>>13,L=0|s[8],N=8191&L,O=L>>>13,U=0|s[9],q=8191&U,K=U>>>13,H=0|a[0],j=8191&H,D=H>>>13,z=0|a[1],W=8191&z,F=z>>>13,Z=0|a[2],V=8191&Z,$=Z>>>13,G=0|a[3],Y=8191&G,J=G>>>13,Q=0|a[4],X=8191&Q,tt=Q>>>13,et=0|a[5],rt=8191&et,nt=et>>>13,it=0|a[6],ot=8191&it,st=it>>>13,at=0|a[7],ut=8191&at,ht=at>>>13,ct=0|a[8],lt=8191&ct,ft=ct>>>13,dt=0|a[9],pt=8191&dt,mt=dt>>>13;r.negative=t.negative^e.negative,r.length=19;var gt=(h+(n=Math.imul(l,j))|0)+((8191&(i=(i=Math.imul(l,D))+Math.imul(f,j)|0))<<13)|0;h=((o=Math.imul(f,D))+(i>>>13)|0)+(gt>>>26)|0,gt&=67108863,n=Math.imul(p,j),i=(i=Math.imul(p,D))+Math.imul(m,j)|0,o=Math.imul(m,D);var vt=(h+(n=n+Math.imul(l,W)|0)|0)+((8191&(i=(i=i+Math.imul(l,F)|0)+Math.imul(f,W)|0))<<13)|0;h=((o=o+Math.imul(f,F)|0)+(i>>>13)|0)+(vt>>>26)|0,vt&=67108863,n=Math.imul(v,j),i=(i=Math.imul(v,D))+Math.imul(y,j)|0,o=Math.imul(y,D),n=n+Math.imul(p,W)|0,i=(i=i+Math.imul(p,F)|0)+Math.imul(m,W)|0,o=o+Math.imul(m,F)|0;var yt=(h+(n=n+Math.imul(l,V)|0)|0)+((8191&(i=(i=i+Math.imul(l,$)|0)+Math.imul(f,V)|0))<<13)|0;h=((o=o+Math.imul(f,$)|0)+(i>>>13)|0)+(yt>>>26)|0,yt&=67108863,n=Math.imul(_,j),i=(i=Math.imul(_,D))+Math.imul(b,j)|0,o=Math.imul(b,D),n=n+Math.imul(v,W)|0,i=(i=i+Math.imul(v,F)|0)+Math.imul(y,W)|0,o=o+Math.imul(y,F)|0,n=n+Math.imul(p,V)|0,i=(i=i+Math.imul(p,$)|0)+Math.imul(m,V)|0,o=o+Math.imul(m,$)|0;var wt=(h+(n=n+Math.imul(l,Y)|0)|0)+((8191&(i=(i=i+Math.imul(l,J)|0)+Math.imul(f,Y)|0))<<13)|0;h=((o=o+Math.imul(f,J)|0)+(i>>>13)|0)+(wt>>>26)|0,wt&=67108863,n=Math.imul(x,j),i=(i=Math.imul(x,D))+Math.imul(k,j)|0,o=Math.imul(k,D),n=n+Math.imul(_,W)|0,i=(i=i+Math.imul(_,F)|0)+Math.imul(b,W)|0,o=o+Math.imul(b,F)|0,n=n+Math.imul(v,V)|0,i=(i=i+Math.imul(v,$)|0)+Math.imul(y,V)|0,o=o+Math.imul(y,$)|0,n=n+Math.imul(p,Y)|0,i=(i=i+Math.imul(p,J)|0)+Math.imul(m,Y)|0,o=o+Math.imul(m,J)|0;var _t=(h+(n=n+Math.imul(l,X)|0)|0)+((8191&(i=(i=i+Math.imul(l,tt)|0)+Math.imul(f,X)|0))<<13)|0;h=((o=o+Math.imul(f,tt)|0)+(i>>>13)|0)+(_t>>>26)|0,_t&=67108863,n=Math.imul(A,j),i=(i=Math.imul(A,D))+Math.imul(S,j)|0,o=Math.imul(S,D),n=n+Math.imul(x,W)|0,i=(i=i+Math.imul(x,F)|0)+Math.imul(k,W)|0,o=o+Math.imul(k,F)|0,n=n+Math.imul(_,V)|0,i=(i=i+Math.imul(_,$)|0)+Math.imul(b,V)|0,o=o+Math.imul(b,$)|0,n=n+Math.imul(v,Y)|0,i=(i=i+Math.imul(v,J)|0)+Math.imul(y,Y)|0,o=o+Math.imul(y,J)|0,n=n+Math.imul(p,X)|0,i=(i=i+Math.imul(p,tt)|0)+Math.imul(m,X)|0,o=o+Math.imul(m,tt)|0;var bt=(h+(n=n+Math.imul(l,rt)|0)|0)+((8191&(i=(i=i+Math.imul(l,nt)|0)+Math.imul(f,rt)|0))<<13)|0;h=((o=o+Math.imul(f,nt)|0)+(i>>>13)|0)+(bt>>>26)|0,bt&=67108863,n=Math.imul(C,j),i=(i=Math.imul(C,D))+Math.imul(B,j)|0,o=Math.imul(B,D),n=n+Math.imul(A,W)|0,i=(i=i+Math.imul(A,F)|0)+Math.imul(S,W)|0,o=o+Math.imul(S,F)|0,n=n+Math.imul(x,V)|0,i=(i=i+Math.imul(x,$)|0)+Math.imul(k,V)|0,o=o+Math.imul(k,$)|0,n=n+Math.imul(_,Y)|0,i=(i=i+Math.imul(_,J)|0)+Math.imul(b,Y)|0,o=o+Math.imul(b,J)|0,n=n+Math.imul(v,X)|0,i=(i=i+Math.imul(v,tt)|0)+Math.imul(y,X)|0,o=o+Math.imul(y,tt)|0,n=n+Math.imul(p,rt)|0,i=(i=i+Math.imul(p,nt)|0)+Math.imul(m,rt)|0,o=o+Math.imul(m,nt)|0;var Mt=(h+(n=n+Math.imul(l,ot)|0)|0)+((8191&(i=(i=i+Math.imul(l,st)|0)+Math.imul(f,ot)|0))<<13)|0;h=((o=o+Math.imul(f,st)|0)+(i>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,n=Math.imul(I,j),i=(i=Math.imul(I,D))+Math.imul(P,j)|0,o=Math.imul(P,D),n=n+Math.imul(C,W)|0,i=(i=i+Math.imul(C,F)|0)+Math.imul(B,W)|0,o=o+Math.imul(B,F)|0,n=n+Math.imul(A,V)|0,i=(i=i+Math.imul(A,$)|0)+Math.imul(S,V)|0,o=o+Math.imul(S,$)|0,n=n+Math.imul(x,Y)|0,i=(i=i+Math.imul(x,J)|0)+Math.imul(k,Y)|0,o=o+Math.imul(k,J)|0,n=n+Math.imul(_,X)|0,i=(i=i+Math.imul(_,tt)|0)+Math.imul(b,X)|0,o=o+Math.imul(b,tt)|0,n=n+Math.imul(v,rt)|0,i=(i=i+Math.imul(v,nt)|0)+Math.imul(y,rt)|0,o=o+Math.imul(y,nt)|0,n=n+Math.imul(p,ot)|0,i=(i=i+Math.imul(p,st)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,st)|0;var xt=(h+(n=n+Math.imul(l,ut)|0)|0)+((8191&(i=(i=i+Math.imul(l,ht)|0)+Math.imul(f,ut)|0))<<13)|0;h=((o=o+Math.imul(f,ht)|0)+(i>>>13)|0)+(xt>>>26)|0,xt&=67108863,n=Math.imul(N,j),i=(i=Math.imul(N,D))+Math.imul(O,j)|0,o=Math.imul(O,D),n=n+Math.imul(I,W)|0,i=(i=i+Math.imul(I,F)|0)+Math.imul(P,W)|0,o=o+Math.imul(P,F)|0,n=n+Math.imul(C,V)|0,i=(i=i+Math.imul(C,$)|0)+Math.imul(B,V)|0,o=o+Math.imul(B,$)|0,n=n+Math.imul(A,Y)|0,i=(i=i+Math.imul(A,J)|0)+Math.imul(S,Y)|0,o=o+Math.imul(S,J)|0,n=n+Math.imul(x,X)|0,i=(i=i+Math.imul(x,tt)|0)+Math.imul(k,X)|0,o=o+Math.imul(k,tt)|0,n=n+Math.imul(_,rt)|0,i=(i=i+Math.imul(_,nt)|0)+Math.imul(b,rt)|0,o=o+Math.imul(b,nt)|0,n=n+Math.imul(v,ot)|0,i=(i=i+Math.imul(v,st)|0)+Math.imul(y,ot)|0,o=o+Math.imul(y,st)|0,n=n+Math.imul(p,ut)|0,i=(i=i+Math.imul(p,ht)|0)+Math.imul(m,ut)|0,o=o+Math.imul(m,ht)|0;var kt=(h+(n=n+Math.imul(l,lt)|0)|0)+((8191&(i=(i=i+Math.imul(l,ft)|0)+Math.imul(f,lt)|0))<<13)|0;h=((o=o+Math.imul(f,ft)|0)+(i>>>13)|0)+(kt>>>26)|0,kt&=67108863,n=Math.imul(q,j),i=(i=Math.imul(q,D))+Math.imul(K,j)|0,o=Math.imul(K,D),n=n+Math.imul(N,W)|0,i=(i=i+Math.imul(N,F)|0)+Math.imul(O,W)|0,o=o+Math.imul(O,F)|0,n=n+Math.imul(I,V)|0,i=(i=i+Math.imul(I,$)|0)+Math.imul(P,V)|0,o=o+Math.imul(P,$)|0,n=n+Math.imul(C,Y)|0,i=(i=i+Math.imul(C,J)|0)+Math.imul(B,Y)|0,o=o+Math.imul(B,J)|0,n=n+Math.imul(A,X)|0,i=(i=i+Math.imul(A,tt)|0)+Math.imul(S,X)|0,o=o+Math.imul(S,tt)|0,n=n+Math.imul(x,rt)|0,i=(i=i+Math.imul(x,nt)|0)+Math.imul(k,rt)|0,o=o+Math.imul(k,nt)|0,n=n+Math.imul(_,ot)|0,i=(i=i+Math.imul(_,st)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,st)|0,n=n+Math.imul(v,ut)|0,i=(i=i+Math.imul(v,ht)|0)+Math.imul(y,ut)|0,o=o+Math.imul(y,ht)|0,n=n+Math.imul(p,lt)|0,i=(i=i+Math.imul(p,ft)|0)+Math.imul(m,lt)|0,o=o+Math.imul(m,ft)|0;var Et=(h+(n=n+Math.imul(l,pt)|0)|0)+((8191&(i=(i=i+Math.imul(l,mt)|0)+Math.imul(f,pt)|0))<<13)|0;h=((o=o+Math.imul(f,mt)|0)+(i>>>13)|0)+(Et>>>26)|0,Et&=67108863,n=Math.imul(q,W),i=(i=Math.imul(q,F))+Math.imul(K,W)|0,o=Math.imul(K,F),n=n+Math.imul(N,V)|0,i=(i=i+Math.imul(N,$)|0)+Math.imul(O,V)|0,o=o+Math.imul(O,$)|0,n=n+Math.imul(I,Y)|0,i=(i=i+Math.imul(I,J)|0)+Math.imul(P,Y)|0,o=o+Math.imul(P,J)|0,n=n+Math.imul(C,X)|0,i=(i=i+Math.imul(C,tt)|0)+Math.imul(B,X)|0,o=o+Math.imul(B,tt)|0,n=n+Math.imul(A,rt)|0,i=(i=i+Math.imul(A,nt)|0)+Math.imul(S,rt)|0,o=o+Math.imul(S,nt)|0,n=n+Math.imul(x,ot)|0,i=(i=i+Math.imul(x,st)|0)+Math.imul(k,ot)|0,o=o+Math.imul(k,st)|0,n=n+Math.imul(_,ut)|0,i=(i=i+Math.imul(_,ht)|0)+Math.imul(b,ut)|0,o=o+Math.imul(b,ht)|0,n=n+Math.imul(v,lt)|0,i=(i=i+Math.imul(v,ft)|0)+Math.imul(y,lt)|0,o=o+Math.imul(y,ft)|0;var At=(h+(n=n+Math.imul(p,pt)|0)|0)+((8191&(i=(i=i+Math.imul(p,mt)|0)+Math.imul(m,pt)|0))<<13)|0;h=((o=o+Math.imul(m,mt)|0)+(i>>>13)|0)+(At>>>26)|0,At&=67108863,n=Math.imul(q,V),i=(i=Math.imul(q,$))+Math.imul(K,V)|0,o=Math.imul(K,$),n=n+Math.imul(N,Y)|0,i=(i=i+Math.imul(N,J)|0)+Math.imul(O,Y)|0,o=o+Math.imul(O,J)|0,n=n+Math.imul(I,X)|0,i=(i=i+Math.imul(I,tt)|0)+Math.imul(P,X)|0,o=o+Math.imul(P,tt)|0,n=n+Math.imul(C,rt)|0,i=(i=i+Math.imul(C,nt)|0)+Math.imul(B,rt)|0,o=o+Math.imul(B,nt)|0,n=n+Math.imul(A,ot)|0,i=(i=i+Math.imul(A,st)|0)+Math.imul(S,ot)|0,o=o+Math.imul(S,st)|0,n=n+Math.imul(x,ut)|0,i=(i=i+Math.imul(x,ht)|0)+Math.imul(k,ut)|0,o=o+Math.imul(k,ht)|0,n=n+Math.imul(_,lt)|0,i=(i=i+Math.imul(_,ft)|0)+Math.imul(b,lt)|0,o=o+Math.imul(b,ft)|0;var St=(h+(n=n+Math.imul(v,pt)|0)|0)+((8191&(i=(i=i+Math.imul(v,mt)|0)+Math.imul(y,pt)|0))<<13)|0;h=((o=o+Math.imul(y,mt)|0)+(i>>>13)|0)+(St>>>26)|0,St&=67108863,n=Math.imul(q,Y),i=(i=Math.imul(q,J))+Math.imul(K,Y)|0,o=Math.imul(K,J),n=n+Math.imul(N,X)|0,i=(i=i+Math.imul(N,tt)|0)+Math.imul(O,X)|0,o=o+Math.imul(O,tt)|0,n=n+Math.imul(I,rt)|0,i=(i=i+Math.imul(I,nt)|0)+Math.imul(P,rt)|0,o=o+Math.imul(P,nt)|0,n=n+Math.imul(C,ot)|0,i=(i=i+Math.imul(C,st)|0)+Math.imul(B,ot)|0,o=o+Math.imul(B,st)|0,n=n+Math.imul(A,ut)|0,i=(i=i+Math.imul(A,ht)|0)+Math.imul(S,ut)|0,o=o+Math.imul(S,ht)|0,n=n+Math.imul(x,lt)|0,i=(i=i+Math.imul(x,ft)|0)+Math.imul(k,lt)|0,o=o+Math.imul(k,ft)|0;var Tt=(h+(n=n+Math.imul(_,pt)|0)|0)+((8191&(i=(i=i+Math.imul(_,mt)|0)+Math.imul(b,pt)|0))<<13)|0;h=((o=o+Math.imul(b,mt)|0)+(i>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,n=Math.imul(q,X),i=(i=Math.imul(q,tt))+Math.imul(K,X)|0,o=Math.imul(K,tt),n=n+Math.imul(N,rt)|0,i=(i=i+Math.imul(N,nt)|0)+Math.imul(O,rt)|0,o=o+Math.imul(O,nt)|0,n=n+Math.imul(I,ot)|0,i=(i=i+Math.imul(I,st)|0)+Math.imul(P,ot)|0,o=o+Math.imul(P,st)|0,n=n+Math.imul(C,ut)|0,i=(i=i+Math.imul(C,ht)|0)+Math.imul(B,ut)|0,o=o+Math.imul(B,ht)|0,n=n+Math.imul(A,lt)|0,i=(i=i+Math.imul(A,ft)|0)+Math.imul(S,lt)|0,o=o+Math.imul(S,ft)|0;var Ct=(h+(n=n+Math.imul(x,pt)|0)|0)+((8191&(i=(i=i+Math.imul(x,mt)|0)+Math.imul(k,pt)|0))<<13)|0;h=((o=o+Math.imul(k,mt)|0)+(i>>>13)|0)+(Ct>>>26)|0,Ct&=67108863,n=Math.imul(q,rt),i=(i=Math.imul(q,nt))+Math.imul(K,rt)|0,o=Math.imul(K,nt),n=n+Math.imul(N,ot)|0,i=(i=i+Math.imul(N,st)|0)+Math.imul(O,ot)|0,o=o+Math.imul(O,st)|0,n=n+Math.imul(I,ut)|0,i=(i=i+Math.imul(I,ht)|0)+Math.imul(P,ut)|0,o=o+Math.imul(P,ht)|0,n=n+Math.imul(C,lt)|0,i=(i=i+Math.imul(C,ft)|0)+Math.imul(B,lt)|0,o=o+Math.imul(B,ft)|0;var Bt=(h+(n=n+Math.imul(A,pt)|0)|0)+((8191&(i=(i=i+Math.imul(A,mt)|0)+Math.imul(S,pt)|0))<<13)|0;h=((o=o+Math.imul(S,mt)|0)+(i>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,n=Math.imul(q,ot),i=(i=Math.imul(q,st))+Math.imul(K,ot)|0,o=Math.imul(K,st),n=n+Math.imul(N,ut)|0,i=(i=i+Math.imul(N,ht)|0)+Math.imul(O,ut)|0,o=o+Math.imul(O,ht)|0,n=n+Math.imul(I,lt)|0,i=(i=i+Math.imul(I,ft)|0)+Math.imul(P,lt)|0,o=o+Math.imul(P,ft)|0;var Rt=(h+(n=n+Math.imul(C,pt)|0)|0)+((8191&(i=(i=i+Math.imul(C,mt)|0)+Math.imul(B,pt)|0))<<13)|0;h=((o=o+Math.imul(B,mt)|0)+(i>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,n=Math.imul(q,ut),i=(i=Math.imul(q,ht))+Math.imul(K,ut)|0,o=Math.imul(K,ht),n=n+Math.imul(N,lt)|0,i=(i=i+Math.imul(N,ft)|0)+Math.imul(O,lt)|0,o=o+Math.imul(O,ft)|0;var It=(h+(n=n+Math.imul(I,pt)|0)|0)+((8191&(i=(i=i+Math.imul(I,mt)|0)+Math.imul(P,pt)|0))<<13)|0;h=((o=o+Math.imul(P,mt)|0)+(i>>>13)|0)+(It>>>26)|0,It&=67108863,n=Math.imul(q,lt),i=(i=Math.imul(q,ft))+Math.imul(K,lt)|0,o=Math.imul(K,ft);var Pt=(h+(n=n+Math.imul(N,pt)|0)|0)+((8191&(i=(i=i+Math.imul(N,mt)|0)+Math.imul(O,pt)|0))<<13)|0;h=((o=o+Math.imul(O,mt)|0)+(i>>>13)|0)+(Pt>>>26)|0,Pt&=67108863;var Lt=(h+(n=Math.imul(q,pt))|0)+((8191&(i=(i=Math.imul(q,mt))+Math.imul(K,pt)|0))<<13)|0;return h=((o=Math.imul(K,mt))+(i>>>13)|0)+(Lt>>>26)|0,Lt&=67108863,u[0]=gt,u[1]=vt,u[2]=yt,u[3]=wt,u[4]=_t,u[5]=bt,u[6]=Mt,u[7]=xt,u[8]=kt,u[9]=Et,u[10]=At,u[11]=St,u[12]=Tt,u[13]=Ct,u[14]=Bt,u[15]=Rt,u[16]=It,u[17]=Pt,u[18]=Lt,0!==h&&(u[19]=h,r.length++),r};function p(t,e,r){return(new m).mulp(t,e,r)}function m(t,e){this.x=t,this.y=e}Math.imul||(d=f),o.prototype.mulTo=function(t,e){var r=this.length+t.length;return 10===this.length&&10===t.length?d(this,t,e):r<63?f(this,t,e):r<1024?function(t,e,r){r.negative=e.negative^t.negative,r.length=t.length+e.length;for(var n=0,i=0,o=0;o<r.length-1;o++){var s=i;i=0;for(var a=67108863&n,u=Math.min(o,e.length-1),h=Math.max(0,o-t.length+1);h<=u;h++){var c=o-h,l=(0|t.words[c])*(0|e.words[h]),f=67108863&l;a=67108863&(f=f+a|0),i+=(s=(s=s+(l/67108864|0)|0)+(f>>>26)|0)>>>26,s&=67108863}r.words[o]=a,n=s,s=i}return 0!==n?r.words[o]=n:r.length--,r.strip()}(this,t,e):p(this,t,e)},m.prototype.makeRBT=function(t){for(var e=new Array(t),r=o.prototype._countBits(t)-1,n=0;n<t;n++)e[n]=this.revBin(n,r,t);return e},m.prototype.revBin=function(t,e,r){if(0===t||t===r-1)return t;for(var n=0,i=0;i<e;i++)n|=(1&t)<<e-i-1,t>>=1;return n},m.prototype.permute=function(t,e,r,n,i,o){for(var s=0;s<o;s++)n[s]=e[t[s]],i[s]=r[t[s]]},m.prototype.transform=function(t,e,r,n,i,o){this.permute(o,t,e,r,n,i);for(var s=1;s<i;s<<=1)for(var a=s<<1,u=Math.cos(2*Math.PI/a),h=Math.sin(2*Math.PI/a),c=0;c<i;c+=a)for(var l=u,f=h,d=0;d<s;d++){var p=r[c+d],m=n[c+d],g=r[c+d+s],v=n[c+d+s],y=l*g-f*v;v=l*v+f*g,g=y,r[c+d]=p+g,n[c+d]=m+v,r[c+d+s]=p-g,n[c+d+s]=m-v,d!==a&&(y=u*l-h*f,f=u*f+h*l,l=y)}},m.prototype.guessLen13b=function(t,e){var r=1|Math.max(e,t),n=1&r,i=0;for(r=r/2|0;r;r>>>=1)i++;return 1<<i+1+n},m.prototype.conjugate=function(t,e,r){if(!(r<=1))for(var n=0;n<r/2;n++){var i=t[n];t[n]=t[r-n-1],t[r-n-1]=i,i=e[n],e[n]=-e[r-n-1],e[r-n-1]=-i}},m.prototype.normalize13b=function(t,e){for(var r=0,n=0;n<e/2;n++){var i=8192*Math.round(t[2*n+1]/e)+Math.round(t[2*n]/e)+r;t[n]=67108863&i,r=i<67108864?0:i/67108864|0}return t},m.prototype.convert13b=function(t,e,r,i){for(var o=0,s=0;s<e;s++)o+=0|t[s],r[2*s]=8191&o,o>>>=13,r[2*s+1]=8191&o,o>>>=13;for(s=2*e;s<i;++s)r[s]=0;n(0===o),n(0==(-8192&o))},m.prototype.stub=function(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=0;return e},m.prototype.mulp=function(t,e,r){var n=2*this.guessLen13b(t.length,e.length),i=this.makeRBT(n),o=this.stub(n),s=new Array(n),a=new Array(n),u=new Array(n),h=new Array(n),c=new Array(n),l=new Array(n),f=r.words;f.length=n,this.convert13b(t.words,t.length,s,n),this.convert13b(e.words,e.length,h,n),this.transform(s,o,a,u,n,i),this.transform(h,o,c,l,n,i);for(var d=0;d<n;d++){var p=a[d]*c[d]-u[d]*l[d];u[d]=a[d]*l[d]+u[d]*c[d],a[d]=p}return this.conjugate(a,u,n),this.transform(a,u,f,o,n,i),this.conjugate(f,o,n),this.normalize13b(f,n),r.negative=t.negative^e.negative,r.length=t.length+e.length,r.strip()},o.prototype.mul=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},o.prototype.mulf=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),p(this,t,e)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){n("number"==typeof t),n(t<67108864);for(var e=0,r=0;r<this.length;r++){var i=(0|this.words[r])*t,o=(67108863&i)+(67108863&e);e>>=26,e+=i/67108864|0,e+=o>>>26,this.words[r]=67108863&o}return 0!==e&&(this.words[r]=e,this.length++),this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),r=0;r<e.length;r++){var n=r/26|0,i=r%26;e[r]=(t.words[n]&1<<i)>>>i}return e}(t);if(0===e.length)return new o(1);for(var r=this,n=0;n<e.length&&0===e[n];n++,r=r.sqr());if(++n<e.length)for(var i=r.sqr();n<e.length;n++,i=i.sqr())0!==e[n]&&(r=r.mul(i));return r},o.prototype.iushln=function(t){n("number"==typeof t&&t>=0);var e,r=t%26,i=(t-r)/26,o=67108863>>>26-r<<26-r;if(0!==r){var s=0;for(e=0;e<this.length;e++){var a=this.words[e]&o,u=(0|this.words[e])-a<<r;this.words[e]=u|s,s=a>>>26-r}s&&(this.words[e]=s,this.length++)}if(0!==i){for(e=this.length-1;e>=0;e--)this.words[e+i]=this.words[e];for(e=0;e<i;e++)this.words[e]=0;this.length+=i}return this.strip()},o.prototype.ishln=function(t){return n(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,e,r){var i;n("number"==typeof t&&t>=0),i=e?(e-e%26)/26:0;var o=t%26,s=Math.min((t-o)/26,this.length),a=67108863^67108863>>>o<<o,u=r;if(i-=s,i=Math.max(0,i),u){for(var h=0;h<s;h++)u.words[h]=this.words[h];u.length=s}if(0===s);else if(this.length>s)for(this.length-=s,h=0;h<this.length;h++)this.words[h]=this.words[h+s];else this.words[0]=0,this.length=1;var c=0;for(h=this.length-1;h>=0&&(0!==c||h>=i);h--){var l=0|this.words[h];this.words[h]=c<<26-o|l>>>o,c=l&a}return u&&0!==c&&(u.words[u.length++]=c),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},o.prototype.ishrn=function(t,e,r){return n(0===this.negative),this.iushrn(t,e,r)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26,i=1<<e;return!(this.length<=r||!(this.words[r]&i))},o.prototype.imaskn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26;if(n(0===this.negative,"imaskn works only with positive numbers"),this.length<=r)return this;if(0!==e&&r++,this.length=Math.min(r,this.length),0!==e){var i=67108863^67108863>>>e<<e;this.words[this.length-1]&=i}return this.strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return n("number"==typeof t),n(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},o.prototype.isubn=function(t){if(n("number"==typeof t),n(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,e,r){var i,o,s=t.length+r;this._expand(s);var a=0;for(i=0;i<t.length;i++){o=(0|this.words[i+r])+a;var u=(0|t.words[i])*e;a=((o-=67108863&u)>>26)-(u/67108864|0),this.words[i+r]=67108863&o}for(;i<this.length-r;i++)a=(o=(0|this.words[i+r])+a)>>26,this.words[i+r]=67108863&o;if(0===a)return this.strip();for(n(-1===a),a=0,i=0;i<this.length;i++)a=(o=-(0|this.words[i])+a)>>26,this.words[i]=67108863&o;return this.negative=1,this.strip()},o.prototype._wordDiv=function(t,e){var r=(this.length,t.length),n=this.clone(),i=t,s=0|i.words[i.length-1];0!=(r=26-this._countBits(s))&&(i=i.ushln(r),n.iushln(r),s=0|i.words[i.length-1]);var a,u=n.length-i.length;if("mod"!==e){(a=new o(null)).length=u+1,a.words=new Array(a.length);for(var h=0;h<a.length;h++)a.words[h]=0}var c=n.clone()._ishlnsubmul(i,1,u);0===c.negative&&(n=c,a&&(a.words[u]=1));for(var l=u-1;l>=0;l--){var f=67108864*(0|n.words[i.length+l])+(0|n.words[i.length+l-1]);for(f=Math.min(f/s|0,67108863),n._ishlnsubmul(i,f,l);0!==n.negative;)f--,n.negative=0,n._ishlnsubmul(i,1,l),n.isZero()||(n.negative^=1);a&&(a.words[l]=f)}return a&&a.strip(),n.strip(),"div"!==e&&0!==r&&n.iushrn(r),{div:a||null,mod:n}},o.prototype.divmod=function(t,e,r){return n(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(a=this.neg().divmod(t,e),"mod"!==e&&(i=a.div.neg()),"div"!==e&&(s=a.mod.neg(),r&&0!==s.negative&&s.iadd(t)),{div:i,mod:s}):0===this.negative&&0!==t.negative?(a=this.divmod(t.neg(),e),"mod"!==e&&(i=a.div.neg()),{div:i,mod:a.mod}):0!=(this.negative&t.negative)?(a=this.neg().divmod(t.neg(),e),"div"!==e&&(s=a.mod.neg(),r&&0!==s.negative&&s.isub(t)),{div:a.div,mod:s}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new o(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modn(t.words[0]))}:this._wordDiv(t,e);var i,s,a},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var r=0!==e.div.negative?e.mod.isub(t):e.mod,n=t.ushrn(1),i=t.andln(1),o=r.cmp(n);return o<0||1===i&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},o.prototype.modn=function(t){n(t<=67108863);for(var e=(1<<26)%t,r=0,i=this.length-1;i>=0;i--)r=(e*r+(0|this.words[i]))%t;return r},o.prototype.idivn=function(t){n(t<=67108863);for(var e=0,r=this.length-1;r>=0;r--){var i=(0|this.words[r])+67108864*e;this.words[r]=i/t|0,e=i%t}return this.strip()},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i=new o(1),s=new o(0),a=new o(0),u=new o(1),h=0;e.isEven()&&r.isEven();)e.iushrn(1),r.iushrn(1),++h;for(var c=r.clone(),l=e.clone();!e.isZero();){for(var f=0,d=1;0==(e.words[0]&d)&&f<26;++f,d<<=1);if(f>0)for(e.iushrn(f);f-- >0;)(i.isOdd()||s.isOdd())&&(i.iadd(c),s.isub(l)),i.iushrn(1),s.iushrn(1);for(var p=0,m=1;0==(r.words[0]&m)&&p<26;++p,m<<=1);if(p>0)for(r.iushrn(p);p-- >0;)(a.isOdd()||u.isOdd())&&(a.iadd(c),u.isub(l)),a.iushrn(1),u.iushrn(1);e.cmp(r)>=0?(e.isub(r),i.isub(a),s.isub(u)):(r.isub(e),a.isub(i),u.isub(s))}return{a,b:u,gcd:r.iushln(h)}},o.prototype._invmp=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i,s=new o(1),a=new o(0),u=r.clone();e.cmpn(1)>0&&r.cmpn(1)>0;){for(var h=0,c=1;0==(e.words[0]&c)&&h<26;++h,c<<=1);if(h>0)for(e.iushrn(h);h-- >0;)s.isOdd()&&s.iadd(u),s.iushrn(1);for(var l=0,f=1;0==(r.words[0]&f)&&l<26;++l,f<<=1);if(l>0)for(r.iushrn(l);l-- >0;)a.isOdd()&&a.iadd(u),a.iushrn(1);e.cmp(r)>=0?(e.isub(r),s.isub(a)):(r.isub(e),a.isub(s))}return(i=0===e.cmpn(1)?s:a).cmpn(0)<0&&i.iadd(t),i},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),r=t.clone();e.negative=0,r.negative=0;for(var n=0;e.isEven()&&r.isEven();n++)e.iushrn(1),r.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;r.isEven();)r.iushrn(1);var i=e.cmp(r);if(i<0){var o=e;e=r,r=o}else if(0===i||0===r.cmpn(1))break;e.isub(r)}return r.iushln(n)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){n("number"==typeof t);var e=t%26,r=(t-e)/26,i=1<<e;if(this.length<=r)return this._expand(r+1),this.words[r]|=i,this;for(var o=i,s=r;0!==o&&s<this.length;s++){var a=0|this.words[s];o=(a+=o)>>>26,a&=67108863,this.words[s]=a}return 0!==o&&(this.words[s]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var e,r=t<0;if(0!==this.negative&&!r)return-1;if(0===this.negative&&r)return 1;if(this.strip(),this.length>1)e=1;else{r&&(t=-t),n(t<=67108863,"Number is too big");var i=0|this.words[0];e=i===t?0:i<t?-1:1}return 0!==this.negative?0|-e:e},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,r=this.length-1;r>=0;r--){var n=0|this.words[r],i=0|t.words[r];if(n!==i){n<i?e=-1:n>i&&(e=1);break}}return e},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new M(t)},o.prototype.toRed=function(t){return n(!this.red,"Already a number in reduction context"),n(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return n(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return n(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return n(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return n(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return n(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return n(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return n(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return n(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return n(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return n(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return n(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return n(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return n(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var g={k256:null,p224:null,p192:null,p25519:null};function v(t,e){this.name=t,this.p=new o(e,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function y(){v.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function w(){v.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function _(){v.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function b(){v.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function M(t){if("string"==typeof t){var e=o._prime(t);this.m=e.p,this.prime=e}else n(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function x(t){M.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}v.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},v.prototype.ireduce=function(t){var e,r=t;do{this.split(r,this.tmp),e=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(e>this.n);var n=e<this.n?-1:r.ucmp(this.p);return 0===n?(r.words[0]=0,r.length=1):n>0?r.isub(this.p):r.strip(),r},v.prototype.split=function(t,e){t.iushrn(this.n,0,e)},v.prototype.imulK=function(t){return t.imul(this.k)},i(y,v),y.prototype.split=function(t,e){for(var r=4194303,n=Math.min(t.length,9),i=0;i<n;i++)e.words[i]=t.words[i];if(e.length=n,t.length<=9)return t.words[0]=0,void(t.length=1);var o=t.words[9];for(e.words[e.length++]=o&r,i=10;i<t.length;i++){var s=0|t.words[i];t.words[i-10]=(s&r)<<4|o>>>22,o=s}o>>>=22,t.words[i-10]=o,0===o&&t.length>10?t.length-=10:t.length-=9},y.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,r=0;r<t.length;r++){var n=0|t.words[r];e+=977*n,t.words[r]=67108863&e,e=64*n+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},i(w,v),i(_,v),i(b,v),b.prototype.imulK=function(t){for(var e=0,r=0;r<t.length;r++){var n=19*(0|t.words[r])+e,i=67108863&n;n>>>=26,t.words[r]=i,e=n}return 0!==e&&(t.words[t.length++]=e),t},o._prime=function(t){if(g[t])return g[t];var e;if("k256"===t)e=new y;else if("p224"===t)e=new w;else if("p192"===t)e=new _;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new b}return g[t]=e,e},M.prototype._verify1=function(t){n(0===t.negative,"red works only with positives"),n(t.red,"red works only with red numbers")},M.prototype._verify2=function(t,e){n(0==(t.negative|e.negative),"red works only with positives"),n(t.red&&t.red===e.red,"red works only with red numbers")},M.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},M.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},M.prototype.add=function(t,e){this._verify2(t,e);var r=t.add(e);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},M.prototype.iadd=function(t,e){this._verify2(t,e);var r=t.iadd(e);return r.cmp(this.m)>=0&&r.isub(this.m),r},M.prototype.sub=function(t,e){this._verify2(t,e);var r=t.sub(e);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},M.prototype.isub=function(t,e){this._verify2(t,e);var r=t.isub(e);return r.cmpn(0)<0&&r.iadd(this.m),r},M.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},M.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},M.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},M.prototype.isqr=function(t){return this.imul(t,t.clone())},M.prototype.sqr=function(t){return this.mul(t,t)},M.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(n(e%2==1),3===e){var r=this.m.add(new o(1)).iushrn(2);return this.pow(t,r)}for(var i=this.m.subn(1),s=0;!i.isZero()&&0===i.andln(1);)s++,i.iushrn(1);n(!i.isZero());var a=new o(1).toRed(this),u=a.redNeg(),h=this.m.subn(1).iushrn(1),c=this.m.bitLength();for(c=new o(2*c*c).toRed(this);0!==this.pow(c,h).cmp(u);)c.redIAdd(u);for(var l=this.pow(c,i),f=this.pow(t,i.addn(1).iushrn(1)),d=this.pow(t,i),p=s;0!==d.cmp(a);){for(var m=d,g=0;0!==m.cmp(a);g++)m=m.redSqr();n(g<p);var v=this.pow(l,new o(1).iushln(p-g-1));f=f.redMul(v),l=v.redSqr(),d=d.redMul(l),p=g}return f},M.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},M.prototype.pow=function(t,e){if(e.isZero())return new o(1).toRed(this);if(0===e.cmpn(1))return t.clone();var r=new Array(16);r[0]=new o(1).toRed(this),r[1]=t;for(var n=2;n<r.length;n++)r[n]=this.mul(r[n-1],t);var i=r[0],s=0,a=0,u=e.bitLength()%26;for(0===u&&(u=26),n=e.length-1;n>=0;n--){for(var h=e.words[n],c=u-1;c>=0;c--){var l=h>>c&1;i!==r[0]&&(i=this.sqr(i)),0!==l||0!==s?(s<<=1,s|=l,(4==++a||0===n&&0===c)&&(i=this.mul(i,r[s]),a=0,s=0)):a=0}u=26}return i},M.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},M.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},o.mont=function(t){return new x(t)},i(x,M),x.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},x.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},x.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},x.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new o(0)._forceRed(this);var r=t.mul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),s=i;return i.cmp(this.m)>=0?s=i.isub(this.m):i.cmpn(0)<0&&(s=i.iadd(this.m)),s._forceRed(this)},x.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t=r.nmd(t),this)},72485:(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>et});var n={};r.r(n),r.d(n,{decrypt:()=>K,encrypt:()=>q,generateKey:()=>O,verifyHmac:()=>U});var i=r(55522);const o=["session_request","session_update","exchange_key","connect","disconnect","display_uri","modal_closed","transport_open","transport_close","transport_error"],s=["eth_sendTransaction","eth_signTransaction","eth_sign","eth_signTypedData","eth_signTypedData_v1","eth_signTypedData_v2","eth_signTypedData_v3","eth_signTypedData_v4","personal_sign"],a={1:"mainnet",3:"ropsten",4:"rinkeby",5:"goerli",42:"kovan"};var u=r(11460),h=r.n(u),c=r(23087);function l(t){return c.arrayToBuffer(new Uint8Array(t))}function f(t,e){const r=c.removeHexPrefix(c.sanitizeHex(new(h())(t).toString(16)));return e?r:c.addHexPrefix(r)}var d=r(91094),p=r(1468);function m(t){return c.sanitizeHex(t)}const g=function(){return Date.now()*Math.pow(10,3)+Math.floor(Math.random()*Math.pow(10,3))};function v(){return((t,e)=>{for(e=t="";t++<36;e+=51*t&52?(15^t?8^Math.random()*(20^t?16:4):4).toString(16):"-");return e})()}function y(t,e){return c.isHexString(t,e)}function w(t){return void 0!==t.result}function _(t){return void 0!==t.error}function b(t){return void 0!==t.event}function M(t){var e,r;return(r=t)&&r.length&&!y(t[0])&&(t[0]=(e=t[0],c.utf8ToHex(e,!0))),t}function x(t){if(void 0!==t.type&&"0"!==t.type)return t;if(void 0===t.from||!(e=t.from)||"0x"!==e.toLowerCase().substring(0,2)||!/^(0x)?[0-9a-f]{40}$/i.test(e)||!/^(0x)?[0-9a-f]{40}$/.test(e)&&!/^(0x)?[0-9A-F]{40}$/.test(e)&&e!==function(t){t=(0,c.removeHexPrefix)(t.toLowerCase());const e=(0,c.removeHexPrefix)((0,d.keccak_256)((r=t,c.utf8ToBuffer(r))));var r;let n="";for(let r=0;r<t.length;r++)parseInt(e[r],16)>7?n+=t[r].toUpperCase():n+=t[r];return(0,c.addHexPrefix)(n)}(e))throw new Error("Transaction object must include a valid 'from' value.");var e;function r(t){let e=t;var r;return("number"==typeof t||"string"==typeof t&&!function(t){return""===t||"string"==typeof t&&""===t.trim()}(t))&&(y(t)?"string"==typeof t&&(e=m(t)):e=f(t)),"string"==typeof e&&(r=e,e=c.removeHexLeadingZeros(c.addHexPrefix(r))),e}const n={from:m(t.from),to:void 0===t.to?"":m(t.to),gasPrice:void 0===t.gasPrice?"":r(t.gasPrice),gas:void 0===t.gas?void 0===t.gasLimit?"":r(t.gasLimit):r(t.gas),value:void 0===t.value?"":r(t.value),nonce:void 0===t.nonce?"":r(t.nonce),data:void 0===t.data?"":m(t.data)||"0x"},i=["gasPrice","gas","value","nonce"];return Object.keys(n).forEach((t=>{!n[t].trim().length&&i.includes(t)&&delete n[t]})),n}var k=r(17563);function E(t){return k.parse(t)}const A=void 0!==r.g.WebSocket?r.g.WebSocket:r(68007),S="Session currently connected",T="Session currently disconnected",C="JSON RPC response format is invalid",B="User close QRCode Modal",R="abcdefghijklmnopqrstuvwxyz0123456789".split("").map((t=>`https://${t}.bridge.walletconnect.org`));const I="AES-CBC",P="HMAC";async function L(t,e="AES-CBC"){return p.getSubtleCrypto().importKey("raw",t,function(t){return t===I?{length:256,name:I}:{hash:{name:"SHA-256"},name:P}}(e),!0,function(t){return t===I?["encrypt","decrypt"]:["sign","verify"]}(e))}async function N(t,e){return await async function(t,e){const r=p.getSubtleCrypto(),n=await L(t,P),i=await r.sign({length:256,name:P},n,e);return new Uint8Array(i)}(t,e)}async function O(t){const e=function(t){return p.getBrowerCrypto().getRandomValues(new Uint8Array(t))}((t||256)/8);var r;return r=c.arrayToBuffer(e),c.bufferToArray(r).buffer}async function U(t,e){const r=c.hexToArray(t.data),n=c.hexToArray(t.iv),i=c.hexToArray(t.hmac),o=c.arrayToHex(i,!1),s=c.concatArrays(r,n),a=await N(e,s),u=c.arrayToHex(a,!1);return c.removeHexPrefix(o)===c.removeHexPrefix(u)}async function q(t,e,r){const n=c.bufferToArray(l(e)),i=r||await O(128),o=c.bufferToArray(l(i)),s=c.arrayToHex(o,!1),a=JSON.stringify(t),u=c.utf8ToArray(a),h=await function(t,e,r){return async function(t,e,r){const n=p.getSubtleCrypto(),i=await L(e,I),o=await n.encrypt({iv:t,name:I},i,r);return new Uint8Array(o)}(t,e,r)}(o,n,u),f=c.arrayToHex(h,!1),d=c.concatArrays(h,o),m=await N(n,d);return{data:f,hmac:c.arrayToHex(m,!1),iv:s}}async function K(t,e){const r=c.bufferToArray(l(e));if(!r)throw new Error("Missing key: required for decryption");if(!await U(t,r))return null;const n=c.hexToArray(t.data),i=c.hexToArray(t.iv),o=await function(t,e,r){return async function(t,e,r){const n=p.getSubtleCrypto(),i=await L(e,I),o=await n.decrypt({iv:t,name:I},i,r);return new Uint8Array(o)}(t,e,r)}(i,r,n),s=c.arrayToUtf8(o);let a;try{a=JSON.parse(s)}catch(t){return null}return a}var H=r(4337),j=r.n(H),D=r(26729),z=r.n(D),W=r(59536);const F=(0,i.getFromWindow)("XMLHttpRequest")||W.XMLHttpRequest;class Z extends(z()){constructor(t){super(),this.url=t}formatError(t,e,r=-1){return{error:{message:e,code:r},id:t.id,jsonrpc:t.jsonrpc}}send(t,e){return new Promise((r=>{if("eth_subscribe"===t.method){const e=this.formatError(t,"Subscriptions are not supported by this HTTP endpoint");return this.emit("error",e),r(e)}const n=new F;let i=!1;const o=(o,s)=>{if(!i)if(n.abort(),i=!0,e)e(o,s);else{const{id:e,jsonrpc:n}=t,i=o?{id:e,jsonrpc:n,error:{message:o.message,code:o.code}}:{id:e,jsonrpc:n,result:s};this.emit("payload",i),r(i)}};n.open("POST",this.url,!0),n.setRequestHeader("Content-Type","application/json"),n.timeout=6e4,n.onerror=o,n.ontimeout=o,n.onreadystatechange=()=>{if(4===n.readyState)try{const t=JSON.parse(n.responseText);o(t.error,t.result)}catch(t){o(t)}},n.send(JSON.stringify(t))}))}}const V=Z,$=r(50356),G=r(47467),Y=r(96185),J=r(13730),Q=r(46319),X=r(40803),tt=r(90522),et=class extends ${constructor(t){if(super({pollingInterval:t.pollingInterval||8e3}),this.bridge="https://bridge.walletconnect.org",this.qrcode=!0,this.qrcodeModal=j(),this.qrcodeModalOptions=void 0,this.rpc=null,this.infuraId="",this.http=null,this.isConnecting=!1,this.connected=!1,this.connectCallbacks=[],this.accounts=[],this.chainId=1,this.rpcUrl="",this.enable=async()=>{const t=await this.getWalletConnector();if(t)return this.start(),this.subscribeWalletConnector(),t.accounts;throw new Error("Failed to connect to WalleConnect")},this.request=async t=>this.send(t),this.send=async(t,e)=>{if("string"==typeof t){const r=t;let n=e;return"personal_sign"===r&&(n=M(n)),this.sendAsyncPromise(r,n)}if("personal_sign"===(t=Object.assign({id:g(),jsonrpc:"2.0"},t)).method&&(t.params=M(t.params)),!e)return this.sendAsyncPromise(t.method,t.params);this.sendAsync(t,e)},this.onConnect=t=>{this.connectCallbacks.push(t)},this.triggerConnect=t=>{this.connectCallbacks&&this.connectCallbacks.length&&this.connectCallbacks.forEach((e=>e(t)))},this.bridge=t.connector?t.connector.bridge:t.bridge||"https://bridge.walletconnect.org",this.qrcode=void 0===t.qrcode||!1!==t.qrcode,this.qrcodeModal=t.qrcodeModal||this.qrcodeModal,this.qrcodeModalOptions=t.qrcodeModalOptions,this.wc=t.connector||new class extends class{constructor(t){if(this.protocol="wc",this.version=1,this._bridge="",this._key=null,this._clientId="",this._clientMeta=null,this._peerId="",this._peerMeta=null,this._handshakeId=0,this._handshakeTopic="",this._connected=!1,this._accounts=[],this._chainId=0,this._networkId=0,this._rpcUrl="",this._eventManager=new class{constructor(){this._eventEmitters=[]}subscribe(t){this._eventEmitters.push(t)}unsubscribe(t){this._eventEmitters=this._eventEmitters.filter((e=>e.event!==t))}trigger(t){let e,r=[];e=void 0!==t.method?t.method:w(t)||_(t)?`response:${t.id}`:b(t)?t.event:"",e&&(r=this._eventEmitters.filter((t=>t.event===e))),r&&r.length||function(t){return o.includes(t)||t.startsWith("wc_")}(e)||b(e)||(r=this._eventEmitters.filter((t=>"call_request"===t.event))),r.forEach((e=>{if(_(t)){const r=new Error(t.error.message);e.callback(r,null)}else e.callback(null,t)}))}},this._clientMeta=(0,i.getClientMeta)()||t.connectorOpts.clientMeta||null,this._cryptoLib=t.cryptoLib,this._sessionStorage=t.sessionStorage||new class{constructor(t="walletconnect"){this.storageId=t}getSession(){let t=null;const e=(0,i.getLocal)(this.storageId);return e&&void 0!==e.bridge&&(t=e),t}setSession(t){return(0,i.setLocal)(this.storageId,t),t}removeSession(){(0,i.removeLocal)(this.storageId)}}(t.connectorOpts.storageId),this._qrcodeModal=t.connectorOpts.qrcodeModal,this._qrcodeModalOptions=t.connectorOpts.qrcodeModalOptions,this._signingMethods=[...s,...t.connectorOpts.signingMethods||[]],!t.connectorOpts.bridge&&!t.connectorOpts.uri&&!t.connectorOpts.session)throw new Error("Missing one of the required parameters: bridge / uri / session");var e;t.connectorOpts.bridge&&(this.bridge=function(t){return"walletconnect.org"===function(t){return function(t){let e=t.indexOf("//")>-1?t.split("/")[2]:t.split("/")[0];return e=e.split(":")[0],e=e.split("?")[0],e}(t).split(".").slice(-2).join(".")}(t)}(e=t.connectorOpts.bridge)?R[Math.floor(Math.random()*R.length)]:e),t.connectorOpts.uri&&(this.uri=t.connectorOpts.uri);const r=t.connectorOpts.session||this._getStorageSession();r&&(this.session=r),this.handshakeId&&this._subscribeToSessionResponse(this.handshakeId,"Session request rejected"),this._transport=t.transport||new class{constructor(t){if(this.opts=t,this._queue=[],this._events=[],this._subscriptions=[],this._protocol=t.protocol,this._version=t.version,this._url="",this._netMonitor=null,this._socket=null,this._nextSocket=null,this._subscriptions=t.subscriptions||[],this._netMonitor=t.netMonitor||new class{constructor(){this._eventEmitters=[],"undefined"!=typeof window&&void 0!==window.addEventListener&&(window.addEventListener("online",(()=>this.trigger("online"))),window.addEventListener("offline",(()=>this.trigger("offline"))))}on(t,e){this._eventEmitters.push({event:t,callback:e})}trigger(t){let e=[];t&&(e=this._eventEmitters.filter((e=>e.event===t))),e.forEach((t=>{t.callback()}))}},!t.url||"string"!=typeof t.url)throw new Error("Missing or invalid WebSocket url");this._url=t.url,this._netMonitor.on("online",(()=>this._socketCreate()))}set readyState(t){}get readyState(){return this._socket?this._socket.readyState:-1}set connecting(t){}get connecting(){return 0===this.readyState}set connected(t){}get connected(){return 1===this.readyState}set closing(t){}get closing(){return 2===this.readyState}set closed(t){}get closed(){return 3===this.readyState}open(){this._socketCreate()}close(){this._socketClose()}send(t,e,r){if(!e||"string"!=typeof e)throw new Error("Missing or invalid topic field");this._socketSend({topic:e,type:"pub",payload:t,silent:!!r})}subscribe(t){this._socketSend({topic:t,type:"sub",payload:"",silent:!0})}on(t,e){this._events.push({event:t,callback:e})}_socketCreate(){if(this._nextSocket)return;const t=function(t,e,r){var n,o;const s=(t.startsWith("https")?t.replace("https","wss"):t.startsWith("http")?t.replace("http","ws"):t).split("?"),a=(0,i.isBrowser)()?{protocol:e,version:r,env:"browser",host:(null===(n=(0,i.getLocation)())||void 0===n?void 0:n.host)||""}:{protocol:e,version:r,env:(null===(o=(0,i.detectEnv)())||void 0===o?void 0:o.name)||""},u=function(t,e){let r=E(t);return r=Object.assign(Object.assign({},r),e),function(t){return k.stringify(t)}(r)}(function(t){const e=-1!==t.indexOf("?")?t.indexOf("?"):void 0;return void 0!==e?t.substr(e):""}(s[1]||""),a);return s[0]+"?"+u}(this._url,this._protocol,this._version);if(this._nextSocket=new A(t),!this._nextSocket)throw new Error("Failed to create socket");this._nextSocket.onmessage=t=>this._socketReceive(t),this._nextSocket.onopen=()=>this._socketOpen(),this._nextSocket.onerror=t=>this._socketError(t),this._nextSocket.onclose=()=>{setTimeout((()=>{this._nextSocket=null,this._socketCreate()}),1e3)}}_socketOpen(){this._socketClose(),this._socket=this._nextSocket,this._nextSocket=null,this._queueSubscriptions(),this._pushQueue()}_socketClose(){this._socket&&(this._socket.onclose=()=>{},this._socket.close())}_socketSend(t){const e=JSON.stringify(t);this._socket&&1===this._socket.readyState?this._socket.send(e):(this._setToQueue(t),this._socketCreate())}async _socketReceive(t){let e;try{e=JSON.parse(t.data)}catch(t){return}if(this._socketSend({topic:e.topic,type:"ack",payload:"",silent:!0}),this._socket&&1===this._socket.readyState){const t=this._events.filter((t=>"message"===t.event));t&&t.length&&t.forEach((t=>t.callback(e)))}}_socketError(t){const e=this._events.filter((t=>"error"===t.event));e&&e.length&&e.forEach((e=>e.callback(t)))}_queueSubscriptions(){this._subscriptions.forEach((t=>this._queue.push({topic:t,type:"sub",payload:"",silent:!0}))),this._subscriptions=this.opts.subscriptions||[]}_setToQueue(t){this._queue.push(t)}_pushQueue(){this._queue.forEach((t=>this._socketSend(t))),this._queue=[]}}({protocol:this.protocol,version:this.version,url:this.bridge,subscriptions:[this.clientId]}),this._subscribeToInternalEvents(),this._initTransport(),t.connectorOpts.uri&&this._subscribeToSessionRequest(),t.pushServerOpts&&this._registerPushServer(t.pushServerOpts)}set bridge(t){t&&(this._bridge=t)}get bridge(){return this._bridge}set key(t){if(!t)return;const e=(r=t,c.hexToArray(r).buffer);var r;this._key=e}get key(){return this._key?(t=this._key,c.arrayToHex(new Uint8Array(t),!1)):"";var t}set clientId(t){t&&(this._clientId=t)}get clientId(){let t=this._clientId;return t||(t=this._clientId=v()),this._clientId}set peerId(t){t&&(this._peerId=t)}get peerId(){return this._peerId}set clientMeta(t){}get clientMeta(){let t=this._clientMeta;return t||(t=this._clientMeta=(0,i.getClientMeta)()),t}set peerMeta(t){this._peerMeta=t}get peerMeta(){return this._peerMeta}set handshakeTopic(t){t&&(this._handshakeTopic=t)}get handshakeTopic(){return this._handshakeTopic}set handshakeId(t){t&&(this._handshakeId=t)}get handshakeId(){return this._handshakeId}get uri(){return this._formatUri()}set uri(t){if(!t)return;const{handshakeTopic:e,bridge:r,key:n}=this._parseUri(t);this.handshakeTopic=e,this.bridge=r,this.key=n}set chainId(t){this._chainId=t}get chainId(){return this._chainId}set networkId(t){this._networkId=t}get networkId(){return this._networkId}set accounts(t){this._accounts=t}get accounts(){return this._accounts}set rpcUrl(t){this._rpcUrl=t}get rpcUrl(){return this._rpcUrl}set connected(t){}get connected(){return this._connected}set pending(t){}get pending(){return!!this._handshakeTopic}get session(){return{connected:this.connected,accounts:this.accounts,chainId:this.chainId,bridge:this.bridge,key:this.key,clientId:this.clientId,clientMeta:this.clientMeta,peerId:this.peerId,peerMeta:this.peerMeta,handshakeId:this.handshakeId,handshakeTopic:this.handshakeTopic}}set session(t){t&&(this._connected=t.connected,this.accounts=t.accounts,this.chainId=t.chainId,this.bridge=t.bridge,this.key=t.key,this.clientId=t.clientId,this.clientMeta=t.clientMeta,this.peerId=t.peerId,this.peerMeta=t.peerMeta,this.handshakeId=t.handshakeId,this.handshakeTopic=t.handshakeTopic)}on(t,e){const r={event:t,callback:e};this._eventManager.subscribe(r)}off(t){this._eventManager.unsubscribe(t)}async createInstantRequest(t){this._key=await this._generateKey();const e=this._formatRequest({method:"wc_instantRequest",params:[{peerId:this.clientId,peerMeta:this.clientMeta,request:this._formatRequest(t)}]});this.handshakeId=e.id,this.handshakeTopic=v(),this._eventManager.trigger({event:"display_uri",params:[this.uri]}),this.on("modal_closed",(()=>{throw new Error(B)}));const r=()=>{this.killSession()};try{const t=await this._sendCallRequest(e);return t&&r(),t}catch(t){throw r(),t}}async connect(t){if(!this._qrcodeModal)throw new Error("QRCode Modal not provided");return this.connected?{chainId:this.chainId,accounts:this.accounts}:(await this.createSession(t),new Promise((async(t,e)=>{this.on("modal_closed",(()=>e(new Error(B)))),this.on("connect",((r,n)=>{if(r)return e(r);t(n.params[0])}))})))}async createSession(t){if(this._connected)throw new Error(S);if(this.pending)return;this._key=await this._generateKey();const e=this._formatRequest({method:"wc_sessionRequest",params:[{peerId:this.clientId,peerMeta:this.clientMeta,chainId:t&&t.chainId?t.chainId:null}]});this.handshakeId=e.id,this.handshakeTopic=v(),this._sendSessionRequest(e,"Session update rejected",{topic:this.handshakeTopic}),this._eventManager.trigger({event:"display_uri",params:[this.uri]})}approveSession(t){if(this._connected)throw new Error(S);this.chainId=t.chainId,this.accounts=t.accounts,this.networkId=t.networkId||0,this.rpcUrl=t.rpcUrl||"";const e={approved:!0,chainId:this.chainId,networkId:this.networkId,accounts:this.accounts,rpcUrl:this.rpcUrl,peerId:this.clientId,peerMeta:this.clientMeta},r={id:this.handshakeId,jsonrpc:"2.0",result:e};this._sendResponse(r),this._connected=!0,this._setStorageSession(),this._eventManager.trigger({event:"connect",params:[{peerId:this.peerId,peerMeta:this.peerMeta,chainId:this.chainId,accounts:this.accounts}]})}rejectSession(t){if(this._connected)throw new Error(S);const e=t&&t.message?t.message:"Session Rejected",r=this._formatResponse({id:this.handshakeId,error:{message:e}});this._sendResponse(r),this._connected=!1,this._eventManager.trigger({event:"disconnect",params:[{message:e}]}),this._removeStorageSession()}updateSession(t){if(!this._connected)throw new Error(T);this.chainId=t.chainId,this.accounts=t.accounts,this.networkId=t.networkId||0,this.rpcUrl=t.rpcUrl||"";const e={approved:!0,chainId:this.chainId,networkId:this.networkId,accounts:this.accounts,rpcUrl:this.rpcUrl},r=this._formatRequest({method:"wc_sessionUpdate",params:[e]});this._sendSessionRequest(r,"Session update rejected"),this._eventManager.trigger({event:"session_update",params:[{chainId:this.chainId,accounts:this.accounts}]}),this._manageStorageSession()}async killSession(t){const e=t?t.message:"Session Disconnected",r=this._formatRequest({method:"wc_sessionUpdate",params:[{approved:!1,chainId:null,networkId:null,accounts:null}]});await this._sendRequest(r),this._handleSessionDisconnect(e)}async sendTransaction(t){if(!this._connected)throw new Error(T);const e=x(t),r=this._formatRequest({method:"eth_sendTransaction",params:[e]});return await this._sendCallRequest(r)}async signTransaction(t){if(!this._connected)throw new Error(T);const e=x(t),r=this._formatRequest({method:"eth_signTransaction",params:[e]});return await this._sendCallRequest(r)}async signMessage(t){if(!this._connected)throw new Error(T);const e=this._formatRequest({method:"eth_sign",params:t});return await this._sendCallRequest(e)}async signPersonalMessage(t){if(!this._connected)throw new Error(T);t=M(t);const e=this._formatRequest({method:"personal_sign",params:t});return await this._sendCallRequest(e)}async signTypedData(t){if(!this._connected)throw new Error(T);const e=this._formatRequest({method:"eth_signTypedData",params:t});return await this._sendCallRequest(e)}async updateChain(t){if(!this._connected)throw new Error("Session currently disconnected");const e=this._formatRequest({method:"wallet_updateChain",params:[t]});return await this._sendCallRequest(e)}unsafeSend(t,e){return this._sendRequest(t,e),this._eventManager.trigger({event:"call_request_sent",params:[{request:t,options:e}]}),new Promise(((e,r)=>{this._subscribeToResponse(t.id,((t,n)=>{if(t)r(t);else{if(!n)throw new Error("Missing JSON RPC response");e(n)}}))}))}async sendCustomRequest(t,e){if(!this._connected)throw new Error(T);switch(t.method){case"eth_accounts":return this.accounts;case"eth_chainId":return f(this.chainId);case"eth_sendTransaction":case"eth_signTransaction":t.params&&(t.params[0]=x(t.params[0]));break;case"personal_sign":t.params&&(t.params=M(t.params))}const r=this._formatRequest(t);return await this._sendCallRequest(r,e)}approveRequest(t){if(!w(t))throw new Error('JSON-RPC success response must include "result" field');{const e=this._formatResponse(t);this._sendResponse(e)}}rejectRequest(t){if(!_(t))throw new Error('JSON-RPC error response must include "error" field');{const e=this._formatResponse(t);this._sendResponse(e)}}transportClose(){this._transport.close()}async _sendRequest(t,e){const r=this._formatRequest(t),n=await this._encrypt(r),i=void 0!==(null==e?void 0:e.topic)?e.topic:this.peerId,o=JSON.stringify(n),a=void 0!==(null==e?void 0:e.forcePushNotification)?!e.forcePushNotification:function(t){return!!t.method.startsWith("wc_")||!s.includes(t.method)}(r);this._transport.send(o,i,a)}async _sendResponse(t){const e=await this._encrypt(t),r=this.peerId,n=JSON.stringify(e);this._transport.send(n,r,!0)}async _sendSessionRequest(t,e,r){this._sendRequest(t,r),this._subscribeToSessionResponse(t.id,e)}_sendCallRequest(t,e){return this._sendRequest(t,e),this._eventManager.trigger({event:"call_request_sent",params:[{request:t,options:e}]}),this._subscribeToCallResponse(t.id)}_formatRequest(t){if(void 0===t.method)throw new Error('JSON RPC request must have valid "method" value');return{id:void 0===t.id?g():t.id,jsonrpc:"2.0",method:t.method,params:void 0===t.params?[]:t.params}}_formatResponse(t){if(void 0===t.id)throw new Error('JSON RPC request must have valid "id" value');const e={id:t.id,jsonrpc:"2.0"};if(_(t)){const r=function(t){const e=t.message||"Failed or Rejected Request";let r=-32e3;if(t&&!t.code)switch(e){case"Parse error":r=-32700;break;case"Invalid request":r=-32600;break;case"Method not found":r=-32601;break;case"Invalid params":r=-32602;break;case"Internal error":r=-32603;break;default:r=-32e3}return{code:r,message:e}}(t.error);return Object.assign(Object.assign(Object.assign({},e),t),{error:r})}if(w(t))return Object.assign(Object.assign({},e),t);throw new Error(C)}_handleSessionDisconnect(t){const e=t||"Session Disconnected";this._connected||(this._qrcodeModal&&this._qrcodeModal.close(),(0,i.removeLocal)(i.mobileLinkChoiceKey)),this._connected&&(this._connected=!1),this._handshakeId&&(this._handshakeId=0),this._handshakeTopic&&(this._handshakeTopic=""),this._eventManager.trigger({event:"disconnect",params:[{message:e}]}),this._removeStorageSession(),this.transportClose()}_handleSessionResponse(t,e){e&&e.approved?(this._connected?(e.chainId&&(this.chainId=e.chainId),e.accounts&&(this.accounts=e.accounts),this._eventManager.trigger({event:"session_update",params:[{chainId:this.chainId,accounts:this.accounts}]})):(this._connected=!0,e.chainId&&(this.chainId=e.chainId),e.accounts&&(this.accounts=e.accounts),e.peerId&&!this.peerId&&(this.peerId=e.peerId),e.peerMeta&&!this.peerMeta&&(this.peerMeta=e.peerMeta),this._eventManager.trigger({event:"connect",params:[{peerId:this.peerId,peerMeta:this.peerMeta,chainId:this.chainId,accounts:this.accounts}]})),this._manageStorageSession()):this._handleSessionDisconnect(t)}async _handleIncomingMessages(t){if(![this.clientId,this.handshakeTopic].includes(t.topic))return;let e;try{e=JSON.parse(t.payload)}catch(t){return}const r=await this._decrypt(e);r&&this._eventManager.trigger(r)}_subscribeToSessionRequest(){this._transport.subscribe(this.handshakeTopic)}_subscribeToResponse(t,e){this.on(`response:${t}`,e)}_subscribeToSessionResponse(t,e){this._subscribeToResponse(t,((t,r)=>{t?this._handleSessionResponse(t.message):r.result?this._handleSessionResponse(e,r.result):r.error&&r.error.message?this._handleSessionResponse(r.error.message):this._handleSessionResponse(e)}))}_subscribeToCallResponse(t){return new Promise(((e,r)=>{this._subscribeToResponse(t,((t,n)=>{t?r(t):n.result?e(n.result):n.error&&n.error.message?r(new Error(n.error.message)):r(new Error(C))}))}))}_subscribeToInternalEvents(){this.on("display_uri",(()=>{this._qrcodeModal&&this._qrcodeModal.open(this.uri,(()=>{this._eventManager.trigger({event:"modal_closed",params:[]})}),this._qrcodeModalOptions)})),this.on("connect",(()=>{this._qrcodeModal&&this._qrcodeModal.close()})),this.on("call_request_sent",((t,e)=>{const{request:r}=e.params[0];if((0,i.isMobile)()&&this._signingMethods.includes(r.method)){const t=(0,i.getLocal)(i.mobileLinkChoiceKey);t&&(window.location.href=t.href)}})),this.on("wc_sessionRequest",((t,e)=>{t&&this._eventManager.trigger({event:"error",params:[{code:"SESSION_REQUEST_ERROR",message:t.toString()}]}),this.handshakeId=e.id,this.peerId=e.params[0].peerId,this.peerMeta=e.params[0].peerMeta;const r=Object.assign(Object.assign({},e),{method:"session_request"});this._eventManager.trigger(r)})),this.on("wc_sessionUpdate",((t,e)=>{t&&this._handleSessionResponse(t.message),this._handleSessionResponse("Session disconnected",e.params[0])}))}_initTransport(){this._transport.on("message",(t=>this._handleIncomingMessages(t))),this._transport.on("open",(()=>this._eventManager.trigger({event:"transport_open",params:[]}))),this._transport.on("close",(()=>this._eventManager.trigger({event:"transport_close",params:[]}))),this._transport.on("error",(()=>this._eventManager.trigger({event:"transport_error",params:["Websocket connection failed"]}))),this._transport.open()}_formatUri(){return`${this.protocol}:${this.handshakeTopic}@${this.version}?bridge=${encodeURIComponent(this.bridge)}&key=${this.key}`}_parseUri(t){const e=function(t){const e=t.indexOf(":"),r=-1!==t.indexOf("?")?t.indexOf("?"):void 0,n=t.substring(0,e),i=function(t){const e=t.split("@");return{handshakeTopic:e[0],version:parseInt(e[1],10)}}(t.substring(e+1,r)),o=function(t){const e=E(t);return{key:e.key||"",bridge:e.bridge||""}}(void 0!==r?t.substr(r):"");return Object.assign(Object.assign({protocol:n},i),o)}(t);if(e.protocol===this.protocol){if(!e.handshakeTopic)throw Error("Invalid or missing handshakeTopic parameter value");const t=e.handshakeTopic;if(!e.bridge)throw Error("Invalid or missing bridge url parameter value");const r=decodeURIComponent(e.bridge);if(!e.key)throw Error("Invalid or missing key parameter value");return{handshakeTopic:t,bridge:r,key:e.key}}throw new Error("URI format is invalid")}async _generateKey(){return this._cryptoLib?await this._cryptoLib.generateKey():null}async _encrypt(t){const e=this._key;return this._cryptoLib&&e?await this._cryptoLib.encrypt(t,e):null}async _decrypt(t){const e=this._key;return this._cryptoLib&&e?await this._cryptoLib.decrypt(t,e):null}_getStorageSession(){let t=null;return this._sessionStorage&&(t=this._sessionStorage.getSession()),t}_setStorageSession(){this._sessionStorage&&this._sessionStorage.setSession(this.session)}_removeStorageSession(){this._sessionStorage&&this._sessionStorage.removeSession()}_manageStorageSession(){this._connected?this._setStorageSession():this._removeStorageSession()}_registerPushServer(t){if(!t.url||"string"!=typeof t.url)throw Error("Invalid or missing pushServerOpts.url parameter value");if(!t.type||"string"!=typeof t.type)throw Error("Invalid or missing pushServerOpts.type parameter value");if(!t.token||"string"!=typeof t.token)throw Error("Invalid or missing pushServerOpts.token parameter value");const e={bridge:this.bridge,topic:this.clientId,type:t.type,token:t.token,peerName:"",language:t.language||""};this.on("connect",(async(r,n)=>{if(r)throw r;if(t.peerMeta){const t=n.params[0].peerMeta.name;e.peerName=t}try{const r=await fetch(`${t.url}/new`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(e)});if(!(await r.json()).success)throw Error("Failed to register in Push Server")}catch(r){throw Error("Failed to register in Push Server")}}))}}{constructor(t,e){super({cryptoLib:n,connectorOpts:t,pushServerOpts:e})}}({bridge:this.bridge,qrcodeModal:this.qrcode?this.qrcodeModal:void 0,qrcodeModalOptions:this.qrcodeModalOptions,storageId:null==t?void 0:t.storageId,signingMethods:null==t?void 0:t.signingMethods,clientMeta:null==t?void 0:t.clientMeta}),this.rpc=t.rpc||null,!(this.rpc||t.infuraId&&"string"==typeof t.infuraId&&t.infuraId.trim()))throw new Error("Missing one of the required parameters: rpc or infuraId");this.infuraId=t.infuraId||"",this.chainId=(null==t?void 0:t.chainId)||this.chainId,this.initialize()}get isWalletConnect(){return!0}get connector(){return this.wc}get walletMeta(){return this.wc.peerMeta}async disconnect(){this.close()}async close(){const t=await this.getWalletConnector({disableSessionCreation:!0});await t.killSession(),await this.onDisconnect()}async handleRequest(t){try{let e,r=null;const n=await this.getWalletConnector();switch(t.method){case"wc_killSession":await this.close(),r=null;break;case"eth_accounts":r=n.accounts;break;case"eth_coinbase":r=n.accounts[0];break;case"eth_chainId":case"net_version":r=n.chainId;break;case"eth_uninstallFilter":this.sendAsync(t,(t=>t)),r=!0;break;default:e=await this.handleOtherRequests(t)}return e||this.formatResponse(t,r)}catch(t){throw this.emit("error",t),t}}async handleOtherRequests(t){if(!s.includes(t.method)&&t.method.startsWith("eth_"))return this.handleReadRequests(t);const e=await this.getWalletConnector(),r=await e.sendCustomRequest(t);return this.formatResponse(t,r)}async handleReadRequests(t){if(!this.http){const t=new Error("HTTP Connection not available");throw this.emit("error",t),t}return this.http.send(t)}formatResponse(t,e){return{id:t.id,jsonrpc:t.jsonrpc,result:e}}getWalletConnector(t={}){const{disableSessionCreation:e=!1}=t;return new Promise(((t,r)=>{const n=this.wc;this.isConnecting?this.onConnect((e=>t(e))):n.connected||e?(this.connected||(this.connected=!0,this.updateState(n.session)),t(n)):(this.isConnecting=!0,n.on("modal_closed",(()=>{r(new Error("User closed modal"))})),n.createSession({chainId:this.chainId}).then((()=>{n.on("connect",((e,i)=>{if(e)return this.isConnecting=!1,r(e);this.isConnecting=!1,this.connected=!0,i&&this.updateState(i.params[0]),this.emit("connect"),this.triggerConnect(n),t(n)}))})).catch((t=>{this.isConnecting=!1,r(t)})))}))}async subscribeWalletConnector(){const t=await this.getWalletConnector();t.on("disconnect",(t=>{t?this.emit("error",t):this.onDisconnect()})),t.on("session_update",((t,e)=>{t?this.emit("error",t):this.updateState(e.params[0])}))}async onDisconnect(){await this.stop(),this.emit("close",1e3,"Connection closed"),this.emit("disconnect",1e3,"Connection disconnected"),this.connected=!1}async updateState(t){const{accounts:e,chainId:r,networkId:n,rpcUrl:i}=t;(!this.accounts||e&&this.accounts!==e)&&(this.accounts=e,this.emit("accountsChanged",e)),(!this.chainId||r&&this.chainId!==r)&&(this.chainId=r,this.emit("chainChanged",r)),(!this.networkId||n&&this.networkId!==n)&&(this.networkId=n,this.emit("networkChanged",n)),this.updateRpcUrl(this.chainId,i||"")}updateRpcUrl(t,e=""){const r={infuraId:this.infuraId,custom:this.rpc||void 0};(e=e||function(t,e){let r;const n=function(t,e){let r;const n=a[t];return n&&(r=`https://${n}.infura.io/v3/${e}`),r}(t,e.infuraId);return e.custom&&e.custom[t]?r=e.custom[t]:n&&(r=n),r}(t,r))?(this.rpcUrl=e,this.updateHttpConnection()):this.emit("error",new Error(`No RPC Url available for chainId: ${t}`))}updateHttpConnection(){this.rpcUrl&&(this.http=new V(this.rpcUrl),this.http.on("payload",(t=>this.emit("payload",t))),this.http.on("error",(t=>this.emit("error",t))))}sendAsyncPromise(t,e){return new Promise(((r,n)=>{this.sendAsync({id:g(),jsonrpc:"2.0",method:t,params:e||[]},((t,e)=>{t?n(t):r(e.result)}))}))}initialize(){this.updateRpcUrl(this.chainId),this.addProvider(new Y({eth_hashrate:"0x00",eth_mining:!1,eth_syncing:!0,net_listening:!0,web3_clientVersion:"WalletConnect/v1.x.x/javascript"})),this.addProvider(new G),this.addProvider(new tt),this.addProvider(new J),this.addProvider(new X),this.addProvider(new Q(this.configWallet())),this.addProvider({handleRequest:async(t,e,r)=>{try{const{error:e,result:n}=await this.handleRequest(t);r(e,n)}catch(t){r(t)}},setEngine:t=>t})}configWallet(){return{getAccounts:async t=>{try{const e=(await this.getWalletConnector()).accounts;e&&e.length?t(null,e):t(new Error("Failed to get accounts"))}catch(e){t(e)}},processMessage:async(t,e)=>{try{const r=await this.getWalletConnector();e(null,await r.signMessage([t.from,t.data]))}catch(t){e(t)}},processPersonalMessage:async(t,e)=>{try{const r=await this.getWalletConnector();e(null,await r.signPersonalMessage([t.data,t.from]))}catch(t){e(t)}},processSignTransaction:async(t,e)=>{try{const r=await this.getWalletConnector();e(null,await r.signTransaction(t))}catch(t){e(t)}},processTransaction:async(t,e)=>{try{const r=await this.getWalletConnector();e(null,await r.sendTransaction(t))}catch(t){e(t)}},processTypedMessage:async(t,e)=>{try{const r=await this.getWalletConnector();e(null,await r.signTypedData([t.from,t.data]))}catch(t){e(t)}}}}}},46351:function(t,e,r){!function(t,e){"use strict";function n(t,e){if(!t)throw new Error(e||"Assertion failed")}function i(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}function o(t,e,r){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(r=e,e=10),this._init(t||0,e||10,r||"be"))}var s;"object"==typeof t?t.exports=o:e.BN=o,o.BN=o,o.wordSize=26;try{s="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:r(93179).Buffer}catch(t){}function a(t,e){var r=t.charCodeAt(e);return r>=65&&r<=70?r-55:r>=97&&r<=102?r-87:r-48&15}function u(t,e,r){var n=a(t,r);return r-1>=e&&(n|=a(t,r-1)<<4),n}function h(t,e,r,n){for(var i=0,o=Math.min(t.length,r),s=e;s<o;s++){var a=t.charCodeAt(s)-48;i*=n,i+=a>=49?a-49+10:a>=17?a-17+10:a}return i}o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,e){return t.cmp(e)>0?t:e},o.min=function(t,e){return t.cmp(e)<0?t:e},o.prototype._init=function(t,e,r){if("number"==typeof t)return this._initNumber(t,e,r);if("object"==typeof t)return this._initArray(t,e,r);"hex"===e&&(e=16),n(e===(0|e)&&e>=2&&e<=36);var i=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&(i++,this.negative=1),i<t.length&&(16===e?this._parseHex(t,i,r):(this._parseBase(t,e,i),"le"===r&&this._initArray(this.toArray(),e,r)))},o.prototype._initNumber=function(t,e,r){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(n(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===r&&this._initArray(this.toArray(),e,r)},o.prototype._initArray=function(t,e,r){if(n("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var o,s,a=0;if("be"===r)for(i=t.length-1,o=0;i>=0;i-=3)s=t[i]|t[i-1]<<8|t[i-2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);else if("le"===r)for(i=0,o=0;i<t.length;i+=3)s=t[i]|t[i+1]<<8|t[i+2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);return this.strip()},o.prototype._parseHex=function(t,e,r){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var i,o=0,s=0;if("be"===r)for(n=t.length-1;n>=e;n-=2)i=u(t,e,n)<<o,this.words[s]|=67108863&i,o>=18?(o-=18,s+=1,this.words[s]|=i>>>26):o+=8;else for(n=(t.length-e)%2==0?e+1:e;n<t.length;n+=2)i=u(t,e,n)<<o,this.words[s]|=67108863&i,o>=18?(o-=18,s+=1,this.words[s]|=i>>>26):o+=8;this.strip()},o.prototype._parseBase=function(t,e,r){this.words=[0],this.length=1;for(var n=0,i=1;i<=67108863;i*=e)n++;n--,i=i/e|0;for(var o=t.length-r,s=o%n,a=Math.min(o,o-s)+r,u=0,c=r;c<a;c+=n)u=h(t,c,c+n,e),this.imuln(i),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==s){var l=1;for(u=h(t,c,t.length,e),c=0;c<s;c++)l*=e;this.imuln(l),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}this.strip()},o.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},o.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var c=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],l=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],f=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function d(t,e,r){r.negative=e.negative^t.negative;var n=t.length+e.length|0;r.length=n,n=n-1|0;var i=0|t.words[0],o=0|e.words[0],s=i*o,a=67108863&s,u=s/67108864|0;r.words[0]=a;for(var h=1;h<n;h++){for(var c=u>>>26,l=67108863&u,f=Math.min(h,e.length-1),d=Math.max(0,h-t.length+1);d<=f;d++){var p=h-d|0;c+=(s=(i=0|t.words[p])*(o=0|e.words[d])+l)/67108864|0,l=67108863&s}r.words[h]=0|l,u=0|c}return 0!==u?r.words[h]=0|u:r.length--,r.strip()}o.prototype.toString=function(t,e){var r;if(e=0|e||1,16===(t=t||10)||"hex"===t){r="";for(var i=0,o=0,s=0;s<this.length;s++){var a=this.words[s],u=(16777215&(a<<i|o)).toString(16);r=0!=(o=a>>>24-i&16777215)||s!==this.length-1?c[6-u.length]+u+r:u+r,(i+=2)>=26&&(i-=26,s--)}for(0!==o&&(r=o.toString(16)+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}if(t===(0|t)&&t>=2&&t<=36){var h=l[t],d=f[t];r="";var p=this.clone();for(p.negative=0;!p.isZero();){var m=p.modn(d).toString(t);r=(p=p.idivn(d)).isZero()?m+r:c[h-m.length]+m+r}for(this.isZero()&&(r="0"+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}n(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&n(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16)},o.prototype.toBuffer=function(t,e){return n(void 0!==s),this.toArrayLike(s,t,e)},o.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},o.prototype.toArrayLike=function(t,e,r){var i=this.byteLength(),o=r||Math.max(1,i);n(i<=o,"byte array longer than desired length"),n(o>0,"Requested array length <= 0"),this.strip();var s,a,u="le"===e,h=new t(o),c=this.clone();if(u){for(a=0;!c.isZero();a++)s=c.andln(255),c.iushrn(8),h[a]=s;for(;a<o;a++)h[a]=0}else{for(a=0;a<o-i;a++)h[a]=0;for(a=0;!c.isZero();a++)s=c.andln(255),c.iushrn(8),h[o-a-1]=s}return h},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var e=t,r=0;return e>=4096&&(r+=13,e>>>=13),e>=64&&(r+=7,e>>>=7),e>=8&&(r+=4,e>>>=4),e>=2&&(r+=2,e>>>=2),r+e},o.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,r=0;return 0==(8191&e)&&(r+=13,e>>>=13),0==(127&e)&&(r+=7,e>>>=7),0==(15&e)&&(r+=4,e>>>=4),0==(3&e)&&(r+=2,e>>>=2),0==(1&e)&&r++,r},o.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var r=this._zeroBits(this.words[e]);if(t+=r,26!==r)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},o.prototype.ior=function(t){return n(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var r=0;r<e.length;r++)this.words[r]=this.words[r]&t.words[r];return this.length=e.length,this.strip()},o.prototype.iand=function(t){return n(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var e,r;this.length>t.length?(e=this,r=t):(e=t,r=this);for(var n=0;n<r.length;n++)this.words[n]=e.words[n]^r.words[n];if(this!==e)for(;n<e.length;n++)this.words[n]=e.words[n];return this.length=e.length,this.strip()},o.prototype.ixor=function(t){return n(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){n("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),r=t%26;this._expand(e),r>0&&e--;for(var i=0;i<e;i++)this.words[i]=67108863&~this.words[i];return r>0&&(this.words[i]=~this.words[i]&67108863>>26-r),this.strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,e){n("number"==typeof t&&t>=0);var r=t/26|0,i=t%26;return this._expand(r+1),this.words[r]=e?this.words[r]|1<<i:this.words[r]&~(1<<i),this.strip()},o.prototype.iadd=function(t){var e,r,n;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(r=this,n=t):(r=t,n=this);for(var i=0,o=0;o<n.length;o++)e=(0|r.words[o])+(0|n.words[o])+i,this.words[o]=67108863&e,i=e>>>26;for(;0!==i&&o<r.length;o++)e=(0|r.words[o])+i,this.words[o]=67108863&e,i=e>>>26;if(this.length=r.length,0!==i)this.words[this.length]=i,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},o.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r,n,i=this.cmp(t);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(r=this,n=t):(r=t,n=this);for(var o=0,s=0;s<n.length;s++)o=(e=(0|r.words[s])-(0|n.words[s])+o)>>26,this.words[s]=67108863&e;for(;0!==o&&s<r.length;s++)o=(e=(0|r.words[s])+o)>>26,this.words[s]=67108863&e;if(0===o&&s<r.length&&r!==this)for(;s<r.length;s++)this.words[s]=r.words[s];return this.length=Math.max(this.length,s),r!==this&&(this.negative=1),this.strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var p=function(t,e,r){var n,i,o,s=t.words,a=e.words,u=r.words,h=0,c=0|s[0],l=8191&c,f=c>>>13,d=0|s[1],p=8191&d,m=d>>>13,g=0|s[2],v=8191&g,y=g>>>13,w=0|s[3],_=8191&w,b=w>>>13,M=0|s[4],x=8191&M,k=M>>>13,E=0|s[5],A=8191&E,S=E>>>13,T=0|s[6],C=8191&T,B=T>>>13,R=0|s[7],I=8191&R,P=R>>>13,L=0|s[8],N=8191&L,O=L>>>13,U=0|s[9],q=8191&U,K=U>>>13,H=0|a[0],j=8191&H,D=H>>>13,z=0|a[1],W=8191&z,F=z>>>13,Z=0|a[2],V=8191&Z,$=Z>>>13,G=0|a[3],Y=8191&G,J=G>>>13,Q=0|a[4],X=8191&Q,tt=Q>>>13,et=0|a[5],rt=8191&et,nt=et>>>13,it=0|a[6],ot=8191&it,st=it>>>13,at=0|a[7],ut=8191&at,ht=at>>>13,ct=0|a[8],lt=8191&ct,ft=ct>>>13,dt=0|a[9],pt=8191&dt,mt=dt>>>13;r.negative=t.negative^e.negative,r.length=19;var gt=(h+(n=Math.imul(l,j))|0)+((8191&(i=(i=Math.imul(l,D))+Math.imul(f,j)|0))<<13)|0;h=((o=Math.imul(f,D))+(i>>>13)|0)+(gt>>>26)|0,gt&=67108863,n=Math.imul(p,j),i=(i=Math.imul(p,D))+Math.imul(m,j)|0,o=Math.imul(m,D);var vt=(h+(n=n+Math.imul(l,W)|0)|0)+((8191&(i=(i=i+Math.imul(l,F)|0)+Math.imul(f,W)|0))<<13)|0;h=((o=o+Math.imul(f,F)|0)+(i>>>13)|0)+(vt>>>26)|0,vt&=67108863,n=Math.imul(v,j),i=(i=Math.imul(v,D))+Math.imul(y,j)|0,o=Math.imul(y,D),n=n+Math.imul(p,W)|0,i=(i=i+Math.imul(p,F)|0)+Math.imul(m,W)|0,o=o+Math.imul(m,F)|0;var yt=(h+(n=n+Math.imul(l,V)|0)|0)+((8191&(i=(i=i+Math.imul(l,$)|0)+Math.imul(f,V)|0))<<13)|0;h=((o=o+Math.imul(f,$)|0)+(i>>>13)|0)+(yt>>>26)|0,yt&=67108863,n=Math.imul(_,j),i=(i=Math.imul(_,D))+Math.imul(b,j)|0,o=Math.imul(b,D),n=n+Math.imul(v,W)|0,i=(i=i+Math.imul(v,F)|0)+Math.imul(y,W)|0,o=o+Math.imul(y,F)|0,n=n+Math.imul(p,V)|0,i=(i=i+Math.imul(p,$)|0)+Math.imul(m,V)|0,o=o+Math.imul(m,$)|0;var wt=(h+(n=n+Math.imul(l,Y)|0)|0)+((8191&(i=(i=i+Math.imul(l,J)|0)+Math.imul(f,Y)|0))<<13)|0;h=((o=o+Math.imul(f,J)|0)+(i>>>13)|0)+(wt>>>26)|0,wt&=67108863,n=Math.imul(x,j),i=(i=Math.imul(x,D))+Math.imul(k,j)|0,o=Math.imul(k,D),n=n+Math.imul(_,W)|0,i=(i=i+Math.imul(_,F)|0)+Math.imul(b,W)|0,o=o+Math.imul(b,F)|0,n=n+Math.imul(v,V)|0,i=(i=i+Math.imul(v,$)|0)+Math.imul(y,V)|0,o=o+Math.imul(y,$)|0,n=n+Math.imul(p,Y)|0,i=(i=i+Math.imul(p,J)|0)+Math.imul(m,Y)|0,o=o+Math.imul(m,J)|0;var _t=(h+(n=n+Math.imul(l,X)|0)|0)+((8191&(i=(i=i+Math.imul(l,tt)|0)+Math.imul(f,X)|0))<<13)|0;h=((o=o+Math.imul(f,tt)|0)+(i>>>13)|0)+(_t>>>26)|0,_t&=67108863,n=Math.imul(A,j),i=(i=Math.imul(A,D))+Math.imul(S,j)|0,o=Math.imul(S,D),n=n+Math.imul(x,W)|0,i=(i=i+Math.imul(x,F)|0)+Math.imul(k,W)|0,o=o+Math.imul(k,F)|0,n=n+Math.imul(_,V)|0,i=(i=i+Math.imul(_,$)|0)+Math.imul(b,V)|0,o=o+Math.imul(b,$)|0,n=n+Math.imul(v,Y)|0,i=(i=i+Math.imul(v,J)|0)+Math.imul(y,Y)|0,o=o+Math.imul(y,J)|0,n=n+Math.imul(p,X)|0,i=(i=i+Math.imul(p,tt)|0)+Math.imul(m,X)|0,o=o+Math.imul(m,tt)|0;var bt=(h+(n=n+Math.imul(l,rt)|0)|0)+((8191&(i=(i=i+Math.imul(l,nt)|0)+Math.imul(f,rt)|0))<<13)|0;h=((o=o+Math.imul(f,nt)|0)+(i>>>13)|0)+(bt>>>26)|0,bt&=67108863,n=Math.imul(C,j),i=(i=Math.imul(C,D))+Math.imul(B,j)|0,o=Math.imul(B,D),n=n+Math.imul(A,W)|0,i=(i=i+Math.imul(A,F)|0)+Math.imul(S,W)|0,o=o+Math.imul(S,F)|0,n=n+Math.imul(x,V)|0,i=(i=i+Math.imul(x,$)|0)+Math.imul(k,V)|0,o=o+Math.imul(k,$)|0,n=n+Math.imul(_,Y)|0,i=(i=i+Math.imul(_,J)|0)+Math.imul(b,Y)|0,o=o+Math.imul(b,J)|0,n=n+Math.imul(v,X)|0,i=(i=i+Math.imul(v,tt)|0)+Math.imul(y,X)|0,o=o+Math.imul(y,tt)|0,n=n+Math.imul(p,rt)|0,i=(i=i+Math.imul(p,nt)|0)+Math.imul(m,rt)|0,o=o+Math.imul(m,nt)|0;var Mt=(h+(n=n+Math.imul(l,ot)|0)|0)+((8191&(i=(i=i+Math.imul(l,st)|0)+Math.imul(f,ot)|0))<<13)|0;h=((o=o+Math.imul(f,st)|0)+(i>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,n=Math.imul(I,j),i=(i=Math.imul(I,D))+Math.imul(P,j)|0,o=Math.imul(P,D),n=n+Math.imul(C,W)|0,i=(i=i+Math.imul(C,F)|0)+Math.imul(B,W)|0,o=o+Math.imul(B,F)|0,n=n+Math.imul(A,V)|0,i=(i=i+Math.imul(A,$)|0)+Math.imul(S,V)|0,o=o+Math.imul(S,$)|0,n=n+Math.imul(x,Y)|0,i=(i=i+Math.imul(x,J)|0)+Math.imul(k,Y)|0,o=o+Math.imul(k,J)|0,n=n+Math.imul(_,X)|0,i=(i=i+Math.imul(_,tt)|0)+Math.imul(b,X)|0,o=o+Math.imul(b,tt)|0,n=n+Math.imul(v,rt)|0,i=(i=i+Math.imul(v,nt)|0)+Math.imul(y,rt)|0,o=o+Math.imul(y,nt)|0,n=n+Math.imul(p,ot)|0,i=(i=i+Math.imul(p,st)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,st)|0;var xt=(h+(n=n+Math.imul(l,ut)|0)|0)+((8191&(i=(i=i+Math.imul(l,ht)|0)+Math.imul(f,ut)|0))<<13)|0;h=((o=o+Math.imul(f,ht)|0)+(i>>>13)|0)+(xt>>>26)|0,xt&=67108863,n=Math.imul(N,j),i=(i=Math.imul(N,D))+Math.imul(O,j)|0,o=Math.imul(O,D),n=n+Math.imul(I,W)|0,i=(i=i+Math.imul(I,F)|0)+Math.imul(P,W)|0,o=o+Math.imul(P,F)|0,n=n+Math.imul(C,V)|0,i=(i=i+Math.imul(C,$)|0)+Math.imul(B,V)|0,o=o+Math.imul(B,$)|0,n=n+Math.imul(A,Y)|0,i=(i=i+Math.imul(A,J)|0)+Math.imul(S,Y)|0,o=o+Math.imul(S,J)|0,n=n+Math.imul(x,X)|0,i=(i=i+Math.imul(x,tt)|0)+Math.imul(k,X)|0,o=o+Math.imul(k,tt)|0,n=n+Math.imul(_,rt)|0,i=(i=i+Math.imul(_,nt)|0)+Math.imul(b,rt)|0,o=o+Math.imul(b,nt)|0,n=n+Math.imul(v,ot)|0,i=(i=i+Math.imul(v,st)|0)+Math.imul(y,ot)|0,o=o+Math.imul(y,st)|0,n=n+Math.imul(p,ut)|0,i=(i=i+Math.imul(p,ht)|0)+Math.imul(m,ut)|0,o=o+Math.imul(m,ht)|0;var kt=(h+(n=n+Math.imul(l,lt)|0)|0)+((8191&(i=(i=i+Math.imul(l,ft)|0)+Math.imul(f,lt)|0))<<13)|0;h=((o=o+Math.imul(f,ft)|0)+(i>>>13)|0)+(kt>>>26)|0,kt&=67108863,n=Math.imul(q,j),i=(i=Math.imul(q,D))+Math.imul(K,j)|0,o=Math.imul(K,D),n=n+Math.imul(N,W)|0,i=(i=i+Math.imul(N,F)|0)+Math.imul(O,W)|0,o=o+Math.imul(O,F)|0,n=n+Math.imul(I,V)|0,i=(i=i+Math.imul(I,$)|0)+Math.imul(P,V)|0,o=o+Math.imul(P,$)|0,n=n+Math.imul(C,Y)|0,i=(i=i+Math.imul(C,J)|0)+Math.imul(B,Y)|0,o=o+Math.imul(B,J)|0,n=n+Math.imul(A,X)|0,i=(i=i+Math.imul(A,tt)|0)+Math.imul(S,X)|0,o=o+Math.imul(S,tt)|0,n=n+Math.imul(x,rt)|0,i=(i=i+Math.imul(x,nt)|0)+Math.imul(k,rt)|0,o=o+Math.imul(k,nt)|0,n=n+Math.imul(_,ot)|0,i=(i=i+Math.imul(_,st)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,st)|0,n=n+Math.imul(v,ut)|0,i=(i=i+Math.imul(v,ht)|0)+Math.imul(y,ut)|0,o=o+Math.imul(y,ht)|0,n=n+Math.imul(p,lt)|0,i=(i=i+Math.imul(p,ft)|0)+Math.imul(m,lt)|0,o=o+Math.imul(m,ft)|0;var Et=(h+(n=n+Math.imul(l,pt)|0)|0)+((8191&(i=(i=i+Math.imul(l,mt)|0)+Math.imul(f,pt)|0))<<13)|0;h=((o=o+Math.imul(f,mt)|0)+(i>>>13)|0)+(Et>>>26)|0,Et&=67108863,n=Math.imul(q,W),i=(i=Math.imul(q,F))+Math.imul(K,W)|0,o=Math.imul(K,F),n=n+Math.imul(N,V)|0,i=(i=i+Math.imul(N,$)|0)+Math.imul(O,V)|0,o=o+Math.imul(O,$)|0,n=n+Math.imul(I,Y)|0,i=(i=i+Math.imul(I,J)|0)+Math.imul(P,Y)|0,o=o+Math.imul(P,J)|0,n=n+Math.imul(C,X)|0,i=(i=i+Math.imul(C,tt)|0)+Math.imul(B,X)|0,o=o+Math.imul(B,tt)|0,n=n+Math.imul(A,rt)|0,i=(i=i+Math.imul(A,nt)|0)+Math.imul(S,rt)|0,o=o+Math.imul(S,nt)|0,n=n+Math.imul(x,ot)|0,i=(i=i+Math.imul(x,st)|0)+Math.imul(k,ot)|0,o=o+Math.imul(k,st)|0,n=n+Math.imul(_,ut)|0,i=(i=i+Math.imul(_,ht)|0)+Math.imul(b,ut)|0,o=o+Math.imul(b,ht)|0,n=n+Math.imul(v,lt)|0,i=(i=i+Math.imul(v,ft)|0)+Math.imul(y,lt)|0,o=o+Math.imul(y,ft)|0;var At=(h+(n=n+Math.imul(p,pt)|0)|0)+((8191&(i=(i=i+Math.imul(p,mt)|0)+Math.imul(m,pt)|0))<<13)|0;h=((o=o+Math.imul(m,mt)|0)+(i>>>13)|0)+(At>>>26)|0,At&=67108863,n=Math.imul(q,V),i=(i=Math.imul(q,$))+Math.imul(K,V)|0,o=Math.imul(K,$),n=n+Math.imul(N,Y)|0,i=(i=i+Math.imul(N,J)|0)+Math.imul(O,Y)|0,o=o+Math.imul(O,J)|0,n=n+Math.imul(I,X)|0,i=(i=i+Math.imul(I,tt)|0)+Math.imul(P,X)|0,o=o+Math.imul(P,tt)|0,n=n+Math.imul(C,rt)|0,i=(i=i+Math.imul(C,nt)|0)+Math.imul(B,rt)|0,o=o+Math.imul(B,nt)|0,n=n+Math.imul(A,ot)|0,i=(i=i+Math.imul(A,st)|0)+Math.imul(S,ot)|0,o=o+Math.imul(S,st)|0,n=n+Math.imul(x,ut)|0,i=(i=i+Math.imul(x,ht)|0)+Math.imul(k,ut)|0,o=o+Math.imul(k,ht)|0,n=n+Math.imul(_,lt)|0,i=(i=i+Math.imul(_,ft)|0)+Math.imul(b,lt)|0,o=o+Math.imul(b,ft)|0;var St=(h+(n=n+Math.imul(v,pt)|0)|0)+((8191&(i=(i=i+Math.imul(v,mt)|0)+Math.imul(y,pt)|0))<<13)|0;h=((o=o+Math.imul(y,mt)|0)+(i>>>13)|0)+(St>>>26)|0,St&=67108863,n=Math.imul(q,Y),i=(i=Math.imul(q,J))+Math.imul(K,Y)|0,o=Math.imul(K,J),n=n+Math.imul(N,X)|0,i=(i=i+Math.imul(N,tt)|0)+Math.imul(O,X)|0,o=o+Math.imul(O,tt)|0,n=n+Math.imul(I,rt)|0,i=(i=i+Math.imul(I,nt)|0)+Math.imul(P,rt)|0,o=o+Math.imul(P,nt)|0,n=n+Math.imul(C,ot)|0,i=(i=i+Math.imul(C,st)|0)+Math.imul(B,ot)|0,o=o+Math.imul(B,st)|0,n=n+Math.imul(A,ut)|0,i=(i=i+Math.imul(A,ht)|0)+Math.imul(S,ut)|0,o=o+Math.imul(S,ht)|0,n=n+Math.imul(x,lt)|0,i=(i=i+Math.imul(x,ft)|0)+Math.imul(k,lt)|0,o=o+Math.imul(k,ft)|0;var Tt=(h+(n=n+Math.imul(_,pt)|0)|0)+((8191&(i=(i=i+Math.imul(_,mt)|0)+Math.imul(b,pt)|0))<<13)|0;h=((o=o+Math.imul(b,mt)|0)+(i>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,n=Math.imul(q,X),i=(i=Math.imul(q,tt))+Math.imul(K,X)|0,o=Math.imul(K,tt),n=n+Math.imul(N,rt)|0,i=(i=i+Math.imul(N,nt)|0)+Math.imul(O,rt)|0,o=o+Math.imul(O,nt)|0,n=n+Math.imul(I,ot)|0,i=(i=i+Math.imul(I,st)|0)+Math.imul(P,ot)|0,o=o+Math.imul(P,st)|0,n=n+Math.imul(C,ut)|0,i=(i=i+Math.imul(C,ht)|0)+Math.imul(B,ut)|0,o=o+Math.imul(B,ht)|0,n=n+Math.imul(A,lt)|0,i=(i=i+Math.imul(A,ft)|0)+Math.imul(S,lt)|0,o=o+Math.imul(S,ft)|0;var Ct=(h+(n=n+Math.imul(x,pt)|0)|0)+((8191&(i=(i=i+Math.imul(x,mt)|0)+Math.imul(k,pt)|0))<<13)|0;h=((o=o+Math.imul(k,mt)|0)+(i>>>13)|0)+(Ct>>>26)|0,Ct&=67108863,n=Math.imul(q,rt),i=(i=Math.imul(q,nt))+Math.imul(K,rt)|0,o=Math.imul(K,nt),n=n+Math.imul(N,ot)|0,i=(i=i+Math.imul(N,st)|0)+Math.imul(O,ot)|0,o=o+Math.imul(O,st)|0,n=n+Math.imul(I,ut)|0,i=(i=i+Math.imul(I,ht)|0)+Math.imul(P,ut)|0,o=o+Math.imul(P,ht)|0,n=n+Math.imul(C,lt)|0,i=(i=i+Math.imul(C,ft)|0)+Math.imul(B,lt)|0,o=o+Math.imul(B,ft)|0;var Bt=(h+(n=n+Math.imul(A,pt)|0)|0)+((8191&(i=(i=i+Math.imul(A,mt)|0)+Math.imul(S,pt)|0))<<13)|0;h=((o=o+Math.imul(S,mt)|0)+(i>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,n=Math.imul(q,ot),i=(i=Math.imul(q,st))+Math.imul(K,ot)|0,o=Math.imul(K,st),n=n+Math.imul(N,ut)|0,i=(i=i+Math.imul(N,ht)|0)+Math.imul(O,ut)|0,o=o+Math.imul(O,ht)|0,n=n+Math.imul(I,lt)|0,i=(i=i+Math.imul(I,ft)|0)+Math.imul(P,lt)|0,o=o+Math.imul(P,ft)|0;var Rt=(h+(n=n+Math.imul(C,pt)|0)|0)+((8191&(i=(i=i+Math.imul(C,mt)|0)+Math.imul(B,pt)|0))<<13)|0;h=((o=o+Math.imul(B,mt)|0)+(i>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,n=Math.imul(q,ut),i=(i=Math.imul(q,ht))+Math.imul(K,ut)|0,o=Math.imul(K,ht),n=n+Math.imul(N,lt)|0,i=(i=i+Math.imul(N,ft)|0)+Math.imul(O,lt)|0,o=o+Math.imul(O,ft)|0;var It=(h+(n=n+Math.imul(I,pt)|0)|0)+((8191&(i=(i=i+Math.imul(I,mt)|0)+Math.imul(P,pt)|0))<<13)|0;h=((o=o+Math.imul(P,mt)|0)+(i>>>13)|0)+(It>>>26)|0,It&=67108863,n=Math.imul(q,lt),i=(i=Math.imul(q,ft))+Math.imul(K,lt)|0,o=Math.imul(K,ft);var Pt=(h+(n=n+Math.imul(N,pt)|0)|0)+((8191&(i=(i=i+Math.imul(N,mt)|0)+Math.imul(O,pt)|0))<<13)|0;h=((o=o+Math.imul(O,mt)|0)+(i>>>13)|0)+(Pt>>>26)|0,Pt&=67108863;var Lt=(h+(n=Math.imul(q,pt))|0)+((8191&(i=(i=Math.imul(q,mt))+Math.imul(K,pt)|0))<<13)|0;return h=((o=Math.imul(K,mt))+(i>>>13)|0)+(Lt>>>26)|0,Lt&=67108863,u[0]=gt,u[1]=vt,u[2]=yt,u[3]=wt,u[4]=_t,u[5]=bt,u[6]=Mt,u[7]=xt,u[8]=kt,u[9]=Et,u[10]=At,u[11]=St,u[12]=Tt,u[13]=Ct,u[14]=Bt,u[15]=Rt,u[16]=It,u[17]=Pt,u[18]=Lt,0!==h&&(u[19]=h,r.length++),r};function m(t,e,r){return(new g).mulp(t,e,r)}function g(t,e){this.x=t,this.y=e}Math.imul||(p=d),o.prototype.mulTo=function(t,e){var r=this.length+t.length;return 10===this.length&&10===t.length?p(this,t,e):r<63?d(this,t,e):r<1024?function(t,e,r){r.negative=e.negative^t.negative,r.length=t.length+e.length;for(var n=0,i=0,o=0;o<r.length-1;o++){var s=i;i=0;for(var a=67108863&n,u=Math.min(o,e.length-1),h=Math.max(0,o-t.length+1);h<=u;h++){var c=o-h,l=(0|t.words[c])*(0|e.words[h]),f=67108863&l;a=67108863&(f=f+a|0),i+=(s=(s=s+(l/67108864|0)|0)+(f>>>26)|0)>>>26,s&=67108863}r.words[o]=a,n=s,s=i}return 0!==n?r.words[o]=n:r.length--,r.strip()}(this,t,e):m(this,t,e)},g.prototype.makeRBT=function(t){for(var e=new Array(t),r=o.prototype._countBits(t)-1,n=0;n<t;n++)e[n]=this.revBin(n,r,t);return e},g.prototype.revBin=function(t,e,r){if(0===t||t===r-1)return t;for(var n=0,i=0;i<e;i++)n|=(1&t)<<e-i-1,t>>=1;return n},g.prototype.permute=function(t,e,r,n,i,o){for(var s=0;s<o;s++)n[s]=e[t[s]],i[s]=r[t[s]]},g.prototype.transform=function(t,e,r,n,i,o){this.permute(o,t,e,r,n,i);for(var s=1;s<i;s<<=1)for(var a=s<<1,u=Math.cos(2*Math.PI/a),h=Math.sin(2*Math.PI/a),c=0;c<i;c+=a)for(var l=u,f=h,d=0;d<s;d++){var p=r[c+d],m=n[c+d],g=r[c+d+s],v=n[c+d+s],y=l*g-f*v;v=l*v+f*g,g=y,r[c+d]=p+g,n[c+d]=m+v,r[c+d+s]=p-g,n[c+d+s]=m-v,d!==a&&(y=u*l-h*f,f=u*f+h*l,l=y)}},g.prototype.guessLen13b=function(t,e){var r=1|Math.max(e,t),n=1&r,i=0;for(r=r/2|0;r;r>>>=1)i++;return 1<<i+1+n},g.prototype.conjugate=function(t,e,r){if(!(r<=1))for(var n=0;n<r/2;n++){var i=t[n];t[n]=t[r-n-1],t[r-n-1]=i,i=e[n],e[n]=-e[r-n-1],e[r-n-1]=-i}},g.prototype.normalize13b=function(t,e){for(var r=0,n=0;n<e/2;n++){var i=8192*Math.round(t[2*n+1]/e)+Math.round(t[2*n]/e)+r;t[n]=67108863&i,r=i<67108864?0:i/67108864|0}return t},g.prototype.convert13b=function(t,e,r,i){for(var o=0,s=0;s<e;s++)o+=0|t[s],r[2*s]=8191&o,o>>>=13,r[2*s+1]=8191&o,o>>>=13;for(s=2*e;s<i;++s)r[s]=0;n(0===o),n(0==(-8192&o))},g.prototype.stub=function(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=0;return e},g.prototype.mulp=function(t,e,r){var n=2*this.guessLen13b(t.length,e.length),i=this.makeRBT(n),o=this.stub(n),s=new Array(n),a=new Array(n),u=new Array(n),h=new Array(n),c=new Array(n),l=new Array(n),f=r.words;f.length=n,this.convert13b(t.words,t.length,s,n),this.convert13b(e.words,e.length,h,n),this.transform(s,o,a,u,n,i),this.transform(h,o,c,l,n,i);for(var d=0;d<n;d++){var p=a[d]*c[d]-u[d]*l[d];u[d]=a[d]*l[d]+u[d]*c[d],a[d]=p}return this.conjugate(a,u,n),this.transform(a,u,f,o,n,i),this.conjugate(f,o,n),this.normalize13b(f,n),r.negative=t.negative^e.negative,r.length=t.length+e.length,r.strip()},o.prototype.mul=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},o.prototype.mulf=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),m(this,t,e)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){n("number"==typeof t),n(t<67108864);for(var e=0,r=0;r<this.length;r++){var i=(0|this.words[r])*t,o=(67108863&i)+(67108863&e);e>>=26,e+=i/67108864|0,e+=o>>>26,this.words[r]=67108863&o}return 0!==e&&(this.words[r]=e,this.length++),this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),r=0;r<e.length;r++){var n=r/26|0,i=r%26;e[r]=(t.words[n]&1<<i)>>>i}return e}(t);if(0===e.length)return new o(1);for(var r=this,n=0;n<e.length&&0===e[n];n++,r=r.sqr());if(++n<e.length)for(var i=r.sqr();n<e.length;n++,i=i.sqr())0!==e[n]&&(r=r.mul(i));return r},o.prototype.iushln=function(t){n("number"==typeof t&&t>=0);var e,r=t%26,i=(t-r)/26,o=67108863>>>26-r<<26-r;if(0!==r){var s=0;for(e=0;e<this.length;e++){var a=this.words[e]&o,u=(0|this.words[e])-a<<r;this.words[e]=u|s,s=a>>>26-r}s&&(this.words[e]=s,this.length++)}if(0!==i){for(e=this.length-1;e>=0;e--)this.words[e+i]=this.words[e];for(e=0;e<i;e++)this.words[e]=0;this.length+=i}return this.strip()},o.prototype.ishln=function(t){return n(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,e,r){var i;n("number"==typeof t&&t>=0),i=e?(e-e%26)/26:0;var o=t%26,s=Math.min((t-o)/26,this.length),a=67108863^67108863>>>o<<o,u=r;if(i-=s,i=Math.max(0,i),u){for(var h=0;h<s;h++)u.words[h]=this.words[h];u.length=s}if(0===s);else if(this.length>s)for(this.length-=s,h=0;h<this.length;h++)this.words[h]=this.words[h+s];else this.words[0]=0,this.length=1;var c=0;for(h=this.length-1;h>=0&&(0!==c||h>=i);h--){var l=0|this.words[h];this.words[h]=c<<26-o|l>>>o,c=l&a}return u&&0!==c&&(u.words[u.length++]=c),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},o.prototype.ishrn=function(t,e,r){return n(0===this.negative),this.iushrn(t,e,r)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26,i=1<<e;return!(this.length<=r||!(this.words[r]&i))},o.prototype.imaskn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26;if(n(0===this.negative,"imaskn works only with positive numbers"),this.length<=r)return this;if(0!==e&&r++,this.length=Math.min(r,this.length),0!==e){var i=67108863^67108863>>>e<<e;this.words[this.length-1]&=i}return this.strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return n("number"==typeof t),n(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},o.prototype.isubn=function(t){if(n("number"==typeof t),n(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,e,r){var i,o,s=t.length+r;this._expand(s);var a=0;for(i=0;i<t.length;i++){o=(0|this.words[i+r])+a;var u=(0|t.words[i])*e;a=((o-=67108863&u)>>26)-(u/67108864|0),this.words[i+r]=67108863&o}for(;i<this.length-r;i++)a=(o=(0|this.words[i+r])+a)>>26,this.words[i+r]=67108863&o;if(0===a)return this.strip();for(n(-1===a),a=0,i=0;i<this.length;i++)a=(o=-(0|this.words[i])+a)>>26,this.words[i]=67108863&o;return this.negative=1,this.strip()},o.prototype._wordDiv=function(t,e){var r=(this.length,t.length),n=this.clone(),i=t,s=0|i.words[i.length-1];0!=(r=26-this._countBits(s))&&(i=i.ushln(r),n.iushln(r),s=0|i.words[i.length-1]);var a,u=n.length-i.length;if("mod"!==e){(a=new o(null)).length=u+1,a.words=new Array(a.length);for(var h=0;h<a.length;h++)a.words[h]=0}var c=n.clone()._ishlnsubmul(i,1,u);0===c.negative&&(n=c,a&&(a.words[u]=1));for(var l=u-1;l>=0;l--){var f=67108864*(0|n.words[i.length+l])+(0|n.words[i.length+l-1]);for(f=Math.min(f/s|0,67108863),n._ishlnsubmul(i,f,l);0!==n.negative;)f--,n.negative=0,n._ishlnsubmul(i,1,l),n.isZero()||(n.negative^=1);a&&(a.words[l]=f)}return a&&a.strip(),n.strip(),"div"!==e&&0!==r&&n.iushrn(r),{div:a||null,mod:n}},o.prototype.divmod=function(t,e,r){return n(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(a=this.neg().divmod(t,e),"mod"!==e&&(i=a.div.neg()),"div"!==e&&(s=a.mod.neg(),r&&0!==s.negative&&s.iadd(t)),{div:i,mod:s}):0===this.negative&&0!==t.negative?(a=this.divmod(t.neg(),e),"mod"!==e&&(i=a.div.neg()),{div:i,mod:a.mod}):0!=(this.negative&t.negative)?(a=this.neg().divmod(t.neg(),e),"div"!==e&&(s=a.mod.neg(),r&&0!==s.negative&&s.isub(t)),{div:a.div,mod:s}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new o(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modn(t.words[0]))}:this._wordDiv(t,e);var i,s,a},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var r=0!==e.div.negative?e.mod.isub(t):e.mod,n=t.ushrn(1),i=t.andln(1),o=r.cmp(n);return o<0||1===i&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},o.prototype.modn=function(t){n(t<=67108863);for(var e=(1<<26)%t,r=0,i=this.length-1;i>=0;i--)r=(e*r+(0|this.words[i]))%t;return r},o.prototype.idivn=function(t){n(t<=67108863);for(var e=0,r=this.length-1;r>=0;r--){var i=(0|this.words[r])+67108864*e;this.words[r]=i/t|0,e=i%t}return this.strip()},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i=new o(1),s=new o(0),a=new o(0),u=new o(1),h=0;e.isEven()&&r.isEven();)e.iushrn(1),r.iushrn(1),++h;for(var c=r.clone(),l=e.clone();!e.isZero();){for(var f=0,d=1;0==(e.words[0]&d)&&f<26;++f,d<<=1);if(f>0)for(e.iushrn(f);f-- >0;)(i.isOdd()||s.isOdd())&&(i.iadd(c),s.isub(l)),i.iushrn(1),s.iushrn(1);for(var p=0,m=1;0==(r.words[0]&m)&&p<26;++p,m<<=1);if(p>0)for(r.iushrn(p);p-- >0;)(a.isOdd()||u.isOdd())&&(a.iadd(c),u.isub(l)),a.iushrn(1),u.iushrn(1);e.cmp(r)>=0?(e.isub(r),i.isub(a),s.isub(u)):(r.isub(e),a.isub(i),u.isub(s))}return{a,b:u,gcd:r.iushln(h)}},o.prototype._invmp=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i,s=new o(1),a=new o(0),u=r.clone();e.cmpn(1)>0&&r.cmpn(1)>0;){for(var h=0,c=1;0==(e.words[0]&c)&&h<26;++h,c<<=1);if(h>0)for(e.iushrn(h);h-- >0;)s.isOdd()&&s.iadd(u),s.iushrn(1);for(var l=0,f=1;0==(r.words[0]&f)&&l<26;++l,f<<=1);if(l>0)for(r.iushrn(l);l-- >0;)a.isOdd()&&a.iadd(u),a.iushrn(1);e.cmp(r)>=0?(e.isub(r),s.isub(a)):(r.isub(e),a.isub(s))}return(i=0===e.cmpn(1)?s:a).cmpn(0)<0&&i.iadd(t),i},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),r=t.clone();e.negative=0,r.negative=0;for(var n=0;e.isEven()&&r.isEven();n++)e.iushrn(1),r.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;r.isEven();)r.iushrn(1);var i=e.cmp(r);if(i<0){var o=e;e=r,r=o}else if(0===i||0===r.cmpn(1))break;e.isub(r)}return r.iushln(n)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){n("number"==typeof t);var e=t%26,r=(t-e)/26,i=1<<e;if(this.length<=r)return this._expand(r+1),this.words[r]|=i,this;for(var o=i,s=r;0!==o&&s<this.length;s++){var a=0|this.words[s];o=(a+=o)>>>26,a&=67108863,this.words[s]=a}return 0!==o&&(this.words[s]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var e,r=t<0;if(0!==this.negative&&!r)return-1;if(0===this.negative&&r)return 1;if(this.strip(),this.length>1)e=1;else{r&&(t=-t),n(t<=67108863,"Number is too big");var i=0|this.words[0];e=i===t?0:i<t?-1:1}return 0!==this.negative?0|-e:e},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,r=this.length-1;r>=0;r--){var n=0|this.words[r],i=0|t.words[r];if(n!==i){n<i?e=-1:n>i&&(e=1);break}}return e},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new x(t)},o.prototype.toRed=function(t){return n(!this.red,"Already a number in reduction context"),n(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return n(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return n(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return n(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return n(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return n(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return n(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return n(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return n(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return n(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return n(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return n(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return n(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return n(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var v={k256:null,p224:null,p192:null,p25519:null};function y(t,e){this.name=t,this.p=new o(e,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function w(){y.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function _(){y.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function b(){y.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function M(){y.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function x(t){if("string"==typeof t){var e=o._prime(t);this.m=e.p,this.prime=e}else n(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function k(t){x.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}y.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},y.prototype.ireduce=function(t){var e,r=t;do{this.split(r,this.tmp),e=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(e>this.n);var n=e<this.n?-1:r.ucmp(this.p);return 0===n?(r.words[0]=0,r.length=1):n>0?r.isub(this.p):void 0!==r.strip?r.strip():r._strip(),r},y.prototype.split=function(t,e){t.iushrn(this.n,0,e)},y.prototype.imulK=function(t){return t.imul(this.k)},i(w,y),w.prototype.split=function(t,e){for(var r=4194303,n=Math.min(t.length,9),i=0;i<n;i++)e.words[i]=t.words[i];if(e.length=n,t.length<=9)return t.words[0]=0,void(t.length=1);var o=t.words[9];for(e.words[e.length++]=o&r,i=10;i<t.length;i++){var s=0|t.words[i];t.words[i-10]=(s&r)<<4|o>>>22,o=s}o>>>=22,t.words[i-10]=o,0===o&&t.length>10?t.length-=10:t.length-=9},w.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,r=0;r<t.length;r++){var n=0|t.words[r];e+=977*n,t.words[r]=67108863&e,e=64*n+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},i(_,y),i(b,y),i(M,y),M.prototype.imulK=function(t){for(var e=0,r=0;r<t.length;r++){var n=19*(0|t.words[r])+e,i=67108863&n;n>>>=26,t.words[r]=i,e=n}return 0!==e&&(t.words[t.length++]=e),t},o._prime=function(t){if(v[t])return v[t];var e;if("k256"===t)e=new w;else if("p224"===t)e=new _;else if("p192"===t)e=new b;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new M}return v[t]=e,e},x.prototype._verify1=function(t){n(0===t.negative,"red works only with positives"),n(t.red,"red works only with red numbers")},x.prototype._verify2=function(t,e){n(0==(t.negative|e.negative),"red works only with positives"),n(t.red&&t.red===e.red,"red works only with red numbers")},x.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},x.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},x.prototype.add=function(t,e){this._verify2(t,e);var r=t.add(e);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},x.prototype.iadd=function(t,e){this._verify2(t,e);var r=t.iadd(e);return r.cmp(this.m)>=0&&r.isub(this.m),r},x.prototype.sub=function(t,e){this._verify2(t,e);var r=t.sub(e);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},x.prototype.isub=function(t,e){this._verify2(t,e);var r=t.isub(e);return r.cmpn(0)<0&&r.iadd(this.m),r},x.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},x.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},x.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},x.prototype.isqr=function(t){return this.imul(t,t.clone())},x.prototype.sqr=function(t){return this.mul(t,t)},x.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(n(e%2==1),3===e){var r=this.m.add(new o(1)).iushrn(2);return this.pow(t,r)}for(var i=this.m.subn(1),s=0;!i.isZero()&&0===i.andln(1);)s++,i.iushrn(1);n(!i.isZero());var a=new o(1).toRed(this),u=a.redNeg(),h=this.m.subn(1).iushrn(1),c=this.m.bitLength();for(c=new o(2*c*c).toRed(this);0!==this.pow(c,h).cmp(u);)c.redIAdd(u);for(var l=this.pow(c,i),f=this.pow(t,i.addn(1).iushrn(1)),d=this.pow(t,i),p=s;0!==d.cmp(a);){for(var m=d,g=0;0!==m.cmp(a);g++)m=m.redSqr();n(g<p);var v=this.pow(l,new o(1).iushln(p-g-1));f=f.redMul(v),l=v.redSqr(),d=d.redMul(l),p=g}return f},x.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},x.prototype.pow=function(t,e){if(e.isZero())return new o(1).toRed(this);if(0===e.cmpn(1))return t.clone();var r=new Array(16);r[0]=new o(1).toRed(this),r[1]=t;for(var n=2;n<r.length;n++)r[n]=this.mul(r[n-1],t);var i=r[0],s=0,a=0,u=e.bitLength()%26;for(0===u&&(u=26),n=e.length-1;n>=0;n--){for(var h=e.words[n],c=u-1;c>=0;c--){var l=h>>c&1;i!==r[0]&&(i=this.sqr(i)),0!==l||0!==s?(s<<=1,s|=l,(4==++a||0===n&&0===c)&&(i=this.mul(i,r[s]),a=0,s=0)):a=0}u=26}return i},x.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},x.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},o.mont=function(t){return new k(t)},i(k,x),k.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},k.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},k.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},k.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new o(0)._forceRed(this);var r=t.mul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),s=i;return i.cmp(this.m)>=0?s=i.isub(this.m):i.cmpn(0)<0&&(s=i.iadd(this.m)),s._forceRed(this)},k.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t=r.nmd(t),this)},77945:(t,e,r)=>{const n=r(74865),i=r(98845);function o(t){const e=new Error("Expect argument to be non-empty array");if("object"!=typeof t||!t.length)throw e;const r=t.map((function(t){return"bytes"===t.type?n.toBuffer(t.value):t.value})),o=t.map((function(t){return t.type})),s=t.map((function(t){if(!t.name)throw e;return t.type+" "+t.name}));return i.soliditySHA3(["bytes32","bytes32"],[i.soliditySHA3(new Array(t.length).fill("string"),s),i.soliditySHA3(o,r)])}function s(t,e){const r=n.toBuffer(e),i=n.fromRpcSig(r);return n.ecrecover(t,i.v,i.r,i.s)}function a(t){const e=n.toBuffer(t.data);return s(n.hashPersonalMessage(e),t.sig)}function u(t,e){for(var r=""+t;r.length<e;)r="0"+r;return r}t.exports={concatSig:function(t,e,r){const i=n.fromSigned(e),o=n.fromSigned(r),s=n.bufferToInt(t),a=u(n.toUnsigned(i).toString("hex"),64),h=u(n.toUnsigned(o).toString("hex"),64),c=n.stripHexPrefix(n.intToHex(s));return n.addHexPrefix(a.concat(h,c)).toString("hex")},normalize:function(t){if(t){if("number"==typeof t){const e=n.toBuffer(t);t=n.bufferToHex(e)}if("string"!=typeof t){var e="eth-sig-util.normalize() requires hex string or integer input.";throw new Error(e+=" received "+typeof t+": "+t)}return n.addHexPrefix(t.toLowerCase())}},personalSign:function(t,e){var r=n.toBuffer(e.data),i=n.hashPersonalMessage(r),o=n.ecsign(i,t);return n.bufferToHex(this.concatSig(o.v,o.r,o.s))},recoverPersonalSignature:function(t){const e=a(t),r=n.publicToAddress(e);return n.bufferToHex(r)},extractPublicKey:function(t){return"0x"+a(t).toString("hex")},typedSignatureHash:function(t){const e=o(t);return n.bufferToHex(e)},signTypedData:function(t,e){const r=o(e.data),i=n.ecsign(r,t);return n.bufferToHex(this.concatSig(i.v,i.r,i.s))},recoverTypedSignature:function(t){const e=s(o(t.data),t.sig),r=n.publicToAddress(e);return n.bufferToHex(r)}}},34289:t=>{"use strict";t.exports=JSON.parse('{"genesisGasLimit":{"v":5000,"d":"Gas limit of the Genesis block."},"genesisDifficulty":{"v":17179869184,"d":"Difficulty of the Genesis block."},"genesisNonce":{"v":"0x0000000000000042","d":"the geneis nonce"},"genesisExtraData":{"v":"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa","d":"extra data "},"genesisHash":{"v":"0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3","d":"genesis hash"},"genesisStateRoot":{"v":"0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544","d":"the genesis state root"},"minGasLimit":{"v":5000,"d":"Minimum the gas limit may ever be."},"gasLimitBoundDivisor":{"v":1024,"d":"The bound divisor of the gas limit, used in update calculations."},"minimumDifficulty":{"v":131072,"d":"The minimum that the difficulty may ever be."},"difficultyBoundDivisor":{"v":2048,"d":"The bound divisor of the difficulty, used in the update calculations."},"durationLimit":{"v":13,"d":"The decision boundary on the blocktime duration used to determine whether difficulty should go up or not."},"maximumExtraDataSize":{"v":32,"d":"Maximum size extra data may be after Genesis."},"epochDuration":{"v":30000,"d":"Duration between proof-of-work epochs."},"stackLimit":{"v":1024,"d":"Maximum size of VM stack allowed."},"callCreateDepth":{"v":1024,"d":"Maximum depth of call/create stack."},"tierStepGas":{"v":[0,2,3,5,8,10,20],"d":"Once per operation, for a selection of them."},"expGas":{"v":10,"d":"Once per EXP instuction."},"expByteGas":{"v":10,"d":"Times ceil(log256(exponent)) for the EXP instruction."},"sha3Gas":{"v":30,"d":"Once per SHA3 operation."},"sha3WordGas":{"v":6,"d":"Once per word of the SHA3 operation\'s data."},"sloadGas":{"v":50,"d":"Once per SLOAD operation."},"sstoreSetGas":{"v":20000,"d":"Once per SSTORE operation if the zeroness changes from zero."},"sstoreResetGas":{"v":5000,"d":"Once per SSTORE operation if the zeroness does not change from zero."},"sstoreRefundGas":{"v":15000,"d":"Once per SSTORE operation if the zeroness changes to zero."},"jumpdestGas":{"v":1,"d":"Refunded gas, once per SSTORE operation if the zeroness changes to zero."},"logGas":{"v":375,"d":"Per LOG* operation."},"logDataGas":{"v":8,"d":"Per byte in a LOG* operation\'s data."},"logTopicGas":{"v":375,"d":"Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas."},"createGas":{"v":32000,"d":"Once per CREATE operation & contract-creation transaction."},"callGas":{"v":40,"d":"Once per CALL operation & message call transaction."},"callStipend":{"v":2300,"d":"Free gas given at beginning of call."},"callValueTransferGas":{"v":9000,"d":"Paid for CALL when the value transfor is non-zero."},"callNewAccountGas":{"v":25000,"d":"Paid for CALL when the destination address didn\'t exist prior."},"suicideRefundGas":{"v":24000,"d":"Refunded following a suicide operation."},"memoryGas":{"v":3,"d":"Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL."},"quadCoeffDiv":{"v":512,"d":"Divisor for the quadratic particle of the memory cost equation."},"createDataGas":{"v":200,"d":""},"txGas":{"v":21000,"d":"Per transaction. NOTE: Not payable on data of calls between transactions."},"txCreation":{"v":32000,"d":"the cost of creating a contract via tx"},"txDataZeroGas":{"v":4,"d":"Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions."},"txDataNonZeroGas":{"v":68,"d":"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions."},"copyGas":{"v":3,"d":"Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added."},"ecrecoverGas":{"v":3000,"d":""},"sha256Gas":{"v":60,"d":""},"sha256WordGas":{"v":12,"d":""},"ripemd160Gas":{"v":600,"d":""},"ripemd160WordGas":{"v":120,"d":""},"identityGas":{"v":15,"d":""},"identityWordGas":{"v":3,"d":""},"minerReward":{"v":"5000000000000000000","d":"the amount a miner get rewarded for mining a block"},"ommerReward":{"v":"625000000000000000","d":"The amount of wei a miner of an uncle block gets for being inculded in the blockchain"},"niblingReward":{"v":"156250000000000000","d":"the amount a miner gets for inculding a uncle"},"homeSteadForkNumber":{"v":1150000,"d":"the block that the Homestead fork started at"},"homesteadRepriceForkNumber":{"v":2463000,"d":"the block that the Homestead Reprice (EIP150) fork started at"},"timebombPeriod":{"v":100000,"d":"Exponential difficulty timebomb period"},"freeBlockPeriod":{"v":2}}')},98845:(t,e,r)=>{t.exports=r(27061)},27061:(t,e,r)=>{const n=r(51184),i=r(46351);var o=function(){};function s(t){return t.startsWith("int[")?"int256"+t.slice(3):"int"===t?"int256":t.startsWith("uint[")?"uint256"+t.slice(4):"uint"===t?"uint256":t.startsWith("fixed[")?"fixed128x128"+t.slice(5):"fixed"===t?"fixed128x128":t.startsWith("ufixed[")?"ufixed128x128"+t.slice(6):"ufixed"===t?"ufixed128x128":t}function a(t){return parseInt(/^\D+(\d+)$/.exec(t)[1],10)}function u(t){var e=/^\D+(\d+)x(\d+)$/.exec(t);return[parseInt(e[1],10),parseInt(e[2],10)]}function h(t){var e=t.match(/(.*)\[(.*?)\]$/);return e?""===e[2]?"dynamic":parseInt(e[2],10):null}function c(t){var e=typeof t;if("string"===e)return n.isHexPrefixed(t)?new i(n.stripHexPrefix(t),16):new i(t,10);if("number"===e)return new i(t);if(t.toArray)return t;throw new Error("Argument is not a number")}function l(t){var e=/^(\w+)\((.*)\)$/.exec(t);if(3!==e.length)throw new Error("Invalid method signature");var r=/^(.+)\):\((.+)$/.exec(e[2]);if(null!==r&&3===r.length)return{method:e[1],args:r[1].split(","),retargs:r[2].split(",")};var n=e[2].split(",");return 1===n.length&&""===n[0]&&(n=[]),{method:e[1],args:n}}function f(t,e){var r,o,s,l;if("address"===t)return f("uint160",c(e));if("bool"===t)return f("uint8",e?1:0);if("string"===t)return f("bytes",Buffer.from(e,"utf8"));if(g(t)){if(void 0===e.length)throw new Error("Not an array?");if("dynamic"!==(r=h(t))&&0!==r&&e.length>r)throw new Error("Elements exceed array size: "+r);for(l in s=[],t=t.slice(0,t.lastIndexOf("[")),"string"==typeof e&&(e=JSON.parse(e)),e)s.push(f(t,e[l]));if("dynamic"===r){var d=f("uint256",e.length);s.unshift(d)}return Buffer.concat(s)}if("bytes"===t)return e=Buffer.from(e),s=Buffer.concat([f("uint256",e.length),e]),e.length%32!=0&&(s=Buffer.concat([s,n.zeros(32-e.length%32)])),s;if(t.startsWith("bytes")){if((r=a(t))<1||r>32)throw new Error("Invalid bytes<N> width: "+r);return n.setLengthRight(e,32)}if(t.startsWith("uint")){if((r=a(t))%8||r<8||r>256)throw new Error("Invalid uint<N> width: "+r);if((o=c(e)).bitLength()>r)throw new Error("Supplied uint exceeds width: "+r+" vs "+o.bitLength());if(o<0)throw new Error("Supplied uint is negative");return o.toArrayLike(Buffer,"be",32)}if(t.startsWith("int")){if((r=a(t))%8||r<8||r>256)throw new Error("Invalid int<N> width: "+r);if((o=c(e)).bitLength()>r)throw new Error("Supplied int exceeds width: "+r+" vs "+o.bitLength());return o.toTwos(256).toArrayLike(Buffer,"be",32)}if(t.startsWith("ufixed")){if(r=u(t),(o=c(e))<0)throw new Error("Supplied ufixed is negative");return f("uint256",o.mul(new i(2).pow(new i(r[1]))))}if(t.startsWith("fixed"))return r=u(t),f("int256",c(e).mul(new i(2).pow(new i(r[1]))));throw new Error("Unsupported or invalid type: "+t)}function d(t,e,r){var n,o,s,a;if("string"==typeof t&&(t=p(t)),"address"===t.name)return d(t.rawType,e,r).toArrayLike(Buffer,"be",20).toString("hex");if("bool"===t.name)return d(t.rawType,e,r).toString()===new i(1).toString();if("string"===t.name){var u=d(t.rawType,e,r);return Buffer.from(u,"utf8").toString()}if(t.isArray){for(s=[],n=t.size,"dynamic"===t.size&&(r=d("uint256",e,r).toNumber(),n=d("uint256",e,r).toNumber(),r+=32),a=0;a<n;a++){var h=d(t.subArray,e,r);s.push(h),r+=t.subArray.memoryUsage}return s}if("bytes"===t.name)return r=d("uint256",e,r).toNumber(),n=d("uint256",e,r).toNumber(),e.slice(r+32,r+32+n);if(t.name.startsWith("bytes"))return e.slice(r,r+t.size);if(t.name.startsWith("uint")){if((o=new i(e.slice(r,r+32),16,"be")).bitLength()>t.size)throw new Error("Decoded int exceeds width: "+t.size+" vs "+o.bitLength());return o}if(t.name.startsWith("int")){if((o=new i(e.slice(r,r+32),16,"be").fromTwos(256)).bitLength()>t.size)throw new Error("Decoded uint exceeds width: "+t.size+" vs "+o.bitLength());return o}if(t.name.startsWith("ufixed")){if(n=new i(2).pow(new i(t.size[1])),!(o=d("uint256",e,r)).mod(n).isZero())throw new Error("Decimals not supported yet");return o.div(n)}if(t.name.startsWith("fixed")){if(n=new i(2).pow(new i(t.size[1])),!(o=d("int256",e,r)).mod(n).isZero())throw new Error("Decimals not supported yet");return o.div(n)}throw new Error("Unsupported or invalid type: "+t.name)}function p(t){var e,r,n;if(g(t)){e=h(t);var i=t.slice(0,t.lastIndexOf("["));return i=p(i),{isArray:!0,name:t,size:e,memoryUsage:"dynamic"===e?32:i.memoryUsage*e,subArray:i}}switch(t){case"address":n="uint160";break;case"bool":n="uint8";break;case"string":n="bytes"}if(r={rawType:n,name:t,memoryUsage:32},t.startsWith("bytes")&&"bytes"!==t||t.startsWith("uint")||t.startsWith("int")?r.size=a(t):(t.startsWith("ufixed")||t.startsWith("fixed"))&&(r.size=u(t)),t.startsWith("bytes")&&"bytes"!==t&&(r.size<1||r.size>32))throw new Error("Invalid bytes<N> width: "+r.size);if((t.startsWith("uint")||t.startsWith("int"))&&(r.size%8||r.size<8||r.size>256))throw new Error("Invalid int/uint<N> width: "+r.size);return r}function m(t){return"string"===t||"bytes"===t||"dynamic"===h(t)}function g(t){return t.lastIndexOf("]")===t.length-1}function v(t,e){return t.startsWith("address")||t.startsWith("bytes")?"0x"+e.toString("hex"):e.toString()}o.eventID=function(t,e){var r=t+"("+e.map(s).join(",")+")";return n.keccak256(Buffer.from(r))},o.methodID=function(t,e){return o.eventID(t,e).slice(0,4)},o.rawEncode=function(t,e){var r=[],n=[],i=0;t.forEach((function(t){if(g(t)){var e=h(t);i+="dynamic"!==e?32*e:32}else i+=32}));for(var o=0;o<t.length;o++){var a=s(t[o]),u=f(a,e[o]);m(a)?(r.push(f("uint256",i)),n.push(u),i+=u.length):r.push(u)}return Buffer.concat(r.concat(n))},o.rawDecode=function(t,e){var r=[];e=Buffer.from(e);for(var n=0,i=0;i<t.length;i++){var o=p(s(t[i])),a=d(o,e,n);n+=o.memoryUsage,r.push(a)}return r},o.simpleEncode=function(t){var e=Array.prototype.slice.call(arguments).slice(1),r=l(t);if(e.length!==r.args.length)throw new Error("Argument count mismatch");return Buffer.concat([o.methodID(r.method,r.args),o.rawEncode(r.args,e)])},o.simpleDecode=function(t,e){var r=l(t);if(!r.retargs)throw new Error("No return values in method");return o.rawDecode(r.retargs,e)},o.stringify=function(t,e){var r=[];for(var n in t){var i=t[n],o=e[n];o=/^[^\[]+\[.*\]$/.test(i)?o.map((function(t){return v(i,t)})).join(", "):v(i,o),r.push(o)}return r},o.solidityHexValue=function(t,e,r){var i,s;if(g(t)){var u=t.replace(/\[.*?\]/,"");if(!g(u)){var l=h(t);if("dynamic"!==l&&0!==l&&e.length>l)throw new Error("Elements exceed array size: "+l)}var f=e.map((function(t){return o.solidityHexValue(u,t,256)}));return Buffer.concat(f)}if("bytes"===t)return e;if("string"===t)return Buffer.from(e,"utf8");if("bool"===t){r=r||8;var d=Array(r/4).join("0");return Buffer.from(e?d+"1":d+"0","hex")}if("address"===t){var p=20;return r&&(p=r/8),n.setLengthLeft(e,p)}if(t.startsWith("bytes")){if((i=a(t))<1||i>32)throw new Error("Invalid bytes<N> width: "+i);return n.setLengthRight(e,i)}if(t.startsWith("uint")){if((i=a(t))%8||i<8||i>256)throw new Error("Invalid uint<N> width: "+i);if((s=c(e)).bitLength()>i)throw new Error("Supplied uint exceeds width: "+i+" vs "+s.bitLength());return r=r||i,s.toArrayLike(Buffer,"be",r/8)}if(t.startsWith("int")){if((i=a(t))%8||i<8||i>256)throw new Error("Invalid int<N> width: "+i);if((s=c(e)).bitLength()>i)throw new Error("Supplied int exceeds width: "+i+" vs "+s.bitLength());return r=r||i,s.toTwos(i).toArrayLike(Buffer,"be",r/8)}throw new Error("Unsupported or invalid type: "+t)},o.solidityPack=function(t,e){if(t.length!==e.length)throw new Error("Number of types are not matching the values");for(var r=[],n=0;n<t.length;n++){var i=s(t[n]),a=e[n];r.push(o.solidityHexValue(i,a,null))}return Buffer.concat(r)},o.soliditySHA3=function(t,e){return n.keccak256(o.solidityPack(t,e))},o.soliditySHA256=function(t,e){return n.sha256(o.solidityPack(t,e))},o.solidityRIPEMD160=function(t,e){return n.ripemd160(o.solidityPack(t,e),!0)},o.fromSerpent=function(t){for(var e,r=[],n=0;n<t.length;n++){var i=t[n];if("s"===i)r.push("bytes");else if("b"===i){for(var o="bytes",s=n+1;s<t.length&&(e=t[s])>="0"&&e<="9";)o+=t[s]-"0",s++;n=s-1,r.push(o)}else if("i"===i)r.push("int256");else{if("a"!==i)throw new Error("Unsupported or invalid type: "+i);r.push("int256[]")}}return r},o.toSerpent=function(t){for(var e=[],r=0;r<t.length;r++){var n=t[r];if("bytes"===n)e.push("s");else if(n.startsWith("bytes"))e.push("b"+a(n));else if("int256"===n)e.push("i");else{if("int256[]"!==n)throw new Error("Unsupported or invalid type: "+n);e.push("a")}}return e.join("")},t.exports=o},35957:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.importPublic=e.privateToPublic=e.privateToAddress=e.publicToAddress=e.pubToAddress=e.isValidPublic=e.isValidPrivate=e.isPrecompiled=e.generateAddress2=e.generateAddress=e.isValidChecksumAddress=e.toChecksumAddress=e.isZeroAddress=e.isValidAddress=e.zeroAddress=void 0;var n=r(48583),i=r(80884),o=r(25739),s=r(46351),a=r(98128),u=r(46866);e.zeroAddress=function(){var t=a.zeros(20);return a.bufferToHex(t)},e.isValidAddress=function(t){return/^0x[0-9a-fA-F]{40}$/.test(t)},e.isZeroAddress=function(t){return e.zeroAddress()===a.addHexPrefix(t)},e.toChecksumAddress=function(t,e){t=i.stripHexPrefix(t).toLowerCase();for(var r=void 0!==e?e.toString()+"0x":"",n=u.keccak(r+t).toString("hex"),o="0x",s=0;s<t.length;s++)parseInt(n[s],16)>=8?o+=t[s].toUpperCase():o+=t[s];return o},e.isValidChecksumAddress=function(t,r){return e.isValidAddress(t)&&e.toChecksumAddress(t,r)===t},e.generateAddress=function(t,e){t=a.toBuffer(t);var r=new s(e);return r.isZero()?u.rlphash([t,null]).slice(-20):u.rlphash([t,Buffer.from(r.toArray())]).slice(-20)},e.generateAddress2=function(t,e,r){var i=a.toBuffer(t),o=a.toBuffer(e),s=a.toBuffer(r);return n(20===i.length),n(32===o.length),u.keccak256(Buffer.concat([Buffer.from("ff","hex"),i,o,u.keccak256(s)])).slice(-20)},e.isPrecompiled=function(t){var e=a.unpad(t);return 1===e.length&&e[0]>=1&&e[0]<=8},e.isValidPrivate=function(t){return o.privateKeyVerify(t)},e.isValidPublic=function(t,e){return void 0===e&&(e=!1),64===t.length?o.publicKeyVerify(Buffer.concat([Buffer.from([4]),t])):!!e&&o.publicKeyVerify(t)},e.pubToAddress=function(t,e){return void 0===e&&(e=!1),t=a.toBuffer(t),e&&64!==t.length&&(t=o.publicKeyConvert(t,!1).slice(1)),n(64===t.length),u.keccak(t).slice(-20)},e.publicToAddress=e.pubToAddress,e.privateToAddress=function(t){return e.publicToAddress(e.privateToPublic(t))},e.privateToPublic=function(t){return t=a.toBuffer(t),o.publicKeyCreate(t,!1).slice(1)},e.importPublic=function(t){return 64!==(t=a.toBuffer(t)).length&&(t=o.publicKeyConvert(t,!1).slice(1)),t}},98128:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.baToJSON=e.addHexPrefix=e.toUnsigned=e.fromSigned=e.bufferToHex=e.bufferToInt=e.toBuffer=e.stripZeros=e.unpad=e.setLengthRight=e.setLength=e.setLengthLeft=e.zeros=void 0;var n=r(80884),i=r(46351);e.zeros=function(t){return Buffer.allocUnsafe(t).fill(0)},e.setLengthLeft=function(t,r,n){void 0===n&&(n=!1);var i=e.zeros(r);return t=e.toBuffer(t),n?t.length<r?(t.copy(i),i):t.slice(0,r):t.length<r?(t.copy(i,r-t.length),i):t.slice(-r)},e.setLength=e.setLengthLeft,e.setLengthRight=function(t,r){return e.setLength(t,r,!0)},e.unpad=function(t){for(var e=(t=n.stripHexPrefix(t))[0];t.length>0&&"0"===e.toString();)e=(t=t.slice(1))[0];return t},e.stripZeros=e.unpad,e.toBuffer=function(t){if(!Buffer.isBuffer(t))if(Array.isArray(t))t=Buffer.from(t);else if("string"==typeof t){if(!n.isHexString(t))throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: "+t);t=Buffer.from(n.padToEven(n.stripHexPrefix(t)),"hex")}else if("number"==typeof t)t=n.intToBuffer(t);else if(null==t)t=Buffer.allocUnsafe(0);else if(i.isBN(t))t=t.toArrayLike(Buffer);else{if(!t.toArray)throw new Error("invalid type");t=Buffer.from(t.toArray())}return t},e.bufferToInt=function(t){return new i(e.toBuffer(t)).toNumber()},e.bufferToHex=function(t){return"0x"+(t=e.toBuffer(t)).toString("hex")},e.fromSigned=function(t){return new i(t).fromTwos(256)},e.toUnsigned=function(t){return Buffer.from(t.toTwos(256).toArray())},e.addHexPrefix=function(t){return"string"!=typeof t||n.isHexPrefixed(t)?t:"0x"+t},e.baToJSON=function(t){if(Buffer.isBuffer(t))return"0x"+t.toString("hex");if(t instanceof Array){for(var r=[],n=0;n<t.length;n++)r.push(e.baToJSON(t[n]));return r}}},31142:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.KECCAK256_RLP=e.KECCAK256_RLP_S=e.KECCAK256_RLP_ARRAY=e.KECCAK256_RLP_ARRAY_S=e.KECCAK256_NULL=e.KECCAK256_NULL_S=e.TWO_POW256=e.MAX_INTEGER=void 0;var n=r(46351);e.MAX_INTEGER=new n("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",16),e.TWO_POW256=new n("10000000000000000000000000000000000000000000000000000000000000000",16),e.KECCAK256_NULL_S="c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",e.KECCAK256_NULL=Buffer.from(e.KECCAK256_NULL_S,"hex"),e.KECCAK256_RLP_ARRAY_S="1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",e.KECCAK256_RLP_ARRAY=Buffer.from(e.KECCAK256_RLP_ARRAY_S,"hex"),e.KECCAK256_RLP_S="56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",e.KECCAK256_RLP=Buffer.from(e.KECCAK256_RLP_S,"hex")},46866:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.rlphash=e.ripemd160=e.sha256=e.keccak256=e.keccak=void 0;var n=r(82192),i=n.keccak224,o=n.keccak384,s=n.keccak256,a=n.keccak512,u=r(23482),h=r(80884),c=r(51675),l=r(98128);e.keccak=function(t,e){switch(void 0===e&&(e=256),t="string"!=typeof t||h.isHexString(t)?l.toBuffer(t):Buffer.from(t,"utf8"),e||(e=256),e){case 224:return i(t);case 256:return s(t);case 384:return o(t);case 512:return a(t);default:throw new Error("Invald algorithm: keccak"+e)}},e.keccak256=function(t){return e.keccak(t)},e.sha256=function(t){return t=l.toBuffer(t),u("sha256").update(t).digest()},e.ripemd160=function(t,e){t=l.toBuffer(t);var r=u("rmd160").update(t).digest();return!0===e?l.setLength(r,32):r},e.rlphash=function(t){return e.keccak(c.encode(t))}},51184:function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),i=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||e.hasOwnProperty(r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),e.secp256k1=e.rlp=e.BN=void 0;var o=r(25739);e.secp256k1=o;var s=r(80884),a=r(46351);e.BN=a;var u=r(51675);e.rlp=u,Object.assign(e,s),i(r(31142),e),i(r(35957),e),i(r(46866),e),i(r(26308),e),i(r(98128),e),i(r(68716),e)},68716:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.defineProperties=void 0;var n=r(48583),i=r(80884),o=r(51675),s=r(98128);e.defineProperties=function(t,e,r){if(t.raw=[],t._fields=[],t.toJSON=function(e){if(void 0===e&&(e=!1),e){var r={};return t._fields.forEach((function(e){r[e]="0x"+t[e].toString("hex")})),r}return s.baToJSON(t.raw)},t.serialize=function(){return o.encode(t.raw)},e.forEach((function(e,r){function i(){return t.raw[r]}function o(i){"00"!==(i=s.toBuffer(i)).toString("hex")||e.allowZero||(i=Buffer.allocUnsafe(0)),e.allowLess&&e.length?(i=s.stripZeros(i),n(e.length>=i.length,"The field "+e.name+" must not have more "+e.length+" bytes")):e.allowZero&&0===i.length||!e.length||n(e.length===i.length,"The field "+e.name+" must have byte length of "+e.length),t.raw[r]=i}t._fields.push(e.name),Object.defineProperty(t,e.name,{enumerable:!0,configurable:!0,get:i,set:o}),e.default&&(t[e.name]=e.default),e.alias&&Object.defineProperty(t,e.alias,{enumerable:!1,configurable:!0,set:o,get:i})})),r)if("string"==typeof r&&(r=Buffer.from(i.stripHexPrefix(r),"hex")),Buffer.isBuffer(r)&&(r=o.decode(r)),Array.isArray(r)){if(r.length>t._fields.length)throw new Error("wrong number of fields in data");r.forEach((function(e,r){t[t._fields[r]]=s.toBuffer(e)}))}else{if("object"!=typeof r)throw new Error("invalid data");var a=Object.keys(r);e.forEach((function(e){-1!==a.indexOf(e.name)&&(t[e.name]=r[e.name]),-1!==a.indexOf(e.alias)&&(t[e.alias]=r[e.alias])}))}}},25739:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ecdhUnsafe=e.ecdh=e.recover=e.verify=e.sign=e.signatureImportLax=e.signatureImport=e.signatureExport=e.signatureNormalize=e.publicKeyCombine=e.publicKeyTweakMul=e.publicKeyTweakAdd=e.publicKeyVerify=e.publicKeyConvert=e.publicKeyCreate=e.privateKeyTweakMul=e.privateKeyTweakAdd=e.privateKeyModInverse=e.privateKeyNegate=e.privateKeyImport=e.privateKeyExport=e.privateKeyVerify=void 0;var n=r(95053),i=r(15207),o=r(3651);e.privateKeyVerify=function(t){return 32===t.length&&n.privateKeyVerify(Uint8Array.from(t))},e.privateKeyExport=function(t,e){if(32!==t.length)throw new RangeError("private key length is invalid");var r=i.privateKeyExport(t,e);return o.privateKeyExport(t,r,e)},e.privateKeyImport=function(t){if(null!==(t=o.privateKeyImport(t))&&32===t.length&&e.privateKeyVerify(t))return t;throw new Error("couldn't import from DER format")},e.privateKeyNegate=function(t){return Buffer.from(n.privateKeyNegate(Uint8Array.from(t)))},e.privateKeyModInverse=function(t){if(32!==t.length)throw new Error("private key length is invalid");return Buffer.from(i.privateKeyModInverse(Uint8Array.from(t)))},e.privateKeyTweakAdd=function(t,e){return Buffer.from(n.privateKeyTweakAdd(Uint8Array.from(t),e))},e.privateKeyTweakMul=function(t,e){return Buffer.from(n.privateKeyTweakMul(Uint8Array.from(t),Uint8Array.from(e)))},e.publicKeyCreate=function(t,e){return Buffer.from(n.publicKeyCreate(Uint8Array.from(t),e))},e.publicKeyConvert=function(t,e){return Buffer.from(n.publicKeyConvert(Uint8Array.from(t),e))},e.publicKeyVerify=function(t){return(33===t.length||65===t.length)&&n.publicKeyVerify(Uint8Array.from(t))},e.publicKeyTweakAdd=function(t,e,r){return Buffer.from(n.publicKeyTweakAdd(Uint8Array.from(t),Uint8Array.from(e),r))},e.publicKeyTweakMul=function(t,e,r){return Buffer.from(n.publicKeyTweakMul(Uint8Array.from(t),Uint8Array.from(e),r))},e.publicKeyCombine=function(t,e){var r=[];return t.forEach((function(t){r.push(Uint8Array.from(t))})),Buffer.from(n.publicKeyCombine(r,e))},e.signatureNormalize=function(t){return Buffer.from(n.signatureNormalize(Uint8Array.from(t)))},e.signatureExport=function(t){return Buffer.from(n.signatureExport(Uint8Array.from(t)))},e.signatureImport=function(t){return Buffer.from(n.signatureImport(Uint8Array.from(t)))},e.signatureImportLax=function(t){if(0===t.length)throw new RangeError("signature length is invalid");var e=o.signatureImportLax(t);if(null===e)throw new Error("couldn't parse DER signature");return i.signatureImport(e)},e.sign=function(t,e,r){if(null===r)throw new TypeError("options should be an Object");var i=void 0;if(r){if(i={},null===r.data)throw new TypeError("options.data should be a Buffer");if(r.data){if(32!=r.data.length)throw new RangeError("options.data length is invalid");i.data=new Uint8Array(r.data)}if(null===r.noncefn)throw new TypeError("options.noncefn should be a Function");r.noncefn&&(i.noncefn=function(t,e,n,i,o){var s=null!=n?Buffer.from(n):null,a=null!=i?Buffer.from(i):null,u=Buffer.from("");return r.noncefn&&(u=r.noncefn(Buffer.from(t),Buffer.from(e),s,a,o)),new Uint8Array(u)})}var o=n.ecdsaSign(Uint8Array.from(t),Uint8Array.from(e),i);return{signature:Buffer.from(o.signature),recovery:o.recid}},e.verify=function(t,e,r){return n.ecdsaVerify(Uint8Array.from(e),Uint8Array.from(t),r)},e.recover=function(t,e,r,i){return Buffer.from(n.ecdsaRecover(Uint8Array.from(e),r,Uint8Array.from(t),i))},e.ecdh=function(t,e){return Buffer.from(n.ecdh(Uint8Array.from(t),Uint8Array.from(e),{}))},e.ecdhUnsafe=function(t,e,r){if(33!==t.length&&65!==t.length)throw new RangeError("public key length is invalid");if(32!==e.length)throw new RangeError("private key length is invalid");return Buffer.from(i.ecdhUnsafe(Uint8Array.from(t),Uint8Array.from(e),r))}},3651:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=Buffer.from([48,129,211,2,1,1,4,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,129,133,48,129,130,2,1,1,48,44,6,7,42,134,72,206,61,1,1,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,252,47,48,6,4,1,0,4,1,7,4,33,2,121,190,102,126,249,220,187,172,85,160,98,149,206,135,11,7,2,155,252,219,45,206,40,217,89,242,129,91,22,248,23,152,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,186,174,220,230,175,72,160,59,191,210,94,140,208,54,65,65,2,1,1,161,36,3,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),n=Buffer.from([48,130,1,19,2,1,1,4,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,129,165,48,129,162,2,1,1,48,44,6,7,42,134,72,206,61,1,1,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,252,47,48,6,4,1,0,4,1,7,4,65,4,121,190,102,126,249,220,187,172,85,160,98,149,206,135,11,7,2,155,252,219,45,206,40,217,89,242,129,91,22,248,23,152,72,58,218,119,38,163,196,101,93,164,251,252,14,17,8,168,253,23,180,72,166,133,84,25,156,71,208,143,251,16,212,184,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,186,174,220,230,175,72,160,59,191,210,94,140,208,54,65,65,2,1,1,161,68,3,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);e.privateKeyExport=function(t,e,i){void 0===i&&(i=!0);var o=Buffer.from(i?r:n);return t.copy(o,i?8:9),e.copy(o,i?181:214),o},e.privateKeyImport=function(t){var e=t.length,r=0;if(e<r+1||48!==t[r])return null;if(e<(r+=1)+1||!(128&t[r]))return null;var n=127&t[r];if(n<1||n>2)return null;if(e<(r+=1)+n)return null;var i=t[r+n-1]|(n>1?t[r+n-2]<<8:0);return e<(r+=n)+i||e<r+3||2!==t[r]||1!==t[r+1]||1!==t[r+2]||e<(r+=3)+2||4!==t[r]||t[r+1]>32||e<r+2+t[r+1]?null:t.slice(r+2,r+2+t[r+1])},e.signatureImportLax=function(t){var e=Buffer.alloc(32,0),r=Buffer.alloc(32,0),n=t.length,i=0;if(48!==t[i++])return null;var o=t[i++];if(128&o&&(i+=o-128)>n)return null;if(2!==t[i++])return null;var s=t[i++];if(128&s){if(i+(o=s-128)>n)return null;for(;o>0&&0===t[i];i+=1,o-=1);for(s=0;o>0;i+=1,o-=1)s=(s<<8)+t[i]}if(s>n-i)return null;var a=i;if(i+=s,2!==t[i++])return null;var u=t[i++];if(128&u){if(i+(o=u-128)>n)return null;for(;o>0&&0===t[i];i+=1,o-=1);for(u=0;o>0;i+=1,o-=1)u=(u<<8)+t[i]}if(u>n-i)return null;var h=i;for(i+=u;s>0&&0===t[a];s-=1,a+=1);if(s>32)return null;var c=t.slice(a,a+s);for(c.copy(e,32-c.length);u>0&&0===t[h];u-=1,h+=1);if(u>32)return null;var l=t.slice(h,h+u);return l.copy(r,32-l.length),{r:e,s:r}}},15207:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(46351),i=new(0,r(86266).ec)("secp256k1"),o=i.curve;e.privateKeyExport=function(t,e){void 0===e&&(e=!0);var r=new n(t);if(r.ucmp(o.n)>=0)throw new Error("couldn't export to DER format");var a=i.g.mul(r);return s(a.getX(),a.getY(),e)},e.privateKeyModInverse=function(t){var e=new n(t);if(e.ucmp(o.n)>=0||e.isZero())throw new Error("private key range is invalid");return e.invm(o.n).toArrayLike(Buffer,"be",32)},e.signatureImport=function(t){var e=new n(t.r);e.ucmp(o.n)>=0&&(e=new n(0));var r=new n(t.s);return r.ucmp(o.n)>=0&&(r=new n(0)),Buffer.concat([e.toArrayLike(Buffer,"be",32),r.toArrayLike(Buffer,"be",32)])},e.ecdhUnsafe=function(t,e,r){void 0===r&&(r=!0);var a=i.keyFromPublic(t),u=new n(e);if(u.ucmp(o.n)>=0||u.isZero())throw new Error("scalar was invalid (zero or overflow)");var h=a.pub.mul(u);return s(h.getX(),h.getY(),r)};var s=function(t,e,r){var n;return r?((n=Buffer.alloc(33))[0]=e.isOdd()?3:2,t.toArrayLike(Buffer,"be",32).copy(n,1)):((n=Buffer.alloc(65))[0]=4,t.toArrayLike(Buffer,"be",32).copy(n,1),e.toArrayLike(Buffer,"be",32).copy(n,33)),n}},26308:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.hashPersonalMessage=e.isValidSignature=e.fromRpcSig=e.toRpcSig=e.ecrecover=e.ecsign=void 0;var n=r(25739),i=r(46351),o=r(98128),s=r(46866);function a(t,e){return e?t-(2*e+35):t-27}function u(t){return 0===t||1===t}e.ecsign=function(t,e,r){var i=n.sign(t,e),o=i.recovery;return{r:i.signature.slice(0,32),s:i.signature.slice(32,64),v:r?o+(2*r+35):o+27}},e.ecrecover=function(t,e,r,i,s){var h=Buffer.concat([o.setLength(r,32),o.setLength(i,32)],64),c=a(e,s);if(!u(c))throw new Error("Invalid signature v value");var l=n.recover(t,h,c);return n.publicKeyConvert(l,!1).slice(1)},e.toRpcSig=function(t,e,r,n){if(!u(a(t,n)))throw new Error("Invalid signature v value");return o.bufferToHex(Buffer.concat([o.setLengthLeft(e,32),o.setLengthLeft(r,32),o.toBuffer(t)]))},e.fromRpcSig=function(t){var e=o.toBuffer(t);if(65!==e.length)throw new Error("Invalid signature length");var r=e[64];return r<27&&(r+=27),{v:r,r:e.slice(0,32),s:e.slice(32,64)}},e.isValidSignature=function(t,e,r,n,o){void 0===n&&(n=!0);var s=new i("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0",16),h=new i("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",16);if(32!==e.length||32!==r.length)return!1;if(!u(a(t,o)))return!1;var c=new i(e),l=new i(r);return!(c.isZero()||c.gt(h)||l.isZero()||l.gt(h)||n&&1===l.cmp(s))},e.hashPersonalMessage=function(t){var e=Buffer.from("Ethereum Signed Message:\n"+t.length.toString(),"utf-8");return s.keccak(Buffer.concat([e,t]))}},13342:(t,e,r)=>{"use strict";var n=r(74865),i=r(34289),o=n.BN,s=new o("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0",16),a=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),e=e||{};var r=[{name:"nonce",length:32,allowLess:!0,default:new Buffer([])},{name:"gasPrice",length:32,allowLess:!0,default:new Buffer([])},{name:"gasLimit",alias:"gas",length:32,allowLess:!0,default:new Buffer([])},{name:"to",allowZero:!0,length:20,default:new Buffer([])},{name:"value",length:32,allowLess:!0,default:new Buffer([])},{name:"data",alias:"input",allowZero:!0,default:new Buffer([])},{name:"v",allowZero:!0,default:new Buffer([28])},{name:"r",length:32,allowZero:!0,allowLess:!0,default:new Buffer([])},{name:"s",length:32,allowZero:!0,allowLess:!0,default:new Buffer([])}];n.defineProperties(this,r,e),Object.defineProperty(this,"from",{enumerable:!0,configurable:!0,get:this.getSenderAddress.bind(this)});var i=n.bufferToInt(this.v),o=Math.floor((i-35)/2);o<0&&(o=0),this._chainId=o||e.chainId||0,this._homestead=!0}return t.prototype.toCreationAddress=function(){return""===this.to.toString("hex")},t.prototype.hash=function(t){void 0===t&&(t=!0);var e=void 0;if(t)e=this.raw;else if(this._chainId>0){var r=this.raw.slice();this.v=this._chainId,this.r=0,this.s=0,e=this.raw,this.raw=r}else e=this.raw.slice(0,6);return n.rlphash(e)},t.prototype.getChainId=function(){return this._chainId},t.prototype.getSenderAddress=function(){if(this._from)return this._from;var t=this.getSenderPublicKey();return this._from=n.publicToAddress(t),this._from},t.prototype.getSenderPublicKey=function(){if(!(this._senderPubKey&&this._senderPubKey.length||this.verifySignature()))throw new Error("Invalid Signature");return this._senderPubKey},t.prototype.verifySignature=function(){var t=this.hash(!1);if(this._homestead&&1===new o(this.s).cmp(s))return!1;try{var e=n.bufferToInt(this.v);this._chainId>0&&(e-=2*this._chainId+8),this._senderPubKey=n.ecrecover(t,e,this.r,this.s)}catch(t){return!1}return!!this._senderPubKey},t.prototype.sign=function(t){var e=this.hash(!1),r=n.ecsign(e,t);this._chainId>0&&(r.v+=2*this._chainId+8),Object.assign(this,r)},t.prototype.getDataFee=function(){for(var t=this.raw[5],e=new o(0),r=0;r<t.length;r++)0===t[r]?e.iaddn(i.txDataZeroGas.v):e.iaddn(i.txDataNonZeroGas.v);return e},t.prototype.getBaseFee=function(){var t=this.getDataFee().iaddn(i.txGas.v);return this._homestead&&this.toCreationAddress()&&t.iaddn(i.txCreation.v),t},t.prototype.getUpfrontCost=function(){return new o(this.gasLimit).imul(new o(this.gasPrice)).iadd(new o(this.value))},t.prototype.validate=function(t){var e=[];return this.verifySignature()||e.push("Invalid Signature"),this.getBaseFee().cmp(new o(this.gasLimit))>0&&e.push(["gas limit is too low. Need at least "+this.getBaseFee()]),void 0===t||!1===t?0===e.length:e.join(" ")},t}();t.exports=a},74865:(t,e,r)=>{"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=r(82192),o=i.keccak224,s=i.keccak384,a=i.keccak256,u=i.keccak512,h=r(31211),c=r(48583),l=r(51675),f=r(46351),d=r(23482),p=r(89509).Buffer;Object.assign(e,r(80884)),e.MAX_INTEGER=new f("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",16),e.TWO_POW256=new f("10000000000000000000000000000000000000000000000000000000000000000",16),e.KECCAK256_NULL_S="c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",e.SHA3_NULL_S=e.KECCAK256_NULL_S,e.KECCAK256_NULL=p.from(e.KECCAK256_NULL_S,"hex"),e.SHA3_NULL=e.KECCAK256_NULL,e.KECCAK256_RLP_ARRAY_S="1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",e.SHA3_RLP_ARRAY_S=e.KECCAK256_RLP_ARRAY_S,e.KECCAK256_RLP_ARRAY=p.from(e.KECCAK256_RLP_ARRAY_S,"hex"),e.SHA3_RLP_ARRAY=e.KECCAK256_RLP_ARRAY,e.KECCAK256_RLP_S="56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",e.SHA3_RLP_S=e.KECCAK256_RLP_S,e.KECCAK256_RLP=p.from(e.KECCAK256_RLP_S,"hex"),e.SHA3_RLP=e.KECCAK256_RLP,e.BN=f,e.rlp=l,e.secp256k1=h,e.zeros=function(t){return p.allocUnsafe(t).fill(0)},e.zeroAddress=function(){var t=e.zeros(20);return e.bufferToHex(t)},e.setLengthLeft=e.setLength=function(t,r,n){var i=e.zeros(r);return t=e.toBuffer(t),n?t.length<r?(t.copy(i),i):t.slice(0,r):t.length<r?(t.copy(i,r-t.length),i):t.slice(-r)},e.setLengthRight=function(t,r){return e.setLength(t,r,!0)},e.unpad=e.stripZeros=function(t){for(var r=(t=e.stripHexPrefix(t))[0];t.length>0&&"0"===r.toString();)r=(t=t.slice(1))[0];return t},e.toBuffer=function(t){if(!p.isBuffer(t))if(Array.isArray(t))t=p.from(t);else if("string"==typeof t)t=e.isHexString(t)?p.from(e.padToEven(e.stripHexPrefix(t)),"hex"):p.from(t);else if("number"==typeof t)t=e.intToBuffer(t);else if(null==t)t=p.allocUnsafe(0);else if(f.isBN(t))t=t.toArrayLike(p);else{if(!t.toArray)throw new Error("invalid type");t=p.from(t.toArray())}return t},e.bufferToInt=function(t){return new f(e.toBuffer(t)).toNumber()},e.bufferToHex=function(t){return"0x"+(t=e.toBuffer(t)).toString("hex")},e.fromSigned=function(t){return new f(t).fromTwos(256)},e.toUnsigned=function(t){return p.from(t.toTwos(256).toArray())},e.keccak=function(t,r){switch(t=e.toBuffer(t),r||(r=256),r){case 224:return o(t);case 256:return a(t);case 384:return s(t);case 512:return u(t);default:throw new Error("Invald algorithm: keccak"+r)}},e.keccak256=function(t){return e.keccak(t)},e.sha3=e.keccak,e.sha256=function(t){return t=e.toBuffer(t),d("sha256").update(t).digest()},e.ripemd160=function(t,r){t=e.toBuffer(t);var n=d("rmd160").update(t).digest();return!0===r?e.setLength(n,32):n},e.rlphash=function(t){return e.keccak(l.encode(t))},e.isValidPrivate=function(t){return h.privateKeyVerify(t)},e.isValidPublic=function(t,e){return 64===t.length?h.publicKeyVerify(p.concat([p.from([4]),t])):!!e&&h.publicKeyVerify(t)},e.pubToAddress=e.publicToAddress=function(t,r){return t=e.toBuffer(t),r&&64!==t.length&&(t=h.publicKeyConvert(t,!1).slice(1)),c(64===t.length),e.keccak(t).slice(-20)};var m=e.privateToPublic=function(t){return t=e.toBuffer(t),h.publicKeyCreate(t,!1).slice(1)};e.importPublic=function(t){return 64!==(t=e.toBuffer(t)).length&&(t=h.publicKeyConvert(t,!1).slice(1)),t},e.ecsign=function(t,e){var r=h.sign(t,e),n={};return n.r=r.signature.slice(0,32),n.s=r.signature.slice(32,64),n.v=r.recovery+27,n},e.hashPersonalMessage=function(t){var r=e.toBuffer("Ethereum Signed Message:\n"+t.length.toString());return e.keccak(p.concat([r,t]))},e.ecrecover=function(t,r,n,i){var o=p.concat([e.setLength(n,32),e.setLength(i,32)],64),s=r-27;if(0!==s&&1!==s)throw new Error("Invalid signature v value");var a=h.recover(t,o,s);return h.publicKeyConvert(a,!1).slice(1)},e.toRpcSig=function(t,r,n){if(27!==t&&28!==t)throw new Error("Invalid recovery id");return e.bufferToHex(p.concat([e.setLengthLeft(r,32),e.setLengthLeft(n,32),e.toBuffer(t-27)]))},e.fromRpcSig=function(t){if(65!==(t=e.toBuffer(t)).length)throw new Error("Invalid signature length");var r=t[64];return r<27&&(r+=27),{v:r,r:t.slice(0,32),s:t.slice(32,64)}},e.privateToAddress=function(t){return e.publicToAddress(m(t))},e.isValidAddress=function(t){return/^0x[0-9a-fA-F]{40}$/.test(t)},e.isZeroAddress=function(t){return e.zeroAddress()===e.addHexPrefix(t)},e.toChecksumAddress=function(t){t=e.stripHexPrefix(t).toLowerCase();for(var r=e.keccak(t).toString("hex"),n="0x",i=0;i<t.length;i++)parseInt(r[i],16)>=8?n+=t[i].toUpperCase():n+=t[i];return n},e.isValidChecksumAddress=function(t){return e.isValidAddress(t)&&e.toChecksumAddress(t)===t},e.generateAddress=function(t,r){return t=e.toBuffer(t),r=(r=new f(r)).isZero()?null:p.from(r.toArray()),e.rlphash([t,r]).slice(-20)},e.isPrecompiled=function(t){var r=e.unpad(t);return 1===r.length&&r[0]>=1&&r[0]<=8},e.addHexPrefix=function(t){return"string"!=typeof t||e.isHexPrefixed(t)?t:"0x"+t},e.isValidSignature=function(t,e,r,n){var i=new f("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0",16),o=new f("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",16);return!(32!==e.length||32!==r.length||27!==t&&28!==t||(e=new f(e),r=new f(r),e.isZero()||e.gt(o)||r.isZero()||r.gt(o)||!1===n&&1===new f(r).cmp(i)))},e.baToJSON=function(t){if(p.isBuffer(t))return"0x"+t.toString("hex");if(t instanceof Array){for(var r=[],n=0;n<t.length;n++)r.push(e.baToJSON(t[n]));return r}},e.defineProperties=function(t,r,i){if(t.raw=[],t._fields=[],t.toJSON=function(r){if(r){var n={};return t._fields.forEach((function(e){n[e]="0x"+t[e].toString("hex")})),n}return e.baToJSON(this.raw)},t.serialize=function(){return l.encode(t.raw)},r.forEach((function(r,n){function i(){return t.raw[n]}function o(i){"00"!==(i=e.toBuffer(i)).toString("hex")||r.allowZero||(i=p.allocUnsafe(0)),r.allowLess&&r.length?(i=e.stripZeros(i),c(r.length>=i.length,"The field "+r.name+" must not have more "+r.length+" bytes")):r.allowZero&&0===i.length||!r.length||c(r.length===i.length,"The field "+r.name+" must have byte length of "+r.length),t.raw[n]=i}t._fields.push(r.name),Object.defineProperty(t,r.name,{enumerable:!0,configurable:!0,get:i,set:o}),r.default&&(t[r.name]=r.default),r.alias&&Object.defineProperty(t,r.alias,{enumerable:!1,configurable:!0,set:o,get:i})})),i)if("string"==typeof i&&(i=p.from(e.stripHexPrefix(i),"hex")),p.isBuffer(i)&&(i=l.decode(i)),Array.isArray(i)){if(i.length>t._fields.length)throw new Error("wrong number of fields in data");i.forEach((function(r,n){t[t._fields[n]]=e.toBuffer(r)}))}else{if("object"!==(void 0===i?"undefined":n(i)))throw new Error("invalid data");var o=Object.keys(i);r.forEach((function(e){-1!==o.indexOf(e.name)&&(t[e.name]=i[e.name]),-1!==o.indexOf(e.alias)&&(t[e.alias]=i[e.alias])}))}}},31211:(t,e,r)=>{"use strict";var n=r(95053),i=r(27531),o=r(47250),s=function(t){return 32===t.length&&n.privateKeyVerify(Uint8Array.from(t))};t.exports={privateKeyVerify:s,privateKeyExport:function(t,e){if(32!==t.length)throw new RangeError("private key length is invalid");var r=i.privateKeyExport(t,e);return o.privateKeyExport(t,r,e)},privateKeyImport:function(t){if(null!==(t=o.privateKeyImport(t))&&32===t.length&&s(t))return t;throw new Error("couldn't import from DER format")},privateKeyNegate:function(t){return Buffer.from(n.privateKeyNegate(Uint8Array.from(t)))},privateKeyModInverse:function(t){if(32!==t.length)throw new Error("private key length is invalid");return Buffer.from(i.privateKeyModInverse(Uint8Array.from(t)))},privateKeyTweakAdd:function(t,e){return Buffer.from(n.privateKeyTweakAdd(Uint8Array.from(t),e))},privateKeyTweakMul:function(t,e){return Buffer.from(n.privateKeyTweakMul(Uint8Array.from(t),Uint8Array.from(e)))},publicKeyCreate:function(t,e){return Buffer.from(n.publicKeyCreate(Uint8Array.from(t),e))},publicKeyConvert:function(t,e){return Buffer.from(n.publicKeyConvert(Uint8Array.from(t),e))},publicKeyVerify:function(t){return(33===t.length||65===t.length)&&n.publicKeyVerify(Uint8Array.from(t))},publicKeyTweakAdd:function(t,e,r){return Buffer.from(n.publicKeyTweakAdd(Uint8Array.from(t),Uint8Array.from(e),r))},publicKeyTweakMul:function(t,e,r){return Buffer.from(n.publicKeyTweakMul(Uint8Array.from(t),Uint8Array.from(e),r))},publicKeyCombine:function(t,e){var r=[];return t.forEach((function(t){r.push(Uint8Array.from(t))})),Buffer.from(n.publicKeyCombine(r,e))},signatureNormalize:function(t){return Buffer.from(n.signatureNormalize(Uint8Array.from(t)))},signatureExport:function(t){return Buffer.from(n.signatureExport(Uint8Array.from(t)))},signatureImport:function(t){return Buffer.from(n.signatureImport(Uint8Array.from(t)))},signatureImportLax:function(t){if(0===t.length)throw new RangeError("signature length is invalid");var e=o.signatureImportLax(t);if(null===e)throw new Error("couldn't parse DER signature");return i.signatureImport(e)},sign:function(t,e,r){if(null===r)throw new TypeError("options should be an Object");var i=void 0;if(r){if(i={},null===r.data)throw new TypeError("options.data should be a Buffer");if(r.data){if(32!==r.data.length)throw new RangeError("options.data length is invalid");i.data=new Uint8Array(r.data)}if(null===r.noncefn)throw new TypeError("options.noncefn should be a Function");r.noncefn&&(i.noncefn=function(t,e,n,i,o){var s=null!=n?Buffer.from(n):null,a=null!=i?Buffer.from(i):null,u=Buffer.from("");return r.noncefn&&(u=r.noncefn(Buffer.from(t),Buffer.from(e),s,a,o)),Uint8Array.from(u)})}var o=n.ecdsaSign(Uint8Array.from(t),Uint8Array.from(e),i);return{signature:Buffer.from(o.signature),recovery:o.recid}},verify:function(t,e,r){return n.ecdsaVerify(Uint8Array.from(e),Uint8Array.from(t),r)},recover:function(t,e,r,i){return Buffer.from(n.ecdsaRecover(Uint8Array.from(e),r,Uint8Array.from(t),i))},ecdh:function(t,e){return Buffer.from(n.ecdh(Uint8Array.from(t),Uint8Array.from(e),{}))},ecdhUnsafe:function(t,e,r){if(33!==t.length&&65!==t.length)throw new RangeError("public key length is invalid");if(32!==e.length)throw new RangeError("private key length is invalid");return Buffer.from(i.ecdhUnsafe(Uint8Array.from(t),Uint8Array.from(e),r))}}},47250:(t,e)=>{"use strict";var r=Buffer.from([48,129,211,2,1,1,4,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,129,133,48,129,130,2,1,1,48,44,6,7,42,134,72,206,61,1,1,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,252,47,48,6,4,1,0,4,1,7,4,33,2,121,190,102,126,249,220,187,172,85,160,98,149,206,135,11,7,2,155,252,219,45,206,40,217,89,242,129,91,22,248,23,152,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,186,174,220,230,175,72,160,59,191,210,94,140,208,54,65,65,2,1,1,161,36,3,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),n=Buffer.from([48,130,1,19,2,1,1,4,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,129,165,48,129,162,2,1,1,48,44,6,7,42,134,72,206,61,1,1,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,252,47,48,6,4,1,0,4,1,7,4,65,4,121,190,102,126,249,220,187,172,85,160,98,149,206,135,11,7,2,155,252,219,45,206,40,217,89,242,129,91,22,248,23,152,72,58,218,119,38,163,196,101,93,164,251,252,14,17,8,168,253,23,180,72,166,133,84,25,156,71,208,143,251,16,212,184,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,186,174,220,230,175,72,160,59,191,210,94,140,208,54,65,65,2,1,1,161,68,3,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);e.privateKeyExport=function(t,e,i){var o=Buffer.from(i?r:n);return t.copy(o,i?8:9),e.copy(o,i?181:214),o},e.privateKeyImport=function(t){var e=t.length,r=0;if(e<r+1||48!==t[r])return null;if(e<(r+=1)+1||!(128&t[r]))return null;var n=127&t[r];if(n<1||n>2)return null;if(e<(r+=1)+n)return null;var i=t[r+n-1]|(n>1?t[r+n-2]<<8:0);return e<(r+=n)+i||e<r+3||2!==t[r]||1!==t[r+1]||1!==t[r+2]||e<(r+=3)+2||4!==t[r]||t[r+1]>32||e<r+2+t[r+1]?null:t.slice(r+2,r+2+t[r+1])},e.signatureImportLax=function(t){var e=Buffer.alloc(32,0),r=Buffer.alloc(32,0),n=t.length,i=0;if(48!==t[i++])return null;var o=t[i++];if(128&o&&(i+=o-128)>n)return null;if(2!==t[i++])return null;var s=t[i++];if(128&s){if(i+(o=s-128)>n)return null;for(;o>0&&0===t[i];i+=1,o-=1);for(s=0;o>0;i+=1,o-=1)s=(s<<8)+t[i]}if(s>n-i)return null;var a=i;if(i+=s,2!==t[i++])return null;var u=t[i++];if(128&u){if(i+(o=u-128)>n)return null;for(;o>0&&0===t[i];i+=1,o-=1);for(u=0;o>0;i+=1,o-=1)u=(u<<8)+t[i]}if(u>n-i)return null;var h=i;for(i+=u;s>0&&0===t[a];s-=1,a+=1);if(s>32)return null;var c=t.slice(a,a+s);for(c.copy(e,32-c.length);u>0&&0===t[h];u-=1,h+=1);if(u>32)return null;var l=t.slice(h,h+u);return l.copy(r,32-l.length),{r:e,s:r}}},27531:(t,e,r)=>{"use strict";var n=r(46351),i=new(0,r(86266).ec)("secp256k1"),o=i.curve;e.privateKeyExport=function(t,e){var r=new n(t);if(r.ucmp(o.n)>=0)throw new Error("couldn't export to DER format");var a=i.g.mul(r);return s(a.getX(),a.getY(),e)},e.privateKeyModInverse=function(t){var e=new n(t);if(e.ucmp(o.n)>=0||e.isZero())throw new Error("private key range is invalid");return e.invm(o.n).toArrayLike(Buffer,"be",32)},e.signatureImport=function(t){var e=new n(t.r);e.ucmp(o.n)>=0&&(e=new n(0));var r=new n(t.s);return r.ucmp(o.n)>=0&&(r=new n(0)),Buffer.concat([e.toArrayLike(Buffer,"be",32),r.toArrayLike(Buffer,"be",32)])},e.ecdhUnsafe=function(t,e,r){var a=i.keyFromPublic(t),u=new n(e);if(u.ucmp(o.n)>=0||u.isZero())throw new Error("scalar was invalid (zero or overflow)");var h=a.pub.mul(u);return s(h.getX(),h.getY(),r)};var s=function(t,e,r){var n=void 0;return r?((n=Buffer.alloc(33))[0]=e.isOdd()?3:2,t.toArrayLike(Buffer,"be",32).copy(n,1)):((n=Buffer.alloc(65))[0]=4,t.toArrayLike(Buffer,"be",32).copy(n,1),e.toArrayLike(Buffer,"be",32).copy(n,33)),n}},50356:(t,e,r)=>{const n=r(17187).EventEmitter,i=r(89539).inherits,o=r(74865),s=r(75012),a=r(94005),u=r(94282),h=r(43421),c=(r(7585),r(83262)),l=function(){};function f(t){const e=this;n.call(e),e.setMaxListeners(30),t=t||{};const r={sendAsync:e._handleAsync.bind(e)},i=t.blockTrackerProvider||r;e._blockTracker=t.blockTracker||new s({provider:i,pollingInterval:t.pollingInterval||4e3,setSkipCacheFlag:!0}),e._ready=new h,e.currentBlock=null,e._providers=[]}t.exports=f,i(f,n),f.prototype.start=function(t=l){const e=this;e._ready.go(),e._blockTracker.on("latest",(t=>{e._getBlockByNumberWithRetry(t,((t,r)=>{if(t)return void this.emit("error",t);if(!r)return console.log(r),void this.emit("error",new Error("Could not find block"));const n=(i=r,{number:o.toBuffer(i.number),hash:o.toBuffer(i.hash),parentHash:o.toBuffer(i.parentHash),nonce:o.toBuffer(i.nonce),mixHash:o.toBuffer(i.mixHash),sha3Uncles:o.toBuffer(i.sha3Uncles),logsBloom:o.toBuffer(i.logsBloom),transactionsRoot:o.toBuffer(i.transactionsRoot),stateRoot:o.toBuffer(i.stateRoot),receiptsRoot:o.toBuffer(i.receiptRoot||i.receiptsRoot),miner:o.toBuffer(i.miner),difficulty:o.toBuffer(i.difficulty),totalDifficulty:o.toBuffer(i.totalDifficulty),size:o.toBuffer(i.size),extraData:o.toBuffer(i.extraData),gasLimit:o.toBuffer(i.gasLimit),gasUsed:o.toBuffer(i.gasUsed),timestamp:o.toBuffer(i.timestamp),transactions:i.transactions});var i;e._setCurrentBlock(n),e.emit("rawBlock",r),e.emit("latest",r)}))})),e._blockTracker.on("sync",e.emit.bind(e,"sync")),e._blockTracker.on("error",e.emit.bind(e,"error")),e._running=!0,e.emit("start")},f.prototype.stop=function(){const t=this;t._blockTracker.removeAllListeners(),t._running=!1,t.emit("stop")},f.prototype.isRunning=function(){return this._running},f.prototype.addProvider=function(t,e){"number"==typeof e?this._providers.splice(e,0,t):this._providers.push(t),t.setEngine(this)},f.prototype.removeProvider=function(t){const e=this._providers.indexOf(t);if(e<0)throw new Error("Provider not found.");this._providers.splice(e,1)},f.prototype.send=function(t){throw new Error("Web3ProviderEngine does not support synchronous requests.")},f.prototype.sendAsync=function(t,e){const r=this;r._ready.await((function(){Array.isArray(t)?a(t,r._handleAsync.bind(r),e):r._handleAsync(t,e)}))},f.prototype._getBlockByNumberWithRetry=function(t,e){const r=this;let n=5;return void i();function i(){r._getBlockByNumber(t,o)}function o(t,r){return t?e(t):r?void e(null,r):n>0?(n--,void setTimeout((function(){i()}),1e3)):void e(null,null)}},f.prototype._getBlockByNumber=function(t,e){const r=c({method:"eth_getBlockByNumber",params:[t,!1],skipCache:!0});this._handleAsync(r,((t,r)=>t?e(t):e(null,r.result)))},f.prototype._handleAsync=function(t,e){var r=this,n=-1,i=null,o=null,s=[];function a(r,n){o=r,i=n,u(s,(function(t,e){t?t(o,i,e):e()}),(function(){var r={id:t.id,jsonrpc:t.jsonrpc,result:i};null!=o?(r.error={message:o.stack||o.message||o,code:-32e3},e(o,r)):e(null,r)}))}!function e(i){if(n+=1,s.unshift(i),n>=r._providers.length)a(new Error('Request for method "'+t.method+'" not handled by any subprovider. Please check your subprovider configuration to ensure this method is handled.'));else try{r._providers[n].handleRequest(t,e,a)}catch(t){a(t)}}()},f.prototype._setCurrentBlock=function(t){this.currentBlock=t,this.emit("block",t)}},47467:(t,e,r)=>{const n=r(22033),i=r(37870);t.exports=class extends n{constructor(t){super((({blockTracker:e})=>i(Object.assign({blockTracker:e},t))))}}},13730:(t,e,r)=>{const n=r(22033),i=r(98406);t.exports=class extends n{constructor(){super((({blockTracker:t,provider:e,engine:r})=>i({blockTracker:t,provider:e})))}}},96185:(t,e,r)=>{const n=r(89539).inherits,i=r(13450);function o(t){t=t||{},this.staticResponses=t}t.exports=o,n(o,i),o.prototype.handleRequest=function(t,e,r){var n=this.staticResponses[t.method];"function"==typeof n?n(t,e,r):void 0!==n?setTimeout((()=>r(null,n))):e()}},46319:(t,e,r)=>{const n=r(7879),i=r(80047),o=r(89539).inherits,s=r(74865),a=r(77945),u=r(47529),h=r(80045),c=r(13450),l=r(36016),f=/^[0-9A-Fa-f]+$/g;function d(t){const e=this;e.nonceLock=h(1),t.getAccounts&&(e.getAccounts=t.getAccounts),t.processTransaction&&(e.processTransaction=t.processTransaction),t.processMessage&&(e.processMessage=t.processMessage),t.processPersonalMessage&&(e.processPersonalMessage=t.processPersonalMessage),t.processTypedMessage&&(e.processTypedMessage=t.processTypedMessage),e.approveTransaction=t.approveTransaction||e.autoApprove,e.approveMessage=t.approveMessage||e.autoApprove,e.approvePersonalMessage=t.approvePersonalMessage||e.autoApprove,e.approveDecryptMessage=t.approveDecryptMessage||e.autoApprove,e.approveEncryptionPublicKey=t.approveEncryptionPublicKey||e.autoApprove,e.approveTypedMessage=t.approveTypedMessage||e.autoApprove,t.signTransaction&&(e.signTransaction=t.signTransaction||y("signTransaction")),t.signMessage&&(e.signMessage=t.signMessage||y("signMessage")),t.signPersonalMessage&&(e.signPersonalMessage=t.signPersonalMessage||y("signPersonalMessage")),t.decryptMessage&&(e.decryptMessage=t.decryptMessage||y("decryptMessage")),t.encryptionPublicKey&&(e.encryptionPublicKey=t.encryptionPublicKey||y("encryptionPublicKey")),t.signTypedMessage&&(e.signTypedMessage=t.signTypedMessage||y("signTypedMessage")),t.recoverPersonalSignature&&(e.recoverPersonalSignature=t.recoverPersonalSignature),t.publishTransaction&&(e.publishTransaction=t.publishTransaction),e.estimateGas=t.estimateGas||e.estimateGas,e.getGasPrice=t.getGasPrice||e.getGasPrice}function p(t){return t.toLowerCase()}function m(t){const e=s.addHexPrefix(t);return s.isValidAddress(e)}function g(t){const e=s.addHexPrefix(t);return!s.isValidAddress(e)&&v(t)}function v(t){return"string"==typeof t&&("0x"===t.slice(0,2)&&t.slice(2).match(f))}function y(t){return function(e,r){r(new Error('ProviderEngine - HookedWalletSubprovider - Must provide "'+t+'" fn in constructor options'))}}t.exports=d,o(d,c),d.prototype.handleRequest=function(t,e,r){const i=this;let o,s,a,h,c;switch(i._parityRequests={},i._parityRequestCount=0,t.method){case"eth_coinbase":return void i.getAccounts((function(t,e){if(t)return r(t);let n=e[0]||null;r(null,n)}));case"eth_accounts":return void i.getAccounts((function(t,e){if(t)return r(t);r(null,e)}));case"eth_sendTransaction":return o=t.params[0],void n([t=>i.validateTransaction(o,t),t=>i.processTransaction(o,t)],r);case"eth_signTransaction":return o=t.params[0],void n([t=>i.validateTransaction(o,t),t=>i.processSignTransaction(o,t)],r);case"eth_sign":return c=t.params[0],h=t.params[1],a=t.params[2]||{},s=u(a,{from:c,data:h}),void n([t=>i.validateMessage(s,t),t=>i.processMessage(s,t)],r);case"personal_sign":return function(){const e=t.params[0];if(g(t.params[1])&&m(e)){let e="The eth_personalSign method requires params ordered ";e+="[message, address]. This was previously handled incorrectly, ",e+="and has been corrected automatically. ",e+="Please switch this param order for smooth behavior in the future.",console.warn(e),c=t.params[0],h=t.params[1]}else h=t.params[0],c=t.params[1];a=t.params[2]||{},s=u(a,{from:c,data:h}),n([t=>i.validatePersonalMessage(s,t),t=>i.processPersonalMessage(s,t)],r)}();case"eth_decryptMessage":return function(){const e=t.params[0];if(g(t.params[1])&&m(e)){let e="The eth_decryptMessage method requires params ordered ";e+="[message, address]. This was previously handled incorrectly, ",e+="and has been corrected automatically. ",e+="Please switch this param order for smooth behavior in the future.",console.warn(e),c=t.params[0],h=t.params[1]}else h=t.params[0],c=t.params[1];a=t.params[2]||{},s=u(a,{from:c,data:h}),n([t=>i.validateDecryptMessage(s,t),t=>i.processDecryptMessage(s,t)],r)}();case"encryption_public_key":return function(){const e=t.params[0];n([t=>i.validateEncryptionPublicKey(e,t),t=>i.processEncryptionPublicKey(e,t)],r)}();case"personal_ecRecover":return function(){h=t.params[0];let e=t.params[1];a=t.params[2]||{},s=u(a,{sig:e,data:h}),i.recoverPersonalSignature(s,r)}();case"eth_signTypedData":case"eth_signTypedData_v3":case"eth_signTypedData_v4":return function(){const e=t.params[0],o=t.params[1];m(e)?(c=e,h=o):(h=e,c=o),a=t.params[2]||{},s=u(a,{from:c,data:h}),n([t=>i.validateTypedMessage(s,t),t=>i.processTypedMessage(s,t)],r)}();case"parity_postTransaction":return o=t.params[0],void i.parityPostTransaction(o,r);case"parity_postSign":return c=t.params[0],h=t.params[1],void i.parityPostSign(c,h,r);case"parity_checkRequest":return function(){const e=t.params[0];i.parityCheckRequest(e,r)}();case"parity_defaultAccount":return void i.getAccounts((function(t,e){if(t)return r(t);const n=e[0]||null;r(null,n)}));default:return void e()}},d.prototype.getAccounts=function(t){t(null,[])},d.prototype.processTransaction=function(t,e){const r=this;n([e=>r.approveTransaction(t,e),(t,e)=>r.checkApproval("transaction",t,e),e=>r.finalizeAndSubmitTx(t,e)],e)},d.prototype.processSignTransaction=function(t,e){const r=this;n([e=>r.approveTransaction(t,e),(t,e)=>r.checkApproval("transaction",t,e),e=>r.finalizeTx(t,e)],e)},d.prototype.processMessage=function(t,e){const r=this;n([e=>r.approveMessage(t,e),(t,e)=>r.checkApproval("message",t,e),e=>r.signMessage(t,e)],e)},d.prototype.processPersonalMessage=function(t,e){const r=this;n([e=>r.approvePersonalMessage(t,e),(t,e)=>r.checkApproval("message",t,e),e=>r.signPersonalMessage(t,e)],e)},d.prototype.processDecryptMessage=function(t,e){const r=this;n([e=>r.approveDecryptMessage(t,e),(t,e)=>r.checkApproval("decryptMessage",t,e),e=>r.decryptMessage(t,e)],e)},d.prototype.processEncryptionPublicKey=function(t,e){const r=this;n([e=>r.approveEncryptionPublicKey(t,e),(t,e)=>r.checkApproval("encryptionPublicKey",t,e),e=>r.encryptionPublicKey(t,e)],e)},d.prototype.processTypedMessage=function(t,e){const r=this;n([e=>r.approveTypedMessage(t,e),(t,e)=>r.checkApproval("message",t,e),e=>r.signTypedMessage(t,e)],e)},d.prototype.autoApprove=function(t,e){e(null,!0)},d.prototype.checkApproval=function(t,e,r){r(e?null:new Error("User denied "+t+" signature."))},d.prototype.parityPostTransaction=function(t,e){const r=this,n=`0x${r._parityRequestCount.toString(16)}`;r._parityRequestCount++,r.emitPayload({method:"eth_sendTransaction",params:[t]},(function(t,e){if(t)return void(r._parityRequests[n]={error:t});const i=e.result;r._parityRequests[n]=i})),e(null,n)},d.prototype.parityPostSign=function(t,e,r){const n=this,i=`0x${n._parityRequestCount.toString(16)}`;n._parityRequestCount++,n.emitPayload({method:"eth_sign",params:[t,e]},(function(t,e){if(t)return void(n._parityRequests[i]={error:t});const r=e.result;n._parityRequests[i]=r})),r(null,i)},d.prototype.parityCheckRequest=function(t,e){const r=this._parityRequests[t]||null;return r?r.error?e(r.error):void e(null,r):e(null,null)},d.prototype.recoverPersonalSignature=function(t,e){let r;try{r=a.recoverPersonalSignature(t)}catch(t){return e(t)}e(null,r)},d.prototype.validateTransaction=function(t,e){if(void 0===t.from)return e(new Error("Undefined address - from address required to sign transaction."));this.validateSender(t.from,(function(r,n){return r?e(r):n?void e():e(new Error(`Unknown address - unable to sign transaction for this address: "${t.from}"`))}))},d.prototype.validateMessage=function(t,e){if(void 0===t.from)return e(new Error("Undefined address - from address required to sign message."));this.validateSender(t.from,(function(r,n){return r?e(r):n?void e():e(new Error(`Unknown address - unable to sign message for this address: "${t.from}"`))}))},d.prototype.validatePersonalMessage=function(t,e){return void 0===t.from?e(new Error("Undefined address - from address required to sign personal message.")):void 0===t.data?e(new Error("Undefined message - message required to sign personal message.")):v(t.data)?void this.validateSender(t.from,(function(r,n){return r?e(r):n?void e():e(new Error(`Unknown address - unable to sign message for this address: "${t.from}"`))})):e(new Error("HookedWalletSubprovider - validateMessage - message was not encoded as hex."))},d.prototype.validateDecryptMessage=function(t,e){return void 0===t.from?e(new Error("Undefined address - from address required to decrypt message.")):void 0===t.data?e(new Error("Undefined message - message required to decrypt message.")):v(t.data)?void this.validateSender(t.from,(function(r,n){return r?e(r):n?void e():e(new Error(`Unknown address - unable to decrypt message for this address: "${t.from}"`))})):e(new Error("HookedWalletSubprovider - validateDecryptMessage - message was not encoded as hex."))},d.prototype.validateEncryptionPublicKey=function(t,e){this.validateSender(t,(function(r,n){return r?e(r):n?void e():e(new Error(`Unknown address - unable to obtain encryption public key for this address: "${t}"`))}))},d.prototype.validateTypedMessage=function(t,e){return void 0===t.from?e(new Error("Undefined address - from address required to sign typed data.")):void 0===t.data?e(new Error("Undefined data - message required to sign typed data.")):void this.validateSender(t.from,(function(r,n){return r?e(r):n?void e():e(new Error(`Unknown address - unable to sign message for this address: "${t.from}"`))}))},d.prototype.validateSender=function(t,e){if(!t)return e(null,!1);this.getAccounts((function(r,n){if(r)return e(r);const i=-1!==n.map(p).indexOf(t.toLowerCase());e(null,i)}))},d.prototype.finalizeAndSubmitTx=function(t,e){const r=this;r.nonceLock.take((function(){n([r.fillInTxExtras.bind(r,t),r.signTransaction.bind(r),r.publishTransaction.bind(r)],(function(t,n){if(r.nonceLock.leave(),t)return e(t);e(null,n)}))}))},d.prototype.finalizeTx=function(t,e){const r=this;r.nonceLock.take((function(){n([r.fillInTxExtras.bind(r,t),r.signTransaction.bind(r)],(function(n,i){if(r.nonceLock.leave(),n)return e(n);e(null,{raw:i,tx:t})}))}))},d.prototype.publishTransaction=function(t,e){this.emitPayload({method:"eth_sendRawTransaction",params:[t]},(function(t,r){if(t)return e(t);e(null,r.result)}))},d.prototype.estimateGas=function(t,e){l(this.engine,t,e)},d.prototype.getGasPrice=function(t){this.emitPayload({method:"eth_gasPrice",params:[]},(function(e,r){if(e)return t(e);t(null,r.result)}))},d.prototype.fillInTxExtras=function(t,e){const r=this,n=t.from,o={};void 0===t.gasPrice&&(o.gasPrice=r.getGasPrice.bind(r)),void 0===t.nonce&&(o.nonce=r.emitPayload.bind(r,{method:"eth_getTransactionCount",params:[n,"pending"]})),void 0===t.gas&&(o.gas=r.estimateGas.bind(r,function(t){return{from:t.from,to:t.to,value:t.value,data:t.data,gas:t.gas,gasPrice:t.gasPrice,nonce:t.nonce}}(t))),i(o,(function(r,n){if(r)return e(r);const i={};n.gasPrice&&(i.gasPrice=n.gasPrice),n.nonce&&(i.nonce=n.nonce.result),n.gas&&(i.gas=n.gas),e(null,u(t,i))}))}},22033:(t,e,r)=>{const n=r(13450);t.exports=class extends n{constructor(t){if(super(),!t)throw new Error("JsonRpcEngineMiddlewareSubprovider - no constructorFn specified");this._constructorFn=t}setEngine(t){if(this.middleware)throw new Error("JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice");const e=t._blockTracker,r=this._constructorFn({engine:t,provider:t,blockTracker:e});if(!r)throw new Error("JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware");if("function"!=typeof r)throw new Error("JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function");this.middleware=r}handleRequest(t,e,r){const n={id:t.id};this.middleware(t,n,(function(t){e(((e,r,i)=>{e?(delete n.result,n.error={message:e.message||e}):n.result=r,t?t(i):i()}))}),(function(t){if(t)return r(t);r(null,n.result)}))}}},40803:(t,e,r)=>{const n=r(89539).inherits,i=r(13342),o=r(74865),s=r(13450),a=r(7585).blockTagForPayload;function u(t){this.nonceCache={}}t.exports=u,n(u,s),u.prototype.handleRequest=function(t,e,r){const n=this;switch(t.method){case"eth_getTransactionCount":var s=a(t),u=t.params[0].toLowerCase(),h=n.nonceCache[u];return void("pending"===s?h?r(null,h):e((function(t,e,r){if(t)return r();void 0===n.nonceCache[u]&&(n.nonceCache[u]=e),r()})):e());case"eth_sendRawTransaction":return void e((function(e,r,s){if(e)return s();var a=t.params[0],u=(o.stripHexPrefix(a),Buffer.from(o.stripHexPrefix(a),"hex"),new i(Buffer.from(o.stripHexPrefix(a),"hex"))),h="0x"+u.getSenderAddress().toString("hex").toLowerCase(),c=o.bufferToInt(u.nonce),l=(++c).toString(16);l.length%2&&(l="0"+l),l="0x"+l,n.nonceCache[h]=l,s()}));case"evm_revert":return n.nonceCache={},void e();default:return void e()}}},13450:(t,e,r)=>{const n=r(83262);function i(){}t.exports=i,i.prototype.setEngine=function(t){const e=this;e.engine||(e.engine=t,t.on("block",(function(t){e.currentBlock=t})),t.on("start",(function(){e.start()})),t.on("stop",(function(){e.stop()})))},i.prototype.handleRequest=function(t,e,r){throw new Error("Subproviders should override `handleRequest`.")},i.prototype.emitPayload=function(t,e){this.engine.sendAsync(n(t),e)},i.prototype.stop=function(){},i.prototype.start=function(){}},90522:(t,e,r)=>{const n=r(22033),i=r(68961);t.exports=class extends n{constructor(){super((({blockTracker:t,provider:e,engine:r})=>{const{events:n,middleware:o}=i({blockTracker:t,provider:e});return n.on("notification",(t=>r.emit("data",null,t))),o}))}}},83262:(t,e,r)=>{const n=r(90505),i=r(47529);t.exports=function(t){return i({id:n(),jsonrpc:"2.0",params:[]},t)}},36016:(t,e,r)=>{const n=r(83262);t.exports=function(t,e,r){t.sendAsync(n({method:"eth_estimateGas",params:[e]}),(function(t,e){if(t)return"no contract code at given address"===t.message?r(null,"0xcf08"):r(t);r(null,e.result)}))}},90505:t=>{t.exports=function(){return Math.floor(Number.MAX_SAFE_INTEGER*Math.random())}},7585:(t,e,r)=>{const n=r(67266);function i(t){return"never"!==a(t)}function o(t){var e=s(t);return e>=t.params.length?t.params:"eth_getBlockByNumber"===t.method?t.params.slice(1):t.params.slice(0,e)}function s(t){switch(t.method){case"eth_getStorageAt":return 2;case"eth_getBalance":case"eth_getCode":case"eth_getTransactionCount":case"eth_call":case"eth_estimateGas":return 1;case"eth_getBlockByNumber":return 0;default:return}}function a(t){switch(t.method){case"web3_clientVersion":case"web3_sha3":case"eth_protocolVersion":case"eth_getBlockTransactionCountByHash":case"eth_getUncleCountByBlockHash":case"eth_getCode":case"eth_getBlockByHash":case"eth_getTransactionByHash":case"eth_getTransactionByBlockHashAndIndex":case"eth_getTransactionReceipt":case"eth_getUncleByBlockHashAndIndex":case"eth_getCompilers":case"eth_compileLLL":case"eth_compileSolidity":case"eth_compileSerpent":case"shh_version":return"perma";case"eth_getBlockByNumber":case"eth_getBlockTransactionCountByNumber":case"eth_getUncleCountByBlockNumber":case"eth_getTransactionByBlockNumberAndIndex":case"eth_getUncleByBlockNumberAndIndex":return"fork";case"eth_gasPrice":case"eth_getBalance":case"eth_getStorageAt":case"eth_getTransactionCount":case"eth_call":case"eth_estimateGas":case"eth_getFilterLogs":case"eth_getLogs":case"eth_blockNumber":return"block";case"net_version":case"net_peerCount":case"net_listening":case"eth_syncing":case"eth_sign":case"eth_coinbase":case"eth_mining":case"eth_hashrate":case"eth_accounts":case"eth_sendTransaction":case"eth_sendRawTransaction":case"eth_newFilter":case"eth_newBlockFilter":case"eth_newPendingTransactionFilter":case"eth_uninstallFilter":case"eth_getFilterChanges":case"eth_getWork":case"eth_submitWork":case"eth_submitHashrate":case"db_putString":case"db_getString":case"db_putHex":case"db_getHex":case"shh_post":case"shh_newIdentity":case"shh_hasIdentity":case"shh_newGroup":case"shh_addToGroup":case"shh_newFilter":case"shh_uninstallFilter":case"shh_getFilterChanges":case"shh_getMessages":return"never"}}t.exports={cacheIdentifierForPayload:function(t,e={}){if(!i(t))return null;const{includeBlockRef:r}=e,s=r?t.params:o(t);return t.method+":"+n(s)},canCache:i,blockTagForPayload:function(t){var e=s(t);return e>=t.params.length?null:t.params[e]},paramsWithoutBlockTag:o,blockTagParamIndex:s,cacheTypeForPayload:a}},43421:(t,e,r)=>{const n=r(17187).EventEmitter,i=r(89539).inherits;function o(){n.call(this),this.isLocked=!0}t.exports=o,i(o,n),o.prototype.go=function(){this.isLocked=!1,this.emit("unlock")},o.prototype.stop=function(){this.isLocked=!0,this.emit("lock")},o.prototype.await=function(t){this.isLocked?this.once("unlock",t):setTimeout(t)}},62873:(t,e)=>{"use strict";function r(t){let e;return"undefined"!=typeof window&&void 0!==window[t]&&(e=window[t]),e}function n(t){const e=r(t);if(!e)throw new Error(`${t} is not defined in Window`);return e}Object.defineProperty(e,"__esModule",{value:!0}),e.getLocalStorage=e.getLocalStorageOrThrow=e.getCrypto=e.getCryptoOrThrow=e.getLocation=e.getLocationOrThrow=e.getNavigator=e.getNavigatorOrThrow=e.getDocument=e.getDocumentOrThrow=e.getFromWindowOrThrow=e.getFromWindow=void 0,e.getFromWindow=r,e.getFromWindowOrThrow=n,e.getDocumentOrThrow=function(){return n("document")},e.getDocument=function(){return r("document")},e.getNavigatorOrThrow=function(){return n("navigator")},e.getNavigator=function(){return r("navigator")},e.getLocationOrThrow=function(){return n("location")},e.getLocation=function(){return r("location")},e.getCryptoOrThrow=function(){return n("crypto")},e.getCrypto=function(){return r("crypto")},e.getLocalStorageOrThrow=function(){return n("localStorage")},e.getLocalStorage=function(){return r("localStorage")}},65755:(t,e,r)=>{"use strict";e.D=void 0;const n=r(62873);e.D=function(){let t,e;try{t=n.getDocumentOrThrow(),e=n.getLocationOrThrow()}catch(t){return null}function r(...e){const r=t.getElementsByTagName("meta");for(let t=0;t<r.length;t++){const n=r[t],i=["itemprop","property","name"].map((t=>n.getAttribute(t))).filter((t=>!!t&&e.includes(t)));if(i.length&&i){const t=n.getAttribute("content");if(t)return t}}return""}const i=function(){let e=r("name","og:site_name","og:title","twitter:title");return e||(e=t.title),e}();return{description:r("description","og:description","twitter:description","keywords"),url:e.origin,icons:function(){const r=t.getElementsByTagName("link"),n=[];for(let t=0;t<r.length;t++){const i=r[t],o=i.getAttribute("rel");if(o&&o.toLowerCase().indexOf("icon")>-1){const t=i.getAttribute("href");if(t)if(-1===t.toLowerCase().indexOf("https:")&&-1===t.toLowerCase().indexOf("http:")&&0!==t.indexOf("//")){let r=e.protocol+"//"+e.host;if(0===t.indexOf("/"))r+=t;else{const n=e.pathname.split("/");n.pop(),r+=n.join("/")+"/"+t}n.push(r)}else if(0===t.indexOf("//")){const r=e.protocol+t;n.push(r)}else n.push(t)}}return n}(),name:i}}},20640:(t,e,r)=>{"use strict";var n=r(11742),i={"text/plain":"Text","text/html":"Url",default:"Text"};t.exports=function(t,e){var r,o,s,a,u,h,c=!1;e||(e={}),r=e.debug||!1;try{if(s=n(),a=document.createRange(),u=document.getSelection(),(h=document.createElement("span")).textContent=t,h.style.all="unset",h.style.position="fixed",h.style.top=0,h.style.clip="rect(0, 0, 0, 0)",h.style.whiteSpace="pre",h.style.webkitUserSelect="text",h.style.MozUserSelect="text",h.style.msUserSelect="text",h.style.userSelect="text",h.addEventListener("copy",(function(n){if(n.stopPropagation(),e.format)if(n.preventDefault(),void 0===n.clipboardData){r&&console.warn("unable to use e.clipboardData"),r&&console.warn("trying IE specific stuff"),window.clipboardData.clearData();var o=i[e.format]||i.default;window.clipboardData.setData(o,t)}else n.clipboardData.clearData(),n.clipboardData.setData(e.format,t);e.onCopy&&(n.preventDefault(),e.onCopy(n.clipboardData))})),document.body.appendChild(h),a.selectNodeContents(h),u.addRange(a),!document.execCommand("copy"))throw new Error("copy command was unsuccessful");c=!0}catch(n){r&&console.error("unable to copy using execCommand: ",n),r&&console.warn("trying IE specific stuff");try{window.clipboardData.setData(e.format||"text",t),e.onCopy&&e.onCopy(window.clipboardData),c=!0}catch(n){r&&console.error("unable to copy using clipboardData: ",n),r&&console.error("falling back to prompt"),o=function(t){var e=(/mac os x/i.test(navigator.userAgent)?"⌘":"Ctrl")+"+C";return t.replace(/#{\s*key\s*}/g,e)}("message"in e?e.message:"Copy to clipboard: #{key}, Enter"),window.prompt(o,t)}}finally{u&&("function"==typeof u.removeRange?u.removeRange(a):u.removeAllRanges()),h&&document.body.removeChild(h),s()}return c}},44020:t=>{"use strict";var e="%[a-f0-9]{2}",r=new RegExp(e,"gi"),n=new RegExp("("+e+")+","gi");function i(t,e){try{return decodeURIComponent(t.join(""))}catch(t){}if(1===t.length)return t;e=e||1;var r=t.slice(0,e),n=t.slice(e);return Array.prototype.concat.call([],i(r),i(n))}function o(t){try{return decodeURIComponent(t)}catch(o){for(var e=t.match(r),n=1;n<e.length;n++)e=(t=i(e,n).join("")).match(r);return t}}t.exports=function(t){if("string"!=typeof t)throw new TypeError("Expected `encodedURI` to be of type `string`, got `"+typeof t+"`");try{return t=t.replace(/\+/g," "),decodeURIComponent(t)}catch(e){return function(t){for(var e={"%FE%FF":"��","%FF%FE":"��"},r=n.exec(t);r;){try{e[r[0]]=decodeURIComponent(r[0])}catch(t){var i=o(r[0]);i!==r[0]&&(e[r[0]]=i)}r=n.exec(t)}e["%C2"]="�";for(var s=Object.keys(e),a=0;a<s.length;a++){var u=s[a];t=t.replace(new RegExp(u,"g"),e[u])}return t}(t)}}},65987:t=>{"use strict";var e={single_source_shortest_paths:function(t,r,n){var i={},o={};o[r]=0;var s,a,u,h,c,l,f,d=e.PriorityQueue.make();for(d.push(r,0);!d.empty();)for(u in a=(s=d.pop()).value,h=s.cost,c=t[a]||{})c.hasOwnProperty(u)&&(l=h+c[u],f=o[u],(void 0===o[u]||f>l)&&(o[u]=l,d.push(u,l),i[u]=a));if(void 0!==n&&void 0===o[n]){var p=["Could not find a path from ",r," to ",n,"."].join("");throw new Error(p)}return i},extract_shortest_path_from_predecessor_list:function(t,e){for(var r=[],n=e;n;)r.push(n),t[n],n=t[n];return r.reverse(),r},find_path:function(t,r,n){var i=e.single_source_shortest_paths(t,r,n);return e.extract_shortest_path_from_predecessor_list(i,n)},PriorityQueue:{make:function(t){var r,n=e.PriorityQueue,i={};for(r in t=t||{},n)n.hasOwnProperty(r)&&(i[r]=n[r]);return i.queue=[],i.sorter=t.sorter||n.default_sorter,i},default_sorter:function(t,e){return t.cost-e.cost},push:function(t,e){var r={value:t,cost:e};this.queue.push(r),this.queue.sort(this.sorter)},pop:function(){return this.queue.shift()},empty:function(){return 0===this.queue.length}}};t.exports=e},37870:(t,e,r)=>{const n=r(91625),i=r(3156),o=[void 0,null,"<nil>"];t.exports=function(t={}){const{blockTracker:e}=t;if(!e)throw new Error("createBlockCacheMiddleware - No BlockTracker specified");const r=new s,o={perma:r,block:r,fork:r};return i((async(t,i,s)=>{if(t.skipCache)return s();const a=n.cacheTypeForPayload(t),u=o[a];if(!u)return s();if(!u.canCacheRequest(t))return s();let h,c=n.blockTagForPayload(t);if(c||(c="latest"),"earliest"===c)h="0x00";else if("latest"===c){const t=await e.getLatestBlock();r.clearBefore(t),h=t}else h=c;const l=await u.get(t,h);void 0===l?(await s(),await u.set(t,h,i.result)):i.result=l}))};class s{constructor(){this.cache={}}getBlockCacheForPayload(t,e){const r=Number.parseInt(e,16);let n=this.cache[r];if(!n){const t={};this.cache[r]=t,n=t}return n}async get(t,e){const r=this.getBlockCacheForPayload(t,e);if(r)return r[n.cacheIdentifierForPayload(t,!0)]}async set(t,e,r){this.canCacheResult(t,r)&&(this.getBlockCacheForPayload(t,e)[n.cacheIdentifierForPayload(t,!0)]=r)}canCacheRequest(t){return!!n.canCache(t)&&"pending"!==n.blockTagForPayload(t)}canCacheResult(t,e){if(!o.includes(e))return!!(!["eth_getTransactionByHash","eth_getTransactionReceipt"].includes(t.method)||e&&e.blockHash&&"0x0000000000000000000000000000000000000000000000000000000000000000"!==e.blockHash)}clearBefore(t){const e=this,r=Number.parseInt(t,16);Object.keys(e.cache).map(Number).filter((t=>t<r)).forEach((t=>delete e.cache[t]))}}},91625:(t,e,r)=>{const n=r(67266);function i(t){return"never"!==a(t)}function o(t){const e=s(t);return e>=t.params.length?t.params:"eth_getBlockByNumber"===t.method?t.params.slice(1):t.params.slice(0,e)}function s(t){switch(t.method){case"eth_getStorageAt":return 2;case"eth_getBalance":case"eth_getCode":case"eth_getTransactionCount":case"eth_call":return 1;case"eth_getBlockByNumber":return 0;default:return}}function a(t){switch(t.method){case"web3_clientVersion":case"web3_sha3":case"eth_protocolVersion":case"eth_getBlockTransactionCountByHash":case"eth_getUncleCountByBlockHash":case"eth_getCode":case"eth_getBlockByHash":case"eth_getTransactionByHash":case"eth_getTransactionByBlockHashAndIndex":case"eth_getTransactionReceipt":case"eth_getUncleByBlockHashAndIndex":case"eth_getCompilers":case"eth_compileLLL":case"eth_compileSolidity":case"eth_compileSerpent":case"shh_version":case"test_permaCache":return"perma";case"eth_getBlockByNumber":case"eth_getBlockTransactionCountByNumber":case"eth_getUncleCountByBlockNumber":case"eth_getTransactionByBlockNumberAndIndex":case"eth_getUncleByBlockNumberAndIndex":case"test_forkCache":return"fork";case"eth_gasPrice":case"eth_blockNumber":case"eth_getBalance":case"eth_getStorageAt":case"eth_getTransactionCount":case"eth_call":case"eth_estimateGas":case"eth_getFilterLogs":case"eth_getLogs":case"test_blockCache":return"block";case"net_version":case"net_peerCount":case"net_listening":case"eth_syncing":case"eth_sign":case"eth_coinbase":case"eth_mining":case"eth_hashrate":case"eth_accounts":case"eth_sendTransaction":case"eth_sendRawTransaction":case"eth_newFilter":case"eth_newBlockFilter":case"eth_newPendingTransactionFilter":case"eth_uninstallFilter":case"eth_getFilterChanges":case"eth_getWork":case"eth_submitWork":case"eth_submitHashrate":case"db_putString":case"db_getString":case"db_putHex":case"db_getHex":case"shh_post":case"shh_newIdentity":case"shh_hasIdentity":case"shh_newGroup":case"shh_addToGroup":case"shh_newFilter":case"shh_uninstallFilter":case"shh_getFilterChanges":case"shh_getMessages":case"test_neverCache":return"never"}}t.exports={cacheIdentifierForPayload:function(t,e){const r=e?o(t):t.params;return i(t)?t.method+":"+n(r):null},canCache:i,blockTagForPayload:function(t){let e=s(t);return e>=t.params.length?null:t.params[e]},paramsWithoutBlockTag:o,blockTagParamIndex:s,cacheTypeForPayload:a}},3156:t=>{t.exports=function(t){return(e,r,n,i)=>{let o;const s=new Promise((t=>{o=t}));let a,u;t(e,r,(async()=>{u=!0,n((t=>{a=t,o()})),await s})).then((async()=>{u?(await s,a(null)):i(null)})).catch((t=>{a?a(t):i(t)}))}}},4501:t=>{t.exports=n,n.strict=i,n.loose=o;var e=Object.prototype.toString,r={"[object Int8Array]":!0,"[object Int16Array]":!0,"[object Int32Array]":!0,"[object Uint8Array]":!0,"[object Uint8ClampedArray]":!0,"[object Uint16Array]":!0,"[object Uint32Array]":!0,"[object Float32Array]":!0,"[object Float64Array]":!0};function n(t){return i(t)||o(t)}function i(t){return t instanceof Int8Array||t instanceof Int16Array||t instanceof Int32Array||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Uint16Array||t instanceof Uint32Array||t instanceof Float32Array||t instanceof Float64Array}function o(t){return r[e.call(t)]}},92592:(t,e,r)=>{var n=r(47138),i=r(95115),o=r(6907),s=r(93776);function a(t,e,r,o,s){var a=[].slice.call(arguments,1),u=a.length,h="function"==typeof a[u-1];if(!h&&!n())throw new Error("Callback required as last argument");if(!h){if(u<1)throw new Error("Too few arguments provided");return 1===u?(r=e,e=o=void 0):2!==u||e.getContext||(o=r,r=e,e=void 0),new Promise((function(n,s){try{var a=i.create(r,o);n(t(a,e,o))}catch(t){s(t)}}))}if(u<2)throw new Error("Too few arguments provided");2===u?(s=r,r=e,e=o=void 0):3===u&&(e.getContext&&void 0===s?(s=o,o=void 0):(s=o,o=r,r=e,e=void 0));try{var c=i.create(r,o);s(null,t(c,e,o))}catch(t){s(t)}}e.create=i.create,e.toCanvas=a.bind(null,o.render),e.toDataURL=a.bind(null,o.renderToDataURL),e.toString=a.bind(null,(function(t,e,r){return s.render(t,r)}))},47138:t=>{t.exports=function(){return"function"==typeof Promise&&Promise.prototype&&Promise.prototype.then}},21845:(t,e,r)=>{var n=r(10242).getSymbolSize;e.getRowColCoords=function(t){if(1===t)return[];for(var e=Math.floor(t/7)+2,r=n(t),i=145===r?26:2*Math.ceil((r-13)/(2*e-2)),o=[r-7],s=1;s<e-1;s++)o[s]=o[s-1]-i;return o.push(6),o.reverse()},e.getPositions=function(t){for(var r=[],n=e.getRowColCoords(t),i=n.length,o=0;o<i;o++)for(var s=0;s<i;s++)0===o&&0===s||0===o&&s===i-1||o===i-1&&0===s||r.push([n[o],n[s]]);return r}},8260:(t,e,r)=>{var n=r(76910),i=["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"," ","$","%","*","+","-",".","/",":"];function o(t){this.mode=n.ALPHANUMERIC,this.data=t}o.getBitsLength=function(t){return 11*Math.floor(t/2)+t%2*6},o.prototype.getLength=function(){return this.data.length},o.prototype.getBitsLength=function(){return o.getBitsLength(this.data.length)},o.prototype.write=function(t){var e;for(e=0;e+2<=this.data.length;e+=2){var r=45*i.indexOf(this.data[e]);r+=i.indexOf(this.data[e+1]),t.put(r,11)}this.data.length%2&&t.put(i.indexOf(this.data[e]),6)},t.exports=o},97245:t=>{function e(){this.buffer=[],this.length=0}e.prototype={get:function(t){var e=Math.floor(t/8);return 1==(this.buffer[e]>>>7-t%8&1)},put:function(t,e){for(var r=0;r<e;r++)this.putBit(1==(t>>>e-r-1&1))},getLengthInBits:function(){return this.length},putBit:function(t){var e=Math.floor(this.length/8);this.buffer.length<=e&&this.buffer.push(0),t&&(this.buffer[e]|=128>>>this.length%8),this.length++}},t.exports=e},73280:(t,e,r)=>{var n=r(99131);function i(t){if(!t||t<1)throw new Error("BitMatrix size must be defined and greater than 0");this.size=t,this.data=n.alloc(t*t),this.reservedBit=n.alloc(t*t)}i.prototype.set=function(t,e,r,n){var i=t*this.size+e;this.data[i]=r,n&&(this.reservedBit[i]=!0)},i.prototype.get=function(t,e){return this.data[t*this.size+e]},i.prototype.xor=function(t,e,r){this.data[t*this.size+e]^=r},i.prototype.isReserved=function(t,e){return this.reservedBit[t*this.size+e]},t.exports=i},43424:(t,e,r)=>{var n=r(99131),i=r(76910);function o(t){this.mode=i.BYTE,this.data=n.from(t)}o.getBitsLength=function(t){return 8*t},o.prototype.getLength=function(){return this.data.length},o.prototype.getBitsLength=function(){return o.getBitsLength(this.data.length)},o.prototype.write=function(t){for(var e=0,r=this.data.length;e<r;e++)t.put(this.data[e],8)},t.exports=o},35393:(t,e,r)=>{var n=r(64908),i=[1,1,1,1,1,1,1,1,1,1,2,2,1,2,2,4,1,2,4,4,2,4,4,4,2,4,6,5,2,4,6,6,2,5,8,8,4,5,8,8,4,5,8,11,4,8,10,11,4,9,12,16,4,9,16,16,6,10,12,18,6,10,17,16,6,11,16,19,6,13,18,21,7,14,21,25,8,16,20,25,8,17,23,25,9,17,23,34,9,18,25,30,10,20,27,32,12,21,29,35,12,23,34,37,12,25,34,40,13,26,35,42,14,28,38,45,15,29,40,48,16,31,43,51,17,33,45,54,18,35,48,57,19,37,51,60,19,38,53,63,20,40,56,66,21,43,59,70,22,45,62,74,24,47,65,77,25,49,68,81],o=[7,10,13,17,10,16,22,28,15,26,36,44,20,36,52,64,26,48,72,88,36,64,96,112,40,72,108,130,48,88,132,156,60,110,160,192,72,130,192,224,80,150,224,264,96,176,260,308,104,198,288,352,120,216,320,384,132,240,360,432,144,280,408,480,168,308,448,532,180,338,504,588,196,364,546,650,224,416,600,700,224,442,644,750,252,476,690,816,270,504,750,900,300,560,810,960,312,588,870,1050,336,644,952,1110,360,700,1020,1200,390,728,1050,1260,420,784,1140,1350,450,812,1200,1440,480,868,1290,1530,510,924,1350,1620,540,980,1440,1710,570,1036,1530,1800,570,1064,1590,1890,600,1120,1680,1980,630,1204,1770,2100,660,1260,1860,2220,720,1316,1950,2310,750,1372,2040,2430];e.getBlocksCount=function(t,e){switch(e){case n.L:return i[4*(t-1)+0];case n.M:return i[4*(t-1)+1];case n.Q:return i[4*(t-1)+2];case n.H:return i[4*(t-1)+3];default:return}},e.getTotalCodewordsCount=function(t,e){switch(e){case n.L:return o[4*(t-1)+0];case n.M:return o[4*(t-1)+1];case n.Q:return o[4*(t-1)+2];case n.H:return o[4*(t-1)+3];default:return}}},64908:(t,e)=>{e.L={bit:1},e.M={bit:0},e.Q={bit:3},e.H={bit:2},e.isValid=function(t){return t&&void 0!==t.bit&&t.bit>=0&&t.bit<4},e.from=function(t,r){if(e.isValid(t))return t;try{return function(t){if("string"!=typeof t)throw new Error("Param is not a string");switch(t.toLowerCase()){case"l":case"low":return e.L;case"m":case"medium":return e.M;case"q":case"quartile":return e.Q;case"h":case"high":return e.H;default:throw new Error("Unknown EC Level: "+t)}}(t)}catch(t){return r}}},76526:(t,e,r)=>{var n=r(10242).getSymbolSize;e.getPositions=function(t){var e=n(t);return[[0,0],[e-7,0],[0,e-7]]}},61642:(t,e,r)=>{var n=r(10242),i=n.getBCHDigit(1335);e.getEncodedBits=function(t,e){for(var r=t.bit<<3|e,o=r<<10;n.getBCHDigit(o)-i>=0;)o^=1335<<n.getBCHDigit(o)-i;return 21522^(r<<10|o)}},69729:(t,e,r)=>{var n=r(99131),i=n.alloc(512),o=n.alloc(256);!function(){for(var t=1,e=0;e<255;e++)i[e]=t,o[t]=e,256&(t<<=1)&&(t^=285);for(e=255;e<512;e++)i[e]=i[e-255]}(),e.log=function(t){if(t<1)throw new Error("log("+t+")");return o[t]},e.exp=function(t){return i[t]},e.mul=function(t,e){return 0===t||0===e?0:i[o[t]+o[e]]}},35442:(t,e,r)=>{var n=r(76910),i=r(10242);function o(t){this.mode=n.KANJI,this.data=t}o.getBitsLength=function(t){return 13*t},o.prototype.getLength=function(){return this.data.length},o.prototype.getBitsLength=function(){return o.getBitsLength(this.data.length)},o.prototype.write=function(t){var e;for(e=0;e<this.data.length;e++){var r=i.toSJIS(this.data[e]);if(r>=33088&&r<=40956)r-=33088;else{if(!(r>=57408&&r<=60351))throw new Error("Invalid SJIS character: "+this.data[e]+"\nMake sure your charset is UTF-8");r-=49472}r=192*(r>>>8&255)+(255&r),t.put(r,13)}},t.exports=o},27126:(t,e)=>{e.Patterns={PATTERN000:0,PATTERN001:1,PATTERN010:2,PATTERN011:3,PATTERN100:4,PATTERN101:5,PATTERN110:6,PATTERN111:7};function r(t,r,n){switch(t){case e.Patterns.PATTERN000:return(r+n)%2==0;case e.Patterns.PATTERN001:return r%2==0;case e.Patterns.PATTERN010:return n%3==0;case e.Patterns.PATTERN011:return(r+n)%3==0;case e.Patterns.PATTERN100:return(Math.floor(r/2)+Math.floor(n/3))%2==0;case e.Patterns.PATTERN101:return r*n%2+r*n%3==0;case e.Patterns.PATTERN110:return(r*n%2+r*n%3)%2==0;case e.Patterns.PATTERN111:return(r*n%3+(r+n)%2)%2==0;default:throw new Error("bad maskPattern:"+t)}}e.isValid=function(t){return null!=t&&""!==t&&!isNaN(t)&&t>=0&&t<=7},e.from=function(t){return e.isValid(t)?parseInt(t,10):void 0},e.getPenaltyN1=function(t){for(var e=t.size,r=0,n=0,i=0,o=null,s=null,a=0;a<e;a++){n=i=0,o=s=null;for(var u=0;u<e;u++){var h=t.get(a,u);h===o?n++:(n>=5&&(r+=n-5+3),o=h,n=1),(h=t.get(u,a))===s?i++:(i>=5&&(r+=i-5+3),s=h,i=1)}n>=5&&(r+=n-5+3),i>=5&&(r+=i-5+3)}return r},e.getPenaltyN2=function(t){for(var e=t.size,r=0,n=0;n<e-1;n++)for(var i=0;i<e-1;i++){var o=t.get(n,i)+t.get(n,i+1)+t.get(n+1,i)+t.get(n+1,i+1);4!==o&&0!==o||r++}return 3*r},e.getPenaltyN3=function(t){for(var e=t.size,r=0,n=0,i=0,o=0;o<e;o++){n=i=0;for(var s=0;s<e;s++)n=n<<1&2047|t.get(o,s),s>=10&&(1488===n||93===n)&&r++,i=i<<1&2047|t.get(s,o),s>=10&&(1488===i||93===i)&&r++}return 40*r},e.getPenaltyN4=function(t){for(var e=0,r=t.data.length,n=0;n<r;n++)e+=t.data[n];return 10*Math.abs(Math.ceil(100*e/r/5)-10)},e.applyMask=function(t,e){for(var n=e.size,i=0;i<n;i++)for(var o=0;o<n;o++)e.isReserved(o,i)||e.xor(o,i,r(t,o,i))},e.getBestMask=function(t,r){for(var n=Object.keys(e.Patterns).length,i=0,o=1/0,s=0;s<n;s++){r(s),e.applyMask(s,t);var a=e.getPenaltyN1(t)+e.getPenaltyN2(t)+e.getPenaltyN3(t)+e.getPenaltyN4(t);e.applyMask(s,t),a<o&&(o=a,i=s)}return i}},76910:(t,e,r)=>{var n=r(43114),i=r(7007);e.NUMERIC={id:"Numeric",bit:1,ccBits:[10,12,14]},e.ALPHANUMERIC={id:"Alphanumeric",bit:2,ccBits:[9,11,13]},e.BYTE={id:"Byte",bit:4,ccBits:[8,16,16]},e.KANJI={id:"Kanji",bit:8,ccBits:[8,10,12]},e.MIXED={bit:-1},e.getCharCountIndicator=function(t,e){if(!t.ccBits)throw new Error("Invalid mode: "+t);if(!n.isValid(e))throw new Error("Invalid version: "+e);return e>=1&&e<10?t.ccBits[0]:e<27?t.ccBits[1]:t.ccBits[2]},e.getBestModeForData=function(t){return i.testNumeric(t)?e.NUMERIC:i.testAlphanumeric(t)?e.ALPHANUMERIC:i.testKanji(t)?e.KANJI:e.BYTE},e.toString=function(t){if(t&&t.id)return t.id;throw new Error("Invalid mode")},e.isValid=function(t){return t&&t.bit&&t.ccBits},e.from=function(t,r){if(e.isValid(t))return t;try{return function(t){if("string"!=typeof t)throw new Error("Param is not a string");switch(t.toLowerCase()){case"numeric":return e.NUMERIC;case"alphanumeric":return e.ALPHANUMERIC;case"kanji":return e.KANJI;case"byte":return e.BYTE;default:throw new Error("Unknown mode: "+t)}}(t)}catch(t){return r}}},41085:(t,e,r)=>{var n=r(76910);function i(t){this.mode=n.NUMERIC,this.data=t.toString()}i.getBitsLength=function(t){return 10*Math.floor(t/3)+(t%3?t%3*3+1:0)},i.prototype.getLength=function(){return this.data.length},i.prototype.getBitsLength=function(){return i.getBitsLength(this.data.length)},i.prototype.write=function(t){var e,r,n;for(e=0;e+3<=this.data.length;e+=3)r=this.data.substr(e,3),n=parseInt(r,10),t.put(n,10);var i=this.data.length-e;i>0&&(r=this.data.substr(e),n=parseInt(r,10),t.put(n,3*i+1))},t.exports=i},34136:(t,e,r)=>{var n=r(99131),i=r(69729);e.mul=function(t,e){for(var r=n.alloc(t.length+e.length-1),o=0;o<t.length;o++)for(var s=0;s<e.length;s++)r[o+s]^=i.mul(t[o],e[s]);return r},e.mod=function(t,e){for(var r=n.from(t);r.length-e.length>=0;){for(var o=r[0],s=0;s<e.length;s++)r[s]^=i.mul(e[s],o);for(var a=0;a<r.length&&0===r[a];)a++;r=r.slice(a)}return r},e.generateECPolynomial=function(t){for(var r=n.from([1]),o=0;o<t;o++)r=e.mul(r,[1,i.exp(o)]);return r}},95115:(t,e,r)=>{var n=r(99131),i=r(10242),o=r(64908),s=r(97245),a=r(73280),u=r(21845),h=r(76526),c=r(27126),l=r(35393),f=r(52882),d=r(23103),p=r(61642),m=r(76910),g=r(16130),v=r(93617);function y(t,e,r){var n,i,o=t.size,s=p.getEncodedBits(e,r);for(n=0;n<15;n++)i=1==(s>>n&1),n<6?t.set(n,8,i,!0):n<8?t.set(n+1,8,i,!0):t.set(o-15+n,8,i,!0),n<8?t.set(8,o-n-1,i,!0):n<9?t.set(8,15-n-1+1,i,!0):t.set(8,15-n-1,i,!0);t.set(o-8,8,1,!0)}function w(t,e,r,o){var p;if(v(t))p=g.fromArray(t);else{if("string"!=typeof t)throw new Error("Invalid data");var w=e;if(!w){var _=g.rawSplit(t);w=d.getBestVersionForData(_,r)}p=g.fromString(t,w||40)}var b=d.getBestVersionForData(p,r);if(!b)throw new Error("The amount of data is too big to be stored in a QR Code");if(e){if(e<b)throw new Error("\nThe chosen QR Code version cannot contain this amount of data.\nMinimum version required to store current data is: "+b+".\n")}else e=b;var M=function(t,e,r){var o=new s;r.forEach((function(e){o.put(e.mode.bit,4),o.put(e.getLength(),m.getCharCountIndicator(e.mode,t)),e.write(o)}));var a=8*(i.getSymbolTotalCodewords(t)-l.getTotalCodewordsCount(t,e));for(o.getLengthInBits()+4<=a&&o.put(0,4);o.getLengthInBits()%8!=0;)o.putBit(0);for(var u=(a-o.getLengthInBits())/8,h=0;h<u;h++)o.put(h%2?17:236,8);return function(t,e,r){for(var o=i.getSymbolTotalCodewords(e),s=o-l.getTotalCodewordsCount(e,r),a=l.getBlocksCount(e,r),u=a-o%a,h=Math.floor(o/a),c=Math.floor(s/a),d=c+1,p=h-c,m=new f(p),g=0,v=new Array(a),y=new Array(a),w=0,_=n.from(t.buffer),b=0;b<a;b++){var M=b<u?c:d;v[b]=_.slice(g,g+M),y[b]=m.encode(v[b]),g+=M,w=Math.max(w,M)}var x,k,E=n.alloc(o),A=0;for(x=0;x<w;x++)for(k=0;k<a;k++)x<v[k].length&&(E[A++]=v[k][x]);for(x=0;x<p;x++)for(k=0;k<a;k++)E[A++]=y[k][x];return E}(o,t,e)}(e,r,p),x=i.getSymbolSize(e),k=new a(x);return function(t,e){for(var r=t.size,n=h.getPositions(e),i=0;i<n.length;i++)for(var o=n[i][0],s=n[i][1],a=-1;a<=7;a++)if(!(o+a<=-1||r<=o+a))for(var u=-1;u<=7;u++)s+u<=-1||r<=s+u||(a>=0&&a<=6&&(0===u||6===u)||u>=0&&u<=6&&(0===a||6===a)||a>=2&&a<=4&&u>=2&&u<=4?t.set(o+a,s+u,!0,!0):t.set(o+a,s+u,!1,!0))}(k,e),function(t){for(var e=t.size,r=8;r<e-8;r++){var n=r%2==0;t.set(r,6,n,!0),t.set(6,r,n,!0)}}(k),function(t,e){for(var r=u.getPositions(e),n=0;n<r.length;n++)for(var i=r[n][0],o=r[n][1],s=-2;s<=2;s++)for(var a=-2;a<=2;a++)-2===s||2===s||-2===a||2===a||0===s&&0===a?t.set(i+s,o+a,!0,!0):t.set(i+s,o+a,!1,!0)}(k,e),y(k,r,0),e>=7&&function(t,e){for(var r,n,i,o=t.size,s=d.getEncodedBits(e),a=0;a<18;a++)r=Math.floor(a/3),n=a%3+o-8-3,i=1==(s>>a&1),t.set(r,n,i,!0),t.set(n,r,i,!0)}(k,e),function(t,e){for(var r=t.size,n=-1,i=r-1,o=7,s=0,a=r-1;a>0;a-=2)for(6===a&&a--;;){for(var u=0;u<2;u++)if(!t.isReserved(i,a-u)){var h=!1;s<e.length&&(h=1==(e[s]>>>o&1)),t.set(i,a-u,h),-1==--o&&(s++,o=7)}if((i+=n)<0||r<=i){i-=n,n=-n;break}}}(k,M),isNaN(o)&&(o=c.getBestMask(k,y.bind(null,k,r))),c.applyMask(o,k),y(k,r,o),{modules:k,version:e,errorCorrectionLevel:r,maskPattern:o,segments:p}}e.create=function(t,e){if(void 0===t||""===t)throw new Error("No input text");var r,n,s=o.M;return void 0!==e&&(s=o.from(e.errorCorrectionLevel,o.M),r=d.from(e.version),n=c.from(e.maskPattern),e.toSJISFunc&&i.setToSJISFunction(e.toSJISFunc)),w(t,r,s,n)}},52882:(t,e,r)=>{var n=r(99131),i=r(34136),o=r(6772).lW;function s(t){this.genPoly=void 0,this.degree=t,this.degree&&this.initialize(this.degree)}s.prototype.initialize=function(t){this.degree=t,this.genPoly=i.generateECPolynomial(this.degree)},s.prototype.encode=function(t){if(!this.genPoly)throw new Error("Encoder not initialized");var e=n.alloc(this.degree),r=o.concat([t,e],t.length+this.degree),s=i.mod(r,this.genPoly),a=this.degree-s.length;if(a>0){var u=n.alloc(this.degree);return s.copy(u,a),u}return s},t.exports=s},7007:(t,e)=>{var r="(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+",n="(?:(?![A-Z0-9 $%*+\\-./:]|"+(r=r.replace(/u/g,"\\u"))+")(?:.|[\r\n]))+";e.KANJI=new RegExp(r,"g"),e.BYTE_KANJI=new RegExp("[^A-Z0-9 $%*+\\-./:]+","g"),e.BYTE=new RegExp(n,"g"),e.NUMERIC=new RegExp("[0-9]+","g"),e.ALPHANUMERIC=new RegExp("[A-Z $%*+\\-./:]+","g");var i=new RegExp("^"+r+"$"),o=new RegExp("^[0-9]+$"),s=new RegExp("^[A-Z0-9 $%*+\\-./:]+$");e.testKanji=function(t){return i.test(t)},e.testNumeric=function(t){return o.test(t)},e.testAlphanumeric=function(t){return s.test(t)}},16130:(t,e,r)=>{var n=r(76910),i=r(41085),o=r(8260),s=r(43424),a=r(35442),u=r(7007),h=r(10242),c=r(65987);function l(t){return unescape(encodeURIComponent(t)).length}function f(t,e,r){for(var n,i=[];null!==(n=t.exec(r));)i.push({data:n[0],index:n.index,mode:e,length:n[0].length});return i}function d(t){var e,r,i=f(u.NUMERIC,n.NUMERIC,t),o=f(u.ALPHANUMERIC,n.ALPHANUMERIC,t);return h.isKanjiModeEnabled()?(e=f(u.BYTE,n.BYTE,t),r=f(u.KANJI,n.KANJI,t)):(e=f(u.BYTE_KANJI,n.BYTE,t),r=[]),i.concat(o,e,r).sort((function(t,e){return t.index-e.index})).map((function(t){return{data:t.data,mode:t.mode,length:t.length}}))}function p(t,e){switch(e){case n.NUMERIC:return i.getBitsLength(t);case n.ALPHANUMERIC:return o.getBitsLength(t);case n.KANJI:return a.getBitsLength(t);case n.BYTE:return s.getBitsLength(t)}}function m(t,e){var r,u=n.getBestModeForData(t);if((r=n.from(e,u))!==n.BYTE&&r.bit<u.bit)throw new Error('"'+t+'" cannot be encoded with mode '+n.toString(r)+".\n Suggested mode is: "+n.toString(u));switch(r!==n.KANJI||h.isKanjiModeEnabled()||(r=n.BYTE),r){case n.NUMERIC:return new i(t);case n.ALPHANUMERIC:return new o(t);case n.KANJI:return new a(t);case n.BYTE:return new s(t)}}e.fromArray=function(t){return t.reduce((function(t,e){return"string"==typeof e?t.push(m(e,null)):e.data&&t.push(m(e.data,e.mode)),t}),[])},e.fromString=function(t,r){for(var i=function(t,e){for(var r={},i={start:{}},o=["start"],s=0;s<t.length;s++){for(var a=t[s],u=[],h=0;h<a.length;h++){var c=a[h],l=""+s+h;u.push(l),r[l]={node:c,lastCount:0},i[l]={};for(var f=0;f<o.length;f++){var d=o[f];r[d]&&r[d].node.mode===c.mode?(i[d][l]=p(r[d].lastCount+c.length,c.mode)-p(r[d].lastCount,c.mode),r[d].lastCount+=c.length):(r[d]&&(r[d].lastCount=c.length),i[d][l]=p(c.length,c.mode)+4+n.getCharCountIndicator(c.mode,e))}}o=u}for(f=0;f<o.length;f++)i[o[f]].end=0;return{map:i,table:r}}(function(t){for(var e=[],r=0;r<t.length;r++){var i=t[r];switch(i.mode){case n.NUMERIC:e.push([i,{data:i.data,mode:n.ALPHANUMERIC,length:i.length},{data:i.data,mode:n.BYTE,length:i.length}]);break;case n.ALPHANUMERIC:e.push([i,{data:i.data,mode:n.BYTE,length:i.length}]);break;case n.KANJI:e.push([i,{data:i.data,mode:n.BYTE,length:l(i.data)}]);break;case n.BYTE:e.push([{data:i.data,mode:n.BYTE,length:l(i.data)}])}}return e}(d(t,h.isKanjiModeEnabled())),r),o=c.find_path(i.map,"start","end"),s=[],a=1;a<o.length-1;a++)s.push(i.table[o[a]].node);return e.fromArray(s.reduce((function(t,e){var r=t.length-1>=0?t[t.length-1]:null;return r&&r.mode===e.mode?(t[t.length-1].data+=e.data,t):(t.push(e),t)}),[]))},e.rawSplit=function(t){return e.fromArray(d(t,h.isKanjiModeEnabled()))}},10242:(t,e)=>{var r,n=[0,26,44,70,100,134,172,196,242,292,346,404,466,532,581,655,733,815,901,991,1085,1156,1258,1364,1474,1588,1706,1828,1921,2051,2185,2323,2465,2611,2761,2876,3034,3196,3362,3532,3706];e.getSymbolSize=function(t){if(!t)throw new Error('"version" cannot be null or undefined');if(t<1||t>40)throw new Error('"version" should be in range from 1 to 40');return 4*t+17},e.getSymbolTotalCodewords=function(t){return n[t]},e.getBCHDigit=function(t){for(var e=0;0!==t;)e++,t>>>=1;return e},e.setToSJISFunction=function(t){if("function"!=typeof t)throw new Error('"toSJISFunc" is not a valid function.');r=t},e.isKanjiModeEnabled=function(){return void 0!==r},e.toSJIS=function(t){return r(t)}},43114:(t,e)=>{e.isValid=function(t){return!isNaN(t)&&t>=1&&t<=40}},23103:(t,e,r)=>{var n=r(10242),i=r(35393),o=r(64908),s=r(76910),a=r(43114),u=r(93617),h=n.getBCHDigit(7973);function c(t,e){return s.getCharCountIndicator(t,e)+4}function l(t,e){var r=0;return t.forEach((function(t){var n=c(t.mode,e);r+=n+t.getBitsLength()})),r}e.from=function(t,e){return a.isValid(t)?parseInt(t,10):e},e.getCapacity=function(t,e,r){if(!a.isValid(t))throw new Error("Invalid QR Code version");void 0===r&&(r=s.BYTE);var o=8*(n.getSymbolTotalCodewords(t)-i.getTotalCodewordsCount(t,e));if(r===s.MIXED)return o;var u=o-c(r,t);switch(r){case s.NUMERIC:return Math.floor(u/10*3);case s.ALPHANUMERIC:return Math.floor(u/11*2);case s.KANJI:return Math.floor(u/13);case s.BYTE:default:return Math.floor(u/8)}},e.getBestVersionForData=function(t,r){var n,i=o.from(r,o.M);if(u(t)){if(t.length>1)return function(t,r){for(var n=1;n<=40;n++)if(l(t,n)<=e.getCapacity(n,r,s.MIXED))return n}(t,i);if(0===t.length)return 1;n=t[0]}else n=t;return function(t,r,n){for(var i=1;i<=40;i++)if(r<=e.getCapacity(i,n,t))return i}(n.mode,n.getLength(),i)},e.getEncodedBits=function(t){if(!a.isValid(t)||t<7)throw new Error("Invalid QR Code version");for(var e=t<<12;n.getBCHDigit(e)-h>=0;)e^=7973<<n.getBCHDigit(e)-h;return t<<12|e}},6907:(t,e,r)=>{var n=r(89653);e.render=function(t,e,r){var i=r,o=e;void 0!==i||e&&e.getContext||(i=e,e=void 0),e||(o=function(){try{return document.createElement("canvas")}catch(t){throw new Error("You need to specify a canvas element")}}()),i=n.getOptions(i);var s=n.getImageWidth(t.modules.size,i),a=o.getContext("2d"),u=a.createImageData(s,s);return n.qrToImageData(u.data,t,i),function(t,e,r){t.clearRect(0,0,e.width,e.height),e.style||(e.style={}),e.height=r,e.width=r,e.style.height=r+"px",e.style.width=r+"px"}(a,o,s),a.putImageData(u,0,0),o},e.renderToDataURL=function(t,r,n){var i=n;void 0!==i||r&&r.getContext||(i=r,r=void 0),i||(i={});var o=e.render(t,r,i),s=i.type||"image/png",a=i.rendererOpts||{};return o.toDataURL(s,a.quality)}},93776:(t,e,r)=>{var n=r(89653);function i(t,e){var r=t.a/255,n=e+'="'+t.hex+'"';return r<1?n+" "+e+'-opacity="'+r.toFixed(2).slice(1)+'"':n}function o(t,e,r){var n=t+e;return void 0!==r&&(n+=" "+r),n}e.render=function(t,e,r){var s=n.getOptions(e),a=t.modules.size,u=t.modules.data,h=a+2*s.margin,c=s.color.light.a?"<path "+i(s.color.light,"fill")+' d="M0 0h'+h+"v"+h+'H0z"/>':"",l="<path "+i(s.color.dark,"stroke")+' d="'+function(t,e,r){for(var n="",i=0,s=!1,a=0,u=0;u<t.length;u++){var h=Math.floor(u%e),c=Math.floor(u/e);h||s||(s=!0),t[u]?(a++,u>0&&h>0&&t[u-1]||(n+=s?o("M",h+r,.5+c+r):o("m",i,0),i=0,s=!1),h+1<e&&t[u+1]||(n+=o("h",a),a=0)):i++}return n}(u,a,s.margin)+'"/>',f='viewBox="0 0 '+h+" "+h+'"',d='<svg xmlns="http://www.w3.org/2000/svg" '+(s.width?'width="'+s.width+'" height="'+s.width+'" ':"")+f+' shape-rendering="crispEdges">'+c+l+"</svg>\n";return"function"==typeof r&&r(null,d),d}},89653:(t,e)=>{function r(t){if("number"==typeof t&&(t=t.toString()),"string"!=typeof t)throw new Error("Color should be defined as hex string");var e=t.slice().replace("#","").split("");if(e.length<3||5===e.length||e.length>8)throw new Error("Invalid hex color: "+t);3!==e.length&&4!==e.length||(e=Array.prototype.concat.apply([],e.map((function(t){return[t,t]})))),6===e.length&&e.push("F","F");var r=parseInt(e.join(""),16);return{r:r>>24&255,g:r>>16&255,b:r>>8&255,a:255&r,hex:"#"+e.slice(0,6).join("")}}e.getOptions=function(t){t||(t={}),t.color||(t.color={});var e=void 0===t.margin||null===t.margin||t.margin<0?4:t.margin,n=t.width&&t.width>=21?t.width:void 0,i=t.scale||4;return{width:n,scale:n?4:i,margin:e,color:{dark:r(t.color.dark||"#000000ff"),light:r(t.color.light||"#ffffffff")},type:t.type,rendererOpts:t.rendererOpts||{}}},e.getScale=function(t,e){return e.width&&e.width>=t+2*e.margin?e.width/(t+2*e.margin):e.scale},e.getImageWidth=function(t,r){var n=e.getScale(t,r);return Math.floor((t+2*r.margin)*n)},e.qrToImageData=function(t,r,n){for(var i=r.modules.size,o=r.modules.data,s=e.getScale(i,n),a=Math.floor((i+2*n.margin)*s),u=n.margin*s,h=[n.color.light,n.color.dark],c=0;c<a;c++)for(var l=0;l<a;l++){var f=4*(c*a+l),d=n.color.light;c>=u&&l>=u&&c<a-u&&l<a-u&&(d=h[o[Math.floor((c-u)/s)*i+Math.floor((l-u)/s)]?1:0]),t[f++]=d.r,t[f++]=d.g,t[f++]=d.b,t[f]=d.a}}},99131:(t,e,r)=>{"use strict";var n=r(93617);o.TYPED_ARRAY_SUPPORT=function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()}catch(t){return!1}}();var i=o.TYPED_ARRAY_SUPPORT?2147483647:1073741823;function o(t,e,r){return o.TYPED_ARRAY_SUPPORT||this instanceof o?"number"==typeof t?u(this,t):function(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");var i;return i=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n),o.TYPED_ARRAY_SUPPORT?i.__proto__=o.prototype:i=h(t,i),i}(t,e,r,n):"string"==typeof e?function(t,e){var r=0|l(e),n=a(t,r),i=n.write(e);return i!==r&&(n=n.slice(0,i)),n}(t,e):function(t,e){if(o.isBuffer(e)){var r=0|s(e.length),n=a(t,r);return 0===n.length||e.copy(n,0,0,r),n}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(i=e.length)!=i?a(t,0):h(t,e);if("Buffer"===e.type&&Array.isArray(e.data))return h(t,e.data)}var i;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}(this,t,e,r):new o(t,e,r)}function s(t){if(t>=i)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i.toString(16)+" bytes");return 0|t}function a(t,e){var r;return o.TYPED_ARRAY_SUPPORT?(r=new Uint8Array(e)).__proto__=o.prototype:(null===(r=t)&&(r=new o(e)),r.length=e),r}function u(t,e){var r=a(t,e<0?0:0|s(e));if(!o.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)r[n]=0;return r}function h(t,e){for(var r=e.length<0?0:0|s(e.length),n=a(t,r),i=0;i<r;i+=1)n[i]=255&e[i];return n}function c(t,e){var r;e=e||1/0;for(var n=t.length,i=null,o=[],s=0;s<n;++s){if((r=t.charCodeAt(s))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===n){(e-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;o.push(r)}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function l(t){return o.isBuffer(t)?t.length:"undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer)?t.byteLength:("string"!=typeof t&&(t=""+t),0===t.length?0:c(t).length)}o.TYPED_ARRAY_SUPPORT&&(o.prototype.__proto__=Uint8Array.prototype,o.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&o[Symbol.species]===o&&Object.defineProperty(o,Symbol.species,{value:null,configurable:!0,enumerable:!1,writable:!1})),o.prototype.write=function(t,e,r){void 0===e||void 0===r&&"string"==typeof e?(r=this.length,e=0):isFinite(e)&&(e|=0,isFinite(r)?r|=0:r=void 0);var n=this.length-e;if((void 0===r||r>n)&&(r=n),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");return function(t,e,r,n){return function(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}(c(e,t.length-r),t,r,n)}(this,t,e,r)},o.prototype.slice=function(t,e){var r,n=this.length;if((t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),o.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=o.prototype;else{var i=e-t;r=new o(i,void 0);for(var s=0;s<i;++s)r[s]=this[s+t]}return r},o.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i,s=n-r;if(this===t&&r<e&&e<n)for(i=s-1;i>=0;--i)t[i+e]=this[i+r];else if(s<1e3||!o.TYPED_ARRAY_SUPPORT)for(i=0;i<s;++i)t[i+e]=this[i+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+s),e);return s},o.prototype.fill=function(t,e,r){if("string"==typeof t){if("string"==typeof e?(e=0,r=this.length):"string"==typeof r&&(r=this.length),1===t.length){var n=t.charCodeAt(0);n<256&&(t=n)}}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var i;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(i=e;i<r;++i)this[i]=t;else{var s=o.isBuffer(t)?t:new o(t),a=s.length;for(i=0;i<r-e;++i)this[i+e]=s[i%a]}return this},o.concat=function(t,e){if(!n(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return a(null,0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var i=u(null,e),s=0;for(r=0;r<t.length;++r){var h=t[r];if(!o.isBuffer(h))throw new TypeError('"list" argument must be an Array of Buffers');h.copy(i,s),s+=h.length}return i},o.byteLength=l,o.prototype._isBuffer=!0,o.isBuffer=function(t){return!(null==t||!t._isBuffer)},t.exports.alloc=function(t){var e=new o(t);return e.fill(0),e},t.exports.from=function(t){return new o(t)}},6772:(t,e,r)=>{"use strict";var n=r(79742),i=r(80645),o="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.lW=u,e.h2=50;var s=2147483647;function a(t){if(t>s)throw new RangeError('The value "'+t+'" is invalid for option "size"');var e=new Uint8Array(t);return Object.setPrototypeOf(e,u.prototype),e}function u(t,e,r){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return l(t)}return h(t,e,r)}function h(t,e,r){if("string"==typeof t)return function(t,e){if("string"==typeof e&&""!==e||(e="utf8"),!u.isEncoding(e))throw new TypeError("Unknown encoding: "+e);var r=0|m(t,e),n=a(r),i=n.write(t,e);return i!==r&&(n=n.slice(0,i)),n}(t,e);if(ArrayBuffer.isView(t))return function(t){if(j(t,Uint8Array)){var e=new Uint8Array(t);return d(e.buffer,e.byteOffset,e.byteLength)}return f(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(j(t,ArrayBuffer)||t&&j(t.buffer,ArrayBuffer))return d(t,e,r);if("undefined"!=typeof SharedArrayBuffer&&(j(t,SharedArrayBuffer)||t&&j(t.buffer,SharedArrayBuffer)))return d(t,e,r);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');var n=t.valueOf&&t.valueOf();if(null!=n&&n!==t)return u.from(n,e,r);var i=function(t){if(u.isBuffer(t)){var e=0|p(t.length),r=a(e);return 0===r.length||t.copy(r,0,0,e),r}return void 0!==t.length?"number"!=typeof t.length||D(t.length)?a(0):f(t):"Buffer"===t.type&&Array.isArray(t.data)?f(t.data):void 0}(t);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return u.from(t[Symbol.toPrimitive]("string"),e,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function l(t){return c(t),a(t<0?0:0|p(t))}function f(t){for(var e=t.length<0?0:0|p(t.length),r=a(e),n=0;n<e;n+=1)r[n]=255&t[n];return r}function d(t,e,r){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(r||0))throw new RangeError('"length" is outside of buffer bounds');var n;return n=void 0===e&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,e):new Uint8Array(t,e,r),Object.setPrototypeOf(n,u.prototype),n}function p(t){if(t>=s)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s.toString(16)+" bytes");return 0|t}function m(t,e){if(u.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||j(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);var r=t.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;for(var i=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return q(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return K(t).length;default:if(i)return n?-1:q(t).length;e=(""+e).toLowerCase(),i=!0}}function g(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return B(this,e,r);case"utf8":case"utf-8":return A(this,e,r);case"ascii":return T(this,e,r);case"latin1":case"binary":return C(this,e,r);case"base64":return E(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function v(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function y(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),D(r=+r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=u.from(e,n)),u.isBuffer(e))return 0===e.length?-1:w(t,e,r,n,i);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):w(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function w(t,e,r,n,i){var o,s=1,a=t.length,u=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,r/=2}function h(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){var c=-1;for(o=r;o<a;o++)if(h(t,o)===h(e,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===u)return c*s}else-1!==c&&(o-=o-c),c=-1}else for(r+u>a&&(r=a-u),o=r;o>=0;o--){for(var l=!0,f=0;f<u;f++)if(h(t,o+f)!==h(e,f)){l=!1;break}if(l)return o}return-1}function _(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=e.length;n>o/2&&(n=o/2);for(var s=0;s<n;++s){var a=parseInt(e.substr(2*s,2),16);if(D(a))return s;t[r+s]=a}return s}function b(t,e,r,n){return H(q(e,t.length-r),t,r,n)}function M(t,e,r,n){return H(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function x(t,e,r,n){return H(K(e),t,r,n)}function k(t,e,r,n){return H(function(t,e){for(var r,n,i,o=[],s=0;s<t.length&&!((e-=2)<0);++s)n=(r=t.charCodeAt(s))>>8,i=r%256,o.push(i),o.push(n);return o}(e,t.length-r),t,r,n)}function E(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function A(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var o,s,a,u,h=t[i],c=null,l=h>239?4:h>223?3:h>191?2:1;if(i+l<=r)switch(l){case 1:h<128&&(c=h);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&h)<<6|63&o)>127&&(c=u);break;case 3:o=t[i+1],s=t[i+2],128==(192&o)&&128==(192&s)&&(u=(15&h)<<12|(63&o)<<6|63&s)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:o=t[i+1],s=t[i+2],a=t[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(u=(15&h)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(c=u)}null===c?(c=65533,l=1):c>65535&&(c-=65536,n.push(c>>>10&1023|55296),c=56320|1023&c),n.push(c),i+=l}return function(t){var e=t.length;if(e<=S)return String.fromCharCode.apply(String,t);for(var r="",n=0;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=S));return r}(n)}u.TYPED_ARRAY_SUPPORT=function(){try{var t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),u.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(u.prototype,"parent",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.buffer}}),Object.defineProperty(u.prototype,"offset",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.byteOffset}}),u.poolSize=8192,u.from=function(t,e,r){return h(t,e,r)},Object.setPrototypeOf(u.prototype,Uint8Array.prototype),Object.setPrototypeOf(u,Uint8Array),u.alloc=function(t,e,r){return function(t,e,r){return c(t),t<=0?a(t):void 0!==e?"string"==typeof r?a(t).fill(e,r):a(t).fill(e):a(t)}(t,e,r)},u.allocUnsafe=function(t){return l(t)},u.allocUnsafeSlow=function(t){return l(t)},u.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==u.prototype},u.compare=function(t,e){if(j(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),j(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;for(var r=t.length,n=e.length,i=0,o=Math.min(r,n);i<o;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=u.allocUnsafe(e),i=0;for(r=0;r<t.length;++r){var o=t[r];if(j(o,Uint8Array))i+o.length>n.length?u.from(o).copy(n,i):Uint8Array.prototype.set.call(n,o,i);else{if(!u.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(n,i)}i+=o.length}return n},u.byteLength=m,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)v(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)v(this,e,e+3),v(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)v(this,e,e+7),v(this,e+1,e+6),v(this,e+2,e+5),v(this,e+3,e+4);return this},u.prototype.toString=function(){var t=this.length;return 0===t?"":0===arguments.length?A(this,0,t):g.apply(this,arguments)},u.prototype.toLocaleString=u.prototype.toString,u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",r=e.h2;return t=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(t+=" ... "),"<Buffer "+t+">"},o&&(u.prototype[o]=u.prototype.inspect),u.prototype.compare=function(t,e,r,n,i){if(j(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),!u.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(this===t)return 0;for(var o=(i>>>=0)-(n>>>=0),s=(r>>>=0)-(e>>>=0),a=Math.min(o,s),h=this.slice(n,i),c=t.slice(e,r),l=0;l<a;++l)if(h[l]!==c[l]){o=h[l],s=c[l];break}return o<s?-1:s<o?1:0},u.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},u.prototype.indexOf=function(t,e,r){return y(this,t,e,r,!0)},u.prototype.lastIndexOf=function(t,e,r){return y(this,t,e,r,!1)},u.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return _(this,t,e,r);case"utf8":case"utf-8":return b(this,t,e,r);case"ascii":case"latin1":case"binary":return M(this,t,e,r);case"base64":return x(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,t,e,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var S=4096;function T(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function C(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function B(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var i="",o=e;o<r;++o)i+=z[t[o]];return i}function R(t,e,r){for(var n=t.slice(e,r),i="",o=0;o<n.length-1;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function I(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function P(t,e,r,n,i,o){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function L(t,e,r,n,i,o){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function N(t,e,r,n,o){return e=+e,r>>>=0,o||L(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function O(t,e,r,n,o){return e=+e,r>>>=0,o||L(t,0,r,8),i.write(t,e,r,n,52,8),r+8}u.prototype.slice=function(t,e){var r=this.length;(t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t);var n=this.subarray(t,e);return Object.setPrototypeOf(n,u.prototype),n},u.prototype.readUintLE=u.prototype.readUIntLE=function(t,e,r){t>>>=0,e>>>=0,r||I(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n},u.prototype.readUintBE=u.prototype.readUIntBE=function(t,e,r){t>>>=0,e>>>=0,r||I(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},u.prototype.readUint8=u.prototype.readUInt8=function(t,e){return t>>>=0,e||I(t,1,this.length),this[t]},u.prototype.readUint16LE=u.prototype.readUInt16LE=function(t,e){return t>>>=0,e||I(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUint16BE=u.prototype.readUInt16BE=function(t,e){return t>>>=0,e||I(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUint32LE=u.prototype.readUInt32LE=function(t,e){return t>>>=0,e||I(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUint32BE=u.prototype.readUInt32BE=function(t,e){return t>>>=0,e||I(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,r){t>>>=0,e>>>=0,r||I(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*e)),n},u.prototype.readIntBE=function(t,e,r){t>>>=0,e>>>=0,r||I(t,e,this.length);for(var n=e,i=1,o=this[t+--n];n>0&&(i*=256);)o+=this[t+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},u.prototype.readInt8=function(t,e){return t>>>=0,e||I(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){t>>>=0,e||I(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(t,e){t>>>=0,e||I(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(t,e){return t>>>=0,e||I(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return t>>>=0,e||I(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return t>>>=0,e||I(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return t>>>=0,e||I(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return t>>>=0,e||I(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return t>>>=0,e||I(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUintLE=u.prototype.writeUIntLE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||P(this,t,e,r,Math.pow(2,8*r)-1,0);var i=1,o=0;for(this[e]=255&t;++o<r&&(i*=256);)this[e+o]=t/i&255;return e+r},u.prototype.writeUintBE=u.prototype.writeUIntBE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||P(this,t,e,r,Math.pow(2,8*r)-1,0);var i=r-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+r},u.prototype.writeUint8=u.prototype.writeUInt8=function(t,e,r){return t=+t,e>>>=0,r||P(this,t,e,1,255,0),this[e]=255&t,e+1},u.prototype.writeUint16LE=u.prototype.writeUInt16LE=function(t,e,r){return t=+t,e>>>=0,r||P(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},u.prototype.writeUint16BE=u.prototype.writeUInt16BE=function(t,e,r){return t=+t,e>>>=0,r||P(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},u.prototype.writeUint32LE=u.prototype.writeUInt32LE=function(t,e,r){return t=+t,e>>>=0,r||P(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},u.prototype.writeUint32BE=u.prototype.writeUInt32BE=function(t,e,r){return t=+t,e>>>=0,r||P(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},u.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e>>>=0,!n){var i=Math.pow(2,8*r-1);P(this,t,e,r,i-1,-i)}var o=0,s=1,a=0;for(this[e]=255&t;++o<r&&(s*=256);)t<0&&0===a&&0!==this[e+o-1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+r},u.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e>>>=0,!n){var i=Math.pow(2,8*r-1);P(this,t,e,r,i-1,-i)}var o=r-1,s=1,a=0;for(this[e+o]=255&t;--o>=0&&(s*=256);)t<0&&0===a&&0!==this[e+o+1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+r},u.prototype.writeInt8=function(t,e,r){return t=+t,e>>>=0,r||P(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,r){return t=+t,e>>>=0,r||P(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},u.prototype.writeInt16BE=function(t,e,r){return t=+t,e>>>=0,r||P(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},u.prototype.writeInt32LE=function(t,e,r){return t=+t,e>>>=0,r||P(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},u.prototype.writeInt32BE=function(t,e,r){return t=+t,e>>>=0,r||P(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},u.prototype.writeFloatLE=function(t,e,r){return N(this,t,e,!0,r)},u.prototype.writeFloatBE=function(t,e,r){return N(this,t,e,!1,r)},u.prototype.writeDoubleLE=function(t,e,r){return O(this,t,e,!0,r)},u.prototype.writeDoubleBE=function(t,e,r){return O(this,t,e,!1,r)},u.prototype.copy=function(t,e,r,n){if(!u.isBuffer(t))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i=n-r;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,r,n):Uint8Array.prototype.set.call(t,this.subarray(r,n),e),i},u.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===t.length){var i=t.charCodeAt(0);("utf8"===n&&i<128||"latin1"===n)&&(t=i)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var o;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(o=e;o<r;++o)this[o]=t;else{var s=u.isBuffer(t)?t:u.from(t,n),a=s.length;if(0===a)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(o=0;o<r-e;++o)this[o+e]=s[o%a]}return this};var U=/[^+/0-9A-Za-z-_]/g;function q(t,e){var r;e=e||1/0;for(var n=t.length,i=null,o=[],s=0;s<n;++s){if((r=t.charCodeAt(s))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===n){(e-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;o.push(r)}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function K(t){return n.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(U,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function H(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}function j(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function D(t){return t!=t}var z=function(){for(var t="0123456789abcdef",e=new Array(256),r=0;r<16;++r)for(var n=16*r,i=0;i<16;++i)e[n+i]=t[r]+t[i];return e}()},93617:t=>{var e={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==e.call(t)}},17563:(t,e,r)=>{"use strict";const n=r(70610),i=r(44020),o=r(80500);function s(t){if("string"!=typeof t||1!==t.length)throw new TypeError("arrayFormatSeparator must be single character string")}function a(t,e){return e.encode?e.strict?n(t):encodeURIComponent(t):t}function u(t,e){return e.decode?i(t):t}function h(t){return Array.isArray(t)?t.sort():"object"==typeof t?h(Object.keys(t)).sort(((t,e)=>Number(t)-Number(e))).map((e=>t[e])):t}function c(t){const e=t.indexOf("#");return-1!==e&&(t=t.slice(0,e)),t}function l(t){const e=(t=c(t)).indexOf("?");return-1===e?"":t.slice(e+1)}function f(t,e){return e.parseNumbers&&!Number.isNaN(Number(t))&&"string"==typeof t&&""!==t.trim()?t=Number(t):!e.parseBooleans||null===t||"true"!==t.toLowerCase()&&"false"!==t.toLowerCase()||(t="true"===t.toLowerCase()),t}function d(t,e){s((e=Object.assign({decode:!0,sort:!0,arrayFormat:"none",arrayFormatSeparator:",",parseNumbers:!1,parseBooleans:!1},e)).arrayFormatSeparator);const r=function(t){let e;switch(t.arrayFormat){case"index":return(t,r,n)=>{e=/\[(\d*)\]$/.exec(t),t=t.replace(/\[\d*\]$/,""),e?(void 0===n[t]&&(n[t]={}),n[t][e[1]]=r):n[t]=r};case"bracket":return(t,r,n)=>{e=/(\[\])$/.exec(t),t=t.replace(/\[\]$/,""),e?void 0!==n[t]?n[t]=[].concat(n[t],r):n[t]=[r]:n[t]=r};case"comma":case"separator":return(e,r,n)=>{const i="string"==typeof r&&r.split("").indexOf(t.arrayFormatSeparator)>-1?r.split(t.arrayFormatSeparator).map((e=>u(e,t))):null===r?r:u(r,t);n[e]=i};default:return(t,e,r)=>{void 0!==r[t]?r[t]=[].concat(r[t],e):r[t]=e}}}(e),n=Object.create(null);if("string"!=typeof t)return n;if(!(t=t.trim().replace(/^[?#&]/,"")))return n;for(const i of t.split("&")){let[t,s]=o(e.decode?i.replace(/\+/g," "):i,"=");s=void 0===s?null:["comma","separator"].includes(e.arrayFormat)?s:u(s,e),r(u(t,e),s,n)}for(const t of Object.keys(n)){const r=n[t];if("object"==typeof r&&null!==r)for(const t of Object.keys(r))r[t]=f(r[t],e);else n[t]=f(r,e)}return!1===e.sort?n:(!0===e.sort?Object.keys(n).sort():Object.keys(n).sort(e.sort)).reduce(((t,e)=>{const r=n[e];return Boolean(r)&&"object"==typeof r&&!Array.isArray(r)?t[e]=h(r):t[e]=r,t}),Object.create(null))}e.extract=l,e.parse=d,e.stringify=(t,e)=>{if(!t)return"";s((e=Object.assign({encode:!0,strict:!0,arrayFormat:"none",arrayFormatSeparator:","},e)).arrayFormatSeparator);const r=r=>e.skipNull&&null==t[r]||e.skipEmptyString&&""===t[r],n=function(t){switch(t.arrayFormat){case"index":return e=>(r,n)=>{const i=r.length;return void 0===n||t.skipNull&&null===n||t.skipEmptyString&&""===n?r:null===n?[...r,[a(e,t),"[",i,"]"].join("")]:[...r,[a(e,t),"[",a(i,t),"]=",a(n,t)].join("")]};case"bracket":return e=>(r,n)=>void 0===n||t.skipNull&&null===n||t.skipEmptyString&&""===n?r:null===n?[...r,[a(e,t),"[]"].join("")]:[...r,[a(e,t),"[]=",a(n,t)].join("")];case"comma":case"separator":return e=>(r,n)=>null==n||0===n.length?r:0===r.length?[[a(e,t),"=",a(n,t)].join("")]:[[r,a(n,t)].join(t.arrayFormatSeparator)];default:return e=>(r,n)=>void 0===n||t.skipNull&&null===n||t.skipEmptyString&&""===n?r:null===n?[...r,a(e,t)]:[...r,[a(e,t),"=",a(n,t)].join("")]}}(e),i={};for(const e of Object.keys(t))r(e)||(i[e]=t[e]);const o=Object.keys(i);return!1!==e.sort&&o.sort(e.sort),o.map((r=>{const i=t[r];return void 0===i?"":null===i?a(r,e):Array.isArray(i)?i.reduce(n(r),[]).join("&"):a(r,e)+"="+a(i,e)})).filter((t=>t.length>0)).join("&")},e.parseUrl=(t,e)=>{e=Object.assign({decode:!0},e);const[r,n]=o(t,"#");return Object.assign({url:r.split("?")[0]||"",query:d(l(t),e)},e&&e.parseFragmentIdentifier&&n?{fragmentIdentifier:u(n,e)}:{})},e.stringifyUrl=(t,r)=>{r=Object.assign({encode:!0,strict:!0},r);const n=c(t.url).split("?")[0]||"",i=e.extract(t.url),o=e.parse(i,{sort:!1}),s=Object.assign(o,t.query);let u=e.stringify(s,r);u&&(u=`?${u}`);let h=function(t){let e="";const r=t.indexOf("#");return-1!==r&&(e=t.slice(r)),e}(t.url);return t.fragmentIdentifier&&(h=`#${a(t.fragmentIdentifier,r)}`),`${n}${u}${h}`}},80500:t=>{"use strict";t.exports=(t,e)=>{if("string"!=typeof t||"string"!=typeof e)throw new TypeError("Expected the arguments to be of type `string`");if(""===e)return[t];const r=t.indexOf(e);return-1===r?[t]:[t.slice(0,r),t.slice(r+e.length)]}},70610:t=>{"use strict";t.exports=t=>encodeURIComponent(t).replace(/[!'()*]/g,(t=>`%${t.charCodeAt(0).toString(16).toUpperCase()}`))},11742:t=>{t.exports=function(){var t=document.getSelection();if(!t.rangeCount)return function(){};for(var e=document.activeElement,r=[],n=0;n<t.rangeCount;n++)r.push(t.getRangeAt(n));switch(e.tagName.toUpperCase()){case"INPUT":case"TEXTAREA":e.blur();break;default:e=null}return t.removeAllRanges(),function(){"Caret"===t.type&&t.removeAllRanges(),t.rangeCount||r.forEach((function(e){t.addRange(e)})),e&&e.focus()}}},65054:(t,e,r)=>{var n=r(4501).strict;t.exports=function(t){if(n(t)){var e=Buffer.from(t.buffer);return t.byteLength!==t.buffer.byteLength&&(e=e.slice(t.byteOffset,t.byteOffset+t.byteLength)),e}return Buffer.from(t)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL2RldGVjdC1icm93c2VyL2VzL2luZGV4LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvYnJvd3Nlci11dGlscy9kaXN0L2VzbS9icm93c2VyLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvYnJvd3Nlci11dGlscy9kaXN0L2VzbS9qc29uLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvc2FmZS1qc29uL2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvYnJvd3Nlci11dGlscy9kaXN0L2VzbS9sb2NhbC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2Jyb3dzZXItdXRpbHMvZGlzdC9lc20vbW9iaWxlLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvYnJvd3Nlci11dGlscy9kaXN0L2VzbS9yZWdpc3RyeS5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2VuY29kaW5nL2Rpc3QvY2pzL2luZGV4LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnQvZGlzdC9janMvY3J5cHRvLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnQvZGlzdC9janMvZW52LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnQvZGlzdC9janMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9xcmNvZGUtbW9kYWwvZGlzdC9janMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9xcmNvZGUtbW9kYWwvbm9kZV9tb2R1bGVzL3ByZWFjdC9kaXN0L3ByZWFjdC5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9xcmNvZGUtbW9kYWwvbm9kZV9tb2R1bGVzL3ByZWFjdC9ob29rcy9kaXN0L2hvb2tzLm1vZHVsZS5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3FyY29kZS1tb2RhbC9ub2RlX21vZHVsZXMvcHJlYWN0L2NvbXBhdC9kaXN0L2NvbXBhdC5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9zb2NrZXQtdHJhbnNwb3J0L25vZGVfbW9kdWxlcy93cy9icm93c2VyLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL2JuLmpzL2xpYi9ibi5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3V0aWxzL2Rpc3QvZXNtL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3V0aWxzL2Rpc3QvZXNtL2VuY29kaW5nLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvZGlzdC9lc20vbWlzYy5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHMvZGlzdC9lc20vZm9ybWF0LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvZGlzdC9lc20vdmFsaWRhdG9ycy5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3V0aWxzL2Rpc3QvZXNtL2V0aGVyZXVtLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvZGlzdC9lc20vdXJsLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvc29ja2V0LXRyYW5zcG9ydC9kaXN0L2VzbS9uZXR3b3JrLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvc29ja2V0LXRyYW5zcG9ydC9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2NvcmUvZGlzdC9lc20vZXJyb3JzLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvY29yZS9kaXN0L2VzbS91cmwuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9jb3JlL2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvY3J5cHRvL2Rpc3QvZXNtL2NvbnN0YW50cy9kZWZhdWx0LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvY3J5cHRvL2Rpc3QvZXNtL2xpYi9icm93c2VyLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvY3J5cHRvL2Rpc3QvZXNtL2NvbnN0YW50cy9sZW5ndGguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9jcnlwdG8vZGlzdC9lc20vY29uc3RhbnRzL29wZXJhdGlvbnMuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9jcnlwdG8vZGlzdC9lc20vYnJvd3Nlci9obWFjLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvaXNvLWNyeXB0by9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3JhbmRvbWJ5dGVzL2Rpc3QvZXNtL2Jyb3dzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9jcnlwdG8vZGlzdC9lc20vYnJvd3Nlci9hZXMuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9odHRwLWNvbm5lY3Rpb24vZGlzdC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC93ZWIzLXByb3ZpZGVyL2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvY2xpZW50L2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvY29yZS9kaXN0L2VzbS9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9jb3JlL2Rpc3QvZXNtL3N0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9kaXN0L2VzbS9zZXNzaW9uLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvZGlzdC9lc20vcGF5bG9hZC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3dlYjMtcHJvdmlkZXIvbm9kZV9tb2R1bGVzL2JuLmpzL2xpYi9ibi5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3dlYjMtcHJvdmlkZXIvbm9kZV9tb2R1bGVzL2V0aC1zaWctdXRpbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3dlYjMtcHJvdmlkZXIvbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtYWJpL2luZGV4LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvd2ViMy1wcm92aWRlci9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy1hYmkvbGliL2luZGV4LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvd2ViMy1wcm92aWRlci9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy1hYmkvbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0L2FjY291bnQuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC93ZWIzLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLWFiaS9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3QvYnl0ZXMuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC93ZWIzLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLWFiaS9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3QvY29uc3RhbnRzLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvd2ViMy1wcm92aWRlci9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy1hYmkvbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0L2hhc2guanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC93ZWIzLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLWFiaS9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC93ZWIzLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLWFiaS9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3Qvb2JqZWN0LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvd2ViMy1wcm92aWRlci9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy1hYmkvbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0L3NlY3AyNTZrMXYzLWFkYXB0ZXIuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC93ZWIzLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLWFiaS9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3Qvc2VjcDI1NmsxdjMtbGliL2Rlci5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3dlYjMtcHJvdmlkZXIvbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtYWJpL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLXV0aWwvZGlzdC9zZWNwMjU2azF2My1saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC93ZWIzLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLWFiaS9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3Qvc2lnbmF0dXJlLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvd2ViMy1wcm92aWRlci9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy10eC9lczUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC93ZWIzLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLXV0aWwvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3dlYjMtcHJvdmlkZXIvbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0L3NlY3AyNTZrMS1hZGFwdGVyLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvd2ViMy1wcm92aWRlci9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3Qvc2VjcDI1NmsxLWxpYi9kZXIuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC93ZWIzLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLXV0aWwvZGlzdC9zZWNwMjU2azEtbGliL2luZGV4LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvd2ViMy1wcm92aWRlci9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC93ZWIzLXByb3ZpZGVyL25vZGVfbW9kdWxlcy93ZWIzLXByb3ZpZGVyLWVuZ2luZS9zdWJwcm92aWRlcnMvY2FjaGUuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC93ZWIzLXByb3ZpZGVyL25vZGVfbW9kdWxlcy93ZWIzLXByb3ZpZGVyLWVuZ2luZS9zdWJwcm92aWRlcnMvZmlsdGVycy5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3dlYjMtcHJvdmlkZXIvbm9kZV9tb2R1bGVzL3dlYjMtcHJvdmlkZXItZW5naW5lL3N1YnByb3ZpZGVycy9maXh0dXJlLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvd2ViMy1wcm92aWRlci9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvc3VicHJvdmlkZXJzL2hvb2tlZC13YWxsZXQuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC93ZWIzLXByb3ZpZGVyL25vZGVfbW9kdWxlcy93ZWIzLXByb3ZpZGVyLWVuZ2luZS9zdWJwcm92aWRlcnMvanNvbi1ycGMtZW5naW5lLW1pZGRsZXdhcmUuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC93ZWIzLXByb3ZpZGVyL25vZGVfbW9kdWxlcy93ZWIzLXByb3ZpZGVyLWVuZ2luZS9zdWJwcm92aWRlcnMvbm9uY2UtdHJhY2tlci5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3dlYjMtcHJvdmlkZXIvbm9kZV9tb2R1bGVzL3dlYjMtcHJvdmlkZXItZW5naW5lL3N1YnByb3ZpZGVycy9zdWJwcm92aWRlci5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3dlYjMtcHJvdmlkZXIvbm9kZV9tb2R1bGVzL3dlYjMtcHJvdmlkZXItZW5naW5lL3N1YnByb3ZpZGVycy9zdWJzY3JpcHRpb25zLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvd2ViMy1wcm92aWRlci9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvdXRpbC9jcmVhdGUtcGF5bG9hZC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3dlYjMtcHJvdmlkZXIvbm9kZV9tb2R1bGVzL3dlYjMtcHJvdmlkZXItZW5naW5lL3V0aWwvZXN0aW1hdGUtZ2FzLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvd2ViMy1wcm92aWRlci9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvdXRpbC9yYW5kb20taWQuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC93ZWIzLXByb3ZpZGVyL25vZGVfbW9kdWxlcy93ZWIzLXByb3ZpZGVyLWVuZ2luZS91dGlsL3JwYy1jYWNoZS11dGlscy5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3dlYjMtcHJvdmlkZXIvbm9kZV9tb2R1bGVzL3dlYjMtcHJvdmlkZXItZW5naW5lL3V0aWwvc3RvcGxpZ2h0LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvd2luZG93LWdldHRlcnMvZGlzdC9janMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC93aW5kb3ctbWV0YWRhdGEvZGlzdC9janMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9jb3B5LXRvLWNsaXBib2FyZC9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL2RlY29kZS11cmktY29tcG9uZW50L2luZGV4LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvZGlqa3N0cmFqcy9kaWprc3RyYS5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1taWRkbGV3YXJlL2Jsb2NrLWNhY2hlLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLW1pZGRsZXdhcmUvY2FjaGUtdXRpbHMuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9ldGgtanNvbi1ycGMtbWlkZGxld2FyZS9ub2RlX21vZHVsZXMvanNvbi1ycGMtZW5naW5lL3NyYy9jcmVhdGVBc3luY01pZGRsZXdhcmUuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9pcy10eXBlZGFycmF5L2luZGV4LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9icm93c2VyLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jYW4tcHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9hbGlnbm1lbnQtcGF0dGVybi5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9hbHBoYW51bWVyaWMtZGF0YS5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9iaXQtYnVmZmVyLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2JpdC1tYXRyaXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvYnl0ZS1kYXRhLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2Vycm9yLWNvcnJlY3Rpb24tY29kZS5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9lcnJvci1jb3JyZWN0aW9uLWxldmVsLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2ZpbmRlci1wYXR0ZXJuLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2Zvcm1hdC1pbmZvLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2dhbG9pcy1maWVsZC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9rYW5qaS1kYXRhLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL21hc2stcGF0dGVybi5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9tb2RlLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL251bWVyaWMtZGF0YS5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9wb2x5bm9taWFsLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL3FyY29kZS5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9yZWVkLXNvbG9tb24tZW5jb2Rlci5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9yZWdleC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9zZWdtZW50cy5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS91dGlscy5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS92ZXJzaW9uLWNoZWNrLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL2NhbnZhcy5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvcmVuZGVyZXIvc3ZnLXRhZy5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvcmVuZGVyZXIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3V0aWxzL3R5cGVkYXJyYXktYnVmZmVyLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvcXJjb2RlL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9xdWVyeS1zdHJpbmcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9zcGxpdC1vbi1maXJzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3N0cmljdC11cmktZW5jb2RlL2luZGV4LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvdG9nZ2xlLXNlbGVjdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3R5cGVkYXJyYXktdG8tYnVmZmVyL2luZGV4LmpzIl0sIm5hbWVzIjpbIkJyb3dzZXJJbmZvIiwibmFtZSIsInZlcnNpb24iLCJvcyIsInRoaXMiLCJ0eXBlIiwiTm9kZUluZm8iLCJwcm9jZXNzIiwicGxhdGZvcm0iLCJTZWFyY2hCb3REZXZpY2VJbmZvIiwiYm90IiwiQm90SW5mbyIsIlJlYWN0TmF0aXZlSW5mbyIsIlNFQVJDSEJPVF9PU19SRUdFWCIsInVzZXJBZ2VudFJ1bGVzIiwib3BlcmF0aW5nU3lzdGVtUnVsZXMiLCJwYXJzZVVzZXJBZ2VudCIsInVhIiwibWF0Y2hlZFJ1bGUiLCJyZWR1Y2UiLCJtYXRjaGVkIiwiX2EiLCJicm93c2VyIiwicmVnZXgiLCJ1YU1hdGNoIiwiZXhlYyIsIm1hdGNoVXNlckFnZW50IiwibWF0Y2giLCJ2ZXJzaW9uUGFydHMiLCJzcGxpdCIsInNsaWNlIiwibGVuZ3RoIiwicyIsImkiLCJpbCIsImFyZ3VtZW50cyIsInIiLCJBcnJheSIsImsiLCJhIiwiaiIsImpsIiwiX19zcHJlYWRBcnJheXMiLCJjb3VudCIsIm91dHB1dCIsImlpIiwicHVzaCIsImNyZWF0ZVZlcnNpb25QYXJ0cyIsImpvaW4iLCJkZXRlY3RPUyIsInNlYXJjaEJvdE1hdGNoIiwiZGV0ZWN0RW52IiwidXNlckFnZW50IiwiZG9jdW1lbnQiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0IiwiZGV0ZWN0IiwiZW52IiwidW5kZWZpbmVkIiwiaXNBbmRyb2lkIiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsImlzSU9TIiwibWF4VG91Y2hQb2ludHMiLCJpc01vYmlsZSIsImlzTm9kZSIsImlzQnJvd3NlciIsImdldE5hdmlnYXRvciIsImdldEZyb21XaW5kb3ciLCJnZXRGcm9tV2luZG93T3JUaHJvdyIsImdldERvY3VtZW50T3JUaHJvdyIsImdldERvY3VtZW50IiwiZ2V0TmF2aWdhdG9yT3JUaHJvdyIsImdldExvY2F0aW9uT3JUaHJvdyIsImdldExvY2F0aW9uIiwiZ2V0Q3J5cHRvT3JUaHJvdyIsImdldENyeXB0byIsImdldExvY2FsU3RvcmFnZU9yVGhyb3ciLCJnZXRMb2NhbFN0b3JhZ2UiLCJnZXRDbGllbnRNZXRhIiwidmFsdWUiLCJFcnJvciIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsInNldExvY2FsIiwia2V5IiwiZGF0YSIsInJhdyIsImxvY2FsIiwic2V0SXRlbSIsImdldExvY2FsIiwiZ2V0SXRlbSIsInJlbW92ZUxvY2FsIiwicmVtb3ZlSXRlbSIsIm1vYmlsZUxpbmtDaG9pY2VLZXkiLCJmb3JtYXRJT1NNb2JpbGUiLCJ1cmkiLCJlbnRyeSIsImVuY29kZWRVcmkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ1bml2ZXJzYWxMaW5rIiwiZGVlcExpbmsiLCJlbmRzV2l0aCIsInNhdmVNb2JpbGVMaW5rSW5mbyIsImZvY3VzVXJpIiwiaHJlZiIsIk9iamVjdCIsImFzc2lnbiIsImdldE1vYmlsZVJlZ2lzdHJ5RW50cnkiLCJyZWdpc3RyeSIsImZpbHRlciIsImdldE1vYmlsZUxpbmtSZWdpc3RyeSIsIndoaXRlbGlzdCIsImxpbmtzIiwibWFwIiwiQm9vbGVhbiIsIkFQSV9VUkwiLCJnZXRXYWxsZXRSZWdpc3RyeVVybCIsImdldERhcHBSZWdpc3RyeVVybCIsImdldEFwcExvZ29VcmwiLCJpZCIsImZvcm1hdE1vYmlsZVJlZ2lzdHJ5RW50cnkiLCJzaG9ydE5hbWUiLCJtZXRhZGF0YSIsImNvbG9yIiwiY29sb3JzIiwicHJpbWFyeSIsImxvZ28iLCJ1bml2ZXJzYWwiLCJuYXRpdmUiLCJmb3JtYXRNb2JpbGVSZWdpc3RyeSIsInZhbHVlcyIsIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJyZW1vdmVIZXhMZWFkaW5nWmVyb3MiLCJzYW5pdGl6ZUhleCIsImFkZEhleFByZWZpeCIsInJlbW92ZUhleFByZWZpeCIsInBhZFJpZ2h0IiwicGFkTGVmdCIsInNhbml0aXplQnl0ZXMiLCJzd2FwSGV4Iiwic3dhcEJ5dGVzIiwic3BsaXRCeXRlcyIsImNhbGNCeXRlTGVuZ3RoIiwidHJpbVJpZ2h0IiwidHJpbUxlZnQiLCJjb25jYXRBcnJheXMiLCJjb25jYXRCdWZmZXJzIiwiZ2V0RW5jb2RpbmciLCJnZXRUeXBlIiwiaXNBcnJheUJ1ZmZlciIsImlzVHlwZWRBcnJheSIsImlzQnVmZmVyIiwiaXNIZXhTdHJpbmciLCJpc0JpbmFyeVN0cmluZyIsImJpbmFyeVRvTnVtYmVyIiwiYmluYXJ5VG9VdGY4IiwiYmluYXJ5VG9IZXgiLCJiaW5hcnlUb0FycmF5IiwiYmluYXJ5VG9CdWZmZXIiLCJudW1iZXJUb0JpbmFyeSIsIm51bWJlclRvVXRmOCIsIm51bWJlclRvSGV4IiwibnVtYmVyVG9BcnJheSIsIm51bWJlclRvQnVmZmVyIiwidXRmOFRvQmluYXJ5IiwidXRmOFRvTnVtYmVyIiwidXRmOFRvSGV4IiwidXRmOFRvQXJyYXkiLCJ1dGY4VG9CdWZmZXIiLCJoZXhUb0JpbmFyeSIsImhleFRvTnVtYmVyIiwiaGV4VG9VdGY4IiwiaGV4VG9BcnJheSIsImhleFRvQnVmZmVyIiwiYXJyYXlUb0JpbmFyeSIsImFycmF5VG9OdW1iZXIiLCJhcnJheVRvVXRmOCIsImFycmF5VG9IZXgiLCJhcnJheVRvQnVmZmVyIiwiYnVmZmVyVG9CaW5hcnkiLCJidWZmZXJUb051bWJlciIsImJ1ZmZlclRvVXRmOCIsImJ1ZmZlclRvSGV4IiwiYnVmZmVyVG9BcnJheSIsImlzX3R5cGVkYXJyYXlfMSIsInR5cGVkYXJyYXlfdG9fYnVmZmVyXzEiLCJFTkNfSEVYIiwiRU5DX1VURjgiLCJidWYiLCJVaW50OEFycmF5IiwicHJlZml4ZWQiLCJoZXgiLCJ0b1N0cmluZyIsInJlYWRVSW50QkUiLCJhcnIiLCJkZWZhdWx0IiwiZnJvbSIsIkJ1ZmZlciIsInV0ZjgiLCJudW0iLCJiaW4iLCJ4IiwicGFyc2VJbnQiLCJzdHIiLCJSZWdFeHAiLCJ0ZXN0IiwidmFsIiwic3RyaWN0IiwiYnl0ZUxlbmd0aCIsImJ5dGVTaXplIiwicmVtYWluZGVyIiwiYnl0ZXMiLCJyZXZlcnNlU3RyaW5nIiwicGFkZGluZyIsIlNUUklOR19aRVJPIiwicGFkU3RyaW5nIiwicmVwbGFjZSIsInN0YXJ0c1dpdGgiLCJyZXZlcnNlIiwibGVmdCIsImRpZmYiLCJyZXN1bHQiLCJwYWQiLCJyZXBlYXQiLCJhc3NlcnRpb24iLCJlcnJvck1lc3NhZ2UiLCJhc3NlcnQiLCJpc0FycmF5IiwiYXJncyIsImNvbmNhdCIsImZvckVhY2giLCJhcmciLCJzdWJzdHJpbmciLCJnZXRCcm93ZXJDcnlwdG8iLCJnIiwiY3J5cHRvIiwibXNDcnlwdG8iLCJnZXRTdWJ0bGVDcnlwdG8iLCJicm93c2VyQ3J5cHRvIiwic3VidGxlIiwid2Via2l0U3VidGxlIiwiaXNCcm93c2VyQ3J5cHRvQXZhaWxhYmxlIiwiaXNSZWFjdE5hdGl2ZSIsInZlcnNpb25zIiwibm9kZSIsIl9fY3JlYXRlQmluZGluZyIsImNyZWF0ZSIsIm8iLCJtIiwiazIiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX19leHBvcnRTdGFyIiwicCIsImhhc093blByb3BlcnR5IiwiX2ludGVyb3BEZWZhdWx0IiwiZXgiLCJicm93c2VyVXRpbHMiLCJRUkNvZGUiLCJjb3B5IiwiUmVhY3QiLCJTeW1ib2wiLCJpdGVyYXRvciIsImFzeW5jSXRlcmF0b3IiLCJXQUxMRVRDT05ORUNUX1dSQVBQRVJfSUQiLCJXQUxMRVRDT05ORUNUX1NUWUxFX0lEIiwiV0FMTEVUQ09OTkVDVF9NT0RBTF9JRCIsIldBTExFVENPTk5FQ1RfQ1RBX1RFWFRfSUQiLCJIZWFkZXIiLCJwcm9wcyIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJzcmMiLCJvbkNsaWNrIiwib25DbG9zZSIsIkNvbm5lY3RCdXR0b24iLCJXQUxMRVRDT05ORUNUX0NPTk5FQ1RfQlVUVE9OX0lEIiwicmVsIiwic3R5bGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJ0YXJnZXQiLCJXYWxsZXRCdXR0b24iLCJiYWNrZ3JvdW5kIiwiYmFja2dyb3VuZFNpemUiLCJXYWxsZXRJY29uIiwiZm9udFNpemUiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiTGlua0Rpc3BsYXkiLCJhbmRyb2lkIiwicmVmIiwidXNlU3RhdGUiLCJpbnB1dCIsInNldElucHV0IiwicmVmJDEiLCJzZXRGaWx0ZXIiLCJyZWYkMiIsInBhZ2UiLCJzZXRQYWdlIiwibGluayIsImdyaWQiLCJwYWdlcyIsIk1hdGgiLCJjZWlsIiwicmFuZ2UiLCJwYWdlTGlua3MiLCJfIiwiaW5kZXgiLCJoYXNQYWdpbmciLCJmaWx0ZXJUaW1lb3V0IiwidGV4dCIsImNvbm5lY3RfbW9iaWxlX3dhbGxldCIsImNob29zZV9wcmVmZXJyZWRfd2FsbGV0IiwicGxhY2Vob2xkZXIiLCJvbkNoYW5nZSIsImUiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiY29ubmVjdCIsInVzZUNhbGxiYWNrIiwiaGFuZGxlQ2xpY2tJT1MiLCJGcmFnbWVudCIsIm5vX3dhbGxldHNfZm91bmQiLCJsb2FkaW5nIiwiZmlsbCIsInBhZ2VOdW1iZXIiLCJzZWxlY3RlZCIsIm1hcmdpbiIsImZvbnRXZWlnaHQiLCJOb3RpZmljYXRpb24iLCJzaG93IiwibWVzc2FnZSIsInRyaW0iLCJRUkNvZGVEaXNwbGF5Iiwibm90aWZpY2F0aW9uIiwic2V0Tm90aWZpY2F0aW9uIiwic3ZnIiwic2V0U3ZnIiwidXNlRWZmZWN0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwiZGF0YVN0cmluZyIsInJlamVjdCIsImZvcm1hdFFSQ29kZUltYWdlIiwiX2Zvcm1hdFFSQ29kZUltYWdlIiwic2Nhbl9xcmNvZGVfd2l0aF93YWxsZXQiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsImNvcGllZF90b19jbGlwYm9hcmQiLCJzZXRJbnRlcnZhbCIsImNvcHlfdG9fY2xpcGJvYXJkIiwiTW9kYWwiLCJtb2JpbGUiLCJxcmNvZGVNb2RhbE9wdGlvbnMiLCJtb2JpbGVMaW5rcyIsImRlc2t0b3BMaW5rcyIsInNldExvYWRpbmciLCJmZXRjaGVkIiwic2V0RmV0Y2hlZCIsImRpc3BsYXlRUkNvZGUiLCJzZXREaXNwbGF5UVJDb2RlIiwiZGlzcGxheVByb3BzIiwicmVmJDMiLCJzaW5nbGVMaW5rSHJlZiIsInNldFNpbmdsZUxpbmtIcmVmIiwicmVmJDQiLCJoYXNTaW5nbGVMaW5rIiwic2V0SGFzU2luZ2xlTGluayIsInJlZiQ1Iiwic2V0TGlua3MiLCJyZWYkNiIsInNldEVycm9yTWVzc2FnZSIsImdldExpbmtzSWZOZWVkZWQiLCJfdGVtcCIsImJvZHkiLCJyZWNvdmVyIiwidXJsIiwicmVnaXN0cnlVcmwiLCJmZXRjaCIsImpzb24iLCJfbGlua3MiLCJub19zdXBwb3J0ZWRfd2FsbGV0cyIsIl9jYXRjaCIsInNvbWV0aGluZ193ZW50X3dyb25nIiwiY29uc29sZSIsImVycm9yIiwiaW5pdExpbmtzIiwicmlnaHRTZWxlY3RlZCIsImNvbm5lY3Rfd2l0aCIsInFyY29kZSIsImRlc2t0b3AiLCJsYW5ndWFnZXMiLCJkZSIsImVuIiwiZXMiLCJmciIsImtvIiwicHQiLCJ6aCIsImZhIiwidHJpZ2dlckNsb3NlQW5pbWF0aW9uIiwiZG9jIiwibW9kYWwiLCJnZXRFbGVtZW50QnlJZCIsIndyYXBwZXIiLCJyZW1vdmVDaGlsZCIsImdldFdyYXBwZWRDYWxsYmFjayIsImNiIiwib3BlbiIsImxvZyIsInByZXYiLCJoZWFkIiwic2V0QXR0cmlidXRlIiwiaW5uZXJUZXh0IiwiYXBwZW5kQ2hpbGQiLCJpbmplY3RTdHlsZVNoZWV0IiwibGFuZyIsInJlbmRlcldyYXBwZXIiLCJyZW5kZXIiLCJsYW5ndWFnZSIsIm9wZW4kMSIsImNsb3NlIiwibW9kdWxlIiwibiIsInUiLCJ0IiwiZiIsImMiLCJsIiwidiIsInBhcmVudE5vZGUiLCJoIiwiY2hpbGRyZW4iLCJkZWZhdWx0UHJvcHMiLCJfX2siLCJfXyIsIl9fYiIsIl9fZSIsIl9fZCIsIl9fYyIsImNvbnN0cnVjdG9yIiwiX192Iiwidm5vZGUiLCJ5IiwiZCIsImNvbnRleHQiLCJ3IiwiaW5kZXhPZiIsImJhc2UiLCJkZWJvdW5jZVJlbmRlcmluZyIsInNvcnQiLCJzb21lIiwiX19QIiwiQSIsIl9fbiIsIm93bmVyU1ZHRWxlbWVudCIsIlQiLCJiIiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJEIiwiQyIsInNldFByb3BlcnR5IiwiTiIsImNzc1RleHQiLCJhZGRFdmVudExpc3RlbmVyIiwieiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsInNldEF0dHJpYnV0ZU5TIiwicmVtb3ZlQXR0cmlidXRlIiwiZXZlbnQiLCJQIiwiY29udGV4dFR5cGUiLCJfX0UiLCJwcm90b3R5cGUiLCJFIiwic3ViIiwic3RhdGUiLCJfX2giLCJfX3MiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiX19yIiwiZ2V0Q2hpbGRDb250ZXh0IiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCIkIiwiZGlmZmVkIiwiY2FsbCIsIm5vZGVUeXBlIiwibG9jYWxOYW1lIiwiY3JlYXRlVGV4dE5vZGUiLCJjcmVhdGVFbGVtZW50TlMiLCJpcyIsImNoaWxkTm9kZXMiLCJhdHRyaWJ1dGVzIiwiaW5uZXJIVE1MIiwiY2hlY2tlZCIsImN1cnJlbnQiLCJ1bm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJIIiwiSSIsIkwiLCJNIiwiQ29uc3VtZXIiLCJQcm92aWRlciIsInNwbGljZSIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsInNldFN0YXRlIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJmb3JjZVVwZGF0ZSIsImJpbmQiLCJfX0giLCJ1c2VEZWJ1Z1ZhbHVlIiwiRiIsInEiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiX19wcm90b19fIiwiaXNSZWFjdENvbXBvbmVudCIsImRpc3BsYXlOYW1lIiwiUyIsIlIiLCJvbmx5IiwidG9BcnJheSIsIlUiLCJfX3UiLCJPIiwicG9wIiwiZmFsbGJhY2siLCJkZWxldGUiLCJyZXZlYWxPcmRlciIsInNpemUiLCJNYXAiLCJzZXQiLCJXIiwiY29udGFpbmVyIiwiZm9yIiwiZmlyc3RDaGlsZCIsIlYiLCJaIiwiY29uZmlndXJhYmxlIiwicGVyc2lzdCIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJuYXRpdmVFdmVudCIsImNsYXNzIiwiJCR0eXBlb2YiLCJkZWZhdWx0VmFsdWUiLCJtdWx0aXBsZSIsIm9uZG91YmxlY2xpY2siLCJvbmRibGNsaWNrIiwib25iZWZvcmVpbnB1dCIsIm9uY2hhbmdlIiwib25pbnB1dCIsIkIiLCJHIiwiSiIsIksiLCJRIiwiWCIsIlkiLCJ1c2VSZWR1Y2VyIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlUmVmIiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZU1lbW8iLCJ1c2VDb250ZXh0IiwiQ2hpbGRyZW4iLCJoeWRyYXRlIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsImNyZWF0ZVBvcnRhbCIsImNyZWF0ZUNvbnRleHQiLCJjcmVhdGVGYWN0b3J5IiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJmaW5kRE9NTm9kZSIsIkNvbXBvbmVudCIsIlB1cmVDb21wb25lbnQiLCJtZW1vIiwiZm9yd2FyZFJlZiIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwiU3VzcGVuc2UiLCJTdXNwZW5zZUxpc3QiLCJsYXp5IiwibXNnIiwiaW5oZXJpdHMiLCJjdG9yIiwic3VwZXJDdG9yIiwic3VwZXJfIiwiVGVtcEN0b3IiLCJCTiIsIm51bWJlciIsImVuZGlhbiIsImlzQk4iLCJuZWdhdGl2ZSIsIndvcmRzIiwicmVkIiwiX2luaXQiLCJ3b3JkU2l6ZSIsInBhcnNlSGV4Iiwic3RhcnQiLCJlbmQiLCJsZW4iLCJtaW4iLCJjaGFyQ29kZUF0IiwicGFyc2VCYXNlIiwibXVsIiwibWF4IiwicmlnaHQiLCJjbXAiLCJfaW5pdE51bWJlciIsIl9pbml0QXJyYXkiLCJfcGFyc2VIZXgiLCJfcGFyc2VCYXNlIiwic3RyaXAiLCJvZmYiLCJsaW1iTGVuIiwibGltYlBvdyIsInRvdGFsIiwid29yZCIsImltdWxuIiwiX2lhZGRuIiwicG93IiwiZGVzdCIsImNsb25lIiwiX2V4cGFuZCIsIl9ub3JtU2lnbiIsImluc3BlY3QiLCJ6ZXJvcyIsImdyb3VwU2l6ZXMiLCJncm91cEJhc2VzIiwic21hbGxNdWxUbyIsInNlbGYiLCJvdXQiLCJsbyIsImNhcnJ5IiwibmNhcnJ5IiwicndvcmQiLCJtYXhKIiwiZ3JvdXBTaXplIiwiZ3JvdXBCYXNlIiwiaXNaZXJvIiwibW9kbiIsImlkaXZuIiwidG9OdW1iZXIiLCJyZXQiLCJ0b0pTT04iLCJ0b0J1ZmZlciIsInRvQXJyYXlMaWtlIiwiQXJyYXlUeXBlIiwicmVxTGVuZ3RoIiwibGl0dGxlRW5kaWFuIiwicmVzIiwiYW5kbG4iLCJpdXNocm4iLCJjbHozMiIsIl9jb3VudEJpdHMiLCJfemVyb0JpdHMiLCJiaXRMZW5ndGgiLCJoaSIsInplcm9CaXRzIiwidG9Ud29zIiwid2lkdGgiLCJhYnMiLCJpbm90biIsImlhZGRuIiwiZnJvbVR3b3MiLCJ0ZXN0biIsIm5vdG4iLCJpbmVnIiwiaXNOZWciLCJuZWciLCJpdW9yIiwiaW9yIiwib3IiLCJ1b3IiLCJpdWFuZCIsImlhbmQiLCJhbmQiLCJ1YW5kIiwiaXV4b3IiLCJpeG9yIiwieG9yIiwidXhvciIsImJ5dGVzTmVlZGVkIiwiYml0c0xlZnQiLCJzZXRuIiwiYml0Iiwid2JpdCIsImlhZGQiLCJpc3ViIiwiYWRkIiwiY29tYjEwTXVsVG8iLCJtaWQiLCJhMCIsImFsMCIsImFoMCIsImExIiwiYWwxIiwiYWgxIiwiYTIiLCJhbDIiLCJhaDIiLCJhMyIsImFsMyIsImFoMyIsImE0IiwiYWw0IiwiYWg0IiwiYTUiLCJhbDUiLCJhaDUiLCJhNiIsImFsNiIsImFoNiIsImE3IiwiYWw3IiwiYWg3IiwiYTgiLCJhbDgiLCJhaDgiLCJhOSIsImFsOSIsImFoOSIsImIwIiwiYmwwIiwiYmgwIiwiYjEiLCJibDEiLCJiaDEiLCJiMiIsImJsMiIsImJoMiIsImIzIiwiYmwzIiwiYmgzIiwiYjQiLCJibDQiLCJiaDQiLCJiNSIsImJsNSIsImJoNSIsImI2IiwiYmw2IiwiYmg2IiwiYjciLCJibDciLCJiaDciLCJiOCIsImJsOCIsImJoOCIsImI5IiwiYmw5IiwiYmg5IiwidzAiLCJpbXVsIiwidzEiLCJ3MiIsInczIiwidzQiLCJ3NSIsInc2IiwidzciLCJ3OCIsInc5IiwidzEwIiwidzExIiwidzEyIiwidzEzIiwidzE0IiwidzE1IiwidzE2IiwidzE3IiwidzE4IiwianVtYm9NdWxUbyIsIkZGVE0iLCJtdWxwIiwibXVsVG8iLCJobmNhcnJ5IiwiYmlnTXVsVG8iLCJtYWtlUkJUIiwicmV2QmluIiwicmIiLCJwZXJtdXRlIiwicmJ0IiwicndzIiwiaXdzIiwicnR3cyIsIml0d3MiLCJ0cmFuc2Zvcm0iLCJydHdkZiIsImNvcyIsIlBJIiwiaXR3ZGYiLCJzaW4iLCJydHdkZl8iLCJpdHdkZl8iLCJyZSIsImllIiwicm8iLCJpbyIsInJ4IiwiZ3Vlc3NMZW4xM2IiLCJvZGQiLCJjb25qdWdhdGUiLCJub3JtYWxpemUxM2IiLCJ3cyIsInJvdW5kIiwiY29udmVydDEzYiIsInN0dWIiLCJwaCIsInJ3c3QiLCJpd3N0IiwibnJ3cyIsIm5yd3N0Iiwibml3c3QiLCJybXdzIiwibXVsZiIsIm11bG4iLCJzcXIiLCJpc3FyIiwidG9CaXRBcnJheSIsIml1c2hsbiIsImJpdHMiLCJjYXJyeU1hc2siLCJuZXdDYXJyeSIsImlzaGxuIiwiaGludCIsImV4dGVuZGVkIiwibWFzayIsIm1hc2tlZFdvcmRzIiwiaXNocm4iLCJzaGxuIiwidXNobG4iLCJzaHJuIiwidXNocm4iLCJpbWFza24iLCJtYXNrbiIsImlzdWJuIiwiYWRkbiIsInN1Ym4iLCJpYWJzIiwiX2lzaGxuc3VibXVsIiwic2hpZnQiLCJfd29yZERpdiIsIm1vZGUiLCJiaGkiLCJxaiIsImRpdiIsImRpdm1vZCIsInBvc2l0aXZlIiwiZGl2biIsInVtb2QiLCJkaXZSb3VuZCIsImRtIiwiaGFsZiIsInIyIiwiYWNjIiwiZWdjZCIsImlzRXZlbiIsInlwIiwieHAiLCJpbSIsImlzT2RkIiwiam0iLCJnY2QiLCJfaW52bXAiLCJ4MSIsIngyIiwiZGVsdGEiLCJjbXBuIiwiaW52bSIsImJpbmNuIiwidWNtcCIsImd0biIsImd0IiwiZ3RlbiIsImd0ZSIsImx0biIsImx0IiwibHRlbiIsImx0ZSIsImVxbiIsImVxIiwiUmVkIiwidG9SZWQiLCJjdHgiLCJjb252ZXJ0VG8iLCJfZm9yY2VSZWQiLCJmcm9tUmVkIiwiY29udmVydEZyb20iLCJmb3JjZVJlZCIsInJlZEFkZCIsInJlZElBZGQiLCJyZWRTdWIiLCJyZWRJU3ViIiwicmVkU2hsIiwic2hsIiwicmVkTXVsIiwiX3ZlcmlmeTIiLCJyZWRJTXVsIiwicmVkU3FyIiwiX3ZlcmlmeTEiLCJyZWRJU3FyIiwicmVkU3FydCIsInNxcnQiLCJyZWRJbnZtIiwicmVkTmVnIiwicmVkUG93IiwicHJpbWVzIiwiazI1NiIsInAyMjQiLCJwMTkyIiwicDI1NTE5IiwiTVByaW1lIiwidG1wIiwiX3RtcCIsIksyNTYiLCJQMjI0IiwiUDE5MiIsIlAyNTUxOSIsInByaW1lIiwiX3ByaW1lIiwiTW9udCIsImltb2QiLCJyaW52IiwibWludiIsImlyZWR1Y2UiLCJybGVuIiwiaW11bEsiLCJvdXRMZW4iLCJuZXh0IiwibW9kMyIsIm9uZSIsIm5PbmUiLCJscG93IiwiaW52Iiwid25kIiwiY3VycmVudExlbiIsIm1vbnQiLCJyZXNlcnZlZEV2ZW50cyIsInNpZ25pbmdNZXRob2RzIiwiaW5mdXJhTmV0d29ya3MiLCIxIiwiMyIsIjQiLCI1IiwiNDIiLCJjb252ZXJ0QXJyYXlCdWZmZXJUb0J1ZmZlciIsImFyckJ1ZiIsImNvbnZlcnROdW1iZXJUb0hleCIsIm5vUHJlZml4IiwiRGF0ZSIsIm5vdyIsImZsb29yIiwicmFuZG9tIiwidXVpZCIsImlzSnNvblJwY1Jlc3BvbnNlU3VjY2VzcyIsIm9iamVjdCIsImlzSnNvblJwY1Jlc3BvbnNlRXJyb3IiLCJpc0ludGVybmFsRXZlbnQiLCJwYXJzZVBlcnNvbmFsU2lnbiIsInBhcmFtcyIsImFycmF5IiwicGFyc2VUcmFuc2FjdGlvbkRhdGEiLCJ0eERhdGEiLCJhZGRyZXNzIiwiaGFzaCIsImtlY2Nha18yNTYiLCJjaGVja3N1bSIsInRvVXBwZXJDYXNlIiwidG9DaGVja3N1bUFkZHJlc3MiLCJwYXJzZUhleFZhbHVlcyIsImlzRW1wdHlTdHJpbmciLCJ0eERhdGFSUEMiLCJ0byIsImdhc1ByaWNlIiwiZ2FzIiwiZ2FzTGltaXQiLCJub25jZSIsInBydW5hYmxlIiwia2V5cyIsInBhcnNlUXVlcnlTdHJpbmciLCJxdWVyeVN0cmluZyIsIldTIiwiV2ViU29ja2V0IiwiRVJST1JfU0VTU0lPTl9DT05ORUNURUQiLCJFUlJPUl9TRVNTSU9OX0RJU0NPTk5FQ1RFRCIsIkVSUk9SX0lOVkFMSURfUkVTUE9OU0UiLCJFUlJPUl9RUkNPREVfTU9EQUxfVVNFUl9DTE9TRUQiLCJicmlkZ2VzIiwiY2hhciIsImFzeW5jIiwiYnJvd3NlckltcG9ydEtleSIsImJ1ZmZlciIsImltcG9ydEtleSIsImdldEFsZ28iLCJnZXRPcHMiLCJobWFjU2hhMjU2U2lnbiIsImNyeXB0b0tleSIsInNpZ25hdHVyZSIsInNpZ24iLCJnZW5lcmF0ZUtleSIsImdldFJhbmRvbVZhbHVlcyIsInZlcmlmeUhtYWMiLCJwYXlsb2FkIiwiY2lwaGVyVGV4dCIsIml2IiwiaG1hYyIsImhtYWNIZXgiLCJ1bnNpZ25lZCIsImNobWFjIiwiY2htYWNIZXgiLCJlbmNyeXB0IiwicHJvdmlkZWRJdiIsIl9rZXkiLCJpdkFycmF5QnVmZmVyIiwiaXZIZXgiLCJjb250ZW50U3RyaW5nIiwiY29udGVudCIsImJyb3dzZXJBZXNFbmNyeXB0IiwiY2lwaGVyVGV4dEhleCIsImRlY3J5cHQiLCJicm93c2VyQWVzRGVjcnlwdCIsIlhIUiIsIlhNTEh0dHBSZXF1ZXN0IiwiSFRUUENvbm5lY3Rpb24iLCJzdXBlciIsImNvZGUiLCJqc29ucnBjIiwiaW50ZXJuYWwiLCJtZXRob2QiLCJmb3JtYXRFcnJvciIsImVtaXQiLCJ4aHIiLCJyZXNwb25kZWQiLCJlcnIiLCJhYm9ydCIsInJlc3BvbnNlIiwic2V0UmVxdWVzdEhlYWRlciIsInRpbWVvdXQiLCJvbmVycm9yIiwib250aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVGV4dCIsInNlbmQiLCJQcm92aWRlckVuZ2luZSIsIkNhY2hlU3VicHJvdmlkZXIiLCJGaXh0dXJlU3VicHJvdmlkZXIiLCJGaWx0ZXJTdWJwcm92aWRlciIsIkhvb2tlZFdhbGxldFN1YnByb3ZpZGVyIiwiTm9uY2VTdWJwcm92aWRlciIsIlN1YnNjcmlwdGlvbnNTdWJwcm92aWRlciIsIm9wdHMiLCJwb2xsaW5nSW50ZXJ2YWwiLCJicmlkZ2UiLCJxcmNvZGVNb2RhbCIsInJwYyIsImluZnVyYUlkIiwiaHR0cCIsImlzQ29ubmVjdGluZyIsImNvbm5lY3RlZCIsImNvbm5lY3RDYWxsYmFja3MiLCJhY2NvdW50cyIsImNoYWluSWQiLCJycGNVcmwiLCJlbmFibGUiLCJ3YyIsImdldFdhbGxldENvbm5lY3RvciIsInN1YnNjcmliZVdhbGxldENvbm5lY3RvciIsInJlcXVlc3QiLCJjYWxsYmFjayIsInNlbmRBc3luY1Byb21pc2UiLCJzZW5kQXN5bmMiLCJvbkNvbm5lY3QiLCJ0cmlnZ2VyQ29ubmVjdCIsImNvbm5lY3RvciIsInByb3RvY29sIiwiX2JyaWRnZSIsIl9jbGllbnRJZCIsIl9jbGllbnRNZXRhIiwiX3BlZXJJZCIsIl9wZWVyTWV0YSIsIl9oYW5kc2hha2VJZCIsIl9oYW5kc2hha2VUb3BpYyIsIl9jb25uZWN0ZWQiLCJfYWNjb3VudHMiLCJfY2hhaW5JZCIsIl9uZXR3b3JrSWQiLCJfcnBjVXJsIiwiX2V2ZW50TWFuYWdlciIsIl9ldmVudEVtaXR0ZXJzIiwiZXZlbnRFbWl0dGVyIiwiZXZlbnRFbWl0dGVycyIsImlzUmVzZXJ2ZWRFdmVudCIsImNvbm5lY3Rvck9wdHMiLCJjbGllbnRNZXRhIiwiX2NyeXB0b0xpYiIsImNyeXB0b0xpYiIsIl9zZXNzaW9uU3RvcmFnZSIsInNlc3Npb25TdG9yYWdlIiwic3RvcmFnZUlkIiwic2Vzc2lvbiIsIl9xcmNvZGVNb2RhbCIsIl9xcmNvZGVNb2RhbE9wdGlvbnMiLCJfc2lnbmluZ01ldGhvZHMiLCJob3N0bmFtZSIsImV4dHJhY3RIb3N0bmFtZSIsImV4dHJhY3RSb290RG9tYWluIiwic2hvdWxkU2VsZWN0UmFuZG9tbHkiLCJfZ2V0U3RvcmFnZVNlc3Npb24iLCJoYW5kc2hha2VJZCIsIl9zdWJzY3JpYmVUb1Nlc3Npb25SZXNwb25zZSIsIl90cmFuc3BvcnQiLCJ0cmFuc3BvcnQiLCJfcXVldWUiLCJfZXZlbnRzIiwiX3N1YnNjcmlwdGlvbnMiLCJfcHJvdG9jb2wiLCJfdmVyc2lvbiIsIl91cmwiLCJfbmV0TW9uaXRvciIsIl9zb2NrZXQiLCJfbmV4dFNvY2tldCIsInN1YnNjcmlwdGlvbnMiLCJuZXRNb25pdG9yIiwidHJpZ2dlciIsIm9uIiwiX3NvY2tldENyZWF0ZSIsIl9zb2NrZXRDbG9zZSIsInRvcGljIiwic2lsZW50IiwiX3NvY2tldFNlbmQiLCJfYiIsInNwbGl0VXJsIiwiaG9zdCIsIm5ld1F1ZXJ5UGFyYW1zIiwicXVlcnlQYXJhbXMiLCJmb3JtYXRRdWVyeVN0cmluZyIsImFwcGVuZFRvUXVlcnlTdHJpbmciLCJwYXRoRW5kIiwic3Vic3RyIiwiZ2V0UXVlcnlTdHJpbmciLCJnZXRXZWJTb2NrZXRVcmwiLCJvbm1lc3NhZ2UiLCJfc29ja2V0UmVjZWl2ZSIsIm9ub3BlbiIsIl9zb2NrZXRPcGVuIiwiX3NvY2tldEVycm9yIiwib25jbG9zZSIsIl9xdWV1ZVN1YnNjcmlwdGlvbnMiLCJfcHVzaFF1ZXVlIiwic29ja2V0TWVzc2FnZSIsIl9zZXRUb1F1ZXVlIiwiZXZlbnRzIiwiY2xpZW50SWQiLCJfc3Vic2NyaWJlVG9JbnRlcm5hbEV2ZW50cyIsIl9pbml0VHJhbnNwb3J0IiwiX3N1YnNjcmliZVRvU2Vzc2lvblJlcXVlc3QiLCJwdXNoU2VydmVyT3B0cyIsIl9yZWdpc3RlclB1c2hTZXJ2ZXIiLCJfZm9ybWF0VXJpIiwiaGFuZHNoYWtlVG9waWMiLCJfcGFyc2VVcmkiLCJwZWVySWQiLCJwZWVyTWV0YSIsInN1YnNjcmliZSIsInVuc3Vic2NyaWJlIiwiaW5zdGFudFJlcXVlc3QiLCJfZ2VuZXJhdGVLZXkiLCJfZm9ybWF0UmVxdWVzdCIsImVuZEluc3RhbnRSZXF1ZXN0Iiwia2lsbFNlc3Npb24iLCJfc2VuZENhbGxSZXF1ZXN0IiwiY3JlYXRlU2Vzc2lvbiIsInBlbmRpbmciLCJfc2VuZFNlc3Npb25SZXF1ZXN0Iiwic2Vzc2lvblN0YXR1cyIsIm5ldHdvcmtJZCIsInNlc3Npb25QYXJhbXMiLCJhcHByb3ZlZCIsIl9zZW5kUmVzcG9uc2UiLCJfc2V0U3RvcmFnZVNlc3Npb24iLCJzZXNzaW9uRXJyb3IiLCJfZm9ybWF0UmVzcG9uc2UiLCJfcmVtb3ZlU3RvcmFnZVNlc3Npb24iLCJfbWFuYWdlU3RvcmFnZVNlc3Npb24iLCJfc2VuZFJlcXVlc3QiLCJfaGFuZGxlU2Vzc2lvbkRpc2Nvbm5lY3QiLCJ0eCIsInBhcnNlZFR4IiwiY2hhaW5QYXJhbXMiLCJvcHRpb25zIiwiX3N1YnNjcmliZVRvUmVzcG9uc2UiLCJmb3JtYXR0ZWRSZXF1ZXN0IiwiZm9ybWF0dGVkUmVzcG9uc2UiLCJjYWxsUmVxdWVzdCIsImVuY3J5cHRpb25QYXlsb2FkIiwiX2VuY3J5cHQiLCJmb3JjZVB1c2hOb3RpZmljYXRpb24iLCJpc1NpbGVudFBheWxvYWQiLCJlcnJvck1zZyIsIl9zdWJzY3JpYmVUb0NhbGxSZXNwb25zZSIsImJhc2VSZXNwb25zZSIsImZvcm1hdFJwY0Vycm9yIiwidHJhbnNwb3J0Q2xvc2UiLCJfZGVjcnlwdCIsIl9oYW5kbGVTZXNzaW9uUmVzcG9uc2UiLCJtb2JpbGVMaW5rVXJsIiwibG9jYXRpb24iLCJpbnRlcm5hbFBheWxvYWQiLCJfaGFuZGxlSW5jb21pbmdNZXNzYWdlcyIsInBhdGhTdGFydCIsInJlcXVpcmVkUGFyYW1zIiwicGF0aCIsInBhcnNlUmVxdWlyZWRQYXJhbXMiLCJwYXJzZVF1ZXJ5UGFyYW1zIiwicGFyc2VXYWxsZXRDb25uZWN0VXJpIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZ2V0U2Vzc2lvbiIsInNldFNlc3Npb24iLCJyZW1vdmVTZXNzaW9uIiwidG9rZW4iLCJwdXNoU3Vic2NyaXB0aW9uIiwicGVlck5hbWUiLCJoZWFkZXJzIiwiQWNjZXB0Iiwic3VjY2VzcyIsImluaXRpYWxpemUiLCJkaXNhYmxlU2Vzc2lvbkNyZWF0aW9uIiwib25EaXNjb25uZWN0IiwiaGFuZGxlT3RoZXJSZXF1ZXN0cyIsImZvcm1hdFJlc3BvbnNlIiwiaGFuZGxlUmVhZFJlcXVlc3RzIiwic2VuZEN1c3RvbVJlcXVlc3QiLCJ1cGRhdGVTdGF0ZSIsImNhdGNoIiwic3RvcCIsInVwZGF0ZVJwY1VybCIsImN1c3RvbSIsImluZnVyYVVybCIsIm5ldHdvcmsiLCJnZXRJbmZ1cmFScGNVcmwiLCJnZXRScGNVcmwiLCJ1cGRhdGVIdHRwQ29ubmVjdGlvbiIsImFkZFByb3ZpZGVyIiwiZXRoX2hhc2hyYXRlIiwiZXRoX21pbmluZyIsImV0aF9zeW5jaW5nIiwibmV0X2xpc3RlbmluZyIsIndlYjNfY2xpZW50VmVyc2lvbiIsImNvbmZpZ1dhbGxldCIsImhhbmRsZVJlcXVlc3QiLCJzZXRFbmdpbmUiLCJnZXRBY2NvdW50cyIsInByb2Nlc3NNZXNzYWdlIiwibXNnUGFyYW1zIiwic2lnbk1lc3NhZ2UiLCJwcm9jZXNzUGVyc29uYWxNZXNzYWdlIiwic2lnblBlcnNvbmFsTWVzc2FnZSIsInByb2Nlc3NTaWduVHJhbnNhY3Rpb24iLCJ0eFBhcmFtcyIsInNpZ25UcmFuc2FjdGlvbiIsInByb2Nlc3NUcmFuc2FjdGlvbiIsInNlbmRUcmFuc2FjdGlvbiIsInByb2Nlc3NUeXBlZE1lc3NhZ2UiLCJzaWduVHlwZWREYXRhIiwicGFyc2VIZXg0Qml0cyIsInN0cmluZyIsInBhcnNlSGV4Qnl0ZSIsImxvd2VyQm91bmQiLCJfc3RyaXAiLCJldGhVdGlsIiwiZXRoQWJpIiwidHlwZWRTaWduYXR1cmVIYXNoIiwidHlwZWREYXRhIiwidHlwZXMiLCJzY2hlbWEiLCJzb2xpZGl0eVNIQTMiLCJyZWNvdmVyUHVibGljS2V5Iiwic2lnIiwic2lnUGFyYW1zIiwiZnJvbVJwY1NpZyIsImVjcmVjb3ZlciIsImdldFB1YmxpY0tleUZvciIsImhhc2hQZXJzb25hbE1lc3NhZ2UiLCJwYWRXaXRoWmVyb2VzIiwibXlTdHJpbmciLCJjb25jYXRTaWciLCJyU2lnIiwiZnJvbVNpZ25lZCIsInNTaWciLCJ2U2lnIiwiYnVmZmVyVG9JbnQiLCJyU3RyIiwidG9VbnNpZ25lZCIsInNTdHIiLCJ2U3RyIiwic3RyaXBIZXhQcmVmaXgiLCJpbnRUb0hleCIsIm5vcm1hbGl6ZSIsInBlcnNvbmFsU2lnbiIsInByaXZhdGVLZXkiLCJtc2dIYXNoIiwiZWNzaWduIiwicmVjb3ZlclBlcnNvbmFsU2lnbmF0dXJlIiwicHVibGljS2V5Iiwic2VuZGVyIiwicHVibGljVG9BZGRyZXNzIiwiZXh0cmFjdFB1YmxpY0tleSIsImhhc2hCdWZmZXIiLCJyZWNvdmVyVHlwZWRTaWduYXR1cmUiLCJ1dGlscyIsIkFCSSIsImVsZW1lbnRhcnlOYW1lIiwicGFyc2VUeXBlTiIsInBhcnNlVHlwZU54TSIsInBhcnNlVHlwZUFycmF5IiwicGFyc2VOdW1iZXIiLCJpc0hleFByZWZpeGVkIiwicGFyc2VTaWduYXR1cmUiLCJyZXRhcmdzIiwiZW5jb2RlU2luZ2xlIiwibGFzdEluZGV4T2YiLCJ1bnNoaWZ0Iiwic2V0TGVuZ3RoUmlnaHQiLCJkZWNvZGVTaW5nbGUiLCJwYXJzZWRUeXBlIiwib2Zmc2V0IiwicGFyc2VUeXBlIiwicmF3VHlwZSIsImRlY29kZWQiLCJzdWJBcnJheSIsIm1lbW9yeVVzYWdlIiwiaXNEeW5hbWljIiwiZXZlbnRJRCIsImtlY2NhazI1NiIsIm1ldGhvZElEIiwicmF3RW5jb2RlIiwiaGVhZExlbmd0aCIsImN1ciIsInJhd0RlY29kZSIsInBhcnNlZCIsInNpbXBsZUVuY29kZSIsInNpbXBsZURlY29kZSIsIml0ZW0iLCJzb2xpZGl0eUhleFZhbHVlIiwiYml0c2l6ZSIsInN1YlR5cGUiLCJhcnJheVNpemUiLCJhcnJheVZhbHVlcyIsImJ5dGVzaXplIiwic2V0TGVuZ3RoTGVmdCIsInNvbGlkaXR5UGFjayIsInNvbGlkaXR5U0hBMjU2Iiwic2hhMjU2Iiwic29saWRpdHlSSVBFTUQxNjAiLCJyaXBlbWQxNjAiLCJmcm9tU2VycGVudCIsInRvU2VycGVudCIsImltcG9ydFB1YmxpYyIsInByaXZhdGVUb1B1YmxpYyIsInByaXZhdGVUb0FkZHJlc3MiLCJwdWJUb0FkZHJlc3MiLCJpc1ZhbGlkUHVibGljIiwiaXNWYWxpZFByaXZhdGUiLCJpc1ByZWNvbXBpbGVkIiwiZ2VuZXJhdGVBZGRyZXNzMiIsImdlbmVyYXRlQWRkcmVzcyIsImlzVmFsaWRDaGVja3N1bUFkZHJlc3MiLCJpc1plcm9BZGRyZXNzIiwiaXNWYWxpZEFkZHJlc3MiLCJ6ZXJvQWRkcmVzcyIsImV0aGpzVXRpbCIsInNlY3AyNTZrMSIsImJ5dGVzXzEiLCJoYXNoXzEiLCJhZGRyIiwiZWlwMTE5MUNoYWluSWQiLCJwcmVmaXgiLCJrZWNjYWsiLCJub25jZUJOIiwicmxwaGFzaCIsInNhbHQiLCJpbml0Q29kZSIsImZyb21CdWYiLCJzYWx0QnVmIiwiaW5pdENvZGVCdWYiLCJ1bnBhZCIsInByaXZhdGVLZXlWZXJpZnkiLCJzYW5pdGl6ZSIsInB1YmxpY0tleVZlcmlmeSIsInB1YktleSIsInB1YmxpY0tleUNvbnZlcnQiLCJwdWJsaWNLZXlDcmVhdGUiLCJiYVRvSlNPTiIsInN0cmlwWmVyb3MiLCJzZXRMZW5ndGgiLCJhbGxvY1Vuc2FmZSIsImZpcnN0IiwicGFkVG9FdmVuIiwiaW50VG9CdWZmZXIiLCJiYSIsIktFQ0NBSzI1Nl9STFAiLCJLRUNDQUsyNTZfUkxQX1MiLCJLRUNDQUsyNTZfUkxQX0FSUkFZIiwiS0VDQ0FLMjU2X1JMUF9BUlJBWV9TIiwiS0VDQ0FLMjU2X05VTEwiLCJLRUNDQUsyNTZfTlVMTF9TIiwiVFdPX1BPVzI1NiIsIk1BWF9JTlRFR0VSIiwia2VjY2FrMjI0Iiwia2VjY2FrMzg0Iiwia2VjY2FrNTEyIiwiY3JlYXRlSGFzaCIsInJscCIsInVwZGF0ZSIsImRpZ2VzdCIsInBhZGRlZCIsImVuY29kZSIsImRlZmluZVByb3BlcnRpZXMiLCJmaWVsZHMiLCJfZmllbGRzIiwibGFiZWwiLCJvYmpfMSIsImZpZWxkIiwic2VyaWFsaXplIiwiZ2V0dGVyIiwic2V0dGVyIiwiYWxsb3daZXJvIiwiYWxsb3dMZXNzIiwiYWxpYXMiLCJkZWNvZGUiLCJrZXlzXzEiLCJlY2RoVW5zYWZlIiwiZWNkaCIsInZlcmlmeSIsInNpZ25hdHVyZUltcG9ydExheCIsInNpZ25hdHVyZUltcG9ydCIsInNpZ25hdHVyZUV4cG9ydCIsInNpZ25hdHVyZU5vcm1hbGl6ZSIsInB1YmxpY0tleUNvbWJpbmUiLCJwdWJsaWNLZXlUd2Vha011bCIsInB1YmxpY0tleVR3ZWFrQWRkIiwicHJpdmF0ZUtleVR3ZWFrTXVsIiwicHJpdmF0ZUtleVR3ZWFrQWRkIiwicHJpdmF0ZUtleU1vZEludmVyc2UiLCJwcml2YXRlS2V5TmVnYXRlIiwicHJpdmF0ZUtleUltcG9ydCIsInByaXZhdGVLZXlFeHBvcnQiLCJzZWNwMjU2azF2MyIsImRlciIsImNvbXByZXNzZWQiLCJSYW5nZUVycm9yIiwidHdlYWsiLCJwdWJsaWNLZXlzIiwic2lnT2JqIiwiVHlwZUVycm9yIiwic2lnbk9wdGlvbnMiLCJub25jZWZuIiwiYWxnbyIsImF0dGVtcHQiLCJidWZmZXJBbGdvIiwiYnVmZmVyRGF0YSIsImVjZHNhU2lnbiIsInJlY292ZXJ5IiwicmVjaWQiLCJlY2RzYVZlcmlmeSIsImVjZHNhUmVjb3ZlciIsIkVDX1BSSVZLRVlfRVhQT1JUX0RFUl9DT01QUkVTU0VEIiwiRUNfUFJJVktFWV9FWFBPUlRfREVSX1VOQ09NUFJFU1NFRCIsImxlbmIiLCJhbGxvYyIsImxlbmJ5dGUiLCJyaW5kZXgiLCJzbGVuIiwic2luZGV4IiwicnZhbHVlIiwic3ZhbHVlIiwiZWMiLCJFQyIsImVjcGFyYW1zIiwiY3VydmUiLCJwb2ludCIsInRvUHVibGljS2V5IiwiZ2V0WCIsImdldFkiLCJibiIsImtleUZyb21QdWJsaWMiLCJzY2FsYXIiLCJzaGFyZWQiLCJwdWIiLCJpc1ZhbGlkU2lnbmF0dXJlIiwidG9ScGNTaWciLCJjYWxjdWxhdGVTaWdSZWNvdmVyeSIsImlzVmFsaWRTaWdSZWNvdmVyeSIsInNlbmRlclB1YktleSIsImhvbWVzdGVhZE9yTGF0ZXIiLCJTRUNQMjU2SzFfTl9ESVZfMiIsIlNFQ1AyNTZLMV9OIiwickJOIiwic0JOIiwiZmVlcyIsIk5fRElWXzIiLCJUcmFuc2FjdGlvbiIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJnZXRTZW5kZXJBZGRyZXNzIiwic2lnViIsIl9ob21lc3RlYWQiLCJ0b0NyZWF0aW9uQWRkcmVzcyIsImluY2x1ZGVTaWduYXR1cmUiLCJpdGVtcyIsImdldENoYWluSWQiLCJfZnJvbSIsInB1YmtleSIsImdldFNlbmRlclB1YmxpY0tleSIsIl9zZW5kZXJQdWJLZXkiLCJ2ZXJpZnlTaWduYXR1cmUiLCJnZXREYXRhRmVlIiwiY29zdCIsInR4RGF0YVplcm9HYXMiLCJ0eERhdGFOb25aZXJvR2FzIiwiZ2V0QmFzZUZlZSIsImZlZSIsInR4R2FzIiwidHhDcmVhdGlvbiIsImdldFVwZnJvbnRDb3N0IiwidmFsaWRhdGUiLCJzdHJpbmdFcnJvciIsImVycm9ycyIsIl90eXBlb2YiLCJvYmoiLCJfcmVxdWlyZSIsIlNIQTNfTlVMTF9TIiwiU0hBM19OVUxMIiwiU0hBM19STFBfQVJSQVlfUyIsIlNIQTNfUkxQX0FSUkFZIiwiU0hBM19STFBfUyIsIlNIQTNfUkxQIiwic2hhMyIsImhvbWVzdGVhZCIsIkV2ZW50RW1pdHRlciIsIkV0aEJsb2NrVHJhY2tlciIsImVhY2hTZXJpZXMiLCJTdG9wbGlnaHQiLCJjcmVhdGVQYXlsb2FkIiwibm9vcCIsIldlYjNQcm92aWRlckVuZ2luZSIsInNldE1heExpc3RlbmVycyIsImRpcmVjdFByb3ZpZGVyIiwiX2hhbmRsZUFzeW5jIiwiYmxvY2tUcmFja2VyUHJvdmlkZXIiLCJfYmxvY2tUcmFja2VyIiwiYmxvY2tUcmFja2VyIiwicHJvdmlkZXIiLCJzZXRTa2lwQ2FjaGVGbGFnIiwiX3JlYWR5IiwiY3VycmVudEJsb2NrIiwiX3Byb3ZpZGVycyIsImdvIiwiYmxvY2tOdW1iZXIiLCJfZ2V0QmxvY2tCeU51bWJlcldpdGhSZXRyeSIsImJsb2NrIiwiYnVmZmVyQmxvY2siLCJqc29uQmxvY2siLCJwYXJlbnRIYXNoIiwibWl4SGFzaCIsInNoYTNVbmNsZXMiLCJsb2dzQmxvb20iLCJ0cmFuc2FjdGlvbnNSb290Iiwic3RhdGVSb290IiwicmVjZWlwdHNSb290IiwicmVjZWlwdFJvb3QiLCJtaW5lciIsImRpZmZpY3VsdHkiLCJ0b3RhbERpZmZpY3VsdHkiLCJleHRyYURhdGEiLCJnYXNVc2VkIiwidGltZXN0YW1wIiwidHJhbnNhY3Rpb25zIiwiX3NldEN1cnJlbnRCbG9jayIsIl9ydW5uaW5nIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiaXNSdW5uaW5nIiwic291cmNlIiwicmVtb3ZlUHJvdmlkZXIiLCJhd2FpdCIsInJldHJpZXNSZW1haW5pbmciLCJhdHRlbXB0UmVxdWVzdCIsIl9nZXRCbG9ja0J5TnVtYmVyIiwiYWZ0ZXJSZXF1ZXN0IiwicmVxIiwic2tpcENhY2hlIiwiZmluaXNoZWQiLCJjdXJyZW50UHJvdmlkZXIiLCJzdGFjayIsIl9lcnJvciIsIl9yZXN1bHQiLCJmbiIsInJlc3VsdE9iaiIsImFmdGVyIiwiUHJvdmlkZXJTdWJwcm92aWRlciIsImNyZWF0ZUJsb2NrQ2FjaGVNaWRkbGV3YXJlIiwiY3JlYXRlRmlsdGVyTWlkZGxld2FyZSIsImVuZ2luZSIsIlN1YnByb3ZpZGVyIiwiRml4dHVyZVByb3ZpZGVyIiwic3RhdGljUmVzcG9uc2VzIiwic3RhdGljUmVzcG9uc2UiLCJ3YXRlcmZhbGwiLCJwYXJhbGxlbCIsInNpZ1V0aWwiLCJleHRlbmQiLCJTZW1hcGhvcmUiLCJlc3RpbWF0ZUdhcyIsImhleFJlZ2V4Iiwibm9uY2VMb2NrIiwiYXBwcm92ZVRyYW5zYWN0aW9uIiwiYXV0b0FwcHJvdmUiLCJhcHByb3ZlTWVzc2FnZSIsImFwcHJvdmVQZXJzb25hbE1lc3NhZ2UiLCJhcHByb3ZlRGVjcnlwdE1lc3NhZ2UiLCJhcHByb3ZlRW5jcnlwdGlvblB1YmxpY0tleSIsImFwcHJvdmVUeXBlZE1lc3NhZ2UiLCJtdXN0UHJvdmlkZUluQ29uc3RydWN0b3IiLCJkZWNyeXB0TWVzc2FnZSIsImVuY3J5cHRpb25QdWJsaWNLZXkiLCJzaWduVHlwZWRNZXNzYWdlIiwicHVibGlzaFRyYW5zYWN0aW9uIiwiZ2V0R2FzUHJpY2UiLCJyZXNlbWJsZXNBZGRyZXNzIiwiZml4ZWQiLCJyZXNlbWJsZXNEYXRhIiwiaXNWYWxpZEhleCIsIm1ldGhvZE5hbWUiLCJleHRyYVBhcmFtcyIsIl9wYXJpdHlSZXF1ZXN0cyIsIl9wYXJpdHlSZXF1ZXN0Q291bnQiLCJ2YWxpZGF0ZVRyYW5zYWN0aW9uIiwidmFsaWRhdGVNZXNzYWdlIiwid2FybmluZyIsIndhcm4iLCJ2YWxpZGF0ZVBlcnNvbmFsTWVzc2FnZSIsInZhbGlkYXRlRGVjcnlwdE1lc3NhZ2UiLCJwcm9jZXNzRGVjcnlwdE1lc3NhZ2UiLCJ2YWxpZGF0ZUVuY3J5cHRpb25QdWJsaWNLZXkiLCJwcm9jZXNzRW5jcnlwdGlvblB1YmxpY0tleSIsInNlY29uZCIsInZhbGlkYXRlVHlwZWRNZXNzYWdlIiwicGFyaXR5UG9zdFRyYW5zYWN0aW9uIiwicGFyaXR5UG9zdFNpZ24iLCJyZXF1ZXN0SWQiLCJwYXJpdHlDaGVja1JlcXVlc3QiLCJhY2NvdW50IiwiZGlkQXBwcm92ZSIsImNoZWNrQXBwcm92YWwiLCJmaW5hbGl6ZUFuZFN1Ym1pdFR4IiwiZmluYWxpemVUeCIsInJlcUlkIiwiZW1pdFBheWxvYWQiLCJ0eEhhc2giLCJzZW5kZXJIZXgiLCJ2YWxpZGF0ZVNlbmRlciIsInNlbmRlcklzVmFsaWQiLCJzZW5kZXJBZGRyZXNzIiwidGFrZSIsImZpbGxJblR4RXh0cmFzIiwibGVhdmUiLCJzaWduZWRUeCIsInJhd1R4IiwidGFza3MiLCJjbG9uZVR4UGFyYW1zIiwidGFza1Jlc3VsdHMiLCJjb25zdHJ1Y3RvckZuIiwiX2NvbnN0cnVjdG9yRm4iLCJtaWRkbGV3YXJlIiwicHJvdkVuZ05leHQiLCJwcm92RW5nRW5kIiwiaGFuZGxlciIsImJsb2NrVGFnRm9yUGF5bG9hZCIsIk5vbmNlVHJhY2tlclN1YnByb3ZpZGVyIiwibm9uY2VDYWNoZSIsImJsb2NrVGFnIiwiY2FjaGVkUmVzdWx0IiwiaGV4Tm9uY2UiLCJTdWJQcm92aWRlciIsImNyZWF0ZVN1YnNjcmlwdGlvbk1hbmFnZXIiLCJnZXRSYW5kb21JZCIsIk51bWJlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJjYW5DYWNoZSIsImNhY2hlVHlwZUZvclBheWxvYWQiLCJwYXJhbXNXaXRob3V0QmxvY2tUYWciLCJibG9ja1RhZ1BhcmFtSW5kZXgiLCJjYWNoZUlkZW50aWZpZXJGb3JQYXlsb2FkIiwiaW5jbHVkZUJsb2NrUmVmIiwiaXNMb2NrZWQiLCJvbmNlIiwid2luZG93X2dldHRlcnNfMSIsImxvYyIsImdldFdpbmRvd01ldGFkYXRhT2ZBbnkiLCJtZXRhVGFncyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwidGFnIiwiZ2V0QXR0cmlidXRlIiwiYXR0ciIsInRpdGxlIiwiZ2V0TmFtZSIsImRlc2NyaXB0aW9uIiwib3JpZ2luIiwiaWNvbnMiLCJhYnNvbHV0ZUhyZWYiLCJwYXRobmFtZSIsImFic29sdXRlVXJsIiwiZ2V0SWNvbnMiLCJkZXNlbGVjdEN1cnJlbnQiLCJjbGlwYm9hcmRUb0lFMTFGb3JtYXR0aW5nIiwiZGVidWciLCJyZXNlbGVjdFByZXZpb3VzIiwic2VsZWN0aW9uIiwibWFyayIsImNyZWF0ZVJhbmdlIiwiZ2V0U2VsZWN0aW9uIiwidGV4dENvbnRlbnQiLCJhbGwiLCJwb3NpdGlvbiIsInRvcCIsImNsaXAiLCJ3aGl0ZVNwYWNlIiwid2Via2l0VXNlclNlbGVjdCIsIk1velVzZXJTZWxlY3QiLCJtc1VzZXJTZWxlY3QiLCJ1c2VyU2VsZWN0IiwiZm9ybWF0IiwiY2xpcGJvYXJkRGF0YSIsImNsZWFyRGF0YSIsInNldERhdGEiLCJvbkNvcHkiLCJzZWxlY3ROb2RlQ29udGVudHMiLCJhZGRSYW5nZSIsImV4ZWNDb21tYW5kIiwiY29weUtleSIsInByb21wdCIsInJlbW92ZVJhbmdlIiwicmVtb3ZlQWxsUmFuZ2VzIiwic2luZ2xlTWF0Y2hlciIsIm11bHRpTWF0Y2hlciIsImRlY29kZUNvbXBvbmVudHMiLCJjb21wb25lbnRzIiwidG9rZW5zIiwiZW5jb2RlZFVSSSIsInJlcGxhY2VNYXAiLCJlbnRyaWVzIiwiY3VzdG9tRGVjb2RlVVJJQ29tcG9uZW50IiwiZGlqa3N0cmEiLCJzaW5nbGVfc291cmNlX3Nob3J0ZXN0X3BhdGhzIiwiZ3JhcGgiLCJwcmVkZWNlc3NvcnMiLCJjb3N0cyIsImNsb3Nlc3QiLCJjb3N0X29mX3NfdG9fdSIsImFkamFjZW50X25vZGVzIiwiY29zdF9vZl9zX3RvX3VfcGx1c19jb3N0X29mX2UiLCJjb3N0X29mX3NfdG9fdiIsIlByaW9yaXR5UXVldWUiLCJtYWtlIiwiZW1wdHkiLCJleHRyYWN0X3Nob3J0ZXN0X3BhdGhfZnJvbV9wcmVkZWNlc3Nvcl9saXN0Iiwibm9kZXMiLCJmaW5kX3BhdGgiLCJxdWV1ZSIsInNvcnRlciIsImRlZmF1bHRfc29ydGVyIiwiY2FjaGVVdGlscyIsImNyZWF0ZUFzeW5jTWlkZGxld2FyZSIsImVtcHR5VmFsdWVzIiwiYmxvY2tDYWNoZSIsIkJsb2NrQ2FjaGVTdHJhdGVneSIsInN0cmF0ZWdpZXMiLCJwZXJtYSIsImZvcmsiLCJzdHJhdGVneSIsImNhbkNhY2hlUmVxdWVzdCIsInJlcXVlc3RlZEJsb2NrTnVtYmVyIiwibGF0ZXN0QmxvY2tOdW1iZXIiLCJnZXRMYXRlc3RCbG9jayIsImNsZWFyQmVmb3JlIiwiY2FjaGVSZXN1bHQiLCJjYWNoZSIsImJsb2NrTnVtYmVySGV4IiwibmV3Q2FjaGUiLCJnZXRCbG9ja0NhY2hlRm9yUGF5bG9hZCIsImNhbkNhY2hlUmVzdWx0IiwiYmxvY2tIYXNoIiwib2xkQmxvY2tIZXgiLCJvbGRCbG9ja051bWJlciIsInNraXBCbG9ja1JlZiIsInNpbXBsZVBhcmFtcyIsImFzeW5jTWlkZGxld2FyZSIsInJlc29sdmVOZXh0UHJvbWlzZSIsIm5leHRQcm9taXNlIiwicmV0dXJuSGFuZGxlckNhbGxiYWNrIiwibmV4dFdhc0NhbGxlZCIsImlzU3RyaWN0VHlwZWRBcnJheSIsImxvb3NlIiwiaXNMb29zZVR5cGVkQXJyYXkiLCJuYW1lcyIsIkludDhBcnJheSIsIkludDE2QXJyYXkiLCJJbnQzMkFycmF5IiwiVWludDhDbGFtcGVkQXJyYXkiLCJVaW50MTZBcnJheSIsIlVpbnQzMkFycmF5IiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiY2FuUHJvbWlzZSIsIkNhbnZhc1JlbmRlcmVyIiwiU3ZnUmVuZGVyZXIiLCJyZW5kZXJDYW52YXMiLCJyZW5kZXJGdW5jIiwiY2FudmFzIiwiYXJnc051bSIsImlzTGFzdEFyZ0NiIiwiZ2V0Q29udGV4dCIsInRvQ2FudmFzIiwidG9EYXRhVVJMIiwicmVuZGVyVG9EYXRhVVJMIiwiZ2V0U3ltYm9sU2l6ZSIsImdldFJvd0NvbENvb3JkcyIsInBvc0NvdW50IiwiaW50ZXJ2YWxzIiwicG9zaXRpb25zIiwiZ2V0UG9zaXRpb25zIiwiY29vcmRzIiwicG9zIiwicG9zTGVuZ3RoIiwiTW9kZSIsIkFMUEhBX05VTV9DSEFSUyIsIkFscGhhbnVtZXJpY0RhdGEiLCJBTFBIQU5VTUVSSUMiLCJnZXRCaXRzTGVuZ3RoIiwiZ2V0TGVuZ3RoIiwid3JpdGUiLCJiaXRCdWZmZXIiLCJwdXQiLCJCaXRCdWZmZXIiLCJidWZJbmRleCIsInB1dEJpdCIsImdldExlbmd0aEluQml0cyIsIkJ1ZmZlclV0aWwiLCJCaXRNYXRyaXgiLCJyZXNlcnZlZEJpdCIsInJvdyIsImNvbCIsInJlc2VydmVkIiwiaXNSZXNlcnZlZCIsIkJ5dGVEYXRhIiwiQllURSIsIkVDTGV2ZWwiLCJFQ19CTE9DS1NfVEFCTEUiLCJFQ19DT0RFV09SRFNfVEFCTEUiLCJnZXRCbG9ja3NDb3VudCIsImVycm9yQ29ycmVjdGlvbkxldmVsIiwiZ2V0VG90YWxDb2Rld29yZHNDb3VudCIsImlzVmFsaWQiLCJsZXZlbCIsImZyb21TdHJpbmciLCJVdGlscyIsIkcxNV9CQ0giLCJnZXRCQ0hEaWdpdCIsImdldEVuY29kZWRCaXRzIiwiRVhQX1RBQkxFIiwiTE9HX1RBQkxFIiwiZXhwIiwiS2FuamlEYXRhIiwiS0FOSkkiLCJ0b1NKSVMiLCJQYXR0ZXJucyIsIlBBVFRFUk4wMDAiLCJQQVRURVJOMDAxIiwiUEFUVEVSTjAxMCIsIlBBVFRFUk4wMTEiLCJQQVRURVJOMTAwIiwiUEFUVEVSTjEwMSIsIlBBVFRFUk4xMTAiLCJQQVRURVJOMTExIiwiZ2V0TWFza0F0IiwibWFza1BhdHRlcm4iLCJpc05hTiIsImdldFBlbmFsdHlOMSIsInBvaW50cyIsInNhbWVDb3VudENvbCIsInNhbWVDb3VudFJvdyIsImxhc3RDb2wiLCJsYXN0Um93IiwiZ2V0UGVuYWx0eU4yIiwibGFzdCIsImdldFBlbmFsdHlOMyIsImJpdHNDb2wiLCJiaXRzUm93IiwiZ2V0UGVuYWx0eU40IiwiZGFya0NvdW50IiwibW9kdWxlc0NvdW50IiwiYXBwbHlNYXNrIiwicGF0dGVybiIsImdldEJlc3RNYXNrIiwic2V0dXBGb3JtYXRGdW5jIiwibnVtUGF0dGVybnMiLCJiZXN0UGF0dGVybiIsImxvd2VyUGVuYWx0eSIsIkluZmluaXR5IiwicGVuYWx0eSIsIlZlcnNpb25DaGVjayIsIlJlZ2V4IiwiTlVNRVJJQyIsImNjQml0cyIsIk1JWEVEIiwiZ2V0Q2hhckNvdW50SW5kaWNhdG9yIiwiZ2V0QmVzdE1vZGVGb3JEYXRhIiwiZGF0YVN0ciIsInRlc3ROdW1lcmljIiwidGVzdEFscGhhbnVtZXJpYyIsInRlc3RLYW5qaSIsIk51bWVyaWNEYXRhIiwiZ3JvdXAiLCJyZW1haW5pbmdOdW0iLCJHRiIsInAxIiwicDIiLCJjb2VmZiIsImRpdmlkZW50IiwiZGl2aXNvciIsImdlbmVyYXRlRUNQb2x5bm9taWFsIiwiZGVncmVlIiwicG9seSIsIkFsaWdubWVudFBhdHRlcm4iLCJGaW5kZXJQYXR0ZXJuIiwiTWFza1BhdHRlcm4iLCJFQ0NvZGUiLCJSZWVkU29sb21vbkVuY29kZXIiLCJWZXJzaW9uIiwiRm9ybWF0SW5mbyIsIlNlZ21lbnRzIiwic2V0dXBGb3JtYXRJbmZvIiwibWF0cml4IiwiY3JlYXRlU3ltYm9sIiwic2VnbWVudHMiLCJmcm9tQXJyYXkiLCJlc3RpbWF0ZWRWZXJzaW9uIiwicmF3U2VnbWVudHMiLCJyYXdTcGxpdCIsImdldEJlc3RWZXJzaW9uRm9yRGF0YSIsImJlc3RWZXJzaW9uIiwiZGF0YUJpdHMiLCJkYXRhVG90YWxDb2Rld29yZHNCaXRzIiwiZ2V0U3ltYm9sVG90YWxDb2Rld29yZHMiLCJyZW1haW5pbmdCeXRlIiwidG90YWxDb2Rld29yZHMiLCJkYXRhVG90YWxDb2Rld29yZHMiLCJlY1RvdGFsQmxvY2tzIiwiYmxvY2tzSW5Hcm91cDEiLCJ0b3RhbENvZGV3b3Jkc0luR3JvdXAxIiwiZGF0YUNvZGV3b3Jkc0luR3JvdXAxIiwiZGF0YUNvZGV3b3Jkc0luR3JvdXAyIiwiZWNDb3VudCIsInJzIiwiZGNEYXRhIiwiZWNEYXRhIiwibWF4RGF0YVNpemUiLCJkYXRhU2l6ZSIsImNyZWF0ZUNvZGV3b3JkcyIsImNyZWF0ZURhdGEiLCJtb2R1bGVDb3VudCIsIm1vZHVsZXMiLCJzZXR1cEZpbmRlclBhdHRlcm4iLCJzZXR1cFRpbWluZ1BhdHRlcm4iLCJzZXR1cEFsaWdubWVudFBhdHRlcm4iLCJzZXR1cFZlcnNpb25JbmZvIiwiaW5jIiwiYml0SW5kZXgiLCJieXRlSW5kZXgiLCJkYXJrIiwic2V0dXBEYXRhIiwidG9TSklTRnVuYyIsInNldFRvU0pJU0Z1bmN0aW9uIiwiUG9seW5vbWlhbCIsImdlblBvbHkiLCJwYWRkZWREYXRhIiwiYnVmZiIsImthbmppIiwiYnl0ZSIsIkJZVEVfS0FOSkkiLCJURVNUX0tBTkpJIiwiVEVTVF9OVU1FUklDIiwiVEVTVF9BTFBIQU5VTUVSSUMiLCJnZXRTdHJpbmdCeXRlTGVuZ3RoIiwidW5lc2NhcGUiLCJnZXRTZWdtZW50cyIsImdldFNlZ21lbnRzRnJvbVN0cmluZyIsImJ5dGVTZWdzIiwia2FuamlTZWdzIiwibnVtU2VncyIsImFscGhhTnVtU2VncyIsImlzS2FuamlNb2RlRW5hYmxlZCIsInMxIiwiczIiLCJnZXRTZWdtZW50Qml0c0xlbmd0aCIsImJ1aWxkU2luZ2xlU2VnbWVudCIsIm1vZGVzSGludCIsImJlc3RNb2RlIiwic2VnIiwidGFibGUiLCJwcmV2Tm9kZUlkcyIsIm5vZGVHcm91cCIsImN1cnJlbnROb2RlSWRzIiwibGFzdENvdW50IiwicHJldk5vZGVJZCIsImJ1aWxkR3JhcGgiLCJzZWdzIiwiYnVpbGROb2RlcyIsIm9wdGltaXplZFNlZ3MiLCJjdXJyIiwicHJldlNlZyIsInRvU0pJU0Z1bmN0aW9uIiwiQ09ERVdPUkRTX0NPVU5UIiwiZGlnaXQiLCJHMThfQkNIIiwiZ2V0UmVzZXJ2ZWRCaXRzQ291bnQiLCJnZXRUb3RhbEJpdHNGcm9tRGF0YUFycmF5IiwidG90YWxCaXRzIiwicmVzZXJ2ZWRCaXRzIiwiZ2V0Q2FwYWNpdHkiLCJ1c2FibGVCaXRzIiwiZWNsIiwiY3VycmVudFZlcnNpb24iLCJnZXRCZXN0VmVyc2lvbkZvck1peGVkRGF0YSIsImdldEJlc3RWZXJzaW9uRm9yRGF0YUxlbmd0aCIsInFyRGF0YSIsImNhbnZhc0VsIiwiZ2V0Q2FudmFzRWxlbWVudCIsImdldE9wdGlvbnMiLCJnZXRJbWFnZVdpZHRoIiwiaW1hZ2UiLCJjcmVhdGVJbWFnZURhdGEiLCJxclRvSW1hZ2VEYXRhIiwiY2xlYXJSZWN0IiwiaGVpZ2h0IiwiY2xlYXJDYW52YXMiLCJwdXRJbWFnZURhdGEiLCJyZW5kZXJlck9wdHMiLCJxdWFsaXR5IiwiZ2V0Q29sb3JBdHRyaWIiLCJhdHRyaWIiLCJhbHBoYSIsInRvRml4ZWQiLCJzdmdDbWQiLCJjbWQiLCJxcmNvZGVzaXplIiwiYmciLCJsaWdodCIsIm1vdmVCeSIsIm5ld1JvdyIsImxpbmVMZW5ndGgiLCJxclRvUGF0aCIsInZpZXdCb3giLCJzdmdUYWciLCJoZXgycmdiYSIsImhleENvZGUiLCJhcHBseSIsImhleFZhbHVlIiwic2NhbGUiLCJnZXRTY2FsZSIsInFyU2l6ZSIsImltZ0RhdGEiLCJxciIsInN5bWJvbFNpemUiLCJzY2FsZWRNYXJnaW4iLCJwYWxldHRlIiwicG9zRHN0IiwicHhDb2xvciIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJmb28iLCJ0eXBlZEFycmF5U3VwcG9ydCIsIktfTUFYX0xFTkdUSCIsInRoYXQiLCJBcnJheUJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwiY3JlYXRlQnVmZmVyIiwiYWN0dWFsIiwiZnJvbU9iamVjdCIsInV0ZjhUb0J5dGVzIiwidW5pdHMiLCJjb2RlUG9pbnQiLCJsZWFkU3Vycm9nYXRlIiwiaXNWaWV3Iiwic3BlY2llcyIsIndyaXRhYmxlIiwiaXNGaW5pdGUiLCJyZW1haW5pbmciLCJkc3QiLCJibGl0QnVmZmVyIiwidXRmOFdyaXRlIiwibmV3QnVmIiwic3ViYXJyYXkiLCJzbGljZUxlbiIsInRhcmdldFN0YXJ0IiwibGlzdCIsIl9pc0J1ZmZlciIsImJhc2U2NCIsImllZWU3NTQiLCJjdXN0b21JbnNwZWN0U3ltYm9sIiwic2V0UHJvdG90eXBlT2YiLCJlbmNvZGluZ09yT2Zmc2V0IiwiZW5jb2RpbmciLCJpc0VuY29kaW5nIiwiYXJyYXlWaWV3IiwiaXNJbnN0YW5jZSIsImZyb21BcnJheVZpZXciLCJTaGFyZWRBcnJheUJ1ZmZlciIsInZhbHVlT2YiLCJudW1iZXJJc05hTiIsInRvUHJpbWl0aXZlIiwiYXNzZXJ0U2l6ZSIsIm11c3RNYXRjaCIsImxvd2VyZWRDYXNlIiwiYmFzZTY0VG9CeXRlcyIsInNsb3dUb1N0cmluZyIsImhleFNsaWNlIiwidXRmOFNsaWNlIiwiYXNjaWlTbGljZSIsImxhdGluMVNsaWNlIiwiYmFzZTY0U2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJzd2FwIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJkaXIiLCJhcnJheUluZGV4T2YiLCJpbmRleFNpemUiLCJhcnJMZW5ndGgiLCJ2YWxMZW5ndGgiLCJTdHJpbmciLCJyZWFkIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaGV4V3JpdGUiLCJzdHJMZW4iLCJhc2NpaVdyaXRlIiwiYnl0ZUFycmF5IiwiYXNjaWlUb0J5dGVzIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1dGYxNmxlVG9CeXRlcyIsImZyb21CeXRlQXJyYXkiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJmaXJzdEJ5dGUiLCJieXRlc1BlclNlcXVlbmNlIiwiY29kZVBvaW50cyIsIk1BWF9BUkdVTUVOVFNfTEVOR1RIIiwiZnJvbUNoYXJDb2RlIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwicHJvdG8iLCJwb29sU2l6ZSIsImFsbG9jVW5zYWZlU2xvdyIsImNvbXBhcmUiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJ0b0xvY2FsZVN0cmluZyIsImVxdWFscyIsInRoaXNTdGFydCIsInRoaXNFbmQiLCJ0aGlzQ29weSIsInRhcmdldENvcHkiLCJfYXJyIiwiaGV4U2xpY2VMb29rdXBUYWJsZSIsImNoZWNrT2Zmc2V0IiwiZXh0IiwiY2hlY2tJbnQiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0Iiwibm9Bc3NlcnQiLCJ3cml0ZURvdWJsZSIsInJlYWRVaW50TEUiLCJyZWFkVUludExFIiwicmVhZFVpbnRCRSIsInJlYWRVaW50OCIsInJlYWRVSW50OCIsInJlYWRVaW50MTZMRSIsInJlYWRVSW50MTZMRSIsInJlYWRVaW50MTZCRSIsInJlYWRVaW50MzJMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVaW50MzJCRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnRMRSIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVaW50TEUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVWludEJFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVpbnQ4Iiwid3JpdGVVSW50OCIsIndyaXRlVWludDE2TEUiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVaW50MTZCRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVpbnQzMkxFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVWludDMyQkUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVJbnRMRSIsImxpbWl0Iiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwiY29weVdpdGhpbiIsIklOVkFMSURfQkFTRTY0X1JFIiwidG9CeXRlQXJyYXkiLCJiYXNlNjRjbGVhbiIsImFscGhhYmV0IiwiaTE2Iiwic3RyaWN0VXJpRW5jb2RlIiwiZGVjb2RlQ29tcG9uZW50Iiwic3BsaXRPbkZpcnN0IiwidmFsaWRhdGVBcnJheUZvcm1hdFNlcGFyYXRvciIsImtleXNTb3J0ZXIiLCJyZW1vdmVIYXNoIiwiaGFzaFN0YXJ0IiwiZXh0cmFjdCIsInF1ZXJ5U3RhcnQiLCJwYXJzZVZhbHVlIiwicGFyc2VOdW1iZXJzIiwicGFyc2VCb29sZWFucyIsImFycmF5Rm9ybWF0IiwiYXJyYXlGb3JtYXRTZXBhcmF0b3IiLCJmb3JtYXR0ZXIiLCJhY2N1bXVsYXRvciIsIm5ld1ZhbHVlIiwicGFyc2VyRm9yQXJyYXlGb3JtYXQiLCJwYXJhbSIsInNob3VsZEZpbHRlciIsInNraXBOdWxsIiwic2tpcEVtcHR5U3RyaW5nIiwiZW5jb2RlckZvckFycmF5Rm9ybWF0Iiwib2JqZWN0Q29weSIsInBhcnNlVXJsIiwicXVlcnkiLCJwYXJzZUZyYWdtZW50SWRlbnRpZmllciIsImZyYWdtZW50SWRlbnRpZmllciIsInN0cmluZ2lmeVVybCIsInF1ZXJ5RnJvbVVybCIsInBhcnNlZFF1ZXJ5RnJvbVVybCIsImdldEhhc2giLCJzZXBhcmF0b3IiLCJzZXBhcmF0b3JJbmRleCIsInJhbmdlQ291bnQiLCJhY3RpdmUiLCJhY3RpdmVFbGVtZW50IiwicmFuZ2VzIiwiZ2V0UmFuZ2VBdCIsInRhZ05hbWUiLCJibHVyIiwiZm9jdXMiXSwibWFwcGluZ3MiOiI7cTNCQU9JQSxFQUNBLFNBQXFCQyxFQUFNQyxFQUFTQyxHQUNoQ0MsS0FBS0gsS0FBT0EsRUFDWkcsS0FBS0YsUUFBVUEsRUFDZkUsS0FBS0QsR0FBS0EsRUFDVkMsS0FBS0MsS0FBTyxXQUtoQkMsRUFDQSxTQUFrQkosR0FDZEUsS0FBS0YsUUFBVUEsRUFDZkUsS0FBS0MsS0FBTyxPQUNaRCxLQUFLSCxLQUFPLE9BQ1pHLEtBQUtELEdBQUtJLFFBQVFDLFVBS3RCQyxFQUNBLFNBQTZCUixFQUFNQyxFQUFTQyxFQUFJTyxHQUM1Q04sS0FBS0gsS0FBT0EsRUFDWkcsS0FBS0YsUUFBVUEsRUFDZkUsS0FBS0QsR0FBS0EsRUFDVkMsS0FBS00sSUFBTUEsRUFDWE4sS0FBS0MsS0FBTyxjQUtoQk0sRUFDQSxXQUNJUCxLQUFLQyxLQUFPLE1BQ1pELEtBQUtNLEtBQU0sRUFDWE4sS0FBS0gsS0FBTyxNQUNaRyxLQUFLRixRQUFVLEtBQ2ZFLEtBQUtELEdBQUssTUFLZFMsRUFDQSxXQUNJUixLQUFLQyxLQUFPLGVBQ1pELEtBQUtILEtBQU8sZUFDWkcsS0FBS0YsUUFBVSxLQUNmRSxLQUFLRCxHQUFLLE1BT2RVLEVBQXFCLGdGQUVyQkMsRUFB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QUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0EsRUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsR0FDQSxJQUNBLEdBQ0EsSUFDQSxJQUNBLElBQ0EsR0FDQSxFQUNBLEVBQ0EsSUFDQSxJQUNBLElBQ0EsR0FDQSxJQUNBLEdBQ0EsSUFDQSxHQUNBLElBQ0EsSUFDQSxHQUNBLEdBQ0EsSUFDQSxHQUNBLElBQ0EsRUFDQSxHQUNBLEVBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsR0FDQSxJQUNBLEdBQ0EsSUFDQSxJQUNBLEdBQ0EsSUFDQSxJQUNBLEdBQ0EsR0FDQSxHQUNBLEVBQ0EsRUFDQSxFQUNBLElBQ0EsR0FDQSxFQUNBLEdBQ0EsRUFFQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsSUFFQXV3QyxFQUFxQ3R3QyxPQUFPRCxLQUFLLENBRWpELEdBQ0EsSUFDQSxFQUNBLEdBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUVBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFFQSxJQUNBLElBQ0EsSUFDQSxHQUNBLElBQ0EsSUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNBLEdBQ0EsRUFDQSxFQUNBLEdBQ0EsSUFDQSxHQUNBLElBQ0EsR0FDQSxFQUNBLEVBQ0EsRUFDQSxHQUNBLEVBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxHQUNBLEdBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0EsRUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsR0FDQSxJQUNBLEdBQ0EsSUFDQSxJQUNBLElBQ0EsR0FDQSxFQUNBLEVBQ0EsSUFDQSxJQUNBLElBQ0EsR0FDQSxJQUNBLEdBQ0EsSUFDQSxHQUNBLElBQ0EsSUFDQSxHQUNBLEdBQ0EsSUFDQSxHQUNBLElBQ0EsR0FDQSxHQUNBLElBQ0EsSUFDQSxHQUNBLElBQ0EsSUFDQSxJQUNBLEdBQ0EsSUFDQSxJQUNBLElBQ0EsR0FDQSxHQUNBLEVBQ0EsSUFDQSxJQUNBLEdBQ0EsSUFDQSxHQUNBLElBQ0EsSUFDQSxHQUNBLEdBQ0EsSUFDQSxHQUNBLElBQ0EsSUFDQSxJQUNBLEdBQ0EsSUFDQSxJQUNBLEVBQ0EsR0FDQSxFQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLEdBQ0EsSUFDQSxHQUNBLElBQ0EsSUFDQSxHQUNBLElBQ0EsSUFDQSxHQUNBLEdBQ0EsR0FDQSxFQUNBLEVBQ0EsRUFDQSxJQUNBLEdBQ0EsRUFDQSxHQUNBLEVBRUEsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVB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TSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUUxTCxJQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sSUFBTSxFQUFNLEVBQU0sRUFBTSxHQUFNLEdBQU0sRUFBTSxFQUFNLEdBQU0sSUFBTSxHQUFNLElBQU0sR0FBTSxFQUFNLEVBQU0sRUFBTSxHQUFNLEVBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEdBQU0sRUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxFQUFNLEVBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxJQUFNLEdBQU0sSUFBTSxHQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sSUFBTSxHQUFNLElBQU0sRUFBTSxHQUFNLEVBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLEdBQU0sR0FBTSxHQUFNLEVBQU0sRUFBTSxFQUFNLElBQU0sR0FBTSxFQUFNLEdBQU0sRUFFeDBCLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxJQUU1THV3QyxFQUFxQ3R3QyxPQUFPRCxLQUFLLENBRXJELEdBQU0sSUFBTSxFQUFNLEdBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxHQUVoRCxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBRTFMLElBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLEVBQU0sRUFBTSxFQUFNLEdBQU0sR0FBTSxFQUFNLEVBQU0sR0FBTSxJQUFNLEdBQU0sSUFBTSxHQUFNLEVBQU0sRUFBTSxFQUFNLEdBQU0sRUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLEdBQU0sR0FBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sR0FBTSxFQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxHQUFNLEVBQU0sRUFBTSxJQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sR0FBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLEdBQU0sR0FBTSxJQUFNLEdBQU0sSUFBTSxHQUFNLEdBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sRUFBTSxJQUFNLElBQU0sR0FBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLEdBQU0sR0FB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RyxFQUFHLEVBQUcsRUFDVCxFQUFHLEVBQUcsRUFBRyxFQUNULEVBQUcsRUFBRyxFQUFHLEVBQ1QsRUFBRyxFQUFHLEVBQUcsR0FDVCxFQUFHLEVBQUcsR0FBSSxHQUNWLEVBQUcsRUFBRyxHQUFJLEdBQ1YsRUFBRyxFQUFHLEdBQUksR0FDVixFQUFHLEdBQUksR0FBSSxHQUNYLEVBQUcsR0FBSSxHQUFJLEdBQ1gsRUFBRyxHQUFJLEdBQUksR0FDWCxFQUFHLEdBQUksR0FBSSxHQUNYLEVBQUcsR0FBSSxHQUFJLEdBQ1gsRUFBRyxHQUFJLEdBQUksR0FDWCxFQUFHLEdBQUksR0FBSSxHQUNYLEVBQUcsR0FBSSxHQUFJLEdBQ1gsRUFBRyxHQUFJLEdBQUksR0FDWCxHQUFJLEdBQUksR0FBSSxHQUNaLEdBQUksR0FBSSxHQUFJLEdBQ1osR0FBSSxHQUFJLEdBQUksR0FDWixHQUFJLEdBQUksR0FBSSxHQUNaLEdBQUksR0FBSSxHQUFJLEdBQ1osR0FBSSxHQUFJLEdBQUksR0FDWixHQUFJLEdBQUksR0FBSSxHQUNaLEdBQUksR0FBSSxHQUFJLEdBQ1osR0FBSSxHQUFJLEdBQUksR0FDWixHQUFJLEdBQUksR0FBSSxHQUNaLEdBQUksR0FBSSxHQUFJLEdBQ1osR0FBSSxHQUFJLEdBQUksR0FDWixHQUFJLEdBQUksR0FBSSxHQUNaLEdBQUksR0FBSSxHQUFJLEdBQ1osR0FBSSxHQUFJLEdBQUksR0FDWixHQUFJLEdBQUksR0FBSSxHQUNaLEdBQUksR0FBSSxHQUFJLElBR1ZDLEVBQXFCLENBRXZCLEVBQUcsR0FBSSxHQUFJLEdBQ1gsR0FBSSxHQUFJLEdBQUksR0FDWixHQUFJLEdBQUksR0FBSSxHQUNaLEdBQUksR0FBSSxHQUFJLEdBQ1osR0FBSSxHQUFJLEdBQUksR0FDWixHQUFJLEdBQUksR0FBSSxJQUNaLEdBQUksR0FBSSxJQUFLLElBQ2IsR0FBSSxHQUFJLElBQUssSUFDYixHQUFJLElBQUssSUFBSyxJQUNkLEdBQUksSUFBSyxJQUFLLElBQ2QsR0FBSSxJQUFLLElBQUssSUFDZCxHQUFJLElBQUssSUFBSyxJQUNkLElBQUssSUFBSyxJQUFLLElBQ2YsSUFBSyxJQUFLLElBQUssSUFDZixJQUFLLElBQUssSUFBSyxJQUNmLElBQUssSUFBSyxJQUFLLElBQ2YsSUFBSyxJQUFLLElBQUssSUFDZixJQUFLLElBQUssSUFBSyxJQUNmLElBQUssSUFBSyxJQUFLLElBQ2YsSUFBSyxJQUFLLElBQUssSUFDZixJQUFLLElBQUssSUFBSyxJQUNmLElBQUssSUFBSyxJQUFLLElBQ2YsSUFBSyxJQUFLLElBQUssSUFDZixJQUFLLElBQUssSUFBSyxJQUNmLElBQUssSUFBSyxJQUFLLEtBQ2YsSUFBSyxJQUFLLElBQUssS0FDZixJQUFLLElBQUssS0FBTSxLQUNoQixJQUFLLElBQUssS0FBTSxLQUNoQixJQUFLLElBQUssS0FBTSxLQUNoQixJQUFLLElBQUssS0FBTSxLQUNoQixJQUFLLElBQUssS0FBTSxLQUNoQixJQUFLLElBQUssS0FBTSxLQUNoQixJQUFLLElBQUssS0FBTSxLQUNoQixJQUFLLEtBQU0sS0FBTSxLQUNqQixJQUFLLEtBQU0sS0FBTSxLQUNqQixJQUFLLEtBQU0sS0FBTSxLQUNqQixJQUFLLEtBQU0sS0FBTSxLQUNqQixJQUFLLEtBQU0sS0FBTSxLQUNqQixJQUFLLEtBQU0sS0FBTSxLQUNqQixJQUFLLEtBQU0sS0FBTSxNQVduQmh0RCxFQUFRaXRELGVBQWlCLFNBQXlCeDFELEVBQVN5MUQsR0FDekQsT0FBUUEsR0FDTixLQUFLSixFQUFRcDFDLEVBQ1gsT0FBT3ExQyxFQUFnQyxHQUFmdDFELEVBQVUsR0FBUyxHQUM3QyxLQUFLcTFELEVBQVFuMUMsRUFDWCxPQUFPbzFDLEVBQWdDLEdBQWZ0MUQsRUFBVSxHQUFTLEdBQzdDLEtBQUtxMUQsRUFBUXh4QyxFQUNYLE9BQU95eEMsRUFBZ0MsR0FBZnQxRCxFQUFVLEdBQVMsR0FDN0MsS0FBS3ExRCxFQUFRdDFDLEVBQ1gsT0FBT3UxQyxFQUFnQyxHQUFmdDFELEVBQVUsR0FBUyxHQUM3QyxRQUNFLFNBWU51SSxFQUFRbXRELHVCQUF5QixTQUFpQzExRCxFQUFTeTFELEdBQ3pFLE9BQVFBLEdBQ04sS0FBS0osRUFBUXAxQyxFQUNYLE9BQU9zMUMsRUFBbUMsR0FBZnYxRCxFQUFVLEdBQVMsR0FDaEQsS0FBS3ExRCxFQUFRbjFDLEVBQ1gsT0FBT3ExQyxFQUFtQyxHQUFmdjFELEVBQVUsR0FBUyxHQUNoRCxLQUFLcTFELEVBQVF4eEMsRUFDWCxPQUFPMHhDLEVBQW1DLEdBQWZ2MUQsRUFBVSxHQUFTLEdBQ2hELEtBQUtxMUQsRUFBUXQxQyxFQUNYLE9BQU93MUMsRUFBbUMsR0FBZnYxRCxFQUFVLEdBQVMsR0FDaEQsUUFDRSxVLGNDcElOdUksRUFBUTBYLEVBQUksQ0FBRThMLElBQUssR0FDbkJ4akIsRUFBUTJYLEVBQUksQ0FBRTZMLElBQUssR0FDbkJ4akIsRUFBUXNiLEVBQUksQ0FBRWtJLElBQUssR0FDbkJ4akIsRUFBUXdYLEVBQUksQ0FBRWdNLElBQUssR0ErQm5CeGpCLEVBQVFvdEQsUUFBVSxTQUFrQkMsR0FDbEMsT0FBT0EsUUFBOEIsSUFBZEEsRUFBTTdwQyxLQUMzQjZwQyxFQUFNN3BDLEtBQU8sR0FBSzZwQyxFQUFNN3BDLElBQU0sR0FHbEN4akIsRUFBUWlFLEtBQU8sU0FBZTFILEVBQU9vZSxHQUNuQyxHQUFJM2EsRUFBUW90RCxRQUFRN3dELEdBQ2xCLE9BQU9BLEVBR1QsSUFDRSxPQXhDSixTQUFxQnVyQyxHQUNuQixHQUFzQixpQkFBWEEsRUFDVCxNQUFNLElBQUl0ckMsTUFBTSx5QkFLbEIsT0FGWXNyQyxFQUFPM3NDLGVBR2pCLElBQUssSUFDTCxJQUFLLE1BQ0gsT0FBTzZFLEVBQVEwWCxFQUVqQixJQUFLLElBQ0wsSUFBSyxTQUNILE9BQU8xWCxFQUFRMlgsRUFFakIsSUFBSyxJQUNMLElBQUssV0FDSCxPQUFPM1gsRUFBUXNiLEVBRWpCLElBQUssSUFDTCxJQUFLLE9BQ0gsT0FBT3RiLEVBQVF3WCxFQUVqQixRQUNFLE1BQU0sSUFBSWhiLE1BQU0scUJBQXVCc3JDLElBZWxDd2xCLENBQVcvd0QsR0FDbEIsTUFBT2lQLEdBQ1AsT0FBT21QLEssZ0JDL0NYLElBQUlvd0MsRUFBZ0IsdUJBVXBCL3FELEVBQVFvckQsYUFBZSxTQUF1QjN6RCxHQUM1QyxJQUFJZ2lCLEVBQU9zeEMsRUFBY3R6RCxHQUV6QixNQUFPLENBRUwsQ0FBQyxFQUFHLEdBRUosQ0FBQ2dpQixFQWhCcUIsRUFnQk8sR0FFN0IsQ0FBQyxFQUFHQSxFQWxCa0IsTSxnQkNEMUIsSUFBSTh6QyxFQUFRLEVBQVEsT0FJaEJDLEVBQVVELEVBQU1FLFlBRlYsTUFjVnp0RCxFQUFRMHRELGVBQWlCLFNBQXlCUixFQUFzQjVnQyxHQUl0RSxJQUhBLElBQUl4dkIsRUFBU293RCxFQUFxQjFwQyxLQUFPLEVBQUs4SSxFQUMxQzVZLEVBQUk1VyxHQUFRLEdBRVR5d0QsRUFBTUUsWUFBWS81QyxHQUFLODVDLEdBQVcsR0FDdkM5NUMsR0FuQk0sTUFtQlE2NUMsRUFBTUUsWUFBWS81QyxHQUFLODVDLEVBTXZDLE9BeEJhLE9Bd0JKMXdELEdBQVEsR0FBTTRXLEssZ0JDM0J6QixJQUFJMjRDLEVBQWEsRUFBUSxPQUVyQnNCLEVBQVl0QixFQUFXM1gsTUFBTSxLQUM3QmtaLEVBQVl2QixFQUFXM1gsTUFBTSxNQVMvQixXQUVBLElBREEsSUFBSXB3QyxFQUFJLEVBQ0M5SyxFQUFJLEVBQUdBLEVBQUksSUFBS0EsSUFDdkJtMEQsRUFBVW4wRCxHQUFLOEssRUFDZnNwRCxFQUFVdHBELEdBQUs5SyxFQU1QLEtBSlI4SyxJQUFNLEtBS0pBLEdBQUssS0FRVCxJQUFLOUssRUFBSSxJQUFLQSxFQUFJLElBQUtBLElBQ3JCbTBELEVBQVVuMEQsR0FBS20wRCxFQUFVbjBELEVBQUksS0FwQmhDLEdBOEJEd0csRUFBUXVSLElBQU0sU0FBY2MsR0FDMUIsR0FBSUEsRUFBSSxFQUFHLE1BQU0sSUFBSTdWLE1BQU0sT0FBUzZWLEVBQUksS0FDeEMsT0FBT3U3QyxFQUFVdjdDLElBU25CclMsRUFBUTZ0RCxJQUFNLFNBQWN4N0MsR0FDMUIsT0FBT3M3QyxFQUFVdDdDLElBVW5CclMsRUFBUXVlLElBQU0sU0FBY2phLEVBQUdtUCxHQUM3QixPQUFVLElBQU5uUCxHQUFpQixJQUFObVAsRUFBZ0IsRUFJeEJrNkMsRUFBVUMsRUFBVXRwRCxHQUFLc3BELEVBQVVuNkMsTSxnQkNyRTVDLElBQUkrM0MsRUFBTyxFQUFRLE9BQ2YrQixFQUFRLEVBQVEsT0FFcEIsU0FBU08sRUFBV2h4RCxHQUNsQm5GLEtBQUsyMUIsS0FBT2srQixFQUFLdUMsTUFDakJwMkQsS0FBS21GLEtBQU9BLEVBR2RneEQsRUFBVWxDLGNBQWdCLFNBQXdCdHlELEdBQ2hELE9BQWdCLEdBQVRBLEdBR1R3MEQsRUFBVXI0QyxVQUFVbzJDLFVBQVksV0FDOUIsT0FBT2wwRCxLQUFLbUYsS0FBS3hELFFBR25CdzBELEVBQVVyNEMsVUFBVW0yQyxjQUFnQixXQUNsQyxPQUFPa0MsRUFBVWxDLGNBQWNqMEQsS0FBS21GLEtBQUt4RCxTQUczQ3cwRCxFQUFVcjRDLFVBQVVxMkMsTUFBUSxTQUFVQyxHQUNwQyxJQUFJdnlELEVBS0osSUFBS0EsRUFBSSxFQUFHQSxFQUFJN0IsS0FBS21GLEtBQUt4RCxPQUFRRSxJQUFLLENBQ3JDLElBQUkrQyxFQUFRZ3hELEVBQU1TLE9BQU9yMkQsS0FBS21GLEtBQUt0RCxJQUduQyxHQUFJK0MsR0FBUyxPQUFVQSxHQUFTLE1BRTlCQSxHQUFTLFVBR0osTUFBSUEsR0FBUyxPQUFVQSxHQUFTLE9BSXJDLE1BQU0sSUFBSUMsTUFDUiwyQkFBNkI3RSxLQUFLbUYsS0FBS3RELEdBQXZDLHFDQUhGK0MsR0FBUyxNQVNYQSxFQUFrQyxLQUF2QkEsSUFBVSxFQUFLLE1BQXlCLElBQVJBLEdBRzNDd3ZELEVBQVVDLElBQUl6dkQsRUFBTyxNQUl6QjZWLEVBQU9wUyxRQUFVOHRELEcsY0NqRGpCOXRELEVBQVFpdUQsU0FBVyxDQUNqQkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxXQUFZLEdBNkpkLFNBQVNDLEVBQVdDLEVBQWFuMUQsRUFBR08sR0FDbEMsT0FBUTQwRCxHQUNOLEtBQUszdUQsRUFBUWl1RCxTQUFTQyxXQUFZLE9BQVExMEQsRUFBSU8sR0FBSyxHQUFNLEVBQ3pELEtBQUtpRyxFQUFRaXVELFNBQVNFLFdBQVksT0FBTzMwRCxFQUFJLEdBQU0sRUFDbkQsS0FBS3dHLEVBQVFpdUQsU0FBU0csV0FBWSxPQUFPcjBELEVBQUksR0FBTSxFQUNuRCxLQUFLaUcsRUFBUWl1RCxTQUFTSSxXQUFZLE9BQVE3MEQsRUFBSU8sR0FBSyxHQUFNLEVBQ3pELEtBQUtpRyxFQUFRaXVELFNBQVNLLFdBQVksT0FBUTNqRCxLQUFLd3BCLE1BQU0zNkIsRUFBSSxHQUFLbVIsS0FBS3dwQixNQUFNcDZCLEVBQUksSUFBTSxHQUFNLEVBQ3pGLEtBQUtpRyxFQUFRaXVELFNBQVNNLFdBQVksT0FBUS8wRCxFQUFJTyxFQUFLLEVBQUtQLEVBQUlPLEVBQUssR0FBTSxFQUN2RSxLQUFLaUcsRUFBUWl1RCxTQUFTTyxXQUFZLE9BQVNoMUQsRUFBSU8sRUFBSyxFQUFLUCxFQUFJTyxFQUFLLEdBQUssR0FBTSxFQUM3RSxLQUFLaUcsRUFBUWl1RCxTQUFTUSxXQUFZLE9BQVNqMUQsRUFBSU8sRUFBSyxHQUFLUCxFQUFJTyxHQUFLLEdBQUssR0FBTSxFQUU3RSxRQUFTLE1BQU0sSUFBSXlDLE1BQU0sbUJBQXFCbXlELElBcEpsRDN1RCxFQUFRb3RELFFBQVUsU0FBa0I5Z0MsR0FDbEMsT0FBZSxNQUFSQSxHQUF5QixLQUFUQSxJQUFnQnNpQyxNQUFNdGlDLElBQVNBLEdBQVEsR0FBS0EsR0FBUSxHQVU3RXRzQixFQUFRaUUsS0FBTyxTQUFlMUgsR0FDNUIsT0FBT3lELEVBQVFvdEQsUUFBUTd3RCxHQUFTZ0ksU0FBU2hJLEVBQU8sU0FBTXRCLEdBVXhEK0UsRUFBUTZ1RCxhQUFlLFNBQXVCL3hELEdBUTVDLElBUEEsSUFBSTJjLEVBQU8zYyxFQUFLMmMsS0FDWnExQyxFQUFTLEVBQ1RDLEVBQWUsRUFDZkMsRUFBZSxFQUNmQyxFQUFVLEtBQ1ZDLEVBQVUsS0FFTDFDLEVBQU0sRUFBR0EsRUFBTS95QyxFQUFNK3lDLElBQU8sQ0FDbkN1QyxFQUFlQyxFQUFlLEVBQzlCQyxFQUFVQyxFQUFVLEtBRXBCLElBQUssSUFBSXpDLEVBQU0sRUFBR0EsRUFBTWh6QyxFQUFNZ3pDLElBQU8sQ0FDbkMsSUFBSXI2QyxFQUFTdFYsRUFBSzBLLElBQUlnbEQsRUFBS0MsR0FDdkJyNkMsSUFBVzY4QyxFQUNiRixLQUVJQSxHQUFnQixJQUFHRCxHQUE4QkMsRUFBZSxFQW5EdEUsR0FvREVFLEVBQVU3OEMsRUFDVjI4QyxFQUFlLElBR2pCMzhDLEVBQVN0VixFQUFLMEssSUFBSWlsRCxFQUFLRCxNQUNSMEMsRUFDYkYsS0FFSUEsR0FBZ0IsSUFBR0YsR0FBOEJFLEVBQWUsRUE1RHRFLEdBNkRFRSxFQUFVOThDLEVBQ1Y0OEMsRUFBZSxHQUlmRCxHQUFnQixJQUFHRCxHQUE4QkMsRUFBZSxFQWxFbEUsR0FtRUVDLEdBQWdCLElBQUdGLEdBQThCRSxFQUFlLEVBbkVsRSxHQXNFSixPQUFPRixHQVFUOXVELEVBQVFtdkQsYUFBZSxTQUF1QnJ5RCxHQUk1QyxJQUhBLElBQUkyYyxFQUFPM2MsRUFBSzJjLEtBQ1pxMUMsRUFBUyxFQUVKdEMsRUFBTSxFQUFHQSxFQUFNL3lDLEVBQU8sRUFBRyt5QyxJQUNoQyxJQUFLLElBQUlDLEVBQU0sRUFBR0EsRUFBTWh6QyxFQUFPLEVBQUdnekMsSUFBTyxDQUN2QyxJQUFJMkMsRUFBT3R5RCxFQUFLMEssSUFBSWdsRCxFQUFLQyxHQUN2QjN2RCxFQUFLMEssSUFBSWdsRCxFQUFLQyxFQUFNLEdBQ3BCM3ZELEVBQUswSyxJQUFJZ2xELEVBQU0sRUFBR0MsR0FDbEIzdkQsRUFBSzBLLElBQUlnbEQsRUFBTSxFQUFHQyxFQUFNLEdBRWIsSUFBVDJDLEdBQXVCLElBQVRBLEdBQVlOLElBSWxDLE9BNUZJLEVBNEZHQSxHQVNUOXVELEVBQVFxdkQsYUFBZSxTQUF1QnZ5RCxHQU01QyxJQUxBLElBQUkyYyxFQUFPM2MsRUFBSzJjLEtBQ1pxMUMsRUFBUyxFQUNUUSxFQUFVLEVBQ1ZDLEVBQVUsRUFFTC9DLEVBQU0sRUFBR0EsRUFBTS95QyxFQUFNK3lDLElBQU8sQ0FDbkM4QyxFQUFVQyxFQUFVLEVBQ3BCLElBQUssSUFBSTlDLEVBQU0sRUFBR0EsRUFBTWh6QyxFQUFNZ3pDLElBQzVCNkMsRUFBWUEsR0FBVyxFQUFLLEtBQVN4eUQsRUFBSzBLLElBQUlnbEQsRUFBS0MsR0FDL0NBLEdBQU8sS0FBbUIsT0FBWjZDLEdBQWlDLEtBQVpBLElBQW9CUixJQUUzRFMsRUFBWUEsR0FBVyxFQUFLLEtBQVN6eUQsRUFBSzBLLElBQUlpbEQsRUFBS0QsR0FDL0NDLEdBQU8sS0FBbUIsT0FBWjhDLEdBQWlDLEtBQVpBLElBQW9CVCxJQUkvRCxPQXJISSxHQXFIR0EsR0FXVDl1RCxFQUFRd3ZELGFBQWUsU0FBdUIxeUQsR0FJNUMsSUFIQSxJQUFJMnlELEVBQVksRUFDWkMsRUFBZTV5RCxFQUFLQSxLQUFLeEQsT0FFcEJFLEVBQUksRUFBR0EsRUFBSWsyRCxFQUFjbDJELElBQUtpMkQsR0FBYTN5RCxFQUFLQSxLQUFLdEQsR0FJOUQsT0F2SUksR0FxSUltUixLQUFLcVgsSUFBSXJYLEtBQUtDLEtBQWtCLElBQVo2a0QsRUFBa0JDLEVBQWdCLEdBQUssS0FrQ3JFMXZELEVBQVEydkQsVUFBWSxTQUFvQkMsRUFBUzl5RCxHQUcvQyxJQUZBLElBQUkyYyxFQUFPM2MsRUFBSzJjLEtBRVBnekMsRUFBTSxFQUFHQSxFQUFNaHpDLEVBQU1nekMsSUFDNUIsSUFBSyxJQUFJRCxFQUFNLEVBQUdBLEVBQU0veUMsRUFBTSt5QyxJQUN4QjF2RCxFQUFLNnZELFdBQVdILEVBQUtDLElBQ3pCM3ZELEVBQUtxbUIsSUFBSXFwQyxFQUFLQyxFQUFLaUMsRUFBVWtCLEVBQVNwRCxFQUFLQyxLQVdqRHpzRCxFQUFRNnZELFlBQWMsU0FBc0IveUQsRUFBTWd6RCxHQUtoRCxJQUpBLElBQUlDLEVBQWM3eEQsT0FBTzQzQixLQUFLOTFCLEVBQVFpdUQsVUFBVTMwRCxPQUM1QzAyRCxFQUFjLEVBQ2RDLEVBQWVDLElBRVZ4b0QsRUFBSSxFQUFHQSxFQUFJcW9ELEVBQWFyb0QsSUFBSyxDQUNwQ29vRCxFQUFnQnBvRCxHQUNoQjFILEVBQVEydkQsVUFBVWpvRCxFQUFHNUssR0FHckIsSUFBSXF6RCxFQUNGbndELEVBQVE2dUQsYUFBYS94RCxHQUNyQmtELEVBQVFtdkQsYUFBYXJ5RCxHQUNyQmtELEVBQVFxdkQsYUFBYXZ5RCxHQUNyQmtELEVBQVF3dkQsYUFBYTF5RCxHQUd2QmtELEVBQVEydkQsVUFBVWpvRCxFQUFHNUssR0FFakJxekQsRUFBVUYsSUFDWkEsRUFBZUUsRUFDZkgsRUFBY3RvRCxHQUlsQixPQUFPc29ELEksZ0JDeE9ULElBQUlJLEVBQWUsRUFBUSxPQUN2QkMsRUFBUSxFQUFRLE1BU3BCcndELEVBQVFzd0QsUUFBVSxDQUNoQnR4RCxHQUFJLFVBQ0p3a0IsSUFBSyxFQUNMK3NDLE9BQVEsQ0FBQyxHQUFJLEdBQUksS0FZbkJ2d0QsRUFBUTJyRCxhQUFlLENBQ3JCM3NELEdBQUksZUFDSndrQixJQUFLLEVBQ0wrc0MsT0FBUSxDQUFDLEVBQUcsR0FBSSxLQVFsQnZ3RCxFQUFRNnNELEtBQU8sQ0FDYjd0RCxHQUFJLE9BQ0p3a0IsSUFBSyxFQUNMK3NDLE9BQVEsQ0FBQyxFQUFHLEdBQUksS0FZbEJ2d0QsRUFBUSt0RCxNQUFRLENBQ2QvdUQsR0FBSSxRQUNKd2tCLElBQUssRUFDTCtzQyxPQUFRLENBQUMsRUFBRyxHQUFJLEtBU2xCdndELEVBQVF3d0QsTUFBUSxDQUNkaHRDLEtBQU0sR0FXUnhqQixFQUFReXdELHNCQUF3QixTQUFnQ25qQyxFQUFNNzFCLEdBQ3BFLElBQUs2MUIsRUFBS2lqQyxPQUFRLE1BQU0sSUFBSS96RCxNQUFNLGlCQUFtQjh3QixHQUVyRCxJQUFLOGlDLEVBQWFoRCxRQUFRMzFELEdBQ3hCLE1BQU0sSUFBSStFLE1BQU0sb0JBQXNCL0UsR0FHeEMsT0FBSUEsR0FBVyxHQUFLQSxFQUFVLEdBQVc2MUIsRUFBS2lqQyxPQUFPLEdBQzVDOTRELEVBQVUsR0FBVzYxQixFQUFLaWpDLE9BQU8sR0FDbkNqakMsRUFBS2lqQyxPQUFPLElBU3JCdndELEVBQVEwd0QsbUJBQXFCLFNBQTZCQyxHQUN4RCxPQUFJTixFQUFNTyxZQUFZRCxHQUFpQjN3RCxFQUFRc3dELFFBQ3RDRCxFQUFNUSxpQkFBaUJGLEdBQWlCM3dELEVBQVEyckQsYUFDaEQwRSxFQUFNUyxVQUFVSCxHQUFpQjN3RCxFQUFRK3RELE1BQ3RDL3RELEVBQVE2c0QsTUFTdEI3c0QsRUFBUTZELFNBQVcsU0FBbUJ5cEIsR0FDcEMsR0FBSUEsR0FBUUEsRUFBS3R1QixHQUFJLE9BQU9zdUIsRUFBS3R1QixHQUNqQyxNQUFNLElBQUl4QyxNQUFNLGlCQVNsQndELEVBQVFvdEQsUUFBVSxTQUFrQjkvQixHQUNsQyxPQUFPQSxHQUFRQSxFQUFLOUosS0FBTzhKLEVBQUtpakMsUUFzQ2xDdndELEVBQVFpRSxLQUFPLFNBQWUxSCxFQUFPb2UsR0FDbkMsR0FBSTNhLEVBQVFvdEQsUUFBUTd3RCxHQUNsQixPQUFPQSxFQUdULElBQ0UsT0FuQ0osU0FBcUJ1ckMsR0FDbkIsR0FBc0IsaUJBQVhBLEVBQ1QsTUFBTSxJQUFJdHJDLE1BQU0seUJBS2xCLE9BRllzckMsRUFBTzNzQyxlQUdqQixJQUFLLFVBQ0gsT0FBTzZFLEVBQVFzd0QsUUFDakIsSUFBSyxlQUNILE9BQU90d0QsRUFBUTJyRCxhQUNqQixJQUFLLFFBQ0gsT0FBTzNyRCxFQUFRK3RELE1BQ2pCLElBQUssT0FDSCxPQUFPL3RELEVBQVE2c0QsS0FDakIsUUFDRSxNQUFNLElBQUlyd0QsTUFBTSxpQkFBbUJzckMsSUFrQjlCd2xCLENBQVcvd0QsR0FDbEIsTUFBT2lQLEdBQ1AsT0FBT21QLEssZ0JDcEtYLElBQUk2d0MsRUFBTyxFQUFRLE9BRW5CLFNBQVN1RixFQUFhajBELEdBQ3BCbkYsS0FBSzIxQixLQUFPaytCLEVBQUs4RSxRQUNqQjM0RCxLQUFLbUYsS0FBT0EsRUFBSytHLFdBR25Ca3RELEVBQVluRixjQUFnQixTQUF3QnR5RCxHQUNsRCxPQUFPLEdBQUtxUixLQUFLd3BCLE1BQU03NkIsRUFBUyxJQUFPQSxFQUFTLEVBQU9BLEVBQVMsRUFBSyxFQUFJLEVBQUssSUFHaEZ5M0QsRUFBWXQ3QyxVQUFVbzJDLFVBQVksV0FDaEMsT0FBT2wwRCxLQUFLbUYsS0FBS3hELFFBR25CeTNELEVBQVl0N0MsVUFBVW0yQyxjQUFnQixXQUNwQyxPQUFPbUYsRUFBWW5GLGNBQWNqMEQsS0FBS21GLEtBQUt4RCxTQUc3Q3kzRCxFQUFZdDdDLFVBQVVxMkMsTUFBUSxTQUFnQkMsR0FDNUMsSUFBSXZ5RCxFQUFHdzNELEVBQU96MEQsRUFJZCxJQUFLL0MsRUFBSSxFQUFHQSxFQUFJLEdBQUs3QixLQUFLbUYsS0FBS3hELE9BQVFFLEdBQUssRUFDMUN3M0QsRUFBUXI1RCxLQUFLbUYsS0FBS2lqQyxPQUFPdm1DLEVBQUcsR0FDNUIrQyxFQUFRZ0ksU0FBU3lzRCxFQUFPLElBRXhCakYsRUFBVUMsSUFBSXp2RCxFQUFPLElBS3ZCLElBQUkwMEQsRUFBZXQ1RCxLQUFLbUYsS0FBS3hELE9BQVNFLEVBQ2xDeTNELEVBQWUsSUFDakJELEVBQVFyNUQsS0FBS21GLEtBQUtpakMsT0FBT3ZtQyxHQUN6QitDLEVBQVFnSSxTQUFTeXNELEVBQU8sSUFFeEJqRixFQUFVQyxJQUFJenZELEVBQXNCLEVBQWYwMEQsRUFBbUIsS0FJNUM3K0MsRUFBT3BTLFFBQVUrd0QsRyxnQkMxQ2pCLElBQUkxRSxFQUFhLEVBQVEsT0FDckI2RSxFQUFLLEVBQVEsT0FTakJseEQsRUFBUXVlLElBQU0sU0FBYzR5QyxFQUFJQyxHQUc5QixJQUZBLElBQUlDLEVBQVFoRixFQUFXM1gsTUFBTXljLEVBQUc3M0QsT0FBUzgzRCxFQUFHOTNELE9BQVMsR0FFNUNFLEVBQUksRUFBR0EsRUFBSTIzRCxFQUFHNzNELE9BQVFFLElBQzdCLElBQUssSUFBSU8sRUFBSSxFQUFHQSxFQUFJcTNELEVBQUc5M0QsT0FBUVMsSUFDN0JzM0QsRUFBTTczRCxFQUFJTyxJQUFNbTNELEVBQUczeUMsSUFBSTR5QyxFQUFHMzNELEdBQUk0M0QsRUFBR3IzRCxJQUlyQyxPQUFPczNELEdBVVRyeEQsRUFBUUgsSUFBTSxTQUFjeXhELEVBQVVDLEdBR3BDLElBRkEsSUFBSTdyRCxFQUFTMm1ELEVBQVdwb0QsS0FBS3F0RCxHQUVyQjVyRCxFQUFPcE0sT0FBU2k0RCxFQUFRajRELFFBQVcsR0FBRyxDQUc1QyxJQUZBLElBQUkrM0QsRUFBUTNyRCxFQUFPLEdBRVZsTSxFQUFJLEVBQUdBLEVBQUkrM0QsRUFBUWo0RCxPQUFRRSxJQUNsQ2tNLEVBQU9sTSxJQUFNMDNELEVBQUczeUMsSUFBSWd6QyxFQUFRLzNELEdBQUk2M0QsR0FLbEMsSUFEQSxJQUFJM2xCLEVBQVMsRUFDTkEsRUFBU2htQyxFQUFPcE0sUUFBNkIsSUFBbkJvTSxFQUFPZ21DLElBQWVBLElBQ3ZEaG1DLEVBQVNBLEVBQU9yTSxNQUFNcXlDLEdBR3hCLE9BQU9obUMsR0FVVDFGLEVBQVF3eEQscUJBQXVCLFNBQStCQyxHQUU1RCxJQURBLElBQUlDLEVBQU9yRixFQUFXcG9ELEtBQUssQ0FBQyxJQUNuQnpLLEVBQUksRUFBR0EsRUFBSWk0RCxFQUFRajRELElBQzFCazRELEVBQU8xeEQsRUFBUXVlLElBQUltekMsRUFBTSxDQUFDLEVBQUdSLEVBQUdyRCxJQUFJcjBELEtBR3RDLE9BQU9rNEQsSSxnQkM3RFQsSUFBSXJGLEVBQWEsRUFBUSxPQUNyQmtCLEVBQVEsRUFBUSxPQUNoQlQsRUFBVSxFQUFRLE9BQ2xCYixFQUFZLEVBQVEsT0FDcEJLLEVBQVksRUFBUSxPQUNwQnFGLEVBQW1CLEVBQVEsT0FDM0JDLEVBQWdCLEVBQVEsT0FDeEJDLEVBQWMsRUFBUSxPQUN0QkMsRUFBUyxFQUFRLE9BQ2pCQyxFQUFxQixFQUFRLE9BQzdCQyxFQUFVLEVBQVEsT0FDbEJDLEVBQWEsRUFBUSxPQUNyQnpHLEVBQU8sRUFBUSxPQUNmMEcsRUFBVyxFQUFRLE9BQ25CbHNELEVBQVUsRUFBUSxPQXFJdEIsU0FBU21zRCxFQUFpQkMsRUFBUWxGLEVBQXNCeUIsR0FDdEQsSUFFSW4xRCxFQUFHcUcsRUFGSDRaLEVBQU8yNEMsRUFBTzM0QyxLQUNkdVMsRUFBT2ltQyxFQUFXdkUsZUFBZVIsRUFBc0J5QixHQUczRCxJQUFLbjFELEVBQUksRUFBR0EsRUFBSSxHQUFJQSxJQUNsQnFHLEVBQTRCLElBQXBCbXNCLEdBQVF4eUIsRUFBSyxHQUdqQkEsRUFBSSxFQUNONDRELEVBQU96NEMsSUFBSW5nQixFQUFHLEVBQUdxRyxHQUFLLEdBQ2JyRyxFQUFJLEVBQ2I0NEQsRUFBT3o0QyxJQUFJbmdCLEVBQUksRUFBRyxFQUFHcUcsR0FBSyxHQUUxQnV5RCxFQUFPejRDLElBQUlGLEVBQU8sR0FBS2pnQixFQUFHLEVBQUdxRyxHQUFLLEdBSWhDckcsRUFBSSxFQUNONDRELEVBQU96NEMsSUFBSSxFQUFHRixFQUFPamdCLEVBQUksRUFBR3FHLEdBQUssR0FDeEJyRyxFQUFJLEVBQ2I0NEQsRUFBT3o0QyxJQUFJLEVBQUcsR0FBS25nQixFQUFJLEVBQUksRUFBR3FHLEdBQUssR0FFbkN1eUQsRUFBT3o0QyxJQUFJLEVBQUcsR0FBS25nQixFQUFJLEVBQUdxRyxHQUFLLEdBS25DdXlELEVBQU96NEMsSUFBSUYsRUFBTyxFQUFHLEVBQUcsR0FBRyxHQTRNN0IsU0FBUzQ0QyxFQUFjdjFELEVBQU1yRixFQUFTeTFELEVBQXNCeUIsR0FDMUQsSUFBSTJELEVBRUosR0FBSXRzRCxFQUFRbEosR0FDVncxRCxFQUFXSixFQUFTSyxVQUFVejFELE9BQ3pCLElBQW9CLGlCQUFUQSxFQWVoQixNQUFNLElBQUlOLE1BQU0sZ0JBZGhCLElBQUlnMkQsRUFBbUIvNkQsRUFFdkIsSUFBSys2RCxFQUFrQixDQUNyQixJQUFJQyxFQUFjUCxFQUFTUSxTQUFTNTFELEdBR3BDMDFELEVBQW1CUixFQUFRVyxzQkFBc0JGLEVBQy9DdkYsR0FLSm9GLEVBQVdKLEVBQVM1RSxXQUFXeHdELEVBQU0wMUQsR0FBb0IsSUFNM0QsSUFBSUksRUFBY1osRUFBUVcsc0JBQXNCTCxFQUM1Q3BGLEdBR0osSUFBSzBGLEVBQ0gsTUFBTSxJQUFJcDJELE1BQU0sMkRBSWxCLEdBQUsvRSxHQUlFLEdBQUlBLEVBQVVtN0QsRUFDbkIsTUFBTSxJQUFJcDJELE1BQU0sd0hBRTBDbzJELEVBQWMsWUFOeEVuN0QsRUFBVW03RCxFQVVaLElBQUlDLEVBL0xOLFNBQXFCcDdELEVBQVN5MUQsRUFBc0JvRixHQUVsRCxJQUFJMzdCLEVBQVMsSUFBSXMxQixFQUVqQnFHLEVBQVNuc0QsU0FBUSxTQUFVckosR0FFekI2NUIsRUFBT3ExQixJQUFJbHZELEVBQUt3d0IsS0FBSzlKLElBQUssR0FTMUJtVCxFQUFPcTFCLElBQUlsdkQsRUFBSyt1RCxZQUFhTCxFQUFLaUYsc0JBQXNCM3pELEVBQUt3d0IsS0FBTTcxQixJQUduRXFGLEVBQUtndkQsTUFBTW4xQixNQUliLElBRUltOEIsRUFBK0QsR0FGOUN2RixFQUFNd0Ysd0JBQXdCdDdELEdBQzVCcTZELEVBQU8zRSx1QkFBdUIxMUQsRUFBU3kxRCxJQWlCOUQsSUFUSXYyQixFQUFPeTFCLGtCQUFvQixHQUFLMEcsR0FDbENuOEIsRUFBT3ExQixJQUFJLEVBQUcsR0FRVHIxQixFQUFPeTFCLGtCQUFvQixHQUFNLEdBQ3RDejFCLEVBQU93MUIsT0FBTyxHQVFoQixJQURBLElBQUk2RyxHQUFpQkYsRUFBeUJuOEIsRUFBT3kxQixtQkFBcUIsRUFDakU1eUQsRUFBSSxFQUFHQSxFQUFJdzVELEVBQWV4NUQsSUFDakNtOUIsRUFBT3ExQixJQUFJeHlELEVBQUksRUFBSSxHQUFPLElBQU0sR0FHbEMsT0FZRixTQUEwQnV5RCxFQUFXdDBELEVBQVN5MUQsR0FtQzVDLElBakNBLElBQUkrRixFQUFpQjFGLEVBQU13Rix3QkFBd0J0N0QsR0FNL0N5N0QsRUFBcUJELEVBSEZuQixFQUFPM0UsdUJBQXVCMTFELEVBQVN5MUQsR0FNMURpRyxFQUFnQnJCLEVBQU83RSxlQUFleDFELEVBQVN5MUQsR0FJL0NrRyxFQUFpQkQsRUFEQUYsRUFBaUJFLEVBR2xDRSxFQUF5QjFvRCxLQUFLd3BCLE1BQU04K0IsRUFBaUJFLEdBRXJERyxFQUF3QjNvRCxLQUFLd3BCLE1BQU0rK0IsRUFBcUJDLEdBQ3hESSxFQUF3QkQsRUFBd0IsRUFHaERFLEVBQVVILEVBQXlCQyxFQUduQ0csRUFBSyxJQUFJMUIsRUFBbUJ5QixHQUU1QjluQixFQUFTLEVBQ1Rnb0IsRUFBUyxJQUFJOTVELE1BQU11NUQsR0FDbkJRLEVBQVMsSUFBSS81RCxNQUFNdTVELEdBQ25CUyxFQUFjLEVBQ2RqOUIsRUFBUzAxQixFQUFXcG9ELEtBQUs4bkQsRUFBVXAxQixRQUc5QnBpQixFQUFJLEVBQUdBLEVBQUk0K0MsRUFBZTUrQyxJQUFLLENBQ3RDLElBQUlzL0MsRUFBV3QvQyxFQUFJNitDLEVBQWlCRSxFQUF3QkMsRUFHNURHLEVBQU9uL0MsR0FBS29pQixFQUFPdDlCLE1BQU1xeUMsRUFBUUEsRUFBU21vQixHQUcxQ0YsRUFBT3AvQyxHQUFLay9DLEVBQUdwaUIsT0FBT3FpQixFQUFPbi9DLElBRTdCbTNCLEdBQVVtb0IsRUFDVkQsRUFBY2pwRCxLQUFLNlQsSUFBSW8xQyxFQUFhQyxHQUt0QyxJQUVJcjZELEVBQUdHLEVBRkhtRCxFQUFPdXZELEVBQVczWCxNQUFNdWUsR0FDeEJqb0QsRUFBUSxFQUlaLElBQUt4UixFQUFJLEVBQUdBLEVBQUlvNkQsRUFBYXA2RCxJQUMzQixJQUFLRyxFQUFJLEVBQUdBLEVBQUl3NUQsRUFBZXg1RCxJQUN6QkgsRUFBSWs2RCxFQUFPLzVELEdBQUdMLFNBQ2hCd0QsRUFBS2tPLEtBQVcwb0QsRUFBTy81RCxHQUFHSCxJQU1oQyxJQUFLQSxFQUFJLEVBQUdBLEVBQUlnNkQsRUFBU2g2RCxJQUN2QixJQUFLRyxFQUFJLEVBQUdBLEVBQUl3NUQsRUFBZXg1RCxJQUM3Qm1ELEVBQUtrTyxLQUFXMm9ELEVBQU9oNkQsR0FBR0gsR0FJOUIsT0FBT3NELEVBbEZBZzNELENBQWdCbjlCLEVBQVFsL0IsRUFBU3kxRCxHQTBJekI2RyxDQUFXdDhELEVBQVN5MUQsRUFBc0JvRixHQUdyRDBCLEVBQWN6RyxFQUFNeEMsY0FBY3R6RCxHQUNsQ3c4RCxFQUFVLElBQUkzSCxFQUFVMEgsR0FnQzVCLE9BM1pGLFNBQTZCNUIsRUFBUTM2RCxHQUluQyxJQUhBLElBQUlnaUIsRUFBTzI0QyxFQUFPMzRDLEtBQ2Q2eEMsRUFBTXNHLEVBQWN4RyxhQUFhM3pELEdBRTVCK0IsRUFBSSxFQUFHQSxFQUFJOHhELEVBQUloeUQsT0FBUUUsSUFJOUIsSUFIQSxJQUFJZ3pELEVBQU1sQixFQUFJOXhELEdBQUcsR0FDYml6RCxFQUFNbkIsRUFBSTl4RCxHQUFHLEdBRVJHLEdBQUssRUFBR0EsR0FBSyxFQUFHQSxJQUN2QixLQUFJNnlELEVBQU03eUQsSUFBTSxHQUFLOGYsR0FBUSt5QyxFQUFNN3lELEdBRW5DLElBQUssSUFBSThZLEdBQUssRUFBR0EsR0FBSyxFQUFHQSxJQUNuQmc2QyxFQUFNaDZDLElBQU0sR0FBS2dILEdBQVFnekMsRUFBTWg2QyxJQUU5QjlZLEdBQUssR0FBS0EsR0FBSyxJQUFZLElBQU44WSxHQUFpQixJQUFOQSxJQUNsQ0EsR0FBSyxHQUFLQSxHQUFLLElBQVksSUFBTjlZLEdBQWlCLElBQU5BLElBQ2hDQSxHQUFLLEdBQUtBLEdBQUssR0FBSzhZLEdBQUssR0FBS0EsR0FBSyxFQUNwQzIvQyxFQUFPejRDLElBQUk2eUMsRUFBTTd5RCxFQUFHOHlELEVBQU1oNkMsR0FBRyxHQUFNLEdBRW5DMi9DLEVBQU96NEMsSUFBSTZ5QyxFQUFNN3lELEVBQUc4eUQsRUFBTWg2QyxHQUFHLEdBQU8sSUEyVzVDeWhELENBQW1CRCxFQUFTeDhELEdBN1Y5QixTQUE2QjI2RCxHQUczQixJQUZBLElBQUkzNEMsRUFBTzI0QyxFQUFPMzRDLEtBRVQ5ZixFQUFJLEVBQUdBLEVBQUk4ZixFQUFPLEVBQUc5ZixJQUFLLENBQ2pDLElBQUk0QyxFQUFRNUMsRUFBSSxHQUFNLEVBQ3RCeTRELEVBQU96NEMsSUFBSWhnQixFQUFHLEVBQUc0QyxHQUFPLEdBQ3hCNjFELEVBQU96NEMsSUFBSSxFQUFHaGdCLEVBQUc0QyxHQUFPLElBd1YxQjQzRCxDQUFtQkYsR0E1VXJCLFNBQWdDN0IsRUFBUTM2RCxHQUd0QyxJQUZBLElBQUk2ekQsRUFBTXFHLEVBQWlCdkcsYUFBYTN6RCxHQUUvQitCLEVBQUksRUFBR0EsRUFBSTh4RCxFQUFJaHlELE9BQVFFLElBSTlCLElBSEEsSUFBSWd6RCxFQUFNbEIsRUFBSTl4RCxHQUFHLEdBQ2JpekQsRUFBTW5CLEVBQUk5eEQsR0FBRyxHQUVSRyxHQUFLLEVBQUdBLEdBQUssRUFBR0EsSUFDdkIsSUFBSyxJQUFJOFksR0FBSyxFQUFHQSxHQUFLLEVBQUdBLEtBQ1osSUFBUDlZLEdBQWtCLElBQU5BLElBQWtCLElBQVA4WSxHQUFrQixJQUFOQSxHQUM5QixJQUFOOVksR0FBaUIsSUFBTjhZLEVBQ1oyL0MsRUFBT3o0QyxJQUFJNnlDLEVBQU03eUQsRUFBRzh5RCxFQUFNaDZDLEdBQUcsR0FBTSxHQUVuQzIvQyxFQUFPejRDLElBQUk2eUMsRUFBTTd5RCxFQUFHOHlELEVBQU1oNkMsR0FBRyxHQUFPLEdBZ1U1QzJoRCxDQUFzQkgsRUFBU3g4RCxHQU0vQjA2RCxFQUFnQjhCLEVBQVMvRyxFQUFzQixHQUUzQ3oxRCxHQUFXLEdBM1RqQixTQUEyQjI2RCxFQUFRMzZELEdBS2pDLElBSkEsSUFFSSswRCxFQUFLQyxFQUFLNXNELEVBRlY0WixFQUFPMjRDLEVBQU8zNEMsS0FDZHVTLEVBQU9nbUMsRUFBUXRFLGVBQWVqMkQsR0FHekIrQixFQUFJLEVBQUdBLEVBQUksR0FBSUEsSUFDdEJnekQsRUFBTTdoRCxLQUFLd3BCLE1BQU0zNkIsRUFBSSxHQUNyQml6RCxFQUFNanpELEVBQUksRUFBSWlnQixFQUFPLEVBQUksRUFDekI1WixFQUE0QixJQUFwQm1zQixHQUFReHlCLEVBQUssR0FFckI0NEQsRUFBT3o0QyxJQUFJNnlDLEVBQUtDLEVBQUs1c0QsR0FBSyxHQUMxQnV5RCxFQUFPejRDLElBQUk4eUMsRUFBS0QsRUFBSzNzRCxHQUFLLEdBaVQxQncwRCxDQUFpQkosRUFBU3g4RCxHQWpROUIsU0FBb0IyNkQsRUFBUXQxRCxHQU8xQixJQU5BLElBQUkyYyxFQUFPMjRDLEVBQU8zNEMsS0FDZDY2QyxHQUFPLEVBQ1A5SCxFQUFNL3lDLEVBQU8sRUFDYjg2QyxFQUFXLEVBQ1hDLEVBQVksRUFFUC9ILEVBQU1oekMsRUFBTyxFQUFHZ3pDLEVBQU0sRUFBR0EsR0FBTyxFQUd2QyxJQUZZLElBQVJBLEdBQVdBLE1BRUYsQ0FDWCxJQUFLLElBQUloNkMsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBQ3JCLElBQUsyL0MsRUFBT3pGLFdBQVdILEVBQUtDLEVBQU1oNkMsR0FBSSxDQUNwQyxJQUFJZ2lELEdBQU8sRUFFUEQsRUFBWTEzRCxFQUFLeEQsU0FDbkJtN0QsRUFBaUQsSUFBdkMzM0QsRUFBSzAzRCxLQUFlRCxFQUFZLElBRzVDbkMsRUFBT3o0QyxJQUFJNnlDLEVBQUtDLEVBQU1oNkMsRUFBR2dpRCxJQUdQLEtBRmxCRixJQUdFQyxJQUNBRCxFQUFXLEdBT2pCLElBRkEvSCxHQUFPOEgsR0FFRyxHQUFLNzZDLEdBQVEreUMsRUFBSyxDQUMxQkEsR0FBTzhILEVBQ1BBLEdBQU9BLEVBQ1AsUUFtT05JLENBQVVULEVBQVNwQixHQUVmakUsTUFBTUQsS0FFUkEsRUFBY2tELEVBQVloQyxZQUFZb0UsRUFDcEM5QixFQUFnQmg2QyxLQUFLLEtBQU04N0MsRUFBUy9HLEtBSXhDMkUsRUFBWWxDLFVBQVVoQixFQUFhc0YsR0FHbkM5QixFQUFnQjhCLEVBQVMvRyxFQUFzQnlCLEdBRXhDLENBQ0xzRixRQUFTQSxFQUNUeDhELFFBQVNBLEVBQ1R5MUQscUJBQXNCQSxFQUN0QnlCLFlBQWFBLEVBQ2IyRCxTQUFVQSxHQWFkdHlELEVBQVFtSCxPQUFTLFNBQWlCckssRUFBTW9tQyxHQUN0QyxRQUFvQixJQUFUcG1DLEdBQWlDLEtBQVRBLEVBQ2pDLE1BQU0sSUFBSU4sTUFBTSxpQkFHbEIsSUFDSS9FLEVBQ0E2MEIsRUFGQTRnQyxFQUF1QkosRUFBUW4xQyxFQWVuQyxZQVh1QixJQUFadXJCLElBRVRncUIsRUFBdUJKLEVBQVE3b0QsS0FBS2kvQixFQUFRZ3FCLHFCQUFzQkosRUFBUW4xQyxHQUMxRWxnQixFQUFVdTZELEVBQVEvdEQsS0FBS2kvQixFQUFRenJDLFNBQy9CNjBCLEVBQU91bEMsRUFBWTV0RCxLQUFLaS9CLEVBQVF5ckIsYUFFNUJ6ckIsRUFBUXl4QixZQUNWcEgsRUFBTXFILGtCQUFrQjF4QixFQUFReXhCLGFBSTdCdEMsRUFBYXYxRCxFQUFNckYsRUFBU3kxRCxFQUFzQjVnQyxLLGdCQ2pmM0QsSUFBSSsvQixFQUFhLEVBQVEsT0FDckJ3SSxFQUFhLEVBQVEsT0FDckIzd0QsRUFBUyxXQUViLFNBQVM2dEQsRUFBb0JOLEdBQzNCOTVELEtBQUttOUQsYUFBVTc1RCxFQUNmdEQsS0FBSzg1RCxPQUFTQSxFQUVWOTVELEtBQUs4NUQsUUFBUTk1RCxLQUFLMnRDLFdBQVczdEMsS0FBSzg1RCxRQVN4Q00sRUFBbUJ0OEMsVUFBVTZ2QixXQUFhLFNBQXFCbXNCLEdBRTdEOTVELEtBQUs4NUQsT0FBU0EsRUFDZDk1RCxLQUFLbTlELFFBQVVELEVBQVdyRCxxQkFBcUI3NUQsS0FBSzg1RCxTQVN0RE0sRUFBbUJ0OEMsVUFBVTQ3QixPQUFTLFNBQWlCdjBDLEdBQ3JELElBQUtuRixLQUFLbTlELFFBQ1IsTUFBTSxJQUFJdDRELE1BQU0sMkJBS2xCLElBQUltSixFQUFNMG1ELEVBQVczWCxNQUFNLzhDLEtBQUs4NUQsUUFDNUJzRCxFQUFhN3dELEVBQU9nQyxPQUFPLENBQUNwSixFQUFNNkksR0FBTTdJLEVBQUt4RCxPQUFTM0IsS0FBSzg1RCxRQUkzRDFzRCxFQUFZOHZELEVBQVdoMUQsSUFBSWsxRCxFQUFZcDlELEtBQUttOUQsU0FLNUM3MkMsRUFBUXRtQixLQUFLODVELE9BQVMxc0QsRUFBVXpMLE9BQ3BDLEdBQUkya0IsRUFBUSxFQUFHLENBQ2IsSUFBSSsyQyxFQUFPM0ksRUFBVzNYLE1BQU0vOEMsS0FBSzg1RCxRQUdqQyxPQUZBMXNELEVBQVVpRCxLQUFLZ3RELEVBQU0vMkMsR0FFZCsyQyxFQUdULE9BQU9qd0QsR0FHVHFOLEVBQU9wUyxRQUFVK3hELEcsYUN6RGpCLElBRUlrRCxFQUFRLG1OQU1SQyxFQUFPLDhCQUZYRCxFQUFRQSxFQUFNNXZELFFBQVEsS0FBTSxRQUVzQixrQkFFbERyRixFQUFRK3RELE1BQVEsSUFBSXRwRCxPQUFPd3dELEVBQU8sS0FDbENqMUQsRUFBUW0xRCxXQUFhLElBQUkxd0QsT0FBTyx3QkFBeUIsS0FDekR6RSxFQUFRNnNELEtBQU8sSUFBSXBvRCxPQUFPeXdELEVBQU0sS0FDaENsMUQsRUFBUXN3RCxRQUFVLElBQUk3ckQsT0FiUixTQWF3QixLQUN0Q3pFLEVBQVEyckQsYUFBZSxJQUFJbG5ELE9BYlIsb0JBYTZCLEtBRWhELElBQUkyd0QsRUFBYSxJQUFJM3dELE9BQU8sSUFBTXd3RCxFQUFRLEtBQ3RDSSxFQUFlLElBQUk1d0QsT0FBTyxZQUMxQjZ3RCxFQUFvQixJQUFJN3dELE9BQU8sMEJBRW5DekUsRUFBUTh3RCxVQUFZLFNBQW9CdHNELEdBQ3RDLE9BQU80d0QsRUFBVzF3RCxLQUFLRixJQUd6QnhFLEVBQVE0d0QsWUFBYyxTQUFzQnBzRCxHQUMxQyxPQUFPNndELEVBQWEzd0QsS0FBS0YsSUFHM0J4RSxFQUFRNndELGlCQUFtQixTQUEyQnJzRCxHQUNwRCxPQUFPOHdELEVBQWtCNXdELEtBQUtGLEssZ0JDN0JoQyxJQUFJZ25ELEVBQU8sRUFBUSxPQUNmdUYsRUFBYyxFQUFRLE9BQ3RCckYsRUFBbUIsRUFBUSxNQUMzQmtCLEVBQVcsRUFBUSxPQUNuQmtCLEVBQVksRUFBUSxPQUNwQnVDLEVBQVEsRUFBUSxNQUNoQjlDLEVBQVEsRUFBUSxPQUNoQmpILEVBQVcsRUFBUSxPQVF2QixTQUFTaVAsRUFBcUIvd0QsR0FDNUIsT0FBT2d4RCxTQUFTNzNELG1CQUFtQjZHLElBQU1sTCxPQVczQyxTQUFTbThELEVBQWEzOEQsRUFBT3cwQixFQUFNOW9CLEdBSWpDLElBSEEsSUFDSWtCLEVBREE0c0QsRUFBVyxHQUd1QixRQUE5QjVzRCxFQUFTNU0sRUFBTUUsS0FBS3dMLEtBQzFCOHRELEVBQVNqNEQsS0FBSyxDQUNaeUMsS0FBTTRJLEVBQU8sR0FDYnNGLE1BQU90RixFQUFPc0YsTUFDZHNpQixLQUFNQSxFQUNOaDBCLE9BQVFvTSxFQUFPLEdBQUdwTSxTQUl0QixPQUFPZzVELEVBVVQsU0FBU29ELEVBQXVCL0UsR0FDOUIsSUFFSWdGLEVBQ0FDLEVBSEFDLEVBQVVKLEVBQVlwRixFQUFNQyxRQUFTOUUsRUFBSzhFLFFBQVNLLEdBQ25EbUYsRUFBZUwsRUFBWXBGLEVBQU0xRSxhQUFjSCxFQUFLRyxhQUFjZ0YsR0FjdEUsT0FWSXBELEVBQU13SSxzQkFDUkosRUFBV0YsRUFBWXBGLEVBQU14RCxLQUFNckIsRUFBS3FCLEtBQU04RCxHQUM5Q2lGLEVBQVlILEVBQVlwRixFQUFNdEMsTUFBT3ZDLEVBQUt1QyxNQUFPNEMsS0FFakRnRixFQUFXRixFQUFZcEYsRUFBTThFLFdBQVkzSixFQUFLcUIsS0FBTThELEdBQ3BEaUYsRUFBWSxJQUdIQyxFQUFRM3ZELE9BQU80dkQsRUFBY0gsRUFBVUMsR0FHL0M1aEQsTUFBSyxTQUFVZ2lELEVBQUlDLEdBQ2xCLE9BQU9ELEVBQUdockQsTUFBUWlyRCxFQUFHanJELFNBRXRCdE0sS0FBSSxTQUFVNjVDLEdBQ2IsTUFBTyxDQUNMejdDLEtBQU15N0MsRUFBSXo3QyxLQUNWd3dCLEtBQU1pckIsRUFBSWpyQixLQUNWaDBCLE9BQVFpL0MsRUFBSWovQyxXQWFwQixTQUFTNDhELEVBQXNCNThELEVBQVFnMEIsR0FDckMsT0FBUUEsR0FDTixLQUFLaytCLEVBQUs4RSxRQUNSLE9BQU9TLEVBQVluRixjQUFjdHlELEdBQ25DLEtBQUtreUQsRUFBS0csYUFDUixPQUFPRCxFQUFpQkUsY0FBY3R5RCxHQUN4QyxLQUFLa3lELEVBQUt1QyxNQUNSLE9BQU9ELEVBQVVsQyxjQUFjdHlELEdBQ2pDLEtBQUtreUQsRUFBS3FCLEtBQ1IsT0FBT0QsRUFBU2hCLGNBQWN0eUQsSUF3SXBDLFNBQVM2OEQsRUFBb0JyNUQsRUFBTXM1RCxHQUNqQyxJQUFJOW9DLEVBQ0Erb0MsRUFBVzdLLEVBQUtrRixtQkFBbUI1ekQsR0FLdkMsSUFIQXd3QixFQUFPaytCLEVBQUt2bkQsS0FBS215RCxFQUFXQyxNQUdmN0ssRUFBS3FCLE1BQVF2L0IsRUFBSzlKLElBQU02eUMsRUFBUzd5QyxJQUM1QyxNQUFNLElBQUlobkIsTUFBTSxJQUFNTSxFQUFOLGlDQUNvQjB1RCxFQUFLM25ELFNBQVN5cEIsR0FDaEQsMEJBQTRCaytCLEVBQUszbkQsU0FBU3d5RCxJQVE5QyxPQUpJL29DLElBQVNrK0IsRUFBS3VDLE9BQVVSLEVBQU13SSx1QkFDaEN6b0MsRUFBT2srQixFQUFLcUIsTUFHTnYvQixHQUNOLEtBQUtrK0IsRUFBSzhFLFFBQ1IsT0FBTyxJQUFJUyxFQUFZajBELEdBRXpCLEtBQUswdUQsRUFBS0csYUFDUixPQUFPLElBQUlELEVBQWlCNXVELEdBRTlCLEtBQUswdUQsRUFBS3VDLE1BQ1IsT0FBTyxJQUFJRCxFQUFVaHhELEdBRXZCLEtBQUswdUQsRUFBS3FCLEtBQ1IsT0FBTyxJQUFJRCxFQUFTOXZELElBbUIxQmtELEVBQVF1eUQsVUFBWSxTQUFvQjM5QixHQUN0QyxPQUFPQSxFQUFNbDhCLFFBQU8sU0FBVXcxQixFQUFLb29DLEdBT2pDLE1BTm1CLGlCQUFSQSxFQUNUcG9DLEVBQUk3ekIsS0FBSzg3RCxFQUFtQkcsRUFBSyxPQUN4QkEsRUFBSXg1RCxNQUNib3hCLEVBQUk3ekIsS0FBSzg3RCxFQUFtQkcsRUFBSXg1RCxLQUFNdzVELEVBQUlocEMsT0FHckNZLElBQ04sS0FXTGx1QixFQUFRc3RELFdBQWEsU0FBcUJ4d0QsRUFBTXJGLEdBUTlDLElBUEEsSUFHSSt1RCxFQTdITixTQUFxQlksRUFBTzN2RCxHQUsxQixJQUpBLElBQUk4K0QsRUFBUSxHQUNSL1AsRUFBUSxDQUFDLE1BQVMsSUFDbEJnUSxFQUFjLENBQUMsU0FFVmg5RCxFQUFJLEVBQUdBLEVBQUk0dEQsRUFBTTl0RCxPQUFRRSxJQUFLLENBSXJDLElBSEEsSUFBSWk5RCxFQUFZclAsRUFBTTV0RCxHQUNsQms5RCxFQUFpQixHQUVaMzhELEVBQUksRUFBR0EsRUFBSTA4RCxFQUFVbjlELE9BQVFTLElBQUssQ0FDekMsSUFBSWtOLEVBQU93dkQsRUFBVTE4RCxHQUNqQjhDLEVBQU0sR0FBS3JELEVBQUlPLEVBRW5CMjhELEVBQWVyOEQsS0FBS3dDLEdBQ3BCMDVELEVBQU0xNUQsR0FBTyxDQUFFb0ssS0FBTUEsRUFBTTB2RCxVQUFXLEdBQ3RDblEsRUFBTTNwRCxHQUFPLEdBRWIsSUFBSyxJQUFJd1YsRUFBSSxFQUFHQSxFQUFJbWtELEVBQVlsOUQsT0FBUStZLElBQUssQ0FDM0MsSUFBSXVrRCxFQUFhSixFQUFZbmtELEdBRXpCa2tELEVBQU1LLElBQWVMLEVBQU1LLEdBQVkzdkQsS0FBS3FtQixPQUFTcm1CLEVBQUtxbUIsTUFDNURrNUIsRUFBTW9RLEdBQVkvNUQsR0FDaEJxNUQsRUFBcUJLLEVBQU1LLEdBQVlELFVBQVkxdkQsRUFBSzNOLE9BQVEyTixFQUFLcW1CLE1BQ3JFNG9DLEVBQXFCSyxFQUFNSyxHQUFZRCxVQUFXMXZELEVBQUtxbUIsTUFFekRpcEMsRUFBTUssR0FBWUQsV0FBYTF2RCxFQUFLM04sU0FFaENpOUQsRUFBTUssS0FBYUwsRUFBTUssR0FBWUQsVUFBWTF2RCxFQUFLM04sUUFFMURrdEQsRUFBTW9RLEdBQVkvNUQsR0FBT3E1RCxFQUFxQmp2RCxFQUFLM04sT0FBUTJOLEVBQUtxbUIsTUFDOUQsRUFBSWsrQixFQUFLaUYsc0JBQXNCeHBELEVBQUtxbUIsS0FBTTcxQixLQUtsRCsrRCxFQUFjRSxFQUdoQixJQUFLcmtELEVBQUksRUFBR0EsRUFBSW1rRCxFQUFZbDlELE9BQVErWSxJQUNsQ20wQyxFQUFNZ1EsRUFBWW5rRCxJQUFTLElBQUksRUFHakMsTUFBTyxDQUFFM1QsSUFBSzhuRCxFQUFPK1AsTUFBT0EsR0FtRmhCTSxDQXpLZCxTQUFxQkMsR0FFbkIsSUFEQSxJQUFJMVAsRUFBUSxHQUNINXRELEVBQUksRUFBR0EsRUFBSXM5RCxFQUFLeDlELE9BQVFFLElBQUssQ0FDcEMsSUFBSTg4RCxFQUFNUSxFQUFLdDlELEdBRWYsT0FBUTg4RCxFQUFJaHBDLE1BQ1YsS0FBS2srQixFQUFLOEUsUUFDUmxKLEVBQU0vc0QsS0FBSyxDQUFDaThELEVBQ1YsQ0FBRXg1RCxLQUFNdzVELEVBQUl4NUQsS0FBTXd3QixLQUFNaytCLEVBQUtHLGFBQWNyeUQsT0FBUWc5RCxFQUFJaDlELFFBQ3ZELENBQUV3RCxLQUFNdzVELEVBQUl4NUQsS0FBTXd3QixLQUFNaytCLEVBQUtxQixLQUFNdnpELE9BQVFnOUQsRUFBSWg5RCxVQUVqRCxNQUNGLEtBQUtreUQsRUFBS0csYUFDUnZFLEVBQU0vc0QsS0FBSyxDQUFDaThELEVBQ1YsQ0FBRXg1RCxLQUFNdzVELEVBQUl4NUQsS0FBTXd3QixLQUFNaytCLEVBQUtxQixLQUFNdnpELE9BQVFnOUQsRUFBSWg5RCxVQUVqRCxNQUNGLEtBQUtreUQsRUFBS3VDLE1BQ1IzRyxFQUFNL3NELEtBQUssQ0FBQ2k4RCxFQUNWLENBQUV4NUQsS0FBTXc1RCxFQUFJeDVELEtBQU13d0IsS0FBTWsrQixFQUFLcUIsS0FBTXZ6RCxPQUFRaThELEVBQW9CZSxFQUFJeDVELFNBRXJFLE1BQ0YsS0FBSzB1RCxFQUFLcUIsS0FDUnpGLEVBQU0vc0QsS0FBSyxDQUNULENBQUV5QyxLQUFNdzVELEVBQUl4NUQsS0FBTXd3QixLQUFNaytCLEVBQUtxQixLQUFNdnpELE9BQVFpOEQsRUFBb0JlLEVBQUl4NUQsVUFLM0UsT0FBT3NxRCxFQTJJSzJQLENBRkRyQixFQUFzQjU0RCxFQUFNeXdELEVBQU13SSx1QkFHZnQrRCxHQUMxQitzQyxFQUFPOGhCLEVBQVNlLFVBQVViLEVBQU05bkQsSUFBSyxRQUFTLE9BRTlDczRELEVBQWdCLEdBQ1h4OUQsRUFBSSxFQUFHQSxFQUFJZ3JDLEVBQUtsckMsT0FBUyxFQUFHRSxJQUNuQ3c5RCxFQUFjMzhELEtBQUttc0QsRUFBTStQLE1BQU0veEIsRUFBS2hyQyxJQUFJeU4sTUFHMUMsT0FBT2pILEVBQVF1eUQsVUFBd0J5RSxFQTdNM0J0K0QsUUFBTyxTQUFVdzFCLEVBQUsrb0MsR0FDaEMsSUFBSUMsRUFBVWhwQyxFQUFJNTBCLE9BQVMsR0FBSyxFQUFJNDBCLEVBQUlBLEVBQUk1MEIsT0FBUyxHQUFLLEtBQzFELE9BQUk0OUQsR0FBV0EsRUFBUTVwQyxPQUFTMnBDLEVBQUszcEMsTUFDbkNZLEVBQUlBLEVBQUk1MEIsT0FBUyxHQUFHd0QsTUFBUW02RCxFQUFLbjZELEtBQzFCb3hCLElBR1RBLEVBQUk3ekIsS0FBSzQ4RCxHQUNGL29DLEtBQ04sTUFpTkxsdUIsRUFBUTB5RCxTQUFXLFNBQW1CNTFELEdBQ3BDLE9BQU9rRCxFQUFRdXlELFVBQ2JtRCxFQUFzQjU0RCxFQUFNeXdELEVBQU13SSx5QixjQ3ZVdEMsSUFBSW9CLEVBQ0FDLEVBQWtCLENBQ3BCLEVBQ0EsR0FBSSxHQUFJLEdBQUksSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFDMUMsSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssS0FDN0MsS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FDdEQsS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFTeERwM0QsRUFBUStxRCxjQUFnQixTQUF3QnR6RCxHQUM5QyxJQUFLQSxFQUFTLE1BQU0sSUFBSStFLE1BQU0seUNBQzlCLEdBQUkvRSxFQUFVLEdBQUtBLEVBQVUsR0FBSSxNQUFNLElBQUkrRSxNQUFNLDZDQUNqRCxPQUFpQixFQUFWL0UsRUFBYyxJQVN2QnVJLEVBQVEreUQsd0JBQTBCLFNBQWtDdDdELEdBQ2xFLE9BQU8yL0QsRUFBZ0IzL0QsSUFTekJ1SSxFQUFReXRELFlBQWMsU0FBVTN3RCxHQUc5QixJQUZBLElBQUl1NkQsRUFBUSxFQUVJLElBQVR2NkQsR0FDTHU2RCxJQUNBdjZELEtBQVUsRUFHWixPQUFPdTZELEdBR1RyM0QsRUFBUTQwRCxrQkFBb0IsU0FBNEJwaUQsR0FDdEQsR0FBaUIsbUJBQU5BLEVBQ1QsTUFBTSxJQUFJaFcsTUFBTSx5Q0FHbEIyNkQsRUFBaUIza0QsR0FHbkJ4UyxFQUFRKzFELG1CQUFxQixXQUMzQixZQUFpQyxJQUFuQm9CLEdBR2hCbjNELEVBQVFndUQsT0FBUyxTQUFpQmlILEdBQ2hDLE9BQU9rQyxFQUFlbEMsSyxjQ3ZEeEJqMUQsRUFBUW90RCxRQUFVLFNBQWtCMzFELEdBQ2xDLE9BQVFtM0QsTUFBTW4zRCxJQUFZQSxHQUFXLEdBQUtBLEdBQVcsSyxnQkNQdkQsSUFBSTgxRCxFQUFRLEVBQVEsT0FDaEJ1RSxFQUFTLEVBQVEsT0FDakJoRixFQUFVLEVBQVEsT0FDbEJ0QixFQUFPLEVBQVEsT0FDZjRFLEVBQWUsRUFBUSxPQUN2QnBxRCxFQUFVLEVBQVEsT0FJbEJzeEQsRUFBVS9KLEVBQU1FLFlBRFYsTUFhVixTQUFTOEosRUFBc0JqcUMsRUFBTTcxQixHQUVuQyxPQUFPK3pELEVBQUtpRixzQkFBc0JuakMsRUFBTTcxQixHQUFXLEVBR3JELFNBQVMrL0QsRUFBMkJsRixFQUFVNzZELEdBQzVDLElBQUlnZ0UsRUFBWSxFQU9oQixPQUxBbkYsRUFBU25zRCxTQUFRLFNBQVVySixHQUN6QixJQUFJNDZELEVBQWVILEVBQXFCejZELEVBQUt3d0IsS0FBTTcxQixHQUNuRGdnRSxHQUFhQyxFQUFlNTZELEVBQUs4dUQsbUJBRzVCNkwsRUFzQlR6M0QsRUFBUWlFLEtBQU8sU0FBZTFILEVBQU9vZSxHQUNuQyxPQUFJeTFDLEVBQWFoRCxRQUFRN3dELEdBQ2hCZ0ksU0FBU2hJLEVBQU8sSUFHbEJvZSxHQVlUM2EsRUFBUTIzRCxZQUFjLFNBQXNCbGdFLEVBQVN5MUQsRUFBc0I1L0IsR0FDekUsSUFBSzhpQyxFQUFhaEQsUUFBUTMxRCxHQUN4QixNQUFNLElBQUkrRSxNQUFNLGdDQUlFLElBQVQ4d0IsSUFBc0JBLEVBQU9rK0IsRUFBS3FCLE1BRzdDLElBTUlpRyxFQUErRCxHQU45Q3ZGLEVBQU13Rix3QkFBd0J0N0QsR0FHNUJxNkQsRUFBTzNFLHVCQUF1QjExRCxFQUFTeTFELElBSzlELEdBQUk1L0IsSUFBU2srQixFQUFLZ0YsTUFBTyxPQUFPc0MsRUFFaEMsSUFBSThFLEVBQWE5RSxFQUF5QnlFLEVBQXFCanFDLEVBQU03MUIsR0FHckUsT0FBUTYxQixHQUNOLEtBQUtrK0IsRUFBSzhFLFFBQ1IsT0FBTzNsRCxLQUFLd3BCLE1BQU95akMsRUFBYSxHQUFNLEdBRXhDLEtBQUtwTSxFQUFLRyxhQUNSLE9BQU9oaEQsS0FBS3dwQixNQUFPeWpDLEVBQWEsR0FBTSxHQUV4QyxLQUFLcE0sRUFBS3VDLE1BQ1IsT0FBT3BqRCxLQUFLd3BCLE1BQU15akMsRUFBYSxJQUVqQyxLQUFLcE0sRUFBS3FCLEtBQ1YsUUFDRSxPQUFPbGlELEtBQUt3cEIsTUFBTXlqQyxFQUFhLEtBWXJDNTNELEVBQVEyeUQsc0JBQXdCLFNBQWdDNzFELEVBQU1vd0QsR0FDcEUsSUFBSW9KLEVBRUF1QixFQUFNL0ssRUFBUTdvRCxLQUFLaXBELEVBQXNCSixFQUFRbjFDLEdBRXJELEdBQUkzUixFQUFRbEosR0FBTyxDQUNqQixHQUFJQSxFQUFLeEQsT0FBUyxFQUNoQixPQXpGTixTQUFxQ2c1RCxFQUFVcEYsR0FDN0MsSUFBSyxJQUFJNEssRUFBaUIsRUFBR0EsR0FBa0IsR0FBSUEsSUFFakQsR0FEYU4sRUFBMEJsRixFQUFVd0YsSUFDbkM5M0QsRUFBUTIzRCxZQUFZRyxFQUFnQjVLLEVBQXNCMUIsRUFBS2dGLE9BQzNFLE9BQU9zSCxFQXFGQUMsQ0FBMkJqN0QsRUFBTSs2RCxHQUcxQyxHQUFvQixJQUFoQi82RCxFQUFLeEQsT0FDUCxPQUFPLEVBR1RnOUQsRUFBTXg1RCxFQUFLLFFBRVh3NUQsRUFBTXg1RCxFQUdSLE9BL0hGLFNBQXNDd3dCLEVBQU1oMEIsRUFBUTR6RCxHQUNsRCxJQUFLLElBQUk0SyxFQUFpQixFQUFHQSxHQUFrQixHQUFJQSxJQUNqRCxHQUFJeCtELEdBQVUwRyxFQUFRMjNELFlBQVlHLEVBQWdCNUssRUFBc0I1L0IsR0FDdEUsT0FBT3dxQyxFQTRISkUsQ0FBNEIxQixFQUFJaHBDLEtBQU1ncEMsRUFBSXpLLFlBQWFnTSxJQWFoRTczRCxFQUFRMHRELGVBQWlCLFNBQXlCajJELEdBQ2hELElBQUsyNEQsRUFBYWhELFFBQVEzMUQsSUFBWUEsRUFBVSxFQUM5QyxNQUFNLElBQUkrRSxNQUFNLDJCQUtsQixJQUZBLElBQUlrWCxFQUFJamMsR0FBVyxHQUVaODFELEVBQU1FLFlBQVkvNUMsR0FBSzRqRCxHQUFXLEdBQ3ZDNWpELEdBdkpNLE1BdUpRNjVDLEVBQU1FLFlBQVkvNUMsR0FBSzRqRCxFQUd2QyxPQUFRNy9ELEdBQVcsR0FBTWljLEksZUNsSzNCLElBQUk2NUMsRUFBUSxFQUFRLE9Bb0JwQnZ0RCxFQUFRZ1MsT0FBUyxTQUFpQmltRCxFQUFRek4sRUFBUXRuQixHQUNoRCxJQUFJM0ksRUFBTzJJLEVBQ1BnMUIsRUFBVzFOLE9BRUssSUFBVGp3QixHQUEwQml3QixHQUFXQSxFQUFPRyxhQUNyRHB3QixFQUFPaXdCLEVBQ1BBLE9BQVN2dkQsR0FHTnV2RCxJQUNIME4sRUFsQkosV0FDRSxJQUNFLE9BQU90OUQsU0FBUytOLGNBQWMsVUFDOUIsTUFBTzZDLEdBQ1AsTUFBTSxJQUFJaFAsTUFBTSx5Q0FjTDI3RCxJQUdiNTlCLEVBQU9nekIsRUFBTTZLLFdBQVc3OUIsR0FDeEIsSUFBSTlnQixFQUFPOHpDLEVBQU04SyxjQUFjSixFQUFPaEUsUUFBUXg2QyxLQUFNOGdCLEdBRWhEeEssRUFBTW1vQyxFQUFTdk4sV0FBVyxNQUMxQjJOLEVBQVF2b0MsRUFBSXdvQyxnQkFBZ0I5K0MsRUFBTUEsR0FNdEMsT0FMQTh6QyxFQUFNaUwsY0FBY0YsRUFBTXg3RCxLQUFNbTdELEVBQVExOUIsR0FwQzFDLFNBQXNCeEssRUFBS3k2QixFQUFRL3dDLEdBQ2pDc1csRUFBSTBvQyxVQUFVLEVBQUcsRUFBR2pPLEVBQU96b0MsTUFBT3lvQyxFQUFPa08sUUFFcENsTyxFQUFPcmhELFFBQU9xaEQsRUFBT3JoRCxNQUFRLElBQ2xDcWhELEVBQU9rTyxPQUFTai9DLEVBQ2hCK3dDLEVBQU96b0MsTUFBUXRJLEVBQ2Yrd0MsRUFBT3JoRCxNQUFNdXZELE9BQVNqL0MsRUFBTyxLQUM3Qit3QyxFQUFPcmhELE1BQU00WSxNQUFRdEksRUFBTyxLQStCNUJrL0MsQ0FBWTVvQyxFQUFLbW9DLEVBQVV6K0MsR0FDM0JzVyxFQUFJNm9DLGFBQWFOLEVBQU8sRUFBRyxHQUVwQkosR0FHVGw0RCxFQUFROHFELGdCQUFrQixTQUEwQm1OLEVBQVF6TixFQUFRdG5CLEdBQ2xFLElBQUkzSSxFQUFPMkksT0FFUyxJQUFUM0ksR0FBMEJpd0IsR0FBV0EsRUFBT0csYUFDckRwd0IsRUFBT2l3QixFQUNQQSxPQUFTdnZELEdBR05zL0IsSUFBTUEsRUFBTyxJQUVsQixJQUFJMjlCLEVBQVdsNEQsRUFBUWdTLE9BQU9pbUQsRUFBUXpOLEVBQVFqd0IsR0FFMUMzaUMsRUFBTzJpQyxFQUFLM2lDLE1BQVEsWUFDcEJpaEUsRUFBZXQrQixFQUFLcytCLGNBQWdCLEdBRXhDLE9BQU9YLEVBQVNyTixVQUFVanpELEVBQU1paEUsRUFBYUMsVyxnQkM3RC9DLElBQUl2TCxFQUFRLEVBQVEsT0FFcEIsU0FBU3dMLEVBQWdCMzVELEVBQU80NUQsR0FDOUIsSUFBSUMsRUFBUTc1RCxFQUFNdEYsRUFBSSxJQUNsQjBLLEVBQU13MEQsRUFBUyxLQUFPNTVELEVBQU13RSxJQUFNLElBRXRDLE9BQU9xMUQsRUFBUSxFQUNYejBELEVBQU0sSUFBTXcwRCxFQUFTLGFBQWVDLEVBQU1DLFFBQVEsR0FBRzcvRCxNQUFNLEdBQUssSUFDaEVtTCxFQUdOLFNBQVMyMEQsRUFBUUMsRUFBSzkwRCxFQUFHbVAsR0FDdkIsSUFBSWpQLEVBQU00MEQsRUFBTTkwRCxFQUdoQixZQUZpQixJQUFObVAsSUFBbUJqUCxHQUFPLElBQU1pUCxHQUVwQ2pQLEVBdUNUeEUsRUFBUWdTLE9BQVMsU0FBaUJpbUQsRUFBUS8wQixFQUFTN3hCLEdBQ2pELElBQUlrcEIsRUFBT2d6QixFQUFNNkssV0FBV2wxQixHQUN4QnpwQixFQUFPdytDLEVBQU9oRSxRQUFReDZDLEtBQ3RCM2MsRUFBT203RCxFQUFPaEUsUUFBUW4zRCxLQUN0QnU4RCxFQUFhNS9DLEVBQXFCLEVBQWQ4Z0IsRUFBS251QixPQUV6Qmt0RCxFQUFNLytCLEVBQUtuN0IsTUFBTW02RCxNQUFNei9ELEVBRXZCLFNBQVdpL0QsRUFBZXgrQixFQUFLbjdCLE1BQU1tNkQsTUFBTyxRQUM1QyxZQUFjRixFQUFhLElBQU1BLEVBQWEsU0FGOUMsR0FJQTcwQixFQUNGLFNBQVd1MEIsRUFBZXgrQixFQUFLbjdCLE1BQU1xMUQsS0FBTSxVQUMzQyxPQWpESixTQUFtQjMzRCxFQUFNMmMsRUFBTXJOLEdBTTdCLElBTEEsSUFBSW80QixFQUFPLEdBQ1BnMUIsRUFBUyxFQUNUQyxHQUFTLEVBQ1RDLEVBQWEsRUFFUmxnRSxFQUFJLEVBQUdBLEVBQUlzRCxFQUFLeEQsT0FBUUUsSUFBSyxDQUNwQyxJQUFJaXpELEVBQU05aEQsS0FBS3dwQixNQUFNMzZCLEVBQUlpZ0IsR0FDckIreUMsRUFBTTdoRCxLQUFLd3BCLE1BQU0zNkIsRUFBSWlnQixHQUVwQmd6QyxHQUFRZ04sSUFBUUEsR0FBUyxHQUUxQjM4RCxFQUFLdEQsSUFDUGtnRSxJQUVNbGdFLEVBQUksR0FBS2l6RCxFQUFNLEdBQUszdkQsRUFBS3RELEVBQUksS0FDakNnckMsR0FBUWkxQixFQUNKTixFQUFPLElBQUsxTSxFQUFNcmdELEVBQVEsR0FBTW9nRCxFQUFNcGdELEdBQ3RDK3NELEVBQU8sSUFBS0ssRUFBUSxHQUV4QkEsRUFBUyxFQUNUQyxHQUFTLEdBR0xoTixFQUFNLEVBQUloekMsR0FBUTNjLEVBQUt0RCxFQUFJLEtBQy9CZ3JDLEdBQVEyMEIsRUFBTyxJQUFLTyxHQUNwQkEsRUFBYSxJQUdmRixJQUlKLE9BQU9oMUIsRUFnQkltMUIsQ0FBUzc4RCxFQUFNMmMsRUFBTThnQixFQUFLbnVCLFFBQVUsTUFFM0N3dEQsRUFBVSxnQkFBdUJQLEVBQWEsSUFBTUEsRUFBYSxJQUlqRVEsRUFBUyw0Q0FGQXQvQixFQUFLeFksTUFBYSxVQUFZd1ksRUFBS3hZLE1BQVEsYUFBZXdZLEVBQUt4WSxNQUFRLEtBQTFELElBRXdDNjNDLEVBQVUsaUNBQW1DTixFQUFLOTBCLEVBQU8sV0FNM0gsTUFKa0IsbUJBQVBuekIsR0FDVEEsRUFBRyxLQUFNd29ELEdBR0pBLEksY0MvRVQsU0FBU0MsRUFBVWwyRCxHQUtqQixHQUptQixpQkFBUkEsSUFDVEEsRUFBTUEsRUFBSUMsWUFHTyxpQkFBUkQsRUFDVCxNQUFNLElBQUlwSCxNQUFNLHlDQUdsQixJQUFJdTlELEVBQVVuMkQsRUFBSXZLLFFBQVFnTSxRQUFRLElBQUssSUFBSWpNLE1BQU0sSUFDakQsR0FBSTJnRSxFQUFRemdFLE9BQVMsR0FBd0IsSUFBbkJ5Z0UsRUFBUXpnRSxRQUFnQnlnRSxFQUFRemdFLE9BQVMsRUFDakUsTUFBTSxJQUFJa0QsTUFBTSxzQkFBd0JvSCxHQUluQixJQUFuQm0yRCxFQUFRemdFLFFBQW1DLElBQW5CeWdFLEVBQVF6Z0UsU0FDbEN5Z0UsRUFBVW5nRSxNQUFNNmIsVUFBVXZQLE9BQU84ekQsTUFBTSxHQUFJRCxFQUFRcjdELEtBQUksU0FBVStULEdBQy9ELE1BQU8sQ0FBQ0EsRUFBR0EsUUFLUSxJQUFuQnNuRCxFQUFRemdFLFFBQWN5Z0UsRUFBUTEvRCxLQUFLLElBQUssS0FFNUMsSUFBSTQvRCxFQUFXMTFELFNBQVN3MUQsRUFBUXgvRCxLQUFLLElBQUssSUFFMUMsTUFBTyxDQUNMWixFQUFJc2dFLEdBQVksR0FBTSxJQUN0QjF6RCxFQUFJMHpELEdBQVksR0FBTSxJQUN0QjFsRCxFQUFJMGxELEdBQVksRUFBSyxJQUNyQm5nRSxFQUFjLElBQVhtZ0UsRUFDSHIyRCxJQUFLLElBQU1tMkQsRUFBUTFnRSxNQUFNLEVBQUcsR0FBR2tCLEtBQUssS0FJeEN5RixFQUFRbzRELFdBQWEsU0FBcUJsMUIsR0FDbkNBLElBQVNBLEVBQVUsSUFDbkJBLEVBQVE5akMsUUFBTzhqQyxFQUFROWpDLE1BQVEsSUFFcEMsSUFBSWdOLE9BQW1DLElBQW5CODJCLEVBQVE5MkIsUUFDUCxPQUFuQjgyQixFQUFROTJCLFFBQ1I4MkIsRUFBUTkyQixPQUFTLEVBQUksRUFBSTgyQixFQUFROTJCLE9BRS9CMlYsRUFBUW1oQixFQUFRbmhCLE9BQVNtaEIsRUFBUW5oQixPQUFTLEdBQUttaEIsRUFBUW5oQixXQUFROW1CLEVBQy9EaS9ELEVBQVFoM0IsRUFBUWczQixPQUFTLEVBRTdCLE1BQU8sQ0FDTG40QyxNQUFPQSxFQUNQbTRDLE1BQU9uNEMsRUFBUSxFQUFJbTRDLEVBQ25COXRELE9BQVFBLEVBQ1JoTixNQUFPLENBQ0xxMUQsS0FBTXFGLEVBQVM1MkIsRUFBUTlqQyxNQUFNcTFELE1BQVEsYUFDckM4RSxNQUFPTyxFQUFTNTJCLEVBQVE5akMsTUFBTW02RCxPQUFTLGNBRXpDM2hFLEtBQU1zckMsRUFBUXRyQyxLQUNkaWhFLGFBQWMzMUIsRUFBUTIxQixjQUFnQixLQUkxQzc0RCxFQUFRbTZELFNBQVcsU0FBbUJDLEVBQVE3L0IsR0FDNUMsT0FBT0EsRUFBS3hZLE9BQVN3WSxFQUFLeFksT0FBU3E0QyxFQUF1QixFQUFkNy9CLEVBQUtudUIsT0FDN0NtdUIsRUFBS3hZLE9BQVNxNEMsRUFBdUIsRUFBZDcvQixFQUFLbnVCLFFBQzVCbXVCLEVBQUsyL0IsT0FHWGw2RCxFQUFRcTRELGNBQWdCLFNBQXdCK0IsRUFBUTcvQixHQUN0RCxJQUFJMi9CLEVBQVFsNkQsRUFBUW02RCxTQUFTQyxFQUFRNy9CLEdBQ3JDLE9BQU81dkIsS0FBS3dwQixPQUFPaW1DLEVBQXVCLEVBQWQ3L0IsRUFBS251QixRQUFjOHRELElBR2pEbDZELEVBQVF3NEQsY0FBZ0IsU0FBd0I2QixFQUFTQyxFQUFJLy9CLEdBUTNELElBUEEsSUFBSTlnQixFQUFPNmdELEVBQUdyRyxRQUFReDZDLEtBQ2xCM2MsRUFBT3c5RCxFQUFHckcsUUFBUW4zRCxLQUNsQm85RCxFQUFRbDZELEVBQVFtNkQsU0FBUzFnRCxFQUFNOGdCLEdBQy9CZ2dDLEVBQWE1dkQsS0FBS3dwQixPQUFPMWEsRUFBcUIsRUFBZDhnQixFQUFLbnVCLFFBQWM4dEQsR0FDbkRNLEVBQWVqZ0MsRUFBS251QixPQUFTOHRELEVBQzdCTyxFQUFVLENBQUNsZ0MsRUFBS243QixNQUFNbTZELE1BQU9oL0IsRUFBS243QixNQUFNcTFELE1BRW5DajdELEVBQUksRUFBR0EsRUFBSStnRSxFQUFZL2dFLElBQzlCLElBQUssSUFBSU8sRUFBSSxFQUFHQSxFQUFJd2dFLEVBQVl4Z0UsSUFBSyxDQUNuQyxJQUFJMmdFLEVBQWdDLEdBQXRCbGhFLEVBQUkrZ0UsRUFBYXhnRSxHQUMzQjRnRSxFQUFVcGdDLEVBQUtuN0IsTUFBTW02RCxNQUVyQi8vRCxHQUFLZ2hFLEdBQWdCemdFLEdBQUt5Z0UsR0FDNUJoaEUsRUFBSStnRSxFQUFhQyxHQUFnQnpnRSxFQUFJd2dFLEVBQWFDLElBR2xERyxFQUFVRixFQUFRMzlELEVBRlA2TixLQUFLd3BCLE9BQU8zNkIsRUFBSWdoRSxHQUFnQk4sR0FFYnpnRCxFQURuQjlPLEtBQUt3cEIsT0FBT3A2QixFQUFJeWdFLEdBQWdCTixJQUNFLEVBQUksSUFHbkRHLEVBQVFLLEtBQVlDLEVBQVFoaEUsRUFDNUIwZ0UsRUFBUUssS0FBWUMsRUFBUXAwRCxFQUM1Qjh6RCxFQUFRSyxLQUFZQyxFQUFRcG1ELEVBQzVCOGxELEVBQVFLLEdBQVVDLEVBQVE3Z0UsSyw2QkNwRmhDLElBQUlrTSxFQUFVLEVBQVEsT0FhdEI5QixFQUFPMDJELG9CQVhQLFdBRUUsSUFDRSxJQUFJNzJELEVBQU0sSUFBSUwsV0FBVyxHQUV6QixPQURBSyxFQUFJNFUsVUFBWSxDQUFDQSxVQUFXalYsV0FBVytSLFVBQVdvbEQsSUFBSyxXQUFjLE9BQU8sS0FDdkQsS0FBZDkyRCxFQUFJODJELE1BQ1gsTUFBT3J2RCxHQUNQLE9BQU8sR0FJa0JzdkQsR0FFN0IsSUFBSUMsRUFBZTcyRCxFQUFPMDJELG9CQUNwQixXQUNBLFdBRU4sU0FBUzEyRCxFQUFRa0MsRUFBS3NsQyxFQUFRcHlDLEdBQzVCLE9BQUs0SyxFQUFPMDJELHFCQUF5QmpqRSxnQkFBZ0J1TSxFQUlsQyxpQkFBUmtDLEVBQ0Y0cEMsRUFBWXI0QyxLQUFNeU8sR0FtUTdCLFNBQWU0MEQsRUFBTXorRCxFQUFPbXZDLEVBQVFweUMsR0FDbEMsR0FBcUIsaUJBQVZpRCxFQUNULE1BQU0sSUFBSW8zQyxVQUFVLHlDQUd0QixNQUEyQixvQkFBaEJzbkIsYUFBK0IxK0QsYUFBaUIwK0QsWUE5SzdELFNBQTBCRCxFQUFNcG1DLEVBQU9zbUMsRUFBWTVoRSxHQUNqRCxHQUFJNGhFLEVBQWEsR0FBS3RtQyxFQUFNL3ZCLFdBQWFxMkQsRUFDdkMsTUFBTSxJQUFJM25CLFdBQVcsNkJBR3ZCLEdBQUkzZSxFQUFNL3ZCLFdBQWFxMkQsR0FBYzVoRSxHQUFVLEdBQzdDLE1BQU0sSUFBSWk2QyxXQUFXLDZCQUd2QixJQUFJOXZDLEVBaUJKLE9BZkVBLE9BRGlCeEksSUFBZmlnRSxRQUF1Q2pnRSxJQUFYM0IsRUFDeEIsSUFBSW9LLFdBQVdreEIsUUFDRDM1QixJQUFYM0IsRUFDSCxJQUFJb0ssV0FBV2t4QixFQUFPc21DLEdBRXRCLElBQUl4M0QsV0FBV2t4QixFQUFPc21DLEVBQVk1aEUsR0FHdEM0SyxFQUFPMDJELG9CQUVUbjNELEVBQUlrVixVQUFZelUsRUFBT3VSLFVBR3ZCaFMsRUFBTTAzRCxFQUFjSCxFQUFNdjNELEdBR3JCQSxFQXFKRTIzRCxDQUFnQkosRUFBTXorRCxFQUFPbXZDLEVBQVFweUMsR0FHekIsaUJBQVZpRCxFQTNNYixTQUFxQnkrRCxFQUFNbHpCLEdBQ3pCLElBQUl4dUMsRUFBOEIsRUFBckJ1TCxFQUFXaWpDLEdBQ3BCcmtDLEVBQU00M0QsRUFBYUwsRUFBTTFoRSxHQUV6QmdpRSxFQUFTNzNELEVBQUlxb0QsTUFBTWhrQixHQVN2QixPQVBJd3pCLElBQVdoaUUsSUFJYm1LLEVBQU1BLEVBQUlwSyxNQUFNLEVBQUdpaUUsSUFHZDczRCxFQStMRTZwRCxDQUFXME4sRUFBTXorRCxHQXRKNUIsU0FBcUJ5K0QsRUFBTXppQixHQUN6QixHQUFJcjBDLEVBQU85QyxTQUFTbTNDLEdBQU0sQ0FDeEIsSUFBSXA2QixFQUE0QixFQUF0Qi9HLEVBQVFtaEMsRUFBSWovQyxRQUNsQm1LLEVBQU00M0QsRUFBYUwsRUFBTTc4QyxHQUU3QixPQUFtQixJQUFmMWEsRUFBSW5LLFFBSVJpL0MsRUFBSXZ3QyxLQUFLdkUsRUFBSyxFQUFHLEVBQUcwYSxHQUhYMWEsRUFPWCxHQUFJODBDLEVBQUssQ0FDUCxHQUE0QixvQkFBaEIwaUIsYUFDUjFpQixFQUFJNWhCLGtCQUFrQnNrQyxhQUFnQixXQUFZMWlCLEVBQ3BELE1BQTBCLGlCQUFmQSxFQUFJai9DLFNBdkdMcUwsRUF1R2tDNHpDLEVBQUlqL0MsU0F0R3JDcUwsRUF1R0YwMkQsRUFBYUwsRUFBTSxHQUVyQkcsRUFBY0gsRUFBTXppQixHQUc3QixHQUFpQixXQUFiQSxFQUFJM2dELE1BQXFCZ0MsTUFBTW9NLFFBQVF1eUMsRUFBSXo3QyxNQUM3QyxPQUFPcStELEVBQWNILEVBQU16aUIsRUFBSXo3QyxNQTlHckMsSUFBZ0I2SCxFQWtIZCxNQUFNLElBQUlndkMsVUFBVSxzRkE4SGI0bkIsQ0FBV1AsRUFBTXorRCxHQTdRakIwSCxDQUFLdE0sS0FBTXlPLEVBQUtzbEMsRUFBUXB5QyxHQVB0QixJQUFJNEssRUFBT2tDLEVBQUtzbEMsRUFBUXB5QyxHQTBCbkMsU0FBUzhkLEVBQVM5ZCxHQUdoQixHQUFJQSxHQUFVeWhFLEVBQ1osTUFBTSxJQUFJeG5CLFdBQVcsMERBQ2F3bkIsRUFBYWwzRCxTQUFTLElBQU0sVUFFaEUsT0FBZ0IsRUFBVHZLLEVBT1QsU0FBUytoRSxFQUFjTCxFQUFNMWhFLEdBQzNCLElBQUltSyxFQWFKLE9BWklTLEVBQU8wMkQscUJBQ1RuM0QsRUFBTSxJQUFJQyxXQUFXcEssSUFDakJxZixVQUFZelUsRUFBT3VSLFdBSVgsUUFEWmhTLEVBQU11M0QsS0FFSnYzRCxFQUFNLElBQUlTLEVBQU81SyxJQUVuQm1LLEVBQUluSyxPQUFTQSxHQUdSbUssRUFHVCxTQUFTdXNDLEVBQWFnckIsRUFBTXZoRCxHQUMxQixJQUFJaFcsRUFBTTQzRCxFQUFhTCxFQUFNdmhELEVBQU8sRUFBSSxFQUFvQixFQUFoQnJDLEVBQVFxQyxJQUVwRCxJQUFLdlYsRUFBTzAyRCxvQkFDVixJQUFLLElBQUlwaEUsRUFBSSxFQUFHQSxFQUFJaWdCLElBQVFqZ0IsRUFDMUJpSyxFQUFJakssR0FBSyxFQUliLE9BQU9pSyxFQW1CVCxTQUFTMDNELEVBQWVILEVBQU1wbUMsR0FHNUIsSUFGQSxJQUFJdDdCLEVBQVNzN0IsRUFBTXQ3QixPQUFTLEVBQUksRUFBNEIsRUFBeEI4ZCxFQUFRd2QsRUFBTXQ3QixRQUM5Q21LLEVBQU00M0QsRUFBYUwsRUFBTTFoRSxHQUNwQkUsRUFBSSxFQUFHQSxFQUFJRixFQUFRRSxHQUFLLEVBQy9CaUssRUFBSWpLLEdBQWdCLElBQVhvN0IsRUFBTXA3QixHQUVqQixPQUFPaUssRUE4RFQsU0FBUyszRCxFQUFhMXpCLEVBQVEyekIsR0FFNUIsSUFBSUMsRUFESkQsRUFBUUEsR0FBU3ZMLElBTWpCLElBSkEsSUFBSTUyRCxFQUFTd3VDLEVBQU94dUMsT0FDaEJxaUUsRUFBZ0IsS0FDaEIzMkQsRUFBUSxHQUVIeEwsRUFBSSxFQUFHQSxFQUFJRixJQUFVRSxFQUFHLENBSS9CLElBSEFraUUsRUFBWTV6QixFQUFPenBCLFdBQVc3a0IsSUFHZCxPQUFVa2lFLEVBQVksTUFBUSxDQUU1QyxJQUFLQyxFQUFlLENBRWxCLEdBQUlELEVBQVksTUFBUSxFQUVqQkQsR0FBUyxJQUFNLEdBQUd6MkQsRUFBTTNLLEtBQUssSUFBTSxJQUFNLEtBQzlDLFNBQ0ssR0FBSWIsRUFBSSxJQUFNRixFQUFRLEVBRXRCbWlFLEdBQVMsSUFBTSxHQUFHejJELEVBQU0zSyxLQUFLLElBQU0sSUFBTSxLQUM5QyxTQUlGc2hFLEVBQWdCRCxFQUVoQixTQUlGLEdBQUlBLEVBQVksTUFBUSxFQUNqQkQsR0FBUyxJQUFNLEdBQUd6MkQsRUFBTTNLLEtBQUssSUFBTSxJQUFNLEtBQzlDc2hFLEVBQWdCRCxFQUNoQixTQUlGQSxFQUFrRSxPQUFyREMsRUFBZ0IsT0FBVSxHQUFLRCxFQUFZLFlBQy9DQyxJQUVKRixHQUFTLElBQU0sR0FBR3oyRCxFQUFNM0ssS0FBSyxJQUFNLElBQU0sS0FNaEQsR0FIQXNoRSxFQUFnQixLQUdaRCxFQUFZLElBQU0sQ0FDcEIsSUFBS0QsR0FBUyxHQUFLLEVBQUcsTUFDdEJ6MkQsRUFBTTNLLEtBQUtxaEUsUUFDTixHQUFJQSxFQUFZLEtBQU8sQ0FDNUIsSUFBS0QsR0FBUyxHQUFLLEVBQUcsTUFDdEJ6MkQsRUFBTTNLLEtBQ0pxaEUsR0FBYSxFQUFNLElBQ1AsR0FBWkEsRUFBbUIsVUFFaEIsR0FBSUEsRUFBWSxNQUFTLENBQzlCLElBQUtELEdBQVMsR0FBSyxFQUFHLE1BQ3RCejJELEVBQU0zSyxLQUNKcWhFLEdBQWEsR0FBTSxJQUNuQkEsR0FBYSxFQUFNLEdBQU8sSUFDZCxHQUFaQSxFQUFtQixTQUVoQixNQUFJQSxFQUFZLFNBU3JCLE1BQU0sSUFBSWwvRCxNQUFNLHNCQVJoQixJQUFLaS9ELEdBQVMsR0FBSyxFQUFHLE1BQ3RCejJELEVBQU0zSyxLQUNKcWhFLEdBQWEsR0FBTyxJQUNwQkEsR0FBYSxHQUFNLEdBQU8sSUFDMUJBLEdBQWEsRUFBTSxHQUFPLElBQ2QsR0FBWkEsRUFBbUIsTUFPekIsT0FBTzEyRCxFQUdULFNBQVNILEVBQVlpakMsR0FDbkIsT0FBSTVqQyxFQUFPOUMsU0FBUzBtQyxHQUNYQSxFQUFPeHVDLE9BRVcsb0JBQWhCMmhFLGFBQTZELG1CQUF2QkEsWUFBWVcsU0FDeERYLFlBQVlXLE9BQU85ekIsSUFBV0EsYUFBa0JtekIsYUFDNUNuekIsRUFBT2pqQyxZQUVNLGlCQUFYaWpDLElBQ1RBLEVBQVMsR0FBS0EsR0FJSixJQURGQSxFQUFPeHVDLE9BQ0ssRUFFZmtpRSxFQUFZMXpCLEdBQVF4dUMsUUE5T3pCNEssRUFBTzAyRCxzQkFDVDEyRCxFQUFPdVIsVUFBVWtELFVBQVlqVixXQUFXK1IsVUFDeEN2UixFQUFPeVUsVUFBWWpWLFdBR0csb0JBQVh3RSxRQUEwQkEsT0FBTzJ6RCxTQUN4QzMzRCxFQUFPZ0UsT0FBTzJ6RCxXQUFhMzNELEdBQzdCaEcsT0FBTzZCLGVBQWVtRSxFQUFRZ0UsT0FBTzJ6RCxRQUFTLENBQzVDdC9ELE1BQU8sS0FDUDJkLGNBQWMsRUFDZDNTLFlBQVksRUFDWnUwRCxVQUFVLEtBa1FoQjUzRCxFQUFPdVIsVUFBVXEyQyxNQUFRLFNBQWdCaGtCLEVBQVE0RCxFQUFRcHlDLFFBRXhDMkIsSUFBWHl3QyxRQUlrQnp3QyxJQUFYM0IsR0FBMEMsaUJBQVhveUMsR0FIeENweUMsRUFBUzNCLEtBQUsyQixPQUNkb3lDLEVBQVMsR0FNQXF3QixTQUFTcndCLEtBQ2xCQSxHQUFrQixFQUNkcXdCLFNBQVN6aUUsR0FDWEEsR0FBa0IsRUFFbEJBLE9BQVMyQixHQUliLElBQUkrZ0UsRUFBWXJrRSxLQUFLMkIsT0FBU295QyxFQUc5QixTQUZlendDLElBQVgzQixHQUF3QkEsRUFBUzBpRSxLQUFXMWlFLEVBQVMwaUUsR0FFcERsMEIsRUFBT3h1QyxPQUFTLElBQU1BLEVBQVMsR0FBS295QyxFQUFTLElBQU9BLEVBQVMvekMsS0FBSzJCLE9BQ3JFLE1BQU0sSUFBSWk2QyxXQUFXLDBDQUd2QixPQTlDRixTQUFvQjl2QyxFQUFLcWtDLEVBQVE0RCxFQUFRcHlDLEdBQ3ZDLE9BVEYsU0FBcUJ1UCxFQUFLb3pELEVBQUt2d0IsRUFBUXB5QyxHQUNyQyxJQUFLLElBQUlFLEVBQUksRUFBR0EsRUFBSUYsS0FDYkUsRUFBSWt5QyxHQUFVdXdCLEVBQUkzaUUsUUFBWUUsR0FBS3FQLEVBQUl2UCxVQURoQkUsRUFFNUJ5aUUsRUFBSXppRSxFQUFJa3lDLEdBQVU3aUMsRUFBSXJQLEdBRXhCLE9BQU9BLEVBSUEwaUUsQ0FBV1YsRUFBWTF6QixFQUFRcmtDLEVBQUluSyxPQUFTb3lDLEdBQVNqb0MsRUFBS2lvQyxFQUFRcHlDLEdBNkNsRTZpRSxDQUFVeGtFLEtBQU1td0MsRUFBUTRELEVBQVFweUMsSUFHekM0SyxFQUFPdVIsVUFBVXBjLE1BQVEsU0FBZ0I0a0IsRUFBT0MsR0FDOUMsSUFvQklrK0MsRUFwQkFqK0MsRUFBTXhtQixLQUFLMkIsT0FxQmYsSUFwQkEya0IsSUFBVUEsR0FHRSxHQUNWQSxHQUFTRSxHQUNHLElBQUdGLEVBQVEsR0FDZEEsRUFBUUUsSUFDakJGLEVBQVFFLElBTlZELE9BQWNqakIsSUFBUmlqQixFQUFvQkMsSUFBUUQsR0FTeEIsR0FDUkEsR0FBT0MsR0FDRyxJQUFHRCxFQUFNLEdBQ1ZBLEVBQU1DLElBQ2ZELEVBQU1DLEdBR0pELEVBQU1ELElBQU9DLEVBQU1ELEdBR25CL1osRUFBTzAyRCxxQkFDVHdCLEVBQVN6a0UsS0FBSzBrRSxTQUFTcCtDLEVBQU9DLElBRXZCdkYsVUFBWXpVLEVBQU91UixjQUNyQixDQUNMLElBQUk2bUQsRUFBV3ArQyxFQUFNRCxFQUNyQm0rQyxFQUFTLElBQUlsNEQsRUFBT280RCxPQUFVcmhFLEdBQzlCLElBQUssSUFBSXpCLEVBQUksRUFBR0EsRUFBSThpRSxJQUFZOWlFLEVBQzlCNGlFLEVBQU81aUUsR0FBSzdCLEtBQUs2QixFQUFJeWtCLEdBSXpCLE9BQU9tK0MsR0FHVGw0RCxFQUFPdVIsVUFBVXpOLEtBQU8sU0FBZXFCLEVBQVFrekQsRUFBYXQrQyxFQUFPQyxHQVFqRSxHQVBLRCxJQUFPQSxFQUFRLEdBQ2ZDLEdBQWUsSUFBUkEsSUFBV0EsRUFBTXZtQixLQUFLMkIsUUFDOUJpakUsR0FBZWx6RCxFQUFPL1AsU0FBUWlqRSxFQUFjbHpELEVBQU8vUCxRQUNsRGlqRSxJQUFhQSxFQUFjLEdBQzVCcitDLEVBQU0sR0FBS0EsRUFBTUQsSUFBT0MsRUFBTUQsR0FHOUJDLElBQVFELEVBQU8sT0FBTyxFQUMxQixHQUFzQixJQUFsQjVVLEVBQU8vUCxRQUFnQyxJQUFoQjNCLEtBQUsyQixPQUFjLE9BQU8sRUFHckQsR0FBSWlqRSxFQUFjLEVBQ2hCLE1BQU0sSUFBSWhwQixXQUFXLDZCQUV2QixHQUFJdDFCLEVBQVEsR0FBS0EsR0FBU3RtQixLQUFLMkIsT0FBUSxNQUFNLElBQUlpNkMsV0FBVyw2QkFDNUQsR0FBSXIxQixFQUFNLEVBQUcsTUFBTSxJQUFJcTFCLFdBQVcsMkJBRzlCcjFCLEVBQU12bUIsS0FBSzJCLFNBQVE0a0IsRUFBTXZtQixLQUFLMkIsUUFDOUIrUCxFQUFPL1AsT0FBU2lqRSxFQUFjcitDLEVBQU1ELElBQ3RDQyxFQUFNN1UsRUFBTy9QLE9BQVNpakUsRUFBY3QrQyxHQUd0QyxJQUNJemtCLEVBREEya0IsRUFBTUQsRUFBTUQsRUFHaEIsR0FBSXRtQixPQUFTMFIsR0FBVTRVLEVBQVFzK0MsR0FBZUEsRUFBY3IrQyxFQUUxRCxJQUFLMWtCLEVBQUkya0IsRUFBTSxFQUFHM2tCLEdBQUssSUFBS0EsRUFDMUI2UCxFQUFPN1AsRUFBSStpRSxHQUFlNWtFLEtBQUs2QixFQUFJeWtCLFFBRWhDLEdBQUlFLEVBQU0sTUFBU2phLEVBQU8wMkQsb0JBRS9CLElBQUtwaEUsRUFBSSxFQUFHQSxFQUFJMmtCLElBQU8za0IsRUFDckI2UCxFQUFPN1AsRUFBSStpRSxHQUFlNWtFLEtBQUs2QixFQUFJeWtCLFFBR3JDdmEsV0FBVytSLFVBQVVrRSxJQUFJaEQsS0FDdkJ0TixFQUNBMVIsS0FBSzBrRSxTQUFTcCtDLEVBQU9BLEVBQVFFLEdBQzdCbytDLEdBSUosT0FBT3ArQyxHQUdUamEsRUFBT3VSLFVBQVV4SixLQUFPLFNBQWV0SCxFQUFLc1osRUFBT0MsR0FFakQsR0FBbUIsaUJBQVJ2WixHQU9ULEdBTnFCLGlCQUFWc1osR0FDVEEsRUFBUSxFQUNSQyxFQUFNdm1CLEtBQUsyQixRQUNhLGlCQUFSNGtCLElBQ2hCQSxFQUFNdm1CLEtBQUsyQixRQUVNLElBQWZxTCxFQUFJckwsT0FBYyxDQUNwQixJQUFJdS9CLEVBQU9sMEIsRUFBSTBaLFdBQVcsR0FDdEJ3YSxFQUFPLE1BQ1RsMEIsRUFBTWswQixRQUdjLGlCQUFSbDBCLElBQ2hCQSxHQUFZLEtBSWQsR0FBSXNaLEVBQVEsR0FBS3RtQixLQUFLMkIsT0FBUzJrQixHQUFTdG1CLEtBQUsyQixPQUFTNGtCLEVBQ3BELE1BQU0sSUFBSXExQixXQUFXLHNCQUd2QixHQUFJcjFCLEdBQU9ELEVBQ1QsT0FBT3RtQixLQVFULElBQUk2QixFQUNKLEdBTkF5a0IsS0FBa0IsRUFDbEJDLE9BQWNqakIsSUFBUmlqQixFQUFvQnZtQixLQUFLMkIsT0FBUzRrQixJQUFRLEVBRTNDdlosSUFBS0EsRUFBTSxHQUdHLGlCQUFSQSxFQUNULElBQUtuTCxFQUFJeWtCLEVBQU96a0IsRUFBSTBrQixJQUFPMWtCLEVBQ3pCN0IsS0FBSzZCLEdBQUttTCxNQUVQLENBQ0wsSUFBSUssRUFBUWQsRUFBTzlDLFNBQVN1RCxHQUN4QkEsRUFDQSxJQUFJVCxFQUFPUyxHQUNYd1osRUFBTW5aLEVBQU0xTCxPQUNoQixJQUFLRSxFQUFJLEVBQUdBLEVBQUkwa0IsRUFBTUQsSUFBU3prQixFQUM3QjdCLEtBQUs2QixFQUFJeWtCLEdBQVNqWixFQUFNeEwsRUFBSTJrQixHQUloQyxPQUFPeG1CLE1BR1R1TSxFQUFPZ0MsT0FBUyxTQUFpQnMyRCxFQUFNbGpFLEdBQ3JDLElBQUswTSxFQUFRdzJELEdBQ1gsTUFBTSxJQUFJN29CLFVBQVUsK0NBR3RCLEdBQW9CLElBQWhCNm9CLEVBQUtsakUsT0FDUCxPQUFPK2hFLEVBQWEsS0FBTSxHQUc1QixJQUFJN2hFLEVBQ0osUUFBZXlCLElBQVgzQixFQUVGLElBREFBLEVBQVMsRUFDSkUsRUFBSSxFQUFHQSxFQUFJZ2pFLEVBQUtsakUsU0FBVUUsRUFDN0JGLEdBQVVrakUsRUFBS2hqRSxHQUFHRixPQUl0QixJQUFJcTlCLEVBQVNxWixFQUFZLEtBQU0xMkMsR0FDM0JneUQsRUFBTSxFQUNWLElBQUs5eEQsRUFBSSxFQUFHQSxFQUFJZ2pFLEVBQUtsakUsU0FBVUUsRUFBRyxDQUNoQyxJQUFJaUssRUFBTSs0RCxFQUFLaGpFLEdBQ2YsSUFBSzBLLEVBQU85QyxTQUFTcUMsR0FDbkIsTUFBTSxJQUFJa3dDLFVBQVUsK0NBRXRCbHdDLEVBQUl1RSxLQUFLMnVCLEVBQVEyMEIsR0FDakJBLEdBQU83bkQsRUFBSW5LLE9BRWIsT0FBT3E5QixHQUdUenlCLEVBQU9XLFdBQWFBLEVBRXBCWCxFQUFPdVIsVUFBVWduRCxXQUFZLEVBQzdCdjRELEVBQU85QyxTQUFXLFNBQW1CbVQsR0FDbkMsUUFBZSxNQUFMQSxJQUFhQSxFQUFFa29ELFlBRzNCcnFELEVBQU9wUyxRQUFRMDBDLE1BQVEsU0FBVWo3QixHQUMvQixJQUFJa2QsRUFBUyxJQUFJenlCLEVBQU91VixHQUV4QixPQURBa2QsRUFBTzFxQixLQUFLLEdBQ0wwcUIsR0FHVHZrQixFQUFPcFMsUUFBUWlFLEtBQU8sU0FBVW5ILEdBQzlCLE9BQU8sSUFBSW9ILEVBQU9wSCxLLGdDQzVmaEI0L0QsRUFBUyxFQUFRLE9BQ2pCQyxFQUFVLEVBQVEsT0FDbEJDLEVBQ2lCLG1CQUFYMTBELFFBQWtELG1CQUFsQkEsT0FBWSxJQUNoREEsT0FBWSxJQUFFLDhCQUNkLEtBRU5sSSxFQUFRLEdBQVNrRSxFQUVqQmxFLEVBQVEsR0FBb0IsR0FFNUIsSUFBSSs2RCxFQUFlLFdBd0RuQixTQUFTTSxFQUFjL2hFLEdBQ3JCLEdBQUlBLEVBQVN5aEUsRUFDWCxNQUFNLElBQUl4bkIsV0FBVyxjQUFnQmo2QyxFQUFTLGtDQUdoRCxJQUFJbUssRUFBTSxJQUFJQyxXQUFXcEssR0FFekIsT0FEQTRFLE9BQU8yK0QsZUFBZXA1RCxFQUFLUyxFQUFPdVIsV0FDM0JoUyxFQWFULFNBQVNTLEVBQVFrQyxFQUFLMDJELEVBQWtCeGpFLEdBRXRDLEdBQW1CLGlCQUFSOE0sRUFBa0IsQ0FDM0IsR0FBZ0MsaUJBQXJCMDJELEVBQ1QsTUFBTSxJQUFJbnBCLFVBQ1Isc0VBR0osT0FBTzNELEVBQVk1cEMsR0FFckIsT0FBT25DLEVBQUttQyxFQUFLMDJELEVBQWtCeGpFLEdBS3JDLFNBQVMySyxFQUFNMUgsRUFBT3VnRSxFQUFrQnhqRSxHQUN0QyxHQUFxQixpQkFBVmlELEVBQ1QsT0F1SEosU0FBcUJ1ckMsRUFBUWkxQixHQUszQixHQUp3QixpQkFBYkEsR0FBc0MsS0FBYkEsSUFDbENBLEVBQVcsU0FHUjc0RCxFQUFPODRELFdBQVdELEdBQ3JCLE1BQU0sSUFBSXBwQixVQUFVLHFCQUF1Qm9wQixHQUc3QyxJQUFJempFLEVBQXdDLEVBQS9CdUwsRUFBV2lqQyxFQUFRaTFCLEdBQzVCdDVELEVBQU00M0QsRUFBYS9oRSxHQUVuQmdpRSxFQUFTNzNELEVBQUlxb0QsTUFBTWhrQixFQUFRaTFCLEdBUy9CLE9BUEl6QixJQUFXaGlFLElBSWJtSyxFQUFNQSxFQUFJcEssTUFBTSxFQUFHaWlFLElBR2Q3M0QsRUE1SUU2cEQsQ0FBVy93RCxFQUFPdWdFLEdBRzNCLEdBQUk3QixZQUFZVyxPQUFPci9ELEdBQ3JCLE9Bb0pKLFNBQXdCMGdFLEdBQ3RCLEdBQUlDLEVBQVdELEVBQVd2NUQsWUFBYSxDQUNyQyxJQUFJc0UsRUFBTyxJQUFJdEUsV0FBV3U1RCxHQUMxQixPQUFPN0IsRUFBZ0JwekQsRUFBSzJ1QixPQUFRM3VCLEVBQUtrekQsV0FBWWx6RCxFQUFLbkQsWUFFNUQsT0FBT3MyRCxFQUFjOEIsR0F6SlpFLENBQWM1Z0UsR0FHdkIsR0FBYSxNQUFUQSxFQUNGLE1BQU0sSUFBSW8zQyxVQUNSLHlIQUNpRHAzQyxHQUlyRCxHQUFJMmdFLEVBQVczZ0UsRUFBTzArRCxjQUNqQjErRCxHQUFTMmdFLEVBQVczZ0UsRUFBTW82QixPQUFRc2tDLGFBQ3JDLE9BQU9HLEVBQWdCNytELEVBQU91Z0UsRUFBa0J4akUsR0FHbEQsR0FBaUMsb0JBQXRCOGpFLG9CQUNORixFQUFXM2dFLEVBQU82Z0Usb0JBQ2xCN2dFLEdBQVMyZ0UsRUFBVzNnRSxFQUFNbzZCLE9BQVF5bUMsb0JBQ3JDLE9BQU9oQyxFQUFnQjcrRCxFQUFPdWdFLEVBQWtCeGpFLEdBR2xELEdBQXFCLGlCQUFWaUQsRUFDVCxNQUFNLElBQUlvM0MsVUFDUix5RUFJSixJQUFJMHBCLEVBQVU5Z0UsRUFBTThnRSxTQUFXOWdFLEVBQU04Z0UsVUFDckMsR0FBZSxNQUFYQSxHQUFtQkEsSUFBWTlnRSxFQUNqQyxPQUFPMkgsRUFBT0QsS0FBS281RCxFQUFTUCxFQUFrQnhqRSxHQUdoRCxJQUFJaWIsRUFvSk4sU0FBcUJna0MsR0FDbkIsR0FBSXIwQyxFQUFPOUMsU0FBU20zQyxHQUFNLENBQ3hCLElBQUlwNkIsRUFBNEIsRUFBdEIvRyxFQUFRbWhDLEVBQUlqL0MsUUFDbEJtSyxFQUFNNDNELEVBQWFsOUMsR0FFdkIsT0FBbUIsSUFBZjFhLEVBQUluSyxRQUlSaS9DLEVBQUl2d0MsS0FBS3ZFLEVBQUssRUFBRyxFQUFHMGEsR0FIWDFhLEVBT1gsWUFBbUJ4SSxJQUFmczlDLEVBQUlqL0MsT0FDb0IsaUJBQWZpL0MsRUFBSWovQyxRQUF1QmdrRSxFQUFZL2tCLEVBQUlqL0MsUUFDN0MraEUsRUFBYSxHQUVmRixFQUFjNWlCLEdBR04sV0FBYkEsRUFBSTNnRCxNQUFxQmdDLE1BQU1vTSxRQUFRdXlDLEVBQUl6N0MsTUFDdENxK0QsRUFBYzVpQixFQUFJejdDLFdBRDNCLEVBeEtReStELENBQVdoL0QsR0FDbkIsR0FBSWdZLEVBQUcsT0FBT0EsRUFFZCxHQUFzQixvQkFBWHJNLFFBQWdELE1BQXRCQSxPQUFPcTFELGFBQ0gsbUJBQTlCaGhFLEVBQU0yTCxPQUFPcTFELGFBQ3RCLE9BQU9yNUQsRUFBT0QsS0FDWjFILEVBQU0yTCxPQUFPcTFELGFBQWEsVUFBV1QsRUFBa0J4akUsR0FJM0QsTUFBTSxJQUFJcTZDLFVBQ1IseUhBQ2lEcDNDLEdBcUJyRCxTQUFTaWhFLEVBQVkvakQsR0FDbkIsR0FBb0IsaUJBQVRBLEVBQ1QsTUFBTSxJQUFJazZCLFVBQVUsMENBQ2YsR0FBSWw2QixFQUFPLEVBQ2hCLE1BQU0sSUFBSTg1QixXQUFXLGNBQWdCOTVCLEVBQU8sa0NBNEJoRCxTQUFTdTJCLEVBQWF2MkIsR0FFcEIsT0FEQStqRCxFQUFXL2pELEdBQ0o0aEQsRUFBYTVoRCxFQUFPLEVBQUksRUFBb0IsRUFBaEJyQyxFQUFRcUMsSUF3QzdDLFNBQVMwaEQsRUFBZXZtQyxHQUd0QixJQUZBLElBQUl0N0IsRUFBU3M3QixFQUFNdDdCLE9BQVMsRUFBSSxFQUE0QixFQUF4QjhkLEVBQVF3ZCxFQUFNdDdCLFFBQzlDbUssRUFBTTQzRCxFQUFhL2hFLEdBQ2RFLEVBQUksRUFBR0EsRUFBSUYsRUFBUUUsR0FBSyxFQUMvQmlLLEVBQUlqSyxHQUFnQixJQUFYbzdCLEVBQU1wN0IsR0FFakIsT0FBT2lLLEVBV1QsU0FBUzIzRCxFQUFpQnhtQyxFQUFPc21DLEVBQVk1aEUsR0FDM0MsR0FBSTRoRSxFQUFhLEdBQUt0bUMsRUFBTS92QixXQUFhcTJELEVBQ3ZDLE1BQU0sSUFBSTNuQixXQUFXLHdDQUd2QixHQUFJM2UsRUFBTS92QixXQUFhcTJELEdBQWM1aEUsR0FBVSxHQUM3QyxNQUFNLElBQUlpNkMsV0FBVyx3Q0FHdkIsSUFBSTl2QyxFQVlKLE9BVkVBLE9BRGlCeEksSUFBZmlnRSxRQUF1Q2pnRSxJQUFYM0IsRUFDeEIsSUFBSW9LLFdBQVdreEIsUUFDRDM1QixJQUFYM0IsRUFDSCxJQUFJb0ssV0FBV2t4QixFQUFPc21DLEdBRXRCLElBQUl4M0QsV0FBV2t4QixFQUFPc21DLEVBQVk1aEUsR0FJMUM0RSxPQUFPMitELGVBQWVwNUQsRUFBS1MsRUFBT3VSLFdBRTNCaFMsRUE0QlQsU0FBUzJULEVBQVM5ZCxHQUdoQixHQUFJQSxHQUFVeWhFLEVBQ1osTUFBTSxJQUFJeG5CLFdBQVcsMERBQ2F3bkIsRUFBYWwzRCxTQUFTLElBQU0sVUFFaEUsT0FBZ0IsRUFBVHZLLEVBc0dULFNBQVN1TCxFQUFZaWpDLEVBQVFpMUIsR0FDM0IsR0FBSTc0RCxFQUFPOUMsU0FBUzBtQyxHQUNsQixPQUFPQSxFQUFPeHVDLE9BRWhCLEdBQUkyaEUsWUFBWVcsT0FBTzl6QixJQUFXbzFCLEVBQVdwMUIsRUFBUW16QixhQUNuRCxPQUFPbnpCLEVBQU9qakMsV0FFaEIsR0FBc0IsaUJBQVhpakMsRUFDVCxNQUFNLElBQUk2TCxVQUNSLGtHQUMwQjdMLEdBSTlCLElBQUkzcEIsRUFBTTJwQixFQUFPeHVDLE9BQ2Jta0UsRUFBYS9qRSxVQUFVSixPQUFTLElBQXNCLElBQWpCSSxVQUFVLEdBQ25ELElBQUsrakUsR0FBcUIsSUFBUnQvQyxFQUFXLE9BQU8sRUFJcEMsSUFEQSxJQUFJdS9DLEdBQWMsSUFFaEIsT0FBUVgsR0FDTixJQUFLLFFBQ0wsSUFBSyxTQUNMLElBQUssU0FDSCxPQUFPNStDLEVBQ1QsSUFBSyxPQUNMLElBQUssUUFDSCxPQUFPcTlDLEVBQVkxekIsR0FBUXh1QyxPQUM3QixJQUFLLE9BQ0wsSUFBSyxRQUNMLElBQUssVUFDTCxJQUFLLFdBQ0gsT0FBYSxFQUFONmtCLEVBQ1QsSUFBSyxNQUNILE9BQU9BLElBQVEsRUFDakIsSUFBSyxTQUNILE9BQU93L0MsRUFBYzcxQixHQUFReHVDLE9BQy9CLFFBQ0UsR0FBSW9rRSxFQUNGLE9BQU9ELEdBQWEsRUFBSWpDLEVBQVkxekIsR0FBUXh1QyxPQUU5Q3lqRSxHQUFZLEdBQUtBLEdBQVU1aEUsY0FDM0J1aUUsR0FBYyxHQU10QixTQUFTRSxFQUFjYixFQUFVOStDLEVBQU9DLEdBQ3RDLElBQUl3L0MsR0FBYyxFQWNsQixTQUxjemlFLElBQVZnakIsR0FBdUJBLEVBQVEsS0FDakNBLEVBQVEsR0FJTkEsRUFBUXRtQixLQUFLMkIsT0FDZixNQUFPLEdBT1QsU0FKWTJCLElBQVJpakIsR0FBcUJBLEVBQU12bUIsS0FBSzJCLFVBQ2xDNGtCLEVBQU12bUIsS0FBSzJCLFFBR1Q0a0IsR0FBTyxFQUNULE1BQU8sR0FPVCxJQUhBQSxLQUFTLEtBQ1RELEtBQVcsR0FHVCxNQUFPLEdBS1QsSUFGSzgrQyxJQUFVQSxFQUFXLFVBR3hCLE9BQVFBLEdBQ04sSUFBSyxNQUNILE9BQU9jLEVBQVNsbUUsS0FBTXNtQixFQUFPQyxHQUUvQixJQUFLLE9BQ0wsSUFBSyxRQUNILE9BQU80L0MsRUFBVW5tRSxLQUFNc21CLEVBQU9DLEdBRWhDLElBQUssUUFDSCxPQUFPNi9DLEVBQVdwbUUsS0FBTXNtQixFQUFPQyxHQUVqQyxJQUFLLFNBQ0wsSUFBSyxTQUNILE9BQU84L0MsRUFBWXJtRSxLQUFNc21CLEVBQU9DLEdBRWxDLElBQUssU0FDSCxPQUFPKy9DLEVBQVl0bUUsS0FBTXNtQixFQUFPQyxHQUVsQyxJQUFLLE9BQ0wsSUFBSyxRQUNMLElBQUssVUFDTCxJQUFLLFdBQ0gsT0FBT2dnRCxFQUFhdm1FLEtBQU1zbUIsRUFBT0MsR0FFbkMsUUFDRSxHQUFJdy9DLEVBQWEsTUFBTSxJQUFJL3BCLFVBQVUscUJBQXVCb3BCLEdBQzVEQSxHQUFZQSxFQUFXLElBQUk1aEUsY0FDM0J1aUUsR0FBYyxHQWF0QixTQUFTUyxFQUFNNXBELEVBQUdsQyxFQUFHaEwsR0FDbkIsSUFBSTdOLEVBQUkrYSxFQUFFbEMsR0FDVmtDLEVBQUVsQyxHQUFLa0MsRUFBRWxOLEdBQ1RrTixFQUFFbE4sR0FBSzdOLEVBNElULFNBQVM0a0UsRUFBc0J6bkMsRUFBUWh5QixFQUFLdTJELEVBQVk2QixFQUFVc0IsR0FFaEUsR0FBc0IsSUFBbEIxbkMsRUFBT3I5QixPQUFjLE9BQVEsRUFtQmpDLEdBaEIwQixpQkFBZjRoRSxHQUNUNkIsRUFBVzdCLEVBQ1hBLEVBQWEsR0FDSkEsRUFBYSxXQUN0QkEsRUFBYSxXQUNKQSxHQUFjLGFBQ3ZCQSxHQUFjLFlBR1pvQyxFQURKcEMsR0FBY0EsS0FHWkEsRUFBYW1ELEVBQU0sRUFBSzFuQyxFQUFPcjlCLE9BQVMsR0FJdEM0aEUsRUFBYSxJQUFHQSxFQUFhdmtDLEVBQU9yOUIsT0FBUzRoRSxHQUM3Q0EsR0FBY3ZrQyxFQUFPcjlCLE9BQVEsQ0FDL0IsR0FBSStrRSxFQUFLLE9BQVEsRUFDWm5ELEVBQWF2a0MsRUFBT3I5QixPQUFTLE9BQzdCLEdBQUk0aEUsRUFBYSxFQUFHLENBQ3pCLElBQUltRCxFQUNDLE9BQVEsRUFESm5ELEVBQWEsRUFVeEIsR0FMbUIsaUJBQVJ2MkQsSUFDVEEsRUFBTVQsRUFBT0QsS0FBS1UsRUFBS280RCxJQUlyQjc0RCxFQUFPOUMsU0FBU3VELEdBRWxCLE9BQW1CLElBQWZBLEVBQUlyTCxRQUNFLEVBRUhnbEUsRUFBYTNuQyxFQUFRaHlCLEVBQUt1MkQsRUFBWTZCLEVBQVVzQixHQUNsRCxHQUFtQixpQkFBUjE1RCxFQUVoQixPQURBQSxHQUFZLElBQ2dDLG1CQUFqQ2pCLFdBQVcrUixVQUFVNUIsUUFDMUJ3cUQsRUFDSzM2RCxXQUFXK1IsVUFBVTVCLFFBQVE4QyxLQUFLZ2dCLEVBQVFoeUIsRUFBS3UyRCxHQUUvQ3gzRCxXQUFXK1IsVUFBVTQxQixZQUFZMTBCLEtBQUtnZ0IsRUFBUWh5QixFQUFLdTJELEdBR3ZEb0QsRUFBYTNuQyxFQUFRLENBQUNoeUIsR0FBTXUyRCxFQUFZNkIsRUFBVXNCLEdBRzNELE1BQU0sSUFBSTFxQixVQUFVLHdDQUd0QixTQUFTMnFCLEVBQWN2NkQsRUFBS1ksRUFBS3UyRCxFQUFZNkIsRUFBVXNCLEdBQ3JELElBMEJJN2tFLEVBMUJBK2tFLEVBQVksRUFDWkMsRUFBWXo2RCxFQUFJekssT0FDaEJtbEUsRUFBWTk1RCxFQUFJckwsT0FFcEIsUUFBaUIyQixJQUFiOGhFLElBRWUsVUFEakJBLEVBQVcyQixPQUFPM0IsR0FBVTVoRSxnQkFDWSxVQUFiNGhFLEdBQ1YsWUFBYkEsR0FBdUMsYUFBYkEsR0FBeUIsQ0FDckQsR0FBSWg1RCxFQUFJekssT0FBUyxHQUFLcUwsRUFBSXJMLE9BQVMsRUFDakMsT0FBUSxFQUVWaWxFLEVBQVksRUFDWkMsR0FBYSxFQUNiQyxHQUFhLEVBQ2J2RCxHQUFjLEVBSWxCLFNBQVN5RCxFQUFNbDdELEVBQUtqSyxHQUNsQixPQUFrQixJQUFkK2tFLEVBQ0s5NkQsRUFBSWpLLEdBRUppSyxFQUFJbTdELGFBQWFwbEUsRUFBSStrRSxHQUtoQyxHQUFJRixFQUFLLENBQ1AsSUFBSVEsR0FBYyxFQUNsQixJQUFLcmxFLEVBQUkwaEUsRUFBWTFoRSxFQUFJZ2xFLEVBQVdobEUsSUFDbEMsR0FBSW1sRSxFQUFLNTZELEVBQUt2SyxLQUFPbWxFLEVBQUtoNkQsR0FBcUIsSUFBaEJrNkQsRUFBb0IsRUFBSXJsRSxFQUFJcWxFLElBRXpELElBRG9CLElBQWhCQSxJQUFtQkEsRUFBYXJsRSxHQUNoQ0EsRUFBSXFsRSxFQUFhLElBQU1KLEVBQVcsT0FBT0ksRUFBYU4sT0FFdEMsSUFBaEJNLElBQW1CcmxFLEdBQUtBLEVBQUlxbEUsR0FDaENBLEdBQWMsT0FLbEIsSUFESTNELEVBQWF1RCxFQUFZRCxJQUFXdEQsRUFBYXNELEVBQVlDLEdBQzVEamxFLEVBQUkwaEUsRUFBWTFoRSxHQUFLLEVBQUdBLElBQUssQ0FFaEMsSUFEQSxJQUFJc2xFLEdBQVEsRUFDSC9rRSxFQUFJLEVBQUdBLEVBQUkwa0UsRUFBVzFrRSxJQUM3QixHQUFJNGtFLEVBQUs1NkQsRUFBS3ZLLEVBQUlPLEtBQU80a0UsRUFBS2g2RCxFQUFLNUssR0FBSSxDQUNyQytrRSxHQUFRLEVBQ1IsTUFHSixHQUFJQSxFQUFPLE9BQU90bEUsRUFJdEIsT0FBUSxFQWVWLFNBQVN1bEUsRUFBVXQ3RCxFQUFLcWtDLEVBQVE0RCxFQUFRcHlDLEdBQ3RDb3lDLEVBQVMwVyxPQUFPMVcsSUFBVyxFQUMzQixJQUFJc3dCLEVBQVl2NEQsRUFBSW5LLE9BQVNveUMsRUFDeEJweUMsR0FHSEEsRUFBUzhvRCxPQUFPOW9ELElBQ0gwaUUsSUFDWDFpRSxFQUFTMGlFLEdBSlgxaUUsRUFBUzBpRSxFQVFYLElBQUlnRCxFQUFTbDNCLEVBQU94dUMsT0FFaEJBLEVBQVMwbEUsRUFBUyxJQUNwQjFsRSxFQUFTMGxFLEVBQVMsR0FFcEIsSUFBSyxJQUFJeGxFLEVBQUksRUFBR0EsRUFBSUYsSUFBVUUsRUFBRyxDQUMvQixJQUFJZ3pDLEVBQVNqb0MsU0FBU3VqQyxFQUFPL0gsT0FBVyxFQUFKdm1DLEVBQU8sR0FBSSxJQUMvQyxHQUFJOGpFLEVBQVk5d0IsR0FBUyxPQUFPaHpDLEVBQ2hDaUssRUFBSWlvQyxFQUFTbHlDLEdBQUtnekMsRUFFcEIsT0FBT2h6QyxFQUdULFNBQVMyaUUsRUFBVzE0RCxFQUFLcWtDLEVBQVE0RCxFQUFRcHlDLEdBQ3ZDLE9BQU80aUUsRUFBV1YsRUFBWTF6QixFQUFRcmtDLEVBQUluSyxPQUFTb3lDLEdBQVNqb0MsRUFBS2lvQyxFQUFRcHlDLEdBRzNFLFNBQVMybEUsRUFBWXg3RCxFQUFLcWtDLEVBQVE0RCxFQUFRcHlDLEdBQ3hDLE9BQU80aUUsRUFrNEJULFNBQXVCMTNELEdBRXJCLElBREEsSUFBSTA2RCxFQUFZLEdBQ1AxbEUsRUFBSSxFQUFHQSxFQUFJZ0wsRUFBSWxMLFNBQVVFLEVBRWhDMGxFLEVBQVU3a0UsS0FBeUIsSUFBcEJtSyxFQUFJNlosV0FBVzdrQixJQUVoQyxPQUFPMGxFLEVBeDRCV0MsQ0FBYXIzQixHQUFTcmtDLEVBQUtpb0MsRUFBUXB5QyxHQUd2RCxTQUFTOGxFLEVBQWEzN0QsRUFBS3FrQyxFQUFRNEQsRUFBUXB5QyxHQUN6QyxPQUFPNGlFLEVBQVd5QixFQUFjNzFCLEdBQVNya0MsRUFBS2lvQyxFQUFRcHlDLEdBR3hELFNBQVMrbEUsRUFBVzU3RCxFQUFLcWtDLEVBQVE0RCxFQUFRcHlDLEdBQ3ZDLE9BQU80aUUsRUFtNEJULFNBQXlCMTNELEVBQUtpM0QsR0FHNUIsSUFGQSxJQUFJaHBELEVBQUdtUCxFQUFJekIsRUFDUCsrQyxFQUFZLEdBQ1AxbEUsRUFBSSxFQUFHQSxFQUFJZ0wsRUFBSWxMLFdBQ2pCbWlFLEdBQVMsR0FBSyxLQURhamlFLEVBSWhDb29CLEdBREFuUCxFQUFJak8sRUFBSTZaLFdBQVc3a0IsS0FDVCxFQUNWMm1CLEVBQUsxTixFQUFJLElBQ1R5c0QsRUFBVTdrRSxLQUFLOGxCLEdBQ2YrK0MsRUFBVTdrRSxLQUFLdW5CLEdBR2pCLE9BQU9zOUMsRUFoNUJXSSxDQUFleDNCLEVBQVFya0MsRUFBSW5LLE9BQVNveUMsR0FBU2pvQyxFQUFLaW9DLEVBQVFweUMsR0ErRTlFLFNBQVMya0UsRUFBYXg2RCxFQUFLd2EsRUFBT0MsR0FDaEMsT0FBYyxJQUFWRCxHQUFlQyxJQUFRemEsRUFBSW5LLE9BQ3RCb2pFLEVBQU82QyxjQUFjOTdELEdBRXJCaTVELEVBQU82QyxjQUFjOTdELEVBQUlwSyxNQUFNNGtCLEVBQU9DLElBSWpELFNBQVM0L0MsRUFBV3I2RCxFQUFLd2EsRUFBT0MsR0FDOUJBLEVBQU12VCxLQUFLeVQsSUFBSTNhLEVBQUluSyxPQUFRNGtCLEdBSTNCLElBSEEsSUFBSW1ELEVBQU0sR0FFTjduQixFQUFJeWtCLEVBQ0R6a0IsRUFBSTBrQixHQUFLLENBQ2QsSUFXTXNoRCxFQUFZQyxFQUFXQyxFQUFZQyxFQVhyQ0MsRUFBWW44RCxFQUFJakssR0FDaEJraUUsRUFBWSxLQUNabUUsRUFBb0JELEVBQVksSUFDaEMsRUFDQ0EsRUFBWSxJQUNULEVBQ0NBLEVBQVksSUFDVCxFQUNBLEVBRVosR0FBSXBtRSxFQUFJcW1FLEdBQW9CM2hELEVBRzFCLE9BQVEyaEQsR0FDTixLQUFLLEVBQ0NELEVBQVksTUFDZGxFLEVBQVlrRSxHQUVkLE1BQ0YsS0FBSyxFQUV5QixNQUFWLEtBRGxCSixFQUFhLzdELEVBQUlqSyxFQUFJLE9BRW5CbW1FLEdBQTZCLEdBQVpDLElBQXFCLEVBQW9CLEdBQWJKLEdBQ3pCLE1BQ2xCOUQsRUFBWWlFLEdBR2hCLE1BQ0YsS0FBSyxFQUNISCxFQUFhLzdELEVBQUlqSyxFQUFJLEdBQ3JCaW1FLEVBQVloOEQsRUFBSWpLLEVBQUksR0FDUSxNQUFWLElBQWJnbUUsSUFBc0QsTUFBVixJQUFaQyxLQUNuQ0UsR0FBNkIsR0FBWkMsSUFBb0IsSUFBb0IsR0FBYkosSUFBc0IsRUFBbUIsR0FBWkMsR0FDckQsT0FBVUUsRUFBZ0IsT0FBVUEsRUFBZ0IsU0FDdEVqRSxFQUFZaUUsR0FHaEIsTUFDRixLQUFLLEVBQ0hILEVBQWEvN0QsRUFBSWpLLEVBQUksR0FDckJpbUUsRUFBWWg4RCxFQUFJakssRUFBSSxHQUNwQmttRSxFQUFhajhELEVBQUlqSyxFQUFJLEdBQ08sTUFBVixJQUFiZ21FLElBQXNELE1BQVYsSUFBWkMsSUFBc0QsTUFBVixJQUFiQyxLQUNsRUMsR0FBNkIsR0FBWkMsSUFBb0IsSUFBcUIsR0FBYkosSUFBc0IsSUFBbUIsR0FBWkMsSUFBcUIsRUFBb0IsR0FBYkMsR0FDbEYsT0FBVUMsRUFBZ0IsVUFDNUNqRSxFQUFZaUUsR0FNSixPQUFkakUsR0FHRkEsRUFBWSxNQUNabUUsRUFBbUIsR0FDVm5FLEVBQVksUUFFckJBLEdBQWEsTUFDYnI2QyxFQUFJaG5CLEtBQUtxaEUsSUFBYyxHQUFLLEtBQVEsT0FDcENBLEVBQVksTUFBcUIsS0FBWkEsR0FHdkJyNkMsRUFBSWhuQixLQUFLcWhFLEdBQ1RsaUUsR0FBS3FtRSxFQUdQLE9BUUYsU0FBZ0NDLEdBQzlCLElBQUkzaEQsRUFBTTJoRCxFQUFXeG1FLE9BQ3JCLEdBQUk2a0IsR0FBTzRoRCxFQUNULE9BQU9yQixPQUFPc0IsYUFBYWhHLE1BQU0wRSxPQUFRb0IsR0FNM0MsSUFGQSxJQUFJeitDLEVBQU0sR0FDTjduQixFQUFJLEVBQ0RBLEVBQUkya0IsR0FDVGtELEdBQU9xOUMsT0FBT3NCLGFBQWFoRyxNQUN6QjBFLE9BQ0FvQixFQUFXem1FLE1BQU1HLEVBQUdBLEdBQUt1bUUsSUFHN0IsT0FBTzErQyxFQXZCQTQrQyxDQUFzQjUrQyxHQTE5Qi9CbmQsRUFBTzAyRCxvQkFVUCxXQUVFLElBQ0UsSUFBSTcyRCxFQUFNLElBQUlMLFdBQVcsR0FDckJ3OEQsRUFBUSxDQUFFckYsSUFBSyxXQUFjLE9BQU8sS0FHeEMsT0FGQTM4RCxPQUFPMitELGVBQWVxRCxFQUFPeDhELFdBQVcrUixXQUN4Q3ZYLE9BQU8yK0QsZUFBZTk0RCxFQUFLbThELEdBQ04sS0FBZG44RCxFQUFJODJELE1BQ1gsTUFBT3J2RCxHQUNQLE9BQU8sR0FuQmtCc3ZELEdBRXhCNTJELEVBQU8wMkQscUJBQTBDLG9CQUFaOXFELFNBQ2IsbUJBQWxCQSxRQUFRQyxPQUNqQkQsUUFBUUMsTUFDTixpSkFrQko3UixPQUFPNkIsZUFBZW1FLEVBQU91UixVQUFXLFNBQVUsQ0FDaERsTyxZQUFZLEVBQ1pDLElBQUssV0FDSCxHQUFLdEQsRUFBTzlDLFNBQVN6SixNQUNyQixPQUFPQSxLQUFLZy9CLFVBSWhCejRCLE9BQU82QixlQUFlbUUsRUFBT3VSLFVBQVcsU0FBVSxDQUNoRGxPLFlBQVksRUFDWkMsSUFBSyxXQUNILEdBQUt0RCxFQUFPOUMsU0FBU3pKLE1BQ3JCLE9BQU9BLEtBQUt1akUsY0FxQ2hCaDNELEVBQU9pOEQsU0FBVyxLQWdFbEJqOEQsRUFBT0QsS0FBTyxTQUFVMUgsRUFBT3VnRSxFQUFrQnhqRSxHQUMvQyxPQUFPMkssRUFBSzFILEVBQU91Z0UsRUFBa0J4akUsSUFLdkM0RSxPQUFPMitELGVBQWUzNEQsRUFBT3VSLFVBQVcvUixXQUFXK1IsV0FDbkR2WCxPQUFPMitELGVBQWUzNEQsRUFBUVIsWUE4QjlCUSxFQUFPd3dDLE1BQVEsU0FBVWo3QixFQUFNeE4sRUFBTTh3RCxHQUNuQyxPQXJCRixTQUFnQnRqRCxFQUFNeE4sRUFBTTh3RCxHQUUxQixPQURBUyxFQUFXL2pELEdBQ1BBLEdBQVEsRUFDSDRoRCxFQUFhNWhELFFBRVR4ZSxJQUFUZ1IsRUFJeUIsaUJBQWI4d0QsRUFDVjFCLEVBQWE1aEQsR0FBTXhOLEtBQUtBLEVBQU04d0QsR0FDOUIxQixFQUFhNWhELEdBQU14TixLQUFLQSxHQUV2Qm92RCxFQUFhNWhELEdBUWJpN0IsQ0FBTWo3QixFQUFNeE4sRUFBTTh3RCxJQVczQjc0RCxFQUFPOHJDLFlBQWMsU0FBVXYyQixHQUM3QixPQUFPdTJCLEVBQVl2MkIsSUFLckJ2VixFQUFPazhELGdCQUFrQixTQUFVM21ELEdBQ2pDLE9BQU91MkIsRUFBWXYyQixJQThHckJ2VixFQUFPOUMsU0FBVyxTQUFtQm1ULEdBQ25DLE9BQVksTUFBTEEsSUFBNkIsSUFBaEJBLEVBQUVrb0QsV0FDcEJsb0QsSUFBTXJRLEVBQU91UixXQUdqQnZSLEVBQU9tOEQsUUFBVSxTQUFrQnZtRSxFQUFHeWEsR0FHcEMsR0FGSTJvRCxFQUFXcGpFLEVBQUc0SixjQUFhNUosRUFBSW9LLEVBQU9ELEtBQUtuSyxFQUFHQSxFQUFFNHhDLE9BQVE1eEMsRUFBRStLLGFBQzFEcTRELEVBQVczb0QsRUFBRzdRLGNBQWE2USxFQUFJclEsRUFBT0QsS0FBS3NRLEVBQUdBLEVBQUVtM0IsT0FBUW4zQixFQUFFMVAsY0FDekRYLEVBQU85QyxTQUFTdEgsS0FBT29LLEVBQU85QyxTQUFTbVQsR0FDMUMsTUFBTSxJQUFJby9CLFVBQ1IseUVBSUosR0FBSTc1QyxJQUFNeWEsRUFBRyxPQUFPLEVBS3BCLElBSEEsSUFBSWpRLEVBQUl4SyxFQUFFUixPQUNObWEsRUFBSWMsRUFBRWpiLE9BRURFLEVBQUksRUFBRzJrQixFQUFNeFQsS0FBS3lULElBQUk5WixFQUFHbVAsR0FBSWphLEVBQUkya0IsSUFBTzNrQixFQUMvQyxHQUFJTSxFQUFFTixLQUFPK2EsRUFBRS9hLEdBQUksQ0FDakI4SyxFQUFJeEssRUFBRU4sR0FDTmlhLEVBQUljLEVBQUUvYSxHQUNOLE1BSUosT0FBSThLLEVBQUltUCxHQUFXLEVBQ2ZBLEVBQUluUCxFQUFVLEVBQ1gsR0FHVEosRUFBTzg0RCxXQUFhLFNBQXFCRCxHQUN2QyxPQUFRMkIsT0FBTzNCLEdBQVU1aEUsZUFDdkIsSUFBSyxNQUNMLElBQUssT0FDTCxJQUFLLFFBQ0wsSUFBSyxRQUNMLElBQUssU0FDTCxJQUFLLFNBQ0wsSUFBSyxTQUNMLElBQUssT0FDTCxJQUFLLFFBQ0wsSUFBSyxVQUNMLElBQUssV0FDSCxPQUFPLEVBQ1QsUUFDRSxPQUFPLElBSWIrSSxFQUFPZ0MsT0FBUyxTQUFpQnMyRCxFQUFNbGpFLEdBQ3JDLElBQUtNLE1BQU1vTSxRQUFRdzJELEdBQ2pCLE1BQU0sSUFBSTdvQixVQUFVLCtDQUd0QixHQUFvQixJQUFoQjZvQixFQUFLbGpFLE9BQ1AsT0FBTzRLLEVBQU93d0MsTUFBTSxHQUd0QixJQUFJbDdDLEVBQ0osUUFBZXlCLElBQVgzQixFQUVGLElBREFBLEVBQVMsRUFDSkUsRUFBSSxFQUFHQSxFQUFJZ2pFLEVBQUtsakUsU0FBVUUsRUFDN0JGLEdBQVVrakUsRUFBS2hqRSxHQUFHRixPQUl0QixJQUFJcTlCLEVBQVN6eUIsRUFBTzhyQyxZQUFZMTJDLEdBQzVCZ3lELEVBQU0sRUFDVixJQUFLOXhELEVBQUksRUFBR0EsRUFBSWdqRSxFQUFLbGpFLFNBQVVFLEVBQUcsQ0FDaEMsSUFBSWlLLEVBQU0rNEQsRUFBS2hqRSxHQUNmLEdBQUkwakUsRUFBV3o1RCxFQUFLQyxZQUNkNG5ELEVBQU03bkQsRUFBSW5LLE9BQVNxOUIsRUFBT3I5QixPQUM1QjRLLEVBQU9ELEtBQUtSLEdBQUt1RSxLQUFLMnVCLEVBQVEyMEIsR0FFOUI1bkQsV0FBVytSLFVBQVVrRSxJQUFJaEQsS0FDdkJnZ0IsRUFDQWx6QixFQUNBNm5ELE9BR0MsS0FBS3BuRCxFQUFPOUMsU0FBU3FDLEdBQzFCLE1BQU0sSUFBSWt3QyxVQUFVLCtDQUVwQmx3QyxFQUFJdUUsS0FBSzJ1QixFQUFRMjBCLEdBRW5CQSxHQUFPN25ELEVBQUluSyxPQUViLE9BQU9xOUIsR0FrRFR6eUIsRUFBT1csV0FBYUEsRUE4RXBCWCxFQUFPdVIsVUFBVWduRCxXQUFZLEVBUTdCdjRELEVBQU91UixVQUFVNnFELE9BQVMsV0FDeEIsSUFBSW5pRCxFQUFNeG1CLEtBQUsyQixPQUNmLEdBQUk2a0IsRUFBTSxHQUFNLEVBQ2QsTUFBTSxJQUFJbzFCLFdBQVcsNkNBRXZCLElBQUssSUFBSS81QyxFQUFJLEVBQUdBLEVBQUkya0IsRUFBSzNrQixHQUFLLEVBQzVCMmtFLEVBQUt4bUUsS0FBTTZCLEVBQUdBLEVBQUksR0FFcEIsT0FBTzdCLE1BR1R1TSxFQUFPdVIsVUFBVThxRCxPQUFTLFdBQ3hCLElBQUlwaUQsRUFBTXhtQixLQUFLMkIsT0FDZixHQUFJNmtCLEVBQU0sR0FBTSxFQUNkLE1BQU0sSUFBSW8xQixXQUFXLDZDQUV2QixJQUFLLElBQUkvNUMsRUFBSSxFQUFHQSxFQUFJMmtCLEVBQUsza0IsR0FBSyxFQUM1QjJrRSxFQUFLeG1FLEtBQU02QixFQUFHQSxFQUFJLEdBQ2xCMmtFLEVBQUt4bUUsS0FBTTZCLEVBQUksRUFBR0EsRUFBSSxHQUV4QixPQUFPN0IsTUFHVHVNLEVBQU91UixVQUFVK3FELE9BQVMsV0FDeEIsSUFBSXJpRCxFQUFNeG1CLEtBQUsyQixPQUNmLEdBQUk2a0IsRUFBTSxHQUFNLEVBQ2QsTUFBTSxJQUFJbzFCLFdBQVcsNkNBRXZCLElBQUssSUFBSS81QyxFQUFJLEVBQUdBLEVBQUkya0IsRUFBSzNrQixHQUFLLEVBQzVCMmtFLEVBQUt4bUUsS0FBTTZCLEVBQUdBLEVBQUksR0FDbEIya0UsRUFBS3htRSxLQUFNNkIsRUFBSSxFQUFHQSxFQUFJLEdBQ3RCMmtFLEVBQUt4bUUsS0FBTTZCLEVBQUksRUFBR0EsRUFBSSxHQUN0QjJrRSxFQUFLeG1FLEtBQU02QixFQUFJLEVBQUdBLEVBQUksR0FFeEIsT0FBTzdCLE1BR1R1TSxFQUFPdVIsVUFBVTVSLFNBQVcsV0FDMUIsSUFBSXZLLEVBQVMzQixLQUFLMkIsT0FDbEIsT0FBZSxJQUFYQSxFQUFxQixHQUNBLElBQXJCSSxVQUFVSixPQUFxQndrRSxFQUFVbm1FLEtBQU0sRUFBRzJCLEdBQy9Dc2tFLEVBQWE1RCxNQUFNcmlFLEtBQU0rQixZQUdsQ3dLLEVBQU91UixVQUFVZ3JELGVBQWlCdjhELEVBQU91UixVQUFVNVIsU0FFbkRLLEVBQU91UixVQUFVaXJELE9BQVMsU0FBaUJuc0QsR0FDekMsSUFBS3JRLEVBQU85QyxTQUFTbVQsR0FBSSxNQUFNLElBQUlvL0IsVUFBVSw2QkFDN0MsT0FBSWg4QyxPQUFTNGMsR0FDc0IsSUFBNUJyUSxFQUFPbThELFFBQVExb0UsS0FBTTRjLElBRzlCclEsRUFBT3VSLFVBQVVtSyxRQUFVLFdBQ3pCLElBQUlwYixFQUFNLEdBQ05nYSxFQUFNeGUsRUFBUSxHQUdsQixPQUZBd0UsRUFBTTdNLEtBQUtrTSxTQUFTLE1BQU8sRUFBRzJhLEdBQUtuWixRQUFRLFVBQVcsT0FBT29ILE9BQ3pEOVUsS0FBSzJCLE9BQVNrbEIsSUFBS2hhLEdBQU8sU0FDdkIsV0FBYUEsRUFBTSxLQUV4Qm80RCxJQUNGMTRELEVBQU91UixVQUFVbW5ELEdBQXVCMTRELEVBQU91UixVQUFVbUssU0FHM0QxYixFQUFPdVIsVUFBVTRxRCxRQUFVLFNBQWtCaDNELEVBQVE0VSxFQUFPQyxFQUFLeWlELEVBQVdDLEdBSTFFLEdBSEkxRCxFQUFXN3pELEVBQVEzRixjQUNyQjJGLEVBQVNuRixFQUFPRCxLQUFLb0YsRUFBUUEsRUFBT3FpQyxPQUFRcmlDLEVBQU94RSxjQUVoRFgsRUFBTzlDLFNBQVNpSSxHQUNuQixNQUFNLElBQUlzcUMsVUFDUix3RkFDMkJ0cUMsR0FpQi9CLFFBYmNwTyxJQUFWZ2pCLElBQ0ZBLEVBQVEsUUFFRWhqQixJQUFSaWpCLElBQ0ZBLEVBQU03VSxFQUFTQSxFQUFPL1AsT0FBUyxRQUVmMkIsSUFBZDBsRSxJQUNGQSxFQUFZLFFBRUUxbEUsSUFBWjJsRSxJQUNGQSxFQUFVanBFLEtBQUsyQixRQUdiMmtCLEVBQVEsR0FBS0MsRUFBTTdVLEVBQU8vUCxRQUFVcW5FLEVBQVksR0FBS0MsRUFBVWpwRSxLQUFLMkIsT0FDdEUsTUFBTSxJQUFJaTZDLFdBQVcsc0JBR3ZCLEdBQUlvdEIsR0FBYUMsR0FBVzNpRCxHQUFTQyxFQUNuQyxPQUFPLEVBRVQsR0FBSXlpRCxHQUFhQyxFQUNmLE9BQVEsRUFFVixHQUFJM2lELEdBQVNDLEVBQ1gsT0FBTyxFQVFULEdBQUl2bUIsT0FBUzBSLEVBQVEsT0FBTyxFQVM1QixJQVBBLElBQUkvRSxHQUpKczhELEtBQWEsSUFEYkQsS0FBZSxHQU1YbHRELEdBUEp5SyxLQUFTLElBRFRELEtBQVcsR0FTUEUsRUFBTXhULEtBQUt5VCxJQUFJOVosRUFBR21QLEdBRWxCb3RELEVBQVdscEUsS0FBSzBCLE1BQU1zbkUsRUFBV0MsR0FDakNFLEVBQWF6M0QsRUFBT2hRLE1BQU00a0IsRUFBT0MsR0FFNUIxa0IsRUFBSSxFQUFHQSxFQUFJMmtCLElBQU8za0IsRUFDekIsR0FBSXFuRSxFQUFTcm5FLEtBQU9zbkUsRUFBV3RuRSxHQUFJLENBQ2pDOEssRUFBSXU4RCxFQUFTcm5FLEdBQ2JpYSxFQUFJcXRELEVBQVd0bkUsR0FDZixNQUlKLE9BQUk4SyxFQUFJbVAsR0FBVyxFQUNmQSxFQUFJblAsRUFBVSxFQUNYLEdBNEhUSixFQUFPdVIsVUFBVXJhLFNBQVcsU0FBbUJ1SixFQUFLdTJELEVBQVk2QixHQUM5RCxPQUFvRCxJQUE3Q3BsRSxLQUFLa2MsUUFBUWxQLEVBQUt1MkQsRUFBWTZCLElBR3ZDNzRELEVBQU91UixVQUFVNUIsUUFBVSxTQUFrQmxQLEVBQUt1MkQsRUFBWTZCLEdBQzVELE9BQU9xQixFQUFxQnptRSxLQUFNZ04sRUFBS3UyRCxFQUFZNkIsR0FBVSxJQUcvRDc0RCxFQUFPdVIsVUFBVTQxQixZQUFjLFNBQXNCMW1DLEVBQUt1MkQsRUFBWTZCLEdBQ3BFLE9BQU9xQixFQUFxQnptRSxLQUFNZ04sRUFBS3UyRCxFQUFZNkIsR0FBVSxJQTRDL0Q3NEQsRUFBT3VSLFVBQVVxMkMsTUFBUSxTQUFnQmhrQixFQUFRNEQsRUFBUXB5QyxFQUFReWpFLEdBRS9ELFFBQWU5aEUsSUFBWHl3QyxFQUNGcXhCLEVBQVcsT0FDWHpqRSxFQUFTM0IsS0FBSzJCLE9BQ2RveUMsRUFBUyxPQUVKLFFBQWV6d0MsSUFBWDNCLEdBQTBDLGlCQUFYb3lDLEVBQ3hDcXhCLEVBQVdyeEIsRUFDWHB5QyxFQUFTM0IsS0FBSzJCLE9BQ2RveUMsRUFBUyxNQUVKLEtBQUlxd0IsU0FBU3J3QixHQVVsQixNQUFNLElBQUlsdkMsTUFDUiwyRUFWRmt2QyxLQUFvQixFQUNoQnF3QixTQUFTemlFLElBQ1hBLEtBQW9CLE9BQ0gyQixJQUFiOGhFLElBQXdCQSxFQUFXLFVBRXZDQSxFQUFXempFLEVBQ1hBLE9BQVMyQixHQVFiLElBQUkrZ0UsRUFBWXJrRSxLQUFLMkIsT0FBU295QyxFQUc5QixTQUZlendDLElBQVgzQixHQUF3QkEsRUFBUzBpRSxLQUFXMWlFLEVBQVMwaUUsR0FFcERsMEIsRUFBT3h1QyxPQUFTLElBQU1BLEVBQVMsR0FBS295QyxFQUFTLElBQU9BLEVBQVMvekMsS0FBSzJCLE9BQ3JFLE1BQU0sSUFBSWk2QyxXQUFXLDBDQUdsQndwQixJQUFVQSxFQUFXLFFBRzFCLElBREEsSUFBSVcsR0FBYyxJQUVoQixPQUFRWCxHQUNOLElBQUssTUFDSCxPQUFPZ0MsRUFBU3BuRSxLQUFNbXdDLEVBQVE0RCxFQUFRcHlDLEdBRXhDLElBQUssT0FDTCxJQUFLLFFBQ0gsT0FBTzZpRSxFQUFVeGtFLEtBQU1td0MsRUFBUTRELEVBQVFweUMsR0FFekMsSUFBSyxRQUNMLElBQUssU0FDTCxJQUFLLFNBQ0gsT0FBTzJsRSxFQUFXdG5FLEtBQU1td0MsRUFBUTRELEVBQVFweUMsR0FFMUMsSUFBSyxTQUVILE9BQU84bEUsRUFBWXpuRSxLQUFNbXdDLEVBQVE0RCxFQUFRcHlDLEdBRTNDLElBQUssT0FDTCxJQUFLLFFBQ0wsSUFBSyxVQUNMLElBQUssV0FDSCxPQUFPK2xFLEVBQVUxbkUsS0FBTW13QyxFQUFRNEQsRUFBUXB5QyxHQUV6QyxRQUNFLEdBQUlva0UsRUFBYSxNQUFNLElBQUkvcEIsVUFBVSxxQkFBdUJvcEIsR0FDNURBLEdBQVksR0FBS0EsR0FBVTVoRSxjQUMzQnVpRSxHQUFjLElBS3RCeDVELEVBQU91UixVQUFVc0wsT0FBUyxXQUN4QixNQUFPLENBQ0xucEIsS0FBTSxTQUNOa0YsS0FBTWxELE1BQU02YixVQUFVcGMsTUFBTXNkLEtBQUtoZixLQUFLb3BFLE1BQVFwcEUsS0FBTSxLQTJGeEQsSUFBSW9vRSxFQUF1QixLQW9CM0IsU0FBU2hDLEVBQVl0NkQsRUFBS3dhLEVBQU9DLEdBQy9CLElBQUk0QyxFQUFNLEdBQ1Y1QyxFQUFNdlQsS0FBS3lULElBQUkzYSxFQUFJbkssT0FBUTRrQixHQUUzQixJQUFLLElBQUkxa0IsRUFBSXlrQixFQUFPemtCLEVBQUkwa0IsSUFBTzFrQixFQUM3QnNuQixHQUFPNDlDLE9BQU9zQixhQUFzQixJQUFUdjhELEVBQUlqSyxJQUVqQyxPQUFPc25CLEVBR1QsU0FBU2s5QyxFQUFhdjZELEVBQUt3YSxFQUFPQyxHQUNoQyxJQUFJNEMsRUFBTSxHQUNWNUMsRUFBTXZULEtBQUt5VCxJQUFJM2EsRUFBSW5LLE9BQVE0a0IsR0FFM0IsSUFBSyxJQUFJMWtCLEVBQUl5a0IsRUFBT3prQixFQUFJMGtCLElBQU8xa0IsRUFDN0JzbkIsR0FBTzQ5QyxPQUFPc0IsYUFBYXY4RCxFQUFJakssSUFFakMsT0FBT3NuQixFQUdULFNBQVMrOEMsRUFBVXA2RCxFQUFLd2EsRUFBT0MsR0FDN0IsSUFBSUMsRUFBTTFhLEVBQUluSyxTQUVUMmtCLEdBQVNBLEVBQVEsS0FBR0EsRUFBUSxLQUM1QkMsR0FBT0EsRUFBTSxHQUFLQSxFQUFNQyxLQUFLRCxFQUFNQyxHQUd4QyxJQURBLElBQUkrQixFQUFNLEdBQ0QxbUIsRUFBSXlrQixFQUFPemtCLEVBQUkwa0IsSUFBTzFrQixFQUM3QjBtQixHQUFPOGdELEVBQW9CdjlELEVBQUlqSyxJQUVqQyxPQUFPMG1CLEVBR1QsU0FBU2crQyxFQUFjejZELEVBQUt3YSxFQUFPQyxHQUlqQyxJQUhBLElBQUlsWixFQUFRdkIsRUFBSXBLLE1BQU00a0IsRUFBT0MsR0FDekJtRCxFQUFNLEdBRUQ3bkIsRUFBSSxFQUFHQSxFQUFJd0wsRUFBTTFMLE9BQVMsRUFBR0UsR0FBSyxFQUN6QzZuQixHQUFPcTlDLE9BQU9zQixhQUFhaDdELEVBQU14TCxHQUFxQixJQUFmd0wsRUFBTXhMLEVBQUksSUFFbkQsT0FBTzZuQixFQWtDVCxTQUFTNC9DLEVBQWF2MUIsRUFBUXcxQixFQUFLNW5FLEdBQ2pDLEdBQUtveUMsRUFBUyxHQUFPLEdBQUtBLEVBQVMsRUFBRyxNQUFNLElBQUk2SCxXQUFXLHNCQUMzRCxHQUFJN0gsRUFBU3cxQixFQUFNNW5FLEVBQVEsTUFBTSxJQUFJaTZDLFdBQVcseUNBb0xsRCxTQUFTNHRCLEVBQVUxOUQsRUFBS2xILEVBQU9tdkMsRUFBUXcxQixFQUFLMWlELEVBQUtKLEdBQy9DLElBQUtsYSxFQUFPOUMsU0FBU3FDLEdBQU0sTUFBTSxJQUFJa3dDLFVBQVUsK0NBQy9DLEdBQUlwM0MsRUFBUWlpQixHQUFPamlCLEVBQVE2aEIsRUFBSyxNQUFNLElBQUltMUIsV0FBVyxxQ0FDckQsR0FBSTdILEVBQVN3MUIsRUFBTXo5RCxFQUFJbkssT0FBUSxNQUFNLElBQUlpNkMsV0FBVyxzQkFnTXRELFNBQVM2dEIsRUFBYzM5RCxFQUFLbEgsRUFBT212QyxFQUFRdzFCLEVBQUsxaUQsRUFBS0osR0FDbkQsR0FBSXN0QixFQUFTdzFCLEVBQU16OUQsRUFBSW5LLE9BQVEsTUFBTSxJQUFJaTZDLFdBQVcsc0JBQ3BELEdBQUk3SCxFQUFTLEVBQUcsTUFBTSxJQUFJNkgsV0FBVyxzQkFHdkMsU0FBUzh0QixFQUFZNTlELEVBQUtsSCxFQUFPbXZDLEVBQVF0cUIsRUFBY2tnRCxHQU9yRCxPQU5BL2tFLEdBQVNBLEVBQ1RtdkMsS0FBb0IsRUFDZjQxQixHQUNIRixFQUFhMzlELEVBQUtsSCxFQUFPbXZDLEVBQVEsR0FFbkNpeEIsRUFBUTdRLE1BQU1yb0QsRUFBS2xILEVBQU9tdkMsRUFBUXRxQixFQUFjLEdBQUksR0FDN0NzcUIsRUFBUyxFQVdsQixTQUFTNjFCLEVBQWE5OUQsRUFBS2xILEVBQU9tdkMsRUFBUXRxQixFQUFja2dELEdBT3RELE9BTkEva0UsR0FBU0EsRUFDVG12QyxLQUFvQixFQUNmNDFCLEdBQ0hGLEVBQWEzOUQsRUFBS2xILEVBQU9tdkMsRUFBUSxHQUVuQ2l4QixFQUFRN1EsTUFBTXJvRCxFQUFLbEgsRUFBT212QyxFQUFRdHFCLEVBQWMsR0FBSSxHQUM3Q3NxQixFQUFTLEVBdGJsQnhuQyxFQUFPdVIsVUFBVXBjLE1BQVEsU0FBZ0I0a0IsRUFBT0MsR0FDOUMsSUFBSUMsRUFBTXhtQixLQUFLMkIsUUFDZjJrQixJQUFVQSxHQUdFLEdBQ1ZBLEdBQVNFLEdBQ0csSUFBR0YsRUFBUSxHQUNkQSxFQUFRRSxJQUNqQkYsRUFBUUUsSUFOVkQsT0FBY2pqQixJQUFSaWpCLEVBQW9CQyxJQUFRRCxHQVN4QixHQUNSQSxHQUFPQyxHQUNHLElBQUdELEVBQU0sR0FDVkEsRUFBTUMsSUFDZkQsRUFBTUMsR0FHSkQsRUFBTUQsSUFBT0MsRUFBTUQsR0FFdkIsSUFBSW0rQyxFQUFTemtFLEtBQUswa0UsU0FBU3ArQyxFQUFPQyxHQUlsQyxPQUZBaGdCLE9BQU8yK0QsZUFBZVQsRUFBUWw0RCxFQUFPdVIsV0FFOUIybUQsR0FXVGw0RCxFQUFPdVIsVUFBVStyRCxXQUNqQnQ5RCxFQUFPdVIsVUFBVWdzRCxXQUFhLFNBQXFCLzFCLEVBQVE3bUMsRUFBWXk4RCxHQUNyRTUxQixLQUFvQixFQUNwQjdtQyxLQUE0QixFQUN2Qnk4RCxHQUFVTCxFQUFZdjFCLEVBQVE3bUMsRUFBWWxOLEtBQUsyQixRQUtwRCxJQUhBLElBQUlxTCxFQUFNaE4sS0FBSyt6QyxHQUNYbnRCLEVBQU0sRUFDTi9rQixFQUFJLElBQ0NBLEVBQUlxTCxJQUFlMFosR0FBTyxNQUNqQzVaLEdBQU9oTixLQUFLK3pDLEVBQVNseUMsR0FBSytrQixFQUc1QixPQUFPNVosR0FHVFQsRUFBT3VSLFVBQVVpc0QsV0FDakJ4OUQsRUFBT3VSLFVBQVUzUixXQUFhLFNBQXFCNG5DLEVBQVE3bUMsRUFBWXk4RCxHQUNyRTUxQixLQUFvQixFQUNwQjdtQyxLQUE0QixFQUN2Qnk4RCxHQUNITCxFQUFZdjFCLEVBQVE3bUMsRUFBWWxOLEtBQUsyQixRQUt2QyxJQUZBLElBQUlxTCxFQUFNaE4sS0FBSyt6QyxJQUFXN21DLEdBQ3RCMFosRUFBTSxFQUNIMVosRUFBYSxJQUFNMFosR0FBTyxNQUMvQjVaLEdBQU9oTixLQUFLK3pDLElBQVc3bUMsR0FBYzBaLEVBR3ZDLE9BQU81WixHQUdUVCxFQUFPdVIsVUFBVWtzRCxVQUNqQno5RCxFQUFPdVIsVUFBVW1zRCxVQUFZLFNBQW9CbDJCLEVBQVE0MUIsR0FHdkQsT0FGQTUxQixLQUFvQixFQUNmNDFCLEdBQVVMLEVBQVl2MUIsRUFBUSxFQUFHL3pDLEtBQUsyQixRQUNwQzNCLEtBQUsrekMsSUFHZHhuQyxFQUFPdVIsVUFBVW9zRCxhQUNqQjM5RCxFQUFPdVIsVUFBVXFzRCxhQUFlLFNBQXVCcDJCLEVBQVE0MUIsR0FHN0QsT0FGQTUxQixLQUFvQixFQUNmNDFCLEdBQVVMLEVBQVl2MUIsRUFBUSxFQUFHL3pDLEtBQUsyQixRQUNwQzNCLEtBQUsrekMsR0FBVy96QyxLQUFLK3pDLEVBQVMsSUFBTSxHQUc3Q3huQyxFQUFPdVIsVUFBVXNzRCxhQUNqQjc5RCxFQUFPdVIsVUFBVW1wRCxhQUFlLFNBQXVCbHpCLEVBQVE0MUIsR0FHN0QsT0FGQTUxQixLQUFvQixFQUNmNDFCLEdBQVVMLEVBQVl2MUIsRUFBUSxFQUFHL3pDLEtBQUsyQixRQUNuQzNCLEtBQUsrekMsSUFBVyxFQUFLL3pDLEtBQUsrekMsRUFBUyxJQUc3Q3huQyxFQUFPdVIsVUFBVXVzRCxhQUNqQjk5RCxFQUFPdVIsVUFBVXdzRCxhQUFlLFNBQXVCdjJCLEVBQVE0MUIsR0FJN0QsT0FIQTUxQixLQUFvQixFQUNmNDFCLEdBQVVMLEVBQVl2MUIsRUFBUSxFQUFHL3pDLEtBQUsyQixTQUVsQzNCLEtBQUsrekMsR0FDVC96QyxLQUFLK3pDLEVBQVMsSUFBTSxFQUNwQi96QyxLQUFLK3pDLEVBQVMsSUFBTSxJQUNELFNBQW5CL3pDLEtBQUsrekMsRUFBUyxJQUdyQnhuQyxFQUFPdVIsVUFBVXlzRCxhQUNqQmgrRCxFQUFPdVIsVUFBVTBzRCxhQUFlLFNBQXVCejJCLEVBQVE0MUIsR0FJN0QsT0FIQTUxQixLQUFvQixFQUNmNDFCLEdBQVVMLEVBQVl2MUIsRUFBUSxFQUFHL3pDLEtBQUsyQixRQUVwQixTQUFmM0IsS0FBSyt6QyxJQUNUL3pDLEtBQUsrekMsRUFBUyxJQUFNLEdBQ3JCL3pDLEtBQUsrekMsRUFBUyxJQUFNLEVBQ3JCL3pDLEtBQUsrekMsRUFBUyxLQUdsQnhuQyxFQUFPdVIsVUFBVTJzRCxVQUFZLFNBQW9CMTJCLEVBQVE3bUMsRUFBWXk4RCxHQUNuRTUxQixLQUFvQixFQUNwQjdtQyxLQUE0QixFQUN2Qnk4RCxHQUFVTCxFQUFZdjFCLEVBQVE3bUMsRUFBWWxOLEtBQUsyQixRQUtwRCxJQUhBLElBQUlxTCxFQUFNaE4sS0FBSyt6QyxHQUNYbnRCLEVBQU0sRUFDTi9rQixFQUFJLElBQ0NBLEVBQUlxTCxJQUFlMFosR0FBTyxNQUNqQzVaLEdBQU9oTixLQUFLK3pDLEVBQVNseUMsR0FBSytrQixFQU01QixPQUZJNVosSUFGSjRaLEdBQU8sT0FFUzVaLEdBQU9nRyxLQUFLNFUsSUFBSSxFQUFHLEVBQUkxYSxJQUVoQ0YsR0FHVFQsRUFBT3VSLFVBQVU0c0QsVUFBWSxTQUFvQjMyQixFQUFRN21DLEVBQVl5OEQsR0FDbkU1MUIsS0FBb0IsRUFDcEI3bUMsS0FBNEIsRUFDdkJ5OEQsR0FBVUwsRUFBWXYxQixFQUFRN21DLEVBQVlsTixLQUFLMkIsUUFLcEQsSUFIQSxJQUFJRSxFQUFJcUwsRUFDSjBaLEVBQU0sRUFDTjVaLEVBQU1oTixLQUFLK3pDLElBQVdseUMsR0FDbkJBLEVBQUksSUFBTStrQixHQUFPLE1BQ3RCNVosR0FBT2hOLEtBQUsrekMsSUFBV2x5QyxHQUFLK2tCLEVBTTlCLE9BRkk1WixJQUZKNFosR0FBTyxPQUVTNVosR0FBT2dHLEtBQUs0VSxJQUFJLEVBQUcsRUFBSTFhLElBRWhDRixHQUdUVCxFQUFPdVIsVUFBVTZzRCxTQUFXLFNBQW1CNTJCLEVBQVE0MUIsR0FHckQsT0FGQTUxQixLQUFvQixFQUNmNDFCLEdBQVVMLEVBQVl2MUIsRUFBUSxFQUFHL3pDLEtBQUsyQixRQUN0QixJQUFmM0IsS0FBSyt6QyxJQUMwQixHQUE1QixJQUFPL3pDLEtBQUsrekMsR0FBVSxHQURLL3pDLEtBQUsrekMsSUFJM0N4bkMsRUFBT3VSLFVBQVU4c0QsWUFBYyxTQUFzQjcyQixFQUFRNDFCLEdBQzNENTFCLEtBQW9CLEVBQ2Y0MUIsR0FBVUwsRUFBWXYxQixFQUFRLEVBQUcvekMsS0FBSzJCLFFBQzNDLElBQUlxTCxFQUFNaE4sS0FBSyt6QyxHQUFXL3pDLEtBQUsrekMsRUFBUyxJQUFNLEVBQzlDLE9BQWMsTUFBTi9tQyxFQUFzQixXQUFOQSxFQUFtQkEsR0FHN0NULEVBQU91UixVQUFVK3NELFlBQWMsU0FBc0I5MkIsRUFBUTQxQixHQUMzRDUxQixLQUFvQixFQUNmNDFCLEdBQVVMLEVBQVl2MUIsRUFBUSxFQUFHL3pDLEtBQUsyQixRQUMzQyxJQUFJcUwsRUFBTWhOLEtBQUsrekMsRUFBUyxHQUFNL3pDLEtBQUsrekMsSUFBVyxFQUM5QyxPQUFjLE1BQU4vbUMsRUFBc0IsV0FBTkEsRUFBbUJBLEdBRzdDVCxFQUFPdVIsVUFBVWd0RCxZQUFjLFNBQXNCLzJCLEVBQVE0MUIsR0FJM0QsT0FIQTUxQixLQUFvQixFQUNmNDFCLEdBQVVMLEVBQVl2MUIsRUFBUSxFQUFHL3pDLEtBQUsyQixRQUVuQzNCLEtBQUsrekMsR0FDVi96QyxLQUFLK3pDLEVBQVMsSUFBTSxFQUNwQi96QyxLQUFLK3pDLEVBQVMsSUFBTSxHQUNwQi96QyxLQUFLK3pDLEVBQVMsSUFBTSxJQUd6QnhuQyxFQUFPdVIsVUFBVWl0RCxZQUFjLFNBQXNCaDNCLEVBQVE0MUIsR0FJM0QsT0FIQTUxQixLQUFvQixFQUNmNDFCLEdBQVVMLEVBQVl2MUIsRUFBUSxFQUFHL3pDLEtBQUsyQixRQUVuQzNCLEtBQUsrekMsSUFBVyxHQUNyQi96QyxLQUFLK3pDLEVBQVMsSUFBTSxHQUNwQi96QyxLQUFLK3pDLEVBQVMsSUFBTSxFQUNwQi96QyxLQUFLK3pDLEVBQVMsSUFHbkJ4bkMsRUFBT3VSLFVBQVVrdEQsWUFBYyxTQUFzQmozQixFQUFRNDFCLEdBRzNELE9BRkE1MUIsS0FBb0IsRUFDZjQxQixHQUFVTCxFQUFZdjFCLEVBQVEsRUFBRy96QyxLQUFLMkIsUUFDcENxakUsRUFBUWdDLEtBQUtobkUsS0FBTSt6QyxHQUFRLEVBQU0sR0FBSSxJQUc5Q3huQyxFQUFPdVIsVUFBVW10RCxZQUFjLFNBQXNCbDNCLEVBQVE0MUIsR0FHM0QsT0FGQTUxQixLQUFvQixFQUNmNDFCLEdBQVVMLEVBQVl2MUIsRUFBUSxFQUFHL3pDLEtBQUsyQixRQUNwQ3FqRSxFQUFRZ0MsS0FBS2huRSxLQUFNK3pDLEdBQVEsRUFBTyxHQUFJLElBRy9DeG5DLEVBQU91UixVQUFVb3RELGFBQWUsU0FBdUJuM0IsRUFBUTQxQixHQUc3RCxPQUZBNTFCLEtBQW9CLEVBQ2Y0MUIsR0FBVUwsRUFBWXYxQixFQUFRLEVBQUcvekMsS0FBSzJCLFFBQ3BDcWpFLEVBQVFnQyxLQUFLaG5FLEtBQU0rekMsR0FBUSxFQUFNLEdBQUksSUFHOUN4bkMsRUFBT3VSLFVBQVVxdEQsYUFBZSxTQUF1QnAzQixFQUFRNDFCLEdBRzdELE9BRkE1MUIsS0FBb0IsRUFDZjQxQixHQUFVTCxFQUFZdjFCLEVBQVEsRUFBRy96QyxLQUFLMkIsUUFDcENxakUsRUFBUWdDLEtBQUtobkUsS0FBTSt6QyxHQUFRLEVBQU8sR0FBSSxJQVMvQ3huQyxFQUFPdVIsVUFBVXN0RCxZQUNqQjcrRCxFQUFPdVIsVUFBVXV0RCxZQUFjLFNBQXNCem1FLEVBQU9tdkMsRUFBUTdtQyxFQUFZeThELEdBQzlFL2tFLEdBQVNBLEVBQ1RtdkMsS0FBb0IsRUFDcEI3bUMsS0FBNEIsRUFDdkJ5OEQsR0FFSEgsRUFBU3hwRSxLQUFNNEUsRUFBT212QyxFQUFRN21DLEVBRGY4RixLQUFLNFUsSUFBSSxFQUFHLEVBQUkxYSxHQUFjLEVBQ08sR0FHdEQsSUFBSTBaLEVBQU0sRUFDTi9rQixFQUFJLEVBRVIsSUFEQTdCLEtBQUsrekMsR0FBa0IsSUFBUm52QyxJQUNOL0MsRUFBSXFMLElBQWUwWixHQUFPLE1BQ2pDNW1CLEtBQUsrekMsRUFBU2x5QyxHQUFNK0MsRUFBUWdpQixFQUFPLElBR3JDLE9BQU9tdEIsRUFBUzdtQyxHQUdsQlgsRUFBT3VSLFVBQVV3dEQsWUFDakIvK0QsRUFBT3VSLFVBQVV5dEQsWUFBYyxTQUFzQjNtRSxFQUFPbXZDLEVBQVE3bUMsRUFBWXk4RCxHQUM5RS9rRSxHQUFTQSxFQUNUbXZDLEtBQW9CLEVBQ3BCN21DLEtBQTRCLEVBQ3ZCeThELEdBRUhILEVBQVN4cEUsS0FBTTRFLEVBQU9tdkMsRUFBUTdtQyxFQURmOEYsS0FBSzRVLElBQUksRUFBRyxFQUFJMWEsR0FBYyxFQUNPLEdBR3RELElBQUlyTCxFQUFJcUwsRUFBYSxFQUNqQjBaLEVBQU0sRUFFVixJQURBNW1CLEtBQUsrekMsRUFBU2x5QyxHQUFhLElBQVIrQyxJQUNWL0MsR0FBSyxJQUFNK2tCLEdBQU8sTUFDekI1bUIsS0FBSyt6QyxFQUFTbHlDLEdBQU0rQyxFQUFRZ2lCLEVBQU8sSUFHckMsT0FBT210QixFQUFTN21DLEdBR2xCWCxFQUFPdVIsVUFBVTB0RCxXQUNqQmovRCxFQUFPdVIsVUFBVTJ0RCxXQUFhLFNBQXFCN21FLEVBQU9tdkMsRUFBUTQxQixHQUtoRSxPQUpBL2tFLEdBQVNBLEVBQ1RtdkMsS0FBb0IsRUFDZjQxQixHQUFVSCxFQUFTeHBFLEtBQU00RSxFQUFPbXZDLEVBQVEsRUFBRyxJQUFNLEdBQ3REL3pDLEtBQUsrekMsR0FBbUIsSUFBUm52QyxFQUNUbXZDLEVBQVMsR0FHbEJ4bkMsRUFBT3VSLFVBQVU0dEQsY0FDakJuL0QsRUFBT3VSLFVBQVU2dEQsY0FBZ0IsU0FBd0IvbUUsRUFBT212QyxFQUFRNDFCLEdBTXRFLE9BTEEva0UsR0FBU0EsRUFDVG12QyxLQUFvQixFQUNmNDFCLEdBQVVILEVBQVN4cEUsS0FBTTRFLEVBQU9tdkMsRUFBUSxFQUFHLE1BQVEsR0FDeEQvekMsS0FBSyt6QyxHQUFtQixJQUFSbnZDLEVBQ2hCNUUsS0FBSyt6QyxFQUFTLEdBQU1udkMsSUFBVSxFQUN2Qm12QyxFQUFTLEdBR2xCeG5DLEVBQU91UixVQUFVOHRELGNBQ2pCci9ELEVBQU91UixVQUFVK3RELGNBQWdCLFNBQXdCam5FLEVBQU9tdkMsRUFBUTQxQixHQU10RSxPQUxBL2tFLEdBQVNBLEVBQ1RtdkMsS0FBb0IsRUFDZjQxQixHQUFVSCxFQUFTeHBFLEtBQU00RSxFQUFPbXZDLEVBQVEsRUFBRyxNQUFRLEdBQ3hEL3pDLEtBQUsrekMsR0FBV252QyxJQUFVLEVBQzFCNUUsS0FBSyt6QyxFQUFTLEdBQWMsSUFBUm52QyxFQUNibXZDLEVBQVMsR0FHbEJ4bkMsRUFBT3VSLFVBQVVndUQsY0FDakJ2L0QsRUFBT3VSLFVBQVVpdUQsY0FBZ0IsU0FBd0JubkUsRUFBT212QyxFQUFRNDFCLEdBUXRFLE9BUEEva0UsR0FBU0EsRUFDVG12QyxLQUFvQixFQUNmNDFCLEdBQVVILEVBQVN4cEUsS0FBTTRFLEVBQU9tdkMsRUFBUSxFQUFHLFdBQVksR0FDNUQvekMsS0FBSyt6QyxFQUFTLEdBQU1udkMsSUFBVSxHQUM5QjVFLEtBQUsrekMsRUFBUyxHQUFNbnZDLElBQVUsR0FDOUI1RSxLQUFLK3pDLEVBQVMsR0FBTW52QyxJQUFVLEVBQzlCNUUsS0FBSyt6QyxHQUFtQixJQUFSbnZDLEVBQ1RtdkMsRUFBUyxHQUdsQnhuQyxFQUFPdVIsVUFBVWt1RCxjQUNqQnovRCxFQUFPdVIsVUFBVW11RCxjQUFnQixTQUF3QnJuRSxFQUFPbXZDLEVBQVE0MUIsR0FRdEUsT0FQQS9rRSxHQUFTQSxFQUNUbXZDLEtBQW9CLEVBQ2Y0MUIsR0FBVUgsRUFBU3hwRSxLQUFNNEUsRUFBT212QyxFQUFRLEVBQUcsV0FBWSxHQUM1RC96QyxLQUFLK3pDLEdBQVdudkMsSUFBVSxHQUMxQjVFLEtBQUsrekMsRUFBUyxHQUFNbnZDLElBQVUsR0FDOUI1RSxLQUFLK3pDLEVBQVMsR0FBTW52QyxJQUFVLEVBQzlCNUUsS0FBSyt6QyxFQUFTLEdBQWMsSUFBUm52QyxFQUNibXZDLEVBQVMsR0FHbEJ4bkMsRUFBT3VSLFVBQVVvdUQsV0FBYSxTQUFxQnRuRSxFQUFPbXZDLEVBQVE3bUMsRUFBWXk4RCxHQUc1RSxHQUZBL2tFLEdBQVNBLEVBQ1RtdkMsS0FBb0IsR0FDZjQxQixFQUFVLENBQ2IsSUFBSXdDLEVBQVFuNUQsS0FBSzRVLElBQUksRUFBSSxFQUFJMWEsRUFBYyxHQUUzQ3M4RCxFQUFTeHBFLEtBQU00RSxFQUFPbXZDLEVBQVE3bUMsRUFBWWkvRCxFQUFRLEdBQUlBLEdBR3hELElBQUl0cUUsRUFBSSxFQUNKK2tCLEVBQU0sRUFDTjVJLEVBQU0sRUFFVixJQURBaGUsS0FBSyt6QyxHQUFrQixJQUFSbnZDLElBQ04vQyxFQUFJcUwsSUFBZTBaLEdBQU8sTUFDN0JoaUIsRUFBUSxHQUFhLElBQVJvWixHQUFzQyxJQUF6QmhlLEtBQUsrekMsRUFBU2x5QyxFQUFJLEtBQzlDbWMsRUFBTSxHQUVSaGUsS0FBSyt6QyxFQUFTbHlDLElBQU8rQyxFQUFRZ2lCLEdBQVEsR0FBSzVJLEVBQU0sSUFHbEQsT0FBTysxQixFQUFTN21DLEdBR2xCWCxFQUFPdVIsVUFBVXN1RCxXQUFhLFNBQXFCeG5FLEVBQU9tdkMsRUFBUTdtQyxFQUFZeThELEdBRzVFLEdBRkEva0UsR0FBU0EsRUFDVG12QyxLQUFvQixHQUNmNDFCLEVBQVUsQ0FDYixJQUFJd0MsRUFBUW41RCxLQUFLNFUsSUFBSSxFQUFJLEVBQUkxYSxFQUFjLEdBRTNDczhELEVBQVN4cEUsS0FBTTRFLEVBQU9tdkMsRUFBUTdtQyxFQUFZaS9ELEVBQVEsR0FBSUEsR0FHeEQsSUFBSXRxRSxFQUFJcUwsRUFBYSxFQUNqQjBaLEVBQU0sRUFDTjVJLEVBQU0sRUFFVixJQURBaGUsS0FBSyt6QyxFQUFTbHlDLEdBQWEsSUFBUitDLElBQ1YvQyxHQUFLLElBQU0ra0IsR0FBTyxNQUNyQmhpQixFQUFRLEdBQWEsSUFBUm9aLEdBQXNDLElBQXpCaGUsS0FBSyt6QyxFQUFTbHlDLEVBQUksS0FDOUNtYyxFQUFNLEdBRVJoZSxLQUFLK3pDLEVBQVNseUMsSUFBTytDLEVBQVFnaUIsR0FBUSxHQUFLNUksRUFBTSxJQUdsRCxPQUFPKzFCLEVBQVM3bUMsR0FHbEJYLEVBQU91UixVQUFVdXVELFVBQVksU0FBb0J6bkUsRUFBT212QyxFQUFRNDFCLEdBTTlELE9BTEEva0UsR0FBU0EsRUFDVG12QyxLQUFvQixFQUNmNDFCLEdBQVVILEVBQVN4cEUsS0FBTTRFLEVBQU9tdkMsRUFBUSxFQUFHLEtBQU8sS0FDbkRudkMsRUFBUSxJQUFHQSxFQUFRLElBQU9BLEVBQVEsR0FDdEM1RSxLQUFLK3pDLEdBQW1CLElBQVJudkMsRUFDVG12QyxFQUFTLEdBR2xCeG5DLEVBQU91UixVQUFVd3VELGFBQWUsU0FBdUIxbkUsRUFBT212QyxFQUFRNDFCLEdBTXBFLE9BTEEva0UsR0FBU0EsRUFDVG12QyxLQUFvQixFQUNmNDFCLEdBQVVILEVBQVN4cEUsS0FBTTRFLEVBQU9tdkMsRUFBUSxFQUFHLE9BQVMsT0FDekQvekMsS0FBSyt6QyxHQUFtQixJQUFSbnZDLEVBQ2hCNUUsS0FBSyt6QyxFQUFTLEdBQU1udkMsSUFBVSxFQUN2Qm12QyxFQUFTLEdBR2xCeG5DLEVBQU91UixVQUFVeXVELGFBQWUsU0FBdUIzbkUsRUFBT212QyxFQUFRNDFCLEdBTXBFLE9BTEEva0UsR0FBU0EsRUFDVG12QyxLQUFvQixFQUNmNDFCLEdBQVVILEVBQVN4cEUsS0FBTTRFLEVBQU9tdkMsRUFBUSxFQUFHLE9BQVMsT0FDekQvekMsS0FBSyt6QyxHQUFXbnZDLElBQVUsRUFDMUI1RSxLQUFLK3pDLEVBQVMsR0FBYyxJQUFSbnZDLEVBQ2JtdkMsRUFBUyxHQUdsQnhuQyxFQUFPdVIsVUFBVTB1RCxhQUFlLFNBQXVCNW5FLEVBQU9tdkMsRUFBUTQxQixHQVFwRSxPQVBBL2tFLEdBQVNBLEVBQ1RtdkMsS0FBb0IsRUFDZjQxQixHQUFVSCxFQUFTeHBFLEtBQU00RSxFQUFPbXZDLEVBQVEsRUFBRyxZQUFhLFlBQzdEL3pDLEtBQUsrekMsR0FBbUIsSUFBUm52QyxFQUNoQjVFLEtBQUsrekMsRUFBUyxHQUFNbnZDLElBQVUsRUFDOUI1RSxLQUFLK3pDLEVBQVMsR0FBTW52QyxJQUFVLEdBQzlCNUUsS0FBSyt6QyxFQUFTLEdBQU1udkMsSUFBVSxHQUN2Qm12QyxFQUFTLEdBR2xCeG5DLEVBQU91UixVQUFVMnVELGFBQWUsU0FBdUI3bkUsRUFBT212QyxFQUFRNDFCLEdBU3BFLE9BUkEva0UsR0FBU0EsRUFDVG12QyxLQUFvQixFQUNmNDFCLEdBQVVILEVBQVN4cEUsS0FBTTRFLEVBQU9tdkMsRUFBUSxFQUFHLFlBQWEsWUFDekRudkMsRUFBUSxJQUFHQSxFQUFRLFdBQWFBLEVBQVEsR0FDNUM1RSxLQUFLK3pDLEdBQVdudkMsSUFBVSxHQUMxQjVFLEtBQUsrekMsRUFBUyxHQUFNbnZDLElBQVUsR0FDOUI1RSxLQUFLK3pDLEVBQVMsR0FBTW52QyxJQUFVLEVBQzlCNUUsS0FBSyt6QyxFQUFTLEdBQWMsSUFBUm52QyxFQUNibXZDLEVBQVMsR0FrQmxCeG5DLEVBQU91UixVQUFVNHVELGFBQWUsU0FBdUI5bkUsRUFBT212QyxFQUFRNDFCLEdBQ3BFLE9BQU9ELEVBQVcxcEUsS0FBTTRFLEVBQU9tdkMsR0FBUSxFQUFNNDFCLElBRy9DcDlELEVBQU91UixVQUFVNnVELGFBQWUsU0FBdUIvbkUsRUFBT212QyxFQUFRNDFCLEdBQ3BFLE9BQU9ELEVBQVcxcEUsS0FBTTRFLEVBQU9tdkMsR0FBUSxFQUFPNDFCLElBYWhEcDlELEVBQU91UixVQUFVOHVELGNBQWdCLFNBQXdCaG9FLEVBQU9tdkMsRUFBUTQxQixHQUN0RSxPQUFPQyxFQUFZNXBFLEtBQU00RSxFQUFPbXZDLEdBQVEsRUFBTTQxQixJQUdoRHA5RCxFQUFPdVIsVUFBVSt1RCxjQUFnQixTQUF3QmpvRSxFQUFPbXZDLEVBQVE0MUIsR0FDdEUsT0FBT0MsRUFBWTVwRSxLQUFNNEUsRUFBT212QyxHQUFRLEVBQU80MUIsSUFJakRwOUQsRUFBT3VSLFVBQVV6TixLQUFPLFNBQWVxQixFQUFRa3pELEVBQWF0K0MsRUFBT0MsR0FDakUsSUFBS2hhLEVBQU85QyxTQUFTaUksR0FBUyxNQUFNLElBQUlzcUMsVUFBVSwrQkFRbEQsR0FQSzExQixJQUFPQSxFQUFRLEdBQ2ZDLEdBQWUsSUFBUkEsSUFBV0EsRUFBTXZtQixLQUFLMkIsUUFDOUJpakUsR0FBZWx6RCxFQUFPL1AsU0FBUWlqRSxFQUFjbHpELEVBQU8vUCxRQUNsRGlqRSxJQUFhQSxFQUFjLEdBQzVCcitDLEVBQU0sR0FBS0EsRUFBTUQsSUFBT0MsRUFBTUQsR0FHOUJDLElBQVFELEVBQU8sT0FBTyxFQUMxQixHQUFzQixJQUFsQjVVLEVBQU8vUCxRQUFnQyxJQUFoQjNCLEtBQUsyQixPQUFjLE9BQU8sRUFHckQsR0FBSWlqRSxFQUFjLEVBQ2hCLE1BQU0sSUFBSWhwQixXQUFXLDZCQUV2QixHQUFJdDFCLEVBQVEsR0FBS0EsR0FBU3RtQixLQUFLMkIsT0FBUSxNQUFNLElBQUlpNkMsV0FBVyxzQkFDNUQsR0FBSXIxQixFQUFNLEVBQUcsTUFBTSxJQUFJcTFCLFdBQVcsMkJBRzlCcjFCLEVBQU12bUIsS0FBSzJCLFNBQVE0a0IsRUFBTXZtQixLQUFLMkIsUUFDOUIrUCxFQUFPL1AsT0FBU2lqRSxFQUFjcitDLEVBQU1ELElBQ3RDQyxFQUFNN1UsRUFBTy9QLE9BQVNpakUsRUFBY3QrQyxHQUd0QyxJQUFJRSxFQUFNRCxFQUFNRCxFQWFoQixPQVhJdG1CLE9BQVMwUixHQUFxRCxtQkFBcEMzRixXQUFXK1IsVUFBVWd2RCxXQUVqRDlzRSxLQUFLOHNFLFdBQVdsSSxFQUFhdCtDLEVBQU9DLEdBRXBDeGEsV0FBVytSLFVBQVVrRSxJQUFJaEQsS0FDdkJ0TixFQUNBMVIsS0FBSzBrRSxTQUFTcCtDLEVBQU9DLEdBQ3JCcStDLEdBSUdwK0MsR0FPVGphLEVBQU91UixVQUFVeEosS0FBTyxTQUFldEgsRUFBS3NaLEVBQU9DLEVBQUs2K0MsR0FFdEQsR0FBbUIsaUJBQVJwNEQsRUFBa0IsQ0FTM0IsR0FScUIsaUJBQVZzWixHQUNUOCtDLEVBQVc5K0MsRUFDWEEsRUFBUSxFQUNSQyxFQUFNdm1CLEtBQUsyQixRQUNhLGlCQUFSNGtCLElBQ2hCNitDLEVBQVc3K0MsRUFDWEEsRUFBTXZtQixLQUFLMkIsYUFFSTJCLElBQWI4aEUsR0FBOEMsaUJBQWJBLEVBQ25DLE1BQU0sSUFBSXBwQixVQUFVLDZCQUV0QixHQUF3QixpQkFBYm9wQixJQUEwQjc0RCxFQUFPODRELFdBQVdELEdBQ3JELE1BQU0sSUFBSXBwQixVQUFVLHFCQUF1Qm9wQixHQUU3QyxHQUFtQixJQUFmcDRELEVBQUlyTCxPQUFjLENBQ3BCLElBQUl1L0IsRUFBT2wwQixFQUFJMFosV0FBVyxJQUNSLFNBQWIwK0MsR0FBdUJsa0MsRUFBTyxLQUNsQixXQUFia2tDLEtBRUZwNEQsRUFBTWswQixRQUdjLGlCQUFSbDBCLEVBQ2hCQSxHQUFZLElBQ1ksa0JBQVJBLElBQ2hCQSxFQUFNeTlDLE9BQU96OUMsSUFJZixHQUFJc1osRUFBUSxHQUFLdG1CLEtBQUsyQixPQUFTMmtCLEdBQVN0bUIsS0FBSzJCLE9BQVM0a0IsRUFDcEQsTUFBTSxJQUFJcTFCLFdBQVcsc0JBR3ZCLEdBQUlyMUIsR0FBT0QsRUFDVCxPQUFPdG1CLEtBUVQsSUFBSTZCLEVBQ0osR0FOQXlrQixLQUFrQixFQUNsQkMsT0FBY2pqQixJQUFSaWpCLEVBQW9Cdm1CLEtBQUsyQixPQUFTNGtCLElBQVEsRUFFM0N2WixJQUFLQSxFQUFNLEdBR0csaUJBQVJBLEVBQ1QsSUFBS25MLEVBQUl5a0IsRUFBT3prQixFQUFJMGtCLElBQU8xa0IsRUFDekI3QixLQUFLNkIsR0FBS21MLE1BRVAsQ0FDTCxJQUFJSyxFQUFRZCxFQUFPOUMsU0FBU3VELEdBQ3hCQSxFQUNBVCxFQUFPRCxLQUFLVSxFQUFLbzRELEdBQ2pCNStDLEVBQU1uWixFQUFNMUwsT0FDaEIsR0FBWSxJQUFSNmtCLEVBQ0YsTUFBTSxJQUFJdzFCLFVBQVUsY0FBZ0JodkMsRUFDbEMscUNBRUosSUFBS25MLEVBQUksRUFBR0EsRUFBSTBrQixFQUFNRCxJQUFTemtCLEVBQzdCN0IsS0FBSzZCLEVBQUl5a0IsR0FBU2paLEVBQU14TCxFQUFJMmtCLEdBSWhDLE9BQU94bUIsTUFNVCxJQUFJK3NFLEVBQW9CLG9CQWdCeEIsU0FBU2xKLEVBQWExekIsRUFBUTJ6QixHQUU1QixJQUFJQyxFQURKRCxFQUFRQSxHQUFTdkwsSUFNakIsSUFKQSxJQUFJNTJELEVBQVN3dUMsRUFBT3h1QyxPQUNoQnFpRSxFQUFnQixLQUNoQjMyRCxFQUFRLEdBRUh4TCxFQUFJLEVBQUdBLEVBQUlGLElBQVVFLEVBQUcsQ0FJL0IsSUFIQWtpRSxFQUFZNXpCLEVBQU96cEIsV0FBVzdrQixJQUdkLE9BQVVraUUsRUFBWSxNQUFRLENBRTVDLElBQUtDLEVBQWUsQ0FFbEIsR0FBSUQsRUFBWSxNQUFRLEVBRWpCRCxHQUFTLElBQU0sR0FBR3oyRCxFQUFNM0ssS0FBSyxJQUFNLElBQU0sS0FDOUMsU0FDSyxHQUFJYixFQUFJLElBQU1GLEVBQVEsRUFFdEJtaUUsR0FBUyxJQUFNLEdBQUd6MkQsRUFBTTNLLEtBQUssSUFBTSxJQUFNLEtBQzlDLFNBSUZzaEUsRUFBZ0JELEVBRWhCLFNBSUYsR0FBSUEsRUFBWSxNQUFRLEVBQ2pCRCxHQUFTLElBQU0sR0FBR3oyRCxFQUFNM0ssS0FBSyxJQUFNLElBQU0sS0FDOUNzaEUsRUFBZ0JELEVBQ2hCLFNBSUZBLEVBQWtFLE9BQXJEQyxFQUFnQixPQUFVLEdBQUtELEVBQVksWUFDL0NDLElBRUpGLEdBQVMsSUFBTSxHQUFHejJELEVBQU0zSyxLQUFLLElBQU0sSUFBTSxLQU1oRCxHQUhBc2hFLEVBQWdCLEtBR1pELEVBQVksSUFBTSxDQUNwQixJQUFLRCxHQUFTLEdBQUssRUFBRyxNQUN0QnoyRCxFQUFNM0ssS0FBS3FoRSxRQUNOLEdBQUlBLEVBQVksS0FBTyxDQUM1QixJQUFLRCxHQUFTLEdBQUssRUFBRyxNQUN0QnoyRCxFQUFNM0ssS0FDSnFoRSxHQUFhLEVBQU0sSUFDUCxHQUFaQSxFQUFtQixVQUVoQixHQUFJQSxFQUFZLE1BQVMsQ0FDOUIsSUFBS0QsR0FBUyxHQUFLLEVBQUcsTUFDdEJ6MkQsRUFBTTNLLEtBQ0pxaEUsR0FBYSxHQUFNLElBQ25CQSxHQUFhLEVBQU0sR0FBTyxJQUNkLEdBQVpBLEVBQW1CLFNBRWhCLE1BQUlBLEVBQVksU0FTckIsTUFBTSxJQUFJbC9ELE1BQU0sc0JBUmhCLElBQUtpL0QsR0FBUyxHQUFLLEVBQUcsTUFDdEJ6MkQsRUFBTTNLLEtBQ0pxaEUsR0FBYSxHQUFPLElBQ3BCQSxHQUFhLEdBQU0sR0FBTyxJQUMxQkEsR0FBYSxFQUFNLEdBQU8sSUFDZCxHQUFaQSxFQUFtQixNQU96QixPQUFPMTJELEVBNEJULFNBQVMyNEQsRUFBZW41RCxHQUN0QixPQUFPazRELEVBQU9pSSxZQXhIaEIsU0FBc0JuZ0UsR0FNcEIsSUFGQUEsR0FGQUEsRUFBTUEsRUFBSXBMLE1BQU0sS0FBSyxJQUVYcVQsT0FBT3BILFFBQVFxL0QsRUFBbUIsS0FFcENwckUsT0FBUyxFQUFHLE1BQU8sR0FFM0IsS0FBT2tMLEVBQUlsTCxPQUFTLEdBQU0sR0FDeEJrTCxHQUFZLElBRWQsT0FBT0EsRUE2R21Cb2dFLENBQVlwZ0UsSUFHeEMsU0FBUzAzRCxFQUFZcnpELEVBQUtvekQsRUFBS3Z3QixFQUFRcHlDLEdBQ3JDLElBQUssSUFBSUUsRUFBSSxFQUFHQSxFQUFJRixLQUNiRSxFQUFJa3lDLEdBQVV1d0IsRUFBSTNpRSxRQUFZRSxHQUFLcVAsRUFBSXZQLFVBRGhCRSxFQUU1QnlpRSxFQUFJemlFLEVBQUlreUMsR0FBVTdpQyxFQUFJclAsR0FFeEIsT0FBT0EsRUFNVCxTQUFTMGpFLEVBQVkza0IsRUFBSzNnRCxHQUN4QixPQUFPMmdELGFBQWUzZ0QsR0FDWixNQUFQMmdELEdBQWtDLE1BQW5CQSxFQUFJamxDLGFBQStDLE1BQXhCaWxDLEVBQUlqbEMsWUFBWTliLE1BQ3pEK2dELEVBQUlqbEMsWUFBWTliLE9BQVNJLEVBQUtKLEtBRXBDLFNBQVM4bEUsRUFBYS9rQixHQUVwQixPQUFPQSxHQUFRQSxFQUtqQixJQUFJeW9CLEVBQXNCLFdBR3hCLElBRkEsSUFBSTZELEVBQVcsbUJBQ1h0TyxFQUFRLElBQUkzOEQsTUFBTSxLQUNiSixFQUFJLEVBQUdBLEVBQUksS0FBTUEsRUFFeEIsSUFEQSxJQUFJc3JFLEVBQVUsR0FBSnRyRSxFQUNETyxFQUFJLEVBQUdBLEVBQUksS0FBTUEsRUFDeEJ3OEQsRUFBTXVPLEVBQU0vcUUsR0FBSzhxRSxFQUFTcnJFLEdBQUtxckUsRUFBUzlxRSxHQUc1QyxPQUFPdzhELEVBVGlCLEksVUM5d0QxQixJQUFJMXlELEVBQVcsR0FBR0EsU0FFbEJ1TyxFQUFPcFMsUUFBVXBHLE1BQU1vTSxTQUFXLFNBQVVqQyxHQUMxQyxNQUE2QixrQkFBdEJGLEVBQVM4UyxLQUFLNVMsSyw2QkNGdkIsTUFBTWdoRSxFQUFrQixFQUFRLE9BQzFCQyxFQUFrQixFQUFRLE9BQzFCQyxFQUFlLEVBQVEsT0EwSTdCLFNBQVNDLEVBQTZCM29FLEdBQ3JDLEdBQXFCLGlCQUFWQSxHQUF1QyxJQUFqQkEsRUFBTWpELE9BQ3RDLE1BQU0sSUFBSXE2QyxVQUFVLHdEQUl0QixTQUFTdEMsRUFBTzkwQyxFQUFPMm1DLEdBQ3RCLE9BQUlBLEVBQVFtTyxPQUNKbk8sRUFBUXQrQixPQUFTbWdFLEVBQWdCeG9FLEdBQVNvQixtQkFBbUJwQixHQUc5REEsRUFHUixTQUFTMjFDLEVBQU8zMUMsRUFBTzJtQyxHQUN0QixPQUFJQSxFQUFRZ1AsT0FDSjh5QixFQUFnQnpvRSxHQUdqQkEsRUFHUixTQUFTNG9FLEVBQVdsN0QsR0FDbkIsT0FBSXJRLE1BQU1vTSxRQUFRaUUsR0FDVkEsRUFBTStKLE9BR08saUJBQVYvSixFQUNIazdELEVBQVdqbkUsT0FBTzQzQixLQUFLN3JCLElBQzVCK0osTUFBSyxDQUFDbGEsRUFBR3lhLElBQU02dEMsT0FBT3RvRCxHQUFLc29ELE9BQU83dEMsS0FDbEM3VixLQUFJN0IsR0FBT29OLEVBQU1wTixLQUdib04sRUFHUixTQUFTbTdELEVBQVduN0QsR0FDbkIsTUFBTW83RCxFQUFZcDdELEVBQU00SixRQUFRLEtBS2hDLE9BSm1CLElBQWZ3eEQsSUFDSHA3RCxFQUFRQSxFQUFNNVEsTUFBTSxFQUFHZ3NFLElBR2pCcDdELEVBYVIsU0FBU3E3RCxFQUFRcjdELEdBRWhCLE1BQU1zN0QsR0FETnQ3RCxFQUFRbTdELEVBQVduN0QsSUFDTTRKLFFBQVEsS0FDakMsT0FBb0IsSUFBaEIweEQsRUFDSSxHQUdEdDdELEVBQU01USxNQUFNa3NFLEVBQWEsR0FHakMsU0FBU0MsRUFBV2pwRSxFQUFPMm1DLEdBTzFCLE9BTklBLEVBQVF1aUMsZUFBaUJyakIsT0FBT3dNLE1BQU14TSxPQUFPN2xELEtBQTZCLGlCQUFWQSxHQUF1QyxLQUFqQkEsRUFBTWtRLE9BQy9GbFEsRUFBUTZsRCxPQUFPN2xELElBQ0wybUMsRUFBUXdpQyxlQUEyQixPQUFWbnBFLEdBQTJDLFNBQXhCQSxFQUFNcEIsZUFBb0QsVUFBeEJvQixFQUFNcEIsZ0JBQzlGb0IsRUFBZ0MsU0FBeEJBLEVBQU1wQixlQUdSb0IsRUFHUixTQUFTRyxFQUFNdU4sRUFBT2k1QixHQVVyQmdpQyxHQVRBaGlDLEVBQVVobEMsT0FBT0MsT0FBTyxDQUN2Qit6QyxRQUFRLEVBQ1JsK0IsTUFBTSxFQUNOMnhELFlBQWEsT0FDYkMscUJBQXNCLElBQ3RCSCxjQUFjLEVBQ2RDLGVBQWUsR0FDYnhpQyxJQUVrQzBpQyxzQkFFckMsTUFBTUMsRUFuSlAsU0FBOEIzaUMsR0FDN0IsSUFBSXg5QixFQUVKLE9BQVF3OUIsRUFBUXlpQyxhQUNmLElBQUssUUFDSixNQUFPLENBQUM5b0UsRUFBS04sRUFBT3VwRSxLQUNuQnBnRSxFQUFTLGFBQWExTSxLQUFLNkQsR0FFM0JBLEVBQU1BLEVBQUl3SSxRQUFRLFdBQVksSUFFekJLLFFBS29CekssSUFBckI2cUUsRUFBWWpwRSxLQUNmaXBFLEVBQVlqcEUsR0FBTyxJQUdwQmlwRSxFQUFZanBFLEdBQUs2SSxFQUFPLElBQU1uSixHQVI3QnVwRSxFQUFZanBFLEdBQU9OLEdBV3RCLElBQUssVUFDSixNQUFPLENBQUNNLEVBQUtOLEVBQU91cEUsS0FDbkJwZ0UsRUFBUyxVQUFVMU0sS0FBSzZELEdBQ3hCQSxFQUFNQSxFQUFJd0ksUUFBUSxRQUFTLElBRXRCSyxPQUtvQnpLLElBQXJCNnFFLEVBQVlqcEUsR0FLaEJpcEUsRUFBWWpwRSxHQUFPLEdBQUdxSixPQUFPNC9ELEVBQVlqcEUsR0FBTU4sR0FKOUN1cEUsRUFBWWpwRSxHQUFPLENBQUNOLEdBTHBCdXBFLEVBQVlqcEUsR0FBT04sR0FZdEIsSUFBSyxRQUNMLElBQUssWUFDSixNQUFPLENBQUNNLEVBQUtOLEVBQU91cEUsS0FDbkIsTUFDTUMsRUFEMkIsaUJBQVZ4cEUsR0FBc0JBLEVBQU1uRCxNQUFNLElBQUl5YSxRQUFRcXZCLEVBQVEwaUMsdUJBQXlCLEVBQzNFcnBFLEVBQU1uRCxNQUFNOHBDLEVBQVEwaUMsc0JBQXNCbG5FLEtBQUlpdUMsR0FBUXVGLEVBQU92RixFQUFNekosS0FBc0IsT0FBVjNtQyxFQUFpQkEsRUFBUTIxQyxFQUFPMzFDLEVBQU8ybUMsR0FDako0aUMsRUFBWWpwRSxHQUFPa3BFLEdBR3JCLFFBQ0MsTUFBTyxDQUFDbHBFLEVBQUtOLEVBQU91cEUsVUFDTTdxRSxJQUFyQjZxRSxFQUFZanBFLEdBS2hCaXBFLEVBQVlqcEUsR0FBTyxHQUFHcUosT0FBTzQvRCxFQUFZanBFLEdBQU1OLEdBSjlDdXBFLEVBQVlqcEUsR0FBT04sSUFnR0x5cEUsQ0FBcUI5aUMsR0FHakNwaUIsRUFBTTVpQixPQUFPaUosT0FBTyxNQUUxQixHQUFxQixpQkFBVjhDLEVBQ1YsT0FBTzZXLEVBS1IsS0FGQTdXLEVBQVFBLEVBQU13QyxPQUFPcEgsUUFBUSxTQUFVLEtBR3RDLE9BQU95YixFQUdSLElBQUssTUFBTW1sRCxLQUFTaDhELEVBQU03USxNQUFNLEtBQU0sQ0FDckMsSUFBS3lELEVBQUtOLEdBQVMwb0UsRUFBYS9oQyxFQUFRZ1AsT0FBUyt6QixFQUFNNWdFLFFBQVEsTUFBTyxLQUFPNGdFLEVBQU8sS0FJcEYxcEUsT0FBa0J0QixJQUFWc0IsRUFBc0IsS0FBTyxDQUFDLFFBQVMsYUFBYW5CLFNBQVM4bkMsRUFBUXlpQyxhQUFlcHBFLEVBQVEyMUMsRUFBTzMxQyxFQUFPMm1DLEdBQ2xIMmlDLEVBQVUzekIsRUFBT3IxQyxFQUFLcW1DLEdBQVUzbUMsRUFBT3VrQixHQUd4QyxJQUFLLE1BQU1qa0IsS0FBT3FCLE9BQU80M0IsS0FBS2hWLEdBQU0sQ0FDbkMsTUFBTXZrQixFQUFRdWtCLEVBQUlqa0IsR0FDbEIsR0FBcUIsaUJBQVZOLEdBQWdDLE9BQVZBLEVBQ2hDLElBQUssTUFBTTFDLEtBQUtxRSxPQUFPNDNCLEtBQUt2NUIsR0FDM0JBLEVBQU0xQyxHQUFLMnJFLEVBQVdqcEUsRUFBTTFDLEdBQUlxcEMsUUFHakNwaUIsRUFBSWprQixHQUFPMm9FLEVBQVdqcEUsRUFBTzJtQyxHQUkvQixPQUFxQixJQUFqQkEsRUFBUWx2QixLQUNKOE0sSUFHaUIsSUFBakJvaUIsRUFBUWx2QixLQUFnQjlWLE9BQU80M0IsS0FBS2hWLEdBQUs5TSxPQUFTOVYsT0FBTzQzQixLQUFLaFYsR0FBSzlNLEtBQUtrdkIsRUFBUWx2QixPQUFPdGIsUUFBTyxDQUFDZ04sRUFBUTdJLEtBQzlHLE1BQU1OLEVBQVF1a0IsRUFBSWprQixHQVFsQixPQVBJOEIsUUFBUXBDLElBQTJCLGlCQUFWQSxJQUF1QjNDLE1BQU1vTSxRQUFRekosR0FFakVtSixFQUFPN0ksR0FBT3NvRSxFQUFXNW9FLEdBRXpCbUosRUFBTzdJLEdBQU9OLEVBR1JtSixJQUNMeEgsT0FBT2lKLE9BQU8sT0FHbEJuSCxFQUFRc2xFLFFBQVVBLEVBQ2xCdGxFLEVBQVF0RCxNQUFRQSxFQUVoQnNELEVBQVFyRCxVQUFZLENBQUM0M0IsRUFBUTJPLEtBQzVCLElBQUszTyxFQUNKLE1BQU8sR0FVUjJ3QyxHQVBBaGlDLEVBQVVobEMsT0FBT0MsT0FBTyxDQUN2Qmt6QyxRQUFRLEVBQ1J6c0MsUUFBUSxFQUNSK2dFLFlBQWEsT0FDYkMscUJBQXNCLEtBQ3BCMWlDLElBRWtDMGlDLHNCQUVyQyxNQUFNTSxFQUFlcnBFLEdBQ25CcW1DLEVBQVFpakMsVUFyU3dCNXBFLE1BcVNNZzRCLEVBQU8xM0IsSUFDN0NxbUMsRUFBUWtqQyxpQkFBbUMsS0FBaEI3eEMsRUFBTzEzQixHQUc5QmdwRSxFQXZTUCxTQUErQjNpQyxHQUM5QixPQUFRQSxFQUFReWlDLGFBQ2YsSUFBSyxRQUNKLE9BQU85b0UsR0FBTyxDQUFDNkksRUFBUW5KLEtBQ3RCLE1BQU15TyxFQUFRdEYsRUFBT3BNLE9BRXJCLFlBQ1cyQixJQUFWc0IsR0FDQzJtQyxFQUFRaWpDLFVBQXNCLE9BQVY1cEUsR0FDcEIybUMsRUFBUWtqQyxpQkFBNkIsS0FBVjdwRSxFQUVyQm1KLEVBR00sT0FBVm5KLEVBQ0ksSUFBSW1KLEVBQVEsQ0FBQzJyQyxFQUFPeDBDLEVBQUtxbUMsR0FBVSxJQUFLbDRCLEVBQU8sS0FBS3pRLEtBQUssS0FHMUQsSUFDSG1MLEVBQ0gsQ0FBQzJyQyxFQUFPeDBDLEVBQUtxbUMsR0FBVSxJQUFLbU8sRUFBT3JtQyxFQUFPazRCLEdBQVUsS0FBTW1PLEVBQU85MEMsRUFBTzJtQyxJQUFVM29DLEtBQUssTUFJMUYsSUFBSyxVQUNKLE9BQU9zQyxHQUFPLENBQUM2SSxFQUFRbkosU0FFWHRCLElBQVZzQixHQUNDMm1DLEVBQVFpakMsVUFBc0IsT0FBVjVwRSxHQUNwQjJtQyxFQUFRa2pDLGlCQUE2QixLQUFWN3BFLEVBRXJCbUosRUFHTSxPQUFWbkosRUFDSSxJQUFJbUosRUFBUSxDQUFDMnJDLEVBQU94MEMsRUFBS3FtQyxHQUFVLE1BQU0zb0MsS0FBSyxLQUcvQyxJQUFJbUwsRUFBUSxDQUFDMnJDLEVBQU94MEMsRUFBS3FtQyxHQUFVLE1BQU9tTyxFQUFPOTBDLEVBQU8ybUMsSUFBVTNvQyxLQUFLLEtBR2hGLElBQUssUUFDTCxJQUFLLFlBQ0osT0FBT3NDLEdBQU8sQ0FBQzZJLEVBQVFuSixJQUNsQkEsU0FBMEQsSUFBakJBLEVBQU1qRCxPQUMzQ29NLEVBR2MsSUFBbEJBLEVBQU9wTSxPQUNILENBQUMsQ0FBQyszQyxFQUFPeDBDLEVBQUtxbUMsR0FBVSxJQUFLbU8sRUFBTzkwQyxFQUFPMm1DLElBQVUzb0MsS0FBSyxLQUczRCxDQUFDLENBQUNtTCxFQUFRMnJDLEVBQU85MEMsRUFBTzJtQyxJQUFVM29DLEtBQUsyb0MsRUFBUTBpQyx1QkFHeEQsUUFDQyxPQUFPL29FLEdBQU8sQ0FBQzZJLEVBQVFuSixTQUVYdEIsSUFBVnNCLEdBQ0MybUMsRUFBUWlqQyxVQUFzQixPQUFWNXBFLEdBQ3BCMm1DLEVBQVFrakMsaUJBQTZCLEtBQVY3cEUsRUFFckJtSixFQUdNLE9BQVZuSixFQUNJLElBQUltSixFQUFRMnJDLEVBQU94MEMsRUFBS3FtQyxJQUd6QixJQUFJeDlCLEVBQVEsQ0FBQzJyQyxFQUFPeDBDLEVBQUtxbUMsR0FBVSxJQUFLbU8sRUFBTzkwQyxFQUFPMm1DLElBQVUzb0MsS0FBSyxNQWtPN0Q4ckUsQ0FBc0JuakMsR0FFbENvakMsRUFBYSxHQUVuQixJQUFLLE1BQU16cEUsS0FBT3FCLE9BQU80M0IsS0FBS3ZCLEdBQ3hCMnhDLEVBQWFycEUsS0FDakJ5cEUsRUFBV3pwRSxHQUFPMDNCLEVBQU8xM0IsSUFJM0IsTUFBTWk1QixFQUFPNTNCLE9BQU80M0IsS0FBS3d3QyxHQU16QixPQUpxQixJQUFqQnBqQyxFQUFRbHZCLE1BQ1g4aEIsRUFBSzloQixLQUFLa3ZCLEVBQVFsdkIsTUFHWjhoQixFQUFLcDNCLEtBQUk3QixJQUNmLE1BQU1OLEVBQVFnNEIsRUFBTzEzQixHQUVyQixZQUFjNUIsSUFBVnNCLEVBQ0ksR0FHTSxPQUFWQSxFQUNJODBDLEVBQU94MEMsRUFBS3FtQyxHQUdoQnRwQyxNQUFNb00sUUFBUXpKLEdBQ1ZBLEVBQ0w3RCxPQUFPbXRFLEVBQVVocEUsR0FBTSxJQUN2QnRDLEtBQUssS0FHRDgyQyxFQUFPeDBDLEVBQUtxbUMsR0FBVyxJQUFNbU8sRUFBTzkwQyxFQUFPMm1DLE1BQ2hENWtDLFFBQU9nRyxHQUFLQSxFQUFFaEwsT0FBUyxJQUFHaUIsS0FBSyxNQUduQ3lGLEVBQVF1bUUsU0FBVyxDQUFDdDhELEVBQU9pNUIsS0FDMUJBLEVBQVVobEMsT0FBT0MsT0FBTyxDQUN2Qit6QyxRQUFRLEdBQ05oUCxHQUVILE1BQU81ekIsRUFBSzBsQixHQUFRaXdDLEVBQWFoN0QsRUFBTyxLQUV4QyxPQUFPL0wsT0FBT0MsT0FDYixDQUNDbVIsSUFBS0EsRUFBSWxXLE1BQU0sS0FBSyxJQUFNLEdBQzFCb3RFLE1BQU85cEUsRUFBTTRvRSxFQUFRcjdELEdBQVFpNUIsSUFFOUJBLEdBQVdBLEVBQVF1akMseUJBQTJCenhDLEVBQU8sQ0FBQzB4QyxtQkFBb0J4MEIsRUFBT2xkLEVBQU1rTyxJQUFZLEtBSXJHbGpDLEVBQVEybUUsYUFBZSxDQUFDMThELEVBQU9pNUIsS0FDOUJBLEVBQVVobEMsT0FBT0MsT0FBTyxDQUN2Qmt6QyxRQUFRLEVBQ1J6c0MsUUFBUSxHQUNOcytCLEdBRUgsTUFBTTV6QixFQUFNODFELEVBQVduN0QsRUFBTXFGLEtBQUtsVyxNQUFNLEtBQUssSUFBTSxHQUM3Q3d0RSxFQUFlNW1FLEVBQVFzbEUsUUFBUXI3RCxFQUFNcUYsS0FDckN1M0QsRUFBcUI3bUUsRUFBUXRELE1BQU1rcUUsRUFBYyxDQUFDNXlELE1BQU0sSUFFeER3eUQsRUFBUXRvRSxPQUFPQyxPQUFPMG9FLEVBQW9CNThELEVBQU11OEQsT0FDdEQsSUFBSXh3QyxFQUFjaDJCLEVBQVFyRCxVQUFVNnBFLEVBQU90akMsR0FDdkNsTixJQUNIQSxFQUFjLElBQUlBLEtBR25CLElBQUloQixFQXpMTCxTQUFpQjFsQixHQUNoQixJQUFJMGxCLEVBQU8sR0FDWCxNQUFNcXdDLEVBQVkvMUQsRUFBSXVFLFFBQVEsS0FLOUIsT0FKbUIsSUFBZnd4RCxJQUNIcndDLEVBQU8xbEIsRUFBSWpXLE1BQU1nc0UsSUFHWHJ3QyxFQWtMSTh4QyxDQUFRNzhELEVBQU1xRixLQUt6QixPQUpJckYsRUFBTXk4RCxxQkFDVDF4QyxFQUFPLElBQUlxYyxFQUFPcG5DLEVBQU15OEQsbUJBQW9CeGpDLE1BR3RDLEdBQUc1ekIsSUFBTTBtQixJQUFjaEIsTSx1QkN0WC9CNWlCLEVBQU9wUyxRQUFVLENBQUM4bkMsRUFBUWkvQixLQUN6QixHQUF3QixpQkFBWGovQixHQUE0QyxpQkFBZGkvQixFQUMxQyxNQUFNLElBQUlwekIsVUFBVSxpREFHckIsR0FBa0IsS0FBZG96QixFQUNILE1BQU8sQ0FBQ2ovQixHQUdULE1BQU1rL0IsRUFBaUJsL0IsRUFBT2owQixRQUFRa3pELEdBRXRDLE9BQXdCLElBQXBCQyxFQUNJLENBQUNsL0IsR0FHRixDQUNOQSxFQUFPenVDLE1BQU0sRUFBRzJ0RSxHQUNoQmwvQixFQUFPenVDLE1BQU0ydEUsRUFBaUJELEVBQVV6dEUsVyx1QkNsQjFDOFksRUFBT3BTLFFBQVV3RSxHQUFPN0csbUJBQW1CNkcsR0FBS2EsUUFBUSxZQUFZZixHQUFLLElBQUlBLEVBQUUrWixXQUFXLEdBQUd4YSxTQUFTLElBQUlzeEIsbUIsVUNBMUcvaUIsRUFBT3BTLFFBQVUsV0FDZixJQUFJbWtELEVBQVl2cEQsU0FBUzBwRCxlQUN6QixJQUFLSCxFQUFVOGlCLFdBQ2IsT0FBTyxhQUtULElBSEEsSUFBSUMsRUFBU3RzRSxTQUFTdXNFLGNBRWxCQyxFQUFTLEdBQ0o1dEUsRUFBSSxFQUFHQSxFQUFJMnFELEVBQVU4aUIsV0FBWXp0RSxJQUN4QzR0RSxFQUFPL3NFLEtBQUs4cEQsRUFBVWtqQixXQUFXN3RFLElBR25DLE9BQVEwdEUsRUFBT0ksUUFBUW55QyxlQUNyQixJQUFLLFFBQ0wsSUFBSyxXQUNIK3hDLEVBQU9LLE9BQ1AsTUFFRixRQUNFTCxFQUFTLEtBS2IsT0FEQS9pQixFQUFVeUIsa0JBQ0gsV0FDYyxVQUFuQnpCLEVBQVV2c0QsTUFDVnVzRCxFQUFVeUIsa0JBRUx6QixFQUFVOGlCLFlBQ2JHLEVBQU9qaEUsU0FBUSxTQUFTMEUsR0FDdEJzNUMsRUFBVW9CLFNBQVMxNkMsTUFJdkJxOEQsR0FDQUEsRUFBT00sVyxnQkMzQlgsSUFBSXJtRSxFQUFlLGVBRW5CaVIsRUFBT3BTLFFBQVUsU0FBNkIrRCxHQUM1QyxHQUFJNUMsRUFBYTRDLEdBQU0sQ0FFckIsSUFBSU4sRUFBTVMsT0FBT0QsS0FBS0YsRUFBSTR5QixRQUsxQixPQUpJNXlCLEVBQUljLGFBQWVkLEVBQUk0eUIsT0FBTzl4QixhQUVoQ3BCLEVBQU1BLEVBQUlwSyxNQUFNMEssRUFBSW0zRCxXQUFZbjNELEVBQUltM0QsV0FBYW4zRCxFQUFJYyxhQUVoRHBCLEVBR1AsT0FBT1MsT0FBT0QsS0FBS0YiLCJmaWxlIjoiMjQ4NS5tYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fc3ByZWFkQXJyYXlzID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5cykgfHwgZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcbiAgICByZXR1cm4gcjtcbn07XG52YXIgQnJvd3NlckluZm8gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnJvd3NlckluZm8obmFtZSwgdmVyc2lvbiwgb3MpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgdGhpcy5vcyA9IG9zO1xuICAgICAgICB0aGlzLnR5cGUgPSAnYnJvd3Nlcic7XG4gICAgfVxuICAgIHJldHVybiBCcm93c2VySW5mbztcbn0oKSk7XG5leHBvcnQgeyBCcm93c2VySW5mbyB9O1xudmFyIE5vZGVJbmZvID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5vZGVJbmZvKHZlcnNpb24pIHtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgdGhpcy50eXBlID0gJ25vZGUnO1xuICAgICAgICB0aGlzLm5hbWUgPSAnbm9kZSc7XG4gICAgICAgIHRoaXMub3MgPSBwcm9jZXNzLnBsYXRmb3JtO1xuICAgIH1cbiAgICByZXR1cm4gTm9kZUluZm87XG59KCkpO1xuZXhwb3J0IHsgTm9kZUluZm8gfTtcbnZhciBTZWFyY2hCb3REZXZpY2VJbmZvID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNlYXJjaEJvdERldmljZUluZm8obmFtZSwgdmVyc2lvbiwgb3MsIGJvdCkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICB0aGlzLm9zID0gb3M7XG4gICAgICAgIHRoaXMuYm90ID0gYm90O1xuICAgICAgICB0aGlzLnR5cGUgPSAnYm90LWRldmljZSc7XG4gICAgfVxuICAgIHJldHVybiBTZWFyY2hCb3REZXZpY2VJbmZvO1xufSgpKTtcbmV4cG9ydCB7IFNlYXJjaEJvdERldmljZUluZm8gfTtcbnZhciBCb3RJbmZvID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJvdEluZm8oKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdib3QnO1xuICAgICAgICB0aGlzLmJvdCA9IHRydWU7IC8vIE5PVEU6IGRlcHJlY2F0ZWQgdGVzdCBuYW1lIGluc3RlYWRcbiAgICAgICAgdGhpcy5uYW1lID0gJ2JvdCc7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IG51bGw7XG4gICAgICAgIHRoaXMub3MgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gQm90SW5mbztcbn0oKSk7XG5leHBvcnQgeyBCb3RJbmZvIH07XG52YXIgUmVhY3ROYXRpdmVJbmZvID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlYWN0TmF0aXZlSW5mbygpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ3JlYWN0LW5hdGl2ZSc7XG4gICAgICAgIHRoaXMubmFtZSA9ICdyZWFjdC1uYXRpdmUnO1xuICAgICAgICB0aGlzLnZlcnNpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm9zID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIFJlYWN0TmF0aXZlSW5mbztcbn0oKSk7XG5leHBvcnQgeyBSZWFjdE5hdGl2ZUluZm8gfTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcbnZhciBTRUFSQ0hCT1hfVUFfUkVHRVggPSAvYWxleGF8Ym90fGNyYXdsKGVyfGluZyl8ZmFjZWJvb2tleHRlcm5hbGhpdHxmZWVkYnVybmVyfGdvb2dsZSB3ZWIgcHJldmlld3xuYWdpb3N8cG9zdHJhbmt8cGluZ2RvbXxzbHVycHxzcGlkZXJ8eWFob28hfHlhbmRleC87XG52YXIgU0VBUkNIQk9UX09TX1JFR0VYID0gLyhudWhrfEdvb2dsZWJvdHxZYW1teWJvdHxPcGVuYm90fFNsdXJwfE1TTkJvdHxBc2tcXCBKZWV2ZXNcXC9UZW9tYXxpYV9hcmNoaXZlcikvO1xudmFyIFJFUVVJUkVEX1ZFUlNJT05fUEFSVFMgPSAzO1xudmFyIHVzZXJBZ2VudFJ1bGVzID0gW1xuICAgIFsnYW9sJywgL0FPTFNoaWVsZFxcLyhbMC05XFwuX10rKS9dLFxuICAgIFsnZWRnZScsIC9FZGdlXFwvKFswLTlcXC5fXSspL10sXG4gICAgWydlZGdlLWlvcycsIC9FZGdpT1NcXC8oWzAtOVxcLl9dKykvXSxcbiAgICBbJ3lhbmRleGJyb3dzZXInLCAvWWFCcm93c2VyXFwvKFswLTlcXC5fXSspL10sXG4gICAgWydrYWthb3RhbGsnLCAvS0FLQU9UQUxLXFxzKFswLTlcXC5dKykvXSxcbiAgICBbJ3NhbXN1bmcnLCAvU2Ftc3VuZ0Jyb3dzZXJcXC8oWzAtOVxcLl0rKS9dLFxuICAgIFsnc2lsaycsIC9cXGJTaWxrXFwvKFswLTkuXy1dKylcXGIvXSxcbiAgICBbJ21pdWknLCAvTWl1aUJyb3dzZXJcXC8oWzAtOVxcLl0rKSQvXSxcbiAgICBbJ2JlYWtlcicsIC9CZWFrZXJCcm93c2VyXFwvKFswLTlcXC5dKykvXSxcbiAgICBbJ2VkZ2UtY2hyb21pdW0nLCAvRWRnQT9cXC8oWzAtOVxcLl0rKS9dLFxuICAgIFtcbiAgICAgICAgJ2Nocm9taXVtLXdlYnZpZXcnLFxuICAgICAgICAvKD8hQ2hyb20uKk9QUil3dlxcKS4qQ2hyb20oPzplfGl1bSlcXC8oWzAtOVxcLl0rKSg6P1xcc3wkKS8sXG4gICAgXSxcbiAgICBbJ2Nocm9tZScsIC8oPyFDaHJvbS4qT1BSKUNocm9tKD86ZXxpdW0pXFwvKFswLTlcXC5dKykoOj9cXHN8JCkvXSxcbiAgICBbJ3BoYW50b21qcycsIC9QaGFudG9tSlNcXC8oWzAtOVxcLl0rKSg6P1xcc3wkKS9dLFxuICAgIFsnY3Jpb3MnLCAvQ3JpT1NcXC8oWzAtOVxcLl0rKSg6P1xcc3wkKS9dLFxuICAgIFsnZmlyZWZveCcsIC9GaXJlZm94XFwvKFswLTlcXC5dKykoPzpcXHN8JCkvXSxcbiAgICBbJ2Z4aW9zJywgL0Z4aU9TXFwvKFswLTlcXC5dKykvXSxcbiAgICBbJ29wZXJhLW1pbmknLCAvT3BlcmEgTWluaS4qVmVyc2lvblxcLyhbMC05XFwuXSspL10sXG4gICAgWydvcGVyYScsIC9PcGVyYVxcLyhbMC05XFwuXSspKD86XFxzfCQpL10sXG4gICAgWydvcGVyYScsIC9PUFJcXC8oWzAtOVxcLl0rKSg6P1xcc3wkKS9dLFxuICAgIFsnaWUnLCAvVHJpZGVudFxcLzdcXC4wLipydlxcOihbMC05XFwuXSspLipcXCkuKkdlY2tvJC9dLFxuICAgIFsnaWUnLCAvTVNJRVxccyhbMC05XFwuXSspOy4qVHJpZGVudFxcL1s0LTddLjAvXSxcbiAgICBbJ2llJywgL01TSUVcXHMoN1xcLjApL10sXG4gICAgWydiYjEwJywgL0JCMTA7XFxzVG91Y2guKlZlcnNpb25cXC8oWzAtOVxcLl0rKS9dLFxuICAgIFsnYW5kcm9pZCcsIC9BbmRyb2lkXFxzKFswLTlcXC5dKykvXSxcbiAgICBbJ2lvcycsIC9WZXJzaW9uXFwvKFswLTlcXC5fXSspLipNb2JpbGUuKlNhZmFyaS4qL10sXG4gICAgWydzYWZhcmknLCAvVmVyc2lvblxcLyhbMC05XFwuX10rKS4qU2FmYXJpL10sXG4gICAgWydmYWNlYm9vaycsIC9GQkFWXFwvKFswLTlcXC5dKykvXSxcbiAgICBbJ2luc3RhZ3JhbScsIC9JbnN0YWdyYW1cXHMoWzAtOVxcLl0rKS9dLFxuICAgIFsnaW9zLXdlYnZpZXcnLCAvQXBwbGVXZWJLaXRcXC8oWzAtOVxcLl0rKS4qTW9iaWxlL10sXG4gICAgWydpb3Mtd2VidmlldycsIC9BcHBsZVdlYktpdFxcLyhbMC05XFwuXSspLipHZWNrb1xcKSQvXSxcbiAgICBbJ3NlYXJjaGJvdCcsIFNFQVJDSEJPWF9VQV9SRUdFWF0sXG5dO1xudmFyIG9wZXJhdGluZ1N5c3RlbVJ1bGVzID0gW1xuICAgIFsnaU9TJywgL2lQKGhvbmV8b2R8YWQpL10sXG4gICAgWydBbmRyb2lkIE9TJywgL0FuZHJvaWQvXSxcbiAgICBbJ0JsYWNrQmVycnkgT1MnLCAvQmxhY2tCZXJyeXxCQjEwL10sXG4gICAgWydXaW5kb3dzIE1vYmlsZScsIC9JRU1vYmlsZS9dLFxuICAgIFsnQW1hem9uIE9TJywgL0tpbmRsZS9dLFxuICAgIFsnV2luZG93cyAzLjExJywgL1dpbjE2L10sXG4gICAgWydXaW5kb3dzIDk1JywgLyhXaW5kb3dzIDk1KXwoV2luOTUpfChXaW5kb3dzXzk1KS9dLFxuICAgIFsnV2luZG93cyA5OCcsIC8oV2luZG93cyA5OCl8KFdpbjk4KS9dLFxuICAgIFsnV2luZG93cyAyMDAwJywgLyhXaW5kb3dzIE5UIDUuMCl8KFdpbmRvd3MgMjAwMCkvXSxcbiAgICBbJ1dpbmRvd3MgWFAnLCAvKFdpbmRvd3MgTlQgNS4xKXwoV2luZG93cyBYUCkvXSxcbiAgICBbJ1dpbmRvd3MgU2VydmVyIDIwMDMnLCAvKFdpbmRvd3MgTlQgNS4yKS9dLFxuICAgIFsnV2luZG93cyBWaXN0YScsIC8oV2luZG93cyBOVCA2LjApL10sXG4gICAgWydXaW5kb3dzIDcnLCAvKFdpbmRvd3MgTlQgNi4xKS9dLFxuICAgIFsnV2luZG93cyA4JywgLyhXaW5kb3dzIE5UIDYuMikvXSxcbiAgICBbJ1dpbmRvd3MgOC4xJywgLyhXaW5kb3dzIE5UIDYuMykvXSxcbiAgICBbJ1dpbmRvd3MgMTAnLCAvKFdpbmRvd3MgTlQgMTAuMCkvXSxcbiAgICBbJ1dpbmRvd3MgTUUnLCAvV2luZG93cyBNRS9dLFxuICAgIFsnT3BlbiBCU0QnLCAvT3BlbkJTRC9dLFxuICAgIFsnU3VuIE9TJywgL1N1bk9TL10sXG4gICAgWydDaHJvbWUgT1MnLCAvQ3JPUy9dLFxuICAgIFsnTGludXgnLCAvKExpbnV4KXwoWDExKS9dLFxuICAgIFsnTWFjIE9TJywgLyhNYWNfUG93ZXJQQyl8KE1hY2ludG9zaCkvXSxcbiAgICBbJ1FOWCcsIC9RTlgvXSxcbiAgICBbJ0JlT1MnLCAvQmVPUy9dLFxuICAgIFsnT1MvMicsIC9PU1xcLzIvXSxcbl07XG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0KHVzZXJBZ2VudCkge1xuICAgIGlmICghIXVzZXJBZ2VudCkge1xuICAgICAgICByZXR1cm4gcGFyc2VVc2VyQWdlbnQodXNlckFnZW50KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWFjdE5hdGl2ZUluZm8oKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBwYXJzZVVzZXJBZ2VudChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIGdldE5vZGVWZXJzaW9uKCk7XG59XG5mdW5jdGlvbiBtYXRjaFVzZXJBZ2VudCh1YSkge1xuICAgIC8vIG9wdGVkIGZvciB1c2luZyByZWR1Y2UgaGVyZSByYXRoZXIgdGhhbiBBcnJheSNmaXJzdCB3aXRoIGEgcmVnZXgudGVzdCBjYWxsXG4gICAgLy8gdGhpcyBpcyBwcmltYXJpbHkgYmVjYXVzZSB1c2luZyB0aGUgcmVkdWNlIHdlIG9ubHkgcGVyZm9ybSB0aGUgcmVnZXhcbiAgICAvLyBleGVjdXRpb24gb25jZSByYXRoZXIgdGhhbiBvbmNlIGZvciB0aGUgdGVzdCBhbmQgZm9yIHRoZSBleGVjIGFnYWluIGJlbG93XG4gICAgLy8gcHJvYmFibHkgc29tZXRoaW5nIHRoYXQgbmVlZHMgdG8gYmUgYmVuY2htYXJrZWQgdGhvdWdoXG4gICAgcmV0dXJuICh1YSAhPT0gJycgJiZcbiAgICAgICAgdXNlckFnZW50UnVsZXMucmVkdWNlKGZ1bmN0aW9uIChtYXRjaGVkLCBfYSkge1xuICAgICAgICAgICAgdmFyIGJyb3dzZXIgPSBfYVswXSwgcmVnZXggPSBfYVsxXTtcbiAgICAgICAgICAgIGlmIChtYXRjaGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdWFNYXRjaCA9IHJlZ2V4LmV4ZWModWEpO1xuICAgICAgICAgICAgcmV0dXJuICEhdWFNYXRjaCAmJiBbYnJvd3NlciwgdWFNYXRjaF07XG4gICAgICAgIH0sIGZhbHNlKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYnJvd3Nlck5hbWUodWEpIHtcbiAgICB2YXIgZGF0YSA9IG1hdGNoVXNlckFnZW50KHVhKTtcbiAgICByZXR1cm4gZGF0YSA/IGRhdGFbMF0gOiBudWxsO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVXNlckFnZW50KHVhKSB7XG4gICAgdmFyIG1hdGNoZWRSdWxlID0gbWF0Y2hVc2VyQWdlbnQodWEpO1xuICAgIGlmICghbWF0Y2hlZFJ1bGUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBuYW1lID0gbWF0Y2hlZFJ1bGVbMF0sIG1hdGNoID0gbWF0Y2hlZFJ1bGVbMV07XG4gICAgaWYgKG5hbWUgPT09ICdzZWFyY2hib3QnKSB7XG4gICAgICAgIHJldHVybiBuZXcgQm90SW5mbygpO1xuICAgIH1cbiAgICB2YXIgdmVyc2lvblBhcnRzID0gbWF0Y2hbMV0gJiYgbWF0Y2hbMV0uc3BsaXQoL1suX10vKS5zbGljZSgwLCAzKTtcbiAgICBpZiAodmVyc2lvblBhcnRzKSB7XG4gICAgICAgIGlmICh2ZXJzaW9uUGFydHMubGVuZ3RoIDwgUkVRVUlSRURfVkVSU0lPTl9QQVJUUykge1xuICAgICAgICAgICAgdmVyc2lvblBhcnRzID0gX19zcHJlYWRBcnJheXModmVyc2lvblBhcnRzLCBjcmVhdGVWZXJzaW9uUGFydHMoUkVRVUlSRURfVkVSU0lPTl9QQVJUUyAtIHZlcnNpb25QYXJ0cy5sZW5ndGgpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmVyc2lvblBhcnRzID0gW107XG4gICAgfVxuICAgIHZhciB2ZXJzaW9uID0gdmVyc2lvblBhcnRzLmpvaW4oJy4nKTtcbiAgICB2YXIgb3MgPSBkZXRlY3RPUyh1YSk7XG4gICAgdmFyIHNlYXJjaEJvdE1hdGNoID0gU0VBUkNIQk9UX09TX1JFR0VYLmV4ZWModWEpO1xuICAgIGlmIChzZWFyY2hCb3RNYXRjaCAmJiBzZWFyY2hCb3RNYXRjaFsxXSkge1xuICAgICAgICByZXR1cm4gbmV3IFNlYXJjaEJvdERldmljZUluZm8obmFtZSwgdmVyc2lvbiwgb3MsIHNlYXJjaEJvdE1hdGNoWzFdKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBCcm93c2VySW5mbyhuYW1lLCB2ZXJzaW9uLCBvcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0T1ModWEpIHtcbiAgICBmb3IgKHZhciBpaSA9IDAsIGNvdW50ID0gb3BlcmF0aW5nU3lzdGVtUnVsZXMubGVuZ3RoOyBpaSA8IGNvdW50OyBpaSsrKSB7XG4gICAgICAgIHZhciBfYSA9IG9wZXJhdGluZ1N5c3RlbVJ1bGVzW2lpXSwgb3MgPSBfYVswXSwgcmVnZXggPSBfYVsxXTtcbiAgICAgICAgdmFyIG1hdGNoID0gcmVnZXguZXhlYyh1YSk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIG9zO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE5vZGVWZXJzaW9uKCkge1xuICAgIHZhciBpc05vZGUgPSB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy52ZXJzaW9uO1xuICAgIHJldHVybiBpc05vZGUgPyBuZXcgTm9kZUluZm8ocHJvY2Vzcy52ZXJzaW9uLnNsaWNlKDEpKSA6IG51bGw7XG59XG5mdW5jdGlvbiBjcmVhdGVWZXJzaW9uUGFydHMoY291bnQpIHtcbiAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGNvdW50OyBpaSsrKSB7XG4gICAgICAgIG91dHB1dC5wdXNoKCcwJyk7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG59XG4iLCJpbXBvcnQgKiBhcyB3aW5kb3dNZXRhZGF0YSBmcm9tIFwiQHdhbGxldGNvbm5lY3Qvd2luZG93LW1ldGFkYXRhXCI7XG5pbXBvcnQgKiBhcyB3aW5kb3dHZXR0ZXJzIGZyb20gXCJAd2FsbGV0Y29ubmVjdC93aW5kb3ctZ2V0dGVyc1wiO1xuaW1wb3J0IHsgZGV0ZWN0LCB9IGZyb20gXCJkZXRlY3QtYnJvd3NlclwiO1xuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdEVudih1c2VyQWdlbnQpIHtcbiAgICByZXR1cm4gZGV0ZWN0KHVzZXJBZ2VudCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0T1MoKSB7XG4gICAgY29uc3QgZW52ID0gZGV0ZWN0RW52KCk7XG4gICAgcmV0dXJuIGVudiAmJiBlbnYub3MgPyBlbnYub3MgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNBbmRyb2lkKCkge1xuICAgIGNvbnN0IG9zID0gZGV0ZWN0T1MoKTtcbiAgICByZXR1cm4gb3MgPyBvcy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKFwiYW5kcm9pZFwiKSA6IGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSU9TKCkge1xuICAgIGNvbnN0IG9zID0gZGV0ZWN0T1MoKTtcbiAgICByZXR1cm4gb3NcbiAgICAgICAgPyBvcy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKFwiaW9zXCIpIHx8XG4gICAgICAgICAgICAob3MudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhcIm1hY1wiKSAmJiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAxKVxuICAgICAgICA6IGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTW9iaWxlKCkge1xuICAgIGNvbnN0IG9zID0gZGV0ZWN0T1MoKTtcbiAgICByZXR1cm4gb3MgPyBpc0FuZHJvaWQoKSB8fCBpc0lPUygpIDogZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlKCkge1xuICAgIGNvbnN0IGVudiA9IGRldGVjdEVudigpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGVudiAmJiBlbnYubmFtZSA/IGVudi5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwibm9kZVwiIDogZmFsc2U7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0Jyb3dzZXIoKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gIWlzTm9kZSgpICYmICEhZ2V0TmF2aWdhdG9yKCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBjb25zdCBnZXRGcm9tV2luZG93ID0gd2luZG93R2V0dGVycy5nZXRGcm9tV2luZG93O1xuZXhwb3J0IGNvbnN0IGdldEZyb21XaW5kb3dPclRocm93ID0gd2luZG93R2V0dGVycy5nZXRGcm9tV2luZG93T3JUaHJvdztcbmV4cG9ydCBjb25zdCBnZXREb2N1bWVudE9yVGhyb3cgPSB3aW5kb3dHZXR0ZXJzLmdldERvY3VtZW50T3JUaHJvdztcbmV4cG9ydCBjb25zdCBnZXREb2N1bWVudCA9IHdpbmRvd0dldHRlcnMuZ2V0RG9jdW1lbnQ7XG5leHBvcnQgY29uc3QgZ2V0TmF2aWdhdG9yT3JUaHJvdyA9IHdpbmRvd0dldHRlcnMuZ2V0TmF2aWdhdG9yT3JUaHJvdztcbmV4cG9ydCBjb25zdCBnZXROYXZpZ2F0b3IgPSB3aW5kb3dHZXR0ZXJzLmdldE5hdmlnYXRvcjtcbmV4cG9ydCBjb25zdCBnZXRMb2NhdGlvbk9yVGhyb3cgPSB3aW5kb3dHZXR0ZXJzLmdldExvY2F0aW9uT3JUaHJvdztcbmV4cG9ydCBjb25zdCBnZXRMb2NhdGlvbiA9IHdpbmRvd0dldHRlcnMuZ2V0TG9jYXRpb247XG5leHBvcnQgY29uc3QgZ2V0Q3J5cHRvT3JUaHJvdyA9IHdpbmRvd0dldHRlcnMuZ2V0Q3J5cHRvT3JUaHJvdztcbmV4cG9ydCBjb25zdCBnZXRDcnlwdG8gPSB3aW5kb3dHZXR0ZXJzLmdldENyeXB0bztcbmV4cG9ydCBjb25zdCBnZXRMb2NhbFN0b3JhZ2VPclRocm93ID0gd2luZG93R2V0dGVycy5nZXRMb2NhbFN0b3JhZ2VPclRocm93O1xuZXhwb3J0IGNvbnN0IGdldExvY2FsU3RvcmFnZSA9IHdpbmRvd0dldHRlcnMuZ2V0TG9jYWxTdG9yYWdlO1xuZXhwb3J0IGZ1bmN0aW9uIGdldENsaWVudE1ldGEoKSB7XG4gICAgcmV0dXJuIHdpbmRvd01ldGFkYXRhLmdldFdpbmRvd01ldGFkYXRhKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icm93c2VyLmpzLm1hcCIsImltcG9ydCAqIGFzIHNhZmVKc29uIGZyb20gXCJAd2FsbGV0Y29ubmVjdC9zYWZlLWpzb25cIjtcbmV4cG9ydCBjb25zdCBzYWZlSnNvblBhcnNlID0gc2FmZUpzb24uc2FmZUpzb25QYXJzZTtcbmV4cG9ydCBjb25zdCBzYWZlSnNvblN0cmluZ2lmeSA9IHNhZmVKc29uLnNhZmVKc29uU3RyaW5naWZ5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9anNvbi5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gc2FmZUpzb25QYXJzZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3Qgc2FmZSBqc29uIHBhcnNlIHZhbHVlIG9mIHR5cGUgJHt0eXBlb2YgdmFsdWV9YCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gc2FmZUpzb25TdHJpbmdpZnkodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUgOiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQgeyBzYWZlSnNvblBhcnNlLCBzYWZlSnNvblN0cmluZ2lmeSB9IGZyb20gXCIuL2pzb25cIjtcbmltcG9ydCB7IGdldExvY2FsU3RvcmFnZSB9IGZyb20gXCIuL2Jyb3dzZXJcIjtcbmV4cG9ydCBmdW5jdGlvbiBzZXRMb2NhbChrZXksIGRhdGEpIHtcbiAgICBjb25zdCByYXcgPSBzYWZlSnNvblN0cmluZ2lmeShkYXRhKTtcbiAgICBjb25zdCBsb2NhbCA9IGdldExvY2FsU3RvcmFnZSgpO1xuICAgIGlmIChsb2NhbCkge1xuICAgICAgICBsb2NhbC5zZXRJdGVtKGtleSwgcmF3KTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9jYWwoa2V5KSB7XG4gICAgbGV0IGRhdGEgPSBudWxsO1xuICAgIGxldCByYXcgPSBudWxsO1xuICAgIGNvbnN0IGxvY2FsID0gZ2V0TG9jYWxTdG9yYWdlKCk7XG4gICAgaWYgKGxvY2FsKSB7XG4gICAgICAgIHJhdyA9IGxvY2FsLmdldEl0ZW0oa2V5KTtcbiAgICB9XG4gICAgZGF0YSA9IHJhdyA/IHNhZmVKc29uUGFyc2UocmF3KSA6IHJhdztcbiAgICByZXR1cm4gZGF0YTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVMb2NhbChrZXkpIHtcbiAgICBjb25zdCBsb2NhbCA9IGdldExvY2FsU3RvcmFnZSgpO1xuICAgIGlmIChsb2NhbCkge1xuICAgICAgICBsb2NhbC5yZW1vdmVJdGVtKGtleSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9jYWwuanMubWFwIiwiaW1wb3J0IHsgc2V0TG9jYWwgfSBmcm9tIFwiLi9sb2NhbFwiO1xuZXhwb3J0IGNvbnN0IG1vYmlsZUxpbmtDaG9pY2VLZXkgPSBcIldBTExFVENPTk5FQ1RfREVFUExJTktfQ0hPSUNFXCI7XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0SU9TTW9iaWxlKHVyaSwgZW50cnkpIHtcbiAgICBjb25zdCBlbmNvZGVkVXJpID0gZW5jb2RlVVJJQ29tcG9uZW50KHVyaSk7XG4gICAgcmV0dXJuIGVudHJ5LnVuaXZlcnNhbExpbmtcbiAgICAgICAgPyBgJHtlbnRyeS51bml2ZXJzYWxMaW5rfS93Yz91cmk9JHtlbmNvZGVkVXJpfWBcbiAgICAgICAgOiBlbnRyeS5kZWVwTGlua1xuICAgICAgICAgICAgPyBgJHtlbnRyeS5kZWVwTGlua30ke2VudHJ5LmRlZXBMaW5rLmVuZHNXaXRoKFwiOlwiKSA/IFwiLy9cIiA6IFwiL1wifXdjP3VyaT0ke2VuY29kZWRVcml9YFxuICAgICAgICAgICAgOiBcIlwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNhdmVNb2JpbGVMaW5rSW5mbyhkYXRhKSB7XG4gICAgY29uc3QgZm9jdXNVcmkgPSBkYXRhLmhyZWYuc3BsaXQoXCI/XCIpWzBdO1xuICAgIHNldExvY2FsKG1vYmlsZUxpbmtDaG9pY2VLZXksIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZGF0YSksIHsgaHJlZjogZm9jdXNVcmkgfSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE1vYmlsZVJlZ2lzdHJ5RW50cnkocmVnaXN0cnksIG5hbWUpIHtcbiAgICByZXR1cm4gcmVnaXN0cnkuZmlsdGVyKChlbnRyeSkgPT4gZW50cnkubmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKG5hbWUudG9Mb3dlckNhc2UoKSkpWzBdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE1vYmlsZUxpbmtSZWdpc3RyeShyZWdpc3RyeSwgd2hpdGVsaXN0KSB7XG4gICAgbGV0IGxpbmtzID0gcmVnaXN0cnk7XG4gICAgaWYgKHdoaXRlbGlzdCkge1xuICAgICAgICBsaW5rcyA9IHdoaXRlbGlzdC5tYXAoKG5hbWUpID0+IGdldE1vYmlsZVJlZ2lzdHJ5RW50cnkocmVnaXN0cnksIG5hbWUpKS5maWx0ZXIoQm9vbGVhbik7XG4gICAgfVxuICAgIHJldHVybiBsaW5rcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vYmlsZS5qcy5tYXAiLCJjb25zdCBBUElfVVJMID0gXCJodHRwczovL3JlZ2lzdHJ5LndhbGxldGNvbm5lY3Qub3JnXCI7XG5leHBvcnQgZnVuY3Rpb24gZ2V0V2FsbGV0UmVnaXN0cnlVcmwoKSB7XG4gICAgcmV0dXJuIEFQSV9VUkwgKyBcIi9kYXRhL3dhbGxldHMuanNvblwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldERhcHBSZWdpc3RyeVVybCgpIHtcbiAgICByZXR1cm4gQVBJX1VSTCArIFwiL2RhdGEvZGFwcHMuanNvblwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEFwcExvZ29VcmwoaWQpIHtcbiAgICByZXR1cm4gQVBJX1VSTCArIFwiL2xvZ28vc20vXCIgKyBpZCArIFwiLmpwZWdcIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRNb2JpbGVSZWdpc3RyeUVudHJ5KGVudHJ5LCBwbGF0Zm9ybSA9IFwibW9iaWxlXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBlbnRyeS5uYW1lIHx8IFwiXCIsXG4gICAgICAgIHNob3J0TmFtZTogZW50cnkubWV0YWRhdGEuc2hvcnROYW1lIHx8IFwiXCIsXG4gICAgICAgIGNvbG9yOiBlbnRyeS5tZXRhZGF0YS5jb2xvcnMucHJpbWFyeSB8fCBcIlwiLFxuICAgICAgICBsb2dvOiBlbnRyeS5pZCA/IGdldEFwcExvZ29VcmwoZW50cnkuaWQpIDogXCJcIixcbiAgICAgICAgdW5pdmVyc2FsTGluazogZW50cnlbcGxhdGZvcm1dLnVuaXZlcnNhbCB8fCBcIlwiLFxuICAgICAgICBkZWVwTGluazogZW50cnlbcGxhdGZvcm1dLm5hdGl2ZSB8fCBcIlwiLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0TW9iaWxlUmVnaXN0cnkocmVnaXN0cnksIHBsYXRmb3JtID0gXCJtb2JpbGVcIikge1xuICAgIHJldHVybiBPYmplY3QudmFsdWVzKHJlZ2lzdHJ5KVxuICAgICAgICAuZmlsdGVyKGVudHJ5ID0+ICEhZW50cnlbcGxhdGZvcm1dLnVuaXZlcnNhbCB8fCAhIWVudHJ5W3BsYXRmb3JtXS5uYXRpdmUpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiBmb3JtYXRNb2JpbGVSZWdpc3RyeUVudHJ5KGVudHJ5LCBwbGF0Zm9ybSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVnaXN0cnkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlbW92ZUhleExlYWRpbmdaZXJvcyA9IGV4cG9ydHMuc2FuaXRpemVIZXggPSBleHBvcnRzLmFkZEhleFByZWZpeCA9IGV4cG9ydHMucmVtb3ZlSGV4UHJlZml4ID0gZXhwb3J0cy5wYWRSaWdodCA9IGV4cG9ydHMucGFkTGVmdCA9IGV4cG9ydHMuc2FuaXRpemVCeXRlcyA9IGV4cG9ydHMuc3dhcEhleCA9IGV4cG9ydHMuc3dhcEJ5dGVzID0gZXhwb3J0cy5zcGxpdEJ5dGVzID0gZXhwb3J0cy5jYWxjQnl0ZUxlbmd0aCA9IGV4cG9ydHMudHJpbVJpZ2h0ID0gZXhwb3J0cy50cmltTGVmdCA9IGV4cG9ydHMuY29uY2F0QXJyYXlzID0gZXhwb3J0cy5jb25jYXRCdWZmZXJzID0gZXhwb3J0cy5nZXRFbmNvZGluZyA9IGV4cG9ydHMuZ2V0VHlwZSA9IGV4cG9ydHMuaXNBcnJheUJ1ZmZlciA9IGV4cG9ydHMuaXNUeXBlZEFycmF5ID0gZXhwb3J0cy5pc0J1ZmZlciA9IGV4cG9ydHMuaXNIZXhTdHJpbmcgPSBleHBvcnRzLmlzQmluYXJ5U3RyaW5nID0gZXhwb3J0cy5iaW5hcnlUb051bWJlciA9IGV4cG9ydHMuYmluYXJ5VG9VdGY4ID0gZXhwb3J0cy5iaW5hcnlUb0hleCA9IGV4cG9ydHMuYmluYXJ5VG9BcnJheSA9IGV4cG9ydHMuYmluYXJ5VG9CdWZmZXIgPSBleHBvcnRzLm51bWJlclRvQmluYXJ5ID0gZXhwb3J0cy5udW1iZXJUb1V0ZjggPSBleHBvcnRzLm51bWJlclRvSGV4ID0gZXhwb3J0cy5udW1iZXJUb0FycmF5ID0gZXhwb3J0cy5udW1iZXJUb0J1ZmZlciA9IGV4cG9ydHMudXRmOFRvQmluYXJ5ID0gZXhwb3J0cy51dGY4VG9OdW1iZXIgPSBleHBvcnRzLnV0ZjhUb0hleCA9IGV4cG9ydHMudXRmOFRvQXJyYXkgPSBleHBvcnRzLnV0ZjhUb0J1ZmZlciA9IGV4cG9ydHMuaGV4VG9CaW5hcnkgPSBleHBvcnRzLmhleFRvTnVtYmVyID0gZXhwb3J0cy5oZXhUb1V0ZjggPSBleHBvcnRzLmhleFRvQXJyYXkgPSBleHBvcnRzLmhleFRvQnVmZmVyID0gZXhwb3J0cy5hcnJheVRvQmluYXJ5ID0gZXhwb3J0cy5hcnJheVRvTnVtYmVyID0gZXhwb3J0cy5hcnJheVRvVXRmOCA9IGV4cG9ydHMuYXJyYXlUb0hleCA9IGV4cG9ydHMuYXJyYXlUb0J1ZmZlciA9IGV4cG9ydHMuYnVmZmVyVG9CaW5hcnkgPSBleHBvcnRzLmJ1ZmZlclRvTnVtYmVyID0gZXhwb3J0cy5idWZmZXJUb1V0ZjggPSBleHBvcnRzLmJ1ZmZlclRvSGV4ID0gZXhwb3J0cy5idWZmZXJUb0FycmF5ID0gdm9pZCAwO1xuY29uc3QgaXNfdHlwZWRhcnJheV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJpcy10eXBlZGFycmF5XCIpKTtcbmNvbnN0IHR5cGVkYXJyYXlfdG9fYnVmZmVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInR5cGVkYXJyYXktdG8tYnVmZmVyXCIpKTtcbmNvbnN0IEVOQ19IRVggPSBcImhleFwiO1xuY29uc3QgRU5DX1VURjggPSBcInV0ZjhcIjtcbmNvbnN0IEVOQ19CSU4gPSBcImJpbmFyeVwiO1xuY29uc3QgVFlQRV9CVUZGRVIgPSBcImJ1ZmZlclwiO1xuY29uc3QgVFlQRV9BUlJBWSA9IFwiYXJyYXlcIjtcbmNvbnN0IFRZUEVfVFlQRURfQVJSQVkgPSBcInR5cGVkLWFycmF5XCI7XG5jb25zdCBUWVBFX0FSUkFZX0JVRkZFUiA9IFwiYXJyYXktYnVmZmVyXCI7XG5jb25zdCBTVFJJTkdfWkVSTyA9IFwiMFwiO1xuZnVuY3Rpb24gYnVmZmVyVG9BcnJheShidWYpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmKTtcbn1cbmV4cG9ydHMuYnVmZmVyVG9BcnJheSA9IGJ1ZmZlclRvQXJyYXk7XG5mdW5jdGlvbiBidWZmZXJUb0hleChidWYsIHByZWZpeGVkID0gZmFsc2UpIHtcbiAgICBjb25zdCBoZXggPSBidWYudG9TdHJpbmcoRU5DX0hFWCk7XG4gICAgcmV0dXJuIHByZWZpeGVkID8gYWRkSGV4UHJlZml4KGhleCkgOiBoZXg7XG59XG5leHBvcnRzLmJ1ZmZlclRvSGV4ID0gYnVmZmVyVG9IZXg7XG5mdW5jdGlvbiBidWZmZXJUb1V0ZjgoYnVmKSB7XG4gICAgcmV0dXJuIGJ1Zi50b1N0cmluZyhFTkNfVVRGOCk7XG59XG5leHBvcnRzLmJ1ZmZlclRvVXRmOCA9IGJ1ZmZlclRvVXRmODtcbmZ1bmN0aW9uIGJ1ZmZlclRvTnVtYmVyKGJ1Zikge1xuICAgIHJldHVybiBidWYucmVhZFVJbnRCRSgwLCBidWYubGVuZ3RoKTtcbn1cbmV4cG9ydHMuYnVmZmVyVG9OdW1iZXIgPSBidWZmZXJUb051bWJlcjtcbmZ1bmN0aW9uIGJ1ZmZlclRvQmluYXJ5KGJ1Zikge1xuICAgIHJldHVybiBhcnJheVRvQmluYXJ5KGJ1ZmZlclRvQXJyYXkoYnVmKSk7XG59XG5leHBvcnRzLmJ1ZmZlclRvQmluYXJ5ID0gYnVmZmVyVG9CaW5hcnk7XG5mdW5jdGlvbiBhcnJheVRvQnVmZmVyKGFycikge1xuICAgIHJldHVybiB0eXBlZGFycmF5X3RvX2J1ZmZlcl8xLmRlZmF1bHQoYXJyKTtcbn1cbmV4cG9ydHMuYXJyYXlUb0J1ZmZlciA9IGFycmF5VG9CdWZmZXI7XG5mdW5jdGlvbiBhcnJheVRvSGV4KGFyciwgcHJlZml4ZWQgPSBmYWxzZSkge1xuICAgIHJldHVybiBidWZmZXJUb0hleChhcnJheVRvQnVmZmVyKGFyciksIHByZWZpeGVkKTtcbn1cbmV4cG9ydHMuYXJyYXlUb0hleCA9IGFycmF5VG9IZXg7XG5mdW5jdGlvbiBhcnJheVRvVXRmOChhcnIpIHtcbiAgICByZXR1cm4gYnVmZmVyVG9VdGY4KGFycmF5VG9CdWZmZXIoYXJyKSk7XG59XG5leHBvcnRzLmFycmF5VG9VdGY4ID0gYXJyYXlUb1V0Zjg7XG5mdW5jdGlvbiBhcnJheVRvTnVtYmVyKGFycikge1xuICAgIHJldHVybiBidWZmZXJUb051bWJlcihhcnJheVRvQnVmZmVyKGFycikpO1xufVxuZXhwb3J0cy5hcnJheVRvTnVtYmVyID0gYXJyYXlUb051bWJlcjtcbmZ1bmN0aW9uIGFycmF5VG9CaW5hcnkoYXJyKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oYXJyKVxuICAgICAgICAubWFwKG51bWJlclRvQmluYXJ5KVxuICAgICAgICAuam9pbihcIlwiKTtcbn1cbmV4cG9ydHMuYXJyYXlUb0JpbmFyeSA9IGFycmF5VG9CaW5hcnk7XG5mdW5jdGlvbiBoZXhUb0J1ZmZlcihoZXgpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20ocmVtb3ZlSGV4UHJlZml4KGhleCksIEVOQ19IRVgpO1xufVxuZXhwb3J0cy5oZXhUb0J1ZmZlciA9IGhleFRvQnVmZmVyO1xuZnVuY3Rpb24gaGV4VG9BcnJheShoZXgpIHtcbiAgICByZXR1cm4gYnVmZmVyVG9BcnJheShoZXhUb0J1ZmZlcihoZXgpKTtcbn1cbmV4cG9ydHMuaGV4VG9BcnJheSA9IGhleFRvQXJyYXk7XG5mdW5jdGlvbiBoZXhUb1V0ZjgoaGV4KSB7XG4gICAgcmV0dXJuIGJ1ZmZlclRvVXRmOChoZXhUb0J1ZmZlcihoZXgpKTtcbn1cbmV4cG9ydHMuaGV4VG9VdGY4ID0gaGV4VG9VdGY4O1xuZnVuY3Rpb24gaGV4VG9OdW1iZXIoaGV4KSB7XG4gICAgcmV0dXJuIGFycmF5VG9OdW1iZXIoaGV4VG9BcnJheShoZXgpKTtcbn1cbmV4cG9ydHMuaGV4VG9OdW1iZXIgPSBoZXhUb051bWJlcjtcbmZ1bmN0aW9uIGhleFRvQmluYXJ5KGhleCkge1xuICAgIHJldHVybiBhcnJheVRvQmluYXJ5KGhleFRvQXJyYXkoaGV4KSk7XG59XG5leHBvcnRzLmhleFRvQmluYXJ5ID0gaGV4VG9CaW5hcnk7XG5mdW5jdGlvbiB1dGY4VG9CdWZmZXIodXRmOCkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbSh1dGY4LCBFTkNfVVRGOCk7XG59XG5leHBvcnRzLnV0ZjhUb0J1ZmZlciA9IHV0ZjhUb0J1ZmZlcjtcbmZ1bmN0aW9uIHV0ZjhUb0FycmF5KHV0ZjgpIHtcbiAgICByZXR1cm4gYnVmZmVyVG9BcnJheSh1dGY4VG9CdWZmZXIodXRmOCkpO1xufVxuZXhwb3J0cy51dGY4VG9BcnJheSA9IHV0ZjhUb0FycmF5O1xuZnVuY3Rpb24gdXRmOFRvSGV4KHV0ZjgsIHByZWZpeGVkID0gZmFsc2UpIHtcbiAgICByZXR1cm4gYnVmZmVyVG9IZXgodXRmOFRvQnVmZmVyKHV0ZjgpLCBwcmVmaXhlZCk7XG59XG5leHBvcnRzLnV0ZjhUb0hleCA9IHV0ZjhUb0hleDtcbmZ1bmN0aW9uIHV0ZjhUb051bWJlcih1dGY4KSB7XG4gICAgY29uc3QgbnVtID0gcGFyc2VJbnQodXRmOCwgMTApO1xuICAgIGFzc2VydChpc0RlZmluZWQobnVtKSwgXCJOdW1iZXIgY2FuIG9ubHkgc2FmZWx5IHN0b3JlIHVwIHRvIDUzIGJpdHNcIik7XG4gICAgcmV0dXJuIG51bTtcbn1cbmV4cG9ydHMudXRmOFRvTnVtYmVyID0gdXRmOFRvTnVtYmVyO1xuZnVuY3Rpb24gdXRmOFRvQmluYXJ5KHV0ZjgpIHtcbiAgICByZXR1cm4gYXJyYXlUb0JpbmFyeSh1dGY4VG9BcnJheSh1dGY4KSk7XG59XG5leHBvcnRzLnV0ZjhUb0JpbmFyeSA9IHV0ZjhUb0JpbmFyeTtcbmZ1bmN0aW9uIG51bWJlclRvQnVmZmVyKG51bSkge1xuICAgIHJldHVybiBiaW5hcnlUb0J1ZmZlcihudW1iZXJUb0JpbmFyeShudW0pKTtcbn1cbmV4cG9ydHMubnVtYmVyVG9CdWZmZXIgPSBudW1iZXJUb0J1ZmZlcjtcbmZ1bmN0aW9uIG51bWJlclRvQXJyYXkobnVtKSB7XG4gICAgcmV0dXJuIGJpbmFyeVRvQXJyYXkobnVtYmVyVG9CaW5hcnkobnVtKSk7XG59XG5leHBvcnRzLm51bWJlclRvQXJyYXkgPSBudW1iZXJUb0FycmF5O1xuZnVuY3Rpb24gbnVtYmVyVG9IZXgobnVtLCBwcmVmaXhlZCkge1xuICAgIHJldHVybiBiaW5hcnlUb0hleChudW1iZXJUb0JpbmFyeShudW0pLCBwcmVmaXhlZCk7XG59XG5leHBvcnRzLm51bWJlclRvSGV4ID0gbnVtYmVyVG9IZXg7XG5mdW5jdGlvbiBudW1iZXJUb1V0ZjgobnVtKSB7XG4gICAgcmV0dXJuIGAke251bX1gO1xufVxuZXhwb3J0cy5udW1iZXJUb1V0ZjggPSBudW1iZXJUb1V0Zjg7XG5mdW5jdGlvbiBudW1iZXJUb0JpbmFyeShudW0pIHtcbiAgICBjb25zdCBiaW4gPSAobnVtID4+PiAwKS50b1N0cmluZygyKTtcbiAgICByZXR1cm4gc2FuaXRpemVCeXRlcyhiaW4pO1xufVxuZXhwb3J0cy5udW1iZXJUb0JpbmFyeSA9IG51bWJlclRvQmluYXJ5O1xuZnVuY3Rpb24gYmluYXJ5VG9CdWZmZXIoYmluKSB7XG4gICAgcmV0dXJuIGFycmF5VG9CdWZmZXIoYmluYXJ5VG9BcnJheShiaW4pKTtcbn1cbmV4cG9ydHMuYmluYXJ5VG9CdWZmZXIgPSBiaW5hcnlUb0J1ZmZlcjtcbmZ1bmN0aW9uIGJpbmFyeVRvQXJyYXkoYmluKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHNwbGl0Qnl0ZXMoYmluKS5tYXAoeCA9PiBwYXJzZUludCh4LCAyKSkpO1xufVxuZXhwb3J0cy5iaW5hcnlUb0FycmF5ID0gYmluYXJ5VG9BcnJheTtcbmZ1bmN0aW9uIGJpbmFyeVRvSGV4KGJpbiwgcHJlZml4ZWQpIHtcbiAgICByZXR1cm4gYXJyYXlUb0hleChiaW5hcnlUb0FycmF5KGJpbiksIHByZWZpeGVkKTtcbn1cbmV4cG9ydHMuYmluYXJ5VG9IZXggPSBiaW5hcnlUb0hleDtcbmZ1bmN0aW9uIGJpbmFyeVRvVXRmOChiaW4pIHtcbiAgICByZXR1cm4gYXJyYXlUb1V0ZjgoYmluYXJ5VG9BcnJheShiaW4pKTtcbn1cbmV4cG9ydHMuYmluYXJ5VG9VdGY4ID0gYmluYXJ5VG9VdGY4O1xuZnVuY3Rpb24gYmluYXJ5VG9OdW1iZXIoYmluKSB7XG4gICAgcmV0dXJuIGFycmF5VG9OdW1iZXIoYmluYXJ5VG9BcnJheShiaW4pKTtcbn1cbmV4cG9ydHMuYmluYXJ5VG9OdW1iZXIgPSBiaW5hcnlUb051bWJlcjtcbmZ1bmN0aW9uIGlzQmluYXJ5U3RyaW5nKHN0cikge1xuICAgIGlmICh0eXBlb2Ygc3RyICE9PSBcInN0cmluZ1wiIHx8ICFuZXcgUmVnRXhwKC9eWzAxXSskLykudGVzdChzdHIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHN0ci5sZW5ndGggJSA4ICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnRzLmlzQmluYXJ5U3RyaW5nID0gaXNCaW5hcnlTdHJpbmc7XG5mdW5jdGlvbiBpc0hleFN0cmluZyhzdHIsIGxlbmd0aCkge1xuICAgIGlmICh0eXBlb2Ygc3RyICE9PSBcInN0cmluZ1wiIHx8ICFzdHIubWF0Y2goL14weFswLTlBLUZhLWZdKiQvKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChsZW5ndGggJiYgc3RyLmxlbmd0aCAhPT0gMiArIDIgKiBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydHMuaXNIZXhTdHJpbmcgPSBpc0hleFN0cmluZztcbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICAgIHJldHVybiBCdWZmZXIuaXNCdWZmZXIodmFsKTtcbn1cbmV4cG9ydHMuaXNCdWZmZXIgPSBpc0J1ZmZlcjtcbmZ1bmN0aW9uIGlzVHlwZWRBcnJheSh2YWwpIHtcbiAgICByZXR1cm4gaXNfdHlwZWRhcnJheV8xLmRlZmF1bHQuc3RyaWN0KHZhbCkgJiYgIWlzQnVmZmVyKHZhbCk7XG59XG5leHBvcnRzLmlzVHlwZWRBcnJheSA9IGlzVHlwZWRBcnJheTtcbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gICAgcmV0dXJuICghaXNUeXBlZEFycmF5KHZhbCkgJiZcbiAgICAgICAgIWlzQnVmZmVyKHZhbCkgJiZcbiAgICAgICAgdHlwZW9mIHZhbC5ieXRlTGVuZ3RoICE9PSBcInVuZGVmaW5lZFwiKTtcbn1cbmV4cG9ydHMuaXNBcnJheUJ1ZmZlciA9IGlzQXJyYXlCdWZmZXI7XG5mdW5jdGlvbiBnZXRUeXBlKHZhbCkge1xuICAgIGlmIChpc0J1ZmZlcih2YWwpKSB7XG4gICAgICAgIHJldHVybiBUWVBFX0JVRkZFUjtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNUeXBlZEFycmF5KHZhbCkpIHtcbiAgICAgICAgcmV0dXJuIFRZUEVfVFlQRURfQVJSQVk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQXJyYXlCdWZmZXIodmFsKSkge1xuICAgICAgICByZXR1cm4gVFlQRV9BUlJBWV9CVUZGRVI7XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgICByZXR1cm4gVFlQRV9BUlJBWTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsO1xuICAgIH1cbn1cbmV4cG9ydHMuZ2V0VHlwZSA9IGdldFR5cGU7XG5mdW5jdGlvbiBnZXRFbmNvZGluZyhzdHIpIHtcbiAgICBpZiAoaXNCaW5hcnlTdHJpbmcoc3RyKSkge1xuICAgICAgICByZXR1cm4gRU5DX0JJTjtcbiAgICB9XG4gICAgaWYgKGlzSGV4U3RyaW5nKHN0cikpIHtcbiAgICAgICAgcmV0dXJuIEVOQ19IRVg7XG4gICAgfVxuICAgIHJldHVybiBFTkNfVVRGODtcbn1cbmV4cG9ydHMuZ2V0RW5jb2RpbmcgPSBnZXRFbmNvZGluZztcbmZ1bmN0aW9uIGNvbmNhdEJ1ZmZlcnMoLi4uYXJncykge1xuICAgIGNvbnN0IHJlc3VsdCA9IEJ1ZmZlci5jb25jYXQoYXJncyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuY29uY2F0QnVmZmVycyA9IGNvbmNhdEJ1ZmZlcnM7XG5mdW5jdGlvbiBjb25jYXRBcnJheXMoLi4uYXJncykge1xuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICBhcmdzLmZvckVhY2goYXJnID0+IChyZXN1bHQgPSByZXN1bHQuY29uY2F0KEFycmF5LmZyb20oYXJnKSkpKTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWy4uLnJlc3VsdF0pO1xufVxuZXhwb3J0cy5jb25jYXRBcnJheXMgPSBjb25jYXRBcnJheXM7XG5mdW5jdGlvbiB0cmltTGVmdChkYXRhLCBsZW5ndGgpIHtcbiAgICBjb25zdCBkaWZmID0gZGF0YS5sZW5ndGggLSBsZW5ndGg7XG4gICAgaWYgKGRpZmYgPiAwKSB7XG4gICAgICAgIGRhdGEgPSBkYXRhLnNsaWNlKGRpZmYpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbn1cbmV4cG9ydHMudHJpbUxlZnQgPSB0cmltTGVmdDtcbmZ1bmN0aW9uIHRyaW1SaWdodChkYXRhLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gZGF0YS5zbGljZSgwLCBsZW5ndGgpO1xufVxuZXhwb3J0cy50cmltUmlnaHQgPSB0cmltUmlnaHQ7XG5mdW5jdGlvbiBjYWxjQnl0ZUxlbmd0aChsZW5ndGgsIGJ5dGVTaXplID0gOCkge1xuICAgIGNvbnN0IHJlbWFpbmRlciA9IGxlbmd0aCAlIGJ5dGVTaXplO1xuICAgIHJldHVybiByZW1haW5kZXJcbiAgICAgICAgPyAoKGxlbmd0aCAtIHJlbWFpbmRlcikgLyBieXRlU2l6ZSkgKiBieXRlU2l6ZSArIGJ5dGVTaXplXG4gICAgICAgIDogbGVuZ3RoO1xufVxuZXhwb3J0cy5jYWxjQnl0ZUxlbmd0aCA9IGNhbGNCeXRlTGVuZ3RoO1xuZnVuY3Rpb24gc3BsaXRCeXRlcyhzdHIsIGJ5dGVTaXplID0gOCkge1xuICAgIGNvbnN0IGJ5dGVzID0gc2FuaXRpemVCeXRlcyhzdHIpLm1hdGNoKG5ldyBSZWdFeHAoYC57JHtieXRlU2l6ZX19YCwgXCJnaVwiKSk7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oYnl0ZXMgfHwgW10pO1xufVxuZXhwb3J0cy5zcGxpdEJ5dGVzID0gc3BsaXRCeXRlcztcbmZ1bmN0aW9uIHN3YXBCeXRlcyhzdHIpIHtcbiAgICByZXR1cm4gc3BsaXRCeXRlcyhzdHIpXG4gICAgICAgIC5tYXAocmV2ZXJzZVN0cmluZylcbiAgICAgICAgLmpvaW4oXCJcIik7XG59XG5leHBvcnRzLnN3YXBCeXRlcyA9IHN3YXBCeXRlcztcbmZ1bmN0aW9uIHN3YXBIZXgoc3RyKSB7XG4gICAgcmV0dXJuIGJpbmFyeVRvSGV4KHN3YXBCeXRlcyhoZXhUb0JpbmFyeShzdHIpKSk7XG59XG5leHBvcnRzLnN3YXBIZXggPSBzd2FwSGV4O1xuZnVuY3Rpb24gc2FuaXRpemVCeXRlcyhzdHIsIGJ5dGVTaXplID0gOCwgcGFkZGluZyA9IFNUUklOR19aRVJPKSB7XG4gICAgcmV0dXJuIHBhZExlZnQoc3RyLCBjYWxjQnl0ZUxlbmd0aChzdHIubGVuZ3RoLCBieXRlU2l6ZSksIHBhZGRpbmcpO1xufVxuZXhwb3J0cy5zYW5pdGl6ZUJ5dGVzID0gc2FuaXRpemVCeXRlcztcbmZ1bmN0aW9uIHBhZExlZnQoc3RyLCBsZW5ndGgsIHBhZGRpbmcgPSBTVFJJTkdfWkVSTykge1xuICAgIHJldHVybiBwYWRTdHJpbmcoc3RyLCBsZW5ndGgsIHRydWUsIHBhZGRpbmcpO1xufVxuZXhwb3J0cy5wYWRMZWZ0ID0gcGFkTGVmdDtcbmZ1bmN0aW9uIHBhZFJpZ2h0KHN0ciwgbGVuZ3RoLCBwYWRkaW5nID0gU1RSSU5HX1pFUk8pIHtcbiAgICByZXR1cm4gcGFkU3RyaW5nKHN0ciwgbGVuZ3RoLCBmYWxzZSwgcGFkZGluZyk7XG59XG5leHBvcnRzLnBhZFJpZ2h0ID0gcGFkUmlnaHQ7XG5mdW5jdGlvbiByZW1vdmVIZXhQcmVmaXgoaGV4KSB7XG4gICAgcmV0dXJuIGhleC5yZXBsYWNlKC9eMHgvLCBcIlwiKTtcbn1cbmV4cG9ydHMucmVtb3ZlSGV4UHJlZml4ID0gcmVtb3ZlSGV4UHJlZml4O1xuZnVuY3Rpb24gYWRkSGV4UHJlZml4KGhleCkge1xuICAgIHJldHVybiBoZXguc3RhcnRzV2l0aChcIjB4XCIpID8gaGV4IDogYDB4JHtoZXh9YDtcbn1cbmV4cG9ydHMuYWRkSGV4UHJlZml4ID0gYWRkSGV4UHJlZml4O1xuZnVuY3Rpb24gc2FuaXRpemVIZXgoaGV4KSB7XG4gICAgaGV4ID0gcmVtb3ZlSGV4UHJlZml4KGhleCk7XG4gICAgaGV4ID0gc2FuaXRpemVCeXRlcyhoZXgsIDIpO1xuICAgIGlmIChoZXgpIHtcbiAgICAgICAgaGV4ID0gYWRkSGV4UHJlZml4KGhleCk7XG4gICAgfVxuICAgIHJldHVybiBoZXg7XG59XG5leHBvcnRzLnNhbml0aXplSGV4ID0gc2FuaXRpemVIZXg7XG5mdW5jdGlvbiByZW1vdmVIZXhMZWFkaW5nWmVyb3MoaGV4KSB7XG4gICAgY29uc3QgcHJlZml4ZWQgPSBoZXguc3RhcnRzV2l0aChcIjB4XCIpO1xuICAgIGhleCA9IHJlbW92ZUhleFByZWZpeChoZXgpO1xuICAgIGhleCA9IGhleC5zdGFydHNXaXRoKFNUUklOR19aRVJPKSA/IGhleC5zdWJzdHJpbmcoMSkgOiBoZXg7XG4gICAgcmV0dXJuIHByZWZpeGVkID8gYWRkSGV4UHJlZml4KGhleCkgOiBoZXg7XG59XG5leHBvcnRzLnJlbW92ZUhleExlYWRpbmdaZXJvcyA9IHJlbW92ZUhleExlYWRpbmdaZXJvcztcbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIjtcbn1cbmZ1bmN0aW9uIGlzRGVmaW5lZCh2YWx1ZSkge1xuICAgIHJldHVybiAhaXNVbmRlZmluZWQodmFsdWUpO1xufVxuZnVuY3Rpb24gYXNzZXJ0KGFzc2VydGlvbiwgZXJyb3JNZXNzYWdlKSB7XG4gICAgaWYgKCFhc3NlcnRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gcmV2ZXJzZVN0cmluZyhzdHIpIHtcbiAgICByZXR1cm4gc3RyXG4gICAgICAgIC5zcGxpdChcIlwiKVxuICAgICAgICAucmV2ZXJzZSgpXG4gICAgICAgIC5qb2luKFwiXCIpO1xufVxuZnVuY3Rpb24gcGFkU3RyaW5nKHN0ciwgbGVuZ3RoLCBsZWZ0LCBwYWRkaW5nID0gU1RSSU5HX1pFUk8pIHtcbiAgICBjb25zdCBkaWZmID0gbGVuZ3RoIC0gc3RyLmxlbmd0aDtcbiAgICBsZXQgcmVzdWx0ID0gc3RyO1xuICAgIGlmIChkaWZmID4gMCkge1xuICAgICAgICBjb25zdCBwYWQgPSBwYWRkaW5nLnJlcGVhdChkaWZmKTtcbiAgICAgICAgcmVzdWx0ID0gbGVmdCA/IHBhZCArIHN0ciA6IHN0ciArIHBhZDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0Jyb3dzZXJDcnlwdG9BdmFpbGFibGUgPSBleHBvcnRzLmdldFN1YnRsZUNyeXB0byA9IGV4cG9ydHMuZ2V0QnJvd2VyQ3J5cHRvID0gdm9pZCAwO1xuZnVuY3Rpb24gZ2V0QnJvd2VyQ3J5cHRvKCkge1xuICAgIHJldHVybiAoZ2xvYmFsID09PSBudWxsIHx8IGdsb2JhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZ2xvYmFsLmNyeXB0bykgfHwgKGdsb2JhbCA9PT0gbnVsbCB8fCBnbG9iYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGdsb2JhbC5tc0NyeXB0bykgfHwge307XG59XG5leHBvcnRzLmdldEJyb3dlckNyeXB0byA9IGdldEJyb3dlckNyeXB0bztcbmZ1bmN0aW9uIGdldFN1YnRsZUNyeXB0bygpIHtcbiAgICBjb25zdCBicm93c2VyQ3J5cHRvID0gZ2V0QnJvd2VyQ3J5cHRvKCk7XG4gICAgcmV0dXJuIGJyb3dzZXJDcnlwdG8uc3VidGxlIHx8IGJyb3dzZXJDcnlwdG8ud2Via2l0U3VidGxlO1xufVxuZXhwb3J0cy5nZXRTdWJ0bGVDcnlwdG8gPSBnZXRTdWJ0bGVDcnlwdG87XG5mdW5jdGlvbiBpc0Jyb3dzZXJDcnlwdG9BdmFpbGFibGUoKSB7XG4gICAgcmV0dXJuICEhZ2V0QnJvd2VyQ3J5cHRvKCkgJiYgISFnZXRTdWJ0bGVDcnlwdG8oKTtcbn1cbmV4cG9ydHMuaXNCcm93c2VyQ3J5cHRvQXZhaWxhYmxlID0gaXNCcm93c2VyQ3J5cHRvQXZhaWxhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3J5cHRvLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0Jyb3dzZXIgPSBleHBvcnRzLmlzTm9kZSA9IGV4cG9ydHMuaXNSZWFjdE5hdGl2ZSA9IHZvaWQgMDtcbmZ1bmN0aW9uIGlzUmVhY3ROYXRpdmUoKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gXCJSZWFjdE5hdGl2ZVwiKTtcbn1cbmV4cG9ydHMuaXNSZWFjdE5hdGl2ZSA9IGlzUmVhY3ROYXRpdmU7XG5mdW5jdGlvbiBpc05vZGUoKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlICE9PSBcInVuZGVmaW5lZFwiKTtcbn1cbmV4cG9ydHMuaXNOb2RlID0gaXNOb2RlO1xuZnVuY3Rpb24gaXNCcm93c2VyKCkge1xuICAgIHJldHVybiAhaXNSZWFjdE5hdGl2ZSgpICYmICFpc05vZGUoKTtcbn1cbmV4cG9ydHMuaXNCcm93c2VyID0gaXNCcm93c2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW52LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NyeXB0b1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZW52XCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdCAoZXgpIHsgcmV0dXJuIChleCAmJiAodHlwZW9mIGV4ID09PSAnb2JqZWN0JykgJiYgJ2RlZmF1bHQnIGluIGV4KSA/IGV4WydkZWZhdWx0J10gOiBleDsgfVxuXG52YXIgYnJvd3NlclV0aWxzID0gcmVxdWlyZSgnQHdhbGxldGNvbm5lY3QvYnJvd3Nlci11dGlscycpO1xudmFyIFFSQ29kZSA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdxcmNvZGUnKSk7XG52YXIgY29weSA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdjb3B5LXRvLWNsaXBib2FyZCcpKTtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3ByZWFjdC9jb21wYXQnKTtcblxuZnVuY3Rpb24gb3Blbih1cmkpIHtcbiAgUVJDb2RlLnRvU3RyaW5nKHVyaSwge1xuICAgIHR5cGU6IFwidGVybWluYWxcIlxuICB9KS50aGVuKGNvbnNvbGUubG9nKTtcbn1cblxudmFyIFdBTExFVENPTk5FQ1RfU1RZTEVfU0hFRVQgPSBcIjpyb290IHtcXG4gIC0tYW5pbWF0aW9uLWR1cmF0aW9uOiAzMDBtcztcXG59XFxuXFxuQGtleWZyYW1lcyBmYWRlSW4ge1xcbiAgZnJvbSB7XFxuICAgIG9wYWNpdHk6IDA7XFxuICB9XFxuICB0byB7XFxuICAgIG9wYWNpdHk6IDE7XFxuICB9XFxufVxcblxcbkBrZXlmcmFtZXMgZmFkZU91dCB7XFxuICBmcm9tIHtcXG4gICAgb3BhY2l0eTogMTtcXG4gIH1cXG4gIHRvIHtcXG4gICAgb3BhY2l0eTogMDtcXG4gIH1cXG59XFxuXFxuLmFuaW1hdGVkIHtcXG4gIGFuaW1hdGlvbi1kdXJhdGlvbjogdmFyKC0tYW5pbWF0aW9uLWR1cmF0aW9uKTtcXG4gIGFuaW1hdGlvbi1maWxsLW1vZGU6IGJvdGg7XFxufVxcblxcbi5mYWRlSW4ge1xcbiAgYW5pbWF0aW9uLW5hbWU6IGZhZGVJbjtcXG59XFxuXFxuLmZhZGVPdXQge1xcbiAgYW5pbWF0aW9uLW5hbWU6IGZhZGVPdXQ7XFxufVxcblxcbiN3YWxsZXRjb25uZWN0LXdyYXBwZXIge1xcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBsZWZ0OiAwO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB0b3A6IDA7XFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgei1pbmRleDogOTk5OTk5OTk5OTk5OTk7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19oZWFkZXJMb2dvIHtcXG4gIGhlaWdodDogMjFweDtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2hlYWRlciBwIHtcXG4gIGNvbG9yOiAjZmZmZmZmO1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG4gIG1hcmdpbjogMDtcXG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXg6IDE7XFxuICBtYXJnaW4tbGVmdDogNXB4O1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fY2xvc2VfX3dyYXBwZXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwcHg7XFxuICByaWdodDogMHB4O1xcbiAgei1pbmRleDogMTAwMDA7XFxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcXG4gIGJvcmRlci1yYWRpdXM6IDI2cHg7XFxuICBwYWRkaW5nOiA2cHg7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgd2lkdGg6IDI2cHg7XFxuICBoZWlnaHQ6IDI2cHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19jbG9zZV9faWNvbiB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0b3A6IDdweDtcXG4gIHJpZ2h0OiAwO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2Nsb3NlX19saW5lMSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYig0OCwgNTIsIDU5KTtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2Nsb3NlX19saW5lMiB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYig0OCwgNTIsIDU5KTtcXG4gIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtcXJjb2RlX19iYXNlIHtcXG4gIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwKTtcXG4gIGJhY2tncm91bmQ6IHJnYmEoMzcsIDQxLCA0NiwgMC45NSk7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBsZWZ0OiAwO1xcbiAgcG9pbnRlci1ldmVudHM6IGF1dG87XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB0b3A6IDA7XFxuICB0cmFuc2l0aW9uOiAwLjRzIGN1YmljLWJlemllcigwLjE5LCAxLCAwLjIyLCAxKTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgd2lsbC1jaGFuZ2U6IG9wYWNpdHk7XFxuICBwYWRkaW5nOiA0MHB4O1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtcXJjb2RlX190ZXh0IHtcXG4gIGNvbG9yOiByZ2JhKDYwLCA2NiwgODIsIDAuNik7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBmb250LXdlaWdodDogNjAwO1xcbiAgbGV0dGVyLXNwYWNpbmc6IDA7XFxuICBsaW5lLWhlaWdodDogMS4xODc1ZW07XFxuICBtYXJnaW46IDEwcHggMCAyMHB4IDA7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xcbiAgLndhbGxldGNvbm5lY3QtcXJjb2RlX190ZXh0IHtcXG4gICAgZm9udC1zaXplOiA0dnc7XFxuICB9XFxufVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMzIwcHgpIHtcXG4gIC53YWxsZXRjb25uZWN0LXFyY29kZV9fdGV4dCB7XFxuICAgIGZvbnQtc2l6ZTogMTRweDtcXG4gIH1cXG59XFxuXFxuLndhbGxldGNvbm5lY3QtcXJjb2RlX19pbWFnZSB7XFxuICB3aWR0aDogY2FsYygxMDAlIC0gMzBweCk7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgY3Vyc29yOiBub25lO1xcbiAgbWFyZ2luOiAwIGF1dG87XFxufVxcblxcbi53YWxsZXRjb25uZWN0LXFyY29kZV9fbm90aWZpY2F0aW9uIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDA7XFxuICByaWdodDogMDtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIHBhZGRpbmc6IDE2cHggMjBweDtcXG4gIGJvcmRlci1yYWRpdXM6IDE2cHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB0cmFuc2l0aW9uOiBhbGwgMC4xcyBlYXNlLWluLW91dDtcXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xcbiAgY29sb3I6IGJsYWNrO1xcbiAgbWFyZ2luLWJvdHRvbTogLTYwcHg7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1xcmNvZGVfX25vdGlmaWNhdGlvbi5ub3RpZmljYXRpb25fX3Nob3cge1xcbiAgb3BhY2l0eTogMTtcXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xcbiAgLndhbGxldGNvbm5lY3QtbW9kYWxfX2hlYWRlciB7XFxuICAgIGhlaWdodDogMTMwcHg7XFxuICB9XFxuICAud2FsbGV0Y29ubmVjdC1tb2RhbF9fYmFzZSB7XFxuICAgIG92ZXJmbG93OiBhdXRvO1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4tZGV2aWNlLXdpZHRoOiA0MTVweCkgYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XFxuICAjY29udGVudCB7XFxuICAgIG1heC13aWR0aDogNzY4cHg7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICB9XFxufVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzc1cHgpIGFuZCAobWF4LXdpZHRoOiA0MTVweCkge1xcbiAgI2NvbnRlbnQge1xcbiAgICBtYXgtd2lkdGg6IDQxNHB4O1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMyMHB4KSBhbmQgKG1heC13aWR0aDogMzc1cHgpIHtcXG4gICNjb250ZW50IHtcXG4gICAgbWF4LXdpZHRoOiAzNzVweDtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAzMjBweCkge1xcbiAgI2NvbnRlbnQge1xcbiAgICBtYXgtd2lkdGg6IDMyMHB4O1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgfVxcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fYmFzZSB7XFxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcXG4gIGJhY2tncm91bmQ6ICNmZmZmZmY7XFxuICBib3JkZXItcmFkaXVzOiAyNHB4O1xcbiAgYm94LXNoYWRvdzogMCAxMHB4IDUwcHggNXB4IHJnYmEoMCwgMCwgMCwgMC40KTtcXG4gIGZvbnQtZmFtaWx5OiB1aS1yb3VuZGVkLCBcXFwiU0YgUHJvIFJvdW5kZWRcXFwiLCBcXFwiU0YgUHJvIFRleHRcXFwiLCBtZWRpdW0tY29udGVudC1zYW5zLXNlcmlmLWZvbnQsXFxuICAgIC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgdWktc2Fucy1zZXJpZiwgXFxcIlNlZ29lIFVJXFxcIiwgUm9ib3RvLCBPeHlnZW4sIFVidW50dSwgQ2FudGFyZWxsLFxcbiAgICBcXFwiT3BlbiBTYW5zXFxcIiwgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgc2Fucy1zZXJpZjtcXG4gIG1hcmdpbi10b3A6IDQxcHg7XFxuICBwYWRkaW5nOiAyNHB4IDI0cHggMjJweDtcXG4gIHBvaW50ZXItZXZlbnRzOiBhdXRvO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgdHJhbnNpdGlvbjogMC40cyBjdWJpYy1iZXppZXIoMC4xOSwgMSwgMC4yMiwgMSk7XFxuICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtO1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XFxuICB0b3A6IDUwJTtcXG4gIG1heC13aWR0aDogNTAwcHg7XFxuICBtYXJnaW46IGF1dG87XFxufVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMzIwcHgpIHtcXG4gIC53YWxsZXRjb25uZWN0LW1vZGFsX19iYXNlIHtcXG4gICAgcGFkZGluZzogMjRweCAxMnB4O1xcbiAgfVxcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fYmFzZSAuaGlkZGVuIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxNTAlKTtcXG4gIHRyYW5zaXRpb246IDAuMTI1cyBjdWJpYy1iZXppZXIoMC40LCAwLCAxLCAxKTtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2hlYWRlciB7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGhlaWdodDogMjZweDtcXG4gIGxlZnQ6IDA7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IC00MnB4O1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19iYXNlIC53Yy1sb2dvIHtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgaGVpZ2h0OiAyNnB4O1xcbiAgbWFyZ2luLXRvcDogMTVweDtcXG4gIHBhZGRpbmctYm90dG9tOiAxNXB4O1xcbiAgcG9pbnRlci1ldmVudHM6IGF1dG87XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19iYXNlIC53Yy1sb2dvIGRpdiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzM5OWZmO1xcbiAgaGVpZ2h0OiAyMXB4O1xcbiAgbWFyZ2luLXJpZ2h0OiA1cHg7XFxuICBtYXNrLWltYWdlOiB1cmwoXFxcImltYWdlcy93Yy1sb2dvLnN2Z1xcXCIpIGNlbnRlciBuby1yZXBlYXQ7XFxuICB3aWR0aDogMzJweDtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2Jhc2UgLndjLWxvZ28gcCB7XFxuICBjb2xvcjogI2ZmZmZmZjtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICBtYXJnaW46IDA7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19iYXNlIGgyIHtcXG4gIGNvbG9yOiByZ2JhKDYwLCA2NiwgODIsIDAuNik7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBmb250LXdlaWdodDogNjAwO1xcbiAgbGV0dGVyLXNwYWNpbmc6IDA7XFxuICBsaW5lLWhlaWdodDogMS4xODc1ZW07XFxuICBtYXJnaW46IDAgMCAxOXB4IDA7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2Jhc2VfX3JvdyB7XFxuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgYm9yZGVyLXJhZGl1czogMjBweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBoZWlnaHQ6IDU2cHg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBwYWRkaW5nOiAwIDE1cHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBtYXJnaW46IDBweCAwcHggOHB4O1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIHRyYW5zaXRpb246IDAuMTVzIGN1YmljLWJlemllcigwLjI1LCAwLjQ2LCAwLjQ1LCAwLjk0KTtcXG4gIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm07XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19iYXNlX19yb3c6aG92ZXIge1xcbiAgYmFja2dyb3VuZDogcmdiYSg2MCwgNjYsIDgyLCAwLjA2KTtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2Jhc2VfX3JvdzphY3RpdmUge1xcbiAgYmFja2dyb3VuZDogcmdiYSg2MCwgNjYsIDgyLCAwLjA2KTtcXG4gIHRyYW5zZm9ybTogc2NhbGUoMC45NzUpO1xcbiAgdHJhbnNpdGlvbjogMC4xcyBjdWJpYy1iZXppZXIoMC4yNSwgMC40NiwgMC40NSwgMC45NCk7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19iYXNlX19yb3dfX2gzIHtcXG4gIGNvbG9yOiAjMjUyOTJlO1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmctYm90dG9tOiAzcHg7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19iYXNlX19yb3dfX3JpZ2h0IHtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19iYXNlX19yb3dfX3JpZ2h0X19hcHAtaWNvbiB7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICBoZWlnaHQ6IDM0cHg7XFxuICBtYXJnaW46IDAgMTFweCAycHggMDtcXG4gIHdpZHRoOiAzNHB4O1xcbiAgYmFja2dyb3VuZC1zaXplOiAxMDAlO1xcbiAgYm94LXNoYWRvdzogMCA0cHggMTJweCAwIHJnYmEoMzcsIDQxLCA0NiwgMC4yNSk7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19iYXNlX19yb3dfX3JpZ2h0X19jYXJldCB7XFxuICBoZWlnaHQ6IDE4cHg7XFxuICBvcGFjaXR5OiAwLjM7XFxuICB0cmFuc2l0aW9uOiAwLjFzIGN1YmljLWJlemllcigwLjI1LCAwLjQ2LCAwLjQ1LCAwLjk0KTtcXG4gIHdpZHRoOiA4cHg7XFxuICB3aWxsLWNoYW5nZTogb3BhY2l0eTtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2Jhc2VfX3Jvdzpob3ZlciAuY2FyZXQsXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2Jhc2VfX3JvdzphY3RpdmUgLmNhcmV0IHtcXG4gIG9wYWNpdHk6IDAuNjtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX21vYmlsZV9fdG9nZ2xlIHtcXG4gIHdpZHRoOiA4MCU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgbWFyZ2luOiAwIGF1dG87XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgbWFyZ2luLWJvdHRvbTogMThweDtcXG4gIGJhY2tncm91bmQ6ICNkNGQ1ZDk7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19zaW5nbGVfd2FsbGV0IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIG1hcmdpbi10b3A6IDdweDtcXG4gIG1hcmdpbi1ib3R0b206IDE4cHg7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19zaW5nbGVfd2FsbGV0IGEge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgY29sb3I6IHJnYig2NCwgMTUzLCAyNTUpO1xcbiAgZm9udC1zaXplOiAyMXB4O1xcbiAgZm9udC13ZWlnaHQ6IDgwMDtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZSAhaW1wb3J0YW50O1xcbiAgbWFyZ2luOiAwIGF1dG87XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19tb2JpbGVfX3RvZ2dsZV9zZWxlY3RvciB7XFxuICB3aWR0aDogY2FsYyg1MCUgLSA4cHgpO1xcbiAgYmFja2dyb3VuZDogd2hpdGU7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDhweCk7XFxuICB0b3A6IDRweDtcXG4gIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2UtaW4tb3V0O1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCg0cHgsIDAsIDApO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fbW9iaWxlX190b2dnbGUucmlnaHRfX3NlbGVjdGVkIC53YWxsZXRjb25uZWN0LW1vZGFsX19tb2JpbGVfX3RvZ2dsZV9zZWxlY3RvciB7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKGNhbGMoMTAwJSArIDEycHgpLCAwLCAwKTtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX21vYmlsZV9fdG9nZ2xlIGEge1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgd2lkdGg6IDUwJTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHBhZGRpbmc6IDhweDtcXG4gIG1hcmdpbjogMDtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICB6LWluZGV4OiAxO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fZm9vdGVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIG1hcmdpbi10b3A6IDIwcHg7XFxufVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcXG4gIC53YWxsZXRjb25uZWN0LW1vZGFsX19mb290ZXIge1xcbiAgICBtYXJnaW4tdG9wOiA1dnc7XFxuICB9XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19mb290ZXIgYSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBjb2xvcjogIzg5OGQ5NztcXG4gIGZvbnQtc2l6ZTogMTVweDtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDMyMHB4KSB7XFxuICAud2FsbGV0Y29ubmVjdC1tb2RhbF9fZm9vdGVyIGEge1xcbiAgICBmb250LXNpemU6IDE0cHg7XFxuICB9XFxufVxcblxcbi53YWxsZXRjb25uZWN0LWNvbm5lY3RfX2J1dHRvbnNfX3dyYXBwZXIge1xcbiAgbWF4LWhlaWdodDogNDR2aDtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtY29ubmVjdF9fYnV0dG9uc19fd3JhcHBlcl9fYW5kcm9pZCB7XFxuICBtYXJnaW46IDUwJSAwO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1jb25uZWN0X19idXR0b25zX193cmFwcGVyX193cmFwIHtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCg0LCAxZnIpO1xcbiAgbWFyZ2luOiAxMHB4IDA7XFxufVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY4cHgpIHtcXG4gIC53YWxsZXRjb25uZWN0LWNvbm5lY3RfX2J1dHRvbnNfX3dyYXBwZXJfX3dyYXAge1xcbiAgICBtYXJnaW4tdG9wOiA0MHB4O1xcbiAgfVxcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1jb25uZWN0X19idXR0b24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDY0LCAxNTMsIDI1NSk7XFxuICBwYWRkaW5nOiAxMnB4O1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgY29sb3I6IHJnYigyNTUsIDI1NSwgMjU1KTtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LWNvbm5lY3RfX2J1dHRvbl9faWNvbl9hbmNob3Ige1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBtYXJnaW46IDhweDtcXG4gIHdpZHRoOiA0MnB4O1xcbiAganVzdGlmeS1zZWxmOiBjZW50ZXI7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lICFpbXBvcnRhbnQ7XFxufVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMzIwcHgpIHtcXG4gIC53YWxsZXRjb25uZWN0LWNvbm5lY3RfX2J1dHRvbl9faWNvbl9hbmNob3Ige1xcbiAgICBtYXJnaW46IDRweDtcXG4gIH1cXG59XFxuXFxuLndhbGxldGNvbm5lY3QtY29ubmVjdF9fYnV0dG9uX19pY29uIHtcXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICBoZWlnaHQ6IDQycHg7XFxuICBtYXJnaW46IDA7XFxuICB3aWR0aDogNDJweDtcXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXIgIWltcG9ydGFudDtcXG4gIGJveC1zaGFkb3c6IDAgNHB4IDEycHggMCByZ2JhKDM3LCA0MSwgNDYsIDAuMjUpO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1jb25uZWN0X19idXR0b25fX3RleHQge1xcbiAgY29sb3I6ICM0MjQ5NTI7XFxuICBmb250LXNpemU6IDIuN3Z3O1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lICFpbXBvcnRhbnQ7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWFyZ2luLXRvcDogMS44dnc7XFxuICBmb250LXdlaWdodDogNjAwO1xcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OHB4KSB7XFxuICAud2FsbGV0Y29ubmVjdC1jb25uZWN0X19idXR0b25fX3RleHQge1xcbiAgICBmb250LXNpemU6IDE2cHg7XFxuICAgIG1hcmdpbi10b3A6IDEycHg7XFxuICB9XFxufVxcblxcbi53YWxsZXRjb25uZWN0LXNlYXJjaF9faW5wdXQge1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYmFja2dyb3VuZDogI2Q0ZDVkOTtcXG4gIGJvcmRlci1zdHlsZTogbm9uZTtcXG4gIHBhZGRpbmc6IDhweCAxNnB4O1xcbiAgb3V0bGluZTogbm9uZTtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtc3RyZXRjaDogbm9ybWFsO1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC1zdHJldGNoOiBub3JtYWw7XFxuICBsaW5lLWhlaWdodDogbm9ybWFsO1xcbiAgbGV0dGVyLXNwYWNpbmc6IG5vcm1hbDtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICB3aWR0aDogY2FsYygxMDAlIC0gMTZweCk7XFxuICBtYXJnaW46IDA7XFxuICBtYXJnaW4tYm90dG9tOiA4cHg7XFxufVxcblwiO1xuXG4vLyBBIHR5cGUgb2YgcHJvbWlzZS1saWtlIHRoYXQgcmVzb2x2ZXMgc3luY2hyb25vdXNseSBhbmQgc3VwcG9ydHMgb25seSBvbmUgb2JzZXJ2ZXJcbnZhciBfaXRlcmF0b3JTeW1ib2wgPSAvKiNfX1BVUkVfXyovdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbC5pdGVyYXRvciB8fCAoU3ltYm9sLml0ZXJhdG9yID0gU3ltYm9sKFwiU3ltYm9sLml0ZXJhdG9yXCIpKSA6IFwiQEBpdGVyYXRvclwiOyAvLyBBc3luY2hyb25vdXNseSBpdGVyYXRlIHRocm91Z2ggYW4gb2JqZWN0J3MgdmFsdWVzXG52YXIgX2FzeW5jSXRlcmF0b3JTeW1ib2wgPSAvKiNfX1BVUkVfXyovdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IChTeW1ib2wuYXN5bmNJdGVyYXRvciA9IFN5bWJvbChcIlN5bWJvbC5hc3luY0l0ZXJhdG9yXCIpKSA6IFwiQEBhc3luY0l0ZXJhdG9yXCI7IC8vIEFzeW5jaHJvbm91c2x5IGl0ZXJhdGUgb24gYSB2YWx1ZSB1c2luZyBpdCdzIGFzeW5jIGl0ZXJhdG9yIGlmIHByZXNlbnQsIG9yIGl0cyBzeW5jaHJvbm91cyBpdGVyYXRvciBpZiBtaXNzaW5nXG5cbmZ1bmN0aW9uIF9jYXRjaChib2R5LCByZWNvdmVyKSB7XG4gIHRyeSB7XG4gICAgdmFyIHJlc3VsdCA9IGJvZHkoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiByZWNvdmVyKGUpO1xuICB9XG5cbiAgaWYgKHJlc3VsdCAmJiByZXN1bHQudGhlbikge1xuICAgIHJldHVybiByZXN1bHQudGhlbih2b2lkIDAsIHJlY292ZXIpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0gLy8gQXN5bmNocm9ub3VzbHkgYXdhaXQgYSBwcm9taXNlIGFuZCBwYXNzIHRoZSByZXN1bHQgdG8gYSBmaW5hbGx5IGNvbnRpbnVhdGlvblxuXG52YXIgV0FMTEVUQ09OTkVDVF9MT0dPX1NWR19VUkwgPSBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0M/eG1sIHZlcnNpb249JzEuMCcgZW5jb2Rpbmc9J1VURi04Jz8lM0UgJTNDc3ZnIHdpZHRoPSczMDBweCcgaGVpZ2h0PScxODVweCcgdmlld0JveD0nMCAwIDMwMCAxODUnIHZlcnNpb249JzEuMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayclM0UgJTNDIS0tIEdlbmVyYXRvcjogU2tldGNoIDQ5LjMgKDUxMTY3KSAtIGh0dHA6Ly93d3cuYm9oZW1pYW5jb2RpbmcuY29tL3NrZXRjaCAtLSUzRSAlM0N0aXRsZSUzRVdhbGxldENvbm5lY3QlM0MvdGl0bGUlM0UgJTNDZGVzYyUzRUNyZWF0ZWQgd2l0aCBTa2V0Y2guJTNDL2Rlc2MlM0UgJTNDZGVmcyUzRSUzQy9kZWZzJTNFICUzQ2cgaWQ9J1BhZ2UtMScgc3Ryb2tlPSdub25lJyBzdHJva2Utd2lkdGg9JzEnIGZpbGw9J25vbmUnIGZpbGwtcnVsZT0nZXZlbm9kZCclM0UgJTNDZyBpZD0nd2FsbGV0Y29ubmVjdC1sb2dvLWFsdCcgZmlsbD0nJTIzM0I5OUZDJyBmaWxsLXJ1bGU9J25vbnplcm8nJTNFICUzQ3BhdGggZD0nTTYxLjQzODU0MjksMzYuMjU2MjYxMiBDMTEwLjM0OTc2NywtMTEuNjMxOTA1MSAxODkuNjUwNTMsLTExLjYzMTkwNTEgMjM4LjU2MTc1MiwzNi4yNTYyNjEyIEwyNDQuNDQ4Mjk3LDQyLjAxOTY3ODYgQzI0Ni44OTM4NTgsNDQuNDE0MDg2NyAyNDYuODkzODU4LDQ4LjI5NjE4OTggMjQ0LjQ0ODI5Nyw1MC42OTA1OTkgTDIyNC4zMTE2MDIsNzAuNDA2MTAyIEMyMjMuMDg4ODIxLDcxLjYwMzMwNzEgMjIxLjEwNjMwMiw3MS42MDMzMDcxIDIxOS44ODM1MjEsNzAuNDA2MTAyIEwyMTEuNzgyOTM3LDYyLjQ3NDk1NDEgQzE3Ny42NjEyNDUsMjkuMDY2OTcyNCAxMjIuMzM5MDUxLDI5LjA2Njk3MjQgODguMjE3MzU4Miw2Mi40NzQ5NTQxIEw3OS41NDIzMDIsNzAuOTY4NTU5MiBDNzguMzE5NTIwNCw3Mi4xNjU3NjMzIDc2LjMzNzAwMSw3Mi4xNjU3NjMzIDc1LjExNDIyMTQsNzAuOTY4NTU5MiBMNTQuOTc3NTI2NSw1MS4yNTMwNTYxIEM1Mi41MzE5NjUzLDQ4Ljg1ODY0NjkgNTIuNTMxOTY1Myw0NC45NzY1NDM5IDU0Ljk3NzUyNjUsNDIuNTgyMTM1NyBMNjEuNDM4NTQyOSwzNi4yNTYyNjEyIFogTTI4MC4yMDYzMzksNzcuMDMwMDA2MSBMMjk4LjEyODAzNiw5NC41NzY5MDMxIEMzMDAuNTczNTg1LDk2Ljk3MTMgMzAwLjU3MzU5OSwxMDAuODUzMzggMjk4LjEyODA2NywxMDMuMjQ3NzkzIEwyMTcuMzE3ODk2LDE4Mi4zNjg5MjcgQzIxNC44NzIzNTIsMTg0Ljc2MzM1MyAyMTAuOTA3MzE0LDE4NC43NjMzOCAyMDguNDYxNzM2LDE4Mi4zNjg5ODkgQzIwOC40NjE3MjYsMTgyLjM2ODk3OSAyMDguNDYxNzE0LDE4Mi4zNjg5NjcgMjA4LjQ2MTcwNCwxODIuMzY4OTU3IEwxNTEuMTA3NTYxLDEyNi4yMTQzODUgQzE1MC40OTYxNzEsMTI1LjYxNTc4MyAxNDkuNTA0OTExLDEyNS42MTU3ODMgMTQ4Ljg5MzUyMSwxMjYuMjE0Mzg1IEMxNDguODkzNTE3LDEyNi4yMTQzODkgMTQ4Ljg5MzUxNCwxMjYuMjE0MzkzIDE0OC44OTM1MSwxMjYuMjE0Mzk2IEw5MS41NDA1ODg4LDE4Mi4zNjg5MjcgQzg5LjA5NTA1MiwxODQuNzYzMzU5IDg1LjEzMDAxMzMsMTg0Ljc2MzM5OSA4Mi42ODQ0Mjc2LDE4Mi4zNjkwMTQgQzgyLjY4NDQxMzMsMTgyLjM2OSA4Mi42ODQzOTgsMTgyLjM2ODk4NiA4Mi42ODQzODI3LDE4Mi4zNjg5NyBMMS44NzE5NjMyNywxMDMuMjQ2Nzg1IEMtMC41NzM1OTY5MzksMTAwLjg1MjM3NyAtMC41NzM1OTY5MzksOTYuOTcwMjczNSAxLjg3MTk2MzI3LDk0LjU3NTg2NTMgTDE5Ljc5MzY5MjksNzcuMDI4OTk4IEMyMi4yMzkyNTMxLDc0LjYzNDU4OTggMjYuMjA0MjkxOCw3NC42MzQ1ODk4IDI4LjY0OTg1MzEsNzcuMDI4OTk4IEw4Ni4wMDQ4MzA2LDEzMy4xODQzNTUgQzg2LjYxNjIyMTQsMTMzLjc4Mjk1NyA4Ny42MDc0Nzk2LDEzMy43ODI5NTcgODguMjE4ODcwNCwxMzMuMTg0MzU1IEM4OC4yMTg4Nzk2LDEzMy4xODQzNDYgODguMjE4ODg3OCwxMzMuMTg0MzM4IDg4LjIxODg5NjksMTMzLjE4NDMzMSBMMTQ1LjU3MSw3Ny4wMjg5OTggQzE0OC4wMTY1MDUsNzQuNjM0NTM0NyAxNTEuOTgxNTQ0LDc0LjYzNDQ0NDkgMTU0LjQyNzE2MSw3Ny4wMjg3OTggQzE1NC40MjcxOTUsNzcuMDI4ODMxNiAxNTQuNDI3MjI5LDc3LjAyODg2NTMgMTU0LjQyNzI2Miw3Ny4wMjg4OTkgTDIxMS43ODIxNjQsMTMzLjE4NDMzMSBDMjEyLjM5MzU1NCwxMzMuNzgyOTMyIDIxMy4zODQ4MTQsMTMzLjc4MjkzMiAyMTMuOTk2MjA0LDEzMy4xODQzMzEgTDI3MS4zNTAxNzksNzcuMDMwMDA2MSBDMjczLjc5NTc0LDc0LjYzNTU5NjkgMjc3Ljc2MDc3OCw3NC42MzU1OTY5IDI4MC4yMDYzMzksNzcuMDMwMDA2MSBaJyBpZD0nV2FsbGV0Q29ubmVjdCclM0UlM0MvcGF0aCUzRSAlM0MvZyUzRSAlM0MvZyUzRSAlM0Mvc3ZnJTNFXCI7XG5cbnZhciBXQUxMRVRDT05ORUNUX0hFQURFUl9URVhUID0gXCJXYWxsZXRDb25uZWN0XCI7XG52YXIgQU5JTUFUSU9OX0RVUkFUSU9OID0gMzAwO1xudmFyIERFRkFVTFRfQlVUVE9OX0NPTE9SID0gXCJyZ2IoNjQsIDE1MywgMjU1KVwiO1xudmFyIFdBTExFVENPTk5FQ1RfV1JBUFBFUl9JRCA9IFwid2FsbGV0Y29ubmVjdC13cmFwcGVyXCI7XG52YXIgV0FMTEVUQ09OTkVDVF9TVFlMRV9JRCA9IFwid2FsbGV0Y29ubmVjdC1zdHlsZS1zaGVldFwiO1xudmFyIFdBTExFVENPTk5FQ1RfTU9EQUxfSUQgPSBcIndhbGxldGNvbm5lY3QtcXJjb2RlLW1vZGFsXCI7XG52YXIgV0FMTEVUQ09OTkVDVF9DTE9TRV9CVVRUT05fSUQgPSBcIndhbGxldGNvbm5lY3QtcXJjb2RlLWNsb3NlXCI7XG52YXIgV0FMTEVUQ09OTkVDVF9DVEFfVEVYVF9JRCA9IFwid2FsbGV0Y29ubmVjdC1xcmNvZGUtdGV4dFwiO1xudmFyIFdBTExFVENPTk5FQ1RfQ09OTkVDVF9CVVRUT05fSUQgPSBcIndhbGxldGNvbm5lY3QtY29ubmVjdC1idXR0b25cIjtcblxuZnVuY3Rpb24gSGVhZGVyKHByb3BzKSB7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1tb2RhbF9faGVhZGVyXCJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImltZ1wiLCB7XG4gICAgc3JjOiBXQUxMRVRDT05ORUNUX0xPR09fU1ZHX1VSTCxcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1tb2RhbF9faGVhZGVyTG9nb1wiXG4gIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCBudWxsLCBXQUxMRVRDT05ORUNUX0hFQURFUl9URVhUKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIndhbGxldGNvbm5lY3QtbW9kYWxfX2Nsb3NlX193cmFwcGVyXCIsXG4gICAgb25DbGljazogcHJvcHMub25DbG9zZVxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBpZDogV0FMTEVUQ09OTkVDVF9DTE9TRV9CVVRUT05fSUQsXG4gICAgY2xhc3NOYW1lOiBcIndhbGxldGNvbm5lY3QtbW9kYWxfX2Nsb3NlX19pY29uXCJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIndhbGxldGNvbm5lY3QtbW9kYWxfX2Nsb3NlX19saW5lMVwiXG4gIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1tb2RhbF9fY2xvc2VfX2xpbmUyXCJcbiAgfSkpKSk7XG59XG5cbmZ1bmN0aW9uIENvbm5lY3RCdXR0b24ocHJvcHMpIHtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHtcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1jb25uZWN0X19idXR0b25cIixcbiAgICBocmVmOiBwcm9wcy5ocmVmLFxuICAgIGlkOiAoV0FMTEVUQ09OTkVDVF9DT05ORUNUX0JVVFRPTl9JRCArIFwiLVwiICsgKHByb3BzLm5hbWUpKSxcbiAgICBvbkNsaWNrOiBwcm9wcy5vbkNsaWNrLFxuICAgIHJlbDogXCJub29wZW5lciBub3JlZmVycmVyXCIsXG4gICAgc3R5bGU6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogcHJvcHMuY29sb3JcbiAgICB9LFxuICAgIHRhcmdldDogXCJfYmxhbmtcIlxuICB9LCBwcm9wcy5uYW1lKTtcbn1cblxudmFyIENBUkVUX1NWR19VUkwgPSBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0Nzdmcgd2lkdGg9JzgnIGhlaWdodD0nMTgnIHZpZXdCb3g9JzAgMCA4IDE4JyBmaWxsPSdub25lJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnJTNFICUzQ3BhdGggZmlsbC1ydWxlPSdldmVub2RkJyBjbGlwLXJ1bGU9J2V2ZW5vZGQnIGQ9J00wLjU4NjMwMSAwLjIxMzg5OEMwLjE1MDM1NCAwLjU1Mjk2OCAwLjA3MTgxOTcgMS4xODEyNCAwLjQxMDg5IDEuNjE3MTlMNS4yODkyIDcuODg5MzFDNS41NzAwNyA4LjI1MDQyIDUuNTcwMDcgOC43NTYwOCA1LjI4OTIgOS4xMTcxOUwwLjQxMDg4OSAxNS4zODkzQzAuMDcxODE5IDE1LjgyNTMgMC4xNTAzNTMgMTYuNDUzNSAwLjU4NjMwMSAxNi43OTI2QzEuMDIyMjUgMTcuMTMxNyAxLjY1MDUyIDE3LjA1MzEgMS45ODk1OSAxNi42MTcyTDYuODY3OTEgMTAuMzQ1MUM3LjcxMDUgOS4yNjE3NCA3LjcxMDUgNy43NDQ3NiA2Ljg2NzkxIDYuNjYxNDNMMS45ODk1OSAwLjM4OTMxQzEuNjUwNTIgLTAuMDQ2NjM3NCAxLjAyMjI1IC0wLjEyNTE3MiAwLjU4NjMwMSAwLjIxMzg5OFonIGZpbGw9JyUyMzNDNDI1MicvJTNFICUzQy9zdmclM0VcIjtcblxuZnVuY3Rpb24gV2FsbGV0QnV0dG9uKHByb3BzKSB7XG4gIHZhciBjb2xvciA9IHByb3BzLmNvbG9yO1xuICB2YXIgaHJlZiA9IHByb3BzLmhyZWY7XG4gIHZhciBuYW1lID0gcHJvcHMubmFtZTtcbiAgdmFyIGxvZ28gPSBwcm9wcy5sb2dvO1xuICB2YXIgb25DbGljayA9IHByb3BzLm9uQ2xpY2s7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIndhbGxldGNvbm5lY3QtbW9kYWxfX2Jhc2VfX3Jvd1wiLFxuICAgIGhyZWY6IGhyZWYsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICByZWw6IFwibm9vcGVuZXIgbm9yZWZlcnJlclwiLFxuICAgIHRhcmdldDogXCJfYmxhbmtcIlxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaDNcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LW1vZGFsX19iYXNlX19yb3dfX2gzXCJcbiAgfSwgbmFtZSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LW1vZGFsX19iYXNlX19yb3dfX3JpZ2h0XCJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIndhbGxldGNvbm5lY3QtbW9kYWxfX2Jhc2VfX3Jvd19fcmlnaHRfX2FwcC1pY29uXCIsXG4gICAgc3R5bGU6IHtcbiAgICAgIGJhY2tncm91bmQ6IChcInVybCgnXCIgKyBsb2dvICsgXCInKSBcIiArIGNvbG9yKSxcbiAgICAgIGJhY2tncm91bmRTaXplOiBcIjEwMCVcIlxuICAgIH1cbiAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIiwge1xuICAgIHNyYzogQ0FSRVRfU1ZHX1VSTCxcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1tb2RhbF9fYmFzZV9fcm93X19yaWdodF9fY2FyZXRcIlxuICB9KSkpO1xufVxuXG5mdW5jdGlvbiBXYWxsZXRJY29uKHByb3BzKSB7XG4gIHZhciBjb2xvciA9IHByb3BzLmNvbG9yO1xuICB2YXIgaHJlZiA9IHByb3BzLmhyZWY7XG4gIHZhciBuYW1lID0gcHJvcHMubmFtZTtcbiAgdmFyIGxvZ28gPSBwcm9wcy5sb2dvO1xuICB2YXIgb25DbGljayA9IHByb3BzLm9uQ2xpY2s7XG4gIHZhciBmb250U2l6ZSA9IHdpbmRvdy5pbm5lcldpZHRoIDwgNzY4ID8gKChuYW1lLmxlbmd0aCA+IDggPyAyLjUgOiAyLjcpICsgXCJ2d1wiKSA6IFwiaW5oZXJpdFwiO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LWNvbm5lY3RfX2J1dHRvbl9faWNvbl9hbmNob3JcIixcbiAgICBocmVmOiBocmVmLFxuICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgcmVsOiBcIm5vb3BlbmVyIG5vcmVmZXJyZXJcIixcbiAgICB0YXJnZXQ6IFwiX2JsYW5rXCJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIndhbGxldGNvbm5lY3QtY29ubmVjdF9fYnV0dG9uX19pY29uXCIsXG4gICAgc3R5bGU6IHtcbiAgICAgIGJhY2tncm91bmQ6IChcInVybCgnXCIgKyBsb2dvICsgXCInKSBcIiArIGNvbG9yKSxcbiAgICAgIGJhY2tncm91bmRTaXplOiBcIjEwMCVcIlxuICAgIH1cbiAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIHN0eWxlOiB7XG4gICAgICBmb250U2l6ZTogZm9udFNpemVcbiAgICB9LFxuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LWNvbm5lY3RfX2J1dHRvbl9fdGV4dFwiXG4gIH0sIG5hbWUpKTtcbn1cblxudmFyIEdSSURfTUlOX0NPVU5UID0gNTtcbnZhciBMSU5LU19QRVJfUEFHRSA9IDEyO1xuXG5mdW5jdGlvbiBMaW5rRGlzcGxheShwcm9wcykge1xuICB2YXIgYW5kcm9pZCA9IGJyb3dzZXJVdGlscy5pc0FuZHJvaWQoKTtcbiAgdmFyIHJlZiA9IFJlYWN0LnVzZVN0YXRlKFwiXCIpO1xuICB2YXIgaW5wdXQgPSByZWZbMF07XG4gIHZhciBzZXRJbnB1dCA9IHJlZlsxXTtcbiAgdmFyIHJlZiQxID0gUmVhY3QudXNlU3RhdGUoXCJcIik7XG4gIHZhciBmaWx0ZXIgPSByZWYkMVswXTtcbiAgdmFyIHNldEZpbHRlciA9IHJlZiQxWzFdO1xuICB2YXIgcmVmJDIgPSBSZWFjdC51c2VTdGF0ZSgxKTtcbiAgdmFyIHBhZ2UgPSByZWYkMlswXTtcbiAgdmFyIHNldFBhZ2UgPSByZWYkMlsxXTtcbiAgdmFyIGxpbmtzID0gZmlsdGVyID8gcHJvcHMubGlua3MuZmlsdGVyKGZ1bmN0aW9uIChsaW5rKSB7IHJldHVybiBsaW5rLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhmaWx0ZXIudG9Mb3dlckNhc2UoKSk7IH0pIDogcHJvcHMubGlua3M7XG4gIHZhciBlcnJvck1lc3NhZ2UgPSBwcm9wcy5lcnJvck1lc3NhZ2U7XG4gIHZhciBncmlkID0gZmlsdGVyIHx8IGxpbmtzLmxlbmd0aCA+IEdSSURfTUlOX0NPVU5UO1xuICB2YXIgcGFnZXMgPSBNYXRoLmNlaWwobGlua3MubGVuZ3RoIC8gTElOS1NfUEVSX1BBR0UpO1xuICB2YXIgcmFuZ2UgPSBbKHBhZ2UgLSAxKSAqIExJTktTX1BFUl9QQUdFICsgMSwgcGFnZSAqIExJTktTX1BFUl9QQUdFXTtcbiAgdmFyIHBhZ2VMaW5rcyA9IGxpbmtzLmxlbmd0aCA/IGxpbmtzLmZpbHRlcihmdW5jdGlvbiAoXywgaW5kZXgpIHsgcmV0dXJuIGluZGV4ICsgMSA+PSByYW5nZVswXSAmJiBpbmRleCArIDEgPD0gcmFuZ2VbMV07IH0pIDogW107XG4gIHZhciBoYXNQYWdpbmcgPSAhISghYW5kcm9pZCAmJiBwYWdlcyA+IDEpO1xuICB2YXIgZmlsdGVyVGltZW91dCA9IHVuZGVmaW5lZDtcblxuICBmdW5jdGlvbiBoYW5kbGVJbnB1dChlKSB7XG4gICAgc2V0SW5wdXQoZS50YXJnZXQudmFsdWUpO1xuICAgIGNsZWFyVGltZW91dChmaWx0ZXJUaW1lb3V0KTtcblxuICAgIGlmIChlLnRhcmdldC52YWx1ZSkge1xuICAgICAgZmlsdGVyVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzZXRGaWx0ZXIoZS50YXJnZXQudmFsdWUpO1xuICAgICAgICBzZXRQYWdlKDEpO1xuICAgICAgfSwgMTAwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldElucHV0KFwiXCIpO1xuICAgICAgc2V0RmlsdGVyKFwiXCIpO1xuICAgICAgc2V0UGFnZSgxKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBudWxsLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCB7XG4gICAgaWQ6IFdBTExFVENPTk5FQ1RfQ1RBX1RFWFRfSUQsXG4gICAgY2xhc3NOYW1lOiBcIndhbGxldGNvbm5lY3QtcXJjb2RlX190ZXh0XCJcbiAgfSwgYW5kcm9pZCA/IHByb3BzLnRleHQuY29ubmVjdF9tb2JpbGVfd2FsbGV0IDogcHJvcHMudGV4dC5jaG9vc2VfcHJlZmVycmVkX3dhbGxldCksICFhbmRyb2lkICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIndhbGxldGNvbm5lY3Qtc2VhcmNoX19pbnB1dFwiLFxuICAgIHBsYWNlaG9sZGVyOiBcIlNlYXJjaFwiLFxuICAgIHZhbHVlOiBpbnB1dCxcbiAgICBvbkNoYW5nZTogaGFuZGxlSW5wdXRcbiAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogKFwid2FsbGV0Y29ubmVjdC1jb25uZWN0X19idXR0b25zX193cmFwcGVyXCIgKyAoYW5kcm9pZCA/IFwiX19hbmRyb2lkXCIgOiBncmlkICYmIGxpbmtzLmxlbmd0aCA/IFwiX193cmFwXCIgOiBcIlwiKSlcbiAgfSwgIWFuZHJvaWQgPyBwYWdlTGlua3MubGVuZ3RoID8gcGFnZUxpbmtzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICB2YXIgY29sb3IgPSBlbnRyeS5jb2xvcjtcbiAgICB2YXIgbmFtZSA9IGVudHJ5Lm5hbWU7XG4gICAgdmFyIHNob3J0TmFtZSA9IGVudHJ5LnNob3J0TmFtZTtcbiAgICB2YXIgbG9nbyA9IGVudHJ5LmxvZ287XG4gICAgdmFyIGhyZWYgPSBicm93c2VyVXRpbHMuZm9ybWF0SU9TTW9iaWxlKHByb3BzLnVyaSwgZW50cnkpO1xuICAgIHZhciBoYW5kbGVDbGlja0lPUyA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIGJyb3dzZXJVdGlscy5zYXZlTW9iaWxlTGlua0luZm8oe1xuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBocmVmOiBocmVmXG4gICAgICB9KTtcbiAgICB9LCBbcGFnZUxpbmtzXSk7XG4gICAgcmV0dXJuICFncmlkID8gUmVhY3QuY3JlYXRlRWxlbWVudChXYWxsZXRCdXR0b24sIHtcbiAgICAgIGNvbG9yOiBjb2xvcixcbiAgICAgIGhyZWY6IGhyZWYsXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgbG9nbzogbG9nbyxcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrSU9TXG4gICAgfSkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KFdhbGxldEljb24sIHtcbiAgICAgIGNvbG9yOiBjb2xvcixcbiAgICAgIGhyZWY6IGhyZWYsXG4gICAgICBuYW1lOiBzaG9ydE5hbWUsXG4gICAgICBsb2dvOiBsb2dvLFxuICAgICAgb25DbGljazogaGFuZGxlQ2xpY2tJT1NcbiAgICB9KTtcbiAgfSkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCBudWxsLCBlcnJvck1lc3NhZ2UubGVuZ3RoID8gcHJvcHMuZXJyb3JNZXNzYWdlIDogISFwcm9wcy5saW5rcy5sZW5ndGggJiYgIWxpbmtzLmxlbmd0aCA/IHByb3BzLnRleHQubm9fd2FsbGV0c19mb3VuZCA6IHByb3BzLnRleHQubG9hZGluZykpIDogUmVhY3QuY3JlYXRlRWxlbWVudChDb25uZWN0QnV0dG9uLCB7XG4gICAgbmFtZTogcHJvcHMudGV4dC5jb25uZWN0LFxuICAgIGNvbG9yOiBERUZBVUxUX0JVVFRPTl9DT0xPUixcbiAgICBocmVmOiBwcm9wcy51cmksXG4gICAgb25DbGljazogUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgICAgYnJvd3NlclV0aWxzLnNhdmVNb2JpbGVMaW5rSW5mbyh7XG4gICAgICAgIG5hbWU6IFwiVW5rbm93blwiLFxuICAgICAgICBocmVmOiBwcm9wcy51cmlcbiAgICAgIH0pO1xuICAgIH0sIFtdKVxuICB9KSksIGhhc1BhZ2luZyAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1tb2RhbF9fZm9vdGVyXCJcbiAgfSwgQXJyYXkocGFnZXMpLmZpbGwoMCkubWFwKGZ1bmN0aW9uIChfLCBpbmRleCkge1xuICAgIHZhciBwYWdlTnVtYmVyID0gaW5kZXggKyAxO1xuICAgIHZhciBzZWxlY3RlZCA9IHBhZ2UgPT09IHBhZ2VOdW1iZXI7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHtcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIG1hcmdpbjogXCJhdXRvIDEwcHhcIixcbiAgICAgICAgZm9udFdlaWdodDogc2VsZWN0ZWQgPyBcImJvbGRcIiA6IFwibm9ybWFsXCJcbiAgICAgIH0sXG4gICAgICBvbkNsaWNrOiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZXRQYWdlKHBhZ2VOdW1iZXIpOyB9XG4gICAgfSwgcGFnZU51bWJlcik7XG4gIH0pKSk7XG59XG5cbmZ1bmN0aW9uIE5vdGlmaWNhdGlvbihwcm9wcykge1xuICB2YXIgc2hvdyA9ICEhcHJvcHMubWVzc2FnZS50cmltKCk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IChcIndhbGxldGNvbm5lY3QtcXJjb2RlX19ub3RpZmljYXRpb25cIiArIChzaG93ID8gXCIgbm90aWZpY2F0aW9uX19zaG93XCIgOiBcIlwiKSlcbiAgfSwgcHJvcHMubWVzc2FnZSk7XG59XG5cbnZhciBmb3JtYXRRUkNvZGVJbWFnZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRyeSB7XG4gICAgdmFyIHJlc3VsdCA9IFwiXCI7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShRUkNvZGUudG9TdHJpbmcoZGF0YSwge1xuICAgICAgbWFyZ2luOiAwLFxuICAgICAgdHlwZTogXCJzdmdcIlxuICAgIH0pKS50aGVuKGZ1bmN0aW9uIChkYXRhU3RyaW5nKSB7XG4gICAgICBpZiAodHlwZW9mIGRhdGFTdHJpbmcgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmVzdWx0ID0gZGF0YVN0cmluZy5yZXBsYWNlKFwiPHN2Z1wiLCBcIjxzdmcgY2xhc3M9XFxcIndhbGxldGNvbm5lY3QtcXJjb2RlX19pbWFnZVxcXCJcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFFSQ29kZURpc3BsYXkocHJvcHMpIHtcbiAgdmFyIHJlZiA9IFJlYWN0LnVzZVN0YXRlKFwiXCIpO1xuICB2YXIgbm90aWZpY2F0aW9uID0gcmVmWzBdO1xuICB2YXIgc2V0Tm90aWZpY2F0aW9uID0gcmVmWzFdO1xuICB2YXIgcmVmJDEgPSBSZWFjdC51c2VTdGF0ZShcIlwiKTtcbiAgdmFyIHN2ZyA9IHJlZiQxWzBdO1xuICB2YXIgc2V0U3ZnID0gcmVmJDFbMV07XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZm9ybWF0UVJDb2RlSW1hZ2UocHJvcHMudXJpKSkudGhlbihmdW5jdGlvbiAoX2Zvcm1hdFFSQ29kZUltYWdlKSB7XG4gICAgICAgIHNldFN2ZyhfZm9ybWF0UVJDb2RlSW1hZ2UpO1xuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgUHJvbWlzZS5yZWplY3QoZSk7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgdmFyIGNvcHlUb0NsaXBib2FyZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3VjY2VzcyA9IGNvcHkocHJvcHMudXJpKTtcblxuICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICBzZXROb3RpZmljYXRpb24ocHJvcHMudGV4dC5jb3BpZWRfdG9fY2xpcGJvYXJkKTtcbiAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNldE5vdGlmaWNhdGlvbihcIlwiKTsgfSwgMTIwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldE5vdGlmaWNhdGlvbihcIkVycm9yXCIpO1xuICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgeyByZXR1cm4gc2V0Tm90aWZpY2F0aW9uKFwiXCIpOyB9LCAxMjAwKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCwgUmVhY3QuY3JlYXRlRWxlbWVudChcInBcIiwge1xuICAgIGlkOiBXQUxMRVRDT05ORUNUX0NUQV9URVhUX0lELFxuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LXFyY29kZV9fdGV4dFwiXG4gIH0sIHByb3BzLnRleHQuc2Nhbl9xcmNvZGVfd2l0aF93YWxsZXQpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgX19odG1sOiBzdmdcbiAgICB9XG4gIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1tb2RhbF9fZm9vdGVyXCJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgIG9uQ2xpY2s6IGNvcHlUb0NsaXBib2FyZFxuICB9LCBwcm9wcy50ZXh0LmNvcHlfdG9fY2xpcGJvYXJkKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTm90aWZpY2F0aW9uLCB7XG4gICAgbWVzc2FnZTogbm90aWZpY2F0aW9uXG4gIH0pKTtcbn1cblxuZnVuY3Rpb24gTW9kYWwocHJvcHMpIHtcbiAgdmFyIGFuZHJvaWQgPSBicm93c2VyVXRpbHMuaXNBbmRyb2lkKCk7XG4gIHZhciBtb2JpbGUgPSBicm93c2VyVXRpbHMuaXNNb2JpbGUoKTtcbiAgdmFyIHdoaXRlbGlzdCA9IG1vYmlsZSA/IHByb3BzLnFyY29kZU1vZGFsT3B0aW9ucyAmJiBwcm9wcy5xcmNvZGVNb2RhbE9wdGlvbnMubW9iaWxlTGlua3MgPyBwcm9wcy5xcmNvZGVNb2RhbE9wdGlvbnMubW9iaWxlTGlua3MgOiB1bmRlZmluZWQgOiBwcm9wcy5xcmNvZGVNb2RhbE9wdGlvbnMgJiYgcHJvcHMucXJjb2RlTW9kYWxPcHRpb25zLmRlc2t0b3BMaW5rcyA/IHByb3BzLnFyY29kZU1vZGFsT3B0aW9ucy5kZXNrdG9wTGlua3MgOiB1bmRlZmluZWQ7XG4gIHZhciByZWYgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIHZhciBsb2FkaW5nID0gcmVmWzBdO1xuICB2YXIgc2V0TG9hZGluZyA9IHJlZlsxXTtcbiAgdmFyIHJlZiQxID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICB2YXIgZmV0Y2hlZCA9IHJlZiQxWzBdO1xuICB2YXIgc2V0RmV0Y2hlZCA9IHJlZiQxWzFdO1xuICB2YXIgcmVmJDIgPSBSZWFjdC51c2VTdGF0ZSghbW9iaWxlKTtcbiAgdmFyIGRpc3BsYXlRUkNvZGUgPSByZWYkMlswXTtcbiAgdmFyIHNldERpc3BsYXlRUkNvZGUgPSByZWYkMlsxXTtcbiAgdmFyIGRpc3BsYXlQcm9wcyA9IHtcbiAgICBtb2JpbGU6IG1vYmlsZSxcbiAgICB0ZXh0OiBwcm9wcy50ZXh0LFxuICAgIHVyaTogcHJvcHMudXJpLFxuICAgIHFyY29kZU1vZGFsT3B0aW9uczogcHJvcHMucXJjb2RlTW9kYWxPcHRpb25zXG4gIH07XG4gIHZhciByZWYkMyA9IFJlYWN0LnVzZVN0YXRlKFwiXCIpO1xuICB2YXIgc2luZ2xlTGlua0hyZWYgPSByZWYkM1swXTtcbiAgdmFyIHNldFNpbmdsZUxpbmtIcmVmID0gcmVmJDNbMV07XG4gIHZhciByZWYkNCA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgdmFyIGhhc1NpbmdsZUxpbmsgPSByZWYkNFswXTtcbiAgdmFyIHNldEhhc1NpbmdsZUxpbmsgPSByZWYkNFsxXTtcbiAgdmFyIHJlZiQ1ID0gUmVhY3QudXNlU3RhdGUoW10pO1xuICB2YXIgbGlua3MgPSByZWYkNVswXTtcbiAgdmFyIHNldExpbmtzID0gcmVmJDVbMV07XG4gIHZhciByZWYkNiA9IFJlYWN0LnVzZVN0YXRlKFwiXCIpO1xuICB2YXIgZXJyb3JNZXNzYWdlID0gcmVmJDZbMF07XG4gIHZhciBzZXRFcnJvck1lc3NhZ2UgPSByZWYkNlsxXTtcblxuICB2YXIgZ2V0TGlua3NJZk5lZWRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZmV0Y2hlZCB8fCBsb2FkaW5nIHx8IHdoaXRlbGlzdCAmJiAhd2hpdGVsaXN0Lmxlbmd0aCB8fCBsaW5rcy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpbml0TGlua3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKGFuZHJvaWQpIHsgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpOyB9XG4gICAgICAgICAgc2V0TG9hZGluZyh0cnVlKTtcblxuICAgICAgICAgIHZhciBfdGVtcCA9IF9jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gcHJvcHMucXJjb2RlTW9kYWxPcHRpb25zICYmIHByb3BzLnFyY29kZU1vZGFsT3B0aW9ucy5yZWdpc3RyeVVybCA/IHByb3BzLnFyY29kZU1vZGFsT3B0aW9ucy5yZWdpc3RyeVVybCA6IGJyb3dzZXJVdGlscy5nZXRXYWxsZXRSZWdpc3RyeVVybCgpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmZXRjaCh1cmwpLnRoZW4oZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguanNvbigpOyB9KSkudGhlbihmdW5jdGlvbiAocmVnaXN0cnkpIHtcbiAgICAgICAgICAgICAgdmFyIHBsYXRmb3JtID0gbW9iaWxlID8gXCJtb2JpbGVcIiA6IFwiZGVza3RvcFwiO1xuXG4gICAgICAgICAgICAgIHZhciBfbGlua3MgPSBicm93c2VyVXRpbHMuZ2V0TW9iaWxlTGlua1JlZ2lzdHJ5KGJyb3dzZXJVdGlscy5mb3JtYXRNb2JpbGVSZWdpc3RyeShyZWdpc3RyeSwgcGxhdGZvcm0pLCB3aGl0ZWxpc3QpO1xuXG4gICAgICAgICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICBzZXRGZXRjaGVkKHRydWUpO1xuICAgICAgICAgICAgICBzZXRFcnJvck1lc3NhZ2UoIV9saW5rcy5sZW5ndGggPyBwcm9wcy50ZXh0Lm5vX3N1cHBvcnRlZF93YWxsZXRzIDogXCJcIik7XG4gICAgICAgICAgICAgIHNldExpbmtzKF9saW5rcyk7XG4gICAgICAgICAgICAgIHZhciBoYXNTaW5nbGVMaW5rID0gX2xpbmtzLmxlbmd0aCA9PT0gMTtcblxuICAgICAgICAgICAgICBpZiAoaGFzU2luZ2xlTGluaykge1xuICAgICAgICAgICAgICAgIHNldFNpbmdsZUxpbmtIcmVmKGJyb3dzZXJVdGlscy5mb3JtYXRJT1NNb2JpbGUocHJvcHMudXJpLCBfbGlua3NbMF0pKTtcbiAgICAgICAgICAgICAgICBzZXREaXNwbGF5UVJDb2RlKHRydWUpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgc2V0SGFzU2luZ2xlTGluayhoYXNTaW5nbGVMaW5rKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgIHNldEZldGNoZWQodHJ1ZSk7XG4gICAgICAgICAgICBzZXRFcnJvck1lc3NhZ2UocHJvcHMudGV4dC5zb21ldGhpbmdfd2VudF93cm9uZyk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShfdGVtcCAmJiBfdGVtcC50aGVuID8gX3RlbXAudGhlbihmdW5jdGlvbiAoKSB7fSkgOiB2b2lkIDApO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpbml0TGlua3MoKTtcbiAgICB9KTtcbiAgfTtcblxuICBnZXRMaW5rc0lmTmVlZGVkKCk7XG4gIHZhciByaWdodFNlbGVjdGVkID0gbW9iaWxlID8gZGlzcGxheVFSQ29kZSA6ICFkaXNwbGF5UVJDb2RlO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgaWQ6IFdBTExFVENPTk5FQ1RfTU9EQUxfSUQsXG4gICAgY2xhc3NOYW1lOiBcIndhbGxldGNvbm5lY3QtcXJjb2RlX19iYXNlIGFuaW1hdGVkIGZhZGVJblwiXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LW1vZGFsX19iYXNlXCJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChIZWFkZXIsIHtcbiAgICBvbkNsb3NlOiBwcm9wcy5vbkNsb3NlXG4gIH0pLCBoYXNTaW5nbGVMaW5rICYmIGRpc3BsYXlRUkNvZGUgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1tb2RhbF9fc2luZ2xlX3dhbGxldFwiXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHtcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiAoKSB7IHJldHVybiBicm93c2VyVXRpbHMuc2F2ZU1vYmlsZUxpbmtJbmZvKHtcbiAgICAgIG5hbWU6IGxpbmtzWzBdLm5hbWUsXG4gICAgICBocmVmOiBzaW5nbGVMaW5rSHJlZlxuICAgIH0pOyB9LFxuICAgIGhyZWY6IHNpbmdsZUxpbmtIcmVmLFxuICAgIHJlbDogXCJub29wZW5lciBub3JlZmVycmVyXCIsXG4gICAgdGFyZ2V0OiBcIl9ibGFua1wiXG4gIH0sIHByb3BzLnRleHQuY29ubmVjdF93aXRoICsgXCIgXCIgKyAoaGFzU2luZ2xlTGluayA/IGxpbmtzWzBdLm5hbWUgOiBcIlwiKSArIFwiIOKAulwiKSkgOiBhbmRyb2lkIHx8IGxvYWRpbmcgfHwgIWxvYWRpbmcgJiYgbGlua3MubGVuZ3RoID8gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiAoXCJ3YWxsZXRjb25uZWN0LW1vZGFsX19tb2JpbGVfX3RvZ2dsZVwiICsgKHJpZ2h0U2VsZWN0ZWQgPyBcIiByaWdodF9fc2VsZWN0ZWRcIiA6IFwiXCIpKVxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1tb2RhbF9fbW9iaWxlX190b2dnbGVfc2VsZWN0b3JcIlxuICB9KSwgbW9iaWxlID8gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgIG9uQ2xpY2s6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIChzZXREaXNwbGF5UVJDb2RlKGZhbHNlKSwgZ2V0TGlua3NJZk5lZWRlZCgpKTsgfVxuICB9LCBwcm9wcy50ZXh0Lm1vYmlsZSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHtcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZXREaXNwbGF5UVJDb2RlKHRydWUpOyB9XG4gIH0sIHByb3BzLnRleHQucXJjb2RlKSkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgb25DbGljazogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2V0RGlzcGxheVFSQ29kZSh0cnVlKTsgfVxuICB9LCBwcm9wcy50ZXh0LnFyY29kZSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHtcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiAoKSB7IHJldHVybiAoc2V0RGlzcGxheVFSQ29kZShmYWxzZSksIGdldExpbmtzSWZOZWVkZWQoKSk7IH1cbiAgfSwgcHJvcHMudGV4dC5kZXNrdG9wKSkpIDogbnVsbCwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBudWxsLCBkaXNwbGF5UVJDb2RlIHx8ICFhbmRyb2lkICYmICFsb2FkaW5nICYmICFsaW5rcy5sZW5ndGggPyBSZWFjdC5jcmVhdGVFbGVtZW50KFFSQ29kZURpc3BsYXksIE9iamVjdC5hc3NpZ24oe30sIGRpc3BsYXlQcm9wcykpIDogUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rRGlzcGxheSwgT2JqZWN0LmFzc2lnbih7fSwgZGlzcGxheVByb3BzLFxuICAgIHtsaW5rczogbGlua3MsXG4gICAgZXJyb3JNZXNzYWdlOiBlcnJvck1lc3NhZ2V9KSkpKSk7XG59XG5cbnZhciBkZSA9IHtcbiAgY2hvb3NlX3ByZWZlcnJlZF93YWxsZXQ6IFwiV8OkaGxlIGJldm9yenVndGUgV2FsbGV0XCIsXG4gIGNvbm5lY3RfbW9iaWxlX3dhbGxldDogXCJWZXJiaW5kZSBtaXQgTW9iaWxlIFdhbGxldFwiLFxuICBzY2FuX3FyY29kZV93aXRoX3dhbGxldDogXCJTY2FubmUgZGVuIFFSLWNvZGUgbWl0IGVpbmVyIFdhbGxldENvbm5lY3Qga29tcGF0aWJsZW4gV2FsbGV0XCIsXG4gIGNvbm5lY3Q6IFwiVmVyYmluZGVuXCIsXG4gIHFyY29kZTogXCJRUi1Db2RlXCIsXG4gIG1vYmlsZTogXCJNb2JpbGVcIixcbiAgZGVza3RvcDogXCJEZXNrdG9wXCIsXG4gIGNvcHlfdG9fY2xpcGJvYXJkOiBcIkluIGRpZSBad2lzY2hlbmFibGFnZSBrb3BpZXJlblwiLFxuICBjb3BpZWRfdG9fY2xpcGJvYXJkOiBcIkluIGRpZSBad2lzY2hlbmFibGFnZSBrb3BpZXJ0IVwiLFxuICBjb25uZWN0X3dpdGg6IFwiVmVyYmluZGVuIG1pdCBIaWxmZSB2b25cIixcbiAgbG9hZGluZzogXCJMYWRlbi4uLlwiLFxuICBzb21ldGhpbmdfd2VudF93cm9uZzogXCJFdHdhcyBpc3Qgc2NoaWVmIGdlbGF1ZmVuXCIsXG4gIG5vX3N1cHBvcnRlZF93YWxsZXRzOiBcIkVzIGdpYnQgbm9jaCBrZWluZSB1bnRlcnN0w7x0enRlbiBXYWxsZXRcIixcbiAgbm9fd2FsbGV0c19mb3VuZDogXCJrZWluZSBXYWxsZXQgZ2VmdW5kZW5cIlxufTtcblxudmFyIGVuID0ge1xuICBjaG9vc2VfcHJlZmVycmVkX3dhbGxldDogXCJDaG9vc2UgeW91ciBwcmVmZXJyZWQgd2FsbGV0XCIsXG4gIGNvbm5lY3RfbW9iaWxlX3dhbGxldDogXCJDb25uZWN0IHRvIE1vYmlsZSBXYWxsZXRcIixcbiAgc2Nhbl9xcmNvZGVfd2l0aF93YWxsZXQ6IFwiU2NhbiBRUiBjb2RlIHdpdGggYSBXYWxsZXRDb25uZWN0LWNvbXBhdGlibGUgd2FsbGV0XCIsXG4gIGNvbm5lY3Q6IFwiQ29ubmVjdFwiLFxuICBxcmNvZGU6IFwiUVIgQ29kZVwiLFxuICBtb2JpbGU6IFwiTW9iaWxlXCIsXG4gIGRlc2t0b3A6IFwiRGVza3RvcFwiLFxuICBjb3B5X3RvX2NsaXBib2FyZDogXCJDb3B5IHRvIGNsaXBib2FyZFwiLFxuICBjb3BpZWRfdG9fY2xpcGJvYXJkOiBcIkNvcGllZCB0byBjbGlwYm9hcmQhXCIsXG4gIGNvbm5lY3Rfd2l0aDogXCJDb25uZWN0IHdpdGhcIixcbiAgbG9hZGluZzogXCJMb2FkaW5nLi4uXCIsXG4gIHNvbWV0aGluZ193ZW50X3dyb25nOiBcIlNvbWV0aGluZyB3ZW50IHdyb25nXCIsXG4gIG5vX3N1cHBvcnRlZF93YWxsZXRzOiBcIlRoZXJlIGFyZSBubyBzdXBwb3J0ZWQgd2FsbGV0cyB5ZXRcIixcbiAgbm9fd2FsbGV0c19mb3VuZDogXCJObyB3YWxsZXRzIGZvdW5kXCJcbn07XG5cbnZhciBlcyA9IHtcbiAgY2hvb3NlX3ByZWZlcnJlZF93YWxsZXQ6IFwiRWxpZ2UgdHUgYmlsbGV0ZXJhIHByZWZlcmlkYVwiLFxuICBjb25uZWN0X21vYmlsZV93YWxsZXQ6IFwiQ29uZWN0YXIgYSBiaWxsZXRlcmEgbcOzdmlsXCIsXG4gIHNjYW5fcXJjb2RlX3dpdGhfd2FsbGV0OiBcIkVzY2FuZWEgZWwgY8OzZGlnbyBRUiBjb24gdW5hIGJpbGxldGVyYSBjb21wYXRpYmxlIGNvbiBXYWxsZXRDb25uZWN0XCIsXG4gIGNvbm5lY3Q6IFwiQ29uZWN0YXJcIixcbiAgcXJjb2RlOiBcIkPDs2RpZ28gUVJcIixcbiAgbW9iaWxlOiBcIk3Ds3ZpbFwiLFxuICBkZXNrdG9wOiBcIkRlc2t0b3BcIixcbiAgY29weV90b19jbGlwYm9hcmQ6IFwiQ29waWFyXCIsXG4gIGNvcGllZF90b19jbGlwYm9hcmQ6IFwiQ29waWFkbyFcIixcbiAgY29ubmVjdF93aXRoOiBcIkNvbmVjdGFyIG1lZGlhbnRlXCIsXG4gIGxvYWRpbmc6IFwiQ2FyZ2FuZG8uLi5cIixcbiAgc29tZXRoaW5nX3dlbnRfd3Jvbmc6IFwiQWxnbyBzYWxpw7MgbWFsXCIsXG4gIG5vX3N1cHBvcnRlZF93YWxsZXRzOiBcIlRvZGF2w61hIG5vIGhheSBiaWxsZXRlcmFzIGNvbXBhdGlibGVzXCIsXG4gIG5vX3dhbGxldHNfZm91bmQ6IFwiTm8gc2UgZW5jb250cmFyb24gYmlsbGV0ZXJhc1wiXG59O1xuXG52YXIgZnIgPSB7XG4gIGNob29zZV9wcmVmZXJyZWRfd2FsbGV0OiBcIkNob2lzaXNzZXogdm90cmUgcG9ydGVmZXVpbGxlIHByw6lmw6lyw6lcIixcbiAgY29ubmVjdF9tb2JpbGVfd2FsbGV0OiBcIlNlIGNvbm5lY3RlciBhdSBwb3J0ZWZldWlsbGUgbW9iaWxlXCIsXG4gIHNjYW5fcXJjb2RlX3dpdGhfd2FsbGV0OiBcIlNjYW5uZXogbGUgUVIgY29kZSBhdmVjIHVuIHBvcnRlZmV1aWxsZSBjb21wYXRpYmxlIFdhbGxldENvbm5lY3RcIixcbiAgY29ubmVjdDogXCJTZSBjb25uZWN0ZXJcIixcbiAgcXJjb2RlOiBcIlFSIENvZGVcIixcbiAgbW9iaWxlOiBcIk1vYmlsZVwiLFxuICBkZXNrdG9wOiBcIkRlc2t0b3BcIixcbiAgY29weV90b19jbGlwYm9hcmQ6IFwiQ29waWVyXCIsXG4gIGNvcGllZF90b19jbGlwYm9hcmQ6IFwiQ29wacOpIVwiLFxuICBjb25uZWN0X3dpdGg6IFwiQ29ubmVjdGV6LXZvdXMgw6AgbCdhaWRlIGRlXCIsXG4gIGxvYWRpbmc6IFwiQ2hhcmdlbWVudC4uLlwiLFxuICBzb21ldGhpbmdfd2VudF93cm9uZzogXCJRdWVscXVlIGNob3NlIGEgbWFsIHRvdXJuw6lcIixcbiAgbm9fc3VwcG9ydGVkX3dhbGxldHM6IFwiSWwgbid5IGEgcGFzIGVuY29yZSBkZSBwb3J0ZWZldWlsbGVzIHByaXMgZW4gY2hhcmdlXCIsXG4gIG5vX3dhbGxldHNfZm91bmQ6IFwiQXVjdW4gcG9ydGVmZXVpbGxlIHRyb3V2w6lcIlxufTtcblxudmFyIGtvID0ge1xuICBjaG9vc2VfcHJlZmVycmVkX3dhbGxldDogXCLsm5DtlZjripQg7KeA6rCR7J2EIOyEoO2Dne2VmOyEuOyalFwiLFxuICBjb25uZWN0X21vYmlsZV93YWxsZXQ6IFwi66qo67CU7J28IOyngOqwkeqzvCDsl7DqsrBcIixcbiAgc2Nhbl9xcmNvZGVfd2l0aF93YWxsZXQ6IFwiV2FsbGV0Q29ubmVjdCDsp4Dsm5Ag7KeA6rCR7JeQ7IScIFFS7L2U65Oc66W8IOyKpOy6lO2VmOyEuOyalFwiLFxuICBjb25uZWN0OiBcIuyXsOqysFwiLFxuICBxcmNvZGU6IFwiUVIg7L2U65OcXCIsXG4gIG1vYmlsZTogXCLrqqjrsJTsnbxcIixcbiAgZGVza3RvcDogXCLrjbDsiqTtgaztg5FcIixcbiAgY29weV90b19jbGlwYm9hcmQ6IFwi7YG066a967O065Oc7JeQIOuzteyCrFwiLFxuICBjb3BpZWRfdG9fY2xpcGJvYXJkOiBcIu2BtOumveuztOuTnOyXkCDrs7XsgqzrkJjsl4jsirXri4jri6QhXCIsXG4gIGNvbm5lY3Rfd2l0aDogXCLsmYAg7Jew6rKw7ZWY64ukXCIsXG4gIGxvYWRpbmc6IFwi66Gc65OcIOykkS4uLlwiLFxuICBzb21ldGhpbmdfd2VudF93cm9uZzogXCLrrLjsoJzqsIAg67Cc7IOd7ZaI7Iq164uI64ukLlwiLFxuICBub19zdXBwb3J0ZWRfd2FsbGV0czogXCLslYTsp4Eg7KeA7JuQ65CY64qUIOyngOqwkeydtCDsl4bsirXri4jri6RcIixcbiAgbm9fd2FsbGV0c19mb3VuZDogXCLsp4DqsJHsnYQg7LC+7J2EIOyImCDsl4bsirXri4jri6RcIlxufTtcblxudmFyIHB0ID0ge1xuICBjaG9vc2VfcHJlZmVycmVkX3dhbGxldDogXCJFc2NvbGhhIHN1YSBjYXJ0ZWlyYSBwcmVmZXJpZGFcIixcbiAgY29ubmVjdF9tb2JpbGVfd2FsbGV0OiBcIkNvbmVjdGFyLXNlIMOgIGNhcnRlaXJhIG3Ds3ZlbFwiLFxuICBzY2FuX3FyY29kZV93aXRoX3dhbGxldDogXCJMZXIgbyBjw7NkaWdvIFFSIGNvbSB1bWEgY2FydGVpcmEgY29tcGF0w612ZWwgY29tIFdhbGxldENvbm5lY3RcIixcbiAgY29ubmVjdDogXCJDb25lY3RhclwiLFxuICBxcmNvZGU6IFwiQ8OzZGlnbyBRUlwiLFxuICBtb2JpbGU6IFwiTcOzdmVsXCIsXG4gIGRlc2t0b3A6IFwiRGVza3RvcFwiLFxuICBjb3B5X3RvX2NsaXBib2FyZDogXCJDb3BpYXJcIixcbiAgY29waWVkX3RvX2NsaXBib2FyZDogXCJDb3BpYWRvIVwiLFxuICBjb25uZWN0X3dpdGg6IFwiTGlnYXIgcG9yIG1laW8gZGVcIixcbiAgbG9hZGluZzogXCJDYXJyZWdhbWVudG8uLi5cIixcbiAgc29tZXRoaW5nX3dlbnRfd3Jvbmc6IFwiQWxnbyBjb3JyZXUgbWFsXCIsXG4gIG5vX3N1cHBvcnRlZF93YWxsZXRzOiBcIkFpbmRhIG7Do28gaMOhIGNhcnRlaXJhcyBzdXBvcnRhZGFzXCIsXG4gIG5vX3dhbGxldHNfZm91bmQ6IFwiTmVuaHVtYSBjYXJ0ZWlyYSBlbmNvbnRyYWRhXCJcbn07XG5cbnZhciB6aCA9IHtcbiAgY2hvb3NlX3ByZWZlcnJlZF93YWxsZXQ6IFwi6YCJ5oup5L2g55qE6ZKx5YyFXCIsXG4gIGNvbm5lY3RfbW9iaWxlX3dhbGxldDogXCLov57mjqXoh7Pnp7vliqjnq6/pkrHljIVcIixcbiAgc2Nhbl9xcmNvZGVfd2l0aF93YWxsZXQ6IFwi5L2/55So5YW85a65IFdhbGxldENvbm5lY3Qg55qE6ZKx5YyF5omr5o+P5LqM57u056CBXCIsXG4gIGNvbm5lY3Q6IFwi6L+e5o6lXCIsXG4gIHFyY29kZTogXCLkuoznu7TnoIFcIixcbiAgbW9iaWxlOiBcIuenu+WKqFwiLFxuICBkZXNrdG9wOiBcIuahjOmdolwiLFxuICBjb3B5X3RvX2NsaXBib2FyZDogXCLlpI3liLbliLDliarotLTmnb9cIixcbiAgY29waWVkX3RvX2NsaXBib2FyZDogXCLlpI3liLbliLDliarotLTmnb/miJDlip/vvIFcIixcbiAgY29ubmVjdF93aXRoOiBcIumAmui/h+S7peS4i+aWueW8j+i/nuaOpVwiLFxuICBsb2FkaW5nOiBcIuato+WcqOWKoOi9vS4uLlwiLFxuICBzb21ldGhpbmdfd2VudF93cm9uZzogXCLlh7rkuobpl67pophcIixcbiAgbm9fc3VwcG9ydGVkX3dhbGxldHM6IFwi55uu5YmN6L+Y5rKh5pyJ5pSv5oyB55qE6ZKx5YyFXCIsXG4gIG5vX3dhbGxldHNfZm91bmQ6IFwi5rKh5pyJ5om+5Yiw6ZKx5YyFXCJcbn07XG5cbnZhciBmYSA9IHtcbiAgY2hvb3NlX3ByZWZlcnJlZF93YWxsZXQ6IFwi2qnbjNmBINm+2YjZhCDZhdmI2LHYryDZhti42LEg2K7ZiNivINix2Kcg2KfZhtiq2K7Yp9ioINqp2YbbjNivXCIsXG4gIGNvbm5lY3RfbW9iaWxlX3dhbGxldDogXCLYqNmHINqp24zZgSDZvtmI2YQg2YXZiNio2KfbjNmEINmI2LXZhCDYtNmI24zYr1wiLFxuICBzY2FuX3FyY29kZV93aXRoX3dhbGxldDogXCLaqdivIFFSINix2Kcg2KjYpyDbjNqpINqp24zZgSDZvtmI2YQg2LPYp9iy2q/Yp9ixINio2KcgV2FsbGV0Q29ubmVjdCDYp9iz2qnZhiDaqdmG24zYr1wiLFxuICBjb25uZWN0OiBcItin2KrYtdin2YRcIixcbiAgcXJjb2RlOiBcItqp2K8gUVJcIixcbiAgbW9iaWxlOiBcItiz24zYp9ixXCIsXG4gIGRlc2t0b3A6IFwi2K/Ys9qp2KrYp9m+XCIsXG4gIGNvcHlfdG9fY2xpcGJvYXJkOiBcItqp2b7bjCDYqNmHINqp2YTbjNm+INio2YjYsdivXCIsXG4gIGNvcGllZF90b19jbGlwYm9hcmQ6IFwi2K/YsSDaqdmE24zZviDYqNmI2LHYryDaqdm+24wg2LTYryFcIixcbiAgY29ubmVjdF93aXRoOiBcItin2LHYqtio2KfYtyDYqNinXCIsXG4gIGxvYWRpbmc6IFwiLi4u2KjYp9ix2q/YsNin2LHbjFwiLFxuICBzb21ldGhpbmdfd2VudF93cm9uZzogXCLZhdi02qnZhNuMINm+24zYtCDYotmF2K9cIixcbiAgbm9fc3VwcG9ydGVkX3dhbGxldHM6IFwi2YfZhtmI2LIg2YfbjNqGINqp24zZgSDZvtmI2YQg2b7YtNiq24zYqNin2YbbjCDYtNiv2Ycg2KfbjCDZiNis2YjYryDZhtiv2KfYsdivXCIsXG4gIG5vX3dhbGxldHNfZm91bmQ6IFwi2YfbjNqGINqp24zZgSDZvtmI2YTbjCDZvtuM2K/YpyDZhti02K9cIlxufTtcblxudmFyIGxhbmd1YWdlcyA9IHtcbiAgZGU6IGRlLFxuICBlbjogZW4sXG4gIGVzOiBlcyxcbiAgZnI6IGZyLFxuICBrbzoga28sXG4gIHB0OiBwdCxcbiAgemg6IHpoLFxuICBmYTogZmFcbn07XG5cbmZ1bmN0aW9uIGluamVjdFN0eWxlU2hlZXQoKSB7XG4gIHZhciBkb2MgPSBicm93c2VyVXRpbHMuZ2V0RG9jdW1lbnRPclRocm93KCk7XG4gIHZhciBwcmV2ID0gZG9jLmdldEVsZW1lbnRCeUlkKFdBTExFVENPTk5FQ1RfU1RZTEVfSUQpO1xuXG4gIGlmIChwcmV2KSB7XG4gICAgZG9jLmhlYWQucmVtb3ZlQ2hpbGQocHJldik7XG4gIH1cblxuICB2YXIgc3R5bGUgPSBkb2MuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBzdHlsZS5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBXQUxMRVRDT05ORUNUX1NUWUxFX0lEKTtcbiAgc3R5bGUuaW5uZXJUZXh0ID0gV0FMTEVUQ09OTkVDVF9TVFlMRV9TSEVFVDtcbiAgZG9jLmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5mdW5jdGlvbiByZW5kZXJXcmFwcGVyKCkge1xuICB2YXIgZG9jID0gYnJvd3NlclV0aWxzLmdldERvY3VtZW50T3JUaHJvdygpO1xuICB2YXIgd3JhcHBlciA9IGRvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICB3cmFwcGVyLnNldEF0dHJpYnV0ZShcImlkXCIsIFdBTExFVENPTk5FQ1RfV1JBUFBFUl9JRCk7XG4gIGRvYy5ib2R5LmFwcGVuZENoaWxkKHdyYXBwZXIpO1xuICByZXR1cm4gd3JhcHBlcjtcbn1cblxuZnVuY3Rpb24gdHJpZ2dlckNsb3NlQW5pbWF0aW9uKCkge1xuICB2YXIgZG9jID0gYnJvd3NlclV0aWxzLmdldERvY3VtZW50T3JUaHJvdygpO1xuICB2YXIgbW9kYWwgPSBkb2MuZ2V0RWxlbWVudEJ5SWQoV0FMTEVUQ09OTkVDVF9NT0RBTF9JRCk7XG5cbiAgaWYgKG1vZGFsKSB7XG4gICAgbW9kYWwuY2xhc3NOYW1lID0gbW9kYWwuY2xhc3NOYW1lLnJlcGxhY2UoXCJmYWRlSW5cIiwgXCJmYWRlT3V0XCIpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHdyYXBwZXIgPSBkb2MuZ2V0RWxlbWVudEJ5SWQoV0FMTEVUQ09OTkVDVF9XUkFQUEVSX0lEKTtcblxuICAgICAgaWYgKHdyYXBwZXIpIHtcbiAgICAgICAgZG9jLmJvZHkucmVtb3ZlQ2hpbGQod3JhcHBlcik7XG4gICAgICB9XG4gICAgfSwgQU5JTUFUSU9OX0RVUkFUSU9OKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRXcmFwcGVkQ2FsbGJhY2soY2IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB0cmlnZ2VyQ2xvc2VBbmltYXRpb24oKTtcblxuICAgIGlmIChjYikge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFRleHQoKSB7XG4gIHZhciBsYW5nID0gYnJvd3NlclV0aWxzLmdldE5hdmlnYXRvck9yVGhyb3coKS5sYW5ndWFnZS5zcGxpdChcIi1cIilbMF0gfHwgXCJlblwiO1xuICByZXR1cm4gbGFuZ3VhZ2VzW2xhbmddIHx8IGxhbmd1YWdlc1tcImVuXCJdO1xufVxuXG5mdW5jdGlvbiBvcGVuJDEodXJpLCBjYiwgcXJjb2RlTW9kYWxPcHRpb25zKSB7XG4gIGluamVjdFN0eWxlU2hlZXQoKTtcbiAgdmFyIHdyYXBwZXIgPSByZW5kZXJXcmFwcGVyKCk7XG4gIFJlYWN0LnJlbmRlcihSZWFjdC5jcmVhdGVFbGVtZW50KE1vZGFsLCB7XG4gICAgdGV4dDogZ2V0VGV4dCgpLFxuICAgIHVyaTogdXJpLFxuICAgIG9uQ2xvc2U6IGdldFdyYXBwZWRDYWxsYmFjayhjYiksXG4gICAgcXJjb2RlTW9kYWxPcHRpb25zOiBxcmNvZGVNb2RhbE9wdGlvbnNcbiAgfSksIHdyYXBwZXIpO1xufVxuZnVuY3Rpb24gY2xvc2UkMSgpIHtcbiAgdHJpZ2dlckNsb3NlQW5pbWF0aW9uKCk7XG59XG5cbnZhciBpc05vZGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlICE9PSBcInVuZGVmaW5lZFwiOyB9O1xuXG5mdW5jdGlvbiBvcGVuJDIodXJpLCBjYiwgcXJjb2RlTW9kYWxPcHRpb25zKSB7XG4gIGNvbnNvbGUubG9nKHVyaSk7XG5cbiAgaWYgKGlzTm9kZSgpKSB7XG4gICAgb3Blbih1cmkpO1xuICB9IGVsc2Uge1xuICAgIG9wZW4kMSh1cmksIGNiLCBxcmNvZGVNb2RhbE9wdGlvbnMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsb3NlJDIoKSB7XG4gIGlmIChpc05vZGUoKSkgOyBlbHNlIHtcbiAgICBjbG9zZSQxKCk7XG4gIH1cbn1cblxudmFyIGluZGV4ID0ge1xuICBvcGVuOiBvcGVuJDIsXG4gIGNsb3NlOiBjbG9zZSQyXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGluZGV4O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCJ2YXIgbixsLHUsaSx0LHIsbyxmLGU9e30sYz1bXSxzPS9hY2l0fGV4KD86c3xnfG58cHwkKXxycGh8Z3JpZHxvd3N8bW5jfG50d3xpbmVbY2hdfHpvb3xeb3JkL2k7ZnVuY3Rpb24gYShuLGwpe2Zvcih2YXIgdSBpbiBsKW5bdV09bFt1XTtyZXR1cm4gbn1mdW5jdGlvbiB2KG4pe3ZhciBsPW4ucGFyZW50Tm9kZTtsJiZsLnJlbW92ZUNoaWxkKG4pfWZ1bmN0aW9uIGgobixsLHUpe3ZhciBpLHQ9YXJndW1lbnRzLHI9e307Zm9yKGkgaW4gbClcImtleVwiIT09aSYmXCJyZWZcIiE9PWkmJihyW2ldPWxbaV0pO2lmKGFyZ3VtZW50cy5sZW5ndGg+Mylmb3IodT1bdV0saT0zO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspdS5wdXNoKHRbaV0pO2lmKG51bGwhPXUmJihyLmNoaWxkcmVuPXUpLFwiZnVuY3Rpb25cIj09dHlwZW9mIG4mJm51bGwhPW4uZGVmYXVsdFByb3BzKWZvcihpIGluIG4uZGVmYXVsdFByb3BzKXZvaWQgMD09PXJbaV0mJihyW2ldPW4uZGVmYXVsdFByb3BzW2ldKTtyZXR1cm4gcChuLHIsbCYmbC5rZXksbCYmbC5yZWYsbnVsbCl9ZnVuY3Rpb24gcChsLHUsaSx0LHIpe3ZhciBvPXt0eXBlOmwscHJvcHM6dSxrZXk6aSxyZWY6dCxfX2s6bnVsbCxfXzpudWxsLF9fYjowLF9fZTpudWxsLF9fZDp2b2lkIDAsX19jOm51bGwsY29uc3RydWN0b3I6dm9pZCAwLF9fdjpyfTtyZXR1cm4gbnVsbD09ciYmKG8uX192PW8pLG4udm5vZGUmJm4udm5vZGUobyksb31mdW5jdGlvbiB5KCl7cmV0dXJue319ZnVuY3Rpb24gZChuKXtyZXR1cm4gbi5jaGlsZHJlbn1mdW5jdGlvbiBtKG4sbCl7dGhpcy5wcm9wcz1uLHRoaXMuY29udGV4dD1sfWZ1bmN0aW9uIHcobixsKXtpZihudWxsPT1sKXJldHVybiBuLl9fP3cobi5fXyxuLl9fLl9fay5pbmRleE9mKG4pKzEpOm51bGw7Zm9yKHZhciB1O2w8bi5fX2subGVuZ3RoO2wrKylpZihudWxsIT0odT1uLl9fa1tsXSkmJm51bGwhPXUuX19lKXJldHVybiB1Ll9fZTtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBuLnR5cGU/dyhuKTpudWxsfWZ1bmN0aW9uIGsobil7dmFyIGwsdTtpZihudWxsIT0obj1uLl9fKSYmbnVsbCE9bi5fX2Mpe2ZvcihuLl9fZT1uLl9fYy5iYXNlPW51bGwsbD0wO2w8bi5fX2subGVuZ3RoO2wrKylpZihudWxsIT0odT1uLl9fa1tsXSkmJm51bGwhPXUuX19lKXtuLl9fZT1uLl9fYy5iYXNlPXUuX19lO2JyZWFrfXJldHVybiBrKG4pfX1mdW5jdGlvbiBnKGwpeyghbC5fX2QmJihsLl9fZD0hMCkmJnUucHVzaChsKSYmIWkrK3x8ciE9PW4uZGVib3VuY2VSZW5kZXJpbmcpJiYoKHI9bi5kZWJvdW5jZVJlbmRlcmluZyl8fHQpKF8pfWZ1bmN0aW9uIF8oKXtmb3IodmFyIG47aT11Lmxlbmd0aDspbj11LnNvcnQoZnVuY3Rpb24obixsKXtyZXR1cm4gbi5fX3YuX19iLWwuX192Ll9fYn0pLHU9W10sbi5zb21lKGZ1bmN0aW9uKG4pe3ZhciBsLHUsaSx0LHIsbyxmO24uX19kJiYobz0ocj0obD1uKS5fX3YpLl9fZSwoZj1sLl9fUCkmJih1PVtdLChpPWEoe30scikpLl9fdj1pLHQ9QShmLHIsaSxsLl9fbix2b2lkIDAhPT1mLm93bmVyU1ZHRWxlbWVudCxudWxsLHUsbnVsbD09bz93KHIpOm8pLFQodSxyKSx0IT1vJiZrKHIpKSl9KX1mdW5jdGlvbiBiKG4sbCx1LGksdCxyLG8sZixzKXt2YXIgYSxoLHAseSxkLG0sayxnPXUmJnUuX19rfHxjLF89Zy5sZW5ndGg7aWYoZj09ZSYmKGY9bnVsbCE9cj9yWzBdOl8/dyh1LDApOm51bGwpLGE9MCxsLl9faz14KGwuX19rLGZ1bmN0aW9uKHUpe2lmKG51bGwhPXUpe2lmKHUuX189bCx1Ll9fYj1sLl9fYisxLG51bGw9PT0ocD1nW2FdKXx8cCYmdS5rZXk9PXAua2V5JiZ1LnR5cGU9PT1wLnR5cGUpZ1thXT12b2lkIDA7ZWxzZSBmb3IoaD0wO2g8XztoKyspe2lmKChwPWdbaF0pJiZ1LmtleT09cC5rZXkmJnUudHlwZT09PXAudHlwZSl7Z1toXT12b2lkIDA7YnJlYWt9cD1udWxsfWlmKHk9QShuLHUscD1wfHxlLGksdCxyLG8sZixzKSwoaD11LnJlZikmJnAucmVmIT1oJiYoa3x8KGs9W10pLHAucmVmJiZrLnB1c2gocC5yZWYsbnVsbCx1KSxrLnB1c2goaCx1Ll9fY3x8eSx1KSksbnVsbCE9eSl7dmFyIGM7aWYobnVsbD09bSYmKG09eSksdm9pZCAwIT09dS5fX2QpYz11Ll9fZCx1Ll9fZD12b2lkIDA7ZWxzZSBpZihyPT1wfHx5IT1mfHxudWxsPT15LnBhcmVudE5vZGUpe246aWYobnVsbD09Znx8Zi5wYXJlbnROb2RlIT09biluLmFwcGVuZENoaWxkKHkpLGM9bnVsbDtlbHNle2ZvcihkPWYsaD0wOyhkPWQubmV4dFNpYmxpbmcpJiZoPF87aCs9MilpZihkPT15KWJyZWFrIG47bi5pbnNlcnRCZWZvcmUoeSxmKSxjPWZ9XCJvcHRpb25cIj09bC50eXBlJiYobi52YWx1ZT1cIlwiKX1mPXZvaWQgMCE9PWM/Yzp5Lm5leHRTaWJsaW5nLFwiZnVuY3Rpb25cIj09dHlwZW9mIGwudHlwZSYmKGwuX19kPWYpfWVsc2UgZiYmcC5fX2U9PWYmJmYucGFyZW50Tm9kZSE9biYmKGY9dyhwKSl9cmV0dXJuIGErKyx1fSksbC5fX2U9bSxudWxsIT1yJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBsLnR5cGUpZm9yKGE9ci5sZW5ndGg7YS0tOyludWxsIT1yW2FdJiZ2KHJbYV0pO2ZvcihhPV87YS0tOyludWxsIT1nW2FdJiZEKGdbYV0sZ1thXSk7aWYoaylmb3IoYT0wO2E8ay5sZW5ndGg7YSsrKWooa1thXSxrWysrYV0sa1srK2FdKX1mdW5jdGlvbiB4KG4sbCx1KXtpZihudWxsPT11JiYodT1bXSksbnVsbD09bnx8XCJib29sZWFuXCI9PXR5cGVvZiBuKWwmJnUucHVzaChsKG51bGwpKTtlbHNlIGlmKEFycmF5LmlzQXJyYXkobikpZm9yKHZhciBpPTA7aTxuLmxlbmd0aDtpKyspeChuW2ldLGwsdSk7ZWxzZSB1LnB1c2gobD9sKFwic3RyaW5nXCI9PXR5cGVvZiBufHxcIm51bWJlclwiPT10eXBlb2Ygbj9wKG51bGwsbixudWxsLG51bGwsbik6bnVsbCE9bi5fX2V8fG51bGwhPW4uX19jP3Aobi50eXBlLG4ucHJvcHMsbi5rZXksbnVsbCxuLl9fdik6bik6bik7cmV0dXJuIHV9ZnVuY3Rpb24gUChuLGwsdSxpLHQpe3ZhciByO2ZvcihyIGluIHUpXCJjaGlsZHJlblwiPT09cnx8XCJrZXlcIj09PXJ8fHIgaW4gbHx8TihuLHIsbnVsbCx1W3JdLGkpO2ZvcihyIGluIGwpdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgbFtyXXx8XCJjaGlsZHJlblwiPT09cnx8XCJrZXlcIj09PXJ8fFwidmFsdWVcIj09PXJ8fFwiY2hlY2tlZFwiPT09cnx8dVtyXT09PWxbcl18fE4obixyLGxbcl0sdVtyXSxpKX1mdW5jdGlvbiBDKG4sbCx1KXtcIi1cIj09PWxbMF0/bi5zZXRQcm9wZXJ0eShsLHUpOm5bbF09XCJudW1iZXJcIj09dHlwZW9mIHUmJiExPT09cy50ZXN0KGwpP3UrXCJweFwiOm51bGw9PXU/XCJcIjp1fWZ1bmN0aW9uIE4obixsLHUsaSx0KXt2YXIgcixvLGYsZSxjO2lmKHQ/XCJjbGFzc05hbWVcIj09PWwmJihsPVwiY2xhc3NcIik6XCJjbGFzc1wiPT09bCYmKGw9XCJjbGFzc05hbWVcIiksXCJzdHlsZVwiPT09bClpZihyPW4uc3R5bGUsXCJzdHJpbmdcIj09dHlwZW9mIHUpci5jc3NUZXh0PXU7ZWxzZXtpZihcInN0cmluZ1wiPT10eXBlb2YgaSYmKHIuY3NzVGV4dD1cIlwiLGk9bnVsbCksaSlmb3IoZSBpbiBpKXUmJmUgaW4gdXx8QyhyLGUsXCJcIik7aWYodSlmb3IoYyBpbiB1KWkmJnVbY109PT1pW2NdfHxDKHIsYyx1W2NdKX1lbHNlXCJvXCI9PT1sWzBdJiZcIm5cIj09PWxbMV0/KG89bCE9PShsPWwucmVwbGFjZSgvQ2FwdHVyZSQvLFwiXCIpKSxmPWwudG9Mb3dlckNhc2UoKSxsPShmIGluIG4/ZjpsKS5zbGljZSgyKSx1PyhpfHxuLmFkZEV2ZW50TGlzdGVuZXIobCx6LG8pLChuLmx8fChuLmw9e30pKVtsXT11KTpuLnJlbW92ZUV2ZW50TGlzdGVuZXIobCx6LG8pKTpcImxpc3RcIiE9PWwmJlwidGFnTmFtZVwiIT09bCYmXCJmb3JtXCIhPT1sJiZcInR5cGVcIiE9PWwmJlwic2l6ZVwiIT09bCYmIXQmJmwgaW4gbj9uW2xdPW51bGw9PXU/XCJcIjp1OlwiZnVuY3Rpb25cIiE9dHlwZW9mIHUmJlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJihsIT09KGw9bC5yZXBsYWNlKC9eeGxpbms6Py8sXCJcIikpP251bGw9PXV8fCExPT09dT9uLnJlbW92ZUF0dHJpYnV0ZU5TKFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLGwudG9Mb3dlckNhc2UoKSk6bi5zZXRBdHRyaWJ1dGVOUyhcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixsLnRvTG93ZXJDYXNlKCksdSk6bnVsbD09dXx8ITE9PT11JiYhL15hci8udGVzdChsKT9uLnJlbW92ZUF0dHJpYnV0ZShsKTpuLnNldEF0dHJpYnV0ZShsLHUpKX1mdW5jdGlvbiB6KGwpe3RoaXMubFtsLnR5cGVdKG4uZXZlbnQ/bi5ldmVudChsKTpsKX1mdW5jdGlvbiBBKGwsdSxpLHQscixvLGYsZSxjKXt2YXIgcyx2LGgscCx5LHcsayxnLF8seCxQPXUudHlwZTtpZih2b2lkIDAhPT11LmNvbnN0cnVjdG9yKXJldHVybiBudWxsOyhzPW4uX19iKSYmcyh1KTt0cnl7bjppZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQKXtpZihnPXUucHJvcHMsXz0ocz1QLmNvbnRleHRUeXBlKSYmdFtzLl9fY10seD1zP18/Xy5wcm9wcy52YWx1ZTpzLl9fOnQsaS5fX2M/az0odj11Ll9fYz1pLl9fYykuX189di5fX0U6KFwicHJvdG90eXBlXCJpbiBQJiZQLnByb3RvdHlwZS5yZW5kZXI/dS5fX2M9dj1uZXcgUChnLHgpOih1Ll9fYz12PW5ldyBtKGcseCksdi5jb25zdHJ1Y3Rvcj1QLHYucmVuZGVyPUUpLF8mJl8uc3ViKHYpLHYucHJvcHM9Zyx2LnN0YXRlfHwodi5zdGF0ZT17fSksdi5jb250ZXh0PXgsdi5fX249dCxoPXYuX19kPSEwLHYuX19oPVtdKSxudWxsPT12Ll9fcyYmKHYuX19zPXYuc3RhdGUpLG51bGwhPVAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiYodi5fX3M9PXYuc3RhdGUmJih2Ll9fcz1hKHt9LHYuX19zKSksYSh2Ll9fcyxQLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhnLHYuX19zKSkpLHA9di5wcm9wcyx5PXYuc3RhdGUsaCludWxsPT1QLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmbnVsbCE9di5jb21wb25lbnRXaWxsTW91bnQmJnYuY29tcG9uZW50V2lsbE1vdW50KCksbnVsbCE9di5jb21wb25lbnREaWRNb3VudCYmdi5fX2gucHVzaCh2LmNvbXBvbmVudERpZE1vdW50KTtlbHNle2lmKG51bGw9PVAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiZnIT09cCYmbnVsbCE9di5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZ2LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoZyx4KSwhdi5fX2UmJm51bGwhPXYuc2hvdWxkQ29tcG9uZW50VXBkYXRlJiYhMT09PXYuc2hvdWxkQ29tcG9uZW50VXBkYXRlKGcsdi5fX3MseCl8fHUuX192PT09aS5fX3YmJiF2Ll9fKXtmb3Iodi5wcm9wcz1nLHYuc3RhdGU9di5fX3MsdS5fX3YhPT1pLl9fdiYmKHYuX19kPSExKSx2Ll9fdj11LHUuX19lPWkuX19lLHUuX19rPWkuX19rLHYuX19oLmxlbmd0aCYmZi5wdXNoKHYpLHM9MDtzPHUuX19rLmxlbmd0aDtzKyspdS5fX2tbc10mJih1Ll9fa1tzXS5fXz11KTticmVhayBufW51bGwhPXYuY29tcG9uZW50V2lsbFVwZGF0ZSYmdi5jb21wb25lbnRXaWxsVXBkYXRlKGcsdi5fX3MseCksbnVsbCE9di5jb21wb25lbnREaWRVcGRhdGUmJnYuX19oLnB1c2goZnVuY3Rpb24oKXt2LmNvbXBvbmVudERpZFVwZGF0ZShwLHksdyl9KX12LmNvbnRleHQ9eCx2LnByb3BzPWcsdi5zdGF0ZT12Ll9fcywocz1uLl9fcikmJnModSksdi5fX2Q9ITEsdi5fX3Y9dSx2Ll9fUD1sLHM9di5yZW5kZXIodi5wcm9wcyx2LnN0YXRlLHYuY29udGV4dCksdS5fX2s9bnVsbCE9cyYmcy50eXBlPT1kJiZudWxsPT1zLmtleT9zLnByb3BzLmNoaWxkcmVuOkFycmF5LmlzQXJyYXkocyk/czpbc10sbnVsbCE9di5nZXRDaGlsZENvbnRleHQmJih0PWEoYSh7fSx0KSx2LmdldENoaWxkQ29udGV4dCgpKSksaHx8bnVsbD09di5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8KHc9di5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShwLHkpKSxiKGwsdSxpLHQscixvLGYsZSxjKSx2LmJhc2U9dS5fX2Usdi5fX2gubGVuZ3RoJiZmLnB1c2godiksayYmKHYuX19FPXYuX189bnVsbCksdi5fX2U9ITF9ZWxzZSBudWxsPT1vJiZ1Ll9fdj09PWkuX192Pyh1Ll9faz1pLl9fayx1Ll9fZT1pLl9fZSk6dS5fX2U9JChpLl9fZSx1LGksdCxyLG8sZixjKTsocz1uLmRpZmZlZCkmJnModSl9Y2F0Y2gobCl7dS5fX3Y9bnVsbCxuLl9fZShsLHUsaSl9cmV0dXJuIHUuX19lfWZ1bmN0aW9uIFQobCx1KXtuLl9fYyYmbi5fX2ModSxsKSxsLnNvbWUoZnVuY3Rpb24odSl7dHJ5e2w9dS5fX2gsdS5fX2g9W10sbC5zb21lKGZ1bmN0aW9uKG4pe24uY2FsbCh1KX0pfWNhdGNoKGwpe24uX19lKGwsdS5fX3YpfX0pfWZ1bmN0aW9uICQobixsLHUsaSx0LHIsbyxmKXt2YXIgcyxhLHYsaCxwLHk9dS5wcm9wcyxkPWwucHJvcHM7aWYodD1cInN2Z1wiPT09bC50eXBlfHx0LG51bGwhPXIpZm9yKHM9MDtzPHIubGVuZ3RoO3MrKylpZihudWxsIT0oYT1yW3NdKSYmKChudWxsPT09bC50eXBlPzM9PT1hLm5vZGVUeXBlOmEubG9jYWxOYW1lPT09bC50eXBlKXx8bj09YSkpe249YSxyW3NdPW51bGw7YnJlYWt9aWYobnVsbD09bil7aWYobnVsbD09PWwudHlwZSlyZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZCk7bj10P2RvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsbC50eXBlKTpkb2N1bWVudC5jcmVhdGVFbGVtZW50KGwudHlwZSxkLmlzJiZ7aXM6ZC5pc30pLHI9bnVsbCxmPSExfWlmKG51bGw9PT1sLnR5cGUpeSE9PWQmJm4uZGF0YSE9ZCYmKG4uZGF0YT1kKTtlbHNle2lmKG51bGwhPXImJihyPWMuc2xpY2UuY2FsbChuLmNoaWxkTm9kZXMpKSx2PSh5PXUucHJvcHN8fGUpLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLGg9ZC5kYW5nZXJvdXNseVNldElubmVySFRNTCwhZil7aWYoeT09PWUpZm9yKHk9e30scD0wO3A8bi5hdHRyaWJ1dGVzLmxlbmd0aDtwKyspeVtuLmF0dHJpYnV0ZXNbcF0ubmFtZV09bi5hdHRyaWJ1dGVzW3BdLnZhbHVlOyhofHx2KSYmKGgmJnYmJmguX19odG1sPT12Ll9faHRtbHx8KG4uaW5uZXJIVE1MPWgmJmguX19odG1sfHxcIlwiKSl9UChuLGQseSx0LGYpLGg/bC5fX2s9W106KGwuX19rPWwucHJvcHMuY2hpbGRyZW4sYihuLGwsdSxpLFwiZm9yZWlnbk9iamVjdFwiIT09bC50eXBlJiZ0LHIsbyxlLGYpKSxmfHwoXCJ2YWx1ZVwiaW4gZCYmdm9pZCAwIT09KHM9ZC52YWx1ZSkmJnMhPT1uLnZhbHVlJiZOKG4sXCJ2YWx1ZVwiLHMseS52YWx1ZSwhMSksXCJjaGVja2VkXCJpbiBkJiZ2b2lkIDAhPT0ocz1kLmNoZWNrZWQpJiZzIT09bi5jaGVja2VkJiZOKG4sXCJjaGVja2VkXCIscyx5LmNoZWNrZWQsITEpKX1yZXR1cm4gbn1mdW5jdGlvbiBqKGwsdSxpKXt0cnl7XCJmdW5jdGlvblwiPT10eXBlb2YgbD9sKHUpOmwuY3VycmVudD11fWNhdGNoKGwpe24uX19lKGwsaSl9fWZ1bmN0aW9uIEQobCx1LGkpe3ZhciB0LHIsbztpZihuLnVubW91bnQmJm4udW5tb3VudChsKSwodD1sLnJlZikmJih0LmN1cnJlbnQmJnQuY3VycmVudCE9PWwuX19lfHxqKHQsbnVsbCx1KSksaXx8XCJmdW5jdGlvblwiPT10eXBlb2YgbC50eXBlfHwoaT1udWxsIT0ocj1sLl9fZSkpLGwuX19lPWwuX19kPXZvaWQgMCxudWxsIT0odD1sLl9fYykpe2lmKHQuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e3QuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChsKXtuLl9fZShsLHUpfXQuYmFzZT10Ll9fUD1udWxsfWlmKHQ9bC5fX2spZm9yKG89MDtvPHQubGVuZ3RoO28rKyl0W29dJiZEKHRbb10sdSxpKTtudWxsIT1yJiZ2KHIpfWZ1bmN0aW9uIEUobixsLHUpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yKG4sdSl9ZnVuY3Rpb24gSChsLHUsaSl7dmFyIHQscixmO24uX18mJm4uX18obCx1KSxyPSh0PWk9PT1vKT9udWxsOmkmJmkuX19rfHx1Ll9fayxsPWgoZCxudWxsLFtsXSksZj1bXSxBKHUsKHQ/dTppfHx1KS5fX2s9bCxyfHxlLGUsdm9pZCAwIT09dS5vd25lclNWR0VsZW1lbnQsaSYmIXQ/W2ldOnI/bnVsbDpjLnNsaWNlLmNhbGwodS5jaGlsZE5vZGVzKSxmLGl8fGUsdCksVChmLGwpfWZ1bmN0aW9uIEkobixsKXtIKG4sbCxvKX1mdW5jdGlvbiBMKG4sbCl7dmFyIHUsaTtmb3IoaSBpbiBsPWEoYSh7fSxuLnByb3BzKSxsKSxhcmd1bWVudHMubGVuZ3RoPjImJihsLmNoaWxkcmVuPWMuc2xpY2UuY2FsbChhcmd1bWVudHMsMikpLHU9e30sbClcImtleVwiIT09aSYmXCJyZWZcIiE9PWkmJih1W2ldPWxbaV0pO3JldHVybiBwKG4udHlwZSx1LGwua2V5fHxuLmtleSxsLnJlZnx8bi5yZWYsbnVsbCl9ZnVuY3Rpb24gTShuKXt2YXIgbD17fSx1PXtfX2M6XCJfX2NDXCIrZisrLF9fOm4sQ29uc3VtZXI6ZnVuY3Rpb24obixsKXtyZXR1cm4gbi5jaGlsZHJlbihsKX0sUHJvdmlkZXI6ZnVuY3Rpb24obil7dmFyIGksdD10aGlzO3JldHVybiB0aGlzLmdldENoaWxkQ29udGV4dHx8KGk9W10sdGhpcy5nZXRDaGlsZENvbnRleHQ9ZnVuY3Rpb24oKXtyZXR1cm4gbFt1Ll9fY109dCxsfSx0aGlzLnNob3VsZENvbXBvbmVudFVwZGF0ZT1mdW5jdGlvbihuKXt0LnByb3BzLnZhbHVlIT09bi52YWx1ZSYmaS5zb21lKGZ1bmN0aW9uKGwpe2wuY29udGV4dD1uLnZhbHVlLGcobCl9KX0sdGhpcy5zdWI9ZnVuY3Rpb24obil7aS5wdXNoKG4pO3ZhciBsPW4uY29tcG9uZW50V2lsbFVubW91bnQ7bi5jb21wb25lbnRXaWxsVW5tb3VudD1mdW5jdGlvbigpe2kuc3BsaWNlKGkuaW5kZXhPZihuKSwxKSxsJiZsLmNhbGwobil9fSksbi5jaGlsZHJlbn19O3JldHVybiB1LkNvbnN1bWVyLmNvbnRleHRUeXBlPXUsdS5Qcm92aWRlci5fXz11LHV9bj17X19lOmZ1bmN0aW9uKG4sbCl7Zm9yKHZhciB1LGk7bD1sLl9fOylpZigodT1sLl9fYykmJiF1Ll9fKXRyeXtpZih1LmNvbnN0cnVjdG9yJiZudWxsIT11LmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvciYmKGk9ITAsdS5zZXRTdGF0ZSh1LmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihuKSkpLG51bGwhPXUuY29tcG9uZW50RGlkQ2F0Y2gmJihpPSEwLHUuY29tcG9uZW50RGlkQ2F0Y2gobikpLGkpcmV0dXJuIGcodS5fX0U9dSl9Y2F0Y2gobCl7bj1sfXRocm93IG59fSxsPWZ1bmN0aW9uKG4pe3JldHVybiBudWxsIT1uJiZ2b2lkIDA9PT1uLmNvbnN0cnVjdG9yfSxtLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihuLGwpe3ZhciB1O3U9dGhpcy5fX3MhPT10aGlzLnN0YXRlP3RoaXMuX19zOnRoaXMuX19zPWEoe30sdGhpcy5zdGF0ZSksXCJmdW5jdGlvblwiPT10eXBlb2YgbiYmKG49bih1LHRoaXMucHJvcHMpKSxuJiZhKHUsbiksbnVsbCE9biYmdGhpcy5fX3YmJihsJiZ0aGlzLl9faC5wdXNoKGwpLGcodGhpcykpfSxtLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihuKXt0aGlzLl9fdiYmKHRoaXMuX19lPSEwLG4mJnRoaXMuX19oLnB1c2gobiksZyh0aGlzKSl9LG0ucHJvdG90eXBlLnJlbmRlcj1kLHU9W10saT0wLHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgUHJvbWlzZT9Qcm9taXNlLnByb3RvdHlwZS50aGVuLmJpbmQoUHJvbWlzZS5yZXNvbHZlKCkpOnNldFRpbWVvdXQsbz1lLGY9MDtleHBvcnR7SCBhcyByZW5kZXIsSSBhcyBoeWRyYXRlLGggYXMgY3JlYXRlRWxlbWVudCxoLGQgYXMgRnJhZ21lbnQseSBhcyBjcmVhdGVSZWYsbCBhcyBpc1ZhbGlkRWxlbWVudCxtIGFzIENvbXBvbmVudCxMIGFzIGNsb25lRWxlbWVudCxNIGFzIGNyZWF0ZUNvbnRleHQseCBhcyB0b0NoaWxkQXJyYXksRCBhcyBfdW5tb3VudCxuIGFzIG9wdGlvbnN9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJlYWN0Lm1vZHVsZS5qcy5tYXBcbiIsImltcG9ydHtvcHRpb25zIGFzIG59ZnJvbVwicHJlYWN0XCI7dmFyIHQsdSxyLGk9MCxvPVtdLGM9bi5fX3IsZj1uLmRpZmZlZCxlPW4uX19jLGE9bi51bm1vdW50O2Z1bmN0aW9uIHYodCxyKXtuLl9faCYmbi5fX2godSx0LGl8fHIpLGk9MDt2YXIgbz11Ll9fSHx8KHUuX19IPXtfXzpbXSxfX2g6W119KTtyZXR1cm4gdD49by5fXy5sZW5ndGgmJm8uX18ucHVzaCh7fSksby5fX1t0XX1mdW5jdGlvbiBtKG4pe3JldHVybiBpPTEscChFLG4pfWZ1bmN0aW9uIHAobixyLGkpe3ZhciBvPXYodCsrLDIpO3JldHVybiBvLl9fY3x8KG8uX19jPXUsby5fXz1baT9pKHIpOkUodm9pZCAwLHIpLGZ1bmN0aW9uKHQpe3ZhciB1PW4oby5fX1swXSx0KTtvLl9fWzBdIT09dSYmKG8uX19bMF09dSxvLl9fYy5zZXRTdGF0ZSh7fSkpfV0pLG8uX199ZnVuY3Rpb24gbChyLGkpe3ZhciBvPXYodCsrLDMpOyFuLl9fcyYmeChvLl9fSCxpKSYmKG8uX189cixvLl9fSD1pLHUuX19ILl9faC5wdXNoKG8pKX1mdW5jdGlvbiB5KHIsaSl7dmFyIG89dih0KyssNCk7IW4uX19zJiZ4KG8uX19ILGkpJiYoby5fXz1yLG8uX19IPWksdS5fX2gucHVzaChvKSl9ZnVuY3Rpb24gZChuKXtyZXR1cm4gaT01LGgoZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpufX0sW10pfWZ1bmN0aW9uIHMobix0LHUpe2k9Nix5KGZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiPT10eXBlb2Ygbj9uKHQoKSk6biYmKG4uY3VycmVudD10KCkpfSxudWxsPT11P3U6dS5jb25jYXQobikpfWZ1bmN0aW9uIGgobix1KXt2YXIgcj12KHQrKyw3KTtyZXR1cm4geChyLl9fSCx1KT8oci5fX0g9dSxyLl9faD1uLHIuX189bigpKTpyLl9ffWZ1bmN0aW9uIFQobix0KXtyZXR1cm4gaT04LGgoZnVuY3Rpb24oKXtyZXR1cm4gbn0sdCl9ZnVuY3Rpb24gdyhuKXt2YXIgcj11LmNvbnRleHRbbi5fX2NdLGk9dih0KyssOSk7cmV0dXJuIGkuX19jPW4scj8obnVsbD09aS5fXyYmKGkuX189ITAsci5zdWIodSkpLHIucHJvcHMudmFsdWUpOm4uX199ZnVuY3Rpb24gQSh0LHUpe24udXNlRGVidWdWYWx1ZSYmbi51c2VEZWJ1Z1ZhbHVlKHU/dSh0KTp0KX1mdW5jdGlvbiBGKG4pe3ZhciByPXYodCsrLDEwKSxpPW0oKTtyZXR1cm4gci5fXz1uLHUuY29tcG9uZW50RGlkQ2F0Y2h8fCh1LmNvbXBvbmVudERpZENhdGNoPWZ1bmN0aW9uKG4pe3IuX18mJnIuX18obiksaVsxXShuKX0pLFtpWzBdLGZ1bmN0aW9uKCl7aVsxXSh2b2lkIDApfV19ZnVuY3Rpb24gXygpe28uc29tZShmdW5jdGlvbih0KXtpZih0Ll9fUCl0cnl7dC5fX0guX19oLmZvckVhY2goZyksdC5fX0guX19oLmZvckVhY2gocSksdC5fX0guX19oPVtdfWNhdGNoKHUpe3JldHVybiB0Ll9fSC5fX2g9W10sbi5fX2UodSx0Ll9fdiksITB9fSksbz1bXX1mdW5jdGlvbiBnKG4pe24udCYmbi50KCl9ZnVuY3Rpb24gcShuKXt2YXIgdD1uLl9fKCk7XCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKG4udD10KX1mdW5jdGlvbiB4KG4sdCl7cmV0dXJuIW58fHQuc29tZShmdW5jdGlvbih0LHUpe3JldHVybiB0IT09blt1XX0pfWZ1bmN0aW9uIEUobix0KXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0P3Qobik6dH1uLl9fcj1mdW5jdGlvbihuKXtjJiZjKG4pLHQ9MCwodT1uLl9fYykuX19IJiYodS5fX0guX19oLmZvckVhY2goZyksdS5fX0guX19oLmZvckVhY2gocSksdS5fX0guX19oPVtdKX0sbi5kaWZmZWQ9ZnVuY3Rpb24odCl7ZiYmZih0KTt2YXIgdT10Ll9fYztpZih1KXt2YXIgaT11Ll9fSDtpJiZpLl9faC5sZW5ndGgmJigxIT09by5wdXNoKHUpJiZyPT09bi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fCgocj1uLnJlcXVlc3RBbmltYXRpb25GcmFtZSl8fGZ1bmN0aW9uKG4pe3ZhciB0LHU9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQociksY2FuY2VsQW5pbWF0aW9uRnJhbWUodCksc2V0VGltZW91dChuKX0scj1zZXRUaW1lb3V0KHUsMTAwKTtcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiYodD1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodSkpfSkoXykpfX0sbi5fX2M9ZnVuY3Rpb24odCx1KXt1LnNvbWUoZnVuY3Rpb24odCl7dHJ5e3QuX19oLmZvckVhY2goZyksdC5fX2g9dC5fX2guZmlsdGVyKGZ1bmN0aW9uKG4pe3JldHVybiFuLl9ffHxxKG4pfSl9Y2F0Y2gocil7dS5zb21lKGZ1bmN0aW9uKG4pe24uX19oJiYobi5fX2g9W10pfSksdT1bXSxuLl9fZShyLHQuX192KX19KSxlJiZlKHQsdSl9LG4udW5tb3VudD1mdW5jdGlvbih0KXthJiZhKHQpO3ZhciB1PXQuX19jO2lmKHUpe3ZhciByPXUuX19IO2lmKHIpdHJ5e3IuX18uZm9yRWFjaChmdW5jdGlvbihuKXtyZXR1cm4gbi50JiZuLnQoKX0pfWNhdGNoKHQpe24uX19lKHQsdS5fX3YpfX19O2V4cG9ydHttIGFzIHVzZVN0YXRlLHAgYXMgdXNlUmVkdWNlcixsIGFzIHVzZUVmZmVjdCx5IGFzIHVzZUxheW91dEVmZmVjdCxkIGFzIHVzZVJlZixzIGFzIHVzZUltcGVyYXRpdmVIYW5kbGUsaCBhcyB1c2VNZW1vLFQgYXMgdXNlQ2FsbGJhY2ssdyBhcyB1c2VDb250ZXh0LEEgYXMgdXNlRGVidWdWYWx1ZSxGIGFzIHVzZUVycm9yQm91bmRhcnl9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aG9va3MubW9kdWxlLmpzLm1hcFxuIiwiaW1wb3J0e3VzZVN0YXRlIGFzIG4sdXNlUmVkdWNlciBhcyB0LHVzZUVmZmVjdCBhcyBlLHVzZUxheW91dEVmZmVjdCBhcyByLHVzZVJlZiBhcyBvLHVzZUltcGVyYXRpdmVIYW5kbGUgYXMgdSx1c2VNZW1vIGFzIGksdXNlQ2FsbGJhY2sgYXMgZix1c2VDb250ZXh0IGFzIGMsdXNlRGVidWdWYWx1ZSBhcyBhfWZyb21cInByZWFjdC9ob29rc1wiO2V4cG9ydCpmcm9tXCJwcmVhY3QvaG9va3NcIjtpbXBvcnR7Q29tcG9uZW50IGFzIGwsY3JlYXRlRWxlbWVudCBhcyBzLG9wdGlvbnMgYXMgdix0b0NoaWxkQXJyYXkgYXMgaCxoeWRyYXRlIGFzIHAscmVuZGVyIGFzIGQsX3VubW91bnQgYXMgbSxjbG9uZUVsZW1lbnQgYXMgeSxjcmVhdGVSZWYgYXMgYixjcmVhdGVDb250ZXh0IGFzIGcsRnJhZ21lbnQgYXMgeH1mcm9tXCJwcmVhY3RcIjtleHBvcnR7Y3JlYXRlRWxlbWVudCxjcmVhdGVDb250ZXh0LGNyZWF0ZVJlZixGcmFnbWVudCxDb21wb25lbnR9ZnJvbVwicHJlYWN0XCI7ZnVuY3Rpb24gRShuLHQpe2Zvcih2YXIgZSBpbiB0KW5bZV09dFtlXTtyZXR1cm4gbn1mdW5jdGlvbiB3KG4sdCl7Zm9yKHZhciBlIGluIG4paWYoXCJfX3NvdXJjZVwiIT09ZSYmIShlIGluIHQpKXJldHVybiEwO2Zvcih2YXIgciBpbiB0KWlmKFwiX19zb3VyY2VcIiE9PXImJm5bcl0hPT10W3JdKXJldHVybiEwO3JldHVybiExfXZhciBDPWZ1bmN0aW9uKG4pe3ZhciB0LGU7ZnVuY3Rpb24gcih0KXt2YXIgZTtyZXR1cm4oZT1uLmNhbGwodGhpcyx0KXx8dGhpcykuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITAsZX1yZXR1cm4gZT1uLCh0PXIpLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUucHJvdG90eXBlKSx0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj10LHQuX19wcm90b19fPWUsci5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIHcodGhpcy5wcm9wcyxuKXx8dyh0aGlzLnN0YXRlLHQpfSxyfShsKTtmdW5jdGlvbiBfKG4sdCl7ZnVuY3Rpb24gZShuKXt2YXIgZT10aGlzLnByb3BzLnJlZixyPWU9PW4ucmVmO3JldHVybiFyJiZlJiYoZS5jYWxsP2UobnVsbCk6ZS5jdXJyZW50PW51bGwpLHQ/IXQodGhpcy5wcm9wcyxuKXx8IXI6dyh0aGlzLnByb3BzLG4pfWZ1bmN0aW9uIHIodCl7cmV0dXJuIHRoaXMuc2hvdWxkQ29tcG9uZW50VXBkYXRlPWUscyhuLEUoe30sdCkpfXJldHVybiByLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PSEwLHIuZGlzcGxheU5hbWU9XCJNZW1vKFwiKyhuLmRpc3BsYXlOYW1lfHxuLm5hbWUpK1wiKVwiLHIudD0hMCxyfXZhciBBPXYuX19iO2Z1bmN0aW9uIFMobil7ZnVuY3Rpb24gdCh0KXt2YXIgZT1FKHt9LHQpO3JldHVybiBkZWxldGUgZS5yZWYsbihlLHQucmVmKX1yZXR1cm4gdC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD10LnQ9ITAsdC5kaXNwbGF5TmFtZT1cIkZvcndhcmRSZWYoXCIrKG4uZGlzcGxheU5hbWV8fG4ubmFtZSkrXCIpXCIsdH12Ll9fYj1mdW5jdGlvbihuKXtuLnR5cGUmJm4udHlwZS50JiZuLnJlZiYmKG4ucHJvcHMucmVmPW4ucmVmLG4ucmVmPW51bGwpLEEmJkEobil9O3ZhciBrPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIG4/aChuKS5yZWR1Y2UoZnVuY3Rpb24obixlLHIpe3JldHVybiBuLmNvbmNhdCh0KGUscikpfSxbXSk6bnVsbH0sUj17bWFwOmssZm9yRWFjaDprLGNvdW50OmZ1bmN0aW9uKG4pe3JldHVybiBuP2gobikubGVuZ3RoOjB9LG9ubHk6ZnVuY3Rpb24obil7aWYoMSE9PShuPWgobikpLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJDaGlsZHJlbi5vbmx5KCkgZXhwZWN0cyBvbmx5IG9uZSBjaGlsZC5cIik7cmV0dXJuIG5bMF19LHRvQXJyYXk6aH0sRj12Ll9fZTtmdW5jdGlvbiBOKG4pe3JldHVybiBuJiYoKG49RSh7fSxuKSkuX19jPW51bGwsbi5fX2s9bi5fX2smJm4uX19rLm1hcChOKSksbn1mdW5jdGlvbiBVKCl7dGhpcy5fX3U9MCx0aGlzLm89bnVsbCx0aGlzLl9fYj1udWxsfWZ1bmN0aW9uIE0obil7dmFyIHQ9bi5fXy5fX2M7cmV0dXJuIHQmJnQudSYmdC51KG4pfWZ1bmN0aW9uIEwobil7dmFyIHQsZSxyO2Z1bmN0aW9uIG8obyl7aWYodHx8KHQ9bigpKS50aGVuKGZ1bmN0aW9uKG4pe2U9bi5kZWZhdWx0fHxufSxmdW5jdGlvbihuKXtyPW59KSxyKXRocm93IHI7aWYoIWUpdGhyb3cgdDtyZXR1cm4gcyhlLG8pfXJldHVybiBvLmRpc3BsYXlOYW1lPVwiTGF6eVwiLG8udD0hMCxvfWZ1bmN0aW9uIE8oKXt0aGlzLmk9bnVsbCx0aGlzLmw9bnVsbH12Ll9fZT1mdW5jdGlvbihuLHQsZSl7aWYobi50aGVuKWZvcih2YXIgcixvPXQ7bz1vLl9fOylpZigocj1vLl9fYykmJnIuX19jKXJldHVybiByLl9fYyhuLHQuX19jKTtGKG4sdCxlKX0sKFUucHJvdG90eXBlPW5ldyBsKS5fX2M9ZnVuY3Rpb24obix0KXt2YXIgZT10aGlzO251bGw9PWUubyYmKGUubz1bXSksZS5vLnB1c2godCk7dmFyIHI9TShlLl9fdiksbz0hMSx1PWZ1bmN0aW9uKCl7b3x8KG89ITAscj9yKGkpOmkoKSl9O3QuX19jPXQuY29tcG9uZW50V2lsbFVubW91bnQsdC5jb21wb25lbnRXaWxsVW5tb3VudD1mdW5jdGlvbigpe3UoKSx0Ll9fYyYmdC5fX2MoKX07dmFyIGk9ZnVuY3Rpb24oKXt2YXIgbjtpZighLS1lLl9fdSlmb3IoZS5fX3YuX19rWzBdPWUuc3RhdGUudSxlLnNldFN0YXRlKHt1OmUuX19iPW51bGx9KTtuPWUuby5wb3AoKTspbi5mb3JjZVVwZGF0ZSgpfTtlLl9fdSsrfHxlLnNldFN0YXRlKHt1OmUuX19iPWUuX192Ll9fa1swXX0pLG4udGhlbih1LHUpfSxVLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24obix0KXtyZXR1cm4gdGhpcy5fX2ImJih0aGlzLl9fdi5fX2tbMF09Tih0aGlzLl9fYiksdGhpcy5fX2I9bnVsbCksW3MobCxudWxsLHQudT9udWxsOm4uY2hpbGRyZW4pLHQudSYmbi5mYWxsYmFja119O3ZhciBQPWZ1bmN0aW9uKG4sdCxlKXtpZigrK2VbMV09PT1lWzBdJiZuLmwuZGVsZXRlKHQpLG4ucHJvcHMucmV2ZWFsT3JkZXImJihcInRcIiE9PW4ucHJvcHMucmV2ZWFsT3JkZXJbMF18fCFuLmwuc2l6ZSkpZm9yKGU9bi5pO2U7KXtmb3IoO2UubGVuZ3RoPjM7KWUucG9wKCkoKTtpZihlWzFdPGVbMF0pYnJlYWs7bi5pPWU9ZVsyXX19OyhPLnByb3RvdHlwZT1uZXcgbCkudT1mdW5jdGlvbihuKXt2YXIgdD10aGlzLGU9TSh0Ll9fdikscj10LmwuZ2V0KG4pO3JldHVybiByWzBdKyssZnVuY3Rpb24obyl7dmFyIHU9ZnVuY3Rpb24oKXt0LnByb3BzLnJldmVhbE9yZGVyPyhyLnB1c2gobyksUCh0LG4scikpOm8oKX07ZT9lKHUpOnUoKX19LE8ucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihuKXt0aGlzLmk9bnVsbCx0aGlzLmw9bmV3IE1hcDt2YXIgdD1oKG4uY2hpbGRyZW4pO24ucmV2ZWFsT3JkZXImJlwiYlwiPT09bi5yZXZlYWxPcmRlclswXSYmdC5yZXZlcnNlKCk7Zm9yKHZhciBlPXQubGVuZ3RoO2UtLTspdGhpcy5sLnNldCh0W2VdLHRoaXMuaT1bMSwwLHRoaXMuaV0pO3JldHVybiBuLmNoaWxkcmVufSxPLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGU9Ty5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQ9ZnVuY3Rpb24oKXt2YXIgbj10aGlzO24ubC5mb3JFYWNoKGZ1bmN0aW9uKHQsZSl7UChuLGUsdCl9KX07dmFyIFc9ZnVuY3Rpb24oKXtmdW5jdGlvbiBuKCl7fXZhciB0PW4ucHJvdG90eXBlO3JldHVybiB0LmdldENoaWxkQ29udGV4dD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnByb3BzLmNvbnRleHR9LHQucmVuZGVyPWZ1bmN0aW9uKG4pe3JldHVybiBuLmNoaWxkcmVufSxufSgpO2Z1bmN0aW9uIGoobil7dmFyIHQ9dGhpcyxlPW4uY29udGFpbmVyLHI9cyhXLHtjb250ZXh0OnQuY29udGV4dH0sbi52bm9kZSk7cmV0dXJuIHQucyYmdC5zIT09ZSYmKHQudi5wYXJlbnROb2RlJiZ0LnMucmVtb3ZlQ2hpbGQodC52KSxtKHQuaCksdC5wPSExKSxuLnZub2RlP3QucD8oZS5fX2s9dC5fX2ssZChyLGUpLHQuX19rPWUuX19rKToodC52PWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpLHAoXCJcIixlKSxlLmFwcGVuZENoaWxkKHQudiksdC5wPSEwLHQucz1lLGQocixlLHQudiksdC5fX2s9dC52Ll9fayk6dC5wJiYodC52LnBhcmVudE5vZGUmJnQucy5yZW1vdmVDaGlsZCh0LnYpLG0odC5oKSksdC5oPXIsdC5jb21wb25lbnRXaWxsVW5tb3VudD1mdW5jdGlvbigpe3Qudi5wYXJlbnROb2RlJiZ0LnMucmVtb3ZlQ2hpbGQodC52KSxtKHQuaCl9LG51bGx9ZnVuY3Rpb24geihuLHQpe3JldHVybiBzKGose3Zub2RlOm4sY29udGFpbmVyOnR9KX12YXIgRD0vXig/OmFjY2VudHxhbGlnbm1lbnR8YXJhYmljfGJhc2VsaW5lfGNhcHxjbGlwKD8hUGF0aFUpfGNvbG9yfGZpbGx8Zmxvb2R8Zm9udHxnbHlwaCg/IVIpfGhvcml6fG1hcmtlcig/IUh8V3xVKXxvdmVybGluZXxwYWludHxzdG9wfHN0cmlrZXRocm91Z2h8c3Ryb2tlfHRleHQoPyFMKXx1bmRlcmxpbmV8dW5pY29kZXx1bml0c3x2fHZlY3Rvcnx2ZXJ0fHdvcmR8d3JpdGluZ3x4KD8hQykpW0EtWl0vO2wucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307dmFyIEg9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvciYmU3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIil8fDYwMTAzO2Z1bmN0aW9uIFQobix0LGUpe2lmKG51bGw9PXQuX19rKWZvcig7dC5maXJzdENoaWxkOyl0LnJlbW92ZUNoaWxkKHQuZmlyc3RDaGlsZCk7cmV0dXJuIGQobix0KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiZlKCksbj9uLl9fYzpudWxsfWZ1bmN0aW9uIFYobix0LGUpe3JldHVybiBwKG4sdCksXCJmdW5jdGlvblwiPT10eXBlb2YgZSYmZSgpLG4/bi5fX2M6bnVsbH12YXIgWj12LmV2ZW50O2Z1bmN0aW9uIEkobix0KXtuW1wiVU5TQUZFX1wiK3RdJiYhblt0XSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sdCx7Y29uZmlndXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzW1wiVU5TQUZFX1wiK3RdfSxzZXQ6ZnVuY3Rpb24obil7dGhpc1tcIlVOU0FGRV9cIit0XT1ufX0pfXYuZXZlbnQ9ZnVuY3Rpb24obil7WiYmKG49WihuKSksbi5wZXJzaXN0PWZ1bmN0aW9uKCl7fTt2YXIgdD0hMSxlPSExLHI9bi5zdG9wUHJvcGFnYXRpb247bi5zdG9wUHJvcGFnYXRpb249ZnVuY3Rpb24oKXtyLmNhbGwobiksdD0hMH07dmFyIG89bi5wcmV2ZW50RGVmYXVsdDtyZXR1cm4gbi5wcmV2ZW50RGVmYXVsdD1mdW5jdGlvbigpe28uY2FsbChuKSxlPSEwfSxuLmlzUHJvcGFnYXRpb25TdG9wcGVkPWZ1bmN0aW9uKCl7cmV0dXJuIHR9LG4uaXNEZWZhdWx0UHJldmVudGVkPWZ1bmN0aW9uKCl7cmV0dXJuIGV9LG4ubmF0aXZlRXZlbnQ9bn07dmFyICQ9e2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jbGFzc319LHE9di52bm9kZTt2LnZub2RlPWZ1bmN0aW9uKG4pe24uJCR0eXBlb2Y9SDt2YXIgdD1uLnR5cGUsZT1uLnByb3BzO2lmKHQpe2lmKGUuY2xhc3MhPWUuY2xhc3NOYW1lJiYoJC5lbnVtZXJhYmxlPVwiY2xhc3NOYW1lXCJpbiBlLG51bGwhPWUuY2xhc3NOYW1lJiYoZS5jbGFzcz1lLmNsYXNzTmFtZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJjbGFzc05hbWVcIiwkKSksXCJmdW5jdGlvblwiIT10eXBlb2YgdCl7dmFyIHIsbyx1O2Zvcih1IGluIGUuZGVmYXVsdFZhbHVlJiZ2b2lkIDAhPT1lLnZhbHVlJiYoZS52YWx1ZXx8MD09PWUudmFsdWV8fChlLnZhbHVlPWUuZGVmYXVsdFZhbHVlKSxkZWxldGUgZS5kZWZhdWx0VmFsdWUpLEFycmF5LmlzQXJyYXkoZS52YWx1ZSkmJmUubXVsdGlwbGUmJlwic2VsZWN0XCI9PT10JiYoaChlLmNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uKG4pey0xIT1lLnZhbHVlLmluZGV4T2Yobi5wcm9wcy52YWx1ZSkmJihuLnByb3BzLnNlbGVjdGVkPSEwKX0pLGRlbGV0ZSBlLnZhbHVlKSxlKWlmKHI9RC50ZXN0KHUpKWJyZWFrO2lmKHIpZm9yKHUgaW4gbz1uLnByb3BzPXt9LGUpb1tELnRlc3QodSk/dS5yZXBsYWNlKC9bQS1aMC05XS8sXCItJCZcIikudG9Mb3dlckNhc2UoKTp1XT1lW3VdfSFmdW5jdGlvbih0KXt2YXIgZT1uLnR5cGUscj1uLnByb3BzO2lmKHImJlwic3RyaW5nXCI9PXR5cGVvZiBlKXt2YXIgbz17fTtmb3IodmFyIHUgaW4gcikvXm9uKEFuaXxUcmF8VG91KS8udGVzdCh1KSYmKHJbdS50b0xvd2VyQ2FzZSgpXT1yW3VdLGRlbGV0ZSByW3VdKSxvW3UudG9Mb3dlckNhc2UoKV09dTtpZihvLm9uZG91YmxlY2xpY2smJihyLm9uZGJsY2xpY2s9cltvLm9uZG91YmxlY2xpY2tdLGRlbGV0ZSByW28ub25kb3VibGVjbGlja10pLG8ub25iZWZvcmVpbnB1dCYmKHIub25iZWZvcmVpbnB1dD1yW28ub25iZWZvcmVpbnB1dF0sZGVsZXRlIHJbby5vbmJlZm9yZWlucHV0XSksby5vbmNoYW5nZSYmKFwidGV4dGFyZWFcIj09PWV8fFwiaW5wdXRcIj09PWUudG9Mb3dlckNhc2UoKSYmIS9eZmlsfGNoZXxyYS9pLnRlc3Qoci50eXBlKSkpe3ZhciBpPW8ub25pbnB1dHx8XCJvbmlucHV0XCI7cltpXXx8KHJbaV09cltvLm9uY2hhbmdlXSxkZWxldGUgcltvLm9uY2hhbmdlXSl9fX0oKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiYhdC5tJiZ0LnByb3RvdHlwZSYmKEkodC5wcm90b3R5cGUsXCJjb21wb25lbnRXaWxsTW91bnRcIiksSSh0LnByb3RvdHlwZSxcImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNcIiksSSh0LnByb3RvdHlwZSxcImNvbXBvbmVudFdpbGxVcGRhdGVcIiksdC5tPSEwKX1xJiZxKG4pfTt2YXIgQj1cIjE2LjguMFwiO2Z1bmN0aW9uIEcobil7cmV0dXJuIHMuYmluZChudWxsLG4pfWZ1bmN0aW9uIEoobil7cmV0dXJuISFuJiZuLiQkdHlwZW9mPT09SH1mdW5jdGlvbiBLKG4pe3JldHVybiBKKG4pP3kuYXBwbHkobnVsbCxhcmd1bWVudHMpOm59ZnVuY3Rpb24gUShuKXtyZXR1cm4hIW4uX19rJiYoZChudWxsLG4pLCEwKX1mdW5jdGlvbiBYKG4pe3JldHVybiBuJiYobi5iYXNlfHwxPT09bi5ub2RlVHlwZSYmbil8fG51bGx9dmFyIFk9ZnVuY3Rpb24obix0KXtyZXR1cm4gbih0KX07ZXhwb3J0IGRlZmF1bHR7dXNlU3RhdGU6bix1c2VSZWR1Y2VyOnQsdXNlRWZmZWN0OmUsdXNlTGF5b3V0RWZmZWN0OnIsdXNlUmVmOm8sdXNlSW1wZXJhdGl2ZUhhbmRsZTp1LHVzZU1lbW86aSx1c2VDYWxsYmFjazpmLHVzZUNvbnRleHQ6Yyx1c2VEZWJ1Z1ZhbHVlOmEsdmVyc2lvbjpcIjE2LjguMFwiLENoaWxkcmVuOlIscmVuZGVyOlQsaHlkcmF0ZTpULHVubW91bnRDb21wb25lbnRBdE5vZGU6USxjcmVhdGVQb3J0YWw6eixjcmVhdGVFbGVtZW50OnMsY3JlYXRlQ29udGV4dDpnLGNyZWF0ZUZhY3Rvcnk6RyxjbG9uZUVsZW1lbnQ6SyxjcmVhdGVSZWY6YixGcmFnbWVudDp4LGlzVmFsaWRFbGVtZW50OkosZmluZERPTU5vZGU6WCxDb21wb25lbnQ6bCxQdXJlQ29tcG9uZW50OkMsbWVtbzpfLGZvcndhcmRSZWY6Uyx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpZLFN1c3BlbnNlOlUsU3VzcGVuc2VMaXN0Ok8sbGF6eTpMfTtleHBvcnR7QiBhcyB2ZXJzaW9uLFIgYXMgQ2hpbGRyZW4sVCBhcyByZW5kZXIsViBhcyBoeWRyYXRlLFEgYXMgdW5tb3VudENvbXBvbmVudEF0Tm9kZSx6IGFzIGNyZWF0ZVBvcnRhbCxHIGFzIGNyZWF0ZUZhY3RvcnksSyBhcyBjbG9uZUVsZW1lbnQsSiBhcyBpc1ZhbGlkRWxlbWVudCxYIGFzIGZpbmRET01Ob2RlLEMgYXMgUHVyZUNvbXBvbmVudCxfIGFzIG1lbW8sUyBhcyBmb3J3YXJkUmVmLFkgYXMgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMsVSBhcyBTdXNwZW5zZSxPIGFzIFN1c3BlbnNlTGlzdCxMIGFzIGxhenl9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcGF0Lm1vZHVsZS5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAnd3MgZG9lcyBub3Qgd29yayBpbiB0aGUgYnJvd3Nlci4gQnJvd3NlciBjbGllbnRzIG11c3QgdXNlIHRoZSBuYXRpdmUgJyArXG4gICAgICAnV2ViU29ja2V0IG9iamVjdCdcbiAgKTtcbn07XG4iLCIoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVXRpbHNcbiAgZnVuY3Rpb24gYXNzZXJ0ICh2YWwsIG1zZykge1xuICAgIGlmICghdmFsKSB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG4gIH1cblxuICAvLyBDb3VsZCB1c2UgYGluaGVyaXRzYCBtb2R1bGUsIGJ1dCBkb24ndCB3YW50IHRvIG1vdmUgZnJvbSBzaW5nbGUgZmlsZVxuICAvLyBhcmNoaXRlY3R1cmUgeWV0LlxuICBmdW5jdGlvbiBpbmhlcml0cyAoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge307XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTtcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpO1xuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcjtcbiAgfVxuXG4gIC8vIEJOXG5cbiAgZnVuY3Rpb24gQk4gKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKEJOLmlzQk4obnVtYmVyKSkge1xuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB0aGlzLndvcmRzID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgICAvLyBSZWR1Y3Rpb24gY29udGV4dFxuICAgIHRoaXMucmVkID0gbnVsbDtcblxuICAgIGlmIChudW1iZXIgIT09IG51bGwpIHtcbiAgICAgIGlmIChiYXNlID09PSAnbGUnIHx8IGJhc2UgPT09ICdiZScpIHtcbiAgICAgICAgZW5kaWFuID0gYmFzZTtcbiAgICAgICAgYmFzZSA9IDEwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pbml0KG51bWJlciB8fCAwLCBiYXNlIHx8IDEwLCBlbmRpYW4gfHwgJ2JlJyk7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gQk47XG4gIH0gZWxzZSB7XG4gICAgZXhwb3J0cy5CTiA9IEJOO1xuICB9XG5cbiAgQk4uQk4gPSBCTjtcbiAgQk4ud29yZFNpemUgPSAyNjtcblxuICB2YXIgQnVmZmVyO1xuICB0cnkge1xuICAgIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbiAgfSBjYXRjaCAoZSkge1xuICB9XG5cbiAgQk4uaXNCTiA9IGZ1bmN0aW9uIGlzQk4gKG51bSkge1xuICAgIGlmIChudW0gaW5zdGFuY2VvZiBCTikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bSAhPT0gbnVsbCAmJiB0eXBlb2YgbnVtID09PSAnb2JqZWN0JyAmJlxuICAgICAgbnVtLmNvbnN0cnVjdG9yLndvcmRTaXplID09PSBCTi53b3JkU2l6ZSAmJiBBcnJheS5pc0FycmF5KG51bS53b3Jkcyk7XG4gIH07XG5cbiAgQk4ubWF4ID0gZnVuY3Rpb24gbWF4IChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPiAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ubWluID0gZnVuY3Rpb24gbWluIChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPCAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdCAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0TnVtYmVyKG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0QXJyYXkobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAnaGV4Jykge1xuICAgICAgYmFzZSA9IDE2O1xuICAgIH1cbiAgICBhc3NlcnQoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNik7XG5cbiAgICBudW1iZXIgPSBudW1iZXIudG9TdHJpbmcoKS5yZXBsYWNlKC9cXHMrL2csICcnKTtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgc3RhcnQrKztcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gMTYpIHtcbiAgICAgIHRoaXMuX3BhcnNlSGV4KG51bWJlciwgc3RhcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wYXJzZUJhc2UobnVtYmVyLCBiYXNlLCBzdGFydCk7XG4gICAgfVxuXG4gICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0TnVtYmVyID0gZnVuY3Rpb24gX2luaXROdW1iZXIgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgbnVtYmVyID0gLW51bWJlcjtcbiAgICB9XG4gICAgaWYgKG51bWJlciA8IDB4NDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgbnVtYmVyICYgMHgzZmZmZmZmIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPCAweDEwMDAwMDAwMDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobnVtYmVyIDwgMHgyMDAwMDAwMDAwMDAwMCk7IC8vIDIgXiA1MyAodW5zYWZlKVxuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZixcbiAgICAgICAgMVxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMztcbiAgICB9XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICAvLyBSZXZlcnNlIHRoZSBieXRlc1xuICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXRBcnJheSA9IGZ1bmN0aW9uIF9pbml0QXJyYXkgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgLy8gUGVyaGFwcyBhIFVpbnQ4QXJyYXlcbiAgICBhc3NlcnQodHlwZW9mIG51bWJlci5sZW5ndGggPT09ICdudW1iZXInKTtcbiAgICBpZiAobnVtYmVyLmxlbmd0aCA8PSAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbChudW1iZXIubGVuZ3RoIC8gMyk7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBpZiAoZW5kaWFuID09PSAnYmUnKSB7XG4gICAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gMSwgaiA9IDA7IGkgPj0gMDsgaSAtPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgLSAxXSA8PCA4KSB8IChudW1iZXJbaSAtIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZW5kaWFuID09PSAnbGUnKSB7XG4gICAgICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IG51bWJlci5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpICsgMV0gPDwgOCkgfCAobnVtYmVyW2kgKyAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUhleCAoc3RyLCBzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgPDw9IDQ7XG5cbiAgICAgIC8vICdhJyAtICdmJ1xuICAgICAgaWYgKGMgPj0gNDkgJiYgYyA8PSA1NCkge1xuICAgICAgICByIHw9IGMgLSA0OSArIDB4YTtcblxuICAgICAgLy8gJ0EnIC0gJ0YnXG4gICAgICB9IGVsc2UgaWYgKGMgPj0gMTcgJiYgYyA8PSAyMikge1xuICAgICAgICByIHw9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByIHw9IGMgJiAweGY7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUhleCA9IGZ1bmN0aW9uIF9wYXJzZUhleCAobnVtYmVyLCBzdGFydCkge1xuICAgIC8vIENyZWF0ZSBwb3NzaWJseSBiaWdnZXIgYXJyYXkgdG8gZW5zdXJlIHRoYXQgaXQgZml0cyB0aGUgbnVtYmVyXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwoKG51bWJlci5sZW5ndGggLSBzdGFydCkgLyA2KTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIHZhciBqLCB3O1xuICAgIC8vIFNjYW4gMjQtYml0IGNodW5rcyBhbmQgYWRkIHRoZW0gdG8gdGhlIG51bWJlclxuICAgIHZhciBvZmYgPSAwO1xuICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSA2LCBqID0gMDsgaSA+PSBzdGFydDsgaSAtPSA2KSB7XG4gICAgICB3ID0gcGFyc2VIZXgobnVtYmVyLCBpLCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAvLyBOT1RFOiBgMHgzZmZmZmZgIGlzIGludGVudGlvbmFsIGhlcmUsIDI2Yml0cyBtYXggc2hpZnQgKyAyNGJpdCBoZXggbGltYlxuICAgICAgdGhpcy53b3Jkc1tqICsgMV0gfD0gdyA+Pj4gKDI2IC0gb2ZmKSAmIDB4M2ZmZmZmO1xuICAgICAgb2ZmICs9IDI0O1xuICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgIGorKztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGkgKyA2ICE9PSBzdGFydCkge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgc3RhcnQsIGkgKyA2KTtcbiAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlQmFzZSAoc3RyLCBzdGFydCwgZW5kLCBtdWwpIHtcbiAgICB2YXIgciA9IDA7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA0ODtcblxuICAgICAgciAqPSBtdWw7XG5cbiAgICAgIC8vICdhJ1xuICAgICAgaWYgKGMgPj0gNDkpIHtcbiAgICAgICAgciArPSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3KSB7XG4gICAgICAgIHIgKz0gYyAtIDE3ICsgMHhhO1xuXG4gICAgICAvLyAnMCcgLSAnOSdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHIgKz0gYztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlQmFzZSA9IGZ1bmN0aW9uIF9wYXJzZUJhc2UgKG51bWJlciwgYmFzZSwgc3RhcnQpIHtcbiAgICAvLyBJbml0aWFsaXplIGFzIHplcm9cbiAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgdGhpcy5sZW5ndGggPSAxO1xuXG4gICAgLy8gRmluZCBsZW5ndGggb2YgbGltYiBpbiBiYXNlXG4gICAgZm9yICh2YXIgbGltYkxlbiA9IDAsIGxpbWJQb3cgPSAxOyBsaW1iUG93IDw9IDB4M2ZmZmZmZjsgbGltYlBvdyAqPSBiYXNlKSB7XG4gICAgICBsaW1iTGVuKys7XG4gICAgfVxuICAgIGxpbWJMZW4tLTtcbiAgICBsaW1iUG93ID0gKGxpbWJQb3cgLyBiYXNlKSB8IDA7XG5cbiAgICB2YXIgdG90YWwgPSBudW1iZXIubGVuZ3RoIC0gc3RhcnQ7XG4gICAgdmFyIG1vZCA9IHRvdGFsICUgbGltYkxlbjtcbiAgICB2YXIgZW5kID0gTWF0aC5taW4odG90YWwsIHRvdGFsIC0gbW9kKSArIHN0YXJ0O1xuXG4gICAgdmFyIHdvcmQgPSAwO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBsaW1iTGVuKSB7XG4gICAgICB3b3JkID0gcGFyc2VCYXNlKG51bWJlciwgaSwgaSArIGxpbWJMZW4sIGJhc2UpO1xuXG4gICAgICB0aGlzLmltdWxuKGxpbWJQb3cpO1xuICAgICAgaWYgKHRoaXMud29yZHNbMF0gKyB3b3JkIDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lhZGRuKHdvcmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtb2QgIT09IDApIHtcbiAgICAgIHZhciBwb3cgPSAxO1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIG51bWJlci5sZW5ndGgsIGJhc2UpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbW9kOyBpKyspIHtcbiAgICAgICAgcG93ICo9IGJhc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW11bG4ocG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5IChkZXN0KSB7XG4gICAgZGVzdC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZXN0LndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICB9XG4gICAgZGVzdC5sZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICBkZXN0Lm5lZ2F0aXZlID0gdGhpcy5uZWdhdGl2ZTtcbiAgICBkZXN0LnJlZCA9IHRoaXMucmVkO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lICgpIHtcbiAgICB2YXIgciA9IG5ldyBCTihudWxsKTtcbiAgICB0aGlzLmNvcHkocik7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9leHBhbmQgPSBmdW5jdGlvbiBfZXhwYW5kIChzaXplKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgc2l6ZSkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFJlbW92ZSBsZWFkaW5nIGAwYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3RyaXAgPSBmdW5jdGlvbiBzdHJpcCAoKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoID4gMSAmJiB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIHRoaXMubGVuZ3RoLS07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fbm9ybVNpZ24gPSBmdW5jdGlvbiBfbm9ybVNpZ24gKCkge1xuICAgIC8vIC0wID0gMFxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICByZXR1cm4gKHRoaXMucmVkID8gJzxCTi1SOiAnIDogJzxCTjogJykgKyB0aGlzLnRvU3RyaW5nKDE2KSArICc+JztcbiAgfTtcblxuICAvKlxuXG4gIHZhciB6ZXJvcyA9IFtdO1xuICB2YXIgZ3JvdXBTaXplcyA9IFtdO1xuICB2YXIgZ3JvdXBCYXNlcyA9IFtdO1xuXG4gIHZhciBzID0gJyc7XG4gIHZhciBpID0gLTE7XG4gIHdoaWxlICgrK2kgPCBCTi53b3JkU2l6ZSkge1xuICAgIHplcm9zW2ldID0gcztcbiAgICBzICs9ICcwJztcbiAgfVxuICBncm91cFNpemVzWzBdID0gMDtcbiAgZ3JvdXBTaXplc1sxXSA9IDA7XG4gIGdyb3VwQmFzZXNbMF0gPSAwO1xuICBncm91cEJhc2VzWzFdID0gMDtcbiAgdmFyIGJhc2UgPSAyIC0gMTtcbiAgd2hpbGUgKCsrYmFzZSA8IDM2ICsgMSkge1xuICAgIHZhciBncm91cFNpemUgPSAwO1xuICAgIHZhciBncm91cEJhc2UgPSAxO1xuICAgIHdoaWxlIChncm91cEJhc2UgPCAoMSA8PCBCTi53b3JkU2l6ZSkgLyBiYXNlKSB7XG4gICAgICBncm91cEJhc2UgKj0gYmFzZTtcbiAgICAgIGdyb3VwU2l6ZSArPSAxO1xuICAgIH1cbiAgICBncm91cFNpemVzW2Jhc2VdID0gZ3JvdXBTaXplO1xuICAgIGdyb3VwQmFzZXNbYmFzZV0gPSBncm91cEJhc2U7XG4gIH1cblxuICAqL1xuXG4gIHZhciB6ZXJvcyA9IFtcbiAgICAnJyxcbiAgICAnMCcsXG4gICAgJzAwJyxcbiAgICAnMDAwJyxcbiAgICAnMDAwMCcsXG4gICAgJzAwMDAwJyxcbiAgICAnMDAwMDAwJyxcbiAgICAnMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCdcbiAgXTtcblxuICB2YXIgZ3JvdXBTaXplcyA9IFtcbiAgICAwLCAwLFxuICAgIDI1LCAxNiwgMTIsIDExLCAxMCwgOSwgOCxcbiAgICA4LCA3LCA3LCA3LCA3LCA2LCA2LFxuICAgIDYsIDYsIDYsIDYsIDYsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1XG4gIF07XG5cbiAgdmFyIGdyb3VwQmFzZXMgPSBbXG4gICAgMCwgMCxcbiAgICAzMzU1NDQzMiwgNDMwNDY3MjEsIDE2Nzc3MjE2LCA0ODgyODEyNSwgNjA0NjYxNzYsIDQwMzUzNjA3LCAxNjc3NzIxNixcbiAgICA0MzA0NjcyMSwgMTAwMDAwMDAsIDE5NDg3MTcxLCAzNTgzMTgwOCwgNjI3NDg1MTcsIDc1Mjk1MzYsIDExMzkwNjI1LFxuICAgIDE2Nzc3MjE2LCAyNDEzNzU2OSwgMzQwMTIyMjQsIDQ3MDQ1ODgxLCA2NDAwMDAwMCwgNDA4NDEwMSwgNTE1MzYzMixcbiAgICA2NDM2MzQzLCA3OTYyNjI0LCA5NzY1NjI1LCAxMTg4MTM3NiwgMTQzNDg5MDcsIDE3MjEwMzY4LCAyMDUxMTE0OSxcbiAgICAyNDMwMDAwMCwgMjg2MjkxNTEsIDMzNTU0NDMyLCAzOTEzNTM5MywgNDU0MzU0MjQsIDUyNTIxODc1LCA2MDQ2NjE3NlxuICBdO1xuXG4gIEJOLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nIChiYXNlLCBwYWRkaW5nKSB7XG4gICAgYmFzZSA9IGJhc2UgfHwgMTA7XG4gICAgcGFkZGluZyA9IHBhZGRpbmcgfCAwIHx8IDE7XG5cbiAgICB2YXIgb3V0O1xuICAgIGlmIChiYXNlID09PSAxNiB8fCBiYXNlID09PSAnaGV4Jykge1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgb2ZmID0gMDtcbiAgICAgIHZhciBjYXJyeSA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldO1xuICAgICAgICB2YXIgd29yZCA9ICgoKHcgPDwgb2ZmKSB8IGNhcnJ5KSAmIDB4ZmZmZmZmKS50b1N0cmluZygxNik7XG4gICAgICAgIGNhcnJ5ID0gKHcgPj4+ICgyNCAtIG9mZikpICYgMHhmZmZmZmY7XG4gICAgICAgIGlmIChjYXJyeSAhPT0gMCB8fCBpICE9PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1s2IC0gd29yZC5sZW5ndGhdICsgd29yZCArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSB3b3JkICsgb3V0O1xuICAgICAgICB9XG4gICAgICAgIG9mZiArPSAyO1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICAgIG91dCA9IGNhcnJ5LnRvU3RyaW5nKDE2KSArIG91dDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChvdXQubGVuZ3RoICUgcGFkZGluZyAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnLScgKyBvdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KSB7XG4gICAgICAvLyB2YXIgZ3JvdXBTaXplID0gTWF0aC5mbG9vcihCTi53b3JkU2l6ZSAqIE1hdGguTE4yIC8gTWF0aC5sb2coYmFzZSkpO1xuICAgICAgdmFyIGdyb3VwU2l6ZSA9IGdyb3VwU2l6ZXNbYmFzZV07XG4gICAgICAvLyB2YXIgZ3JvdXBCYXNlID0gTWF0aC5wb3coYmFzZSwgZ3JvdXBTaXplKTtcbiAgICAgIHZhciBncm91cEJhc2UgPSBncm91cEJhc2VzW2Jhc2VdO1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgYyA9IHRoaXMuY2xvbmUoKTtcbiAgICAgIGMubmVnYXRpdmUgPSAwO1xuICAgICAgd2hpbGUgKCFjLmlzWmVybygpKSB7XG4gICAgICAgIHZhciByID0gYy5tb2RuKGdyb3VwQmFzZSkudG9TdHJpbmcoYmFzZSk7XG4gICAgICAgIGMgPSBjLmlkaXZuKGdyb3VwQmFzZSk7XG5cbiAgICAgICAgaWYgKCFjLmlzWmVybygpKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbZ3JvdXBTaXplIC0gci5sZW5ndGhdICsgciArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSByICsgb3V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBhc3NlcnQoZmFsc2UsICdCYXNlIHNob3VsZCBiZSBiZXR3ZWVuIDIgYW5kIDM2Jyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIgKCkge1xuICAgIHZhciByZXQgPSB0aGlzLndvcmRzWzBdO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMikge1xuICAgICAgcmV0ICs9IHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDA7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA9PT0gMyAmJiB0aGlzLndvcmRzWzJdID09PSAweDAxKSB7XG4gICAgICAvLyBOT1RFOiBhdCB0aGlzIHN0YWdlIGl0IGlzIGtub3duIHRoYXQgdGhlIHRvcCBiaXQgaXMgc2V0XG4gICAgICByZXQgKz0gMHgxMDAwMDAwMDAwMDAwMCArICh0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gMikge1xuICAgICAgYXNzZXJ0KGZhbHNlLCAnTnVtYmVyIGNhbiBvbmx5IHNhZmVseSBzdG9yZSB1cCB0byA1MyBiaXRzJyk7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgPyAtcmV0IDogcmV0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKDE2KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbiB0b0J1ZmZlciAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpO1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEJ1ZmZlciwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShBcnJheSwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5TGlrZSA9IGZ1bmN0aW9uIHRvQXJyYXlMaWtlIChBcnJheVR5cGUsIGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0aGlzLmJ5dGVMZW5ndGgoKTtcbiAgICB2YXIgcmVxTGVuZ3RoID0gbGVuZ3RoIHx8IE1hdGgubWF4KDEsIGJ5dGVMZW5ndGgpO1xuICAgIGFzc2VydChieXRlTGVuZ3RoIDw9IHJlcUxlbmd0aCwgJ2J5dGUgYXJyYXkgbG9uZ2VyIHRoYW4gZGVzaXJlZCBsZW5ndGgnKTtcbiAgICBhc3NlcnQocmVxTGVuZ3RoID4gMCwgJ1JlcXVlc3RlZCBhcnJheSBsZW5ndGggPD0gMCcpO1xuXG4gICAgdGhpcy5zdHJpcCgpO1xuICAgIHZhciBsaXR0bGVFbmRpYW4gPSBlbmRpYW4gPT09ICdsZSc7XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheVR5cGUocmVxTGVuZ3RoKTtcblxuICAgIHZhciBiLCBpO1xuICAgIHZhciBxID0gdGhpcy5jbG9uZSgpO1xuICAgIGlmICghbGl0dGxlRW5kaWFuKSB7XG4gICAgICAvLyBBc3N1bWUgYmlnLWVuZGlhblxuICAgICAgZm9yIChpID0gMDsgaSA8IHJlcUxlbmd0aCAtIGJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyAhcS5pc1plcm8oKTsgaSsrKSB7XG4gICAgICAgIGIgPSBxLmFuZGxuKDB4ZmYpO1xuICAgICAgICBxLml1c2hybig4KTtcblxuICAgICAgICByZXNbcmVxTGVuZ3RoIC0gaSAtIDFdID0gYjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW2ldID0gYjtcbiAgICAgIH1cblxuICAgICAgZm9yICg7IGkgPCByZXFMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgaWYgKE1hdGguY2x6MzIpIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHJldHVybiAzMiAtIE1hdGguY2x6MzIodyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHZhciB0ID0gdztcbiAgICAgIHZhciByID0gMDtcbiAgICAgIGlmICh0ID49IDB4MTAwMCkge1xuICAgICAgICByICs9IDEzO1xuICAgICAgICB0ID4+Pj0gMTM7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDQwKSB7XG4gICAgICAgIHIgKz0gNztcbiAgICAgICAgdCA+Pj49IDc7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDgpIHtcbiAgICAgICAgciArPSA0O1xuICAgICAgICB0ID4+Pj0gNDtcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4MDIpIHtcbiAgICAgICAgciArPSAyO1xuICAgICAgICB0ID4+Pj0gMjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByICsgdDtcbiAgICB9O1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl96ZXJvQml0cyA9IGZ1bmN0aW9uIF96ZXJvQml0cyAodykge1xuICAgIC8vIFNob3J0LWN1dFxuICAgIGlmICh3ID09PSAwKSByZXR1cm4gMjY7XG5cbiAgICB2YXIgdCA9IHc7XG4gICAgdmFyIHIgPSAwO1xuICAgIGlmICgodCAmIDB4MWZmZikgPT09IDApIHtcbiAgICAgIHIgKz0gMTM7XG4gICAgICB0ID4+Pj0gMTM7XG4gICAgfVxuICAgIGlmICgodCAmIDB4N2YpID09PSAwKSB7XG4gICAgICByICs9IDc7XG4gICAgICB0ID4+Pj0gNztcbiAgICB9XG4gICAgaWYgKCh0ICYgMHhmKSA9PT0gMCkge1xuICAgICAgciArPSA0O1xuICAgICAgdCA+Pj49IDQ7XG4gICAgfVxuICAgIGlmICgodCAmIDB4MykgPT09IDApIHtcbiAgICAgIHIgKz0gMjtcbiAgICAgIHQgPj4+PSAyO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDEpID09PSAwKSB7XG4gICAgICByKys7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIC8vIFJldHVybiBudW1iZXIgb2YgdXNlZCBiaXRzIGluIGEgQk5cbiAgQk4ucHJvdG90eXBlLmJpdExlbmd0aCA9IGZ1bmN0aW9uIGJpdExlbmd0aCAoKSB7XG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV07XG4gICAgdmFyIGhpID0gdGhpcy5fY291bnRCaXRzKHcpO1xuICAgIHJldHVybiAodGhpcy5sZW5ndGggLSAxKSAqIDI2ICsgaGk7XG4gIH07XG5cbiAgZnVuY3Rpb24gdG9CaXRBcnJheSAobnVtKSB7XG4gICAgdmFyIHcgPSBuZXcgQXJyYXkobnVtLmJpdExlbmd0aCgpKTtcblxuICAgIGZvciAodmFyIGJpdCA9IDA7IGJpdCA8IHcubGVuZ3RoOyBiaXQrKykge1xuICAgICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgICAgd1tiaXRdID0gKG51bS53b3Jkc1tvZmZdICYgKDEgPDwgd2JpdCkpID4+PiB3Yml0O1xuICAgIH1cblxuICAgIHJldHVybiB3O1xuICB9XG5cbiAgLy8gTnVtYmVyIG9mIHRyYWlsaW5nIHplcm8gYml0c1xuICBCTi5wcm90b3R5cGUuemVyb0JpdHMgPSBmdW5jdGlvbiB6ZXJvQml0cyAoKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiAwO1xuXG4gICAgdmFyIHIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGIgPSB0aGlzLl96ZXJvQml0cyh0aGlzLndvcmRzW2ldKTtcbiAgICAgIHIgKz0gYjtcbiAgICAgIGlmIChiICE9PSAyNikgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ieXRlTGVuZ3RoID0gZnVuY3Rpb24gYnl0ZUxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmJpdExlbmd0aCgpIC8gOCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvVHdvcyA9IGZ1bmN0aW9uIHRvVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWJzKCkuaW5vdG4od2lkdGgpLmlhZGRuKDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tVHdvcyA9IGZ1bmN0aW9uIGZyb21Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLnRlc3RuKHdpZHRoIC0gMSkpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vdG4od2lkdGgpLmlhZGRuKDEpLmluZWcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNOZWcgPSBmdW5jdGlvbiBpc05lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubmVnYXRpdmUgIT09IDA7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYFxuICBCTi5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmluZWcoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW5lZyA9IGZ1bmN0aW9uIGluZWcgKCkge1xuICAgIGlmICghdGhpcy5pc1plcm8oKSkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdW9yID0gZnVuY3Rpb24gaXVvciAobnVtKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldIHwgbnVtLndvcmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlvciA9IGZ1bmN0aW9uIGlvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVvcihudW0pO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5vciA9IGZ1bmN0aW9uIG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pb3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVvciA9IGZ1bmN0aW9uIHVvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdW9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdWFuZCA9IGZ1bmN0aW9uIGl1YW5kIChudW0pIHtcbiAgICAvLyBiID0gbWluLWxlbmd0aChudW0sIHRoaXMpXG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSAmIG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGIubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaWFuZCA9IGZ1bmN0aW9uIGlhbmQgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1YW5kKG51bSk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hbmQgPSBmdW5jdGlvbiBhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYW5kKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51YW5kID0gZnVuY3Rpb24gdWFuZCAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdWFuZCh0aGlzKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1eG9yID0gZnVuY3Rpb24gaXV4b3IgKG51bSkge1xuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYTtcbiAgICB2YXIgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldIF4gYi53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcyAhPT0gYSkge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5peG9yID0gZnVuY3Rpb24gaXhvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXV4b3IobnVtKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIHhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5peG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml4b3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnV4b3IgPSBmdW5jdGlvbiB1eG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1eG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1eG9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIE5vdCBgYHRoaXNgYCB3aXRoIGBgd2lkdGhgYCBiaXR3aWR0aFxuICBCTi5wcm90b3R5cGUuaW5vdG4gPSBmdW5jdGlvbiBpbm90biAod2lkdGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIHdpZHRoID09PSAnbnVtYmVyJyAmJiB3aWR0aCA+PSAwKTtcblxuICAgIHZhciBieXRlc05lZWRlZCA9IE1hdGguY2VpbCh3aWR0aCAvIDI2KSB8IDA7XG4gICAgdmFyIGJpdHNMZWZ0ID0gd2lkdGggJSAyNjtcblxuICAgIC8vIEV4dGVuZCB0aGUgYnVmZmVyIHdpdGggbGVhZGluZyB6ZXJvZXNcbiAgICB0aGlzLl9leHBhbmQoYnl0ZXNOZWVkZWQpO1xuXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgYnl0ZXNOZWVkZWQtLTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgY29tcGxldGUgd29yZHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzTmVlZGVkOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgdGhlIHJlc2lkdWVcbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAoMHgzZmZmZmZmID4+ICgyNiAtIGJpdHNMZWZ0KSk7XG4gICAgfVxuXG4gICAgLy8gQW5kIHJlbW92ZSBsZWFkaW5nIHplcm9lc1xuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm5vdG4gPSBmdW5jdGlvbiBub3RuICh3aWR0aCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5vdG4od2lkdGgpO1xuICB9O1xuXG4gIC8vIFNldCBgYml0YCBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNldG4gPSBmdW5jdGlvbiBzZXRuIChiaXQsIHZhbCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG5cbiAgICB2YXIgb2ZmID0gKGJpdCAvIDI2KSB8IDA7XG4gICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgIHRoaXMuX2V4cGFuZChvZmYgKyAxKTtcblxuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMud29yZHNbb2ZmXSA9IHRoaXMud29yZHNbb2ZmXSB8ICgxIDw8IHdiaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gJiB+KDEgPDwgd2JpdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAobnVtKSB7XG4gICAgdmFyIHI7XG5cbiAgICAvLyBuZWdhdGl2ZSArIHBvc2l0aXZlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuXG4gICAgLy8gcG9zaXRpdmUgKyBuZWdhdGl2ZVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICAgIHZhciBhLCBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9IHIgPj4+IDI2O1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAvLyBDb3B5IHRoZSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIH0gZWxzZSBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIEFkZCBgbnVtYCB0byBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAobnVtKSB7XG4gICAgdmFyIHJlcztcbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwICYmIHRoaXMubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXMgPSB0aGlzLnN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0gZWxzZSBpZiAobnVtLm5lZ2F0aXZlID09PSAwICYmIHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gbnVtLnN1Yih0aGlzKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGQobnVtKTtcblxuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYWRkKHRoaXMpO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAobnVtKSB7XG4gICAgLy8gdGhpcyAtICgtbnVtKSA9IHRoaXMgKyBudW1cbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgdmFyIHIgPSB0aGlzLmlhZGQobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcblxuICAgIC8vIC10aGlzIC0gbnVtID0gLSh0aGlzICsgbnVtKVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGQobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlXG4gICAgdmFyIGNtcCA9IHRoaXMuY21wKG51bSk7XG5cbiAgICAvLyBPcHRpbWl6YXRpb24gLSB6ZXJvaWZ5XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIGEgPiBiXG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGNtcCA+IDApIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSAtIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgY2FycnkgIT09IDAgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBDb3B5IHJlc3Qgb2YgdGhlIHdvcmRzXG4gICAgaWYgKGNhcnJ5ID09PSAwICYmIGkgPCBhLmxlbmd0aCAmJiBhICE9PSB0aGlzKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSk7XG5cbiAgICBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWIobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBzbWFsbE11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgdmFyIGxlbiA9IChzZWxmLmxlbmd0aCArIG51bS5sZW5ndGgpIHwgMDtcbiAgICBvdXQubGVuZ3RoID0gbGVuO1xuICAgIGxlbiA9IChsZW4gLSAxKSB8IDA7XG5cbiAgICAvLyBQZWVsIG9uZSBpdGVyYXRpb24gKGNvbXBpbGVyIGNhbid0IGRvIGl0LCBiZWNhdXNlIG9mIGNvZGUgY29tcGxleGl0eSlcbiAgICB2YXIgYSA9IHNlbGYud29yZHNbMF0gfCAwO1xuICAgIHZhciBiID0gbnVtLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICB2YXIgY2FycnkgPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgIG91dC53b3Jkc1swXSA9IGxvO1xuXG4gICAgZm9yICh2YXIgayA9IDE7IGsgPCBsZW47IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBjYXJyeSA+Pj4gMjY7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IChrIC0gaikgfCAwO1xuICAgICAgICBhID0gc2VsZi53b3Jkc1tpXSB8IDA7XG4gICAgICAgIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICByID0gYSAqIGIgKyByd29yZDtcbiAgICAgICAgbmNhcnJ5ICs9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkIHwgMDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5IHwgMDtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeSB8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5sZW5ndGgtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH1cblxuICAvLyBUT0RPKGluZHV0bnkpOiBpdCBtYXkgYmUgcmVhc29uYWJsZSB0byBvbWl0IGl0IGZvciB1c2VycyB3aG8gZG9uJ3QgbmVlZFxuICAvLyB0byB3b3JrIHdpdGggMjU2LWJpdCBudW1iZXJzLCBvdGhlcndpc2UgaXQgZ2l2ZXMgMjAlIGltcHJvdmVtZW50IGZvciAyNTYtYml0XG4gIC8vIG11bHRpcGxpY2F0aW9uIChsaWtlIGVsbGlwdGljIHNlY3AyNTZrMSkuXG4gIHZhciBjb21iMTBNdWxUbyA9IGZ1bmN0aW9uIGNvbWIxME11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIHZhciBhID0gc2VsZi53b3JkcztcbiAgICB2YXIgYiA9IG51bS53b3JkcztcbiAgICB2YXIgbyA9IG91dC53b3JkcztcbiAgICB2YXIgYyA9IDA7XG4gICAgdmFyIGxvO1xuICAgIHZhciBtaWQ7XG4gICAgdmFyIGhpO1xuICAgIHZhciBhMCA9IGFbMF0gfCAwO1xuICAgIHZhciBhbDAgPSBhMCAmIDB4MWZmZjtcbiAgICB2YXIgYWgwID0gYTAgPj4+IDEzO1xuICAgIHZhciBhMSA9IGFbMV0gfCAwO1xuICAgIHZhciBhbDEgPSBhMSAmIDB4MWZmZjtcbiAgICB2YXIgYWgxID0gYTEgPj4+IDEzO1xuICAgIHZhciBhMiA9IGFbMl0gfCAwO1xuICAgIHZhciBhbDIgPSBhMiAmIDB4MWZmZjtcbiAgICB2YXIgYWgyID0gYTIgPj4+IDEzO1xuICAgIHZhciBhMyA9IGFbM10gfCAwO1xuICAgIHZhciBhbDMgPSBhMyAmIDB4MWZmZjtcbiAgICB2YXIgYWgzID0gYTMgPj4+IDEzO1xuICAgIHZhciBhNCA9IGFbNF0gfCAwO1xuICAgIHZhciBhbDQgPSBhNCAmIDB4MWZmZjtcbiAgICB2YXIgYWg0ID0gYTQgPj4+IDEzO1xuICAgIHZhciBhNSA9IGFbNV0gfCAwO1xuICAgIHZhciBhbDUgPSBhNSAmIDB4MWZmZjtcbiAgICB2YXIgYWg1ID0gYTUgPj4+IDEzO1xuICAgIHZhciBhNiA9IGFbNl0gfCAwO1xuICAgIHZhciBhbDYgPSBhNiAmIDB4MWZmZjtcbiAgICB2YXIgYWg2ID0gYTYgPj4+IDEzO1xuICAgIHZhciBhNyA9IGFbN10gfCAwO1xuICAgIHZhciBhbDcgPSBhNyAmIDB4MWZmZjtcbiAgICB2YXIgYWg3ID0gYTcgPj4+IDEzO1xuICAgIHZhciBhOCA9IGFbOF0gfCAwO1xuICAgIHZhciBhbDggPSBhOCAmIDB4MWZmZjtcbiAgICB2YXIgYWg4ID0gYTggPj4+IDEzO1xuICAgIHZhciBhOSA9IGFbOV0gfCAwO1xuICAgIHZhciBhbDkgPSBhOSAmIDB4MWZmZjtcbiAgICB2YXIgYWg5ID0gYTkgPj4+IDEzO1xuICAgIHZhciBiMCA9IGJbMF0gfCAwO1xuICAgIHZhciBibDAgPSBiMCAmIDB4MWZmZjtcbiAgICB2YXIgYmgwID0gYjAgPj4+IDEzO1xuICAgIHZhciBiMSA9IGJbMV0gfCAwO1xuICAgIHZhciBibDEgPSBiMSAmIDB4MWZmZjtcbiAgICB2YXIgYmgxID0gYjEgPj4+IDEzO1xuICAgIHZhciBiMiA9IGJbMl0gfCAwO1xuICAgIHZhciBibDIgPSBiMiAmIDB4MWZmZjtcbiAgICB2YXIgYmgyID0gYjIgPj4+IDEzO1xuICAgIHZhciBiMyA9IGJbM10gfCAwO1xuICAgIHZhciBibDMgPSBiMyAmIDB4MWZmZjtcbiAgICB2YXIgYmgzID0gYjMgPj4+IDEzO1xuICAgIHZhciBiNCA9IGJbNF0gfCAwO1xuICAgIHZhciBibDQgPSBiNCAmIDB4MWZmZjtcbiAgICB2YXIgYmg0ID0gYjQgPj4+IDEzO1xuICAgIHZhciBiNSA9IGJbNV0gfCAwO1xuICAgIHZhciBibDUgPSBiNSAmIDB4MWZmZjtcbiAgICB2YXIgYmg1ID0gYjUgPj4+IDEzO1xuICAgIHZhciBiNiA9IGJbNl0gfCAwO1xuICAgIHZhciBibDYgPSBiNiAmIDB4MWZmZjtcbiAgICB2YXIgYmg2ID0gYjYgPj4+IDEzO1xuICAgIHZhciBiNyA9IGJbN10gfCAwO1xuICAgIHZhciBibDcgPSBiNyAmIDB4MWZmZjtcbiAgICB2YXIgYmg3ID0gYjcgPj4+IDEzO1xuICAgIHZhciBiOCA9IGJbOF0gfCAwO1xuICAgIHZhciBibDggPSBiOCAmIDB4MWZmZjtcbiAgICB2YXIgYmg4ID0gYjggPj4+IDEzO1xuICAgIHZhciBiOSA9IGJbOV0gfCAwO1xuICAgIHZhciBibDkgPSBiOSAmIDB4MWZmZjtcbiAgICB2YXIgYmg5ID0gYjkgPj4+IDEzO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0gc2VsZi5uZWdhdGl2ZSBeIG51bS5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0gMTk7XG4gICAgLyogayA9IDAgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDAsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMCwgYmgwKTtcbiAgICB2YXIgdzAgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcwID4+PiAyNikpIHwgMDtcbiAgICB3MCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDEsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDEpKSB8IDA7XG4gICAgdmFyIHcxID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MSA+Pj4gMjYpKSB8IDA7XG4gICAgdzEgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwyLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDIsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDIsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMikpIHwgMDtcbiAgICB2YXIgdzIgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcyID4+PiAyNikpIHwgMDtcbiAgICB3MiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDMgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDMsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMykpIHwgMDtcbiAgICB2YXIgdzMgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHczID4+PiAyNikpIHwgMDtcbiAgICB3MyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDQgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDQsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNCwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDQpKSB8IDA7XG4gICAgdmFyIHc0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NCA+Pj4gMjYpKSB8IDA7XG4gICAgdzQgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw1LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDUsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDUsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNSkpIHwgMDtcbiAgICB2YXIgdzUgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc1ID4+PiAyNikpIHwgMDtcbiAgICB3NSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDYgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDYsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNiwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNiwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNikpIHwgMDtcbiAgICB2YXIgdzYgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc2ID4+PiAyNikpIHwgMDtcbiAgICB3NiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDcgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDcsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDcpKSB8IDA7XG4gICAgdmFyIHc3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NyA+Pj4gMjYpKSB8IDA7XG4gICAgdzcgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw4LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDgsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDgsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOCkpIHwgMDtcbiAgICB2YXIgdzggPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc4ID4+PiAyNikpIHwgMDtcbiAgICB3OCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDkgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzkgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc5ID4+PiAyNikpIHwgMDtcbiAgICB3OSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDEpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTAgPj4+IDI2KSkgfCAwO1xuICAgIHcxMCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDExICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDIpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTEgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMSA+Pj4gMjYpKSB8IDA7XG4gICAgdzExICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTIgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMyk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgzKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwzKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgzKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTIgPj4+IDI2KSkgfCAwO1xuICAgIHcxMiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDQpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEzID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTMgPj4+IDI2KSkgfCAwO1xuICAgIHcxMyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDUpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTQgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNCA+Pj4gMjYpKSB8IDA7XG4gICAgdzE0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTUgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNik7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg2KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw2KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg2KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTUgPj4+IDI2KSkgfCAwO1xuICAgIHcxNSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDcpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTYgPj4+IDI2KSkgfCAwO1xuICAgIHcxNiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDgpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTcgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNyA+Pj4gMjYpKSB8IDA7XG4gICAgdzE3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTggKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg5KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw5KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg5KTtcbiAgICB2YXIgdzE4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTggPj4+IDI2KSkgfCAwO1xuICAgIHcxOCAmPSAweDNmZmZmZmY7XG4gICAgb1swXSA9IHcwO1xuICAgIG9bMV0gPSB3MTtcbiAgICBvWzJdID0gdzI7XG4gICAgb1szXSA9IHczO1xuICAgIG9bNF0gPSB3NDtcbiAgICBvWzVdID0gdzU7XG4gICAgb1s2XSA9IHc2O1xuICAgIG9bN10gPSB3NztcbiAgICBvWzhdID0gdzg7XG4gICAgb1s5XSA9IHc5O1xuICAgIG9bMTBdID0gdzEwO1xuICAgIG9bMTFdID0gdzExO1xuICAgIG9bMTJdID0gdzEyO1xuICAgIG9bMTNdID0gdzEzO1xuICAgIG9bMTRdID0gdzE0O1xuICAgIG9bMTVdID0gdzE1O1xuICAgIG9bMTZdID0gdzE2O1xuICAgIG9bMTddID0gdzE3O1xuICAgIG9bMThdID0gdzE4O1xuICAgIGlmIChjICE9PSAwKSB7XG4gICAgICBvWzE5XSA9IGM7XG4gICAgICBvdXQubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgLy8gUG9seWZpbGwgY29tYlxuICBpZiAoIU1hdGguaW11bCkge1xuICAgIGNvbWIxME11bFRvID0gc21hbGxNdWxUbztcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpZ011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aDtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgdmFyIGhuY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgb3V0Lmxlbmd0aCAtIDE7IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBobmNhcnJ5O1xuICAgICAgaG5jYXJyeSA9IDA7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IGsgLSBqO1xuICAgICAgICB2YXIgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICB2YXIgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHZhciByID0gYSAqIGI7XG5cbiAgICAgICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArICgociAvIDB4NDAwMDAwMCkgfCAwKSkgfCAwO1xuICAgICAgICBsbyA9IChsbyArIHJ3b3JkKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAobG8gPj4+IDI2KSkgfCAwO1xuXG4gICAgICAgIGhuY2FycnkgKz0gbmNhcnJ5ID4+PiAyNjtcbiAgICAgICAgbmNhcnJ5ICY9IDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkO1xuICAgICAgY2FycnkgPSBuY2Fycnk7XG4gICAgICBuY2FycnkgPSBobmNhcnJ5O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgZnVuY3Rpb24ganVtYm9NdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgZmZ0bSA9IG5ldyBGRlRNKCk7XG4gICAgcmV0dXJuIGZmdG0ubXVscChzZWxmLCBudW0sIG91dCk7XG4gIH1cblxuICBCTi5wcm90b3R5cGUubXVsVG8gPSBmdW5jdGlvbiBtdWxUbyAobnVtLCBvdXQpIHtcbiAgICB2YXIgcmVzO1xuICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aCArIG51bS5sZW5ndGg7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxMCAmJiBudW0ubGVuZ3RoID09PSAxMCkge1xuICAgICAgcmVzID0gY29tYjEwTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgNjMpIHtcbiAgICAgIHJlcyA9IHNtYWxsTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgMTAyNCkge1xuICAgICAgcmVzID0gYmlnTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvb2xleS1UdWtleSBhbGdvcml0aG0gZm9yIEZGVFxuICAvLyBzbGlnaHRseSByZXZpc2l0ZWQgdG8gcmVseSBvbiBsb29waW5nIGluc3RlYWQgb2YgcmVjdXJzaW9uXG5cbiAgZnVuY3Rpb24gRkZUTSAoeCwgeSkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIEZGVE0ucHJvdG90eXBlLm1ha2VSQlQgPSBmdW5jdGlvbiBtYWtlUkJUIChOKSB7XG4gICAgdmFyIHQgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGwgPSBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyhOKSAtIDE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHRbaV0gPSB0aGlzLnJldkJpbihpLCBsLCBOKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGJpbmFyeS1yZXZlcnNlZCByZXByZXNlbnRhdGlvbiBvZiBgeGBcbiAgRkZUTS5wcm90b3R5cGUucmV2QmluID0gZnVuY3Rpb24gcmV2QmluICh4LCBsLCBOKSB7XG4gICAgaWYgKHggPT09IDAgfHwgeCA9PT0gTiAtIDEpIHJldHVybiB4O1xuXG4gICAgdmFyIHJiID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgcmIgfD0gKHggJiAxKSA8PCAobCAtIGkgLSAxKTtcbiAgICAgIHggPj49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJiO1xuICB9O1xuXG4gIC8vIFBlcmZvcm1zIFwidHdlZWRsaW5nXCIgcGhhc2UsIHRoZXJlZm9yZSAnZW11bGF0aW5nJ1xuICAvLyBiZWhhdmlvdXIgb2YgdGhlIHJlY3Vyc2l2ZSBhbGdvcml0aG1cbiAgRkZUTS5wcm90b3R5cGUucGVybXV0ZSA9IGZ1bmN0aW9uIHBlcm11dGUgKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcnR3c1tpXSA9IHJ3c1tyYnRbaV1dO1xuICAgICAgaXR3c1tpXSA9IGl3c1tyYnRbaV1dO1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiB0cmFuc2Zvcm0gKHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOLCByYnQpIHtcbiAgICB0aGlzLnBlcm11dGUocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTik7XG5cbiAgICBmb3IgKHZhciBzID0gMTsgcyA8IE47IHMgPDw9IDEpIHtcbiAgICAgIHZhciBsID0gcyA8PCAxO1xuXG4gICAgICB2YXIgcnR3ZGYgPSBNYXRoLmNvcygyICogTWF0aC5QSSAvIGwpO1xuICAgICAgdmFyIGl0d2RmID0gTWF0aC5zaW4oMiAqIE1hdGguUEkgLyBsKTtcblxuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBOOyBwICs9IGwpIHtcbiAgICAgICAgdmFyIHJ0d2RmXyA9IHJ0d2RmO1xuICAgICAgICB2YXIgaXR3ZGZfID0gaXR3ZGY7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzOyBqKyspIHtcbiAgICAgICAgICB2YXIgcmUgPSBydHdzW3AgKyBqXTtcbiAgICAgICAgICB2YXIgaWUgPSBpdHdzW3AgKyBqXTtcblxuICAgICAgICAgIHZhciBybyA9IHJ0d3NbcCArIGogKyBzXTtcbiAgICAgICAgICB2YXIgaW8gPSBpdHdzW3AgKyBqICsgc107XG5cbiAgICAgICAgICB2YXIgcnggPSBydHdkZl8gKiBybyAtIGl0d2RmXyAqIGlvO1xuXG4gICAgICAgICAgaW8gPSBydHdkZl8gKiBpbyArIGl0d2RmXyAqIHJvO1xuICAgICAgICAgIHJvID0gcng7XG5cbiAgICAgICAgICBydHdzW3AgKyBqXSA9IHJlICsgcm87XG4gICAgICAgICAgaXR3c1twICsgal0gPSBpZSArIGlvO1xuXG4gICAgICAgICAgcnR3c1twICsgaiArIHNdID0gcmUgLSBybztcbiAgICAgICAgICBpdHdzW3AgKyBqICsgc10gPSBpZSAtIGlvO1xuXG4gICAgICAgICAgLyoganNoaW50IG1heGRlcHRoIDogZmFsc2UgKi9cbiAgICAgICAgICBpZiAoaiAhPT0gbCkge1xuICAgICAgICAgICAgcnggPSBydHdkZiAqIHJ0d2RmXyAtIGl0d2RmICogaXR3ZGZfO1xuXG4gICAgICAgICAgICBpdHdkZl8gPSBydHdkZiAqIGl0d2RmXyArIGl0d2RmICogcnR3ZGZfO1xuICAgICAgICAgICAgcnR3ZGZfID0gcng7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmd1ZXNzTGVuMTNiID0gZnVuY3Rpb24gZ3Vlc3NMZW4xM2IgKG4sIG0pIHtcbiAgICB2YXIgTiA9IE1hdGgubWF4KG0sIG4pIHwgMTtcbiAgICB2YXIgb2RkID0gTiAmIDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoTiA9IE4gLyAyIHwgMDsgTjsgTiA9IE4gPj4+IDEpIHtcbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4gMSA8PCBpICsgMSArIG9kZDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb25qdWdhdGUgPSBmdW5jdGlvbiBjb25qdWdhdGUgKHJ3cywgaXdzLCBOKSB7XG4gICAgaWYgKE4gPD0gMSkgcmV0dXJuO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7XG4gICAgICB2YXIgdCA9IHJ3c1tpXTtcblxuICAgICAgcndzW2ldID0gcndzW04gLSBpIC0gMV07XG4gICAgICByd3NbTiAtIGkgLSAxXSA9IHQ7XG5cbiAgICAgIHQgPSBpd3NbaV07XG5cbiAgICAgIGl3c1tpXSA9IC1pd3NbTiAtIGkgLSAxXTtcbiAgICAgIGl3c1tOIC0gaSAtIDFdID0gLXQ7XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLm5vcm1hbGl6ZTEzYiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZTEzYiAod3MsIE4pIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHcgPSBNYXRoLnJvdW5kKHdzWzIgKiBpICsgMV0gLyBOKSAqIDB4MjAwMCArXG4gICAgICAgIE1hdGgucm91bmQod3NbMiAqIGldIC8gTikgK1xuICAgICAgICBjYXJyeTtcblxuICAgICAgd3NbaV0gPSB3ICYgMHgzZmZmZmZmO1xuXG4gICAgICBpZiAodyA8IDB4NDAwMDAwMCkge1xuICAgICAgICBjYXJyeSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJyeSA9IHcgLyAweDQwMDAwMDAgfCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3cztcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb252ZXJ0MTNiID0gZnVuY3Rpb24gY29udmVydDEzYiAod3MsIGxlbiwgcndzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjYXJyeSA9IGNhcnJ5ICsgKHdzW2ldIHwgMCk7XG5cbiAgICAgIHJ3c1syICogaV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgICByd3NbMiAqIGkgKyAxXSA9IGNhcnJ5ICYgMHgxZmZmOyBjYXJyeSA9IGNhcnJ5ID4+PiAxMztcbiAgICB9XG5cbiAgICAvLyBQYWQgd2l0aCB6ZXJvZXNcbiAgICBmb3IgKGkgPSAyICogbGVuOyBpIDwgTjsgKytpKSB7XG4gICAgICByd3NbaV0gPSAwO1xuICAgIH1cblxuICAgIGFzc2VydChjYXJyeSA9PT0gMCk7XG4gICAgYXNzZXJ0KChjYXJyeSAmIH4weDFmZmYpID09PSAwKTtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5zdHViID0gZnVuY3Rpb24gc3R1YiAoTikge1xuICAgIHZhciBwaCA9IG5ldyBBcnJheShOKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcGhbaV0gPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBwaDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5tdWxwID0gZnVuY3Rpb24gbXVscCAoeCwgeSwgb3V0KSB7XG4gICAgdmFyIE4gPSAyICogdGhpcy5ndWVzc0xlbjEzYih4Lmxlbmd0aCwgeS5sZW5ndGgpO1xuXG4gICAgdmFyIHJidCA9IHRoaXMubWFrZVJCVChOKTtcblxuICAgIHZhciBfID0gdGhpcy5zdHViKE4pO1xuXG4gICAgdmFyIHJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgcndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgaXdzdCA9IG5ldyBBcnJheShOKTtcblxuICAgIHZhciBucndzID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBucndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbml3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgcm13cyA9IG91dC53b3JkcztcbiAgICBybXdzLmxlbmd0aCA9IE47XG5cbiAgICB0aGlzLmNvbnZlcnQxM2IoeC53b3JkcywgeC5sZW5ndGgsIHJ3cywgTik7XG4gICAgdGhpcy5jb252ZXJ0MTNiKHkud29yZHMsIHkubGVuZ3RoLCBucndzLCBOKTtcblxuICAgIHRoaXMudHJhbnNmb3JtKHJ3cywgXywgcndzdCwgaXdzdCwgTiwgcmJ0KTtcbiAgICB0aGlzLnRyYW5zZm9ybShucndzLCBfLCBucndzdCwgbml3c3QsIE4sIHJidCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgdmFyIHJ4ID0gcndzdFtpXSAqIG5yd3N0W2ldIC0gaXdzdFtpXSAqIG5pd3N0W2ldO1xuICAgICAgaXdzdFtpXSA9IHJ3c3RbaV0gKiBuaXdzdFtpXSArIGl3c3RbaV0gKiBucndzdFtpXTtcbiAgICAgIHJ3c3RbaV0gPSByeDtcbiAgICB9XG5cbiAgICB0aGlzLmNvbmp1Z2F0ZShyd3N0LCBpd3N0LCBOKTtcbiAgICB0aGlzLnRyYW5zZm9ybShyd3N0LCBpd3N0LCBybXdzLCBfLCBOLCByYnQpO1xuICAgIHRoaXMuY29uanVnYXRlKHJtd3MsIF8sIE4pO1xuICAgIHRoaXMubm9ybWFsaXplMTNiKHJtd3MsIE4pO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0geC5uZWdhdGl2ZSBeIHkubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHgubGVuZ3RoICsgeS5sZW5ndGg7XG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIE11bHRpcGx5IGB0aGlzYCBieSBgbnVtYFxuICBCTi5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChudW0pIHtcbiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICAgIG91dC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCArIG51bS5sZW5ndGgpO1xuICAgIHJldHVybiB0aGlzLm11bFRvKG51bSwgb3V0KTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBlbXBsb3lpbmcgRkZUXG4gIEJOLnByb3RvdHlwZS5tdWxmID0gZnVuY3Rpb24gbXVsZiAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gSW4tcGxhY2UgTXVsdGlwbGljYXRpb25cbiAgQk4ucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLm11bFRvKG51bSwgdGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmltdWxuID0gZnVuY3Rpb24gaW11bG4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG5cbiAgICAvLyBDYXJyeVxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKiBudW07XG4gICAgICB2YXIgbG8gPSAodyAmIDB4M2ZmZmZmZikgKyAoY2FycnkgJiAweDNmZmZmZmYpO1xuICAgICAgY2FycnkgPj49IDI2O1xuICAgICAgY2FycnkgKz0gKHcgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgIC8vIE5PVEU6IGxvIGlzIDI3Yml0IG1heGltdW1cbiAgICAgIGNhcnJ5ICs9IGxvID4+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm11bG4gPSBmdW5jdGlvbiBtdWxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltdWxuKG51bSk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKCkge1xuICAgIHJldHVybiB0aGlzLm11bCh0aGlzKTtcbiAgfTtcblxuICAvLyBgdGhpc2AgKiBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKHRoaXMuY2xvbmUoKSk7XG4gIH07XG5cbiAgLy8gTWF0aC5wb3coYHRoaXNgLCBgbnVtYClcbiAgQk4ucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAobnVtKSB7XG4gICAgdmFyIHcgPSB0b0JpdEFycmF5KG51bSk7XG4gICAgaWYgKHcubGVuZ3RoID09PSAwKSByZXR1cm4gbmV3IEJOKDEpO1xuXG4gICAgLy8gU2tpcCBsZWFkaW5nIHplcm9lc1xuICAgIHZhciByZXMgPSB0aGlzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdy5sZW5ndGg7IGkrKywgcmVzID0gcmVzLnNxcigpKSB7XG4gICAgICBpZiAod1tpXSAhPT0gMCkgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKCsraSA8IHcubGVuZ3RoKSB7XG4gICAgICBmb3IgKHZhciBxID0gcmVzLnNxcigpOyBpIDwgdy5sZW5ndGg7IGkrKywgcSA9IHEuc3FyKCkpIHtcbiAgICAgICAgaWYgKHdbaV0gPT09IDApIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHJlcy5tdWwocSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0IGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXNobG4gPSBmdW5jdGlvbiBpdXNobG4gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG4gICAgdmFyIGNhcnJ5TWFzayA9ICgweDNmZmZmZmYgPj4+ICgyNiAtIHIpKSA8PCAoMjYgLSByKTtcbiAgICB2YXIgaTtcblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbmV3Q2FycnkgPSB0aGlzLndvcmRzW2ldICYgY2FycnlNYXNrO1xuICAgICAgICB2YXIgYyA9ICgodGhpcy53b3Jkc1tpXSB8IDApIC0gbmV3Q2FycnkpIDw8IHI7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjIHwgY2Fycnk7XG4gICAgICAgIGNhcnJ5ID0gbmV3Q2FycnkgPj4+ICgyNiAtIHIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FycnkpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgICB0aGlzLmxlbmd0aCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzICE9PSAwKSB7XG4gICAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIHNdID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IHM7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sZW5ndGggKz0gcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hsbiA9IGZ1bmN0aW9uIGlzaGxuIChiaXRzKSB7XG4gICAgLy8gVE9ETyhpbmR1dG55KTogaW1wbGVtZW50IG1lXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodCBpbi1wbGFjZVxuICAvLyBOT1RFOiBgaGludGAgaXMgYSBsb3dlc3QgYml0IGJlZm9yZSB0cmFpbGluZyB6ZXJvZXNcbiAgLy8gTk9URTogaWYgYGV4dGVuZGVkYCBpcyBwcmVzZW50IC0gaXQgd2lsbCBiZSBmaWxsZWQgd2l0aCBkZXN0cm95ZWQgYml0c1xuICBCTi5wcm90b3R5cGUuaXVzaHJuID0gZnVuY3Rpb24gaXVzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgaDtcbiAgICBpZiAoaGludCkge1xuICAgICAgaCA9IChoaW50IC0gKGhpbnQgJSAyNikpIC8gMjY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGggPSAwO1xuICAgIH1cblxuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gTWF0aC5taW4oKGJpdHMgLSByKSAvIDI2LCB0aGlzLmxlbmd0aCk7XG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgdmFyIG1hc2tlZFdvcmRzID0gZXh0ZW5kZWQ7XG5cbiAgICBoIC09IHM7XG4gICAgaCA9IE1hdGgubWF4KDAsIGgpO1xuXG4gICAgLy8gRXh0ZW5kZWQgbW9kZSwgY29weSBtYXNrZWQgcGFydFxuICAgIGlmIChtYXNrZWRXb3Jkcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgbWFza2VkV29yZHMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgICAgfVxuICAgICAgbWFza2VkV29yZHMubGVuZ3RoID0gcztcbiAgICB9XG5cbiAgICBpZiAocyA9PT0gMCkge1xuICAgICAgLy8gTm8tb3AsIHdlIHNob3VsZCBub3QgbW92ZSBhbnl0aGluZyBhdCBhbGxcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gcykge1xuICAgICAgdGhpcy5sZW5ndGggLT0gcztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2kgKyBzXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMCAmJiAoY2FycnkgIT09IDAgfHwgaSA+PSBoKTsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IChjYXJyeSA8PCAoMjYgLSByKSkgfCAod29yZCA+Pj4gcik7XG4gICAgICBjYXJyeSA9IHdvcmQgJiBtYXNrO1xuICAgIH1cblxuICAgIC8vIFB1c2ggY2FycmllZCBiaXRzIGFzIGEgbWFza1xuICAgIGlmIChtYXNrZWRXb3JkcyAmJiBjYXJyeSAhPT0gMCkge1xuICAgICAgbWFza2VkV29yZHMud29yZHNbbWFza2VkV29yZHMubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hybiA9IGZ1bmN0aW9uIGlzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNocm4oYml0cywgaGludCwgZXh0ZW5kZWQpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnRcbiAgQk4ucHJvdG90eXBlLnNobG4gPSBmdW5jdGlvbiBzaGxuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hsbihiaXRzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXNobG4gPSBmdW5jdGlvbiB1c2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0XG4gIEJOLnByb3RvdHlwZS5zaHJuID0gZnVuY3Rpb24gc2hybiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNocm4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaHJuID0gZnVuY3Rpb24gdXNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hybihiaXRzKTtcbiAgfTtcblxuICAvLyBUZXN0IGlmIG4gYml0IGlzIHNldFxuICBCTi5wcm90b3R5cGUudGVzdG4gPSBmdW5jdGlvbiB0ZXN0biAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInICYmIGJpdCA+PSAwKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBDaGVjayBiaXQgYW5kIHJldHVyblxuICAgIHZhciB3ID0gdGhpcy53b3Jkc1tzXTtcblxuICAgIHJldHVybiAhISh3ICYgcSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyIChpbi1wbGFjZSlcbiAgQk4ucHJvdG90eXBlLmltYXNrbiA9IGZ1bmN0aW9uIGltYXNrbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcblxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAnaW1hc2tuIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZSBudW1iZXJzJyk7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHMrKztcbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1pbihzLCB0aGlzLmxlbmd0aCk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gJj0gbWFzaztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlclxuICBCTi5wcm90b3R5cGUubWFza24gPSBmdW5jdGlvbiBtYXNrbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW1hc2tuKGJpdHMpO1xuICB9O1xuXG4gIC8vIEFkZCBwbGFpbiBudW1iZXIgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pYWRkbiA9IGZ1bmN0aW9uIGlhZGRuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pc3VibigtbnVtKTtcblxuICAgIC8vIFBvc3NpYmxlIHNpZ24gY2hhbmdlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiAodGhpcy53b3Jkc1swXSB8IDApIDwgbnVtKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gPSBudW0gLSAodGhpcy53b3Jkc1swXSB8IDApO1xuICAgICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pc3VibihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aG91dCBjaGVja3NcbiAgICByZXR1cm4gdGhpcy5faWFkZG4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lhZGRuID0gZnVuY3Rpb24gX2lhZGRuIChudW0pIHtcbiAgICB0aGlzLndvcmRzWzBdICs9IG51bTtcblxuICAgIC8vIENhcnJ5XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldID49IDB4NDAwMDAwMDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldIC09IDB4NDAwMDAwMDtcbiAgICAgIGlmIChpID09PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0rKztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSArIDEpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgcGxhaW4gbnVtYmVyIGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pc3VibiA9IGZ1bmN0aW9uIGlzdWJuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pYWRkbigtbnVtKTtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZG4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy53b3Jkc1swXSAtPSBudW07XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA8IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAtdGhpcy53b3Jkc1swXTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYXJyeVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldIDwgMDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gKz0gMHg0MDAwMDAwO1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSAtPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFkZG4gPSBmdW5jdGlvbiBhZGRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnN1Ym4gPSBmdW5jdGlvbiBzdWJuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWJuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhYnMgPSBmdW5jdGlvbiBpYWJzICgpIHtcbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hYnMgPSBmdW5jdGlvbiBhYnMgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFicygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faXNobG5zdWJtdWwgPSBmdW5jdGlvbiBfaXNobG5zdWJtdWwgKG51bSwgbXVsLCBzaGlmdCkge1xuICAgIHZhciBsZW4gPSBudW0ubGVuZ3RoICsgc2hpZnQ7XG4gICAgdmFyIGk7XG5cbiAgICB0aGlzLl9leHBhbmQobGVuKTtcblxuICAgIHZhciB3O1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgdmFyIHJpZ2h0ID0gKG51bS53b3Jkc1tpXSB8IDApICogbXVsO1xuICAgICAgdyAtPSByaWdodCAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gKHcgPj4gMjYpIC0gKChyaWdodCAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgdGhpcy5sZW5ndGggLSBzaGlmdDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSA9PT0gMCkgcmV0dXJuIHRoaXMuc3RyaXAoKTtcblxuICAgIC8vIFN1YnRyYWN0aW9uIG92ZXJmbG93XG4gICAgYXNzZXJ0KGNhcnJ5ID09PSAtMSk7XG4gICAgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3ID0gLSh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICB0aGlzLm5lZ2F0aXZlID0gMTtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl93b3JkRGl2ID0gZnVuY3Rpb24gX3dvcmREaXYgKG51bSwgbW9kZSkge1xuICAgIHZhciBzaGlmdCA9IHRoaXMubGVuZ3RoIC0gbnVtLmxlbmd0aDtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtO1xuXG4gICAgLy8gTm9ybWFsaXplXG4gICAgdmFyIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgdmFyIGJoaUJpdHMgPSB0aGlzLl9jb3VudEJpdHMoYmhpKTtcbiAgICBzaGlmdCA9IDI2IC0gYmhpQml0cztcbiAgICBpZiAoc2hpZnQgIT09IDApIHtcbiAgICAgIGIgPSBiLnVzaGxuKHNoaWZ0KTtcbiAgICAgIGEuaXVzaGxuKHNoaWZ0KTtcbiAgICAgIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBxdW90aWVudFxuICAgIHZhciBtID0gYS5sZW5ndGggLSBiLmxlbmd0aDtcbiAgICB2YXIgcTtcblxuICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgcSA9IG5ldyBCTihudWxsKTtcbiAgICAgIHEubGVuZ3RoID0gbSArIDE7XG4gICAgICBxLndvcmRzID0gbmV3IEFycmF5KHEubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcS5sZW5ndGg7IGkrKykge1xuICAgICAgICBxLndvcmRzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGlmZiA9IGEuY2xvbmUoKS5faXNobG5zdWJtdWwoYiwgMSwgbSk7XG4gICAgaWYgKGRpZmYubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIGEgPSBkaWZmO1xuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1ttXSA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IG0gLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgdmFyIHFqID0gKGEud29yZHNbYi5sZW5ndGggKyBqXSB8IDApICogMHg0MDAwMDAwICtcbiAgICAgICAgKGEud29yZHNbYi5sZW5ndGggKyBqIC0gMV0gfCAwKTtcblxuICAgICAgLy8gTk9URTogKHFqIC8gYmhpKSBpcyAoMHgzZmZmZmZmICogMHg0MDAwMDAwICsgMHgzZmZmZmZmKSAvIDB4MjAwMDAwMCBtYXhcbiAgICAgIC8vICgweDdmZmZmZmYpXG4gICAgICBxaiA9IE1hdGgubWluKChxaiAvIGJoaSkgfCAwLCAweDNmZmZmZmYpO1xuXG4gICAgICBhLl9pc2hsbnN1Ym11bChiLCBxaiwgaik7XG4gICAgICB3aGlsZSAoYS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBxai0tO1xuICAgICAgICBhLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgYS5faXNobG5zdWJtdWwoYiwgMSwgaik7XG4gICAgICAgIGlmICghYS5pc1plcm8oKSkge1xuICAgICAgICAgIGEubmVnYXRpdmUgXj0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1tqXSA9IHFqO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocSkge1xuICAgICAgcS5zdHJpcCgpO1xuICAgIH1cbiAgICBhLnN0cmlwKCk7XG5cbiAgICAvLyBEZW5vcm1hbGl6ZVxuICAgIGlmIChtb2RlICE9PSAnZGl2JyAmJiBzaGlmdCAhPT0gMCkge1xuICAgICAgYS5pdXNocm4oc2hpZnQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkaXY6IHEgfHwgbnVsbCxcbiAgICAgIG1vZDogYVxuICAgIH07XG4gIH07XG5cbiAgLy8gTk9URTogMSkgYG1vZGVgIGNhbiBiZSBzZXQgdG8gYG1vZGAgdG8gcmVxdWVzdCBtb2Qgb25seSxcbiAgLy8gICAgICAgdG8gYGRpdmAgdG8gcmVxdWVzdCBkaXYgb25seSwgb3IgYmUgYWJzZW50IHRvXG4gIC8vICAgICAgIHJlcXVlc3QgYm90aCBkaXYgJiBtb2RcbiAgLy8gICAgICAgMikgYHBvc2l0aXZlYCBpcyB0cnVlIGlmIHVuc2lnbmVkIG1vZCBpcyByZXF1ZXN0ZWRcbiAgQk4ucHJvdG90eXBlLmRpdm1vZCA9IGZ1bmN0aW9uIGRpdm1vZCAobnVtLCBtb2RlLCBwb3NpdGl2ZSkge1xuICAgIGFzc2VydCghbnVtLmlzWmVybygpKTtcblxuICAgIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IG5ldyBCTigwKSxcbiAgICAgICAgbW9kOiBuZXcgQk4oMClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGRpdiwgbW9kLCByZXM7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0sIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgIT09ICdkaXYnKSB7XG4gICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgICBtb2QuaWFkZChudW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiByZXMubW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICgodGhpcy5uZWdhdGl2ZSAmIG51bS5uZWdhdGl2ZSkgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlzdWIobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHJlcy5kaXYsXG4gICAgICAgIG1vZDogbW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmUgYXQgdGhpcyBwb2ludFxuXG4gICAgLy8gU3RyaXAgYm90aCBudW1iZXJzIHRvIGFwcHJveGltYXRlIHNoaWZ0IHZhbHVlXG4gICAgaWYgKG51bS5sZW5ndGggPiB0aGlzLmxlbmd0aCB8fCB0aGlzLmNtcChudW0pIDwgMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogdGhpc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBWZXJ5IHNob3J0IHJlZHVjdGlvblxuICAgIGlmIChudW0ubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAobW9kZSA9PT0gJ2RpdicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICAgIG1vZDogbnVsbFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kZSA9PT0gJ21vZCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IG51bGwsXG4gICAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RuKG51bS53b3Jkc1swXSkpXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fd29yZERpdihudW0sIG1vZGUpO1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgIC8gYG51bWBcbiAgQk4ucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uIGRpdiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ2RpdicsIGZhbHNlKS5kaXY7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgJSBgbnVtYFxuICBCTi5wcm90b3R5cGUubW9kID0gZnVuY3Rpb24gbW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgZmFsc2UpLm1vZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW1vZCA9IGZ1bmN0aW9uIHVtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCB0cnVlKS5tb2Q7XG4gIH07XG5cbiAgLy8gRmluZCBSb3VuZChgdGhpc2AgLyBgbnVtYClcbiAgQk4ucHJvdG90eXBlLmRpdlJvdW5kID0gZnVuY3Rpb24gZGl2Um91bmQgKG51bSkge1xuICAgIHZhciBkbSA9IHRoaXMuZGl2bW9kKG51bSk7XG5cbiAgICAvLyBGYXN0IGNhc2UgLSBleGFjdCBkaXZpc2lvblxuICAgIGlmIChkbS5tb2QuaXNaZXJvKCkpIHJldHVybiBkbS5kaXY7XG5cbiAgICB2YXIgbW9kID0gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0ubW9kLmlzdWIobnVtKSA6IGRtLm1vZDtcblxuICAgIHZhciBoYWxmID0gbnVtLnVzaHJuKDEpO1xuICAgIHZhciByMiA9IG51bS5hbmRsbigxKTtcbiAgICB2YXIgY21wID0gbW9kLmNtcChoYWxmKTtcblxuICAgIC8vIFJvdW5kIGRvd25cbiAgICBpZiAoY21wIDwgMCB8fCByMiA9PT0gMSAmJiBjbXAgPT09IDApIHJldHVybiBkbS5kaXY7XG5cbiAgICAvLyBSb3VuZCB1cFxuICAgIHJldHVybiBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5kaXYuaXN1Ym4oMSkgOiBkbS5kaXYuaWFkZG4oMSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm1vZG4gPSBmdW5jdGlvbiBtb2RuIChudW0pIHtcbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG4gICAgdmFyIHAgPSAoMSA8PCAyNikgJSBudW07XG5cbiAgICB2YXIgYWNjID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgYWNjID0gKHAgKiBhY2MgKyAodGhpcy53b3Jkc1tpXSB8IDApKSAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIGRpdmlzaW9uIGJ5IG51bWJlclxuICBCTi5wcm90b3R5cGUuaWRpdm4gPSBmdW5jdGlvbiBpZGl2biAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICsgY2FycnkgKiAweDQwMDAwMDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKHcgLyBudW0pIHwgMDtcbiAgICAgIGNhcnJ5ID0gdyAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5kaXZuID0gZnVuY3Rpb24gZGl2biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pZGl2bihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lZ2NkID0gZnVuY3Rpb24gZWdjZCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIHggPSB0aGlzO1xuICAgIHZhciB5ID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKHgubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHggPSB4LnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSB4LmNsb25lKCk7XG4gICAgfVxuXG4gICAgLy8gQSAqIHggKyBCICogeSA9IHhcbiAgICB2YXIgQSA9IG5ldyBCTigxKTtcbiAgICB2YXIgQiA9IG5ldyBCTigwKTtcblxuICAgIC8vIEMgKiB4ICsgRCAqIHkgPSB5XG4gICAgdmFyIEMgPSBuZXcgQk4oMCk7XG4gICAgdmFyIEQgPSBuZXcgQk4oMSk7XG5cbiAgICB2YXIgZyA9IDA7XG5cbiAgICB3aGlsZSAoeC5pc0V2ZW4oKSAmJiB5LmlzRXZlbigpKSB7XG4gICAgICB4Lml1c2hybigxKTtcbiAgICAgIHkuaXVzaHJuKDEpO1xuICAgICAgKytnO1xuICAgIH1cblxuICAgIHZhciB5cCA9IHkuY2xvbmUoKTtcbiAgICB2YXIgeHAgPSB4LmNsb25lKCk7XG5cbiAgICB3aGlsZSAoIXguaXNaZXJvKCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7ICh4LndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgeC5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEEuaXNPZGQoKSB8fCBCLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEEuaWFkZCh5cCk7XG4gICAgICAgICAgICBCLmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEEuaXVzaHJuKDEpO1xuICAgICAgICAgIEIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7ICh5LndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgeS5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEMuaXNPZGQoKSB8fCBELmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEMuaWFkZCh5cCk7XG4gICAgICAgICAgICBELmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEMuaXVzaHJuKDEpO1xuICAgICAgICAgIEQuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh4LmNtcCh5KSA+PSAwKSB7XG4gICAgICAgIHguaXN1Yih5KTtcbiAgICAgICAgQS5pc3ViKEMpO1xuICAgICAgICBCLmlzdWIoRCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5LmlzdWIoeCk7XG4gICAgICAgIEMuaXN1YihBKTtcbiAgICAgICAgRC5pc3ViKEIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhOiBDLFxuICAgICAgYjogRCxcbiAgICAgIGdjZDogeS5pdXNobG4oZylcbiAgICB9O1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgcmVkdWNlZCBpbmNhcm5hdGlvbiBvZiB0aGUgYmluYXJ5IEVFQVxuICAvLyBhYm92ZSwgZGVzaWduYXRlZCB0byBpbnZlcnQgbWVtYmVycyBvZiB0aGVcbiAgLy8gX3ByaW1lXyBmaWVsZHMgRihwKSBhdCBhIG1heGltYWwgc3BlZWRcbiAgQk4ucHJvdG90eXBlLl9pbnZtcCA9IGZ1bmN0aW9uIF9pbnZtcCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIGEgPSB0aGlzO1xuICAgIHZhciBiID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGEgPSBhLnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgdmFyIHgxID0gbmV3IEJOKDEpO1xuICAgIHZhciB4MiA9IG5ldyBCTigwKTtcblxuICAgIHZhciBkZWx0YSA9IGIuY2xvbmUoKTtcblxuICAgIHdoaWxlIChhLmNtcG4oMSkgPiAwICYmIGIuY21wbigxKSA+IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7IChhLndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgYS5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgxLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgxLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgxLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoYi53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIGIuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmICh4Mi5pc09kZCgpKSB7XG4gICAgICAgICAgICB4Mi5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4Mi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGEuY21wKGIpID49IDApIHtcbiAgICAgICAgYS5pc3ViKGIpO1xuICAgICAgICB4MS5pc3ViKHgyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGIuaXN1YihhKTtcbiAgICAgICAgeDIuaXN1Yih4MSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlcztcbiAgICBpZiAoYS5jbXBuKDEpID09PSAwKSB7XG4gICAgICByZXMgPSB4MTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0geDI7XG4gICAgfVxuXG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQocCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ2NkID0gZnVuY3Rpb24gZ2NkIChudW0pIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIG51bS5hYnMoKTtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gdGhpcy5hYnMoKTtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtLmNsb25lKCk7XG4gICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgYi5uZWdhdGl2ZSA9IDA7XG5cbiAgICAvLyBSZW1vdmUgY29tbW9uIGZhY3RvciBvZiB0d29cbiAgICBmb3IgKHZhciBzaGlmdCA9IDA7IGEuaXNFdmVuKCkgJiYgYi5pc0V2ZW4oKTsgc2hpZnQrKykge1xuICAgICAgYS5pdXNocm4oMSk7XG4gICAgICBiLml1c2hybigxKTtcbiAgICB9XG5cbiAgICBkbyB7XG4gICAgICB3aGlsZSAoYS5pc0V2ZW4oKSkge1xuICAgICAgICBhLml1c2hybigxKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChiLmlzRXZlbigpKSB7XG4gICAgICAgIGIuaXVzaHJuKDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgciA9IGEuY21wKGIpO1xuICAgICAgaWYgKHIgPCAwKSB7XG4gICAgICAgIC8vIFN3YXAgYGFgIGFuZCBgYmAgdG8gbWFrZSBgYWAgYWx3YXlzIGJpZ2dlciB0aGFuIGBiYFxuICAgICAgICB2YXIgdCA9IGE7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBiID0gdDtcbiAgICAgIH0gZWxzZSBpZiAociA9PT0gMCB8fCBiLmNtcG4oMSkgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGEuaXN1YihiKTtcbiAgICB9IHdoaWxlICh0cnVlKTtcblxuICAgIHJldHVybiBiLml1c2hsbihzaGlmdCk7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IG51bWJlciBpbiB0aGUgZmllbGQgRihudW0pXG4gIEJOLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZWdjZChudW0pLmEudW1vZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc0V2ZW4gPSBmdW5jdGlvbiBpc0V2ZW4gKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uIGlzT2RkICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMTtcbiAgfTtcblxuICAvLyBBbmQgZmlyc3Qgd29yZCBhbmQgbnVtXG4gIEJOLnByb3RvdHlwZS5hbmRsbiA9IGZ1bmN0aW9uIGFuZGxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy53b3Jkc1swXSAmIG51bTtcbiAgfTtcblxuICAvLyBJbmNyZW1lbnQgYXQgdGhlIGJpdCBwb3NpdGlvbiBpbi1saW5lXG4gIEJOLnByb3RvdHlwZS5iaW5jbiA9IGZ1bmN0aW9uIGJpbmNuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicpO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHRoaXMuX2V4cGFuZChzICsgMSk7XG4gICAgICB0aGlzLndvcmRzW3NdIHw9IHE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgYml0IGFuZCBwcm9wYWdhdGUsIGlmIG5lZWRlZFxuICAgIHZhciBjYXJyeSA9IHE7XG4gICAgZm9yICh2YXIgaSA9IHM7IGNhcnJ5ICE9PSAwICYmIGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdyArPSBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+Pj4gMjY7XG4gICAgICB3ICY9IDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc1plcm8gPSBmdW5jdGlvbiBpc1plcm8gKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbXBuID0gZnVuY3Rpb24gY21wbiAobnVtKSB7XG4gICAgdmFyIG5lZ2F0aXZlID0gbnVtIDwgMDtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmICFuZWdhdGl2ZSkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG5lZ2F0aXZlKSByZXR1cm4gMTtcblxuICAgIHRoaXMuc3RyaXAoKTtcblxuICAgIHZhciByZXM7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMSkge1xuICAgICAgcmVzID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG5lZ2F0aXZlKSB7XG4gICAgICAgIG51bSA9IC1udW07XG4gICAgICB9XG5cbiAgICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmLCAnTnVtYmVyIGlzIHRvbyBiaWcnKTtcblxuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzWzBdIHwgMDtcbiAgICAgIHJlcyA9IHcgPT09IG51bSA/IDAgOiB3IDwgbnVtID8gLTEgOiAxO1xuICAgIH1cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIC1yZXMgfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gQ29tcGFyZSB0d28gbnVtYmVycyBhbmQgcmV0dXJuOlxuICAvLyAxIC0gaWYgYHRoaXNgID4gYG51bWBcbiAgLy8gMCAtIGlmIGB0aGlzYCA9PSBgbnVtYFxuICAvLyAtMSAtIGlmIGB0aGlzYCA8IGBudW1gXG4gIEJOLnByb3RvdHlwZS5jbXAgPSBmdW5jdGlvbiBjbXAgKG51bSkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIDE7XG5cbiAgICB2YXIgcmVzID0gdGhpcy51Y21wKG51bSk7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIFVuc2lnbmVkIGNvbXBhcmlzb25cbiAgQk4ucHJvdG90eXBlLnVjbXAgPSBmdW5jdGlvbiB1Y21wIChudW0pIHtcbiAgICAvLyBBdCB0aGlzIHBvaW50IGJvdGggbnVtYmVycyBoYXZlIHRoZSBzYW1lIHNpZ25cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gMTtcbiAgICBpZiAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSByZXR1cm4gLTE7XG5cbiAgICB2YXIgcmVzID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGEgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHZhciBiID0gbnVtLndvcmRzW2ldIHwgMDtcblxuICAgICAgaWYgKGEgPT09IGIpIGNvbnRpbnVlO1xuICAgICAgaWYgKGEgPCBiKSB7XG4gICAgICAgIHJlcyA9IC0xO1xuICAgICAgfSBlbHNlIGlmIChhID4gYikge1xuICAgICAgICByZXMgPSAxO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0biA9IGZ1bmN0aW9uIGd0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAxO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndCA9IGZ1bmN0aW9uIGd0IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlbiA9IGZ1bmN0aW9uIGd0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndGUgPSBmdW5jdGlvbiBndGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID49IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0biA9IGZ1bmN0aW9uIGx0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHQgPSBmdW5jdGlvbiBsdCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IC0xO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGVuID0gZnVuY3Rpb24gbHRlbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ZSA9IGZ1bmN0aW9uIGx0ZSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPD0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZXFuID0gZnVuY3Rpb24gZXFuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAwO1xuICB9O1xuXG4gIC8vXG4gIC8vIEEgcmVkdWNlIGNvbnRleHQsIGNvdWxkIGJlIHVzaW5nIG1vbnRnb21lcnkgb3Igc29tZXRoaW5nIGJldHRlciwgZGVwZW5kaW5nXG4gIC8vIG9uIHRoZSBgbWAgaXRzZWxmLlxuICAvL1xuICBCTi5yZWQgPSBmdW5jdGlvbiByZWQgKG51bSkge1xuICAgIHJldHVybiBuZXcgUmVkKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvUmVkID0gZnVuY3Rpb24gdG9SZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIHJldHVybiBjdHguY29udmVydFRvKHRoaXMpLl9mb3JjZVJlZChjdHgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tUmVkID0gZnVuY3Rpb24gZnJvbVJlZCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAnZnJvbVJlZCB3b3JrcyBvbmx5IHdpdGggbnVtYmVycyBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIHJldHVybiB0aGlzLnJlZC5jb252ZXJ0RnJvbSh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2ZvcmNlUmVkID0gZnVuY3Rpb24gX2ZvcmNlUmVkIChjdHgpIHtcbiAgICB0aGlzLnJlZCA9IGN0eDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZm9yY2VSZWQgPSBmdW5jdGlvbiBmb3JjZVJlZCAoY3R4KSB7XG4gICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkQWRkID0gZnVuY3Rpb24gcmVkQWRkIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJQWRkID0gZnVuY3Rpb24gcmVkSUFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSUFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaWFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTdWIgPSBmdW5jdGlvbiByZWRTdWIgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElTdWIgPSBmdW5jdGlvbiByZWRJU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFNobCA9IGZ1bmN0aW9uIHJlZFNobCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU2hsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zaGwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkTXVsID0gZnVuY3Rpb24gcmVkTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubXVsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElNdWwgPSBmdW5jdGlvbiByZWRJTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTcXIgPSBmdW5jdGlvbiByZWRTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FyKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3FyID0gZnVuY3Rpb24gcmVkSVNxciAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXNxcih0aGlzKTtcbiAgfTtcblxuICAvLyBTcXVhcmUgcm9vdCBvdmVyIHBcbiAgQk4ucHJvdG90eXBlLnJlZFNxcnQgPSBmdW5jdGlvbiByZWRTcXJ0ICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXJ0IHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zcXJ0KHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJbnZtID0gZnVuY3Rpb24gcmVkSW52bSAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSW52bSB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW52bSh0aGlzKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgICUgYHJlZCBtb2R1bG9gXG4gIEJOLnByb3RvdHlwZS5yZWROZWcgPSBmdW5jdGlvbiByZWROZWcgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE5lZyB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubmVnKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRQb3cgPSBmdW5jdGlvbiByZWRQb3cgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCAmJiAhbnVtLnJlZCwgJ3JlZFBvdyhub3JtYWxOdW0pJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnBvdyh0aGlzLCBudW0pO1xuICB9O1xuXG4gIC8vIFByaW1lIG51bWJlcnMgd2l0aCBlZmZpY2llbnQgcmVkdWN0aW9uXG4gIHZhciBwcmltZXMgPSB7XG4gICAgazI1NjogbnVsbCxcbiAgICBwMjI0OiBudWxsLFxuICAgIHAxOTI6IG51bGwsXG4gICAgcDI1NTE5OiBudWxsXG4gIH07XG5cbiAgLy8gUHNldWRvLU1lcnNlbm5lIHByaW1lXG4gIGZ1bmN0aW9uIE1QcmltZSAobmFtZSwgcCkge1xuICAgIC8vIFAgPSAyIF4gTiAtIEtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMucCA9IG5ldyBCTihwLCAxNik7XG4gICAgdGhpcy5uID0gdGhpcy5wLmJpdExlbmd0aCgpO1xuICAgIHRoaXMuayA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5uKS5pc3ViKHRoaXMucCk7XG5cbiAgICB0aGlzLnRtcCA9IHRoaXMuX3RtcCgpO1xuICB9XG5cbiAgTVByaW1lLnByb3RvdHlwZS5fdG1wID0gZnVuY3Rpb24gX3RtcCAoKSB7XG4gICAgdmFyIHRtcCA9IG5ldyBCTihudWxsKTtcbiAgICB0bXAud29yZHMgPSBuZXcgQXJyYXkoTWF0aC5jZWlsKHRoaXMubiAvIDEzKSk7XG4gICAgcmV0dXJuIHRtcDtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmlyZWR1Y2UgPSBmdW5jdGlvbiBpcmVkdWNlIChudW0pIHtcbiAgICAvLyBBc3N1bWVzIHRoYXQgYG51bWAgaXMgbGVzcyB0aGFuIGBQXjJgXG4gICAgLy8gbnVtID0gSEkgKiAoMiBeIE4gLSBLKSArIEhJICogSyArIExPID0gSEkgKiBLICsgTE8gKG1vZCBQKVxuICAgIHZhciByID0gbnVtO1xuICAgIHZhciBybGVuO1xuXG4gICAgZG8ge1xuICAgICAgdGhpcy5zcGxpdChyLCB0aGlzLnRtcCk7XG4gICAgICByID0gdGhpcy5pbXVsSyhyKTtcbiAgICAgIHIgPSByLmlhZGQodGhpcy50bXApO1xuICAgICAgcmxlbiA9IHIuYml0TGVuZ3RoKCk7XG4gICAgfSB3aGlsZSAocmxlbiA+IHRoaXMubik7XG5cbiAgICB2YXIgY21wID0gcmxlbiA8IHRoaXMubiA/IC0xIDogci51Y21wKHRoaXMucCk7XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgci53b3Jkc1swXSA9IDA7XG4gICAgICByLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChjbXAgPiAwKSB7XG4gICAgICByLmlzdWIodGhpcy5wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgci5zdHJpcCgpO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dCkge1xuICAgIGlucHV0Lml1c2hybih0aGlzLm4sIDAsIG91dCk7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICByZXR1cm4gbnVtLmltdWwodGhpcy5rKTtcbiAgfTtcblxuICBmdW5jdGlvbiBLMjU2ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnazI1NicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZjMmYnKTtcbiAgfVxuICBpbmhlcml0cyhLMjU2LCBNUHJpbWUpO1xuXG4gIEsyNTYucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXRwdXQpIHtcbiAgICAvLyAyNTYgPSA5ICogMjYgKyAyMlxuICAgIHZhciBtYXNrID0gMHgzZmZmZmY7XG5cbiAgICB2YXIgb3V0TGVuID0gTWF0aC5taW4oaW5wdXQubGVuZ3RoLCA5KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG91dExlbjsgaSsrKSB7XG4gICAgICBvdXRwdXQud29yZHNbaV0gPSBpbnB1dC53b3Jkc1tpXTtcbiAgICB9XG4gICAgb3V0cHV0Lmxlbmd0aCA9IG91dExlbjtcblxuICAgIGlmIChpbnB1dC5sZW5ndGggPD0gOSkge1xuICAgICAgaW5wdXQud29yZHNbMF0gPSAwO1xuICAgICAgaW5wdXQubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTaGlmdCBieSA5IGxpbWJzXG4gICAgdmFyIHByZXYgPSBpbnB1dC53b3Jkc1s5XTtcbiAgICBvdXRwdXQud29yZHNbb3V0cHV0Lmxlbmd0aCsrXSA9IHByZXYgJiBtYXNrO1xuXG4gICAgZm9yIChpID0gMTA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG5leHQgPSBpbnB1dC53b3Jkc1tpXSB8IDA7XG4gICAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gKChuZXh0ICYgbWFzaykgPDwgNCkgfCAocHJldiA+Pj4gMjIpO1xuICAgICAgcHJldiA9IG5leHQ7XG4gICAgfVxuICAgIHByZXYgPj4+PSAyMjtcbiAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gcHJldjtcbiAgICBpZiAocHJldiA9PT0gMCAmJiBpbnB1dC5sZW5ndGggPiAxMCkge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDEwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gOTtcbiAgICB9XG4gIH07XG5cbiAgSzI1Ni5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTAwMDAwM2QxID0gWyAweDQwLCAweDNkMSBdXG4gICAgbnVtLndvcmRzW251bS5sZW5ndGhdID0gMDtcbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aCArIDFdID0gMDtcbiAgICBudW0ubGVuZ3RoICs9IDI7XG5cbiAgICAvLyBib3VuZGVkIGF0OiAweDQwICogMHgzZmZmZmZmICsgMHgzZDAgPSAweDEwMDAwMDM5MFxuICAgIHZhciBsbyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gbnVtLndvcmRzW2ldIHwgMDtcbiAgICAgIGxvICs9IHcgKiAweDNkMTtcbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgbG8gPSB3ICogMHg0MCArICgobG8gLyAweDQwMDAwMDApIHwgMCk7XG4gICAgfVxuXG4gICAgLy8gRmFzdCBsZW5ndGggcmVkdWN0aW9uXG4gICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICBmdW5jdGlvbiBQMjI0ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDIyNCcsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDEnKTtcbiAgfVxuICBpbmhlcml0cyhQMjI0LCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAxOTIgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMTkyJyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZicpO1xuICB9XG4gIGluaGVyaXRzKFAxOTIsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDI1NTE5ICgpIHtcbiAgICAvLyAyIF4gMjU1IC0gMTlcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnMjU1MTknLFxuICAgICAgJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnKTtcbiAgfVxuICBpbmhlcml0cyhQMjU1MTksIE1QcmltZSk7XG5cbiAgUDI1NTE5LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxM1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoaSA9IChudW0ud29yZHNbaV0gfCAwKSAqIDB4MTMgKyBjYXJyeTtcbiAgICAgIHZhciBsbyA9IGhpICYgMHgzZmZmZmZmO1xuICAgICAgaGkgPj4+PSAyNjtcblxuICAgICAgbnVtLndvcmRzW2ldID0gbG87XG4gICAgICBjYXJyeSA9IGhpO1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgLy8gRXhwb3J0ZWQgbW9zdGx5IGZvciB0ZXN0aW5nIHB1cnBvc2VzLCB1c2UgcGxhaW4gbmFtZSBpbnN0ZWFkXG4gIEJOLl9wcmltZSA9IGZ1bmN0aW9uIHByaW1lIChuYW1lKSB7XG4gICAgLy8gQ2FjaGVkIHZlcnNpb24gb2YgcHJpbWVcbiAgICBpZiAocHJpbWVzW25hbWVdKSByZXR1cm4gcHJpbWVzW25hbWVdO1xuXG4gICAgdmFyIHByaW1lO1xuICAgIGlmIChuYW1lID09PSAnazI1NicpIHtcbiAgICAgIHByaW1lID0gbmV3IEsyNTYoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjI0Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDIyNCgpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AxOTInKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMTkyKCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDI1NTE5Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDI1NTE5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwcmltZSAnICsgbmFtZSk7XG4gICAgfVxuICAgIHByaW1lc1tuYW1lXSA9IHByaW1lO1xuXG4gICAgcmV0dXJuIHByaW1lO1xuICB9O1xuXG4gIC8vXG4gIC8vIEJhc2UgcmVkdWN0aW9uIGVuZ2luZVxuICAvL1xuICBmdW5jdGlvbiBSZWQgKG0pIHtcbiAgICBpZiAodHlwZW9mIG0gPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgcHJpbWUgPSBCTi5fcHJpbWUobSk7XG4gICAgICB0aGlzLm0gPSBwcmltZS5wO1xuICAgICAgdGhpcy5wcmltZSA9IHByaW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobS5ndG4oMSksICdtb2R1bHVzIG11c3QgYmUgZ3JlYXRlciB0aGFuIDEnKTtcbiAgICAgIHRoaXMubSA9IG07XG4gICAgICB0aGlzLnByaW1lID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkxID0gZnVuY3Rpb24gX3ZlcmlmeTEgKGEpIHtcbiAgICBhc3NlcnQoYS5uZWdhdGl2ZSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkLCAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTIgPSBmdW5jdGlvbiBfdmVyaWZ5MiAoYSwgYikge1xuICAgIGFzc2VydCgoYS5uZWdhdGl2ZSB8IGIubmVnYXRpdmUpID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQgJiYgYS5yZWQgPT09IGIucmVkLFxuICAgICAgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltb2QgPSBmdW5jdGlvbiBpbW9kIChhKSB7XG4gICAgaWYgKHRoaXMucHJpbWUpIHJldHVybiB0aGlzLnByaW1lLmlyZWR1Y2UoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICAgIHJldHVybiBhLnVtb2QodGhpcy5tKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIGEuY2xvbmUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5tLnN1YihhKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5zdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zaGwgPSBmdW5jdGlvbiBzaGwgKGEsIG51bSkge1xuICAgIHRoaXMuX3ZlcmlmeTEoYSk7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLnVzaGxuKG51bSkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5pbXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLm11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLmltdWwoYSwgYS5jbG9uZSgpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxciA9IGZ1bmN0aW9uIHNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLm11bChhLCBhKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxcnQgPSBmdW5jdGlvbiBzcXJ0IChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgbW9kMyA9IHRoaXMubS5hbmRsbigzKTtcbiAgICBhc3NlcnQobW9kMyAlIDIgPT09IDEpO1xuXG4gICAgLy8gRmFzdCBjYXNlXG4gICAgaWYgKG1vZDMgPT09IDMpIHtcbiAgICAgIHZhciBwb3cgPSB0aGlzLm0uYWRkKG5ldyBCTigxKSkuaXVzaHJuKDIpO1xuICAgICAgcmV0dXJuIHRoaXMucG93KGEsIHBvdyk7XG4gICAgfVxuXG4gICAgLy8gVG9uZWxsaS1TaGFua3MgYWxnb3JpdGhtIChUb3RhbGx5IHVub3B0aW1pemVkIGFuZCBzbG93KVxuICAgIC8vXG4gICAgLy8gRmluZCBRIGFuZCBTLCB0aGF0IFEgKiAyIF4gUyA9IChQIC0gMSlcbiAgICB2YXIgcSA9IHRoaXMubS5zdWJuKDEpO1xuICAgIHZhciBzID0gMDtcbiAgICB3aGlsZSAoIXEuaXNaZXJvKCkgJiYgcS5hbmRsbigxKSA9PT0gMCkge1xuICAgICAgcysrO1xuICAgICAgcS5pdXNocm4oMSk7XG4gICAgfVxuICAgIGFzc2VydCghcS5pc1plcm8oKSk7XG5cbiAgICB2YXIgb25lID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHZhciBuT25lID0gb25lLnJlZE5lZygpO1xuXG4gICAgLy8gRmluZCBxdWFkcmF0aWMgbm9uLXJlc2lkdWVcbiAgICAvLyBOT1RFOiBNYXggaXMgc3VjaCBiZWNhdXNlIG9mIGdlbmVyYWxpemVkIFJpZW1hbm4gaHlwb3RoZXNpcy5cbiAgICB2YXIgbHBvdyA9IHRoaXMubS5zdWJuKDEpLml1c2hybigxKTtcbiAgICB2YXIgeiA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICB6ID0gbmV3IEJOKDIgKiB6ICogeikudG9SZWQodGhpcyk7XG5cbiAgICB3aGlsZSAodGhpcy5wb3coeiwgbHBvdykuY21wKG5PbmUpICE9PSAwKSB7XG4gICAgICB6LnJlZElBZGQobk9uZSk7XG4gICAgfVxuXG4gICAgdmFyIGMgPSB0aGlzLnBvdyh6LCBxKTtcbiAgICB2YXIgciA9IHRoaXMucG93KGEsIHEuYWRkbigxKS5pdXNocm4oMSkpO1xuICAgIHZhciB0ID0gdGhpcy5wb3coYSwgcSk7XG4gICAgdmFyIG0gPSBzO1xuICAgIHdoaWxlICh0LmNtcChvbmUpICE9PSAwKSB7XG4gICAgICB2YXIgdG1wID0gdDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyB0bXAuY21wKG9uZSkgIT09IDA7IGkrKykge1xuICAgICAgICB0bXAgPSB0bXAucmVkU3FyKCk7XG4gICAgICB9XG4gICAgICBhc3NlcnQoaSA8IG0pO1xuICAgICAgdmFyIGIgPSB0aGlzLnBvdyhjLCBuZXcgQk4oMSkuaXVzaGxuKG0gLSBpIC0gMSkpO1xuXG4gICAgICByID0gci5yZWRNdWwoYik7XG4gICAgICBjID0gYi5yZWRTcXIoKTtcbiAgICAgIHQgPSB0LnJlZE11bChjKTtcbiAgICAgIG0gPSBpO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICB2YXIgaW52ID0gYS5faW52bXAodGhpcy5tKTtcbiAgICBpZiAoaW52Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpbnYubmVnYXRpdmUgPSAwO1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpLnJlZE5lZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludik7XG4gICAgfVxuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUucG93ID0gZnVuY3Rpb24gcG93IChhLCBudW0pIHtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIGlmIChudW0uY21wbigxKSA9PT0gMCkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciB3aW5kb3dTaXplID0gNDtcbiAgICB2YXIgd25kID0gbmV3IEFycmF5KDEgPDwgd2luZG93U2l6ZSk7XG4gICAgd25kWzBdID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHduZFsxXSA9IGE7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCB3bmQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHduZFtpXSA9IHRoaXMubXVsKHduZFtpIC0gMV0sIGEpO1xuICAgIH1cblxuICAgIHZhciByZXMgPSB3bmRbMF07XG4gICAgdmFyIGN1cnJlbnQgPSAwO1xuICAgIHZhciBjdXJyZW50TGVuID0gMDtcbiAgICB2YXIgc3RhcnQgPSBudW0uYml0TGVuZ3RoKCkgJSAyNjtcbiAgICBpZiAoc3RhcnQgPT09IDApIHtcbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgZm9yIChpID0gbnVtLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IG51bS53b3Jkc1tpXTtcbiAgICAgIGZvciAodmFyIGogPSBzdGFydCAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgIHZhciBiaXQgPSAod29yZCA+PiBqKSAmIDE7XG4gICAgICAgIGlmIChyZXMgIT09IHduZFswXSkge1xuICAgICAgICAgIHJlcyA9IHRoaXMuc3FyKHJlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYml0ID09PSAwICYmIGN1cnJlbnQgPT09IDApIHtcbiAgICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQgPDw9IDE7XG4gICAgICAgIGN1cnJlbnQgfD0gYml0O1xuICAgICAgICBjdXJyZW50TGVuKys7XG4gICAgICAgIGlmIChjdXJyZW50TGVuICE9PSB3aW5kb3dTaXplICYmIChpICE9PSAwIHx8IGogIT09IDApKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSB0aGlzLm11bChyZXMsIHduZFtjdXJyZW50XSk7XG4gICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICBjdXJyZW50ID0gMDtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgdmFyIHIgPSBudW0udW1vZCh0aGlzLm0pO1xuXG4gICAgcmV0dXJuIHIgPT09IG51bSA/IHIuY2xvbmUoKSA6IHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgcmVzID0gbnVtLmNsb25lKCk7XG4gICAgcmVzLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvL1xuICAvLyBNb250Z29tZXJ5IG1ldGhvZCBlbmdpbmVcbiAgLy9cblxuICBCTi5tb250ID0gZnVuY3Rpb24gbW9udCAobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBNb250KG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gTW9udCAobSkge1xuICAgIFJlZC5jYWxsKHRoaXMsIG0pO1xuXG4gICAgdGhpcy5zaGlmdCA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICBpZiAodGhpcy5zaGlmdCAlIDI2ICE9PSAwKSB7XG4gICAgICB0aGlzLnNoaWZ0ICs9IDI2IC0gKHRoaXMuc2hpZnQgJSAyNik7XG4gICAgfVxuXG4gICAgdGhpcy5yID0gbmV3IEJOKDEpLml1c2hsbih0aGlzLnNoaWZ0KTtcbiAgICB0aGlzLnIyID0gdGhpcy5pbW9kKHRoaXMuci5zcXIoKSk7XG4gICAgdGhpcy5yaW52ID0gdGhpcy5yLl9pbnZtcCh0aGlzLm0pO1xuXG4gICAgdGhpcy5taW52ID0gdGhpcy5yaW52Lm11bCh0aGlzLnIpLmlzdWJuKDEpLmRpdih0aGlzLm0pO1xuICAgIHRoaXMubWludiA9IHRoaXMubWludi51bW9kKHRoaXMucik7XG4gICAgdGhpcy5taW52ID0gdGhpcy5yLnN1Yih0aGlzLm1pbnYpO1xuICB9XG4gIGluaGVyaXRzKE1vbnQsIFJlZCk7XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5pbW9kKG51bS51c2hsbih0aGlzLnNoaWZ0KSk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHIgPSB0aGlzLmltb2QobnVtLm11bCh0aGlzLnJpbnYpKTtcbiAgICByLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSB7XG4gICAgICBhLndvcmRzWzBdID0gMDtcbiAgICAgIGEubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIHZhciB0ID0gYS5pbXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuXG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDApLl9mb3JjZVJlZCh0aGlzKTtcblxuICAgIHZhciB0ID0gYS5tdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIC8vIChBUileLTEgKiBSXjIgPSAoQV4tMSAqIFJeLTEpICogUl4yID0gQV4tMSAqIFJcbiAgICB2YXIgcmVzID0gdGhpcy5pbW9kKGEuX2ludm1wKHRoaXMubSkubXVsKHRoaXMucjIpKTtcbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcbn0pKHR5cGVvZiBtb2R1bGUgPT09ICd1bmRlZmluZWQnIHx8IG1vZHVsZSwgdGhpcyk7XG4iLCJleHBvcnQgY29uc3QgcmVzZXJ2ZWRFdmVudHMgPSBbXG4gICAgXCJzZXNzaW9uX3JlcXVlc3RcIixcbiAgICBcInNlc3Npb25fdXBkYXRlXCIsXG4gICAgXCJleGNoYW5nZV9rZXlcIixcbiAgICBcImNvbm5lY3RcIixcbiAgICBcImRpc2Nvbm5lY3RcIixcbiAgICBcImRpc3BsYXlfdXJpXCIsXG4gICAgXCJtb2RhbF9jbG9zZWRcIixcbiAgICBcInRyYW5zcG9ydF9vcGVuXCIsXG4gICAgXCJ0cmFuc3BvcnRfY2xvc2VcIixcbiAgICBcInRyYW5zcG9ydF9lcnJvclwiLFxuXTtcbmV4cG9ydCBjb25zdCBzaWduaW5nTWV0aG9kcyA9IFtcbiAgICBcImV0aF9zZW5kVHJhbnNhY3Rpb25cIixcbiAgICBcImV0aF9zaWduVHJhbnNhY3Rpb25cIixcbiAgICBcImV0aF9zaWduXCIsXG4gICAgXCJldGhfc2lnblR5cGVkRGF0YVwiLFxuICAgIFwiZXRoX3NpZ25UeXBlZERhdGFfdjFcIixcbiAgICBcImV0aF9zaWduVHlwZWREYXRhX3YyXCIsXG4gICAgXCJldGhfc2lnblR5cGVkRGF0YV92M1wiLFxuICAgIFwiZXRoX3NpZ25UeXBlZERhdGFfdjRcIixcbiAgICBcInBlcnNvbmFsX3NpZ25cIixcbl07XG5leHBvcnQgY29uc3Qgc3RhdGVNZXRob2RzID0gW1wiZXRoX2FjY291bnRzXCIsIFwiZXRoX2NoYWluSWRcIiwgXCJuZXRfdmVyc2lvblwiXTtcbmV4cG9ydCBjb25zdCBpbmZ1cmFOZXR3b3JrcyA9IHtcbiAgICAxOiBcIm1haW5uZXRcIixcbiAgICAzOiBcInJvcHN0ZW5cIixcbiAgICA0OiBcInJpbmtlYnlcIixcbiAgICA1OiBcImdvZXJsaVwiLFxuICAgIDQyOiBcImtvdmFuXCIsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCIsImltcG9ydCBCTiBmcm9tIFwiYm4uanNcIjtcbmltcG9ydCAqIGFzIGVuY29kaW5nIGZyb20gXCJAd2FsbGV0Y29ubmVjdC9lbmNvZGluZ1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRBcnJheUJ1ZmZlclRvQnVmZmVyKGFyckJ1Zikge1xuICAgIHJldHVybiBlbmNvZGluZy5hcnJheVRvQnVmZmVyKG5ldyBVaW50OEFycmF5KGFyckJ1ZikpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRBcnJheUJ1ZmZlclRvVXRmOChhcnJCdWYpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcuYXJyYXlUb1V0ZjgobmV3IFVpbnQ4QXJyYXkoYXJyQnVmKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydEFycmF5QnVmZmVyVG9IZXgoYXJyQnVmLCBub1ByZWZpeCkge1xuICAgIHJldHVybiBlbmNvZGluZy5hcnJheVRvSGV4KG5ldyBVaW50OEFycmF5KGFyckJ1ZiksICFub1ByZWZpeCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydEFycmF5QnVmZmVyVG9OdW1iZXIoYXJyQnVmKSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLmFycmF5VG9OdW1iZXIobmV3IFVpbnQ4QXJyYXkoYXJyQnVmKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29uY2F0QXJyYXlCdWZmZXJzKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcuaGV4VG9BcnJheShhcmdzLm1hcChiID0+IGVuY29kaW5nLmFycmF5VG9IZXgobmV3IFVpbnQ4QXJyYXkoYikpKS5qb2luKFwiXCIpKS5idWZmZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydEJ1ZmZlclRvQXJyYXlCdWZmZXIoYnVmKSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLmJ1ZmZlclRvQXJyYXkoYnVmKS5idWZmZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydEJ1ZmZlclRvVXRmOChidWYpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcuYnVmZmVyVG9VdGY4KGJ1Zik7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydEJ1ZmZlclRvSGV4KGJ1Ziwgbm9QcmVmaXgpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcuYnVmZmVyVG9IZXgoYnVmLCAhbm9QcmVmaXgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRCdWZmZXJUb051bWJlcihidWYpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcuYnVmZmVyVG9OdW1iZXIoYnVmKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXRCdWZmZXJzKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcuY29uY2F0QnVmZmVycyguLi5hcmdzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VXRmOFRvQXJyYXlCdWZmZXIodXRmOCkge1xuICAgIHJldHVybiBlbmNvZGluZy51dGY4VG9BcnJheSh1dGY4KS5idWZmZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydFV0ZjhUb0J1ZmZlcih1dGY4KSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLnV0ZjhUb0J1ZmZlcih1dGY4KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VXRmOFRvSGV4KHV0ZjgsIG5vUHJlZml4KSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLnV0ZjhUb0hleCh1dGY4LCAhbm9QcmVmaXgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRVdGY4VG9OdW1iZXIodXRmOCkge1xuICAgIHJldHVybiBuZXcgQk4odXRmOCwgMTApLnRvTnVtYmVyKCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydEhleFRvQnVmZmVyKGhleCkge1xuICAgIHJldHVybiBlbmNvZGluZy5oZXhUb0J1ZmZlcihoZXgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRIZXhUb0FycmF5QnVmZmVyKGhleCkge1xuICAgIHJldHVybiBlbmNvZGluZy5oZXhUb0FycmF5KGhleCkuYnVmZmVyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRIZXhUb1V0ZjgoaGV4KSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLmhleFRvVXRmOChoZXgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRIZXhUb051bWJlcihoZXgpIHtcbiAgICByZXR1cm4gbmV3IEJOKGVuY29kaW5nLnJlbW92ZUhleFByZWZpeChoZXgpLCBcImhleFwiKS50b051bWJlcigpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnROdW1iZXJUb0J1ZmZlcihudW0pIHtcbiAgICByZXR1cm4gZW5jb2RpbmcubnVtYmVyVG9CdWZmZXIobnVtKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0TnVtYmVyVG9BcnJheUJ1ZmZlcihudW0pIHtcbiAgICByZXR1cm4gZW5jb2RpbmcubnVtYmVyVG9BcnJheShudW0pLmJ1ZmZlcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0TnVtYmVyVG9VdGY4KG51bSkge1xuICAgIHJldHVybiBuZXcgQk4obnVtKS50b1N0cmluZygpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnROdW1iZXJUb0hleChudW0sIG5vUHJlZml4KSB7XG4gICAgY29uc3QgaGV4ID0gZW5jb2RpbmcucmVtb3ZlSGV4UHJlZml4KGVuY29kaW5nLnNhbml0aXplSGV4KG5ldyBCTihudW0pLnRvU3RyaW5nKDE2KSkpO1xuICAgIHJldHVybiBub1ByZWZpeCA/IGhleCA6IGVuY29kaW5nLmFkZEhleFByZWZpeChoZXgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5jb2RpbmcuanMubWFwIiwiaW1wb3J0ICogYXMgZW5jb2RpbmcgZnJvbSBcIkB3YWxsZXRjb25uZWN0L2VuY29kaW5nXCI7XG5pbXBvcnQgKiBhcyBqc29uUnBjVXRpbHMgZnJvbSBcIkB3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHNcIjtcbmltcG9ydCB7IGluZnVyYU5ldHdvcmtzIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5leHBvcnQgZnVuY3Rpb24gc2FuaXRpemVIZXgoaGV4KSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLnNhbml0aXplSGV4KGhleCk7XG59XG5leHBvcnQgZnVuY3Rpb24gYWRkSGV4UHJlZml4KGhleCkge1xuICAgIHJldHVybiBlbmNvZGluZy5hZGRIZXhQcmVmaXgoaGV4KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVIZXhQcmVmaXgoaGV4KSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLnJlbW92ZUhleFByZWZpeChoZXgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUhleExlYWRpbmdaZXJvcyhoZXgpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcucmVtb3ZlSGV4TGVhZGluZ1plcm9zKGVuY29kaW5nLmFkZEhleFByZWZpeChoZXgpKTtcbn1cbmV4cG9ydCBjb25zdCBwYXlsb2FkSWQgPSBqc29uUnBjVXRpbHMucGF5bG9hZElkO1xuZXhwb3J0IGZ1bmN0aW9uIHV1aWQoKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gKChhLCBiKSA9PiB7XG4gICAgICAgIGZvciAoYiA9IGEgPSBcIlwiOyBhKysgPCAzNjsgYiArPSAoYSAqIDUxKSAmIDUyID8gKGEgXiAxNSA/IDggXiAoTWF0aC5yYW5kb20oKSAqIChhIF4gMjAgPyAxNiA6IDQpKSA6IDQpLnRvU3RyaW5nKDE2KSA6IFwiLVwiKSB7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGI7XG4gICAgfSkoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGxvZ0RlcHJlY2F0aW9uV2FybmluZygpIHtcbiAgICBjb25zb2xlLndhcm4oXCJERVBSRUNBVElPTiBXQVJOSU5HOiBUaGlzIFdhbGxldENvbm5lY3QgY2xpZW50IGxpYnJhcnkgd2lsbCBiZSBkZXByZWNhdGVkIGluIGZhdm9yIG9mIEB3YWxsZXRjb25uZWN0L2NsaWVudC4gUGxlYXNlIGNoZWNrIGRvY3Mud2FsbGV0Y29ubmVjdC5vcmcgdG8gbGVhcm4gbW9yZSBhYm91dCB0aGlzIG1pZ3JhdGlvbiFcIik7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5mdXJhUnBjVXJsKGNoYWluSWQsIGluZnVyYUlkKSB7XG4gICAgbGV0IHJwY1VybDtcbiAgICBjb25zdCBuZXR3b3JrID0gaW5mdXJhTmV0d29ya3NbY2hhaW5JZF07XG4gICAgaWYgKG5ldHdvcmspIHtcbiAgICAgICAgcnBjVXJsID0gYGh0dHBzOi8vJHtuZXR3b3JrfS5pbmZ1cmEuaW8vdjMvJHtpbmZ1cmFJZH1gO1xuICAgIH1cbiAgICByZXR1cm4gcnBjVXJsO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFJwY1VybChjaGFpbklkLCBycGMpIHtcbiAgICBsZXQgcnBjVXJsO1xuICAgIGNvbnN0IGluZnVyYVVybCA9IGdldEluZnVyYVJwY1VybChjaGFpbklkLCBycGMuaW5mdXJhSWQpO1xuICAgIGlmIChycGMuY3VzdG9tICYmIHJwYy5jdXN0b21bY2hhaW5JZF0pIHtcbiAgICAgICAgcnBjVXJsID0gcnBjLmN1c3RvbVtjaGFpbklkXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaW5mdXJhVXJsKSB7XG4gICAgICAgIHJwY1VybCA9IGluZnVyYVVybDtcbiAgICB9XG4gICAgcmV0dXJuIHJwY1VybDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pc2MuanMubWFwIiwiaW1wb3J0IHsgZ2V0RXJyb3IsIGdldEVycm9yQnlDb2RlLCBpc1Jlc2VydmVkRXJyb3JDb2RlIH0gZnJvbSBcIi4vZXJyb3JcIjtcbmltcG9ydCB7IElOVEVSTkFMX0VSUk9SLCBTRVJWRVJfRVJST1IgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXlsb2FkSWQoKSB7XG4gICAgY29uc3QgZGF0ZSA9IERhdGUubm93KCkgKiBNYXRoLnBvdygxMCwgMyk7XG4gICAgY29uc3QgZXh0cmEgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBNYXRoLnBvdygxMCwgMykpO1xuICAgIHJldHVybiBkYXRlICsgZXh0cmE7XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0SnNvblJwY1JlcXVlc3QobWV0aG9kLCBwYXJhbXMsIGlkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaWQ6IGlkIHx8IHBheWxvYWRJZCgpLFxuICAgICAgICBqc29ucnBjOiBcIjIuMFwiLFxuICAgICAgICBtZXRob2QsXG4gICAgICAgIHBhcmFtcyxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEpzb25ScGNSZXN1bHQoaWQsIHJlc3VsdCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkLFxuICAgICAgICBqc29ucnBjOiBcIjIuMFwiLFxuICAgICAgICByZXN1bHQsXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRKc29uUnBjRXJyb3IoaWQsIGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaWQsXG4gICAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICAgIGVycm9yOiBmb3JtYXRFcnJvck1lc3NhZ2UoZXJyb3IpLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RXJyb3JNZXNzYWdlKGVycm9yKSB7XG4gICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gZ2V0RXJyb3IoSU5URVJOQUxfRVJST1IpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGVycm9yID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGVycm9yID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBnZXRFcnJvcihTRVJWRVJfRVJST1IpKSwgeyBtZXNzYWdlOiBlcnJvciB9KTtcbiAgICB9XG4gICAgaWYgKGlzUmVzZXJ2ZWRFcnJvckNvZGUoZXJyb3IuY29kZSkpIHtcbiAgICAgICAgZXJyb3IgPSBnZXRFcnJvckJ5Q29kZShlcnJvci5jb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIGVycm9yO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9ybWF0LmpzLm1hcCIsImltcG9ydCAqIGFzIGVuY29kaW5nIGZyb20gXCJAd2FsbGV0Y29ubmVjdC9lbmNvZGluZ1wiO1xuaW1wb3J0IHsgc2lnbmluZ01ldGhvZHMsIHJlc2VydmVkRXZlbnRzIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eVN0cmluZyh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gXCJcIiB8fCAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlLnRyaW0oKSA9PT0gXCJcIik7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eUFycmF5KGFycmF5KSB7XG4gICAgcmV0dXJuICEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcuaXNCdWZmZXIodmFsKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1R5cGVkQXJyYXkodmFsKSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLmlzVHlwZWRBcnJheSh2YWwpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLmlzQXJyYXlCdWZmZXIodmFsKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBlKHZhbCkge1xuICAgIHJldHVybiBlbmNvZGluZy5nZXRUeXBlKHZhbCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RW5jb2RpbmcodmFsKSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLmdldEVuY29kaW5nKHZhbCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNIZXhTdHJpbmcodmFsdWUsIGxlbmd0aCkge1xuICAgIHJldHVybiBlbmNvZGluZy5pc0hleFN0cmluZyh2YWx1ZSwgbGVuZ3RoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0pzb25ScGNTdWJzY3JpcHRpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QucGFyYW1zID09PSBcIm9iamVjdFwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSnNvblJwY1JlcXVlc3Qob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QubWV0aG9kICE9PSBcInVuZGVmaW5lZFwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSnNvblJwY1Jlc3BvbnNlU3VjY2VzcyhvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdC5yZXN1bHQgIT09IFwidW5kZWZpbmVkXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNKc29uUnBjUmVzcG9uc2VFcnJvcihvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdC5lcnJvciAhPT0gXCJ1bmRlZmluZWRcIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0ludGVybmFsRXZlbnQob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QuZXZlbnQgIT09IFwidW5kZWZpbmVkXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSZXNlcnZlZEV2ZW50KGV2ZW50KSB7XG4gICAgcmV0dXJuIHJlc2VydmVkRXZlbnRzLmluY2x1ZGVzKGV2ZW50KSB8fCBldmVudC5zdGFydHNXaXRoKFwid2NfXCIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU2lsZW50UGF5bG9hZChyZXF1ZXN0KSB7XG4gICAgaWYgKHJlcXVlc3QubWV0aG9kLnN0YXJ0c1dpdGgoXCJ3Y19cIikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChzaWduaW5nTWV0aG9kcy5pbmNsdWRlcyhyZXF1ZXN0Lm1ldGhvZCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbGlkYXRvcnMuanMubWFwIiwiaW1wb3J0IHsga2VjY2FrXzI1NiB9IGZyb20gXCJqcy1zaGEzXCI7XG5pbXBvcnQgeyByZW1vdmVIZXhQcmVmaXgsIGFkZEhleFByZWZpeCB9IGZyb20gXCJAd2FsbGV0Y29ubmVjdC9lbmNvZGluZ1wiO1xuaW1wb3J0IHsgY29udmVydFV0ZjhUb0hleCwgY29udmVydE51bWJlclRvSGV4LCBjb252ZXJ0VXRmOFRvQnVmZmVyIH0gZnJvbSBcIi4vZW5jb2RpbmdcIjtcbmltcG9ydCB7IHNhbml0aXplSGV4LCByZW1vdmVIZXhMZWFkaW5nWmVyb3MgfSBmcm9tIFwiLi9taXNjXCI7XG5pbXBvcnQgeyBpc0VtcHR5QXJyYXksIGlzSGV4U3RyaW5nLCBpc0VtcHR5U3RyaW5nIH0gZnJvbSBcIi4vdmFsaWRhdG9yc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHRvQ2hlY2tzdW1BZGRyZXNzKGFkZHJlc3MpIHtcbiAgICBhZGRyZXNzID0gcmVtb3ZlSGV4UHJlZml4KGFkZHJlc3MudG9Mb3dlckNhc2UoKSk7XG4gICAgY29uc3QgaGFzaCA9IHJlbW92ZUhleFByZWZpeChrZWNjYWtfMjU2KGNvbnZlcnRVdGY4VG9CdWZmZXIoYWRkcmVzcykpKTtcbiAgICBsZXQgY2hlY2tzdW0gPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWRkcmVzcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocGFyc2VJbnQoaGFzaFtpXSwgMTYpID4gNykge1xuICAgICAgICAgICAgY2hlY2tzdW0gKz0gYWRkcmVzc1tpXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2hlY2tzdW0gKz0gYWRkcmVzc1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYWRkSGV4UHJlZml4KGNoZWNrc3VtKTtcbn1cbmV4cG9ydCBjb25zdCBpc1ZhbGlkQWRkcmVzcyA9IChhZGRyZXNzKSA9PiB7XG4gICAgaWYgKCFhZGRyZXNzKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYWRkcmVzcy50b0xvd2VyQ2FzZSgpLnN1YnN0cmluZygwLCAyKSAhPT0gXCIweFwiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIS9eKDB4KT9bMC05YS1mXXs0MH0kL2kudGVzdChhZGRyZXNzKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVsc2UgaWYgKC9eKDB4KT9bMC05YS1mXXs0MH0kLy50ZXN0KGFkZHJlc3MpIHx8IC9eKDB4KT9bMC05QS1GXXs0MH0kLy50ZXN0KGFkZHJlc3MpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGFkZHJlc3MgPT09IHRvQ2hlY2tzdW1BZGRyZXNzKGFkZHJlc3MpO1xuICAgIH1cbn07XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VQZXJzb25hbFNpZ24ocGFyYW1zKSB7XG4gICAgaWYgKCFpc0VtcHR5QXJyYXkocGFyYW1zKSAmJiAhaXNIZXhTdHJpbmcocGFyYW1zWzBdKSkge1xuICAgICAgICBwYXJhbXNbMF0gPSBjb252ZXJ0VXRmOFRvSGV4KHBhcmFtc1swXSk7XG4gICAgfVxuICAgIHJldHVybiBwYXJhbXM7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUcmFuc2FjdGlvbkRhdGEodHhEYXRhKSB7XG4gICAgaWYgKHR5cGVvZiB0eERhdGEudHlwZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eERhdGEudHlwZSAhPT0gXCIwXCIpXG4gICAgICAgIHJldHVybiB0eERhdGE7XG4gICAgaWYgKHR5cGVvZiB0eERhdGEuZnJvbSA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhaXNWYWxpZEFkZHJlc3ModHhEYXRhLmZyb20pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVHJhbnNhY3Rpb24gb2JqZWN0IG11c3QgaW5jbHVkZSBhIHZhbGlkICdmcm9tJyB2YWx1ZS5gKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGFyc2VIZXhWYWx1ZXModmFsdWUpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiIHx8ICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIWlzRW1wdHlTdHJpbmcodmFsdWUpKSkge1xuICAgICAgICAgICAgaWYgKCFpc0hleFN0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBjb252ZXJ0TnVtYmVyVG9IZXgodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gc2FuaXRpemVIZXgodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXN1bHQgPSByZW1vdmVIZXhMZWFkaW5nWmVyb3MocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjb25zdCB0eERhdGFSUEMgPSB7XG4gICAgICAgIGZyb206IHNhbml0aXplSGV4KHR4RGF0YS5mcm9tKSxcbiAgICAgICAgdG86IHR5cGVvZiB0eERhdGEudG8gPT09IFwidW5kZWZpbmVkXCIgPyBcIlwiIDogc2FuaXRpemVIZXgodHhEYXRhLnRvKSxcbiAgICAgICAgZ2FzUHJpY2U6IHR5cGVvZiB0eERhdGEuZ2FzUHJpY2UgPT09IFwidW5kZWZpbmVkXCIgPyBcIlwiIDogcGFyc2VIZXhWYWx1ZXModHhEYXRhLmdhc1ByaWNlKSxcbiAgICAgICAgZ2FzOiB0eXBlb2YgdHhEYXRhLmdhcyA9PT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAgICAgPyB0eXBlb2YgdHhEYXRhLmdhc0xpbWl0ID09PSBcInVuZGVmaW5lZFwiXG4gICAgICAgICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgICAgICAgOiBwYXJzZUhleFZhbHVlcyh0eERhdGEuZ2FzTGltaXQpXG4gICAgICAgICAgICA6IHBhcnNlSGV4VmFsdWVzKHR4RGF0YS5nYXMpLFxuICAgICAgICB2YWx1ZTogdHlwZW9mIHR4RGF0YS52YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwiXCIgOiBwYXJzZUhleFZhbHVlcyh0eERhdGEudmFsdWUpLFxuICAgICAgICBub25jZTogdHlwZW9mIHR4RGF0YS5ub25jZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwiXCIgOiBwYXJzZUhleFZhbHVlcyh0eERhdGEubm9uY2UpLFxuICAgICAgICBkYXRhOiB0eXBlb2YgdHhEYXRhLmRhdGEgPT09IFwidW5kZWZpbmVkXCIgPyBcIlwiIDogc2FuaXRpemVIZXgodHhEYXRhLmRhdGEpIHx8IFwiMHhcIixcbiAgICB9O1xuICAgIGNvbnN0IHBydW5hYmxlID0gW1wiZ2FzUHJpY2VcIiwgXCJnYXNcIiwgXCJ2YWx1ZVwiLCBcIm5vbmNlXCJdO1xuICAgIE9iamVjdC5rZXlzKHR4RGF0YVJQQykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGlmICghdHhEYXRhUlBDW2tleV0udHJpbSgpLmxlbmd0aCAmJiBwcnVuYWJsZS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBkZWxldGUgdHhEYXRhUlBDW2tleV07XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdHhEYXRhUlBDO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXRoZXJldW0uanMubWFwIiwiaW1wb3J0ICogYXMgcXVlcnlTdHJpbmdVdGlscyBmcm9tIFwicXVlcnktc3RyaW5nXCI7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UXVlcnlTdHJpbmcodXJsKSB7XG4gICAgY29uc3QgcGF0aEVuZCA9IHVybC5pbmRleE9mKFwiP1wiKSAhPT0gLTEgPyB1cmwuaW5kZXhPZihcIj9cIikgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgcXVlcnlTdHJpbmcgPSB0eXBlb2YgcGF0aEVuZCAhPT0gXCJ1bmRlZmluZWRcIiA/IHVybC5zdWJzdHIocGF0aEVuZCkgOiBcIlwiO1xuICAgIHJldHVybiBxdWVyeVN0cmluZztcbn1cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmRUb1F1ZXJ5U3RyaW5nKHF1ZXJ5U3RyaW5nLCBuZXdRdWVyeVBhcmFtcykge1xuICAgIGxldCBxdWVyeVBhcmFtcyA9IHBhcnNlUXVlcnlTdHJpbmcocXVlcnlTdHJpbmcpO1xuICAgIHF1ZXJ5UGFyYW1zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBxdWVyeVBhcmFtcyksIG5ld1F1ZXJ5UGFyYW1zKTtcbiAgICBxdWVyeVN0cmluZyA9IGZvcm1hdFF1ZXJ5U3RyaW5nKHF1ZXJ5UGFyYW1zKTtcbiAgICByZXR1cm4gcXVlcnlTdHJpbmc7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZyhxdWVyeVN0cmluZykge1xuICAgIHJldHVybiBxdWVyeVN0cmluZ1V0aWxzLnBhcnNlKHF1ZXJ5U3RyaW5nKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRRdWVyeVN0cmluZyhxdWVyeVBhcmFtcykge1xuICAgIHJldHVybiBxdWVyeVN0cmluZ1V0aWxzLnN0cmluZ2lmeShxdWVyeVBhcmFtcyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cmwuanMubWFwIiwiY2xhc3MgTmV0d29ya01vbml0b3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXJzID0gW107XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIiwgKCkgPT4gdGhpcy50cmlnZ2VyKFwib25saW5lXCIpKTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwib2ZmbGluZVwiLCAoKSA9PiB0aGlzLnRyaWdnZXIoXCJvZmZsaW5lXCIpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvbihldmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVycy5wdXNoKHtcbiAgICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB0cmlnZ2VyKGV2ZW50KSB7XG4gICAgICAgIGxldCBldmVudEVtaXR0ZXJzID0gW107XG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgZXZlbnRFbWl0dGVycyA9IHRoaXMuX2V2ZW50RW1pdHRlcnMuZmlsdGVyKChldmVudEVtaXR0ZXIpID0+IGV2ZW50RW1pdHRlci5ldmVudCA9PT0gZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGV2ZW50RW1pdHRlcnMuZm9yRWFjaCgoZXZlbnRFbWl0dGVyKSA9PiB7XG4gICAgICAgICAgICBldmVudEVtaXR0ZXIuY2FsbGJhY2soKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgTmV0d29ya01vbml0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZXR3b3JrLmpzLm1hcCIsImltcG9ydCB7IGlzQnJvd3NlciwgZ2V0TG9jYXRpb24sIGdldFF1ZXJ5U3RyaW5nLCBkZXRlY3RFbnYsIGFwcGVuZFRvUXVlcnlTdHJpbmcsIH0gZnJvbSBcIkB3YWxsZXRjb25uZWN0L3V0aWxzXCI7XG5pbXBvcnQgTmV0d29ya01vbml0b3IgZnJvbSBcIi4vbmV0d29ya1wiO1xuY29uc3QgV1MgPSB0eXBlb2YgZ2xvYmFsLldlYlNvY2tldCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbC5XZWJTb2NrZXQgOiByZXF1aXJlKFwid3NcIik7XG5jbGFzcyBTb2NrZXRUcmFuc3BvcnQge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgdGhpcy5vcHRzID0gb3B0cztcbiAgICAgICAgdGhpcy5fcXVldWUgPSBbXTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gW107XG4gICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy5fcHJvdG9jb2wgPSBvcHRzLnByb3RvY29sO1xuICAgICAgICB0aGlzLl92ZXJzaW9uID0gb3B0cy52ZXJzaW9uO1xuICAgICAgICB0aGlzLl91cmwgPSBcIlwiO1xuICAgICAgICB0aGlzLl9uZXRNb25pdG9yID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc29ja2V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbmV4dFNvY2tldCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMgPSBvcHRzLnN1YnNjcmlwdGlvbnMgfHwgW107XG4gICAgICAgIHRoaXMuX25ldE1vbml0b3IgPSBvcHRzLm5ldE1vbml0b3IgfHwgbmV3IE5ldHdvcmtNb25pdG9yKCk7XG4gICAgICAgIGlmICghb3B0cy51cmwgfHwgdHlwZW9mIG9wdHMudXJsICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIG9yIGludmFsaWQgV2ViU29ja2V0IHVybFwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl91cmwgPSBvcHRzLnVybDtcbiAgICAgICAgdGhpcy5fbmV0TW9uaXRvci5vbihcIm9ubGluZVwiLCAoKSA9PiB0aGlzLl9zb2NrZXRDcmVhdGUoKSk7XG4gICAgfVxuICAgIHNldCByZWFkeVN0YXRlKHZhbHVlKSB7XG4gICAgfVxuICAgIGdldCByZWFkeVN0YXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc29ja2V0ID8gdGhpcy5fc29ja2V0LnJlYWR5U3RhdGUgOiAtMTtcbiAgICB9XG4gICAgc2V0IGNvbm5lY3RpbmcodmFsdWUpIHtcbiAgICB9XG4gICAgZ2V0IGNvbm5lY3RpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWR5U3RhdGUgPT09IDA7XG4gICAgfVxuICAgIHNldCBjb25uZWN0ZWQodmFsdWUpIHtcbiAgICB9XG4gICAgZ2V0IGNvbm5lY3RlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZHlTdGF0ZSA9PT0gMTtcbiAgICB9XG4gICAgc2V0IGNsb3NpbmcodmFsdWUpIHtcbiAgICB9XG4gICAgZ2V0IGNsb3NpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWR5U3RhdGUgPT09IDI7XG4gICAgfVxuICAgIHNldCBjbG9zZWQodmFsdWUpIHtcbiAgICB9XG4gICAgZ2V0IGNsb3NlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZHlTdGF0ZSA9PT0gMztcbiAgICB9XG4gICAgb3BlbigpIHtcbiAgICAgICAgdGhpcy5fc29ja2V0Q3JlYXRlKCk7XG4gICAgfVxuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLl9zb2NrZXRDbG9zZSgpO1xuICAgIH1cbiAgICBzZW5kKG1lc3NhZ2UsIHRvcGljLCBzaWxlbnQpIHtcbiAgICAgICAgaWYgKCF0b3BpYyB8fCB0eXBlb2YgdG9waWMgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3Npbmcgb3IgaW52YWxpZCB0b3BpYyBmaWVsZFwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zb2NrZXRTZW5kKHtcbiAgICAgICAgICAgIHRvcGljOiB0b3BpYyxcbiAgICAgICAgICAgIHR5cGU6IFwicHViXCIsXG4gICAgICAgICAgICBwYXlsb2FkOiBtZXNzYWdlLFxuICAgICAgICAgICAgc2lsZW50OiAhIXNpbGVudCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN1YnNjcmliZSh0b3BpYykge1xuICAgICAgICB0aGlzLl9zb2NrZXRTZW5kKHtcbiAgICAgICAgICAgIHRvcGljOiB0b3BpYyxcbiAgICAgICAgICAgIHR5cGU6IFwic3ViXCIsXG4gICAgICAgICAgICBwYXlsb2FkOiBcIlwiLFxuICAgICAgICAgICAgc2lsZW50OiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgb24oZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50cy5wdXNoKHsgZXZlbnQsIGNhbGxiYWNrIH0pO1xuICAgIH1cbiAgICBfc29ja2V0Q3JlYXRlKCkge1xuICAgICAgICBpZiAodGhpcy5fbmV4dFNvY2tldCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVybCA9IGdldFdlYlNvY2tldFVybCh0aGlzLl91cmwsIHRoaXMuX3Byb3RvY29sLCB0aGlzLl92ZXJzaW9uKTtcbiAgICAgICAgdGhpcy5fbmV4dFNvY2tldCA9IG5ldyBXUyh1cmwpO1xuICAgICAgICBpZiAoIXRoaXMuX25leHRTb2NrZXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBjcmVhdGUgc29ja2V0XCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX25leHRTb2NrZXQub25tZXNzYWdlID0gKGV2ZW50KSA9PiB0aGlzLl9zb2NrZXRSZWNlaXZlKGV2ZW50KTtcbiAgICAgICAgdGhpcy5fbmV4dFNvY2tldC5vbm9wZW4gPSAoKSA9PiB0aGlzLl9zb2NrZXRPcGVuKCk7XG4gICAgICAgIHRoaXMuX25leHRTb2NrZXQub25lcnJvciA9IChldmVudCkgPT4gdGhpcy5fc29ja2V0RXJyb3IoZXZlbnQpO1xuICAgICAgICB0aGlzLl9uZXh0U29ja2V0Lm9uY2xvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9uZXh0U29ja2V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLl9zb2NrZXRDcmVhdGUoKTtcbiAgICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBfc29ja2V0T3BlbigpIHtcbiAgICAgICAgdGhpcy5fc29ja2V0Q2xvc2UoKTtcbiAgICAgICAgdGhpcy5fc29ja2V0ID0gdGhpcy5fbmV4dFNvY2tldDtcbiAgICAgICAgdGhpcy5fbmV4dFNvY2tldCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3F1ZXVlU3Vic2NyaXB0aW9ucygpO1xuICAgICAgICB0aGlzLl9wdXNoUXVldWUoKTtcbiAgICB9XG4gICAgX3NvY2tldENsb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5fc29ja2V0KSB7XG4gICAgICAgICAgICB0aGlzLl9zb2NrZXQub25jbG9zZSA9ICgpID0+IHtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLl9zb2NrZXQuY2xvc2UoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfc29ja2V0U2VuZChzb2NrZXRNZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBKU09OLnN0cmluZ2lmeShzb2NrZXRNZXNzYWdlKTtcbiAgICAgICAgaWYgKHRoaXMuX3NvY2tldCAmJiB0aGlzLl9zb2NrZXQucmVhZHlTdGF0ZSA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy5fc29ja2V0LnNlbmQobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRUb1F1ZXVlKHNvY2tldE1lc3NhZ2UpO1xuICAgICAgICAgICAgdGhpcy5fc29ja2V0Q3JlYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgX3NvY2tldFJlY2VpdmUoZXZlbnQpIHtcbiAgICAgICAgbGV0IHNvY2tldE1lc3NhZ2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzb2NrZXRNZXNzYWdlID0gSlNPTi5wYXJzZShldmVudC5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zb2NrZXRTZW5kKHtcbiAgICAgICAgICAgIHRvcGljOiBzb2NrZXRNZXNzYWdlLnRvcGljLFxuICAgICAgICAgICAgdHlwZTogXCJhY2tcIixcbiAgICAgICAgICAgIHBheWxvYWQ6IFwiXCIsXG4gICAgICAgICAgICBzaWxlbnQ6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy5fc29ja2V0ICYmIHRoaXMuX3NvY2tldC5yZWFkeVN0YXRlID09PSAxKSB7XG4gICAgICAgICAgICBjb25zdCBldmVudHMgPSB0aGlzLl9ldmVudHMuZmlsdGVyKGV2ZW50ID0+IGV2ZW50LmV2ZW50ID09PSBcIm1lc3NhZ2VcIik7XG4gICAgICAgICAgICBpZiAoZXZlbnRzICYmIGV2ZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBldmVudHMuZm9yRWFjaChldmVudCA9PiBldmVudC5jYWxsYmFjayhzb2NrZXRNZXNzYWdlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3NvY2tldEVycm9yKGUpIHtcbiAgICAgICAgY29uc3QgZXZlbnRzID0gdGhpcy5fZXZlbnRzLmZpbHRlcihldmVudCA9PiBldmVudC5ldmVudCA9PT0gXCJlcnJvclwiKTtcbiAgICAgICAgaWYgKGV2ZW50cyAmJiBldmVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBldmVudHMuZm9yRWFjaChldmVudCA9PiBldmVudC5jYWxsYmFjayhlKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3F1ZXVlU3Vic2NyaXB0aW9ucygpIHtcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9ucyA9IHRoaXMuX3N1YnNjcmlwdGlvbnM7XG4gICAgICAgIHN1YnNjcmlwdGlvbnMuZm9yRWFjaCgodG9waWMpID0+IHRoaXMuX3F1ZXVlLnB1c2goe1xuICAgICAgICAgICAgdG9waWM6IHRvcGljLFxuICAgICAgICAgICAgdHlwZTogXCJzdWJcIixcbiAgICAgICAgICAgIHBheWxvYWQ6IFwiXCIsXG4gICAgICAgICAgICBzaWxlbnQ6IHRydWUsXG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9ucyA9IHRoaXMub3B0cy5zdWJzY3JpcHRpb25zIHx8IFtdO1xuICAgIH1cbiAgICBfc2V0VG9RdWV1ZShzb2NrZXRNZXNzYWdlKSB7XG4gICAgICAgIHRoaXMuX3F1ZXVlLnB1c2goc29ja2V0TWVzc2FnZSk7XG4gICAgfVxuICAgIF9wdXNoUXVldWUoKSB7XG4gICAgICAgIGNvbnN0IHF1ZXVlID0gdGhpcy5fcXVldWU7XG4gICAgICAgIHF1ZXVlLmZvckVhY2goKHNvY2tldE1lc3NhZ2UpID0+IHRoaXMuX3NvY2tldFNlbmQoc29ja2V0TWVzc2FnZSkpO1xuICAgICAgICB0aGlzLl9xdWV1ZSA9IFtdO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFdlYlNvY2tldFVybChfdXJsLCBwcm90b2NvbCwgdmVyc2lvbikge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3QgdXJsID0gX3VybC5zdGFydHNXaXRoKFwiaHR0cHNcIilcbiAgICAgICAgPyBfdXJsLnJlcGxhY2UoXCJodHRwc1wiLCBcIndzc1wiKVxuICAgICAgICA6IF91cmwuc3RhcnRzV2l0aChcImh0dHBcIilcbiAgICAgICAgICAgID8gX3VybC5yZXBsYWNlKFwiaHR0cFwiLCBcIndzXCIpXG4gICAgICAgICAgICA6IF91cmw7XG4gICAgY29uc3Qgc3BsaXRVcmwgPSB1cmwuc3BsaXQoXCI/XCIpO1xuICAgIGNvbnN0IHBhcmFtcyA9IGlzQnJvd3NlcigpXG4gICAgICAgID8ge1xuICAgICAgICAgICAgcHJvdG9jb2wsXG4gICAgICAgICAgICB2ZXJzaW9uLFxuICAgICAgICAgICAgZW52OiBcImJyb3dzZXJcIixcbiAgICAgICAgICAgIGhvc3Q6ICgoX2EgPSBnZXRMb2NhdGlvbigpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaG9zdCkgfHwgXCJcIixcbiAgICAgICAgfVxuICAgICAgICA6IHtcbiAgICAgICAgICAgIHByb3RvY29sLFxuICAgICAgICAgICAgdmVyc2lvbixcbiAgICAgICAgICAgIGVudjogKChfYiA9IGRldGVjdEVudigpKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubmFtZSkgfHwgXCJcIixcbiAgICAgICAgfTtcbiAgICBjb25zdCBxdWVyeVN0cmluZyA9IGFwcGVuZFRvUXVlcnlTdHJpbmcoZ2V0UXVlcnlTdHJpbmcoc3BsaXRVcmxbMV0gfHwgXCJcIiksIHBhcmFtcyk7XG4gICAgcmV0dXJuIHNwbGl0VXJsWzBdICsgXCI/XCIgKyBxdWVyeVN0cmluZztcbn1cbmV4cG9ydCBkZWZhdWx0IFNvY2tldFRyYW5zcG9ydDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImV4cG9ydCBjb25zdCBFUlJPUl9TRVNTSU9OX0NPTk5FQ1RFRCA9IFwiU2Vzc2lvbiBjdXJyZW50bHkgY29ubmVjdGVkXCI7XG5leHBvcnQgY29uc3QgRVJST1JfU0VTU0lPTl9ESVNDT05ORUNURUQgPSBcIlNlc3Npb24gY3VycmVudGx5IGRpc2Nvbm5lY3RlZFwiO1xuZXhwb3J0IGNvbnN0IEVSUk9SX1NFU1NJT05fUkVKRUNURUQgPSBcIlNlc3Npb24gUmVqZWN0ZWRcIjtcbmV4cG9ydCBjb25zdCBFUlJPUl9NSVNTSU5HX0pTT05fUlBDID0gXCJNaXNzaW5nIEpTT04gUlBDIHJlc3BvbnNlXCI7XG5leHBvcnQgY29uc3QgRVJST1JfTUlTU0lOR19SRVNVTFQgPSBgSlNPTi1SUEMgc3VjY2VzcyByZXNwb25zZSBtdXN0IGluY2x1ZGUgXCJyZXN1bHRcIiBmaWVsZGA7XG5leHBvcnQgY29uc3QgRVJST1JfTUlTU0lOR19FUlJPUiA9IGBKU09OLVJQQyBlcnJvciByZXNwb25zZSBtdXN0IGluY2x1ZGUgXCJlcnJvclwiIGZpZWxkYDtcbmV4cG9ydCBjb25zdCBFUlJPUl9NSVNTSU5HX01FVEhPRCA9IGBKU09OIFJQQyByZXF1ZXN0IG11c3QgaGF2ZSB2YWxpZCBcIm1ldGhvZFwiIHZhbHVlYDtcbmV4cG9ydCBjb25zdCBFUlJPUl9NSVNTSU5HX0lEID0gYEpTT04gUlBDIHJlcXVlc3QgbXVzdCBoYXZlIHZhbGlkIFwiaWRcIiB2YWx1ZWA7XG5leHBvcnQgY29uc3QgRVJST1JfTUlTU0lOR19SRVFVSVJFRCA9IFwiTWlzc2luZyBvbmUgb2YgdGhlIHJlcXVpcmVkIHBhcmFtZXRlcnM6IGJyaWRnZSAvIHVyaSAvIHNlc3Npb25cIjtcbmV4cG9ydCBjb25zdCBFUlJPUl9JTlZBTElEX1JFU1BPTlNFID0gXCJKU09OIFJQQyByZXNwb25zZSBmb3JtYXQgaXMgaW52YWxpZFwiO1xuZXhwb3J0IGNvbnN0IEVSUk9SX0lOVkFMSURfVVJJID0gXCJVUkkgZm9ybWF0IGlzIGludmFsaWRcIjtcbmV4cG9ydCBjb25zdCBFUlJPUl9RUkNPREVfTU9EQUxfTk9UX1BST1ZJREVEID0gXCJRUkNvZGUgTW9kYWwgbm90IHByb3ZpZGVkXCI7XG5leHBvcnQgY29uc3QgRVJST1JfUVJDT0RFX01PREFMX1VTRVJfQ0xPU0VEID0gXCJVc2VyIGNsb3NlIFFSQ29kZSBNb2RhbFwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcCIsImNvbnN0IGRvbWFpbiA9IFwid2FsbGV0Y29ubmVjdC5vcmdcIjtcbmNvbnN0IGFscGhhbnVtZXJpY2FsID0gXCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODlcIjtcbmNvbnN0IGJyaWRnZXMgPSBhbHBoYW51bWVyaWNhbC5zcGxpdChcIlwiKS5tYXAoY2hhciA9PiBgaHR0cHM6Ly8ke2NoYXJ9LmJyaWRnZS53YWxsZXRjb25uZWN0Lm9yZ2ApO1xuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RIb3N0bmFtZSh1cmwpIHtcbiAgICBsZXQgaG9zdG5hbWUgPSB1cmwuaW5kZXhPZihcIi8vXCIpID4gLTEgPyB1cmwuc3BsaXQoXCIvXCIpWzJdIDogdXJsLnNwbGl0KFwiL1wiKVswXTtcbiAgICBob3N0bmFtZSA9IGhvc3RuYW1lLnNwbGl0KFwiOlwiKVswXTtcbiAgICBob3N0bmFtZSA9IGhvc3RuYW1lLnNwbGl0KFwiP1wiKVswXTtcbiAgICByZXR1cm4gaG9zdG5hbWU7XG59XG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFJvb3REb21haW4odXJsKSB7XG4gICAgcmV0dXJuIGV4dHJhY3RIb3N0bmFtZSh1cmwpXG4gICAgICAgIC5zcGxpdChcIi5cIilcbiAgICAgICAgLnNsaWNlKC0yKVxuICAgICAgICAuam9pbihcIi5cIik7XG59XG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tQnJpZGdlSW5kZXgoKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGJyaWRnZXMubGVuZ3RoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RSYW5kb21CcmlkZ2VVcmwoKSB7XG4gICAgcmV0dXJuIGJyaWRnZXNbcmFuZG9tQnJpZGdlSW5kZXgoKV07XG59XG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkU2VsZWN0UmFuZG9tbHkodXJsKSB7XG4gICAgcmV0dXJuIGV4dHJhY3RSb290RG9tYWluKHVybCkgPT09IGRvbWFpbjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRCcmlkZ2VVcmwodXJsKSB7XG4gICAgaWYgKHNob3VsZFNlbGVjdFJhbmRvbWx5KHVybCkpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdFJhbmRvbUJyaWRnZVVybCgpO1xuICAgIH1cbiAgICByZXR1cm4gdXJsO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXJsLmpzLm1hcCIsImltcG9ydCB7IHBhcnNlUGVyc29uYWxTaWduLCBwYXJzZVRyYW5zYWN0aW9uRGF0YSwgY29udmVydEFycmF5QnVmZmVyVG9IZXgsIGNvbnZlcnRIZXhUb0FycmF5QnVmZmVyLCBnZXRDbGllbnRNZXRhLCBwYXlsb2FkSWQsIHV1aWQsIGZvcm1hdFJwY0Vycm9yLCBwYXJzZVdhbGxldENvbm5lY3RVcmksIGNvbnZlcnROdW1iZXJUb0hleCwgaXNKc29uUnBjUmVzcG9uc2VTdWNjZXNzLCBpc0pzb25ScGNSZXNwb25zZUVycm9yLCBpc1NpbGVudFBheWxvYWQsIGdldExvY2FsLCBzaWduaW5nTWV0aG9kcywgbW9iaWxlTGlua0Nob2ljZUtleSwgaXNNb2JpbGUsIHJlbW92ZUxvY2FsLCB9IGZyb20gXCJAd2FsbGV0Y29ubmVjdC91dGlsc1wiO1xuaW1wb3J0IFNvY2tldFRyYW5zcG9ydCBmcm9tIFwiQHdhbGxldGNvbm5lY3Qvc29ja2V0LXRyYW5zcG9ydFwiO1xuaW1wb3J0IHsgRVJST1JfU0VTU0lPTl9DT05ORUNURUQsIEVSUk9SX1NFU1NJT05fRElTQ09OTkVDVEVELCBFUlJPUl9TRVNTSU9OX1JFSkVDVEVELCBFUlJPUl9NSVNTSU5HX0pTT05fUlBDLCBFUlJPUl9NSVNTSU5HX1JFU1VMVCwgRVJST1JfTUlTU0lOR19FUlJPUiwgRVJST1JfTUlTU0lOR19NRVRIT0QsIEVSUk9SX01JU1NJTkdfSUQsIEVSUk9SX0lOVkFMSURfUkVTUE9OU0UsIEVSUk9SX0lOVkFMSURfVVJJLCBFUlJPUl9NSVNTSU5HX1JFUVVJUkVELCBFUlJPUl9RUkNPREVfTU9EQUxfTk9UX1BST1ZJREVELCBFUlJPUl9RUkNPREVfTU9EQUxfVVNFUl9DTE9TRUQsIH0gZnJvbSBcIi4vZXJyb3JzXCI7XG5pbXBvcnQgRXZlbnRNYW5hZ2VyIGZyb20gXCIuL2V2ZW50c1wiO1xuaW1wb3J0IFNlc3Npb25TdG9yYWdlIGZyb20gXCIuL3N0b3JhZ2VcIjtcbmltcG9ydCB7IGdldEJyaWRnZVVybCB9IGZyb20gXCIuL3VybFwiO1xuY2xhc3MgQ29ubmVjdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHRoaXMucHJvdG9jb2wgPSBcIndjXCI7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IDE7XG4gICAgICAgIHRoaXMuX2JyaWRnZSA9IFwiXCI7XG4gICAgICAgIHRoaXMuX2tleSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2NsaWVudElkID0gXCJcIjtcbiAgICAgICAgdGhpcy5fY2xpZW50TWV0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3BlZXJJZCA9IFwiXCI7XG4gICAgICAgIHRoaXMuX3BlZXJNZXRhID0gbnVsbDtcbiAgICAgICAgdGhpcy5faGFuZHNoYWtlSWQgPSAwO1xuICAgICAgICB0aGlzLl9oYW5kc2hha2VUb3BpYyA9IFwiXCI7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9hY2NvdW50cyA9IFtdO1xuICAgICAgICB0aGlzLl9jaGFpbklkID0gMDtcbiAgICAgICAgdGhpcy5fbmV0d29ya0lkID0gMDtcbiAgICAgICAgdGhpcy5fcnBjVXJsID0gXCJcIjtcbiAgICAgICAgdGhpcy5fZXZlbnRNYW5hZ2VyID0gbmV3IEV2ZW50TWFuYWdlcigpO1xuICAgICAgICB0aGlzLl9jbGllbnRNZXRhID0gZ2V0Q2xpZW50TWV0YSgpIHx8IG9wdHMuY29ubmVjdG9yT3B0cy5jbGllbnRNZXRhIHx8IG51bGw7XG4gICAgICAgIHRoaXMuX2NyeXB0b0xpYiA9IG9wdHMuY3J5cHRvTGliO1xuICAgICAgICB0aGlzLl9zZXNzaW9uU3RvcmFnZSA9IG9wdHMuc2Vzc2lvblN0b3JhZ2UgfHwgbmV3IFNlc3Npb25TdG9yYWdlKG9wdHMuY29ubmVjdG9yT3B0cy5zdG9yYWdlSWQpO1xuICAgICAgICB0aGlzLl9xcmNvZGVNb2RhbCA9IG9wdHMuY29ubmVjdG9yT3B0cy5xcmNvZGVNb2RhbDtcbiAgICAgICAgdGhpcy5fcXJjb2RlTW9kYWxPcHRpb25zID0gb3B0cy5jb25uZWN0b3JPcHRzLnFyY29kZU1vZGFsT3B0aW9ucztcbiAgICAgICAgdGhpcy5fc2lnbmluZ01ldGhvZHMgPSBbLi4uc2lnbmluZ01ldGhvZHMsIC4uLihvcHRzLmNvbm5lY3Rvck9wdHMuc2lnbmluZ01ldGhvZHMgfHwgW10pXTtcbiAgICAgICAgaWYgKCFvcHRzLmNvbm5lY3Rvck9wdHMuYnJpZGdlICYmICFvcHRzLmNvbm5lY3Rvck9wdHMudXJpICYmICFvcHRzLmNvbm5lY3Rvck9wdHMuc2Vzc2lvbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX01JU1NJTkdfUkVRVUlSRUQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRzLmNvbm5lY3Rvck9wdHMuYnJpZGdlKSB7XG4gICAgICAgICAgICB0aGlzLmJyaWRnZSA9IGdldEJyaWRnZVVybChvcHRzLmNvbm5lY3Rvck9wdHMuYnJpZGdlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0cy5jb25uZWN0b3JPcHRzLnVyaSkge1xuICAgICAgICAgICAgdGhpcy51cmkgPSBvcHRzLmNvbm5lY3Rvck9wdHMudXJpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNlc3Npb24gPSBvcHRzLmNvbm5lY3Rvck9wdHMuc2Vzc2lvbiB8fCB0aGlzLl9nZXRTdG9yYWdlU2Vzc2lvbigpO1xuICAgICAgICBpZiAoc2Vzc2lvbikge1xuICAgICAgICAgICAgdGhpcy5zZXNzaW9uID0gc2Vzc2lvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oYW5kc2hha2VJZCkge1xuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlVG9TZXNzaW9uUmVzcG9uc2UodGhpcy5oYW5kc2hha2VJZCwgXCJTZXNzaW9uIHJlcXVlc3QgcmVqZWN0ZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0ID1cbiAgICAgICAgICAgIG9wdHMudHJhbnNwb3J0IHx8XG4gICAgICAgICAgICAgICAgbmV3IFNvY2tldFRyYW5zcG9ydCh7XG4gICAgICAgICAgICAgICAgICAgIHByb3RvY29sOiB0aGlzLnByb3RvY29sLFxuICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uOiB0aGlzLnZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgIHVybDogdGhpcy5icmlkZ2UsXG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnM6IFt0aGlzLmNsaWVudElkXSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fc3Vic2NyaWJlVG9JbnRlcm5hbEV2ZW50cygpO1xuICAgICAgICB0aGlzLl9pbml0VHJhbnNwb3J0KCk7XG4gICAgICAgIGlmIChvcHRzLmNvbm5lY3Rvck9wdHMudXJpKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmVUb1Nlc3Npb25SZXF1ZXN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMucHVzaFNlcnZlck9wdHMpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlZ2lzdGVyUHVzaFNlcnZlcihvcHRzLnB1c2hTZXJ2ZXJPcHRzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXQgYnJpZGdlKHZhbHVlKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9icmlkZ2UgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGJyaWRnZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JyaWRnZTtcbiAgICB9XG4gICAgc2V0IGtleSh2YWx1ZSkge1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qga2V5ID0gY29udmVydEhleFRvQXJyYXlCdWZmZXIodmFsdWUpO1xuICAgICAgICB0aGlzLl9rZXkgPSBrZXk7XG4gICAgfVxuICAgIGdldCBrZXkoKSB7XG4gICAgICAgIGlmICh0aGlzLl9rZXkpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGNvbnZlcnRBcnJheUJ1ZmZlclRvSGV4KHRoaXMuX2tleSwgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBzZXQgY2xpZW50SWQodmFsdWUpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NsaWVudElkID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBjbGllbnRJZCgpIHtcbiAgICAgICAgbGV0IGNsaWVudElkID0gdGhpcy5fY2xpZW50SWQ7XG4gICAgICAgIGlmICghY2xpZW50SWQpIHtcbiAgICAgICAgICAgIGNsaWVudElkID0gdGhpcy5fY2xpZW50SWQgPSB1dWlkKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudElkO1xuICAgIH1cbiAgICBzZXQgcGVlcklkKHZhbHVlKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wZWVySWQgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHBlZXJJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BlZXJJZDtcbiAgICB9XG4gICAgc2V0IGNsaWVudE1ldGEodmFsdWUpIHtcbiAgICB9XG4gICAgZ2V0IGNsaWVudE1ldGEoKSB7XG4gICAgICAgIGxldCBjbGllbnRNZXRhID0gdGhpcy5fY2xpZW50TWV0YTtcbiAgICAgICAgaWYgKCFjbGllbnRNZXRhKSB7XG4gICAgICAgICAgICBjbGllbnRNZXRhID0gdGhpcy5fY2xpZW50TWV0YSA9IGdldENsaWVudE1ldGEoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xpZW50TWV0YTtcbiAgICB9XG4gICAgc2V0IHBlZXJNZXRhKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3BlZXJNZXRhID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBwZWVyTWV0YSgpIHtcbiAgICAgICAgY29uc3QgcGVlck1ldGEgPSB0aGlzLl9wZWVyTWV0YTtcbiAgICAgICAgcmV0dXJuIHBlZXJNZXRhO1xuICAgIH1cbiAgICBzZXQgaGFuZHNoYWtlVG9waWModmFsdWUpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2hhbmRzaGFrZVRvcGljID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBoYW5kc2hha2VUb3BpYygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhbmRzaGFrZVRvcGljO1xuICAgIH1cbiAgICBzZXQgaGFuZHNoYWtlSWQodmFsdWUpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2hhbmRzaGFrZUlkID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBoYW5kc2hha2VJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhbmRzaGFrZUlkO1xuICAgIH1cbiAgICBnZXQgdXJpKCkge1xuICAgICAgICBjb25zdCBfdXJpID0gdGhpcy5fZm9ybWF0VXJpKCk7XG4gICAgICAgIHJldHVybiBfdXJpO1xuICAgIH1cbiAgICBzZXQgdXJpKHZhbHVlKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGhhbmRzaGFrZVRvcGljLCBicmlkZ2UsIGtleSB9ID0gdGhpcy5fcGFyc2VVcmkodmFsdWUpO1xuICAgICAgICB0aGlzLmhhbmRzaGFrZVRvcGljID0gaGFuZHNoYWtlVG9waWM7XG4gICAgICAgIHRoaXMuYnJpZGdlID0gYnJpZGdlO1xuICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICB9XG4gICAgc2V0IGNoYWluSWQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fY2hhaW5JZCA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgY2hhaW5JZCgpIHtcbiAgICAgICAgY29uc3QgY2hhaW5JZCA9IHRoaXMuX2NoYWluSWQ7XG4gICAgICAgIHJldHVybiBjaGFpbklkO1xuICAgIH1cbiAgICBzZXQgbmV0d29ya0lkKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX25ldHdvcmtJZCA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgbmV0d29ya0lkKCkge1xuICAgICAgICBjb25zdCBuZXR3b3JrSWQgPSB0aGlzLl9uZXR3b3JrSWQ7XG4gICAgICAgIHJldHVybiBuZXR3b3JrSWQ7XG4gICAgfVxuICAgIHNldCBhY2NvdW50cyh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9hY2NvdW50cyA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgYWNjb3VudHMoKSB7XG4gICAgICAgIGNvbnN0IGFjY291bnRzID0gdGhpcy5fYWNjb3VudHM7XG4gICAgICAgIHJldHVybiBhY2NvdW50cztcbiAgICB9XG4gICAgc2V0IHJwY1VybCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9ycGNVcmwgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHJwY1VybCgpIHtcbiAgICAgICAgY29uc3QgcnBjVXJsID0gdGhpcy5fcnBjVXJsO1xuICAgICAgICByZXR1cm4gcnBjVXJsO1xuICAgIH1cbiAgICBzZXQgY29ubmVjdGVkKHZhbHVlKSB7XG4gICAgfVxuICAgIGdldCBjb25uZWN0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25uZWN0ZWQ7XG4gICAgfVxuICAgIHNldCBwZW5kaW5nKHZhbHVlKSB7XG4gICAgfVxuICAgIGdldCBwZW5kaW5nKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9oYW5kc2hha2VUb3BpYztcbiAgICB9XG4gICAgZ2V0IHNlc3Npb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb25uZWN0ZWQ6IHRoaXMuY29ubmVjdGVkLFxuICAgICAgICAgICAgYWNjb3VudHM6IHRoaXMuYWNjb3VudHMsXG4gICAgICAgICAgICBjaGFpbklkOiB0aGlzLmNoYWluSWQsXG4gICAgICAgICAgICBicmlkZ2U6IHRoaXMuYnJpZGdlLFxuICAgICAgICAgICAga2V5OiB0aGlzLmtleSxcbiAgICAgICAgICAgIGNsaWVudElkOiB0aGlzLmNsaWVudElkLFxuICAgICAgICAgICAgY2xpZW50TWV0YTogdGhpcy5jbGllbnRNZXRhLFxuICAgICAgICAgICAgcGVlcklkOiB0aGlzLnBlZXJJZCxcbiAgICAgICAgICAgIHBlZXJNZXRhOiB0aGlzLnBlZXJNZXRhLFxuICAgICAgICAgICAgaGFuZHNoYWtlSWQ6IHRoaXMuaGFuZHNoYWtlSWQsXG4gICAgICAgICAgICBoYW5kc2hha2VUb3BpYzogdGhpcy5oYW5kc2hha2VUb3BpYyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc2V0IHNlc3Npb24odmFsdWUpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Nvbm5lY3RlZCA9IHZhbHVlLmNvbm5lY3RlZDtcbiAgICAgICAgdGhpcy5hY2NvdW50cyA9IHZhbHVlLmFjY291bnRzO1xuICAgICAgICB0aGlzLmNoYWluSWQgPSB2YWx1ZS5jaGFpbklkO1xuICAgICAgICB0aGlzLmJyaWRnZSA9IHZhbHVlLmJyaWRnZTtcbiAgICAgICAgdGhpcy5rZXkgPSB2YWx1ZS5rZXk7XG4gICAgICAgIHRoaXMuY2xpZW50SWQgPSB2YWx1ZS5jbGllbnRJZDtcbiAgICAgICAgdGhpcy5jbGllbnRNZXRhID0gdmFsdWUuY2xpZW50TWV0YTtcbiAgICAgICAgdGhpcy5wZWVySWQgPSB2YWx1ZS5wZWVySWQ7XG4gICAgICAgIHRoaXMucGVlck1ldGEgPSB2YWx1ZS5wZWVyTWV0YTtcbiAgICAgICAgdGhpcy5oYW5kc2hha2VJZCA9IHZhbHVlLmhhbmRzaGFrZUlkO1xuICAgICAgICB0aGlzLmhhbmRzaGFrZVRvcGljID0gdmFsdWUuaGFuZHNoYWtlVG9waWM7XG4gICAgfVxuICAgIG9uKGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCBldmVudEVtaXR0ZXIgPSB7XG4gICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9ldmVudE1hbmFnZXIuc3Vic2NyaWJlKGV2ZW50RW1pdHRlcik7XG4gICAgfVxuICAgIG9mZihldmVudCkge1xuICAgICAgICB0aGlzLl9ldmVudE1hbmFnZXIudW5zdWJzY3JpYmUoZXZlbnQpO1xuICAgIH1cbiAgICBhc3luYyBjcmVhdGVJbnN0YW50UmVxdWVzdChpbnN0YW50UmVxdWVzdCkge1xuICAgICAgICB0aGlzLl9rZXkgPSBhd2FpdCB0aGlzLl9nZW5lcmF0ZUtleSgpO1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5fZm9ybWF0UmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwid2NfaW5zdGFudFJlcXVlc3RcIixcbiAgICAgICAgICAgIHBhcmFtczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcGVlcklkOiB0aGlzLmNsaWVudElkLFxuICAgICAgICAgICAgICAgICAgICBwZWVyTWV0YTogdGhpcy5jbGllbnRNZXRhLFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0OiB0aGlzLl9mb3JtYXRSZXF1ZXN0KGluc3RhbnRSZXF1ZXN0KSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaGFuZHNoYWtlSWQgPSByZXF1ZXN0LmlkO1xuICAgICAgICB0aGlzLmhhbmRzaGFrZVRvcGljID0gdXVpZCgpO1xuICAgICAgICB0aGlzLl9ldmVudE1hbmFnZXIudHJpZ2dlcih7XG4gICAgICAgICAgICBldmVudDogXCJkaXNwbGF5X3VyaVwiLFxuICAgICAgICAgICAgcGFyYW1zOiBbdGhpcy51cmldLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbihcIm1vZGFsX2Nsb3NlZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfUVJDT0RFX01PREFMX1VTRVJfQ0xPU0VEKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGVuZEluc3RhbnRSZXF1ZXN0ID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5raWxsU2Vzc2lvbigpO1xuICAgICAgICB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5fc2VuZENhbGxSZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGVuZEluc3RhbnRSZXF1ZXN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgZW5kSW5zdGFudFJlcXVlc3QoKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGNvbm5lY3Qob3B0cykge1xuICAgICAgICBpZiAoIXRoaXMuX3FyY29kZU1vZGFsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfUVJDT0RFX01PREFMX05PVF9QUk9WSURFRCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNoYWluSWQ6IHRoaXMuY2hhaW5JZCxcbiAgICAgICAgICAgICAgICBhY2NvdW50czogdGhpcy5hY2NvdW50cyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy5jcmVhdGVTZXNzaW9uKG9wdHMpO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbihcIm1vZGFsX2Nsb3NlZFwiLCAoKSA9PiByZWplY3QobmV3IEVycm9yKEVSUk9SX1FSQ09ERV9NT0RBTF9VU0VSX0NMT1NFRCkpKTtcbiAgICAgICAgICAgIHRoaXMub24oXCJjb25uZWN0XCIsIChlcnJvciwgcGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShwYXlsb2FkLnBhcmFtc1swXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIGNyZWF0ZVNlc3Npb24ob3B0cykge1xuICAgICAgICBpZiAodGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfU0VTU0lPTl9DT05ORUNURUQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnBlbmRpbmcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9rZXkgPSBhd2FpdCB0aGlzLl9nZW5lcmF0ZUtleSgpO1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5fZm9ybWF0UmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwid2Nfc2Vzc2lvblJlcXVlc3RcIixcbiAgICAgICAgICAgIHBhcmFtczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcGVlcklkOiB0aGlzLmNsaWVudElkLFxuICAgICAgICAgICAgICAgICAgICBwZWVyTWV0YTogdGhpcy5jbGllbnRNZXRhLFxuICAgICAgICAgICAgICAgICAgICBjaGFpbklkOiBvcHRzICYmIG9wdHMuY2hhaW5JZCA/IG9wdHMuY2hhaW5JZCA6IG51bGwsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmhhbmRzaGFrZUlkID0gcmVxdWVzdC5pZDtcbiAgICAgICAgdGhpcy5oYW5kc2hha2VUb3BpYyA9IHV1aWQoKTtcbiAgICAgICAgdGhpcy5fc2VuZFNlc3Npb25SZXF1ZXN0KHJlcXVlc3QsIFwiU2Vzc2lvbiB1cGRhdGUgcmVqZWN0ZWRcIiwge1xuICAgICAgICAgICAgdG9waWM6IHRoaXMuaGFuZHNoYWtlVG9waWMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9ldmVudE1hbmFnZXIudHJpZ2dlcih7XG4gICAgICAgICAgICBldmVudDogXCJkaXNwbGF5X3VyaVwiLFxuICAgICAgICAgICAgcGFyYW1zOiBbdGhpcy51cmldLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXBwcm92ZVNlc3Npb24oc2Vzc2lvblN0YXR1cykge1xuICAgICAgICBpZiAodGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfU0VTU0lPTl9DT05ORUNURUQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hhaW5JZCA9IHNlc3Npb25TdGF0dXMuY2hhaW5JZDtcbiAgICAgICAgdGhpcy5hY2NvdW50cyA9IHNlc3Npb25TdGF0dXMuYWNjb3VudHM7XG4gICAgICAgIHRoaXMubmV0d29ya0lkID0gc2Vzc2lvblN0YXR1cy5uZXR3b3JrSWQgfHwgMDtcbiAgICAgICAgdGhpcy5ycGNVcmwgPSBzZXNzaW9uU3RhdHVzLnJwY1VybCB8fCBcIlwiO1xuICAgICAgICBjb25zdCBzZXNzaW9uUGFyYW1zID0ge1xuICAgICAgICAgICAgYXBwcm92ZWQ6IHRydWUsXG4gICAgICAgICAgICBjaGFpbklkOiB0aGlzLmNoYWluSWQsXG4gICAgICAgICAgICBuZXR3b3JrSWQ6IHRoaXMubmV0d29ya0lkLFxuICAgICAgICAgICAgYWNjb3VudHM6IHRoaXMuYWNjb3VudHMsXG4gICAgICAgICAgICBycGNVcmw6IHRoaXMucnBjVXJsLFxuICAgICAgICAgICAgcGVlcklkOiB0aGlzLmNsaWVudElkLFxuICAgICAgICAgICAgcGVlck1ldGE6IHRoaXMuY2xpZW50TWV0YSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICAgICBpZDogdGhpcy5oYW5kc2hha2VJZCxcbiAgICAgICAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICAgICAgICByZXN1bHQ6IHNlc3Npb25QYXJhbXMsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX3NlbmRSZXNwb25zZShyZXNwb25zZSk7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3NldFN0b3JhZ2VTZXNzaW9uKCk7XG4gICAgICAgIHRoaXMuX2V2ZW50TWFuYWdlci50cmlnZ2VyKHtcbiAgICAgICAgICAgIGV2ZW50OiBcImNvbm5lY3RcIixcbiAgICAgICAgICAgIHBhcmFtczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcGVlcklkOiB0aGlzLnBlZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgcGVlck1ldGE6IHRoaXMucGVlck1ldGEsXG4gICAgICAgICAgICAgICAgICAgIGNoYWluSWQ6IHRoaXMuY2hhaW5JZCxcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudHM6IHRoaXMuYWNjb3VudHMsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZWplY3RTZXNzaW9uKHNlc3Npb25FcnJvcikge1xuICAgICAgICBpZiAodGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfU0VTU0lPTl9DT05ORUNURUQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBzZXNzaW9uRXJyb3IgJiYgc2Vzc2lvbkVycm9yLm1lc3NhZ2UgPyBzZXNzaW9uRXJyb3IubWVzc2FnZSA6IEVSUk9SX1NFU1NJT05fUkVKRUNURUQ7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gdGhpcy5fZm9ybWF0UmVzcG9uc2Uoe1xuICAgICAgICAgICAgaWQ6IHRoaXMuaGFuZHNoYWtlSWQsXG4gICAgICAgICAgICBlcnJvcjogeyBtZXNzYWdlIH0sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9zZW5kUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLl9jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZXZlbnRNYW5hZ2VyLnRyaWdnZXIoe1xuICAgICAgICAgICAgZXZlbnQ6IFwiZGlzY29ubmVjdFwiLFxuICAgICAgICAgICAgcGFyYW1zOiBbeyBtZXNzYWdlIH1dLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fcmVtb3ZlU3RvcmFnZVNlc3Npb24oKTtcbiAgICB9XG4gICAgdXBkYXRlU2Vzc2lvbihzZXNzaW9uU3RhdHVzKSB7XG4gICAgICAgIGlmICghdGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfU0VTU0lPTl9ESVNDT05ORUNURUQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hhaW5JZCA9IHNlc3Npb25TdGF0dXMuY2hhaW5JZDtcbiAgICAgICAgdGhpcy5hY2NvdW50cyA9IHNlc3Npb25TdGF0dXMuYWNjb3VudHM7XG4gICAgICAgIHRoaXMubmV0d29ya0lkID0gc2Vzc2lvblN0YXR1cy5uZXR3b3JrSWQgfHwgMDtcbiAgICAgICAgdGhpcy5ycGNVcmwgPSBzZXNzaW9uU3RhdHVzLnJwY1VybCB8fCBcIlwiO1xuICAgICAgICBjb25zdCBzZXNzaW9uUGFyYW1zID0ge1xuICAgICAgICAgICAgYXBwcm92ZWQ6IHRydWUsXG4gICAgICAgICAgICBjaGFpbklkOiB0aGlzLmNoYWluSWQsXG4gICAgICAgICAgICBuZXR3b3JrSWQ6IHRoaXMubmV0d29ya0lkLFxuICAgICAgICAgICAgYWNjb3VudHM6IHRoaXMuYWNjb3VudHMsXG4gICAgICAgICAgICBycGNVcmw6IHRoaXMucnBjVXJsLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5fZm9ybWF0UmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwid2Nfc2Vzc2lvblVwZGF0ZVwiLFxuICAgICAgICAgICAgcGFyYW1zOiBbc2Vzc2lvblBhcmFtc10sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9zZW5kU2Vzc2lvblJlcXVlc3QocmVxdWVzdCwgXCJTZXNzaW9uIHVwZGF0ZSByZWplY3RlZFwiKTtcbiAgICAgICAgdGhpcy5fZXZlbnRNYW5hZ2VyLnRyaWdnZXIoe1xuICAgICAgICAgICAgZXZlbnQ6IFwic2Vzc2lvbl91cGRhdGVcIixcbiAgICAgICAgICAgIHBhcmFtczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhaW5JZDogdGhpcy5jaGFpbklkLFxuICAgICAgICAgICAgICAgICAgICBhY2NvdW50czogdGhpcy5hY2NvdW50cyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX21hbmFnZVN0b3JhZ2VTZXNzaW9uKCk7XG4gICAgfVxuICAgIGFzeW5jIGtpbGxTZXNzaW9uKHNlc3Npb25FcnJvcikge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gc2Vzc2lvbkVycm9yID8gc2Vzc2lvbkVycm9yLm1lc3NhZ2UgOiBcIlNlc3Npb24gRGlzY29ubmVjdGVkXCI7XG4gICAgICAgIGNvbnN0IHNlc3Npb25QYXJhbXMgPSB7XG4gICAgICAgICAgICBhcHByb3ZlZDogZmFsc2UsXG4gICAgICAgICAgICBjaGFpbklkOiBudWxsLFxuICAgICAgICAgICAgbmV0d29ya0lkOiBudWxsLFxuICAgICAgICAgICAgYWNjb3VudHM6IG51bGwsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLl9mb3JtYXRSZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJ3Y19zZXNzaW9uVXBkYXRlXCIsXG4gICAgICAgICAgICBwYXJhbXM6IFtzZXNzaW9uUGFyYW1zXSxcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IHRoaXMuX3NlbmRSZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgICB0aGlzLl9oYW5kbGVTZXNzaW9uRGlzY29ubmVjdChtZXNzYWdlKTtcbiAgICB9XG4gICAgYXN5bmMgc2VuZFRyYW5zYWN0aW9uKHR4KSB7XG4gICAgICAgIGlmICghdGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfU0VTU0lPTl9ESVNDT05ORUNURUQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnNlZFR4ID0gcGFyc2VUcmFuc2FjdGlvbkRhdGEodHgpO1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5fZm9ybWF0UmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwiZXRoX3NlbmRUcmFuc2FjdGlvblwiLFxuICAgICAgICAgICAgcGFyYW1zOiBbcGFyc2VkVHhdLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5fc2VuZENhbGxSZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBhc3luYyBzaWduVHJhbnNhY3Rpb24odHgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9TRVNTSU9OX0RJU0NPTk5FQ1RFRCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyc2VkVHggPSBwYXJzZVRyYW5zYWN0aW9uRGF0YSh0eCk7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLl9mb3JtYXRSZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJldGhfc2lnblRyYW5zYWN0aW9uXCIsXG4gICAgICAgICAgICBwYXJhbXM6IFtwYXJzZWRUeF0sXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLl9zZW5kQ2FsbFJlcXVlc3QocmVxdWVzdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGFzeW5jIHNpZ25NZXNzYWdlKHBhcmFtcykge1xuICAgICAgICBpZiAoIXRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX1NFU1NJT05fRElTQ09OTkVDVEVEKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5fZm9ybWF0UmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwiZXRoX3NpZ25cIixcbiAgICAgICAgICAgIHBhcmFtcyxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX3NlbmRDYWxsUmVxdWVzdChyZXF1ZXN0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgYXN5bmMgc2lnblBlcnNvbmFsTWVzc2FnZShwYXJhbXMpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9TRVNTSU9OX0RJU0NPTk5FQ1RFRCk7XG4gICAgICAgIH1cbiAgICAgICAgcGFyYW1zID0gcGFyc2VQZXJzb25hbFNpZ24ocGFyYW1zKTtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuX2Zvcm1hdFJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcInBlcnNvbmFsX3NpZ25cIixcbiAgICAgICAgICAgIHBhcmFtcyxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX3NlbmRDYWxsUmVxdWVzdChyZXF1ZXN0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgYXN5bmMgc2lnblR5cGVkRGF0YShwYXJhbXMpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9TRVNTSU9OX0RJU0NPTk5FQ1RFRCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuX2Zvcm1hdFJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcImV0aF9zaWduVHlwZWREYXRhXCIsXG4gICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLl9zZW5kQ2FsbFJlcXVlc3QocmVxdWVzdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGFzeW5jIHVwZGF0ZUNoYWluKGNoYWluUGFyYW1zKSB7XG4gICAgICAgIGlmICghdGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTZXNzaW9uIGN1cnJlbnRseSBkaXNjb25uZWN0ZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuX2Zvcm1hdFJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcIndhbGxldF91cGRhdGVDaGFpblwiLFxuICAgICAgICAgICAgcGFyYW1zOiBbY2hhaW5QYXJhbXNdLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5fc2VuZENhbGxSZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICB1bnNhZmVTZW5kKHJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fc2VuZFJlcXVlc3QocmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX2V2ZW50TWFuYWdlci50cmlnZ2VyKHtcbiAgICAgICAgICAgIGV2ZW50OiBcImNhbGxfcmVxdWVzdF9zZW50XCIsXG4gICAgICAgICAgICBwYXJhbXM6IFt7IHJlcXVlc3QsIG9wdGlvbnMgfV0sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlVG9SZXNwb25zZShyZXF1ZXN0LmlkLCAoZXJyb3IsIHBheWxvYWQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXBheWxvYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX01JU1NJTkdfSlNPTl9SUEMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXNvbHZlKHBheWxvYWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBzZW5kQ3VzdG9tUmVxdWVzdChyZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghdGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfU0VTU0lPTl9ESVNDT05ORUNURUQpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAocmVxdWVzdC5tZXRob2QpIHtcbiAgICAgICAgICAgIGNhc2UgXCJldGhfYWNjb3VudHNcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hY2NvdW50cztcbiAgICAgICAgICAgIGNhc2UgXCJldGhfY2hhaW5JZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBjb252ZXJ0TnVtYmVyVG9IZXgodGhpcy5jaGFpbklkKTtcbiAgICAgICAgICAgIGNhc2UgXCJldGhfc2VuZFRyYW5zYWN0aW9uXCI6XG4gICAgICAgICAgICBjYXNlIFwiZXRoX3NpZ25UcmFuc2FjdGlvblwiOlxuICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LnBhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnBhcmFtc1swXSA9IHBhcnNlVHJhbnNhY3Rpb25EYXRhKHJlcXVlc3QucGFyYW1zWzBdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicGVyc29uYWxfc2lnblwiOlxuICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LnBhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnBhcmFtcyA9IHBhcnNlUGVyc29uYWxTaWduKHJlcXVlc3QucGFyYW1zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZFJlcXVlc3QgPSB0aGlzLl9mb3JtYXRSZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLl9zZW5kQ2FsbFJlcXVlc3QoZm9ybWF0dGVkUmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGFwcHJvdmVSZXF1ZXN0KHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChpc0pzb25ScGNSZXNwb25zZVN1Y2Nlc3MocmVzcG9uc2UpKSB7XG4gICAgICAgICAgICBjb25zdCBmb3JtYXR0ZWRSZXNwb25zZSA9IHRoaXMuX2Zvcm1hdFJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIHRoaXMuX3NlbmRSZXNwb25zZShmb3JtYXR0ZWRSZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfTUlTU0lOR19SRVNVTFQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlamVjdFJlcXVlc3QocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKGlzSnNvblJwY1Jlc3BvbnNlRXJyb3IocmVzcG9uc2UpKSB7XG4gICAgICAgICAgICBjb25zdCBmb3JtYXR0ZWRSZXNwb25zZSA9IHRoaXMuX2Zvcm1hdFJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIHRoaXMuX3NlbmRSZXNwb25zZShmb3JtYXR0ZWRSZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfTUlTU0lOR19FUlJPUik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdHJhbnNwb3J0Q2xvc2UoKSB7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydC5jbG9zZSgpO1xuICAgIH1cbiAgICBhc3luYyBfc2VuZFJlcXVlc3QocmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBjYWxsUmVxdWVzdCA9IHRoaXMuX2Zvcm1hdFJlcXVlc3QocmVxdWVzdCk7XG4gICAgICAgIGNvbnN0IGVuY3J5cHRpb25QYXlsb2FkID0gYXdhaXQgdGhpcy5fZW5jcnlwdChjYWxsUmVxdWVzdCk7XG4gICAgICAgIGNvbnN0IHRvcGljID0gdHlwZW9mIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudG9waWMpICE9PSBcInVuZGVmaW5lZFwiID8gb3B0aW9ucy50b3BpYyA6IHRoaXMucGVlcklkO1xuICAgICAgICBjb25zdCBwYXlsb2FkID0gSlNPTi5zdHJpbmdpZnkoZW5jcnlwdGlvblBheWxvYWQpO1xuICAgICAgICBjb25zdCBzaWxlbnQgPSB0eXBlb2YgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5mb3JjZVB1c2hOb3RpZmljYXRpb24pICE9PSBcInVuZGVmaW5lZFwiXG4gICAgICAgICAgICA/ICFvcHRpb25zLmZvcmNlUHVzaE5vdGlmaWNhdGlvblxuICAgICAgICAgICAgOiBpc1NpbGVudFBheWxvYWQoY2FsbFJlcXVlc3QpO1xuICAgICAgICB0aGlzLl90cmFuc3BvcnQuc2VuZChwYXlsb2FkLCB0b3BpYywgc2lsZW50KTtcbiAgICB9XG4gICAgYXN5bmMgX3NlbmRSZXNwb25zZShyZXNwb25zZSkge1xuICAgICAgICBjb25zdCBlbmNyeXB0aW9uUGF5bG9hZCA9IGF3YWl0IHRoaXMuX2VuY3J5cHQocmVzcG9uc2UpO1xuICAgICAgICBjb25zdCB0b3BpYyA9IHRoaXMucGVlcklkO1xuICAgICAgICBjb25zdCBwYXlsb2FkID0gSlNPTi5zdHJpbmdpZnkoZW5jcnlwdGlvblBheWxvYWQpO1xuICAgICAgICBjb25zdCBzaWxlbnQgPSB0cnVlO1xuICAgICAgICB0aGlzLl90cmFuc3BvcnQuc2VuZChwYXlsb2FkLCB0b3BpYywgc2lsZW50KTtcbiAgICB9XG4gICAgYXN5bmMgX3NlbmRTZXNzaW9uUmVxdWVzdChyZXF1ZXN0LCBlcnJvck1zZywgb3B0aW9ucykge1xuICAgICAgICB0aGlzLl9zZW5kUmVxdWVzdChyZXF1ZXN0LCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5fc3Vic2NyaWJlVG9TZXNzaW9uUmVzcG9uc2UocmVxdWVzdC5pZCwgZXJyb3JNc2cpO1xuICAgIH1cbiAgICBfc2VuZENhbGxSZXF1ZXN0KHJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fc2VuZFJlcXVlc3QocmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX2V2ZW50TWFuYWdlci50cmlnZ2VyKHtcbiAgICAgICAgICAgIGV2ZW50OiBcImNhbGxfcmVxdWVzdF9zZW50XCIsXG4gICAgICAgICAgICBwYXJhbXM6IFt7IHJlcXVlc3QsIG9wdGlvbnMgfV0sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5fc3Vic2NyaWJlVG9DYWxsUmVzcG9uc2UocmVxdWVzdC5pZCk7XG4gICAgfVxuICAgIF9mb3JtYXRSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0Lm1ldGhvZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX01JU1NJTkdfTUVUSE9EKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmb3JtYXR0ZWRSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgaWQ6IHR5cGVvZiByZXF1ZXN0LmlkID09PSBcInVuZGVmaW5lZFwiID8gcGF5bG9hZElkKCkgOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAganNvbnJwYzogXCIyLjBcIixcbiAgICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgICBwYXJhbXM6IHR5cGVvZiByZXF1ZXN0LnBhcmFtcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFtdIDogcmVxdWVzdC5wYXJhbXMsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBmb3JtYXR0ZWRSZXF1ZXN0O1xuICAgIH1cbiAgICBfZm9ybWF0UmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXNwb25zZS5pZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX01JU1NJTkdfSUQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJhc2VSZXNwb25zZSA9IHsgaWQ6IHJlc3BvbnNlLmlkLCBqc29ucnBjOiBcIjIuMFwiIH07XG4gICAgICAgIGlmIChpc0pzb25ScGNSZXNwb25zZUVycm9yKHJlc3BvbnNlKSkge1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBmb3JtYXRScGNFcnJvcihyZXNwb25zZS5lcnJvcik7XG4gICAgICAgICAgICBjb25zdCBlcnJvclJlc3BvbnNlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGJhc2VSZXNwb25zZSksIHJlc3BvbnNlKSwgeyBlcnJvciB9KTtcbiAgICAgICAgICAgIHJldHVybiBlcnJvclJlc3BvbnNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzSnNvblJwY1Jlc3BvbnNlU3VjY2VzcyhyZXNwb25zZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHN1Y2Nlc3NSZXNwb25zZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYmFzZVJlc3BvbnNlKSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHN1Y2Nlc3NSZXNwb25zZTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfSU5WQUxJRF9SRVNQT05TRSk7XG4gICAgfVxuICAgIF9oYW5kbGVTZXNzaW9uRGlzY29ubmVjdChlcnJvck1zZykge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZXJyb3JNc2cgfHwgXCJTZXNzaW9uIERpc2Nvbm5lY3RlZFwiO1xuICAgICAgICBpZiAoIXRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3FyY29kZU1vZGFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcXJjb2RlTW9kYWwuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbW92ZUxvY2FsKG1vYmlsZUxpbmtDaG9pY2VLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9oYW5kc2hha2VJZCkge1xuICAgICAgICAgICAgdGhpcy5faGFuZHNoYWtlSWQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9oYW5kc2hha2VUb3BpYykge1xuICAgICAgICAgICAgdGhpcy5faGFuZHNoYWtlVG9waWMgPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2V2ZW50TWFuYWdlci50cmlnZ2VyKHtcbiAgICAgICAgICAgIGV2ZW50OiBcImRpc2Nvbm5lY3RcIixcbiAgICAgICAgICAgIHBhcmFtczogW3sgbWVzc2FnZSB9XSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3JlbW92ZVN0b3JhZ2VTZXNzaW9uKCk7XG4gICAgICAgIHRoaXMudHJhbnNwb3J0Q2xvc2UoKTtcbiAgICB9XG4gICAgX2hhbmRsZVNlc3Npb25SZXNwb25zZShlcnJvck1zZywgc2Vzc2lvblBhcmFtcykge1xuICAgICAgICBpZiAoc2Vzc2lvblBhcmFtcykge1xuICAgICAgICAgICAgaWYgKHNlc3Npb25QYXJhbXMuYXBwcm92ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2Vzc2lvblBhcmFtcy5jaGFpbklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYWluSWQgPSBzZXNzaW9uUGFyYW1zLmNoYWluSWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb25QYXJhbXMuYWNjb3VudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWNjb3VudHMgPSBzZXNzaW9uUGFyYW1zLmFjY291bnRzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uUGFyYW1zLnBlZXJJZCAmJiAhdGhpcy5wZWVySWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGVlcklkID0gc2Vzc2lvblBhcmFtcy5wZWVySWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb25QYXJhbXMucGVlck1ldGEgJiYgIXRoaXMucGVlck1ldGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGVlck1ldGEgPSBzZXNzaW9uUGFyYW1zLnBlZXJNZXRhO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50TWFuYWdlci50cmlnZ2VyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBcImNvbm5lY3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVlcklkOiB0aGlzLnBlZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVlck1ldGE6IHRoaXMucGVlck1ldGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYWluSWQ6IHRoaXMuY2hhaW5JZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudHM6IHRoaXMuYWNjb3VudHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb25QYXJhbXMuY2hhaW5JZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFpbklkID0gc2Vzc2lvblBhcmFtcy5jaGFpbklkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uUGFyYW1zLmFjY291bnRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjY291bnRzID0gc2Vzc2lvblBhcmFtcy5hY2NvdW50cztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudE1hbmFnZXIudHJpZ2dlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudDogXCJzZXNzaW9uX3VwZGF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFpbklkOiB0aGlzLmNoYWluSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnRzOiB0aGlzLmFjY291bnRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fbWFuYWdlU3RvcmFnZVNlc3Npb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZVNlc3Npb25EaXNjb25uZWN0KGVycm9yTXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZVNlc3Npb25EaXNjb25uZWN0KGVycm9yTXNnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBfaGFuZGxlSW5jb21pbmdNZXNzYWdlcyhzb2NrZXRNZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZVRvcGljcyA9IFt0aGlzLmNsaWVudElkLCB0aGlzLmhhbmRzaGFrZVRvcGljXTtcbiAgICAgICAgaWYgKCFhY3RpdmVUb3BpY3MuaW5jbHVkZXMoc29ja2V0TWVzc2FnZS50b3BpYykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZW5jcnlwdGlvblBheWxvYWQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBlbmNyeXB0aW9uUGF5bG9hZCA9IEpTT04ucGFyc2Uoc29ja2V0TWVzc2FnZS5wYXlsb2FkKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXlsb2FkID0gYXdhaXQgdGhpcy5fZGVjcnlwdChlbmNyeXB0aW9uUGF5bG9hZCk7XG4gICAgICAgIGlmIChwYXlsb2FkKSB7XG4gICAgICAgICAgICB0aGlzLl9ldmVudE1hbmFnZXIudHJpZ2dlcihwYXlsb2FkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfc3Vic2NyaWJlVG9TZXNzaW9uUmVxdWVzdCgpIHtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0LnN1YnNjcmliZSh0aGlzLmhhbmRzaGFrZVRvcGljKTtcbiAgICB9XG4gICAgX3N1YnNjcmliZVRvUmVzcG9uc2UoaWQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMub24oYHJlc3BvbnNlOiR7aWR9YCwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBfc3Vic2NyaWJlVG9TZXNzaW9uUmVzcG9uc2UoaWQsIGVycm9yTXNnKSB7XG4gICAgICAgIHRoaXMuX3N1YnNjcmliZVRvUmVzcG9uc2UoaWQsIChlcnJvciwgcGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlU2Vzc2lvblJlc3BvbnNlKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXlsb2FkLnJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZVNlc3Npb25SZXNwb25zZShlcnJvck1zZywgcGF5bG9hZC5yZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGF5bG9hZC5lcnJvciAmJiBwYXlsb2FkLmVycm9yLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVTZXNzaW9uUmVzcG9uc2UocGF5bG9hZC5lcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZVNlc3Npb25SZXNwb25zZShlcnJvck1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfc3Vic2NyaWJlVG9DYWxsUmVzcG9uc2UoaWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZVRvUmVzcG9uc2UoaWQsIChlcnJvciwgcGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYXlsb2FkLnJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHBheWxvYWQucmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocGF5bG9hZC5lcnJvciAmJiBwYXlsb2FkLmVycm9yLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihwYXlsb2FkLmVycm9yLm1lc3NhZ2UpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoRVJST1JfSU5WQUxJRF9SRVNQT05TRSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3N1YnNjcmliZVRvSW50ZXJuYWxFdmVudHMoKSB7XG4gICAgICAgIHRoaXMub24oXCJkaXNwbGF5X3VyaVwiLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fcXJjb2RlTW9kYWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9xcmNvZGVNb2RhbC5vcGVuKHRoaXMudXJpLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50TWFuYWdlci50cmlnZ2VyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBcIm1vZGFsX2Nsb3NlZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgdGhpcy5fcXJjb2RlTW9kYWxPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub24oXCJjb25uZWN0XCIsICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9xcmNvZGVNb2RhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3FyY29kZU1vZGFsLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uKFwiY2FsbF9yZXF1ZXN0X3NlbnRcIiwgKGVycm9yLCBwYXlsb2FkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IHJlcXVlc3QgfSA9IHBheWxvYWQucGFyYW1zWzBdO1xuICAgICAgICAgICAgaWYgKGlzTW9iaWxlKCkgJiYgdGhpcy5fc2lnbmluZ01ldGhvZHMuaW5jbHVkZXMocmVxdWVzdC5tZXRob2QpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9iaWxlTGlua1VybCA9IGdldExvY2FsKG1vYmlsZUxpbmtDaG9pY2VLZXkpO1xuICAgICAgICAgICAgICAgIGlmIChtb2JpbGVMaW5rVXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gbW9iaWxlTGlua1VybC5ocmVmO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub24oXCJ3Y19zZXNzaW9uUmVxdWVzdFwiLCAoZXJyb3IsIHBheWxvYWQpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50TWFuYWdlci50cmlnZ2VyKHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IFwiZXJyb3JcIixcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogXCJTRVNTSU9OX1JFUVVFU1RfRVJST1JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvci50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaGFuZHNoYWtlSWQgPSBwYXlsb2FkLmlkO1xuICAgICAgICAgICAgdGhpcy5wZWVySWQgPSBwYXlsb2FkLnBhcmFtc1swXS5wZWVySWQ7XG4gICAgICAgICAgICB0aGlzLnBlZXJNZXRhID0gcGF5bG9hZC5wYXJhbXNbMF0ucGVlck1ldGE7XG4gICAgICAgICAgICBjb25zdCBpbnRlcm5hbFBheWxvYWQgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHBheWxvYWQpLCB7IG1ldGhvZDogXCJzZXNzaW9uX3JlcXVlc3RcIiB9KTtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50TWFuYWdlci50cmlnZ2VyKGludGVybmFsUGF5bG9hZCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uKFwid2Nfc2Vzc2lvblVwZGF0ZVwiLCAoZXJyb3IsIHBheWxvYWQpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZVNlc3Npb25SZXNwb25zZShlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZVNlc3Npb25SZXNwb25zZShcIlNlc3Npb24gZGlzY29ubmVjdGVkXCIsIHBheWxvYWQucGFyYW1zWzBdKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9pbml0VHJhbnNwb3J0KCkge1xuICAgICAgICB0aGlzLl90cmFuc3BvcnQub24oXCJtZXNzYWdlXCIsIChzb2NrZXRNZXNzYWdlKSA9PiB0aGlzLl9oYW5kbGVJbmNvbWluZ01lc3NhZ2VzKHNvY2tldE1lc3NhZ2UpKTtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0Lm9uKFwib3BlblwiLCAoKSA9PiB0aGlzLl9ldmVudE1hbmFnZXIudHJpZ2dlcih7IGV2ZW50OiBcInRyYW5zcG9ydF9vcGVuXCIsIHBhcmFtczogW10gfSkpO1xuICAgICAgICB0aGlzLl90cmFuc3BvcnQub24oXCJjbG9zZVwiLCAoKSA9PiB0aGlzLl9ldmVudE1hbmFnZXIudHJpZ2dlcih7IGV2ZW50OiBcInRyYW5zcG9ydF9jbG9zZVwiLCBwYXJhbXM6IFtdIH0pKTtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0Lm9uKFwiZXJyb3JcIiwgKCkgPT4gdGhpcy5fZXZlbnRNYW5hZ2VyLnRyaWdnZXIoe1xuICAgICAgICAgICAgZXZlbnQ6IFwidHJhbnNwb3J0X2Vycm9yXCIsXG4gICAgICAgICAgICBwYXJhbXM6IFtcIldlYnNvY2tldCBjb25uZWN0aW9uIGZhaWxlZFwiXSxcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLl90cmFuc3BvcnQub3BlbigpO1xuICAgIH1cbiAgICBfZm9ybWF0VXJpKCkge1xuICAgICAgICBjb25zdCBwcm90b2NvbCA9IHRoaXMucHJvdG9jb2w7XG4gICAgICAgIGNvbnN0IGhhbmRzaGFrZVRvcGljID0gdGhpcy5oYW5kc2hha2VUb3BpYztcbiAgICAgICAgY29uc3QgdmVyc2lvbiA9IHRoaXMudmVyc2lvbjtcbiAgICAgICAgY29uc3QgYnJpZGdlID0gZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuYnJpZGdlKTtcbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5rZXk7XG4gICAgICAgIGNvbnN0IHVyaSA9IGAke3Byb3RvY29sfToke2hhbmRzaGFrZVRvcGljfUAke3ZlcnNpb259P2JyaWRnZT0ke2JyaWRnZX0ma2V5PSR7a2V5fWA7XG4gICAgICAgIHJldHVybiB1cmk7XG4gICAgfVxuICAgIF9wYXJzZVVyaSh1cmkpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcGFyc2VXYWxsZXRDb25uZWN0VXJpKHVyaSk7XG4gICAgICAgIGlmIChyZXN1bHQucHJvdG9jb2wgPT09IHRoaXMucHJvdG9jb2wpIHtcbiAgICAgICAgICAgIGlmICghcmVzdWx0LmhhbmRzaGFrZVRvcGljKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJJbnZhbGlkIG9yIG1pc3NpbmcgaGFuZHNoYWtlVG9waWMgcGFyYW1ldGVyIHZhbHVlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaGFuZHNoYWtlVG9waWMgPSByZXN1bHQuaGFuZHNoYWtlVG9waWM7XG4gICAgICAgICAgICBpZiAoIXJlc3VsdC5icmlkZ2UpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgb3IgbWlzc2luZyBicmlkZ2UgdXJsIHBhcmFtZXRlciB2YWx1ZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGJyaWRnZSA9IGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHQuYnJpZGdlKTtcbiAgICAgICAgICAgIGlmICghcmVzdWx0LmtleSkge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiSW52YWxpZCBvciBtaXNzaW5nIGtleSBwYXJhbWV0ZXIgdmFsdWVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBrZXkgPSByZXN1bHQua2V5O1xuICAgICAgICAgICAgcmV0dXJuIHsgaGFuZHNoYWtlVG9waWMsIGJyaWRnZSwga2V5IH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfSU5WQUxJRF9VUkkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIF9nZW5lcmF0ZUtleSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NyeXB0b0xpYikge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5fY3J5cHRvTGliLmdlbmVyYXRlS2V5KCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBhc3luYyBfZW5jcnlwdChkYXRhKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuX2tleTtcbiAgICAgICAgaWYgKHRoaXMuX2NyeXB0b0xpYiAmJiBrZXkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX2NyeXB0b0xpYi5lbmNyeXB0KGRhdGEsIGtleSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBhc3luYyBfZGVjcnlwdChwYXlsb2FkKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuX2tleTtcbiAgICAgICAgaWYgKHRoaXMuX2NyeXB0b0xpYiAmJiBrZXkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX2NyeXB0b0xpYi5kZWNyeXB0KHBheWxvYWQsIGtleSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBfZ2V0U3RvcmFnZVNlc3Npb24oKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5fc2Vzc2lvblN0b3JhZ2UpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX3Nlc3Npb25TdG9yYWdlLmdldFNlc3Npb24oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBfc2V0U3RvcmFnZVNlc3Npb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9zZXNzaW9uU3RvcmFnZSkge1xuICAgICAgICAgICAgdGhpcy5fc2Vzc2lvblN0b3JhZ2Uuc2V0U2Vzc2lvbih0aGlzLnNlc3Npb24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9yZW1vdmVTdG9yYWdlU2Vzc2lvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Nlc3Npb25TdG9yYWdlKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXNzaW9uU3RvcmFnZS5yZW1vdmVTZXNzaW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX21hbmFnZVN0b3JhZ2VTZXNzaW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRTdG9yYWdlU2Vzc2lvbigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlU3RvcmFnZVNlc3Npb24oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcmVnaXN0ZXJQdXNoU2VydmVyKHB1c2hTZXJ2ZXJPcHRzKSB7XG4gICAgICAgIGlmICghcHVzaFNlcnZlck9wdHMudXJsIHx8IHR5cGVvZiBwdXNoU2VydmVyT3B0cy51cmwgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiSW52YWxpZCBvciBtaXNzaW5nIHB1c2hTZXJ2ZXJPcHRzLnVybCBwYXJhbWV0ZXIgdmFsdWVcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwdXNoU2VydmVyT3B0cy50eXBlIHx8IHR5cGVvZiBwdXNoU2VydmVyT3B0cy50eXBlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgb3IgbWlzc2luZyBwdXNoU2VydmVyT3B0cy50eXBlIHBhcmFtZXRlciB2YWx1ZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXB1c2hTZXJ2ZXJPcHRzLnRva2VuIHx8IHR5cGVvZiBwdXNoU2VydmVyT3B0cy50b2tlbiAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJJbnZhbGlkIG9yIG1pc3NpbmcgcHVzaFNlcnZlck9wdHMudG9rZW4gcGFyYW1ldGVyIHZhbHVlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHB1c2hTdWJzY3JpcHRpb24gPSB7XG4gICAgICAgICAgICBicmlkZ2U6IHRoaXMuYnJpZGdlLFxuICAgICAgICAgICAgdG9waWM6IHRoaXMuY2xpZW50SWQsXG4gICAgICAgICAgICB0eXBlOiBwdXNoU2VydmVyT3B0cy50eXBlLFxuICAgICAgICAgICAgdG9rZW46IHB1c2hTZXJ2ZXJPcHRzLnRva2VuLFxuICAgICAgICAgICAgcGVlck5hbWU6IFwiXCIsXG4gICAgICAgICAgICBsYW5ndWFnZTogcHVzaFNlcnZlck9wdHMubGFuZ3VhZ2UgfHwgXCJcIixcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbihcImNvbm5lY3RcIiwgYXN5bmMgKGVycm9yLCBwYXlsb2FkKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwdXNoU2VydmVyT3B0cy5wZWVyTWV0YSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBlZXJOYW1lID0gcGF5bG9hZC5wYXJhbXNbMF0ucGVlck1ldGEubmFtZTtcbiAgICAgICAgICAgICAgICBwdXNoU3Vic2NyaXB0aW9uLnBlZXJOYW1lID0gcGVlck5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7cHVzaFNlcnZlck9wdHMudXJsfS9uZXdgLCB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFjY2VwdDogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocHVzaFN1YnNjcmlwdGlvbiksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QganNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgICAgICBpZiAoIWpzb24uc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIkZhaWxlZCB0byByZWdpc3RlciBpbiBQdXNoIFNlcnZlclwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIkZhaWxlZCB0byByZWdpc3RlciBpbiBQdXNoIFNlcnZlclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgQ29ubmVjdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0IHsgTEVOR1RIXzEsIExFTkdUSF8zMiwgTEVOR1RIXzE2LCBMRU5HVEhfMjU2IH0gZnJvbSBcIi4vbGVuZ3RoXCI7XG5leHBvcnQgY29uc3QgQUVTX0xFTkdUSCA9IExFTkdUSF8yNTY7XG5leHBvcnQgY29uc3QgSE1BQ19MRU5HVEggPSBMRU5HVEhfMjU2O1xuZXhwb3J0IGNvbnN0IEFFU19CUk9XU0VSX0FMR08gPSBcIkFFUy1DQkNcIjtcbmV4cG9ydCBjb25zdCBITUFDX0JST1dTRVJfQUxHTyA9IGBTSEEtJHtBRVNfTEVOR1RIfWA7XG5leHBvcnQgY29uc3QgSE1BQ19CUk9XU0VSID0gXCJITUFDXCI7XG5leHBvcnQgY29uc3QgU0hBMjU2X0JST1dTRVJfQUxHTyA9IFwiU0hBLTI1NlwiO1xuZXhwb3J0IGNvbnN0IFNIQTUxMl9CUk9XU0VSX0FMR08gPSBcIlNIQS01MTJcIjtcbmV4cG9ydCBjb25zdCBBRVNfTk9ERV9BTEdPID0gYGFlcy0ke0FFU19MRU5HVEh9LWNiY2A7XG5leHBvcnQgY29uc3QgSE1BQ19OT0RFX0FMR08gPSBgc2hhJHtITUFDX0xFTkdUSH1gO1xuZXhwb3J0IGNvbnN0IFNIQTI1Nl9OT0RFX0FMR08gPSBcInNoYTI1NlwiO1xuZXhwb3J0IGNvbnN0IFNIQTUxMl9OT0RFX0FMR08gPSBcInNoYTUxMlwiO1xuZXhwb3J0IGNvbnN0IFJJUEVNRDE2MF9OT0RFX0FMR08gPSBcInJpcGVtZDE2MFwiO1xuZXhwb3J0IGNvbnN0IFBSRUZJWF9MRU5HVEggPSBMRU5HVEhfMTtcbmV4cG9ydCBjb25zdCBLRVlfTEVOR1RIID0gTEVOR1RIXzMyO1xuZXhwb3J0IGNvbnN0IElWX0xFTkdUSCA9IExFTkdUSF8xNjtcbmV4cG9ydCBjb25zdCBNQUNfTEVOR1RIID0gTEVOR1RIXzMyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdC5qcy5tYXAiLCJpbXBvcnQgKiBhcyBlbnYgZnJvbSBcIkB3YWxsZXRjb25uZWN0L2Vudmlyb25tZW50XCI7XG5pbXBvcnQgeyBFTkNSWVBUX09QLCBERUNSWVBUX09QLCBTSUdOX09QLCBWRVJJRllfT1AsIEFFU19CUk9XU0VSX0FMR08sIEFFU19MRU5HVEgsIEhNQUNfQlJPV1NFUl9BTEdPLCBITUFDX0JST1dTRVIsIEhNQUNfTEVOR1RILCBTSEEyNTZfQlJPV1NFUl9BTEdPLCBTSEE1MTJfQlJPV1NFUl9BTEdPLCBMRU5HVEhfNTEyLCB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGdvKHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZSA9PT0gQUVTX0JST1dTRVJfQUxHT1xuICAgICAgICA/IHsgbGVuZ3RoOiBBRVNfTEVOR1RILCBuYW1lOiBBRVNfQlJPV1NFUl9BTEdPIH1cbiAgICAgICAgOiB7XG4gICAgICAgICAgICBoYXNoOiB7IG5hbWU6IEhNQUNfQlJPV1NFUl9BTEdPIH0sXG4gICAgICAgICAgICBuYW1lOiBITUFDX0JST1dTRVIsXG4gICAgICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0T3BzKHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZSA9PT0gQUVTX0JST1dTRVJfQUxHT1xuICAgICAgICA/IFtFTkNSWVBUX09QLCBERUNSWVBUX09QXVxuICAgICAgICA6IFtTSUdOX09QLCBWRVJJRllfT1BdO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJyb3dzZXJFeHBvcnRLZXkoY3J5cHRvS2V5LCB0eXBlID0gQUVTX0JST1dTRVJfQUxHTykge1xuICAgIGNvbnN0IHN1YnRsZSA9IGVudi5nZXRTdWJ0bGVDcnlwdG8oKTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgc3VidGxlLmV4cG9ydEtleShcInJhd1wiLCBjcnlwdG9LZXkpKTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBicm93c2VySW1wb3J0S2V5KGJ1ZmZlciwgdHlwZSA9IEFFU19CUk9XU0VSX0FMR08pIHtcbiAgICByZXR1cm4gZW52LmdldFN1YnRsZUNyeXB0bygpLmltcG9ydEtleShcInJhd1wiLCBidWZmZXIsIGdldEFsZ28odHlwZSksIHRydWUsIGdldE9wcyh0eXBlKSk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYnJvd3NlckFlc0VuY3J5cHQoaXYsIGtleSwgZGF0YSkge1xuICAgIGNvbnN0IHN1YnRsZSA9IGVudi5nZXRTdWJ0bGVDcnlwdG8oKTtcbiAgICBjb25zdCBjcnlwdG9LZXkgPSBhd2FpdCBicm93c2VySW1wb3J0S2V5KGtleSwgQUVTX0JST1dTRVJfQUxHTyk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3VidGxlLmVuY3J5cHQoe1xuICAgICAgICBpdixcbiAgICAgICAgbmFtZTogQUVTX0JST1dTRVJfQUxHTyxcbiAgICB9LCBjcnlwdG9LZXksIGRhdGEpO1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShyZXN1bHQpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJyb3dzZXJBZXNEZWNyeXB0KGl2LCBrZXksIGRhdGEpIHtcbiAgICBjb25zdCBzdWJ0bGUgPSBlbnYuZ2V0U3VidGxlQ3J5cHRvKCk7XG4gICAgY29uc3QgY3J5cHRvS2V5ID0gYXdhaXQgYnJvd3NlckltcG9ydEtleShrZXksIEFFU19CUk9XU0VSX0FMR08pO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN1YnRsZS5kZWNyeXB0KHtcbiAgICAgICAgaXYsXG4gICAgICAgIG5hbWU6IEFFU19CUk9XU0VSX0FMR08sXG4gICAgfSwgY3J5cHRvS2V5LCBkYXRhKTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkocmVzdWx0KTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBicm93c2VySG1hY1NoYTI1NlNpZ24oa2V5LCBkYXRhKSB7XG4gICAgY29uc3Qgc3VidGxlID0gZW52LmdldFN1YnRsZUNyeXB0bygpO1xuICAgIGNvbnN0IGNyeXB0b0tleSA9IGF3YWl0IGJyb3dzZXJJbXBvcnRLZXkoa2V5LCBITUFDX0JST1dTRVIpO1xuICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IHN1YnRsZS5zaWduKHtcbiAgICAgICAgbGVuZ3RoOiBITUFDX0xFTkdUSCxcbiAgICAgICAgbmFtZTogSE1BQ19CUk9XU0VSLFxuICAgIH0sIGNyeXB0b0tleSwgZGF0YSk7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYnJvd3NlckhtYWNTaGE1MTJTaWduKGtleSwgZGF0YSkge1xuICAgIGNvbnN0IHN1YnRsZSA9IGVudi5nZXRTdWJ0bGVDcnlwdG8oKTtcbiAgICBjb25zdCBjcnlwdG9LZXkgPSBhd2FpdCBicm93c2VySW1wb3J0S2V5KGtleSwgSE1BQ19CUk9XU0VSKTtcbiAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCBzdWJ0bGUuc2lnbih7XG4gICAgICAgIGxlbmd0aDogTEVOR1RIXzUxMixcbiAgICAgICAgbmFtZTogSE1BQ19CUk9XU0VSLFxuICAgIH0sIGNyeXB0b0tleSwgZGF0YSk7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYnJvd3NlclNoYTI1NihkYXRhKSB7XG4gICAgY29uc3Qgc3VidGxlID0gZW52LmdldFN1YnRsZUNyeXB0bygpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN1YnRsZS5kaWdlc3Qoe1xuICAgICAgICBuYW1lOiBTSEEyNTZfQlJPV1NFUl9BTEdPLFxuICAgIH0sIGRhdGEpO1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShyZXN1bHQpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJyb3dzZXJTaGE1MTIoZGF0YSkge1xuICAgIGNvbnN0IHN1YnRsZSA9IGVudi5nZXRTdWJ0bGVDcnlwdG8oKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdWJ0bGUuZGlnZXN0KHtcbiAgICAgICAgbmFtZTogU0hBNTEyX0JST1dTRVJfQUxHTyxcbiAgICB9LCBkYXRhKTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkocmVzdWx0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJyb3dzZXIuanMubWFwIiwiZXhwb3J0IGNvbnN0IExFTkdUSF8wID0gMDtcbmV4cG9ydCBjb25zdCBMRU5HVEhfMSA9IDE7XG5leHBvcnQgY29uc3QgTEVOR1RIXzE2ID0gMTY7XG5leHBvcnQgY29uc3QgTEVOR1RIXzMyID0gMzI7XG5leHBvcnQgY29uc3QgTEVOR1RIXzY0ID0gNjQ7XG5leHBvcnQgY29uc3QgTEVOR1RIXzEyOCA9IDEyODtcbmV4cG9ydCBjb25zdCBMRU5HVEhfMjU2ID0gMjU2O1xuZXhwb3J0IGNvbnN0IExFTkdUSF81MTIgPSA1MTI7XG5leHBvcnQgY29uc3QgTEVOR1RIXzEwMjQgPSAxMDI0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGVuZ3RoLmpzLm1hcCIsImV4cG9ydCBjb25zdCBFTkNSWVBUX09QID0gXCJlbmNyeXB0XCI7XG5leHBvcnQgY29uc3QgREVDUllQVF9PUCA9IFwiZGVjcnlwdFwiO1xuZXhwb3J0IGNvbnN0IFNJR05fT1AgPSBcInNpZ25cIjtcbmV4cG9ydCBjb25zdCBWRVJJRllfT1AgPSBcInZlcmlmeVwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3BlcmF0aW9ucy5qcy5tYXAiLCJpbXBvcnQgeyBicm93c2VySG1hY1NoYTI1NlNpZ24sIGJyb3dzZXJIbWFjU2hhNTEyU2lnbiB9IGZyb20gXCIuLi9saWIvYnJvd3NlclwiO1xuaW1wb3J0IHsgaXNDb25zdGFudFRpbWUgfSBmcm9tIFwiLi4vaGVscGVyc1wiO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhtYWNTaGEyNTZTaWduKGtleSwgbXNnKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYnJvd3NlckhtYWNTaGEyNTZTaWduKGtleSwgbXNnKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhtYWNTaGEyNTZWZXJpZnkoa2V5LCBtc2csIHNpZykge1xuICAgIGNvbnN0IGV4cGVjdGVkU2lnID0gYXdhaXQgYnJvd3NlckhtYWNTaGEyNTZTaWduKGtleSwgbXNnKTtcbiAgICBjb25zdCByZXN1bHQgPSBpc0NvbnN0YW50VGltZShleHBlY3RlZFNpZywgc2lnKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhtYWNTaGE1MTJTaWduKGtleSwgbXNnKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYnJvd3NlckhtYWNTaGE1MTJTaWduKGtleSwgbXNnKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhtYWNTaGE1MTJWZXJpZnkoa2V5LCBtc2csIHNpZykge1xuICAgIGNvbnN0IGV4cGVjdGVkU2lnID0gYXdhaXQgYnJvd3NlckhtYWNTaGE1MTJTaWduKGtleSwgbXNnKTtcbiAgICBjb25zdCByZXN1bHQgPSBpc0NvbnN0YW50VGltZShleHBlY3RlZFNpZywgc2lnKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aG1hYy5qcy5tYXAiLCJpbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSBcIkB3YWxsZXRjb25uZWN0L2NyeXB0b1wiO1xuaW1wb3J0ICogYXMgZW5jb2RpbmcgZnJvbSBcIkB3YWxsZXRjb25uZWN0L2VuY29kaW5nXCI7XG5pbXBvcnQgeyBjb252ZXJ0QXJyYXlCdWZmZXJUb0J1ZmZlciwgY29udmVydEJ1ZmZlclRvQXJyYXlCdWZmZXIgfSBmcm9tIFwiQHdhbGxldGNvbm5lY3QvdXRpbHNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUtleShsZW5ndGgpIHtcbiAgICBjb25zdCBfbGVuZ3RoID0gKGxlbmd0aCB8fCAyNTYpIC8gODtcbiAgICBjb25zdCBieXRlcyA9IGNyeXB0by5yYW5kb21CeXRlcyhfbGVuZ3RoKTtcbiAgICBjb25zdCByZXN1bHQgPSBjb252ZXJ0QnVmZmVyVG9BcnJheUJ1ZmZlcihlbmNvZGluZy5hcnJheVRvQnVmZmVyKGJ5dGVzKSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2ZXJpZnlIbWFjKHBheWxvYWQsIGtleSkge1xuICAgIGNvbnN0IGNpcGhlclRleHQgPSBlbmNvZGluZy5oZXhUb0FycmF5KHBheWxvYWQuZGF0YSk7XG4gICAgY29uc3QgaXYgPSBlbmNvZGluZy5oZXhUb0FycmF5KHBheWxvYWQuaXYpO1xuICAgIGNvbnN0IGhtYWMgPSBlbmNvZGluZy5oZXhUb0FycmF5KHBheWxvYWQuaG1hYyk7XG4gICAgY29uc3QgaG1hY0hleCA9IGVuY29kaW5nLmFycmF5VG9IZXgoaG1hYywgZmFsc2UpO1xuICAgIGNvbnN0IHVuc2lnbmVkID0gZW5jb2RpbmcuY29uY2F0QXJyYXlzKGNpcGhlclRleHQsIGl2KTtcbiAgICBjb25zdCBjaG1hYyA9IGF3YWl0IGNyeXB0by5obWFjU2hhMjU2U2lnbihrZXksIHVuc2lnbmVkKTtcbiAgICBjb25zdCBjaG1hY0hleCA9IGVuY29kaW5nLmFycmF5VG9IZXgoY2htYWMsIGZhbHNlKTtcbiAgICBpZiAoZW5jb2RpbmcucmVtb3ZlSGV4UHJlZml4KGhtYWNIZXgpID09PSBlbmNvZGluZy5yZW1vdmVIZXhQcmVmaXgoY2htYWNIZXgpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZW5jcnlwdChkYXRhLCBrZXksIHByb3ZpZGVkSXYpIHtcbiAgICBjb25zdCBfa2V5ID0gZW5jb2RpbmcuYnVmZmVyVG9BcnJheShjb252ZXJ0QXJyYXlCdWZmZXJUb0J1ZmZlcihrZXkpKTtcbiAgICBjb25zdCBpdkFycmF5QnVmZmVyID0gcHJvdmlkZWRJdiB8fCAoYXdhaXQgZ2VuZXJhdGVLZXkoMTI4KSk7XG4gICAgY29uc3QgaXYgPSBlbmNvZGluZy5idWZmZXJUb0FycmF5KGNvbnZlcnRBcnJheUJ1ZmZlclRvQnVmZmVyKGl2QXJyYXlCdWZmZXIpKTtcbiAgICBjb25zdCBpdkhleCA9IGVuY29kaW5nLmFycmF5VG9IZXgoaXYsIGZhbHNlKTtcbiAgICBjb25zdCBjb250ZW50U3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgY29uc3QgY29udGVudCA9IGVuY29kaW5nLnV0ZjhUb0FycmF5KGNvbnRlbnRTdHJpbmcpO1xuICAgIGNvbnN0IGNpcGhlclRleHQgPSBhd2FpdCBjcnlwdG8uYWVzQ2JjRW5jcnlwdChpdiwgX2tleSwgY29udGVudCk7XG4gICAgY29uc3QgY2lwaGVyVGV4dEhleCA9IGVuY29kaW5nLmFycmF5VG9IZXgoY2lwaGVyVGV4dCwgZmFsc2UpO1xuICAgIGNvbnN0IHVuc2lnbmVkID0gZW5jb2RpbmcuY29uY2F0QXJyYXlzKGNpcGhlclRleHQsIGl2KTtcbiAgICBjb25zdCBobWFjID0gYXdhaXQgY3J5cHRvLmhtYWNTaGEyNTZTaWduKF9rZXksIHVuc2lnbmVkKTtcbiAgICBjb25zdCBobWFjSGV4ID0gZW5jb2RpbmcuYXJyYXlUb0hleChobWFjLCBmYWxzZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogY2lwaGVyVGV4dEhleCxcbiAgICAgICAgaG1hYzogaG1hY0hleCxcbiAgICAgICAgaXY6IGl2SGV4LFxuICAgIH07XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVjcnlwdChwYXlsb2FkLCBrZXkpIHtcbiAgICBjb25zdCBfa2V5ID0gZW5jb2RpbmcuYnVmZmVyVG9BcnJheShjb252ZXJ0QXJyYXlCdWZmZXJUb0J1ZmZlcihrZXkpKTtcbiAgICBpZiAoIV9rZXkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBrZXk6IHJlcXVpcmVkIGZvciBkZWNyeXB0aW9uXCIpO1xuICAgIH1cbiAgICBjb25zdCB2ZXJpZmllZCA9IGF3YWl0IHZlcmlmeUhtYWMocGF5bG9hZCwgX2tleSk7XG4gICAgaWYgKCF2ZXJpZmllZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgY2lwaGVyVGV4dCA9IGVuY29kaW5nLmhleFRvQXJyYXkocGF5bG9hZC5kYXRhKTtcbiAgICBjb25zdCBpdiA9IGVuY29kaW5nLmhleFRvQXJyYXkocGF5bG9hZC5pdik7XG4gICAgY29uc3QgYnVmZmVyID0gYXdhaXQgY3J5cHRvLmFlc0NiY0RlY3J5cHQoaXYsIF9rZXksIGNpcGhlclRleHQpO1xuICAgIGNvbnN0IHV0ZjggPSBlbmNvZGluZy5hcnJheVRvVXRmOChidWZmZXIpO1xuICAgIGxldCBkYXRhO1xuICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKHV0ZjgpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0ICogYXMgZW52IGZyb20gXCJAd2FsbGV0Y29ubmVjdC9lbnZpcm9ubWVudFwiO1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbUJ5dGVzKGxlbmd0aCkge1xuICAgIGNvbnN0IGJyb3dzZXJDcnlwdG8gPSBlbnYuZ2V0QnJvd2VyQ3J5cHRvKCk7XG4gICAgcmV0dXJuIGJyb3dzZXJDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KGxlbmd0aCkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0IHsgYnJvd3NlckFlc0RlY3J5cHQsIGJyb3dzZXJBZXNFbmNyeXB0IH0gZnJvbSBcIi4uL2xpYi9icm93c2VyXCI7XG5leHBvcnQgZnVuY3Rpb24gYWVzQ2JjRW5jcnlwdChpdiwga2V5LCBkYXRhKSB7XG4gICAgcmV0dXJuIGJyb3dzZXJBZXNFbmNyeXB0KGl2LCBrZXksIGRhdGEpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFlc0NiY0RlY3J5cHQoaXYsIGtleSwgZGF0YSkge1xuICAgIHJldHVybiBicm93c2VyQWVzRGVjcnlwdChpdiwga2V5LCBkYXRhKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFlcy5qcy5tYXAiLCJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gXCJldmVudGVtaXR0ZXIzXCI7XG5pbXBvcnQgeyBYTUxIdHRwUmVxdWVzdCB9IGZyb20gXCJ4aHIyLWNvb2tpZXNcIjtcbmltcG9ydCB7IGdldEZyb21XaW5kb3cgfSBmcm9tIFwiQHdhbGxldGNvbm5lY3QvdXRpbHNcIjtcbmNvbnN0IFhIUiA9IGdldEZyb21XaW5kb3coXCJYTUxIdHRwUmVxdWVzdFwiKSB8fCBYTUxIdHRwUmVxdWVzdDtcbmNsYXNzIEhUVFBDb25uZWN0aW9uIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih1cmwpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgfVxuICAgIGZvcm1hdEVycm9yKHBheWxvYWQsIG1lc3NhZ2UsIGNvZGUgPSAtMSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXJyb3I6IHsgbWVzc2FnZSwgY29kZSB9LFxuICAgICAgICAgICAgaWQ6IHBheWxvYWQuaWQsXG4gICAgICAgICAgICBqc29ucnBjOiBwYXlsb2FkLmpzb25ycGMsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHNlbmQocGF5bG9hZCwgaW50ZXJuYWwpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgaWYgKHBheWxvYWQubWV0aG9kID09PSBcImV0aF9zdWJzY3JpYmVcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gdGhpcy5mb3JtYXRFcnJvcihwYXlsb2FkLCBcIlN1YnNjcmlwdGlvbnMgYXJlIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBIVFRQIGVuZHBvaW50XCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImVycm9yXCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB4aHIgPSBuZXcgWEhSKCk7XG4gICAgICAgICAgICBsZXQgcmVzcG9uZGVkID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCByZXMgPSAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbmRlZCkge1xuICAgICAgICAgICAgICAgICAgICB4aHIuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGludGVybmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbChlcnIsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGlkLCBqc29ucnBjIH0gPSBwYXlsb2FkO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBlcnJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHsgaWQsIGpzb25ycGMsIGVycm9yOiB7IG1lc3NhZ2U6IGVyci5tZXNzYWdlLCBjb2RlOiBlcnIuY29kZSB9IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHsgaWQsIGpzb25ycGMsIHJlc3VsdCB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwicGF5bG9hZFwiLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB4aHIub3BlbihcIlBPU1RcIiwgdGhpcy51cmwsIHRydWUpO1xuICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgICAgICAgICAgeGhyLnRpbWVvdXQgPSA2MCAqIDEwMDA7XG4gICAgICAgICAgICB4aHIub25lcnJvciA9IHJlcztcbiAgICAgICAgICAgIHhoci5vbnRpbWVvdXQgPSByZXM7XG4gICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzKHJlc3BvbnNlLmVycm9yLCByZXNwb25zZS5yZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMoZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgeGhyLnNlbmQoSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBIVFRQQ29ubmVjdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImltcG9ydCBXYWxsZXRDb25uZWN0IGZyb20gXCJAd2FsbGV0Y29ubmVjdC9jbGllbnRcIjtcbmltcG9ydCBRUkNvZGVNb2RhbCBmcm9tIFwiQHdhbGxldGNvbm5lY3QvcXJjb2RlLW1vZGFsXCI7XG5pbXBvcnQgSHR0cENvbm5lY3Rpb24gZnJvbSBcIkB3YWxsZXRjb25uZWN0L2h0dHAtY29ubmVjdGlvblwiO1xuaW1wb3J0IHsgcGF5bG9hZElkLCBzaWduaW5nTWV0aG9kcywgcGFyc2VQZXJzb25hbFNpZ24sIGdldFJwY1VybCB9IGZyb20gXCJAd2FsbGV0Y29ubmVjdC91dGlsc1wiO1xuY29uc3QgUHJvdmlkZXJFbmdpbmUgPSByZXF1aXJlKFwid2ViMy1wcm92aWRlci1lbmdpbmVcIik7XG5jb25zdCBDYWNoZVN1YnByb3ZpZGVyID0gcmVxdWlyZShcIndlYjMtcHJvdmlkZXItZW5naW5lL3N1YnByb3ZpZGVycy9jYWNoZVwiKTtcbmNvbnN0IEZpeHR1cmVTdWJwcm92aWRlciA9IHJlcXVpcmUoXCJ3ZWIzLXByb3ZpZGVyLWVuZ2luZS9zdWJwcm92aWRlcnMvZml4dHVyZVwiKTtcbmNvbnN0IEZpbHRlclN1YnByb3ZpZGVyID0gcmVxdWlyZShcIndlYjMtcHJvdmlkZXItZW5naW5lL3N1YnByb3ZpZGVycy9maWx0ZXJzXCIpO1xuY29uc3QgSG9va2VkV2FsbGV0U3VicHJvdmlkZXIgPSByZXF1aXJlKFwid2ViMy1wcm92aWRlci1lbmdpbmUvc3VicHJvdmlkZXJzL2hvb2tlZC13YWxsZXRcIik7XG5jb25zdCBOb25jZVN1YnByb3ZpZGVyID0gcmVxdWlyZShcIndlYjMtcHJvdmlkZXItZW5naW5lL3N1YnByb3ZpZGVycy9ub25jZS10cmFja2VyXCIpO1xuY29uc3QgU3Vic2NyaXB0aW9uc1N1YnByb3ZpZGVyID0gcmVxdWlyZShcIndlYjMtcHJvdmlkZXItZW5naW5lL3N1YnByb3ZpZGVycy9zdWJzY3JpcHRpb25zXCIpO1xuY2xhc3MgV2FsbGV0Q29ubmVjdFByb3ZpZGVyIGV4dGVuZHMgUHJvdmlkZXJFbmdpbmUge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoeyBwb2xsaW5nSW50ZXJ2YWw6IG9wdHMucG9sbGluZ0ludGVydmFsIHx8IDgwMDAgfSk7XG4gICAgICAgIHRoaXMuYnJpZGdlID0gXCJodHRwczovL2JyaWRnZS53YWxsZXRjb25uZWN0Lm9yZ1wiO1xuICAgICAgICB0aGlzLnFyY29kZSA9IHRydWU7XG4gICAgICAgIHRoaXMucXJjb2RlTW9kYWwgPSBRUkNvZGVNb2RhbDtcbiAgICAgICAgdGhpcy5xcmNvZGVNb2RhbE9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucnBjID0gbnVsbDtcbiAgICAgICAgdGhpcy5pbmZ1cmFJZCA9IFwiXCI7XG4gICAgICAgIHRoaXMuaHR0cCA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNDb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29ubmVjdENhbGxiYWNrcyA9IFtdO1xuICAgICAgICB0aGlzLmFjY291bnRzID0gW107XG4gICAgICAgIHRoaXMuY2hhaW5JZCA9IDE7XG4gICAgICAgIHRoaXMucnBjVXJsID0gXCJcIjtcbiAgICAgICAgdGhpcy5lbmFibGUgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB3YyA9IGF3YWl0IHRoaXMuZ2V0V2FsbGV0Q29ubmVjdG9yKCk7XG4gICAgICAgICAgICBpZiAod2MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVXYWxsZXRDb25uZWN0b3IoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2MuYWNjb3VudHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gY29ubmVjdCB0byBXYWxsZUNvbm5lY3RcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucmVxdWVzdCA9IGFzeW5jIChwYXlsb2FkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kKHBheWxvYWQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNlbmQgPSBhc3luYyAocGF5bG9hZCwgY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGF5bG9hZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGhvZCA9IHBheWxvYWQ7XG4gICAgICAgICAgICAgICAgbGV0IHBhcmFtcyA9IGNhbGxiYWNrO1xuICAgICAgICAgICAgICAgIGlmIChtZXRob2QgPT09IFwicGVyc29uYWxfc2lnblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcyA9IHBhcnNlUGVyc29uYWxTaWduKHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmRBc3luY1Byb21pc2UobWV0aG9kLCBwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGF5bG9hZCA9IE9iamVjdC5hc3NpZ24oeyBpZDogcGF5bG9hZElkKCksIGpzb25ycGM6IFwiMi4wXCIgfSwgcGF5bG9hZCk7XG4gICAgICAgICAgICBpZiAocGF5bG9hZC5tZXRob2QgPT09IFwicGVyc29uYWxfc2lnblwiKSB7XG4gICAgICAgICAgICAgICAgcGF5bG9hZC5wYXJhbXMgPSBwYXJzZVBlcnNvbmFsU2lnbihwYXlsb2FkLnBhcmFtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRBc3luYyhwYXlsb2FkLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZEFzeW5jUHJvbWlzZShwYXlsb2FkLm1ldGhvZCwgcGF5bG9hZC5wYXJhbXMpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uQ29ubmVjdCA9IChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0Q2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnRyaWdnZXJDb25uZWN0ID0gKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdENhbGxiYWNrcyAmJiB0aGlzLmNvbm5lY3RDYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0Q2FsbGJhY2tzLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2socmVzdWx0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYnJpZGdlID0gb3B0cy5jb25uZWN0b3JcbiAgICAgICAgICAgID8gb3B0cy5jb25uZWN0b3IuYnJpZGdlXG4gICAgICAgICAgICA6IG9wdHMuYnJpZGdlIHx8IFwiaHR0cHM6Ly9icmlkZ2Uud2FsbGV0Y29ubmVjdC5vcmdcIjtcbiAgICAgICAgdGhpcy5xcmNvZGUgPSB0eXBlb2Ygb3B0cy5xcmNvZGUgPT09IFwidW5kZWZpbmVkXCIgfHwgb3B0cy5xcmNvZGUgIT09IGZhbHNlO1xuICAgICAgICB0aGlzLnFyY29kZU1vZGFsID0gb3B0cy5xcmNvZGVNb2RhbCB8fCB0aGlzLnFyY29kZU1vZGFsO1xuICAgICAgICB0aGlzLnFyY29kZU1vZGFsT3B0aW9ucyA9IG9wdHMucXJjb2RlTW9kYWxPcHRpb25zO1xuICAgICAgICB0aGlzLndjID1cbiAgICAgICAgICAgIG9wdHMuY29ubmVjdG9yIHx8XG4gICAgICAgICAgICAgICAgbmV3IFdhbGxldENvbm5lY3Qoe1xuICAgICAgICAgICAgICAgICAgICBicmlkZ2U6IHRoaXMuYnJpZGdlLFxuICAgICAgICAgICAgICAgICAgICBxcmNvZGVNb2RhbDogdGhpcy5xcmNvZGUgPyB0aGlzLnFyY29kZU1vZGFsIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBxcmNvZGVNb2RhbE9wdGlvbnM6IHRoaXMucXJjb2RlTW9kYWxPcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBzdG9yYWdlSWQ6IG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5zdG9yYWdlSWQsXG4gICAgICAgICAgICAgICAgICAgIHNpZ25pbmdNZXRob2RzOiBvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMuc2lnbmluZ01ldGhvZHMsXG4gICAgICAgICAgICAgICAgICAgIGNsaWVudE1ldGE6IG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5jbGllbnRNZXRhLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJwYyA9IG9wdHMucnBjIHx8IG51bGw7XG4gICAgICAgIGlmICghdGhpcy5ycGMgJiZcbiAgICAgICAgICAgICghb3B0cy5pbmZ1cmFJZCB8fCB0eXBlb2Ygb3B0cy5pbmZ1cmFJZCAhPT0gXCJzdHJpbmdcIiB8fCAhb3B0cy5pbmZ1cmFJZC50cmltKCkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIG9uZSBvZiB0aGUgcmVxdWlyZWQgcGFyYW1ldGVyczogcnBjIG9yIGluZnVyYUlkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5mdXJhSWQgPSBvcHRzLmluZnVyYUlkIHx8IFwiXCI7XG4gICAgICAgIHRoaXMuY2hhaW5JZCA9IChvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMuY2hhaW5JZCkgfHwgdGhpcy5jaGFpbklkO1xuICAgICAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgICB9XG4gICAgZ2V0IGlzV2FsbGV0Q29ubmVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGdldCBjb25uZWN0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndjO1xuICAgIH1cbiAgICBnZXQgd2FsbGV0TWV0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2MucGVlck1ldGE7XG4gICAgfVxuICAgIGFzeW5jIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gICAgYXN5bmMgY2xvc2UoKSB7XG4gICAgICAgIGNvbnN0IHdjID0gYXdhaXQgdGhpcy5nZXRXYWxsZXRDb25uZWN0b3IoeyBkaXNhYmxlU2Vzc2lvbkNyZWF0aW9uOiB0cnVlIH0pO1xuICAgICAgICBhd2FpdCB3Yy5raWxsU2Vzc2lvbigpO1xuICAgICAgICBhd2FpdCB0aGlzLm9uRGlzY29ubmVjdCgpO1xuICAgIH1cbiAgICBhc3luYyBoYW5kbGVSZXF1ZXN0KHBheWxvYWQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCByZXNwb25zZTtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgICAgICAgICAgY29uc3Qgd2MgPSBhd2FpdCB0aGlzLmdldFdhbGxldENvbm5lY3RvcigpO1xuICAgICAgICAgICAgc3dpdGNoIChwYXlsb2FkLm1ldGhvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJ3Y19raWxsU2Vzc2lvblwiOlxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJldGhfYWNjb3VudHNcIjpcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gd2MuYWNjb3VudHM7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJldGhfY29pbmJhc2VcIjpcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gd2MuYWNjb3VudHNbMF07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJldGhfY2hhaW5JZFwiOlxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB3Yy5jaGFpbklkO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwibmV0X3ZlcnNpb25cIjpcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gd2MuY2hhaW5JZDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImV0aF91bmluc3RhbGxGaWx0ZXJcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kQXN5bmMocGF5bG9hZCwgKF8pID0+IF8pO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IHRoaXMuaGFuZGxlT3RoZXJSZXF1ZXN0cyhwYXlsb2FkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdFJlc3BvbnNlKHBheWxvYWQsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBoYW5kbGVPdGhlclJlcXVlc3RzKHBheWxvYWQpIHtcbiAgICAgICAgaWYgKCFzaWduaW5nTWV0aG9kcy5pbmNsdWRlcyhwYXlsb2FkLm1ldGhvZCkgJiYgcGF5bG9hZC5tZXRob2Quc3RhcnRzV2l0aChcImV0aF9cIikpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZVJlYWRSZXF1ZXN0cyhwYXlsb2FkKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB3YyA9IGF3YWl0IHRoaXMuZ2V0V2FsbGV0Q29ubmVjdG9yKCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHdjLnNlbmRDdXN0b21SZXF1ZXN0KHBheWxvYWQpO1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRSZXNwb25zZShwYXlsb2FkLCByZXN1bHQpO1xuICAgIH1cbiAgICBhc3luYyBoYW5kbGVSZWFkUmVxdWVzdHMocGF5bG9hZCkge1xuICAgICAgICBpZiAoIXRoaXMuaHR0cCkge1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoXCJIVFRQIENvbm5lY3Rpb24gbm90IGF2YWlsYWJsZVwiKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcImVycm9yXCIsIGVycm9yKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuc2VuZChwYXlsb2FkKTtcbiAgICB9XG4gICAgZm9ybWF0UmVzcG9uc2UocGF5bG9hZCwgcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogcGF5bG9hZC5pZCxcbiAgICAgICAgICAgIGpzb25ycGM6IHBheWxvYWQuanNvbnJwYyxcbiAgICAgICAgICAgIHJlc3VsdDogcmVzdWx0LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRXYWxsZXRDb25uZWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHsgZGlzYWJsZVNlc3Npb25DcmVhdGlvbiA9IGZhbHNlIH0gPSBvcHRzO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgd2MgPSB0aGlzLndjO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNDb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkNvbm5lY3QoKHgpID0+IHJlc29sdmUoeCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIXdjLmNvbm5lY3RlZCAmJiAhZGlzYWJsZVNlc3Npb25DcmVhdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNDb25uZWN0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB3Yy5vbihcIm1vZGFsX2Nsb3NlZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJVc2VyIGNsb3NlZCBtb2RhbFwiKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgd2MuY3JlYXRlU2Vzc2lvbih7IGNoYWluSWQ6IHRoaXMuY2hhaW5JZCB9KVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHdjLm9uKFwiY29ubmVjdFwiLCAoZXJyb3IsIHBheWxvYWQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNDb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQ29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBheWxvYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKHBheWxvYWQucGFyYW1zWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImNvbm5lY3RcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXJDb25uZWN0KHdjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUod2MpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQ29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUod2Muc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUod2MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgc3Vic2NyaWJlV2FsbGV0Q29ubmVjdG9yKCkge1xuICAgICAgICBjb25zdCB3YyA9IGF3YWl0IHRoaXMuZ2V0V2FsbGV0Q29ubmVjdG9yKCk7XG4gICAgICAgIHdjLm9uKFwiZGlzY29ubmVjdFwiLCBlcnJvciA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vbkRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHdjLm9uKFwic2Vzc2lvbl91cGRhdGVcIiwgKGVycm9yLCBwYXlsb2FkKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZShwYXlsb2FkLnBhcmFtc1swXSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBvbkRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcCgpO1xuICAgICAgICB0aGlzLmVtaXQoXCJjbG9zZVwiLCAxMDAwLCBcIkNvbm5lY3Rpb24gY2xvc2VkXCIpO1xuICAgICAgICB0aGlzLmVtaXQoXCJkaXNjb25uZWN0XCIsIDEwMDAsIFwiQ29ubmVjdGlvbiBkaXNjb25uZWN0ZWRcIik7XG4gICAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgfVxuICAgIGFzeW5jIHVwZGF0ZVN0YXRlKHNlc3Npb25QYXJhbXMpIHtcbiAgICAgICAgY29uc3QgeyBhY2NvdW50cywgY2hhaW5JZCwgbmV0d29ya0lkLCBycGNVcmwgfSA9IHNlc3Npb25QYXJhbXM7XG4gICAgICAgIGlmICghdGhpcy5hY2NvdW50cyB8fCAoYWNjb3VudHMgJiYgdGhpcy5hY2NvdW50cyAhPT0gYWNjb3VudHMpKSB7XG4gICAgICAgICAgICB0aGlzLmFjY291bnRzID0gYWNjb3VudHM7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJhY2NvdW50c0NoYW5nZWRcIiwgYWNjb3VudHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5jaGFpbklkIHx8IChjaGFpbklkICYmIHRoaXMuY2hhaW5JZCAhPT0gY2hhaW5JZCkpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhaW5JZCA9IGNoYWluSWQ7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJjaGFpbkNoYW5nZWRcIiwgY2hhaW5JZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLm5ldHdvcmtJZCB8fCAobmV0d29ya0lkICYmIHRoaXMubmV0d29ya0lkICE9PSBuZXR3b3JrSWQpKSB7XG4gICAgICAgICAgICB0aGlzLm5ldHdvcmtJZCA9IG5ldHdvcmtJZDtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcIm5ldHdvcmtDaGFuZ2VkXCIsIG5ldHdvcmtJZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVScGNVcmwodGhpcy5jaGFpbklkLCBycGNVcmwgfHwgXCJcIik7XG4gICAgfVxuICAgIHVwZGF0ZVJwY1VybChjaGFpbklkLCBycGNVcmwgPSBcIlwiKSB7XG4gICAgICAgIGNvbnN0IHJwYyA9IHsgaW5mdXJhSWQ6IHRoaXMuaW5mdXJhSWQsIGN1c3RvbTogdGhpcy5ycGMgfHwgdW5kZWZpbmVkIH07XG4gICAgICAgIHJwY1VybCA9IHJwY1VybCB8fCBnZXRScGNVcmwoY2hhaW5JZCwgcnBjKTtcbiAgICAgICAgaWYgKHJwY1VybCkge1xuICAgICAgICAgICAgdGhpcy5ycGNVcmwgPSBycGNVcmw7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUh0dHBDb25uZWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBuZXcgRXJyb3IoYE5vIFJQQyBVcmwgYXZhaWxhYmxlIGZvciBjaGFpbklkOiAke2NoYWluSWR9YCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZUh0dHBDb25uZWN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5ycGNVcmwpIHtcbiAgICAgICAgICAgIHRoaXMuaHR0cCA9IG5ldyBIdHRwQ29ubmVjdGlvbih0aGlzLnJwY1VybCk7XG4gICAgICAgICAgICB0aGlzLmh0dHAub24oXCJwYXlsb2FkXCIsIHBheWxvYWQgPT4gdGhpcy5lbWl0KFwicGF5bG9hZFwiLCBwYXlsb2FkKSk7XG4gICAgICAgICAgICB0aGlzLmh0dHAub24oXCJlcnJvclwiLCBlcnJvciA9PiB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnJvcikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNlbmRBc3luY1Byb21pc2UobWV0aG9kLCBwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2VuZEFzeW5jKHtcbiAgICAgICAgICAgICAgICBpZDogcGF5bG9hZElkKCksXG4gICAgICAgICAgICAgICAganNvbnJwYzogXCIyLjBcIixcbiAgICAgICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXMgfHwgW10sXG4gICAgICAgICAgICB9LCAoZXJyb3IsIHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZS5yZXN1bHQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVJwY1VybCh0aGlzLmNoYWluSWQpO1xuICAgICAgICB0aGlzLmFkZFByb3ZpZGVyKG5ldyBGaXh0dXJlU3VicHJvdmlkZXIoe1xuICAgICAgICAgICAgZXRoX2hhc2hyYXRlOiBcIjB4MDBcIixcbiAgICAgICAgICAgIGV0aF9taW5pbmc6IGZhbHNlLFxuICAgICAgICAgICAgZXRoX3N5bmNpbmc6IHRydWUsXG4gICAgICAgICAgICBuZXRfbGlzdGVuaW5nOiB0cnVlLFxuICAgICAgICAgICAgd2ViM19jbGllbnRWZXJzaW9uOiBgV2FsbGV0Q29ubmVjdC92MS54LngvamF2YXNjcmlwdGAsXG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5hZGRQcm92aWRlcihuZXcgQ2FjaGVTdWJwcm92aWRlcigpKTtcbiAgICAgICAgdGhpcy5hZGRQcm92aWRlcihuZXcgU3Vic2NyaXB0aW9uc1N1YnByb3ZpZGVyKCkpO1xuICAgICAgICB0aGlzLmFkZFByb3ZpZGVyKG5ldyBGaWx0ZXJTdWJwcm92aWRlcigpKTtcbiAgICAgICAgdGhpcy5hZGRQcm92aWRlcihuZXcgTm9uY2VTdWJwcm92aWRlcigpKTtcbiAgICAgICAgdGhpcy5hZGRQcm92aWRlcihuZXcgSG9va2VkV2FsbGV0U3VicHJvdmlkZXIodGhpcy5jb25maWdXYWxsZXQoKSkpO1xuICAgICAgICB0aGlzLmFkZFByb3ZpZGVyKHtcbiAgICAgICAgICAgIGhhbmRsZVJlcXVlc3Q6IGFzeW5jIChwYXlsb2FkLCBuZXh0LCBlbmQpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGVycm9yLCByZXN1bHQgfSA9IGF3YWl0IHRoaXMuaGFuZGxlUmVxdWVzdChwYXlsb2FkKTtcbiAgICAgICAgICAgICAgICAgICAgZW5kKGVycm9yLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5kKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0RW5naW5lOiAoXykgPT4gXyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbmZpZ1dhbGxldCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldEFjY291bnRzOiBhc3luYyAoY2IpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3YyA9IGF3YWl0IHRoaXMuZ2V0V2FsbGV0Q29ubmVjdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjY291bnRzID0gd2MuYWNjb3VudHM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhY2NvdW50cyAmJiBhY2NvdW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNiKG51bGwsIGFjY291bnRzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNiKG5ldyBFcnJvcihcIkZhaWxlZCB0byBnZXQgYWNjb3VudHNcIikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjYihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb2Nlc3NNZXNzYWdlOiBhc3luYyAobXNnUGFyYW1zLCBjYikgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdjID0gYXdhaXQgdGhpcy5nZXRXYWxsZXRDb25uZWN0b3IoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgd2Muc2lnbk1lc3NhZ2UoW21zZ1BhcmFtcy5mcm9tLCBtc2dQYXJhbXMuZGF0YV0pO1xuICAgICAgICAgICAgICAgICAgICBjYihudWxsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY2IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm9jZXNzUGVyc29uYWxNZXNzYWdlOiBhc3luYyAobXNnUGFyYW1zLCBjYikgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdjID0gYXdhaXQgdGhpcy5nZXRXYWxsZXRDb25uZWN0b3IoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgd2Muc2lnblBlcnNvbmFsTWVzc2FnZShbbXNnUGFyYW1zLmRhdGEsIG1zZ1BhcmFtcy5mcm9tXSk7XG4gICAgICAgICAgICAgICAgICAgIGNiKG51bGwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjYihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb2Nlc3NTaWduVHJhbnNhY3Rpb246IGFzeW5jICh0eFBhcmFtcywgY2IpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3YyA9IGF3YWl0IHRoaXMuZ2V0V2FsbGV0Q29ubmVjdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHdjLnNpZ25UcmFuc2FjdGlvbih0eFBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgIGNiKG51bGwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjYihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb2Nlc3NUcmFuc2FjdGlvbjogYXN5bmMgKHR4UGFyYW1zLCBjYikgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdjID0gYXdhaXQgdGhpcy5nZXRXYWxsZXRDb25uZWN0b3IoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgd2Muc2VuZFRyYW5zYWN0aW9uKHR4UGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgY2IobnVsbCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNiKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvY2Vzc1R5cGVkTWVzc2FnZTogYXN5bmMgKG1zZ1BhcmFtcywgY2IpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3YyA9IGF3YWl0IHRoaXMuZ2V0V2FsbGV0Q29ubmVjdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHdjLnNpZ25UeXBlZERhdGEoW21zZ1BhcmFtcy5mcm9tLCBtc2dQYXJhbXMuZGF0YV0pO1xuICAgICAgICAgICAgICAgICAgICBjYihudWxsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY2IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgV2FsbGV0Q29ubmVjdFByb3ZpZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0IENvbm5lY3RvciBmcm9tIFwiQHdhbGxldGNvbm5lY3QvY29yZVwiO1xuaW1wb3J0ICogYXMgY3J5cHRvTGliIGZyb20gXCJAd2FsbGV0Y29ubmVjdC9pc28tY3J5cHRvXCI7XG5jbGFzcyBXYWxsZXRDb25uZWN0IGV4dGVuZHMgQ29ubmVjdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25uZWN0b3JPcHRzLCBwdXNoU2VydmVyT3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBjcnlwdG9MaWIsXG4gICAgICAgICAgICBjb25uZWN0b3JPcHRzLFxuICAgICAgICAgICAgcHVzaFNlcnZlck9wdHMsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IFdhbGxldENvbm5lY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQgeyBpc0pzb25ScGNSZXF1ZXN0LCBpc0pzb25ScGNSZXNwb25zZVN1Y2Nlc3MsIGlzSnNvblJwY1Jlc3BvbnNlRXJyb3IsIGlzSW50ZXJuYWxFdmVudCwgaXNSZXNlcnZlZEV2ZW50LCB9IGZyb20gXCJAd2FsbGV0Y29ubmVjdC91dGlsc1wiO1xuY2xhc3MgRXZlbnRNYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVycyA9IFtdO1xuICAgIH1cbiAgICBzdWJzY3JpYmUoZXZlbnRFbWl0dGVyKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlcnMucHVzaChldmVudEVtaXR0ZXIpO1xuICAgIH1cbiAgICB1bnN1YnNjcmliZShldmVudCkge1xuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXJzID0gdGhpcy5fZXZlbnRFbWl0dGVycy5maWx0ZXIoeCA9PiB4LmV2ZW50ICE9PSBldmVudCk7XG4gICAgfVxuICAgIHRyaWdnZXIocGF5bG9hZCkge1xuICAgICAgICBsZXQgZXZlbnRFbWl0dGVycyA9IFtdO1xuICAgICAgICBsZXQgZXZlbnQ7XG4gICAgICAgIGlmIChpc0pzb25ScGNSZXF1ZXN0KHBheWxvYWQpKSB7XG4gICAgICAgICAgICBldmVudCA9IHBheWxvYWQubWV0aG9kO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzSnNvblJwY1Jlc3BvbnNlU3VjY2VzcyhwYXlsb2FkKSB8fCBpc0pzb25ScGNSZXNwb25zZUVycm9yKHBheWxvYWQpKSB7XG4gICAgICAgICAgICBldmVudCA9IGByZXNwb25zZToke3BheWxvYWQuaWR9YDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0ludGVybmFsRXZlbnQocGF5bG9hZCkpIHtcbiAgICAgICAgICAgIGV2ZW50ID0gcGF5bG9hZC5ldmVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGV2ZW50ID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50RW1pdHRlcnMgPSB0aGlzLl9ldmVudEVtaXR0ZXJzLmZpbHRlcigoZXZlbnRFbWl0dGVyKSA9PiBldmVudEVtaXR0ZXIuZXZlbnQgPT09IGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKCFldmVudEVtaXR0ZXJzIHx8ICFldmVudEVtaXR0ZXJzLmxlbmd0aCkgJiZcbiAgICAgICAgICAgICFpc1Jlc2VydmVkRXZlbnQoZXZlbnQpICYmXG4gICAgICAgICAgICAhaXNJbnRlcm5hbEV2ZW50KGV2ZW50KSkge1xuICAgICAgICAgICAgZXZlbnRFbWl0dGVycyA9IHRoaXMuX2V2ZW50RW1pdHRlcnMuZmlsdGVyKChldmVudEVtaXR0ZXIpID0+IGV2ZW50RW1pdHRlci5ldmVudCA9PT0gXCJjYWxsX3JlcXVlc3RcIik7XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnRFbWl0dGVycy5mb3JFYWNoKChldmVudEVtaXR0ZXIpID0+IHtcbiAgICAgICAgICAgIGlmIChpc0pzb25ScGNSZXNwb25zZUVycm9yKHBheWxvYWQpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IocGF5bG9hZC5lcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBldmVudEVtaXR0ZXIuY2FsbGJhY2soZXJyb3IsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZXZlbnRFbWl0dGVyLmNhbGxiYWNrKG51bGwsIHBheWxvYWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBFdmVudE1hbmFnZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVudHMuanMubWFwIiwiaW1wb3J0IHsgaXNXYWxsZXRDb25uZWN0U2Vzc2lvbiwgZ2V0TG9jYWwsIHNldExvY2FsLCByZW1vdmVMb2NhbCB9IGZyb20gXCJAd2FsbGV0Y29ubmVjdC91dGlsc1wiO1xuY2xhc3MgU2Vzc2lvblN0b3JhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKHN0b3JhZ2VJZCA9IFwid2FsbGV0Y29ubmVjdFwiKSB7XG4gICAgICAgIHRoaXMuc3RvcmFnZUlkID0gc3RvcmFnZUlkO1xuICAgIH1cbiAgICBnZXRTZXNzaW9uKCkge1xuICAgICAgICBsZXQgc2Vzc2lvbiA9IG51bGw7XG4gICAgICAgIGNvbnN0IGpzb24gPSBnZXRMb2NhbCh0aGlzLnN0b3JhZ2VJZCk7XG4gICAgICAgIGlmIChqc29uICYmIGlzV2FsbGV0Q29ubmVjdFNlc3Npb24oanNvbikpIHtcbiAgICAgICAgICAgIHNlc3Npb24gPSBqc29uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXNzaW9uO1xuICAgIH1cbiAgICBzZXRTZXNzaW9uKHNlc3Npb24pIHtcbiAgICAgICAgc2V0TG9jYWwodGhpcy5zdG9yYWdlSWQsIHNlc3Npb24pO1xuICAgICAgICByZXR1cm4gc2Vzc2lvbjtcbiAgICB9XG4gICAgcmVtb3ZlU2Vzc2lvbigpIHtcbiAgICAgICAgcmVtb3ZlTG9jYWwodGhpcy5zdG9yYWdlSWQpO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IFNlc3Npb25TdG9yYWdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RvcmFnZS5qcy5tYXAiLCJpbXBvcnQgeyBwYXJzZVF1ZXJ5U3RyaW5nIH0gZnJvbSBcIi4vdXJsXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNXYWxsZXRDb25uZWN0U2Vzc2lvbihvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdC5icmlkZ2UgIT09IFwidW5kZWZpbmVkXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VXYWxsZXRDb25uZWN0VXJpKHN0cikge1xuICAgIGNvbnN0IHBhdGhTdGFydCA9IHN0ci5pbmRleE9mKFwiOlwiKTtcbiAgICBjb25zdCBwYXRoRW5kID0gc3RyLmluZGV4T2YoXCI/XCIpICE9PSAtMSA/IHN0ci5pbmRleE9mKFwiP1wiKSA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBwcm90b2NvbCA9IHN0ci5zdWJzdHJpbmcoMCwgcGF0aFN0YXJ0KTtcbiAgICBjb25zdCBwYXRoID0gc3RyLnN1YnN0cmluZyhwYXRoU3RhcnQgKyAxLCBwYXRoRW5kKTtcbiAgICBmdW5jdGlvbiBwYXJzZVJlcXVpcmVkUGFyYW1zKHBhdGgpIHtcbiAgICAgICAgY29uc3Qgc2VwYXJhdG9yID0gXCJAXCI7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IHBhdGguc3BsaXQoc2VwYXJhdG9yKTtcbiAgICAgICAgY29uc3QgcmVxdWlyZWRQYXJhbXMgPSB7XG4gICAgICAgICAgICBoYW5kc2hha2VUb3BpYzogdmFsdWVzWzBdLFxuICAgICAgICAgICAgdmVyc2lvbjogcGFyc2VJbnQodmFsdWVzWzFdLCAxMCksXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiByZXF1aXJlZFBhcmFtcztcbiAgICB9XG4gICAgY29uc3QgcmVxdWlyZWRQYXJhbXMgPSBwYXJzZVJlcXVpcmVkUGFyYW1zKHBhdGgpO1xuICAgIGNvbnN0IHF1ZXJ5U3RyaW5nID0gdHlwZW9mIHBhdGhFbmQgIT09IFwidW5kZWZpbmVkXCIgPyBzdHIuc3Vic3RyKHBhdGhFbmQpIDogXCJcIjtcbiAgICBmdW5jdGlvbiBwYXJzZVF1ZXJ5UGFyYW1zKHF1ZXJ5U3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHBhcnNlUXVlcnlTdHJpbmcocXVlcnlTdHJpbmcpO1xuICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0ge1xuICAgICAgICAgICAga2V5OiByZXN1bHQua2V5IHx8IFwiXCIsXG4gICAgICAgICAgICBicmlkZ2U6IHJlc3VsdC5icmlkZ2UgfHwgXCJcIixcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHBhcmFtZXRlcnM7XG4gICAgfVxuICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0gcGFyc2VRdWVyeVBhcmFtcyhxdWVyeVN0cmluZyk7XG4gICAgY29uc3QgcmVzdWx0ID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgcHJvdG9jb2wgfSwgcmVxdWlyZWRQYXJhbXMpLCBxdWVyeVBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlc3Npb24uanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIHByb21pc2lmeShvcmlnaW5hbEZuLCB0aGlzQXJnKSB7XG4gICAgY29uc3QgcHJvbWlzaWZpZWRGdW5jdGlvbiA9IGFzeW5jICguLi5jYWxsQXJncykgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSAoZXJyLCBkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVyciA9PT0gbnVsbCB8fCB0eXBlb2YgZXJyID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG9yaWdpbmFsRm4uYXBwbHkodGhpc0FyZywgWy4uLmNhbGxBcmdzLCBjYWxsYmFja10pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBwcm9taXNpZmllZEZ1bmN0aW9uO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFJwY0Vycm9yKGVycm9yKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGVycm9yLm1lc3NhZ2UgfHwgXCJGYWlsZWQgb3IgUmVqZWN0ZWQgUmVxdWVzdFwiO1xuICAgIGxldCBjb2RlID0gLTMyMDAwO1xuICAgIGlmIChlcnJvciAmJiAhZXJyb3IuY29kZSkge1xuICAgICAgICBzd2l0Y2ggKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGNhc2UgXCJQYXJzZSBlcnJvclwiOlxuICAgICAgICAgICAgICAgIGNvZGUgPSAtMzI3MDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiSW52YWxpZCByZXF1ZXN0XCI6XG4gICAgICAgICAgICAgICAgY29kZSA9IC0zMjYwMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJNZXRob2Qgbm90IGZvdW5kXCI6XG4gICAgICAgICAgICAgICAgY29kZSA9IC0zMjYwMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJJbnZhbGlkIHBhcmFtc1wiOlxuICAgICAgICAgICAgICAgIGNvZGUgPSAtMzI2MDI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiSW50ZXJuYWwgZXJyb3JcIjpcbiAgICAgICAgICAgICAgICBjb2RlID0gLTMyNjAzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb2RlID0gLTMyMDAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgY29kZSxcbiAgICAgICAgbWVzc2FnZSxcbiAgICB9O1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXlsb2FkLmpzLm1hcCIsIihmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBVdGlsc1xuICBmdW5jdGlvbiBhc3NlcnQgKHZhbCwgbXNnKSB7XG4gICAgaWYgKCF2YWwpIHRocm93IG5ldyBFcnJvcihtc2cgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTtcbiAgfVxuXG4gIC8vIENvdWxkIHVzZSBgaW5oZXJpdHNgIG1vZHVsZSwgYnV0IGRvbid0IHdhbnQgdG8gbW92ZSBmcm9tIHNpbmdsZSBmaWxlXG4gIC8vIGFyY2hpdGVjdHVyZSB5ZXQuXG4gIGZ1bmN0aW9uIGluaGVyaXRzIChjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvcjtcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlO1xuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKCk7XG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yO1xuICB9XG5cbiAgLy8gQk5cblxuICBmdW5jdGlvbiBCTiAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAoQk4uaXNCTihudW1iZXIpKSB7XG4gICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cblxuICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgIHRoaXMud29yZHMgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcblxuICAgIC8vIFJlZHVjdGlvbiBjb250ZXh0XG4gICAgdGhpcy5yZWQgPSBudWxsO1xuXG4gICAgaWYgKG51bWJlciAhPT0gbnVsbCkge1xuICAgICAgaWYgKGJhc2UgPT09ICdsZScgfHwgYmFzZSA9PT0gJ2JlJykge1xuICAgICAgICBlbmRpYW4gPSBiYXNlO1xuICAgICAgICBiYXNlID0gMTA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2luaXQobnVtYmVyIHx8IDAsIGJhc2UgfHwgMTAsIGVuZGlhbiB8fCAnYmUnKTtcbiAgICB9XG4gIH1cbiAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBCTjtcbiAgfSBlbHNlIHtcbiAgICBleHBvcnRzLkJOID0gQk47XG4gIH1cblxuICBCTi5CTiA9IEJOO1xuICBCTi53b3JkU2l6ZSA9IDI2O1xuXG4gIHZhciBCdWZmZXI7XG4gIHRyeSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuQnVmZmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgQnVmZmVyID0gd2luZG93LkJ1ZmZlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICB9XG5cbiAgQk4uaXNCTiA9IGZ1bmN0aW9uIGlzQk4gKG51bSkge1xuICAgIGlmIChudW0gaW5zdGFuY2VvZiBCTikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bSAhPT0gbnVsbCAmJiB0eXBlb2YgbnVtID09PSAnb2JqZWN0JyAmJlxuICAgICAgbnVtLmNvbnN0cnVjdG9yLndvcmRTaXplID09PSBCTi53b3JkU2l6ZSAmJiBBcnJheS5pc0FycmF5KG51bS53b3Jkcyk7XG4gIH07XG5cbiAgQk4ubWF4ID0gZnVuY3Rpb24gbWF4IChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPiAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ubWluID0gZnVuY3Rpb24gbWluIChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPCAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdCAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0TnVtYmVyKG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0QXJyYXkobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAnaGV4Jykge1xuICAgICAgYmFzZSA9IDE2O1xuICAgIH1cbiAgICBhc3NlcnQoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNik7XG5cbiAgICBudW1iZXIgPSBudW1iZXIudG9TdHJpbmcoKS5yZXBsYWNlKC9cXHMrL2csICcnKTtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgc3RhcnQrKztcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIGlmIChzdGFydCA8IG51bWJlci5sZW5ndGgpIHtcbiAgICAgIGlmIChiYXNlID09PSAxNikge1xuICAgICAgICB0aGlzLl9wYXJzZUhleChudW1iZXIsIHN0YXJ0LCBlbmRpYW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcGFyc2VCYXNlKG51bWJlciwgYmFzZSwgc3RhcnQpO1xuICAgICAgICBpZiAoZW5kaWFuID09PSAnbGUnKSB7XG4gICAgICAgICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdE51bWJlciA9IGZ1bmN0aW9uIF9pbml0TnVtYmVyIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPCAweDQwMDAwMDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbIG51bWJlciAmIDB4M2ZmZmZmZiBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgMHgxMDAwMDAwMDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZlxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG51bWJlciA8IDB4MjAwMDAwMDAwMDAwMDApOyAvLyAyIF4gNTMgKHVuc2FmZSlcbiAgICAgIHRoaXMud29yZHMgPSBbXG4gICAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgICAgKG51bWJlciAvIDB4NDAwMDAwMCkgJiAweDNmZmZmZmYsXG4gICAgICAgIDFcbiAgICAgIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDM7XG4gICAgfVxuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgLy8gUmV2ZXJzZSB0aGUgYnl0ZXNcbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0QXJyYXkgPSBmdW5jdGlvbiBfaW5pdEFycmF5IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIC8vIFBlcmhhcHMgYSBVaW50OEFycmF5XG4gICAgYXNzZXJ0KHR5cGVvZiBudW1iZXIubGVuZ3RoID09PSAnbnVtYmVyJyk7XG4gICAgaWYgKG51bWJlci5sZW5ndGggPD0gMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwobnVtYmVyLmxlbmd0aCAvIDMpO1xuICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGosIHc7XG4gICAgdmFyIG9mZiA9IDA7XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JlJykge1xuICAgICAgZm9yIChpID0gbnVtYmVyLmxlbmd0aCAtIDEsIGogPSAwOyBpID49IDA7IGkgLT0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpIC0gMV0gPDwgOCkgfCAobnVtYmVyW2kgLSAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVuZGlhbiA9PT0gJ2xlJykge1xuICAgICAgZm9yIChpID0gMCwgaiA9IDA7IGkgPCBudW1iZXIubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSArIDFdIDw8IDgpIHwgKG51bWJlcltpICsgMl0gPDwgMTYpO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gKHcgPj4+ICgyNiAtIG9mZikpICYgMHgzZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjQ7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcGFyc2VIZXg0Qml0cyAoc3RyaW5nLCBpbmRleCkge1xuICAgIHZhciBjID0gc3RyaW5nLmNoYXJDb2RlQXQoaW5kZXgpO1xuICAgIC8vICdBJyAtICdGJ1xuICAgIGlmIChjID49IDY1ICYmIGMgPD0gNzApIHtcbiAgICAgIHJldHVybiBjIC0gNTU7XG4gICAgLy8gJ2EnIC0gJ2YnXG4gICAgfSBlbHNlIGlmIChjID49IDk3ICYmIGMgPD0gMTAyKSB7XG4gICAgICByZXR1cm4gYyAtIDg3O1xuICAgIC8vICcwJyAtICc5J1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKGMgLSA0OCkgJiAweGY7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VIZXhCeXRlIChzdHJpbmcsIGxvd2VyQm91bmQsIGluZGV4KSB7XG4gICAgdmFyIHIgPSBwYXJzZUhleDRCaXRzKHN0cmluZywgaW5kZXgpO1xuICAgIGlmIChpbmRleCAtIDEgPj0gbG93ZXJCb3VuZCkge1xuICAgICAgciB8PSBwYXJzZUhleDRCaXRzKHN0cmluZywgaW5kZXggLSAxKSA8PCA0O1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fcGFyc2VIZXggPSBmdW5jdGlvbiBfcGFyc2VIZXggKG51bWJlciwgc3RhcnQsIGVuZGlhbikge1xuICAgIC8vIENyZWF0ZSBwb3NzaWJseSBiaWdnZXIgYXJyYXkgdG8gZW5zdXJlIHRoYXQgaXQgZml0cyB0aGUgbnVtYmVyXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwoKG51bWJlci5sZW5ndGggLSBzdGFydCkgLyA2KTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIC8vIDI0LWJpdHMgY2h1bmtzXG4gICAgdmFyIG9mZiA9IDA7XG4gICAgdmFyIGogPSAwO1xuXG4gICAgdmFyIHc7XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JlJykge1xuICAgICAgZm9yIChpID0gbnVtYmVyLmxlbmd0aCAtIDE7IGkgPj0gc3RhcnQ7IGkgLT0gMikge1xuICAgICAgICB3ID0gcGFyc2VIZXhCeXRlKG51bWJlciwgc3RhcnQsIGkpIDw8IG9mZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSB3ICYgMHgzZmZmZmZmO1xuICAgICAgICBpZiAob2ZmID49IDE4KSB7XG4gICAgICAgICAgb2ZmIC09IDE4O1xuICAgICAgICAgIGogKz0gMTtcbiAgICAgICAgICB0aGlzLndvcmRzW2pdIHw9IHcgPj4+IDI2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9mZiArPSA4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwYXJzZUxlbmd0aCA9IG51bWJlci5sZW5ndGggLSBzdGFydDtcbiAgICAgIGZvciAoaSA9IHBhcnNlTGVuZ3RoICUgMiA9PT0gMCA/IHN0YXJ0ICsgMSA6IHN0YXJ0OyBpIDwgbnVtYmVyLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIHcgPSBwYXJzZUhleEJ5dGUobnVtYmVyLCBzdGFydCwgaSkgPDwgb2ZmO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9IHcgJiAweDNmZmZmZmY7XG4gICAgICAgIGlmIChvZmYgPj0gMTgpIHtcbiAgICAgICAgICBvZmYgLT0gMTg7XG4gICAgICAgICAgaiArPSAxO1xuICAgICAgICAgIHRoaXMud29yZHNbal0gfD0gdyA+Pj4gMjY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2ZmICs9IDg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcGFyc2VCYXNlIChzdHIsIHN0YXJ0LCBlbmQsIG11bCkge1xuICAgIHZhciByID0gMDtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgZW5kKTtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKSAtIDQ4O1xuXG4gICAgICByICo9IG11bDtcblxuICAgICAgLy8gJ2EnXG4gICAgICBpZiAoYyA+PSA0OSkge1xuICAgICAgICByICs9IGMgLSA0OSArIDB4YTtcblxuICAgICAgLy8gJ0EnXG4gICAgICB9IGVsc2UgaWYgKGMgPj0gMTcpIHtcbiAgICAgICAgciArPSBjIC0gMTcgKyAweGE7XG5cbiAgICAgIC8vICcwJyAtICc5J1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgciArPSBjO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fcGFyc2VCYXNlID0gZnVuY3Rpb24gX3BhcnNlQmFzZSAobnVtYmVyLCBiYXNlLCBzdGFydCkge1xuICAgIC8vIEluaXRpYWxpemUgYXMgemVyb1xuICAgIHRoaXMud29yZHMgPSBbIDAgXTtcbiAgICB0aGlzLmxlbmd0aCA9IDE7XG5cbiAgICAvLyBGaW5kIGxlbmd0aCBvZiBsaW1iIGluIGJhc2VcbiAgICBmb3IgKHZhciBsaW1iTGVuID0gMCwgbGltYlBvdyA9IDE7IGxpbWJQb3cgPD0gMHgzZmZmZmZmOyBsaW1iUG93ICo9IGJhc2UpIHtcbiAgICAgIGxpbWJMZW4rKztcbiAgICB9XG4gICAgbGltYkxlbi0tO1xuICAgIGxpbWJQb3cgPSAobGltYlBvdyAvIGJhc2UpIHwgMDtcblxuICAgIHZhciB0b3RhbCA9IG51bWJlci5sZW5ndGggLSBzdGFydDtcbiAgICB2YXIgbW9kID0gdG90YWwgJSBsaW1iTGVuO1xuICAgIHZhciBlbmQgPSBNYXRoLm1pbih0b3RhbCwgdG90YWwgLSBtb2QpICsgc3RhcnQ7XG5cbiAgICB2YXIgd29yZCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IGxpbWJMZW4pIHtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBpICsgbGltYkxlbiwgYmFzZSk7XG5cbiAgICAgIHRoaXMuaW11bG4obGltYlBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1vZCAhPT0gMCkge1xuICAgICAgdmFyIHBvdyA9IDE7XG4gICAgICB3b3JkID0gcGFyc2VCYXNlKG51bWJlciwgaSwgbnVtYmVyLmxlbmd0aCwgYmFzZSk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBtb2Q7IGkrKykge1xuICAgICAgICBwb3cgKj0gYmFzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbXVsbihwb3cpO1xuICAgICAgaWYgKHRoaXMud29yZHNbMF0gKyB3b3JkIDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lhZGRuKHdvcmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKGRlc3QpIHtcbiAgICBkZXN0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlc3Qud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgIH1cbiAgICBkZXN0Lmxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIGRlc3QubmVnYXRpdmUgPSB0aGlzLm5lZ2F0aXZlO1xuICAgIGRlc3QucmVkID0gdGhpcy5yZWQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gY2xvbmUgKCkge1xuICAgIHZhciByID0gbmV3IEJOKG51bGwpO1xuICAgIHRoaXMuY29weShyKTtcbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2V4cGFuZCA9IGZ1bmN0aW9uIF9leHBhbmQgKHNpemUpIHtcbiAgICB3aGlsZSAodGhpcy5sZW5ndGggPCBzaXplKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoKytdID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gUmVtb3ZlIGxlYWRpbmcgYDBgIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zdHJpcCA9IGZ1bmN0aW9uIHN0cmlwICgpIHtcbiAgICB3aGlsZSAodGhpcy5sZW5ndGggPiAxICYmIHRoaXMud29yZHNbdGhpcy5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgdGhpcy5sZW5ndGgtLTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9ub3JtU2lnbiA9IGZ1bmN0aW9uIF9ub3JtU2lnbiAoKSB7XG4gICAgLy8gLTAgPSAwXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICAgIHJldHVybiAodGhpcy5yZWQgPyAnPEJOLVI6ICcgOiAnPEJOOiAnKSArIHRoaXMudG9TdHJpbmcoMTYpICsgJz4nO1xuICB9O1xuXG4gIC8qXG5cbiAgdmFyIHplcm9zID0gW107XG4gIHZhciBncm91cFNpemVzID0gW107XG4gIHZhciBncm91cEJhc2VzID0gW107XG5cbiAgdmFyIHMgPSAnJztcbiAgdmFyIGkgPSAtMTtcbiAgd2hpbGUgKCsraSA8IEJOLndvcmRTaXplKSB7XG4gICAgemVyb3NbaV0gPSBzO1xuICAgIHMgKz0gJzAnO1xuICB9XG4gIGdyb3VwU2l6ZXNbMF0gPSAwO1xuICBncm91cFNpemVzWzFdID0gMDtcbiAgZ3JvdXBCYXNlc1swXSA9IDA7XG4gIGdyb3VwQmFzZXNbMV0gPSAwO1xuICB2YXIgYmFzZSA9IDIgLSAxO1xuICB3aGlsZSAoKytiYXNlIDwgMzYgKyAxKSB7XG4gICAgdmFyIGdyb3VwU2l6ZSA9IDA7XG4gICAgdmFyIGdyb3VwQmFzZSA9IDE7XG4gICAgd2hpbGUgKGdyb3VwQmFzZSA8ICgxIDw8IEJOLndvcmRTaXplKSAvIGJhc2UpIHtcbiAgICAgIGdyb3VwQmFzZSAqPSBiYXNlO1xuICAgICAgZ3JvdXBTaXplICs9IDE7XG4gICAgfVxuICAgIGdyb3VwU2l6ZXNbYmFzZV0gPSBncm91cFNpemU7XG4gICAgZ3JvdXBCYXNlc1tiYXNlXSA9IGdyb3VwQmFzZTtcbiAgfVxuXG4gICovXG5cbiAgdmFyIHplcm9zID0gW1xuICAgICcnLFxuICAgICcwJyxcbiAgICAnMDAnLFxuICAgICcwMDAnLFxuICAgICcwMDAwJyxcbiAgICAnMDAwMDAnLFxuICAgICcwMDAwMDAnLFxuICAgICcwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJ1xuICBdO1xuXG4gIHZhciBncm91cFNpemVzID0gW1xuICAgIDAsIDAsXG4gICAgMjUsIDE2LCAxMiwgMTEsIDEwLCA5LCA4LFxuICAgIDgsIDcsIDcsIDcsIDcsIDYsIDYsXG4gICAgNiwgNiwgNiwgNiwgNiwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDVcbiAgXTtcblxuICB2YXIgZ3JvdXBCYXNlcyA9IFtcbiAgICAwLCAwLFxuICAgIDMzNTU0NDMyLCA0MzA0NjcyMSwgMTY3NzcyMTYsIDQ4ODI4MTI1LCA2MDQ2NjE3NiwgNDAzNTM2MDcsIDE2Nzc3MjE2LFxuICAgIDQzMDQ2NzIxLCAxMDAwMDAwMCwgMTk0ODcxNzEsIDM1ODMxODA4LCA2Mjc0ODUxNywgNzUyOTUzNiwgMTEzOTA2MjUsXG4gICAgMTY3NzcyMTYsIDI0MTM3NTY5LCAzNDAxMjIyNCwgNDcwNDU4ODEsIDY0MDAwMDAwLCA0MDg0MTAxLCA1MTUzNjMyLFxuICAgIDY0MzYzNDMsIDc5NjI2MjQsIDk3NjU2MjUsIDExODgxMzc2LCAxNDM0ODkwNywgMTcyMTAzNjgsIDIwNTExMTQ5LFxuICAgIDI0MzAwMDAwLCAyODYyOTE1MSwgMzM1NTQ0MzIsIDM5MTM1MzkzLCA0NTQzNTQyNCwgNTI1MjE4NzUsIDYwNDY2MTc2XG4gIF07XG5cbiAgQk4ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKGJhc2UsIHBhZGRpbmcpIHtcbiAgICBiYXNlID0gYmFzZSB8fCAxMDtcbiAgICBwYWRkaW5nID0gcGFkZGluZyB8IDAgfHwgMTtcblxuICAgIHZhciBvdXQ7XG4gICAgaWYgKGJhc2UgPT09IDE2IHx8IGJhc2UgPT09ICdoZXgnKSB7XG4gICAgICBvdXQgPSAnJztcbiAgICAgIHZhciBvZmYgPSAwO1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV07XG4gICAgICAgIHZhciB3b3JkID0gKCgodyA8PCBvZmYpIHwgY2FycnkpICYgMHhmZmZmZmYpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgY2FycnkgPSAodyA+Pj4gKDI0IC0gb2ZmKSkgJiAweGZmZmZmZjtcbiAgICAgICAgaWYgKGNhcnJ5ICE9PSAwIHx8IGkgIT09IHRoaXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIG91dCA9IHplcm9zWzYgLSB3b3JkLmxlbmd0aF0gKyB3b3JkICsgb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCA9IHdvcmQgKyBvdXQ7XG4gICAgICAgIH1cbiAgICAgICAgb2ZmICs9IDI7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgICAgb3V0ID0gY2FycnkudG9TdHJpbmcoMTYpICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpIHtcbiAgICAgIC8vIHZhciBncm91cFNpemUgPSBNYXRoLmZsb29yKEJOLndvcmRTaXplICogTWF0aC5MTjIgLyBNYXRoLmxvZyhiYXNlKSk7XG4gICAgICB2YXIgZ3JvdXBTaXplID0gZ3JvdXBTaXplc1tiYXNlXTtcbiAgICAgIC8vIHZhciBncm91cEJhc2UgPSBNYXRoLnBvdyhiYXNlLCBncm91cFNpemUpO1xuICAgICAgdmFyIGdyb3VwQmFzZSA9IGdyb3VwQmFzZXNbYmFzZV07XG4gICAgICBvdXQgPSAnJztcbiAgICAgIHZhciBjID0gdGhpcy5jbG9uZSgpO1xuICAgICAgYy5uZWdhdGl2ZSA9IDA7XG4gICAgICB3aGlsZSAoIWMuaXNaZXJvKCkpIHtcbiAgICAgICAgdmFyIHIgPSBjLm1vZG4oZ3JvdXBCYXNlKS50b1N0cmluZyhiYXNlKTtcbiAgICAgICAgYyA9IGMuaWRpdm4oZ3JvdXBCYXNlKTtcblxuICAgICAgICBpZiAoIWMuaXNaZXJvKCkpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1tncm91cFNpemUgLSByLmxlbmd0aF0gKyByICsgb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCA9IHIgKyBvdXQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChvdXQubGVuZ3RoICUgcGFkZGluZyAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnLScgKyBvdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGFzc2VydChmYWxzZSwgJ0Jhc2Ugc2hvdWxkIGJlIGJldHdlZW4gMiBhbmQgMzYnKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9OdW1iZXIgPSBmdW5jdGlvbiB0b051bWJlciAoKSB7XG4gICAgdmFyIHJldCA9IHRoaXMud29yZHNbMF07XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAyKSB7XG4gICAgICByZXQgKz0gdGhpcy53b3Jkc1sxXSAqIDB4NDAwMDAwMDtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID09PSAzICYmIHRoaXMud29yZHNbMl0gPT09IDB4MDEpIHtcbiAgICAgIC8vIE5PVEU6IGF0IHRoaXMgc3RhZ2UgaXQgaXMga25vd24gdGhhdCB0aGUgdG9wIGJpdCBpcyBzZXRcbiAgICAgIHJldCArPSAweDEwMDAwMDAwMDAwMDAwICsgKHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPiAyKSB7XG4gICAgICBhc3NlcnQoZmFsc2UsICdOdW1iZXIgY2FuIG9ubHkgc2FmZWx5IHN0b3JlIHVwIHRvIDUzIGJpdHMnKTtcbiAgICB9XG4gICAgcmV0dXJuICh0aGlzLm5lZ2F0aXZlICE9PSAwKSA/IC1yZXQgOiByZXQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoMTYpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0J1ZmZlciA9IGZ1bmN0aW9uIHRvQnVmZmVyIChlbmRpYW4sIGxlbmd0aCkge1xuICAgIGFzc2VydCh0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJyk7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQnVmZmVyLCBlbmRpYW4sIGxlbmd0aCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiB0b0FycmF5IChlbmRpYW4sIGxlbmd0aCkge1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEFycmF5LCBlbmRpYW4sIGxlbmd0aCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQXJyYXlMaWtlID0gZnVuY3Rpb24gdG9BcnJheUxpa2UgKEFycmF5VHlwZSwgZW5kaWFuLCBsZW5ndGgpIHtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRoaXMuYnl0ZUxlbmd0aCgpO1xuICAgIHZhciByZXFMZW5ndGggPSBsZW5ndGggfHwgTWF0aC5tYXgoMSwgYnl0ZUxlbmd0aCk7XG4gICAgYXNzZXJ0KGJ5dGVMZW5ndGggPD0gcmVxTGVuZ3RoLCAnYnl0ZSBhcnJheSBsb25nZXIgdGhhbiBkZXNpcmVkIGxlbmd0aCcpO1xuICAgIGFzc2VydChyZXFMZW5ndGggPiAwLCAnUmVxdWVzdGVkIGFycmF5IGxlbmd0aCA8PSAwJyk7XG5cbiAgICB0aGlzLnN0cmlwKCk7XG4gICAgdmFyIGxpdHRsZUVuZGlhbiA9IGVuZGlhbiA9PT0gJ2xlJztcbiAgICB2YXIgcmVzID0gbmV3IEFycmF5VHlwZShyZXFMZW5ndGgpO1xuXG4gICAgdmFyIGIsIGk7XG4gICAgdmFyIHEgPSB0aGlzLmNsb25lKCk7XG4gICAgaWYgKCFsaXR0bGVFbmRpYW4pIHtcbiAgICAgIC8vIEFzc3VtZSBiaWctZW5kaWFuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgcmVxTGVuZ3RoIC0gYnl0ZUxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7ICFxLmlzWmVybygpOyBpKyspIHtcbiAgICAgICAgYiA9IHEuYW5kbG4oMHhmZik7XG4gICAgICAgIHEuaXVzaHJuKDgpO1xuXG4gICAgICAgIHJlc1tyZXFMZW5ndGggLSBpIC0gMV0gPSBiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGkgPSAwOyAhcS5pc1plcm8oKTsgaSsrKSB7XG4gICAgICAgIGIgPSBxLmFuZGxuKDB4ZmYpO1xuICAgICAgICBxLml1c2hybig4KTtcblxuICAgICAgICByZXNbaV0gPSBiO1xuICAgICAgfVxuXG4gICAgICBmb3IgKDsgaSA8IHJlcUxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBpZiAoTWF0aC5jbHozMikge1xuICAgIEJOLnByb3RvdHlwZS5fY291bnRCaXRzID0gZnVuY3Rpb24gX2NvdW50Qml0cyAodykge1xuICAgICAgcmV0dXJuIDMyIC0gTWF0aC5jbHozMih3KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIEJOLnByb3RvdHlwZS5fY291bnRCaXRzID0gZnVuY3Rpb24gX2NvdW50Qml0cyAodykge1xuICAgICAgdmFyIHQgPSB3O1xuICAgICAgdmFyIHIgPSAwO1xuICAgICAgaWYgKHQgPj0gMHgxMDAwKSB7XG4gICAgICAgIHIgKz0gMTM7XG4gICAgICAgIHQgPj4+PSAxMztcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4NDApIHtcbiAgICAgICAgciArPSA3O1xuICAgICAgICB0ID4+Pj0gNztcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4OCkge1xuICAgICAgICByICs9IDQ7XG4gICAgICAgIHQgPj4+PSA0O1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHgwMikge1xuICAgICAgICByICs9IDI7XG4gICAgICAgIHQgPj4+PSAyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHIgKyB0O1xuICAgIH07XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3plcm9CaXRzID0gZnVuY3Rpb24gX3plcm9CaXRzICh3KSB7XG4gICAgLy8gU2hvcnQtY3V0XG4gICAgaWYgKHcgPT09IDApIHJldHVybiAyNjtcblxuICAgIHZhciB0ID0gdztcbiAgICB2YXIgciA9IDA7XG4gICAgaWYgKCh0ICYgMHgxZmZmKSA9PT0gMCkge1xuICAgICAgciArPSAxMztcbiAgICAgIHQgPj4+PSAxMztcbiAgICB9XG4gICAgaWYgKCh0ICYgMHg3ZikgPT09IDApIHtcbiAgICAgIHIgKz0gNztcbiAgICAgIHQgPj4+PSA3O1xuICAgIH1cbiAgICBpZiAoKHQgJiAweGYpID09PSAwKSB7XG4gICAgICByICs9IDQ7XG4gICAgICB0ID4+Pj0gNDtcbiAgICB9XG4gICAgaWYgKCh0ICYgMHgzKSA9PT0gMCkge1xuICAgICAgciArPSAyO1xuICAgICAgdCA+Pj49IDI7XG4gICAgfVxuICAgIGlmICgodCAmIDB4MSkgPT09IDApIHtcbiAgICAgIHIrKztcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG51bWJlciBvZiB1c2VkIGJpdHMgaW4gYSBCTlxuICBCTi5wcm90b3R5cGUuYml0TGVuZ3RoID0gZnVuY3Rpb24gYml0TGVuZ3RoICgpIHtcbiAgICB2YXIgdyA9IHRoaXMud29yZHNbdGhpcy5sZW5ndGggLSAxXTtcbiAgICB2YXIgaGkgPSB0aGlzLl9jb3VudEJpdHModyk7XG4gICAgcmV0dXJuICh0aGlzLmxlbmd0aCAtIDEpICogMjYgKyBoaTtcbiAgfTtcblxuICBmdW5jdGlvbiB0b0JpdEFycmF5IChudW0pIHtcbiAgICB2YXIgdyA9IG5ldyBBcnJheShudW0uYml0TGVuZ3RoKCkpO1xuXG4gICAgZm9yICh2YXIgYml0ID0gMDsgYml0IDwgdy5sZW5ndGg7IGJpdCsrKSB7XG4gICAgICB2YXIgb2ZmID0gKGJpdCAvIDI2KSB8IDA7XG4gICAgICB2YXIgd2JpdCA9IGJpdCAlIDI2O1xuXG4gICAgICB3W2JpdF0gPSAobnVtLndvcmRzW29mZl0gJiAoMSA8PCB3Yml0KSkgPj4+IHdiaXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHc7XG4gIH1cblxuICAvLyBOdW1iZXIgb2YgdHJhaWxpbmcgemVybyBiaXRzXG4gIEJOLnByb3RvdHlwZS56ZXJvQml0cyA9IGZ1bmN0aW9uIHplcm9CaXRzICgpIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIDA7XG5cbiAgICB2YXIgciA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYiA9IHRoaXMuX3plcm9CaXRzKHRoaXMud29yZHNbaV0pO1xuICAgICAgciArPSBiO1xuICAgICAgaWYgKGIgIT09IDI2KSBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmJ5dGVMZW5ndGggPSBmdW5jdGlvbiBieXRlTGVuZ3RoICgpIHtcbiAgICByZXR1cm4gTWF0aC5jZWlsKHRoaXMuYml0TGVuZ3RoKCkgLyA4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9Ud29zID0gZnVuY3Rpb24gdG9Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5hYnMoKS5pbm90bih3aWR0aCkuaWFkZG4oMSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZyb21Ud29zID0gZnVuY3Rpb24gZnJvbVR3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMudGVzdG4od2lkdGggLSAxKSkge1xuICAgICAgcmV0dXJuIHRoaXMubm90bih3aWR0aCkuaWFkZG4oMSkuaW5lZygpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc05lZyA9IGZ1bmN0aW9uIGlzTmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5uZWdhdGl2ZSAhPT0gMDtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5lZygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbmVnID0gZnVuY3Rpb24gaW5lZyAoKSB7XG4gICAgaWYgKCF0aGlzLmlzWmVybygpKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gT3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1b3IgPSBmdW5jdGlvbiBpdW9yIChudW0pIHtcbiAgICB3aGlsZSAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoKytdID0gMDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gfCBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW9yID0gZnVuY3Rpb24gaW9yIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdW9yKG51bSk7XG4gIH07XG5cbiAgLy8gT3IgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLm9yID0gZnVuY3Rpb24gb3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaW9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLmlvcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW9yID0gZnVuY3Rpb24gdW9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1b3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVvcih0aGlzKTtcbiAgfTtcblxuICAvLyBBbmQgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1YW5kID0gZnVuY3Rpb24gaXVhbmQgKG51bSkge1xuICAgIC8vIGIgPSBtaW4tbGVuZ3RoKG51bSwgdGhpcylcbiAgICB2YXIgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldICYgbnVtLndvcmRzW2ldO1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYi5sZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pYW5kID0gZnVuY3Rpb24gaWFuZCAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVhbmQobnVtKTtcbiAgfTtcblxuICAvLyBBbmQgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmFuZCA9IGZ1bmN0aW9uIGFuZCAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYW5kKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLmlhbmQodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVhbmQgPSBmdW5jdGlvbiB1YW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1YW5kKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1YW5kKHRoaXMpO1xuICB9O1xuXG4gIC8vIFhvciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXV4b3IgPSBmdW5jdGlvbiBpdXhvciAobnVtKSB7XG4gICAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICAgIHZhciBhO1xuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV0gXiBiLndvcmRzW2ldO1xuICAgIH1cblxuICAgIGlmICh0aGlzICE9PSBhKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBhLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLml4b3IgPSBmdW5jdGlvbiBpeG9yIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXhvcihudW0pO1xuICB9O1xuXG4gIC8vIFhvciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUueG9yID0gZnVuY3Rpb24geG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml4b3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXhvcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXhvciA9IGZ1bmN0aW9uIHV4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXV4b3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXV4b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gTm90IGBgdGhpc2BgIHdpdGggYGB3aWR0aGBgIGJpdHdpZHRoXG4gIEJOLnByb3RvdHlwZS5pbm90biA9IGZ1bmN0aW9uIGlub3RuICh3aWR0aCkge1xuICAgIGFzc2VydCh0eXBlb2Ygd2lkdGggPT09ICdudW1iZXInICYmIHdpZHRoID49IDApO1xuXG4gICAgdmFyIGJ5dGVzTmVlZGVkID0gTWF0aC5jZWlsKHdpZHRoIC8gMjYpIHwgMDtcbiAgICB2YXIgYml0c0xlZnQgPSB3aWR0aCAlIDI2O1xuXG4gICAgLy8gRXh0ZW5kIHRoZSBidWZmZXIgd2l0aCBsZWFkaW5nIHplcm9lc1xuICAgIHRoaXMuX2V4cGFuZChieXRlc05lZWRlZCk7XG5cbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICBieXRlc05lZWRlZC0tO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBjb21wbGV0ZSB3b3Jkc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXNOZWVkZWQ7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSB0aGUgcmVzaWR1ZVxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmICgweDNmZmZmZmYgPj4gKDI2IC0gYml0c0xlZnQpKTtcbiAgICB9XG5cbiAgICAvLyBBbmQgcmVtb3ZlIGxlYWRpbmcgemVyb2VzXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubm90biA9IGZ1bmN0aW9uIG5vdG4gKHdpZHRoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbm90bih3aWR0aCk7XG4gIH07XG5cbiAgLy8gU2V0IGBiaXRgIG9mIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc2V0biA9IGZ1bmN0aW9uIHNldG4gKGJpdCwgdmFsKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInICYmIGJpdCA+PSAwKTtcblxuICAgIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgICB2YXIgd2JpdCA9IGJpdCAlIDI2O1xuXG4gICAgdGhpcy5fZXhwYW5kKG9mZiArIDEpO1xuXG4gICAgaWYgKHZhbCkge1xuICAgICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdIHwgKDEgPDwgd2JpdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29yZHNbb2ZmXSA9IHRoaXMud29yZHNbb2ZmXSAmIH4oMSA8PCB3Yml0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIEFkZCBgbnVtYCB0byBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkIChudW0pIHtcbiAgICB2YXIgcjtcblxuICAgIC8vIG5lZ2F0aXZlICsgcG9zaXRpdmVcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG5cbiAgICAvLyBwb3NpdGl2ZSArIG5lZ2F0aXZlXG4gICAgfSBlbHNlIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcbiAgICB9XG5cbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgKGIud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9IHIgPj4+IDI2O1xuICAgIH1cbiAgICBmb3IgKDsgY2FycnkgIT09IDAgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBhLmxlbmd0aDtcbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGhdID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIC8vIENvcHkgdGhlIHJlc3Qgb2YgdGhlIHdvcmRzXG4gICAgfSBlbHNlIGlmIChhICE9PSB0aGlzKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChudW0pIHtcbiAgICB2YXIgcmVzO1xuICAgIGlmIChudW0ubmVnYXRpdmUgIT09IDAgJiYgdGhpcy5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IHRoaXMuc3ViKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgXj0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfSBlbHNlIGlmIChudW0ubmVnYXRpdmUgPT09IDAgJiYgdGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXMgPSBudW0uc3ViKHRoaXMpO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFkZChudW0pO1xuXG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLmlhZGQodGhpcyk7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlzdWIgPSBmdW5jdGlvbiBpc3ViIChudW0pIHtcbiAgICAvLyB0aGlzIC0gKC1udW0pID0gdGhpcyArIG51bVxuICAgIGlmIChudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICB2YXIgciA9IHRoaXMuaWFkZChudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuXG4gICAgLy8gLXRoaXMgLSBudW0gPSAtKHRoaXMgKyBudW0pXG4gICAgfSBlbHNlIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZChudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcbiAgICB9XG5cbiAgICAvLyBBdCB0aGlzIHBvaW50IGJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmVcbiAgICB2YXIgY21wID0gdGhpcy5jbXAobnVtKTtcblxuICAgIC8vIE9wdGltaXphdGlvbiAtIHplcm9pZnlcbiAgICBpZiAoY21wID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gYSA+IGJcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoY21wID4gMCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApIC0gKGIud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIC8vIENvcHkgcmVzdCBvZiB0aGUgd29yZHNcbiAgICBpZiAoY2FycnkgPT09IDAgJiYgaSA8IGEubGVuZ3RoICYmIGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGgubWF4KHRoaXMubGVuZ3RoLCBpKTtcblxuICAgIGlmIChhICE9PSB0aGlzKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXN1YihudW0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHNtYWxsTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgb3V0Lm5lZ2F0aXZlID0gbnVtLm5lZ2F0aXZlIF4gc2VsZi5uZWdhdGl2ZTtcbiAgICB2YXIgbGVuID0gKHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aCkgfCAwO1xuICAgIG91dC5sZW5ndGggPSBsZW47XG4gICAgbGVuID0gKGxlbiAtIDEpIHwgMDtcblxuICAgIC8vIFBlZWwgb25lIGl0ZXJhdGlvbiAoY29tcGlsZXIgY2FuJ3QgZG8gaXQsIGJlY2F1c2Ugb2YgY29kZSBjb21wbGV4aXR5KVxuICAgIHZhciBhID0gc2VsZi53b3Jkc1swXSB8IDA7XG4gICAgdmFyIGIgPSBudW0ud29yZHNbMF0gfCAwO1xuICAgIHZhciByID0gYSAqIGI7XG5cbiAgICB2YXIgbG8gPSByICYgMHgzZmZmZmZmO1xuICAgIHZhciBjYXJyeSA9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgb3V0LndvcmRzWzBdID0gbG87XG5cbiAgICBmb3IgKHZhciBrID0gMTsgayA8IGxlbjsgaysrKSB7XG4gICAgICAvLyBTdW0gYWxsIHdvcmRzIHdpdGggdGhlIHNhbWUgYGkgKyBqID0ga2AgYW5kIGFjY3VtdWxhdGUgYG5jYXJyeWAsXG4gICAgICAvLyBub3RlIHRoYXQgbmNhcnJ5IGNvdWxkIGJlID49IDB4M2ZmZmZmZlxuICAgICAgdmFyIG5jYXJyeSA9IGNhcnJ5ID4+PiAyNjtcbiAgICAgIHZhciByd29yZCA9IGNhcnJ5ICYgMHgzZmZmZmZmO1xuICAgICAgdmFyIG1heEogPSBNYXRoLm1pbihrLCBudW0ubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBqID0gTWF0aC5tYXgoMCwgayAtIHNlbGYubGVuZ3RoICsgMSk7IGogPD0gbWF4SjsgaisrKSB7XG4gICAgICAgIHZhciBpID0gKGsgLSBqKSB8IDA7XG4gICAgICAgIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHIgPSBhICogYiArIHJ3b3JkO1xuICAgICAgICBuY2FycnkgKz0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgICAgcndvcmQgPSByICYgMHgzZmZmZmZmO1xuICAgICAgfVxuICAgICAgb3V0LndvcmRzW2tdID0gcndvcmQgfCAwO1xuICAgICAgY2FycnkgPSBuY2FycnkgfCAwO1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5IHwgMDtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfVxuXG4gIC8vIFRPRE8oaW5kdXRueSk6IGl0IG1heSBiZSByZWFzb25hYmxlIHRvIG9taXQgaXQgZm9yIHVzZXJzIHdobyBkb24ndCBuZWVkXG4gIC8vIHRvIHdvcmsgd2l0aCAyNTYtYml0IG51bWJlcnMsIG90aGVyd2lzZSBpdCBnaXZlcyAyMCUgaW1wcm92ZW1lbnQgZm9yIDI1Ni1iaXRcbiAgLy8gbXVsdGlwbGljYXRpb24gKGxpa2UgZWxsaXB0aWMgc2VjcDI1NmsxKS5cbiAgdmFyIGNvbWIxME11bFRvID0gZnVuY3Rpb24gY29tYjEwTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgdmFyIGEgPSBzZWxmLndvcmRzO1xuICAgIHZhciBiID0gbnVtLndvcmRzO1xuICAgIHZhciBvID0gb3V0LndvcmRzO1xuICAgIHZhciBjID0gMDtcbiAgICB2YXIgbG87XG4gICAgdmFyIG1pZDtcbiAgICB2YXIgaGk7XG4gICAgdmFyIGEwID0gYVswXSB8IDA7XG4gICAgdmFyIGFsMCA9IGEwICYgMHgxZmZmO1xuICAgIHZhciBhaDAgPSBhMCA+Pj4gMTM7XG4gICAgdmFyIGExID0gYVsxXSB8IDA7XG4gICAgdmFyIGFsMSA9IGExICYgMHgxZmZmO1xuICAgIHZhciBhaDEgPSBhMSA+Pj4gMTM7XG4gICAgdmFyIGEyID0gYVsyXSB8IDA7XG4gICAgdmFyIGFsMiA9IGEyICYgMHgxZmZmO1xuICAgIHZhciBhaDIgPSBhMiA+Pj4gMTM7XG4gICAgdmFyIGEzID0gYVszXSB8IDA7XG4gICAgdmFyIGFsMyA9IGEzICYgMHgxZmZmO1xuICAgIHZhciBhaDMgPSBhMyA+Pj4gMTM7XG4gICAgdmFyIGE0ID0gYVs0XSB8IDA7XG4gICAgdmFyIGFsNCA9IGE0ICYgMHgxZmZmO1xuICAgIHZhciBhaDQgPSBhNCA+Pj4gMTM7XG4gICAgdmFyIGE1ID0gYVs1XSB8IDA7XG4gICAgdmFyIGFsNSA9IGE1ICYgMHgxZmZmO1xuICAgIHZhciBhaDUgPSBhNSA+Pj4gMTM7XG4gICAgdmFyIGE2ID0gYVs2XSB8IDA7XG4gICAgdmFyIGFsNiA9IGE2ICYgMHgxZmZmO1xuICAgIHZhciBhaDYgPSBhNiA+Pj4gMTM7XG4gICAgdmFyIGE3ID0gYVs3XSB8IDA7XG4gICAgdmFyIGFsNyA9IGE3ICYgMHgxZmZmO1xuICAgIHZhciBhaDcgPSBhNyA+Pj4gMTM7XG4gICAgdmFyIGE4ID0gYVs4XSB8IDA7XG4gICAgdmFyIGFsOCA9IGE4ICYgMHgxZmZmO1xuICAgIHZhciBhaDggPSBhOCA+Pj4gMTM7XG4gICAgdmFyIGE5ID0gYVs5XSB8IDA7XG4gICAgdmFyIGFsOSA9IGE5ICYgMHgxZmZmO1xuICAgIHZhciBhaDkgPSBhOSA+Pj4gMTM7XG4gICAgdmFyIGIwID0gYlswXSB8IDA7XG4gICAgdmFyIGJsMCA9IGIwICYgMHgxZmZmO1xuICAgIHZhciBiaDAgPSBiMCA+Pj4gMTM7XG4gICAgdmFyIGIxID0gYlsxXSB8IDA7XG4gICAgdmFyIGJsMSA9IGIxICYgMHgxZmZmO1xuICAgIHZhciBiaDEgPSBiMSA+Pj4gMTM7XG4gICAgdmFyIGIyID0gYlsyXSB8IDA7XG4gICAgdmFyIGJsMiA9IGIyICYgMHgxZmZmO1xuICAgIHZhciBiaDIgPSBiMiA+Pj4gMTM7XG4gICAgdmFyIGIzID0gYlszXSB8IDA7XG4gICAgdmFyIGJsMyA9IGIzICYgMHgxZmZmO1xuICAgIHZhciBiaDMgPSBiMyA+Pj4gMTM7XG4gICAgdmFyIGI0ID0gYls0XSB8IDA7XG4gICAgdmFyIGJsNCA9IGI0ICYgMHgxZmZmO1xuICAgIHZhciBiaDQgPSBiNCA+Pj4gMTM7XG4gICAgdmFyIGI1ID0gYls1XSB8IDA7XG4gICAgdmFyIGJsNSA9IGI1ICYgMHgxZmZmO1xuICAgIHZhciBiaDUgPSBiNSA+Pj4gMTM7XG4gICAgdmFyIGI2ID0gYls2XSB8IDA7XG4gICAgdmFyIGJsNiA9IGI2ICYgMHgxZmZmO1xuICAgIHZhciBiaDYgPSBiNiA+Pj4gMTM7XG4gICAgdmFyIGI3ID0gYls3XSB8IDA7XG4gICAgdmFyIGJsNyA9IGI3ICYgMHgxZmZmO1xuICAgIHZhciBiaDcgPSBiNyA+Pj4gMTM7XG4gICAgdmFyIGI4ID0gYls4XSB8IDA7XG4gICAgdmFyIGJsOCA9IGI4ICYgMHgxZmZmO1xuICAgIHZhciBiaDggPSBiOCA+Pj4gMTM7XG4gICAgdmFyIGI5ID0gYls5XSB8IDA7XG4gICAgdmFyIGJsOSA9IGI5ICYgMHgxZmZmO1xuICAgIHZhciBiaDkgPSBiOSA+Pj4gMTM7XG5cbiAgICBvdXQubmVnYXRpdmUgPSBzZWxmLm5lZ2F0aXZlIF4gbnVtLm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSAxOTtcbiAgICAvKiBrID0gMCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwwLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgwLCBiaDApO1xuICAgIHZhciB3MCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzAgPj4+IDI2KSkgfCAwO1xuICAgIHcwICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwxLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgxLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMSkpIHwgMDtcbiAgICB2YXIgdzEgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxID4+PiAyNikpIHwgMDtcbiAgICB3MSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDIgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDIsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMiwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMiwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgyKSkgfCAwO1xuICAgIHZhciB3MiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzIgPj4+IDI2KSkgfCAwO1xuICAgIHcyICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMywgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwzLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgzLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgzKSkgfCAwO1xuICAgIHZhciB3MyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzMgPj4+IDI2KSkgfCAwO1xuICAgIHczICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw0LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg0LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNCkpIHwgMDtcbiAgICB2YXIgdzQgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc0ID4+PiAyNikpIHwgMDtcbiAgICB3NCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDUgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDUsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg1KSkgfCAwO1xuICAgIHZhciB3NSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzUgPj4+IDI2KSkgfCAwO1xuICAgIHc1ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNiwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw2LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg2LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg2KSkgfCAwO1xuICAgIHZhciB3NiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzYgPj4+IDI2KSkgfCAwO1xuICAgIHc2ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNywgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw3LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg3LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNykpIHwgMDtcbiAgICB2YXIgdzcgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc3ID4+PiAyNikpIHwgMDtcbiAgICB3NyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDggKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDgsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOCwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg4KSkgfCAwO1xuICAgIHZhciB3OCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzggPj4+IDI2KSkgfCAwO1xuICAgIHc4ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gOSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg5KSkgfCAwO1xuICAgIHZhciB3OSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzkgPj4+IDI2KSkgfCAwO1xuICAgIHc5ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTAgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgxKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwxKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgxKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTAgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMCA+Pj4gMjYpKSB8IDA7XG4gICAgdzEwICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTEgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMik7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgyKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwyKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgyKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzExID4+PiAyNikpIHwgMDtcbiAgICB3MTEgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwzKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDMpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDMpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDMpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg5KSkgfCAwO1xuICAgIHZhciB3MTIgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMiA+Pj4gMjYpKSB8IDA7XG4gICAgdzEyICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTMgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg0KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw0KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg0KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTMgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMyA+Pj4gMjYpKSB8IDA7XG4gICAgdzEzICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTQgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg1KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw1KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg1KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE0ID4+PiAyNikpIHwgMDtcbiAgICB3MTQgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw2KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDYpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDYpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDYpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTUgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNSA+Pj4gMjYpKSB8IDA7XG4gICAgdzE1ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTYgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNyk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg3KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw3KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg3KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg5KSkgfCAwO1xuICAgIHZhciB3MTYgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNiA+Pj4gMjYpKSB8IDA7XG4gICAgdzE2ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTcgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg4KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw4KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg4KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE3ID4+PiAyNikpIHwgMDtcbiAgICB3MTcgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxOCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw5KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDkpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDkpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDkpO1xuICAgIHZhciB3MTggPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxOCA+Pj4gMjYpKSB8IDA7XG4gICAgdzE4ICY9IDB4M2ZmZmZmZjtcbiAgICBvWzBdID0gdzA7XG4gICAgb1sxXSA9IHcxO1xuICAgIG9bMl0gPSB3MjtcbiAgICBvWzNdID0gdzM7XG4gICAgb1s0XSA9IHc0O1xuICAgIG9bNV0gPSB3NTtcbiAgICBvWzZdID0gdzY7XG4gICAgb1s3XSA9IHc3O1xuICAgIG9bOF0gPSB3ODtcbiAgICBvWzldID0gdzk7XG4gICAgb1sxMF0gPSB3MTA7XG4gICAgb1sxMV0gPSB3MTE7XG4gICAgb1sxMl0gPSB3MTI7XG4gICAgb1sxM10gPSB3MTM7XG4gICAgb1sxNF0gPSB3MTQ7XG4gICAgb1sxNV0gPSB3MTU7XG4gICAgb1sxNl0gPSB3MTY7XG4gICAgb1sxN10gPSB3MTc7XG4gICAgb1sxOF0gPSB3MTg7XG4gICAgaWYgKGMgIT09IDApIHtcbiAgICAgIG9bMTldID0gYztcbiAgICAgIG91dC5sZW5ndGgrKztcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfTtcblxuICAvLyBQb2x5ZmlsbCBjb21iXG4gIGlmICghTWF0aC5pbXVsKSB7XG4gICAgY29tYjEwTXVsVG8gPSBzbWFsbE11bFRvO1xuICB9XG5cbiAgZnVuY3Rpb24gYmlnTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgb3V0Lm5lZ2F0aXZlID0gbnVtLm5lZ2F0aXZlIF4gc2VsZi5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0gc2VsZi5sZW5ndGggKyBudW0ubGVuZ3RoO1xuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICB2YXIgaG5jYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBvdXQubGVuZ3RoIC0gMTsgaysrKSB7XG4gICAgICAvLyBTdW0gYWxsIHdvcmRzIHdpdGggdGhlIHNhbWUgYGkgKyBqID0ga2AgYW5kIGFjY3VtdWxhdGUgYG5jYXJyeWAsXG4gICAgICAvLyBub3RlIHRoYXQgbmNhcnJ5IGNvdWxkIGJlID49IDB4M2ZmZmZmZlxuICAgICAgdmFyIG5jYXJyeSA9IGhuY2Fycnk7XG4gICAgICBobmNhcnJ5ID0gMDtcbiAgICAgIHZhciByd29yZCA9IGNhcnJ5ICYgMHgzZmZmZmZmO1xuICAgICAgdmFyIG1heEogPSBNYXRoLm1pbihrLCBudW0ubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBqID0gTWF0aC5tYXgoMCwgayAtIHNlbGYubGVuZ3RoICsgMSk7IGogPD0gbWF4SjsgaisrKSB7XG4gICAgICAgIHZhciBpID0gayAtIGo7XG4gICAgICAgIHZhciBhID0gc2VsZi53b3Jkc1tpXSB8IDA7XG4gICAgICAgIHZhciBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgICAgdmFyIHIgPSBhICogYjtcblxuICAgICAgICB2YXIgbG8gPSByICYgMHgzZmZmZmZmO1xuICAgICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKChyIC8gMHg0MDAwMDAwKSB8IDApKSB8IDA7XG4gICAgICAgIGxvID0gKGxvICsgcndvcmQpIHwgMDtcbiAgICAgICAgcndvcmQgPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArIChsbyA+Pj4gMjYpKSB8IDA7XG5cbiAgICAgICAgaG5jYXJyeSArPSBuY2FycnkgPj4+IDI2O1xuICAgICAgICBuY2FycnkgJj0gMHgzZmZmZmZmO1xuICAgICAgfVxuICAgICAgb3V0LndvcmRzW2tdID0gcndvcmQ7XG4gICAgICBjYXJyeSA9IG5jYXJyeTtcbiAgICAgIG5jYXJyeSA9IGhuY2Fycnk7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgb3V0LndvcmRzW2tdID0gY2Fycnk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5sZW5ndGgtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH1cblxuICBmdW5jdGlvbiBqdW1ib011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIHZhciBmZnRtID0gbmV3IEZGVE0oKTtcbiAgICByZXR1cm4gZmZ0bS5tdWxwKHNlbGYsIG51bSwgb3V0KTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5tdWxUbyA9IGZ1bmN0aW9uIG11bFRvIChudW0sIG91dCkge1xuICAgIHZhciByZXM7XG4gICAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aDtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEwICYmIG51bS5sZW5ndGggPT09IDEwKSB7XG4gICAgICByZXMgPSBjb21iMTBNdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfSBlbHNlIGlmIChsZW4gPCA2Mykge1xuICAgICAgcmVzID0gc21hbGxNdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfSBlbHNlIGlmIChsZW4gPCAxMDI0KSB7XG4gICAgICByZXMgPSBiaWdNdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gQ29vbGV5LVR1a2V5IGFsZ29yaXRobSBmb3IgRkZUXG4gIC8vIHNsaWdodGx5IHJldmlzaXRlZCB0byByZWx5IG9uIGxvb3BpbmcgaW5zdGVhZCBvZiByZWN1cnNpb25cblxuICBmdW5jdGlvbiBGRlRNICh4LCB5KSB7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICB9XG5cbiAgRkZUTS5wcm90b3R5cGUubWFrZVJCVCA9IGZ1bmN0aW9uIG1ha2VSQlQgKE4pIHtcbiAgICB2YXIgdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbCA9IEJOLnByb3RvdHlwZS5fY291bnRCaXRzKE4pIC0gMTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgdFtpXSA9IHRoaXMucmV2QmluKGksIGwsIE4pO1xuICAgIH1cblxuICAgIHJldHVybiB0O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYmluYXJ5LXJldmVyc2VkIHJlcHJlc2VudGF0aW9uIG9mIGB4YFxuICBGRlRNLnByb3RvdHlwZS5yZXZCaW4gPSBmdW5jdGlvbiByZXZCaW4gKHgsIGwsIE4pIHtcbiAgICBpZiAoeCA9PT0gMCB8fCB4ID09PSBOIC0gMSkgcmV0dXJuIHg7XG5cbiAgICB2YXIgcmIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICByYiB8PSAoeCAmIDEpIDw8IChsIC0gaSAtIDEpO1xuICAgICAgeCA+Pj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmI7XG4gIH07XG5cbiAgLy8gUGVyZm9ybXMgXCJ0d2VlZGxpbmdcIiBwaGFzZSwgdGhlcmVmb3JlICdlbXVsYXRpbmcnXG4gIC8vIGJlaGF2aW91ciBvZiB0aGUgcmVjdXJzaXZlIGFsZ29yaXRobVxuICBGRlRNLnByb3RvdHlwZS5wZXJtdXRlID0gZnVuY3Rpb24gcGVybXV0ZSAocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICBydHdzW2ldID0gcndzW3JidFtpXV07XG4gICAgICBpdHdzW2ldID0gaXdzW3JidFtpXV07XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uIHRyYW5zZm9ybSAocndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4sIHJidCkge1xuICAgIHRoaXMucGVybXV0ZShyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKTtcblxuICAgIGZvciAodmFyIHMgPSAxOyBzIDwgTjsgcyA8PD0gMSkge1xuICAgICAgdmFyIGwgPSBzIDw8IDE7XG5cbiAgICAgIHZhciBydHdkZiA9IE1hdGguY29zKDIgKiBNYXRoLlBJIC8gbCk7XG4gICAgICB2YXIgaXR3ZGYgPSBNYXRoLnNpbigyICogTWF0aC5QSSAvIGwpO1xuXG4gICAgICBmb3IgKHZhciBwID0gMDsgcCA8IE47IHAgKz0gbCkge1xuICAgICAgICB2YXIgcnR3ZGZfID0gcnR3ZGY7XG4gICAgICAgIHZhciBpdHdkZl8gPSBpdHdkZjtcblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHM7IGorKykge1xuICAgICAgICAgIHZhciByZSA9IHJ0d3NbcCArIGpdO1xuICAgICAgICAgIHZhciBpZSA9IGl0d3NbcCArIGpdO1xuXG4gICAgICAgICAgdmFyIHJvID0gcnR3c1twICsgaiArIHNdO1xuICAgICAgICAgIHZhciBpbyA9IGl0d3NbcCArIGogKyBzXTtcblxuICAgICAgICAgIHZhciByeCA9IHJ0d2RmXyAqIHJvIC0gaXR3ZGZfICogaW87XG5cbiAgICAgICAgICBpbyA9IHJ0d2RmXyAqIGlvICsgaXR3ZGZfICogcm87XG4gICAgICAgICAgcm8gPSByeDtcblxuICAgICAgICAgIHJ0d3NbcCArIGpdID0gcmUgKyBybztcbiAgICAgICAgICBpdHdzW3AgKyBqXSA9IGllICsgaW87XG5cbiAgICAgICAgICBydHdzW3AgKyBqICsgc10gPSByZSAtIHJvO1xuICAgICAgICAgIGl0d3NbcCArIGogKyBzXSA9IGllIC0gaW87XG5cbiAgICAgICAgICAvKiBqc2hpbnQgbWF4ZGVwdGggOiBmYWxzZSAqL1xuICAgICAgICAgIGlmIChqICE9PSBsKSB7XG4gICAgICAgICAgICByeCA9IHJ0d2RmICogcnR3ZGZfIC0gaXR3ZGYgKiBpdHdkZl87XG5cbiAgICAgICAgICAgIGl0d2RmXyA9IHJ0d2RmICogaXR3ZGZfICsgaXR3ZGYgKiBydHdkZl87XG4gICAgICAgICAgICBydHdkZl8gPSByeDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuZ3Vlc3NMZW4xM2IgPSBmdW5jdGlvbiBndWVzc0xlbjEzYiAobiwgbSkge1xuICAgIHZhciBOID0gTWF0aC5tYXgobSwgbikgfCAxO1xuICAgIHZhciBvZGQgPSBOICYgMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yIChOID0gTiAvIDIgfCAwOyBOOyBOID0gTiA+Pj4gMSkge1xuICAgICAgaSsrO1xuICAgIH1cblxuICAgIHJldHVybiAxIDw8IGkgKyAxICsgb2RkO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmNvbmp1Z2F0ZSA9IGZ1bmN0aW9uIGNvbmp1Z2F0ZSAocndzLCBpd3MsIE4pIHtcbiAgICBpZiAoTiA8PSAxKSByZXR1cm47XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHtcbiAgICAgIHZhciB0ID0gcndzW2ldO1xuXG4gICAgICByd3NbaV0gPSByd3NbTiAtIGkgLSAxXTtcbiAgICAgIHJ3c1tOIC0gaSAtIDFdID0gdDtcblxuICAgICAgdCA9IGl3c1tpXTtcblxuICAgICAgaXdzW2ldID0gLWl3c1tOIC0gaSAtIDFdO1xuICAgICAgaXdzW04gLSBpIC0gMV0gPSAtdDtcbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUubm9ybWFsaXplMTNiID0gZnVuY3Rpb24gbm9ybWFsaXplMTNiICh3cywgTikge1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7XG4gICAgICB2YXIgdyA9IE1hdGgucm91bmQod3NbMiAqIGkgKyAxXSAvIE4pICogMHgyMDAwICtcbiAgICAgICAgTWF0aC5yb3VuZCh3c1syICogaV0gLyBOKSArXG4gICAgICAgIGNhcnJ5O1xuXG4gICAgICB3c1tpXSA9IHcgJiAweDNmZmZmZmY7XG5cbiAgICAgIGlmICh3IDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIGNhcnJ5ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcnJ5ID0gdyAvIDB4NDAwMDAwMCB8IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHdzO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmNvbnZlcnQxM2IgPSBmdW5jdGlvbiBjb252ZXJ0MTNiICh3cywgbGVuLCByd3MsIE4pIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNhcnJ5ID0gY2FycnkgKyAod3NbaV0gfCAwKTtcblxuICAgICAgcndzWzIgKiBpXSA9IGNhcnJ5ICYgMHgxZmZmOyBjYXJyeSA9IGNhcnJ5ID4+PiAxMztcbiAgICAgIHJ3c1syICogaSArIDFdID0gY2FycnkgJiAweDFmZmY7IGNhcnJ5ID0gY2FycnkgPj4+IDEzO1xuICAgIH1cblxuICAgIC8vIFBhZCB3aXRoIHplcm9lc1xuICAgIGZvciAoaSA9IDIgKiBsZW47IGkgPCBOOyArK2kpIHtcbiAgICAgIHJ3c1tpXSA9IDA7XG4gICAgfVxuXG4gICAgYXNzZXJ0KGNhcnJ5ID09PSAwKTtcbiAgICBhc3NlcnQoKGNhcnJ5ICYgfjB4MWZmZikgPT09IDApO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLnN0dWIgPSBmdW5jdGlvbiBzdHViIChOKSB7XG4gICAgdmFyIHBoID0gbmV3IEFycmF5KE4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICBwaFtpXSA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBoO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLm11bHAgPSBmdW5jdGlvbiBtdWxwICh4LCB5LCBvdXQpIHtcbiAgICB2YXIgTiA9IDIgKiB0aGlzLmd1ZXNzTGVuMTNiKHgubGVuZ3RoLCB5Lmxlbmd0aCk7XG5cbiAgICB2YXIgcmJ0ID0gdGhpcy5tYWtlUkJUKE4pO1xuXG4gICAgdmFyIF8gPSB0aGlzLnN0dWIoTik7XG5cbiAgICB2YXIgcndzID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciByd3N0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBpd3N0ID0gbmV3IEFycmF5KE4pO1xuXG4gICAgdmFyIG5yd3MgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIG5yd3N0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBuaXdzdCA9IG5ldyBBcnJheShOKTtcblxuICAgIHZhciBybXdzID0gb3V0LndvcmRzO1xuICAgIHJtd3MubGVuZ3RoID0gTjtcblxuICAgIHRoaXMuY29udmVydDEzYih4LndvcmRzLCB4Lmxlbmd0aCwgcndzLCBOKTtcbiAgICB0aGlzLmNvbnZlcnQxM2IoeS53b3JkcywgeS5sZW5ndGgsIG5yd3MsIE4pO1xuXG4gICAgdGhpcy50cmFuc2Zvcm0ocndzLCBfLCByd3N0LCBpd3N0LCBOLCByYnQpO1xuICAgIHRoaXMudHJhbnNmb3JtKG5yd3MsIF8sIG5yd3N0LCBuaXdzdCwgTiwgcmJ0KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICB2YXIgcnggPSByd3N0W2ldICogbnJ3c3RbaV0gLSBpd3N0W2ldICogbml3c3RbaV07XG4gICAgICBpd3N0W2ldID0gcndzdFtpXSAqIG5pd3N0W2ldICsgaXdzdFtpXSAqIG5yd3N0W2ldO1xuICAgICAgcndzdFtpXSA9IHJ4O1xuICAgIH1cblxuICAgIHRoaXMuY29uanVnYXRlKHJ3c3QsIGl3c3QsIE4pO1xuICAgIHRoaXMudHJhbnNmb3JtKHJ3c3QsIGl3c3QsIHJtd3MsIF8sIE4sIHJidCk7XG4gICAgdGhpcy5jb25qdWdhdGUocm13cywgXywgTik7XG4gICAgdGhpcy5ub3JtYWxpemUxM2Iocm13cywgTik7XG5cbiAgICBvdXQubmVnYXRpdmUgPSB4Lm5lZ2F0aXZlIF4geS5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0geC5sZW5ndGggKyB5Lmxlbmd0aDtcbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgYHRoaXNgIGJ5IGBudW1gXG4gIEJOLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIHRoaXMubXVsVG8obnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIE11bHRpcGx5IGVtcGxveWluZyBGRlRcbiAgQk4ucHJvdG90eXBlLm11bGYgPSBmdW5jdGlvbiBtdWxmIChudW0pIHtcbiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICAgIG91dC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCArIG51bS5sZW5ndGgpO1xuICAgIHJldHVybiBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgfTtcblxuICAvLyBJbi1wbGFjZSBNdWx0aXBsaWNhdGlvblxuICBCTi5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkubXVsVG8obnVtLCB0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW11bG4gPSBmdW5jdGlvbiBpbXVsbiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcblxuICAgIC8vIENhcnJ5XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gKHRoaXMud29yZHNbaV0gfCAwKSAqIG51bTtcbiAgICAgIHZhciBsbyA9ICh3ICYgMHgzZmZmZmZmKSArIChjYXJyeSAmIDB4M2ZmZmZmZik7XG4gICAgICBjYXJyeSA+Pj0gMjY7XG4gICAgICBjYXJyeSArPSAodyAvIDB4NDAwMDAwMCkgfCAwO1xuICAgICAgLy8gTk9URTogbG8gaXMgMjdiaXQgbWF4aW11bVxuICAgICAgY2FycnkgKz0gbG8gPj4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGxvICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubXVsbiA9IGZ1bmN0aW9uIG11bG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW11bG4obnVtKTtcbiAgfTtcblxuICAvLyBgdGhpc2AgKiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNxciA9IGZ1bmN0aW9uIHNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsKHRoaXMpO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIgKCkge1xuICAgIHJldHVybiB0aGlzLmltdWwodGhpcy5jbG9uZSgpKTtcbiAgfTtcblxuICAvLyBNYXRoLnBvdyhgdGhpc2AsIGBudW1gKVxuICBCTi5wcm90b3R5cGUucG93ID0gZnVuY3Rpb24gcG93IChudW0pIHtcbiAgICB2YXIgdyA9IHRvQml0QXJyYXkobnVtKTtcbiAgICBpZiAody5sZW5ndGggPT09IDApIHJldHVybiBuZXcgQk4oMSk7XG5cbiAgICAvLyBTa2lwIGxlYWRpbmcgemVyb2VzXG4gICAgdmFyIHJlcyA9IHRoaXM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3Lmxlbmd0aDsgaSsrLCByZXMgPSByZXMuc3FyKCkpIHtcbiAgICAgIGlmICh3W2ldICE9PSAwKSBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoKytpIDwgdy5sZW5ndGgpIHtcbiAgICAgIGZvciAodmFyIHEgPSByZXMuc3FyKCk7IGkgPCB3Lmxlbmd0aDsgaSsrLCBxID0gcS5zcXIoKSkge1xuICAgICAgICBpZiAod1tpXSA9PT0gMCkgY29udGludWU7XG5cbiAgICAgICAgcmVzID0gcmVzLm11bChxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnQgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1c2hsbiA9IGZ1bmN0aW9uIGl1c2hsbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcbiAgICB2YXIgY2FycnlNYXNrID0gKDB4M2ZmZmZmZiA+Pj4gKDI2IC0gcikpIDw8ICgyNiAtIHIpO1xuICAgIHZhciBpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHZhciBjYXJyeSA9IDA7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBuZXdDYXJyeSA9IHRoaXMud29yZHNbaV0gJiBjYXJyeU1hc2s7XG4gICAgICAgIHZhciBjID0gKCh0aGlzLndvcmRzW2ldIHwgMCkgLSBuZXdDYXJyeSkgPDwgcjtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGMgfCBjYXJyeTtcbiAgICAgICAgY2FycnkgPSBuZXdDYXJyeSA+Pj4gKDI2IC0gcik7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYXJyeSkge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHMgIT09IDApIHtcbiAgICAgIGZvciAoaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgc10gPSB0aGlzLndvcmRzW2ldO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgczsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxlbmd0aCArPSBzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzaGxuID0gZnVuY3Rpb24gaXNobG4gKGJpdHMpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0IGluLXBsYWNlXG4gIC8vIE5PVEU6IGBoaW50YCBpcyBhIGxvd2VzdCBiaXQgYmVmb3JlIHRyYWlsaW5nIHplcm9lc1xuICAvLyBOT1RFOiBpZiBgZXh0ZW5kZWRgIGlzIHByZXNlbnQgLSBpdCB3aWxsIGJlIGZpbGxlZCB3aXRoIGRlc3Ryb3llZCBiaXRzXG4gIEJOLnByb3RvdHlwZS5pdXNocm4gPSBmdW5jdGlvbiBpdXNocm4gKGJpdHMsIGhpbnQsIGV4dGVuZGVkKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciBoO1xuICAgIGlmIChoaW50KSB7XG4gICAgICBoID0gKGhpbnQgLSAoaGludCAlIDI2KSkgLyAyNjtcbiAgICB9IGVsc2Uge1xuICAgICAgaCA9IDA7XG4gICAgfVxuXG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSBNYXRoLm1pbigoYml0cyAtIHIpIC8gMjYsIHRoaXMubGVuZ3RoKTtcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmZiBeICgoMHgzZmZmZmZmID4+PiByKSA8PCByKTtcbiAgICB2YXIgbWFza2VkV29yZHMgPSBleHRlbmRlZDtcblxuICAgIGggLT0gcztcbiAgICBoID0gTWF0aC5tYXgoMCwgaCk7XG5cbiAgICAvLyBFeHRlbmRlZCBtb2RlLCBjb3B5IG1hc2tlZCBwYXJ0XG4gICAgaWYgKG1hc2tlZFdvcmRzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHM7IGkrKykge1xuICAgICAgICBtYXNrZWRXb3Jkcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG4gICAgICBtYXNrZWRXb3Jkcy5sZW5ndGggPSBzO1xuICAgIH1cblxuICAgIGlmIChzID09PSAwKSB7XG4gICAgICAvLyBOby1vcCwgd2Ugc2hvdWxkIG5vdCBtb3ZlIGFueXRoaW5nIGF0IGFsbFxuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPiBzKSB7XG4gICAgICB0aGlzLmxlbmd0aCAtPSBzO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaSArIHNdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwICYmIChjYXJyeSAhPT0gMCB8fCBpID49IGgpOyBpLS0pIHtcbiAgICAgIHZhciB3b3JkID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKGNhcnJ5IDw8ICgyNiAtIHIpKSB8ICh3b3JkID4+PiByKTtcbiAgICAgIGNhcnJ5ID0gd29yZCAmIG1hc2s7XG4gICAgfVxuXG4gICAgLy8gUHVzaCBjYXJyaWVkIGJpdHMgYXMgYSBtYXNrXG4gICAgaWYgKG1hc2tlZFdvcmRzICYmIGNhcnJ5ICE9PSAwKSB7XG4gICAgICBtYXNrZWRXb3Jkcy53b3Jkc1ttYXNrZWRXb3Jkcy5sZW5ndGgrK10gPSBjYXJyeTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzaHJuID0gZnVuY3Rpb24gaXNocm4gKGJpdHMsIGhpbnQsIGV4dGVuZGVkKSB7XG4gICAgLy8gVE9ETyhpbmR1dG55KTogaW1wbGVtZW50IG1lXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1c2hybihiaXRzLCBoaW50LCBleHRlbmRlZCk7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdFxuICBCTi5wcm90b3R5cGUuc2hsbiA9IGZ1bmN0aW9uIHNobG4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaGxuKGJpdHMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51c2hsbiA9IGZ1bmN0aW9uIHVzaGxuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNobG4oYml0cyk7XG4gIH07XG5cbiAgLy8gU2hpZnQtcmlnaHRcbiAgQk4ucHJvdG90eXBlLnNocm4gPSBmdW5jdGlvbiBzaHJuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hybihiaXRzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXNocm4gPSBmdW5jdGlvbiB1c2hybiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaHJuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFRlc3QgaWYgbiBiaXQgaXMgc2V0XG4gIEJOLnByb3RvdHlwZS50ZXN0biA9IGZ1bmN0aW9uIHRlc3RuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHJldHVybiBmYWxzZTtcblxuICAgIC8vIENoZWNrIGJpdCBhbmQgcmV0dXJuXG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW3NdO1xuXG4gICAgcmV0dXJuICEhKHcgJiBxKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXIgKGluLXBsYWNlKVxuICBCTi5wcm90b3R5cGUuaW1hc2tuID0gZnVuY3Rpb24gaW1hc2tuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDAsICdpbWFza24gd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlIG51bWJlcnMnKTtcblxuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgcysrO1xuICAgIH1cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGgubWluKHMsIHRoaXMubGVuZ3RoKTtcblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICB2YXIgbWFzayA9IDB4M2ZmZmZmZiBeICgoMHgzZmZmZmZmID4+PiByKSA8PCByKTtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGggLSAxXSAmPSBtYXNrO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyXG4gIEJOLnByb3RvdHlwZS5tYXNrbiA9IGZ1bmN0aW9uIG1hc2tuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbWFza24oYml0cyk7XG4gIH07XG5cbiAgLy8gQWRkIHBsYWluIG51bWJlciBgbnVtYCB0byBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmlhZGRuID0gZnVuY3Rpb24gaWFkZG4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG4gICAgaWYgKG51bSA8IDApIHJldHVybiB0aGlzLmlzdWJuKC1udW0pO1xuXG4gICAgLy8gUG9zc2libGUgc2lnbiBjaGFuZ2VcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmICh0aGlzLndvcmRzWzBdIHwgMCkgPCBudW0pIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSA9IG51bSAtICh0aGlzLndvcmRzWzBdIHwgMCk7XG4gICAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlzdWJuKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRob3V0IGNoZWNrc1xuICAgIHJldHVybiB0aGlzLl9pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faWFkZG4gPSBmdW5jdGlvbiBfaWFkZG4gKG51bSkge1xuICAgIHRoaXMud29yZHNbMF0gKz0gbnVtO1xuXG4gICAgLy8gQ2FycnlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoICYmIHRoaXMud29yZHNbaV0gPj0gMHg0MDAwMDAwOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gLT0gMHg0MDAwMDAwO1xuICAgICAgaWYgKGkgPT09IHRoaXMubGVuZ3RoIC0gMSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSsrO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGgubWF4KHRoaXMubGVuZ3RoLCBpICsgMSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBwbGFpbiBudW1iZXIgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmlzdWJuID0gZnVuY3Rpb24gaXN1Ym4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG4gICAgaWYgKG51bSA8IDApIHJldHVybiB0aGlzLmlhZGRuKC1udW0pO1xuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkbihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLndvcmRzWzBdIC09IG51bTtcblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdIDwgMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IC10aGlzLndvcmRzWzBdO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENhcnJ5XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoICYmIHRoaXMud29yZHNbaV0gPCAwOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSArPSAweDQwMDAwMDA7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdIC09IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYWRkbiA9IGZ1bmN0aW9uIGFkZG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFkZG4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuc3VibiA9IGZ1bmN0aW9uIHN1Ym4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXN1Ym4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaWFicyA9IGZ1bmN0aW9uIGlhYnMgKCkge1xuICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFicyA9IGZ1bmN0aW9uIGFicyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWJzKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pc2hsbnN1Ym11bCA9IGZ1bmN0aW9uIF9pc2hsbnN1Ym11bCAobnVtLCBtdWwsIHNoaWZ0KSB7XG4gICAgdmFyIGxlbiA9IG51bS5sZW5ndGggKyBzaGlmdDtcbiAgICB2YXIgaTtcblxuICAgIHRoaXMuX2V4cGFuZChsZW4pO1xuXG4gICAgdmFyIHc7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICB2YXIgcmlnaHQgPSAobnVtLndvcmRzW2ldIHwgMCkgKiBtdWw7XG4gICAgICB3IC09IHJpZ2h0ICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSAodyA+PiAyNikgLSAoKHJpZ2h0IC8gMHg0MDAwMDAwKSB8IDApO1xuICAgICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGkgPCB0aGlzLmxlbmd0aCAtIHNoaWZ0OyBpKyspIHtcbiAgICAgIHcgPSAodGhpcy53b3Jkc1tpICsgc2hpZnRdIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgaWYgKGNhcnJ5ID09PSAwKSByZXR1cm4gdGhpcy5zdHJpcCgpO1xuXG4gICAgLy8gU3VidHJhY3Rpb24gb3ZlcmZsb3dcbiAgICBhc3NlcnQoY2FycnkgPT09IC0xKTtcbiAgICBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHcgPSAtKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX3dvcmREaXYgPSBmdW5jdGlvbiBfd29yZERpdiAobnVtLCBtb2RlKSB7XG4gICAgdmFyIHNoaWZ0ID0gdGhpcy5sZW5ndGggLSBudW0ubGVuZ3RoO1xuXG4gICAgdmFyIGEgPSB0aGlzLmNsb25lKCk7XG4gICAgdmFyIGIgPSBudW07XG5cbiAgICAvLyBOb3JtYWxpemVcbiAgICB2YXIgYmhpID0gYi53b3Jkc1tiLmxlbmd0aCAtIDFdIHwgMDtcbiAgICB2YXIgYmhpQml0cyA9IHRoaXMuX2NvdW50Qml0cyhiaGkpO1xuICAgIHNoaWZ0ID0gMjYgLSBiaGlCaXRzO1xuICAgIGlmIChzaGlmdCAhPT0gMCkge1xuICAgICAgYiA9IGIudXNobG4oc2hpZnQpO1xuICAgICAgYS5pdXNobG4oc2hpZnQpO1xuICAgICAgYmhpID0gYi53b3Jkc1tiLmxlbmd0aCAtIDFdIHwgMDtcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXplIHF1b3RpZW50XG4gICAgdmFyIG0gPSBhLmxlbmd0aCAtIGIubGVuZ3RoO1xuICAgIHZhciBxO1xuXG4gICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICBxID0gbmV3IEJOKG51bGwpO1xuICAgICAgcS5sZW5ndGggPSBtICsgMTtcbiAgICAgIHEud29yZHMgPSBuZXcgQXJyYXkocS5sZW5ndGgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHEud29yZHNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkaWZmID0gYS5jbG9uZSgpLl9pc2hsbnN1Ym11bChiLCAxLCBtKTtcbiAgICBpZiAoZGlmZi5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgYSA9IGRpZmY7XG4gICAgICBpZiAocSkge1xuICAgICAgICBxLndvcmRzW21dID0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBqID0gbSAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICB2YXIgcWogPSAoYS53b3Jkc1tiLmxlbmd0aCArIGpdIHwgMCkgKiAweDQwMDAwMDAgK1xuICAgICAgICAoYS53b3Jkc1tiLmxlbmd0aCArIGogLSAxXSB8IDApO1xuXG4gICAgICAvLyBOT1RFOiAocWogLyBiaGkpIGlzICgweDNmZmZmZmYgKiAweDQwMDAwMDAgKyAweDNmZmZmZmYpIC8gMHgyMDAwMDAwIG1heFxuICAgICAgLy8gKDB4N2ZmZmZmZilcbiAgICAgIHFqID0gTWF0aC5taW4oKHFqIC8gYmhpKSB8IDAsIDB4M2ZmZmZmZik7XG5cbiAgICAgIGEuX2lzaGxuc3VibXVsKGIsIHFqLCBqKTtcbiAgICAgIHdoaWxlIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIHFqLS07XG4gICAgICAgIGEubmVnYXRpdmUgPSAwO1xuICAgICAgICBhLl9pc2hsbnN1Ym11bChiLCAxLCBqKTtcbiAgICAgICAgaWYgKCFhLmlzWmVybygpKSB7XG4gICAgICAgICAgYS5uZWdhdGl2ZSBePSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocSkge1xuICAgICAgICBxLndvcmRzW2pdID0gcWo7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChxKSB7XG4gICAgICBxLnN0cmlwKCk7XG4gICAgfVxuICAgIGEuc3RyaXAoKTtcblxuICAgIC8vIERlbm9ybWFsaXplXG4gICAgaWYgKG1vZGUgIT09ICdkaXYnICYmIHNoaWZ0ICE9PSAwKSB7XG4gICAgICBhLml1c2hybihzaGlmdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRpdjogcSB8fCBudWxsLFxuICAgICAgbW9kOiBhXG4gICAgfTtcbiAgfTtcblxuICAvLyBOT1RFOiAxKSBgbW9kZWAgY2FuIGJlIHNldCB0byBgbW9kYCB0byByZXF1ZXN0IG1vZCBvbmx5LFxuICAvLyAgICAgICB0byBgZGl2YCB0byByZXF1ZXN0IGRpdiBvbmx5LCBvciBiZSBhYnNlbnQgdG9cbiAgLy8gICAgICAgcmVxdWVzdCBib3RoIGRpdiAmIG1vZFxuICAvLyAgICAgICAyKSBgcG9zaXRpdmVgIGlzIHRydWUgaWYgdW5zaWduZWQgbW9kIGlzIHJlcXVlc3RlZFxuICBCTi5wcm90b3R5cGUuZGl2bW9kID0gZnVuY3Rpb24gZGl2bW9kIChudW0sIG1vZGUsIHBvc2l0aXZlKSB7XG4gICAgYXNzZXJ0KCFudW0uaXNaZXJvKCkpO1xuXG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IG5ldyBCTigwKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgZGl2LCBtb2QsIHJlcztcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9kKG51bSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pYWRkKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogbW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5kaXZtb2QobnVtLm5lZygpLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogZGl2LFxuICAgICAgICBtb2Q6IHJlcy5tb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKCh0aGlzLm5lZ2F0aXZlICYgbnVtLm5lZ2F0aXZlKSAhPT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLm5lZygpLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdkaXYnKSB7XG4gICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgICBtb2QuaXN1YihudW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogcmVzLmRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gQm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZSBhdCB0aGlzIHBvaW50XG5cbiAgICAvLyBTdHJpcCBib3RoIG51bWJlcnMgdG8gYXBwcm94aW1hdGUgc2hpZnQgdmFsdWVcbiAgICBpZiAobnVtLmxlbmd0aCA+IHRoaXMubGVuZ3RoIHx8IHRoaXMuY21wKG51bSkgPCAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IG5ldyBCTigwKSxcbiAgICAgICAgbW9kOiB0aGlzXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIFZlcnkgc2hvcnQgcmVkdWN0aW9uXG4gICAgaWYgKG51bS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGlmIChtb2RlID09PSAnZGl2Jykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgICAgbW9kOiBudWxsXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlID09PSAnbW9kJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRpdjogbnVsbCxcbiAgICAgICAgICBtb2Q6IG5ldyBCTih0aGlzLm1vZG4obnVtLndvcmRzWzBdKSlcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RuKG51bS53b3Jkc1swXSkpXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl93b3JkRGl2KG51bSwgbW9kZSk7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgLyBgbnVtYFxuICBCTi5wcm90b3R5cGUuZGl2ID0gZnVuY3Rpb24gZGl2IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnZGl2JywgZmFsc2UpLmRpdjtcbiAgfTtcblxuICAvLyBGaW5kIGB0aGlzYCAlIGBudW1gXG4gIEJOLnByb3RvdHlwZS5tb2QgPSBmdW5jdGlvbiBtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCBmYWxzZSkubW9kO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51bW9kID0gZnVuY3Rpb24gdW1vZCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ21vZCcsIHRydWUpLm1vZDtcbiAgfTtcblxuICAvLyBGaW5kIFJvdW5kKGB0aGlzYCAvIGBudW1gKVxuICBCTi5wcm90b3R5cGUuZGl2Um91bmQgPSBmdW5jdGlvbiBkaXZSb3VuZCAobnVtKSB7XG4gICAgdmFyIGRtID0gdGhpcy5kaXZtb2QobnVtKTtcblxuICAgIC8vIEZhc3QgY2FzZSAtIGV4YWN0IGRpdmlzaW9uXG4gICAgaWYgKGRtLm1vZC5pc1plcm8oKSkgcmV0dXJuIGRtLmRpdjtcblxuICAgIHZhciBtb2QgPSBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5tb2QuaXN1YihudW0pIDogZG0ubW9kO1xuXG4gICAgdmFyIGhhbGYgPSBudW0udXNocm4oMSk7XG4gICAgdmFyIHIyID0gbnVtLmFuZGxuKDEpO1xuICAgIHZhciBjbXAgPSBtb2QuY21wKGhhbGYpO1xuXG4gICAgLy8gUm91bmQgZG93blxuICAgIGlmIChjbXAgPCAwIHx8IHIyID09PSAxICYmIGNtcCA9PT0gMCkgcmV0dXJuIGRtLmRpdjtcblxuICAgIC8vIFJvdW5kIHVwXG4gICAgcmV0dXJuIGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLmRpdi5pc3VibigxKSA6IGRtLmRpdi5pYWRkbigxKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubW9kbiA9IGZ1bmN0aW9uIG1vZG4gKG51bSkge1xuICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmKTtcbiAgICB2YXIgcCA9ICgxIDw8IDI2KSAlIG51bTtcblxuICAgIHZhciBhY2MgPSAwO1xuICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBhY2MgPSAocCAqIGFjYyArICh0aGlzLndvcmRzW2ldIHwgMCkpICUgbnVtO1xuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH07XG5cbiAgLy8gSW4tcGxhY2UgZGl2aXNpb24gYnkgbnVtYmVyXG4gIEJOLnByb3RvdHlwZS5pZGl2biA9IGZ1bmN0aW9uIGlkaXZuIChudW0pIHtcbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeSAqIDB4NDAwMDAwMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAodyAvIG51bSkgfCAwO1xuICAgICAgY2FycnkgPSB3ICUgbnVtO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmRpdm4gPSBmdW5jdGlvbiBkaXZuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlkaXZuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVnY2QgPSBmdW5jdGlvbiBlZ2NkIChwKSB7XG4gICAgYXNzZXJ0KHAubmVnYXRpdmUgPT09IDApO1xuICAgIGFzc2VydCghcC5pc1plcm8oKSk7XG5cbiAgICB2YXIgeCA9IHRoaXM7XG4gICAgdmFyIHkgPSBwLmNsb25lKCk7XG5cbiAgICBpZiAoeC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgeCA9IHgudW1vZChwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IHguY2xvbmUoKTtcbiAgICB9XG5cbiAgICAvLyBBICogeCArIEIgKiB5ID0geFxuICAgIHZhciBBID0gbmV3IEJOKDEpO1xuICAgIHZhciBCID0gbmV3IEJOKDApO1xuXG4gICAgLy8gQyAqIHggKyBEICogeSA9IHlcbiAgICB2YXIgQyA9IG5ldyBCTigwKTtcbiAgICB2YXIgRCA9IG5ldyBCTigxKTtcblxuICAgIHZhciBnID0gMDtcblxuICAgIHdoaWxlICh4LmlzRXZlbigpICYmIHkuaXNFdmVuKCkpIHtcbiAgICAgIHguaXVzaHJuKDEpO1xuICAgICAgeS5pdXNocm4oMSk7XG4gICAgICArK2c7XG4gICAgfVxuXG4gICAgdmFyIHlwID0geS5jbG9uZSgpO1xuICAgIHZhciB4cCA9IHguY2xvbmUoKTtcblxuICAgIHdoaWxlICgheC5pc1plcm8oKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGltID0gMTsgKHgud29yZHNbMF0gJiBpbSkgPT09IDAgJiYgaSA8IDI2OyArK2ksIGltIDw8PSAxKTtcbiAgICAgIGlmIChpID4gMCkge1xuICAgICAgICB4Lml1c2hybihpKTtcbiAgICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgICBpZiAoQS5pc09kZCgpIHx8IEIuaXNPZGQoKSkge1xuICAgICAgICAgICAgQS5pYWRkKHlwKTtcbiAgICAgICAgICAgIEIuaXN1Yih4cCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgQS5pdXNocm4oMSk7XG4gICAgICAgICAgQi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKHkud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKTtcbiAgICAgIGlmIChqID4gMCkge1xuICAgICAgICB5Lml1c2hybihqKTtcbiAgICAgICAgd2hpbGUgKGotLSA+IDApIHtcbiAgICAgICAgICBpZiAoQy5pc09kZCgpIHx8IEQuaXNPZGQoKSkge1xuICAgICAgICAgICAgQy5pYWRkKHlwKTtcbiAgICAgICAgICAgIEQuaXN1Yih4cCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgQy5pdXNocm4oMSk7XG4gICAgICAgICAgRC5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHguY21wKHkpID49IDApIHtcbiAgICAgICAgeC5pc3ViKHkpO1xuICAgICAgICBBLmlzdWIoQyk7XG4gICAgICAgIEIuaXN1YihEKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHkuaXN1Yih4KTtcbiAgICAgICAgQy5pc3ViKEEpO1xuICAgICAgICBELmlzdWIoQik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGE6IEMsXG4gICAgICBiOiBELFxuICAgICAgZ2NkOiB5Lml1c2hsbihnKVxuICAgIH07XG4gIH07XG5cbiAgLy8gVGhpcyBpcyByZWR1Y2VkIGluY2FybmF0aW9uIG9mIHRoZSBiaW5hcnkgRUVBXG4gIC8vIGFib3ZlLCBkZXNpZ25hdGVkIHRvIGludmVydCBtZW1iZXJzIG9mIHRoZVxuICAvLyBfcHJpbWVfIGZpZWxkcyBGKHApIGF0IGEgbWF4aW1hbCBzcGVlZFxuICBCTi5wcm90b3R5cGUuX2ludm1wID0gZnVuY3Rpb24gX2ludm1wIChwKSB7XG4gICAgYXNzZXJ0KHAubmVnYXRpdmUgPT09IDApO1xuICAgIGFzc2VydCghcC5pc1plcm8oKSk7XG5cbiAgICB2YXIgYSA9IHRoaXM7XG4gICAgdmFyIGIgPSBwLmNsb25lKCk7XG5cbiAgICBpZiAoYS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgYSA9IGEudW1vZChwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IGEuY2xvbmUoKTtcbiAgICB9XG5cbiAgICB2YXIgeDEgPSBuZXcgQk4oMSk7XG4gICAgdmFyIHgyID0gbmV3IEJOKDApO1xuXG4gICAgdmFyIGRlbHRhID0gYi5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKGEuY21wbigxKSA+IDAgJiYgYi5jbXBuKDEpID4gMCkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGltID0gMTsgKGEud29yZHNbMF0gJiBpbSkgPT09IDAgJiYgaSA8IDI2OyArK2ksIGltIDw8PSAxKTtcbiAgICAgIGlmIChpID4gMCkge1xuICAgICAgICBhLml1c2hybihpKTtcbiAgICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgICBpZiAoeDEuaXNPZGQoKSkge1xuICAgICAgICAgICAgeDEuaWFkZChkZWx0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeDEuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7IChiLndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgYi5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgyLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgyLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgyLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYS5jbXAoYikgPj0gMCkge1xuICAgICAgICBhLmlzdWIoYik7XG4gICAgICAgIHgxLmlzdWIoeDIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYi5pc3ViKGEpO1xuICAgICAgICB4Mi5pc3ViKHgxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmIChhLmNtcG4oMSkgPT09IDApIHtcbiAgICAgIHJlcyA9IHgxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSB4MjtcbiAgICB9XG5cbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZChwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5nY2QgPSBmdW5jdGlvbiBnY2QgKG51bSkge1xuICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gbnVtLmFicygpO1xuICAgIGlmIChudW0uaXNaZXJvKCkpIHJldHVybiB0aGlzLmFicygpO1xuXG4gICAgdmFyIGEgPSB0aGlzLmNsb25lKCk7XG4gICAgdmFyIGIgPSBudW0uY2xvbmUoKTtcbiAgICBhLm5lZ2F0aXZlID0gMDtcbiAgICBiLm5lZ2F0aXZlID0gMDtcblxuICAgIC8vIFJlbW92ZSBjb21tb24gZmFjdG9yIG9mIHR3b1xuICAgIGZvciAodmFyIHNoaWZ0ID0gMDsgYS5pc0V2ZW4oKSAmJiBiLmlzRXZlbigpOyBzaGlmdCsrKSB7XG4gICAgICBhLml1c2hybigxKTtcbiAgICAgIGIuaXVzaHJuKDEpO1xuICAgIH1cblxuICAgIGRvIHtcbiAgICAgIHdoaWxlIChhLmlzRXZlbigpKSB7XG4gICAgICAgIGEuaXVzaHJuKDEpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKGIuaXNFdmVuKCkpIHtcbiAgICAgICAgYi5pdXNocm4oMSk7XG4gICAgICB9XG5cbiAgICAgIHZhciByID0gYS5jbXAoYik7XG4gICAgICBpZiAociA8IDApIHtcbiAgICAgICAgLy8gU3dhcCBgYWAgYW5kIGBiYCB0byBtYWtlIGBhYCBhbHdheXMgYmlnZ2VyIHRoYW4gYGJgXG4gICAgICAgIHZhciB0ID0gYTtcbiAgICAgICAgYSA9IGI7XG4gICAgICAgIGIgPSB0O1xuICAgICAgfSBlbHNlIGlmIChyID09PSAwIHx8IGIuY21wbigxKSA9PT0gMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgYS5pc3ViKGIpO1xuICAgIH0gd2hpbGUgKHRydWUpO1xuXG4gICAgcmV0dXJuIGIuaXVzaGxuKHNoaWZ0KTtcbiAgfTtcblxuICAvLyBJbnZlcnQgbnVtYmVyIGluIHRoZSBmaWVsZCBGKG51bSlcbiAgQk4ucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5lZ2NkKG51bSkuYS51bW9kKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzRXZlbiA9IGZ1bmN0aW9uIGlzRXZlbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzT2RkID0gZnVuY3Rpb24gaXNPZGQgKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAxO1xuICB9O1xuXG4gIC8vIEFuZCBmaXJzdCB3b3JkIGFuZCBudW1cbiAgQk4ucHJvdG90eXBlLmFuZGxuID0gZnVuY3Rpb24gYW5kbG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLndvcmRzWzBdICYgbnVtO1xuICB9O1xuXG4gIC8vIEluY3JlbWVudCBhdCB0aGUgYml0IHBvc2l0aW9uIGluLWxpbmVcbiAgQk4ucHJvdG90eXBlLmJpbmNuID0gZnVuY3Rpb24gYmluY24gKGJpdCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyk7XG4gICAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICAgIHZhciBxID0gMSA8PCByO1xuXG4gICAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgICAgdGhpcy5fZXhwYW5kKHMgKyAxKTtcbiAgICAgIHRoaXMud29yZHNbc10gfD0gcTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBiaXQgYW5kIHByb3BhZ2F0ZSwgaWYgbmVlZGVkXG4gICAgdmFyIGNhcnJ5ID0gcTtcbiAgICBmb3IgKHZhciBpID0gczsgY2FycnkgIT09IDAgJiYgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB3ICs9IGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+PiAyNjtcbiAgICAgIHcgJj0gMHgzZmZmZmZmO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHc7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzWmVybyA9IGZ1bmN0aW9uIGlzWmVybyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNtcG4gPSBmdW5jdGlvbiBjbXBuIChudW0pIHtcbiAgICB2YXIgbmVnYXRpdmUgPSBudW0gPCAwO1xuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgIW5lZ2F0aXZlKSByZXR1cm4gLTE7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbmVnYXRpdmUpIHJldHVybiAxO1xuXG4gICAgdGhpcy5zdHJpcCgpO1xuXG4gICAgdmFyIHJlcztcbiAgICBpZiAodGhpcy5sZW5ndGggPiAxKSB7XG4gICAgICByZXMgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobmVnYXRpdmUpIHtcbiAgICAgICAgbnVtID0gLW51bTtcbiAgICAgIH1cblxuICAgICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYsICdOdW1iZXIgaXMgdG9vIGJpZycpO1xuXG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbMF0gfCAwO1xuICAgICAgcmVzID0gdyA9PT0gbnVtID8gMCA6IHcgPCBudW0gPyAtMSA6IDE7XG4gICAgfVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb21wYXJlIHR3byBudW1iZXJzIGFuZCByZXR1cm46XG4gIC8vIDEgLSBpZiBgdGhpc2AgPiBgbnVtYFxuICAvLyAwIC0gaWYgYHRoaXNgID09IGBudW1gXG4gIC8vIC0xIC0gaWYgYHRoaXNgIDwgYG51bWBcbiAgQk4ucHJvdG90eXBlLmNtcCA9IGZ1bmN0aW9uIGNtcCAobnVtKSB7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSByZXR1cm4gLTE7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gMTtcblxuICAgIHZhciByZXMgPSB0aGlzLnVjbXAobnVtKTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIC1yZXMgfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gVW5zaWduZWQgY29tcGFyaXNvblxuICBCTi5wcm90b3R5cGUudWNtcCA9IGZ1bmN0aW9uIHVjbXAgKG51bSkge1xuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGhhdmUgdGhlIHNhbWUgc2lnblxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiAxO1xuICAgIGlmICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHJldHVybiAtMTtcblxuICAgIHZhciByZXMgPSAwO1xuICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgYSA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdmFyIGIgPSBudW0ud29yZHNbaV0gfCAwO1xuXG4gICAgICBpZiAoYSA9PT0gYikgY29udGludWU7XG4gICAgICBpZiAoYSA8IGIpIHtcbiAgICAgICAgcmVzID0gLTE7XG4gICAgICB9IGVsc2UgaWYgKGEgPiBiKSB7XG4gICAgICAgIHJlcyA9IDE7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RuID0gZnVuY3Rpb24gZ3RuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ID0gZnVuY3Rpb24gZ3QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAxO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndGVuID0gZnVuY3Rpb24gZ3RlbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID49IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZSA9IGZ1bmN0aW9uIGd0ZSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRuID0gZnVuY3Rpb24gbHRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IC0xO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdCA9IGZ1bmN0aW9uIGx0IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ZW4gPSBmdW5jdGlvbiBsdGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPD0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlID0gZnVuY3Rpb24gbHRlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcW4gPSBmdW5jdGlvbiBlcW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDA7XG4gIH07XG5cbiAgLy9cbiAgLy8gQSByZWR1Y2UgY29udGV4dCwgY291bGQgYmUgdXNpbmcgbW9udGdvbWVyeSBvciBzb21ldGhpbmcgYmV0dGVyLCBkZXBlbmRpbmdcbiAgLy8gb24gdGhlIGBtYCBpdHNlbGYuXG4gIC8vXG4gIEJOLnJlZCA9IGZ1bmN0aW9uIHJlZCAobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBSZWQobnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9SZWQgPSBmdW5jdGlvbiB0b1JlZCAoY3R4KSB7XG4gICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgcmV0dXJuIGN0eC5jb252ZXJ0VG8odGhpcykuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZyb21SZWQgPSBmdW5jdGlvbiBmcm9tUmVkICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdmcm9tUmVkIHdvcmtzIG9ubHkgd2l0aCBudW1iZXJzIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmNvbnZlcnRGcm9tKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZm9yY2VSZWQgPSBmdW5jdGlvbiBfZm9yY2VSZWQgKGN0eCkge1xuICAgIHRoaXMucmVkID0gY3R4O1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mb3JjZVJlZCA9IGZ1bmN0aW9uIGZvcmNlUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIHJldHVybiB0aGlzLl9mb3JjZVJlZChjdHgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRBZGQgPSBmdW5jdGlvbiByZWRBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuYWRkKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElBZGQgPSBmdW5jdGlvbiByZWRJQWRkIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pYWRkKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFN1YiA9IGZ1bmN0aW9uIHJlZFN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zdWIodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVN1YiA9IGZ1bmN0aW9uIHJlZElTdWIgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzdWIodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU2hsID0gZnVuY3Rpb24gcmVkU2hsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTaGwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNobCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRNdWwgPSBmdW5jdGlvbiByZWRNdWwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE11bCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5Mih0aGlzLCBudW0pO1xuICAgIHJldHVybiB0aGlzLnJlZC5tdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSU11bCA9IGZ1bmN0aW9uIHJlZElNdWwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE11bCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5Mih0aGlzLCBudW0pO1xuICAgIHJldHVybiB0aGlzLnJlZC5pbXVsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFNxciA9IGZ1bmN0aW9uIHJlZFNxciAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FyIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zcXIodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElTcXIgPSBmdW5jdGlvbiByZWRJU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3FyIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pc3FyKHRoaXMpO1xuICB9O1xuXG4gIC8vIFNxdWFyZSByb290IG92ZXIgcFxuICBCTi5wcm90b3R5cGUucmVkU3FydCA9IGZ1bmN0aW9uIHJlZFNxcnQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxcnQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcnQodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEludm0gPSBmdW5jdGlvbiByZWRJbnZtICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJbnZtIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pbnZtKHRoaXMpO1xuICB9O1xuXG4gIC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2AgJSBgcmVkIG1vZHVsb2BcbiAgQk4ucHJvdG90eXBlLnJlZE5lZyA9IGZ1bmN0aW9uIHJlZE5lZyAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTmVnIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5uZWcodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFBvdyA9IGZ1bmN0aW9uIHJlZFBvdyAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkICYmICFudW0ucmVkLCAncmVkUG93KG5vcm1hbE51bSknKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQucG93KHRoaXMsIG51bSk7XG4gIH07XG5cbiAgLy8gUHJpbWUgbnVtYmVycyB3aXRoIGVmZmljaWVudCByZWR1Y3Rpb25cbiAgdmFyIHByaW1lcyA9IHtcbiAgICBrMjU2OiBudWxsLFxuICAgIHAyMjQ6IG51bGwsXG4gICAgcDE5MjogbnVsbCxcbiAgICBwMjU1MTk6IG51bGxcbiAgfTtcblxuICAvLyBQc2V1ZG8tTWVyc2VubmUgcHJpbWVcbiAgZnVuY3Rpb24gTVByaW1lIChuYW1lLCBwKSB7XG4gICAgLy8gUCA9IDIgXiBOIC0gS1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5wID0gbmV3IEJOKHAsIDE2KTtcbiAgICB0aGlzLm4gPSB0aGlzLnAuYml0TGVuZ3RoKCk7XG4gICAgdGhpcy5rID0gbmV3IEJOKDEpLml1c2hsbih0aGlzLm4pLmlzdWIodGhpcy5wKTtcblxuICAgIHRoaXMudG1wID0gdGhpcy5fdG1wKCk7XG4gIH1cblxuICBNUHJpbWUucHJvdG90eXBlLl90bXAgPSBmdW5jdGlvbiBfdG1wICgpIHtcbiAgICB2YXIgdG1wID0gbmV3IEJOKG51bGwpO1xuICAgIHRtcC53b3JkcyA9IG5ldyBBcnJheShNYXRoLmNlaWwodGhpcy5uIC8gMTMpKTtcbiAgICByZXR1cm4gdG1wO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuaXJlZHVjZSA9IGZ1bmN0aW9uIGlyZWR1Y2UgKG51bSkge1xuICAgIC8vIEFzc3VtZXMgdGhhdCBgbnVtYCBpcyBsZXNzIHRoYW4gYFBeMmBcbiAgICAvLyBudW0gPSBISSAqICgyIF4gTiAtIEspICsgSEkgKiBLICsgTE8gPSBISSAqIEsgKyBMTyAobW9kIFApXG4gICAgdmFyIHIgPSBudW07XG4gICAgdmFyIHJsZW47XG5cbiAgICBkbyB7XG4gICAgICB0aGlzLnNwbGl0KHIsIHRoaXMudG1wKTtcbiAgICAgIHIgPSB0aGlzLmltdWxLKHIpO1xuICAgICAgciA9IHIuaWFkZCh0aGlzLnRtcCk7XG4gICAgICBybGVuID0gci5iaXRMZW5ndGgoKTtcbiAgICB9IHdoaWxlIChybGVuID4gdGhpcy5uKTtcblxuICAgIHZhciBjbXAgPSBybGVuIDwgdGhpcy5uID8gLTEgOiByLnVjbXAodGhpcy5wKTtcbiAgICBpZiAoY21wID09PSAwKSB7XG4gICAgICByLndvcmRzWzBdID0gMDtcbiAgICAgIHIubGVuZ3RoID0gMTtcbiAgICB9IGVsc2UgaWYgKGNtcCA+IDApIHtcbiAgICAgIHIuaXN1Yih0aGlzLnApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoci5zdHJpcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIHIgaXMgQk4gdjQgaW5zdGFuY2VcbiAgICAgICAgci5zdHJpcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gciBpcyBCTiB2NSBpbnN0YW5jZVxuICAgICAgICByLl9zdHJpcCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dCkge1xuICAgIGlucHV0Lml1c2hybih0aGlzLm4sIDAsIG91dCk7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICByZXR1cm4gbnVtLmltdWwodGhpcy5rKTtcbiAgfTtcblxuICBmdW5jdGlvbiBLMjU2ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnazI1NicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZjMmYnKTtcbiAgfVxuICBpbmhlcml0cyhLMjU2LCBNUHJpbWUpO1xuXG4gIEsyNTYucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXRwdXQpIHtcbiAgICAvLyAyNTYgPSA5ICogMjYgKyAyMlxuICAgIHZhciBtYXNrID0gMHgzZmZmZmY7XG5cbiAgICB2YXIgb3V0TGVuID0gTWF0aC5taW4oaW5wdXQubGVuZ3RoLCA5KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG91dExlbjsgaSsrKSB7XG4gICAgICBvdXRwdXQud29yZHNbaV0gPSBpbnB1dC53b3Jkc1tpXTtcbiAgICB9XG4gICAgb3V0cHV0Lmxlbmd0aCA9IG91dExlbjtcblxuICAgIGlmIChpbnB1dC5sZW5ndGggPD0gOSkge1xuICAgICAgaW5wdXQud29yZHNbMF0gPSAwO1xuICAgICAgaW5wdXQubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTaGlmdCBieSA5IGxpbWJzXG4gICAgdmFyIHByZXYgPSBpbnB1dC53b3Jkc1s5XTtcbiAgICBvdXRwdXQud29yZHNbb3V0cHV0Lmxlbmd0aCsrXSA9IHByZXYgJiBtYXNrO1xuXG4gICAgZm9yIChpID0gMTA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG5leHQgPSBpbnB1dC53b3Jkc1tpXSB8IDA7XG4gICAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gKChuZXh0ICYgbWFzaykgPDwgNCkgfCAocHJldiA+Pj4gMjIpO1xuICAgICAgcHJldiA9IG5leHQ7XG4gICAgfVxuICAgIHByZXYgPj4+PSAyMjtcbiAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gcHJldjtcbiAgICBpZiAocHJldiA9PT0gMCAmJiBpbnB1dC5sZW5ndGggPiAxMCkge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDEwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gOTtcbiAgICB9XG4gIH07XG5cbiAgSzI1Ni5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTAwMDAwM2QxID0gWyAweDQwLCAweDNkMSBdXG4gICAgbnVtLndvcmRzW251bS5sZW5ndGhdID0gMDtcbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aCArIDFdID0gMDtcbiAgICBudW0ubGVuZ3RoICs9IDI7XG5cbiAgICAvLyBib3VuZGVkIGF0OiAweDQwICogMHgzZmZmZmZmICsgMHgzZDAgPSAweDEwMDAwMDM5MFxuICAgIHZhciBsbyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gbnVtLndvcmRzW2ldIHwgMDtcbiAgICAgIGxvICs9IHcgKiAweDNkMTtcbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgbG8gPSB3ICogMHg0MCArICgobG8gLyAweDQwMDAwMDApIHwgMCk7XG4gICAgfVxuXG4gICAgLy8gRmFzdCBsZW5ndGggcmVkdWN0aW9uXG4gICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICBmdW5jdGlvbiBQMjI0ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDIyNCcsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDEnKTtcbiAgfVxuICBpbmhlcml0cyhQMjI0LCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAxOTIgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMTkyJyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZicpO1xuICB9XG4gIGluaGVyaXRzKFAxOTIsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDI1NTE5ICgpIHtcbiAgICAvLyAyIF4gMjU1IC0gMTlcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnMjU1MTknLFxuICAgICAgJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnKTtcbiAgfVxuICBpbmhlcml0cyhQMjU1MTksIE1QcmltZSk7XG5cbiAgUDI1NTE5LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxM1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoaSA9IChudW0ud29yZHNbaV0gfCAwKSAqIDB4MTMgKyBjYXJyeTtcbiAgICAgIHZhciBsbyA9IGhpICYgMHgzZmZmZmZmO1xuICAgICAgaGkgPj4+PSAyNjtcblxuICAgICAgbnVtLndvcmRzW2ldID0gbG87XG4gICAgICBjYXJyeSA9IGhpO1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgLy8gRXhwb3J0ZWQgbW9zdGx5IGZvciB0ZXN0aW5nIHB1cnBvc2VzLCB1c2UgcGxhaW4gbmFtZSBpbnN0ZWFkXG4gIEJOLl9wcmltZSA9IGZ1bmN0aW9uIHByaW1lIChuYW1lKSB7XG4gICAgLy8gQ2FjaGVkIHZlcnNpb24gb2YgcHJpbWVcbiAgICBpZiAocHJpbWVzW25hbWVdKSByZXR1cm4gcHJpbWVzW25hbWVdO1xuXG4gICAgdmFyIHByaW1lO1xuICAgIGlmIChuYW1lID09PSAnazI1NicpIHtcbiAgICAgIHByaW1lID0gbmV3IEsyNTYoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjI0Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDIyNCgpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AxOTInKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMTkyKCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDI1NTE5Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDI1NTE5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwcmltZSAnICsgbmFtZSk7XG4gICAgfVxuICAgIHByaW1lc1tuYW1lXSA9IHByaW1lO1xuXG4gICAgcmV0dXJuIHByaW1lO1xuICB9O1xuXG4gIC8vXG4gIC8vIEJhc2UgcmVkdWN0aW9uIGVuZ2luZVxuICAvL1xuICBmdW5jdGlvbiBSZWQgKG0pIHtcbiAgICBpZiAodHlwZW9mIG0gPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgcHJpbWUgPSBCTi5fcHJpbWUobSk7XG4gICAgICB0aGlzLm0gPSBwcmltZS5wO1xuICAgICAgdGhpcy5wcmltZSA9IHByaW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobS5ndG4oMSksICdtb2R1bHVzIG11c3QgYmUgZ3JlYXRlciB0aGFuIDEnKTtcbiAgICAgIHRoaXMubSA9IG07XG4gICAgICB0aGlzLnByaW1lID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkxID0gZnVuY3Rpb24gX3ZlcmlmeTEgKGEpIHtcbiAgICBhc3NlcnQoYS5uZWdhdGl2ZSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkLCAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTIgPSBmdW5jdGlvbiBfdmVyaWZ5MiAoYSwgYikge1xuICAgIGFzc2VydCgoYS5uZWdhdGl2ZSB8IGIubmVnYXRpdmUpID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQgJiYgYS5yZWQgPT09IGIucmVkLFxuICAgICAgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltb2QgPSBmdW5jdGlvbiBpbW9kIChhKSB7XG4gICAgaWYgKHRoaXMucHJpbWUpIHJldHVybiB0aGlzLnByaW1lLmlyZWR1Y2UoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICAgIHJldHVybiBhLnVtb2QodGhpcy5tKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIGEuY2xvbmUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5tLnN1YihhKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5zdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zaGwgPSBmdW5jdGlvbiBzaGwgKGEsIG51bSkge1xuICAgIHRoaXMuX3ZlcmlmeTEoYSk7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLnVzaGxuKG51bSkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5pbXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLm11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLmltdWwoYSwgYS5jbG9uZSgpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxciA9IGZ1bmN0aW9uIHNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLm11bChhLCBhKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxcnQgPSBmdW5jdGlvbiBzcXJ0IChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgbW9kMyA9IHRoaXMubS5hbmRsbigzKTtcbiAgICBhc3NlcnQobW9kMyAlIDIgPT09IDEpO1xuXG4gICAgLy8gRmFzdCBjYXNlXG4gICAgaWYgKG1vZDMgPT09IDMpIHtcbiAgICAgIHZhciBwb3cgPSB0aGlzLm0uYWRkKG5ldyBCTigxKSkuaXVzaHJuKDIpO1xuICAgICAgcmV0dXJuIHRoaXMucG93KGEsIHBvdyk7XG4gICAgfVxuXG4gICAgLy8gVG9uZWxsaS1TaGFua3MgYWxnb3JpdGhtIChUb3RhbGx5IHVub3B0aW1pemVkIGFuZCBzbG93KVxuICAgIC8vXG4gICAgLy8gRmluZCBRIGFuZCBTLCB0aGF0IFEgKiAyIF4gUyA9IChQIC0gMSlcbiAgICB2YXIgcSA9IHRoaXMubS5zdWJuKDEpO1xuICAgIHZhciBzID0gMDtcbiAgICB3aGlsZSAoIXEuaXNaZXJvKCkgJiYgcS5hbmRsbigxKSA9PT0gMCkge1xuICAgICAgcysrO1xuICAgICAgcS5pdXNocm4oMSk7XG4gICAgfVxuICAgIGFzc2VydCghcS5pc1plcm8oKSk7XG5cbiAgICB2YXIgb25lID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHZhciBuT25lID0gb25lLnJlZE5lZygpO1xuXG4gICAgLy8gRmluZCBxdWFkcmF0aWMgbm9uLXJlc2lkdWVcbiAgICAvLyBOT1RFOiBNYXggaXMgc3VjaCBiZWNhdXNlIG9mIGdlbmVyYWxpemVkIFJpZW1hbm4gaHlwb3RoZXNpcy5cbiAgICB2YXIgbHBvdyA9IHRoaXMubS5zdWJuKDEpLml1c2hybigxKTtcbiAgICB2YXIgeiA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICB6ID0gbmV3IEJOKDIgKiB6ICogeikudG9SZWQodGhpcyk7XG5cbiAgICB3aGlsZSAodGhpcy5wb3coeiwgbHBvdykuY21wKG5PbmUpICE9PSAwKSB7XG4gICAgICB6LnJlZElBZGQobk9uZSk7XG4gICAgfVxuXG4gICAgdmFyIGMgPSB0aGlzLnBvdyh6LCBxKTtcbiAgICB2YXIgciA9IHRoaXMucG93KGEsIHEuYWRkbigxKS5pdXNocm4oMSkpO1xuICAgIHZhciB0ID0gdGhpcy5wb3coYSwgcSk7XG4gICAgdmFyIG0gPSBzO1xuICAgIHdoaWxlICh0LmNtcChvbmUpICE9PSAwKSB7XG4gICAgICB2YXIgdG1wID0gdDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyB0bXAuY21wKG9uZSkgIT09IDA7IGkrKykge1xuICAgICAgICB0bXAgPSB0bXAucmVkU3FyKCk7XG4gICAgICB9XG4gICAgICBhc3NlcnQoaSA8IG0pO1xuICAgICAgdmFyIGIgPSB0aGlzLnBvdyhjLCBuZXcgQk4oMSkuaXVzaGxuKG0gLSBpIC0gMSkpO1xuXG4gICAgICByID0gci5yZWRNdWwoYik7XG4gICAgICBjID0gYi5yZWRTcXIoKTtcbiAgICAgIHQgPSB0LnJlZE11bChjKTtcbiAgICAgIG0gPSBpO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICB2YXIgaW52ID0gYS5faW52bXAodGhpcy5tKTtcbiAgICBpZiAoaW52Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpbnYubmVnYXRpdmUgPSAwO1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpLnJlZE5lZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludik7XG4gICAgfVxuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUucG93ID0gZnVuY3Rpb24gcG93IChhLCBudW0pIHtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIGlmIChudW0uY21wbigxKSA9PT0gMCkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciB3aW5kb3dTaXplID0gNDtcbiAgICB2YXIgd25kID0gbmV3IEFycmF5KDEgPDwgd2luZG93U2l6ZSk7XG4gICAgd25kWzBdID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHduZFsxXSA9IGE7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCB3bmQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHduZFtpXSA9IHRoaXMubXVsKHduZFtpIC0gMV0sIGEpO1xuICAgIH1cblxuICAgIHZhciByZXMgPSB3bmRbMF07XG4gICAgdmFyIGN1cnJlbnQgPSAwO1xuICAgIHZhciBjdXJyZW50TGVuID0gMDtcbiAgICB2YXIgc3RhcnQgPSBudW0uYml0TGVuZ3RoKCkgJSAyNjtcbiAgICBpZiAoc3RhcnQgPT09IDApIHtcbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgZm9yIChpID0gbnVtLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IG51bS53b3Jkc1tpXTtcbiAgICAgIGZvciAodmFyIGogPSBzdGFydCAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgIHZhciBiaXQgPSAod29yZCA+PiBqKSAmIDE7XG4gICAgICAgIGlmIChyZXMgIT09IHduZFswXSkge1xuICAgICAgICAgIHJlcyA9IHRoaXMuc3FyKHJlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYml0ID09PSAwICYmIGN1cnJlbnQgPT09IDApIHtcbiAgICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQgPDw9IDE7XG4gICAgICAgIGN1cnJlbnQgfD0gYml0O1xuICAgICAgICBjdXJyZW50TGVuKys7XG4gICAgICAgIGlmIChjdXJyZW50TGVuICE9PSB3aW5kb3dTaXplICYmIChpICE9PSAwIHx8IGogIT09IDApKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSB0aGlzLm11bChyZXMsIHduZFtjdXJyZW50XSk7XG4gICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICBjdXJyZW50ID0gMDtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgdmFyIHIgPSBudW0udW1vZCh0aGlzLm0pO1xuXG4gICAgcmV0dXJuIHIgPT09IG51bSA/IHIuY2xvbmUoKSA6IHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgcmVzID0gbnVtLmNsb25lKCk7XG4gICAgcmVzLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvL1xuICAvLyBNb250Z29tZXJ5IG1ldGhvZCBlbmdpbmVcbiAgLy9cblxuICBCTi5tb250ID0gZnVuY3Rpb24gbW9udCAobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBNb250KG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gTW9udCAobSkge1xuICAgIFJlZC5jYWxsKHRoaXMsIG0pO1xuXG4gICAgdGhpcy5zaGlmdCA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICBpZiAodGhpcy5zaGlmdCAlIDI2ICE9PSAwKSB7XG4gICAgICB0aGlzLnNoaWZ0ICs9IDI2IC0gKHRoaXMuc2hpZnQgJSAyNik7XG4gICAgfVxuXG4gICAgdGhpcy5yID0gbmV3IEJOKDEpLml1c2hsbih0aGlzLnNoaWZ0KTtcbiAgICB0aGlzLnIyID0gdGhpcy5pbW9kKHRoaXMuci5zcXIoKSk7XG4gICAgdGhpcy5yaW52ID0gdGhpcy5yLl9pbnZtcCh0aGlzLm0pO1xuXG4gICAgdGhpcy5taW52ID0gdGhpcy5yaW52Lm11bCh0aGlzLnIpLmlzdWJuKDEpLmRpdih0aGlzLm0pO1xuICAgIHRoaXMubWludiA9IHRoaXMubWludi51bW9kKHRoaXMucik7XG4gICAgdGhpcy5taW52ID0gdGhpcy5yLnN1Yih0aGlzLm1pbnYpO1xuICB9XG4gIGluaGVyaXRzKE1vbnQsIFJlZCk7XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5pbW9kKG51bS51c2hsbih0aGlzLnNoaWZ0KSk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHIgPSB0aGlzLmltb2QobnVtLm11bCh0aGlzLnJpbnYpKTtcbiAgICByLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSB7XG4gICAgICBhLndvcmRzWzBdID0gMDtcbiAgICAgIGEubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIHZhciB0ID0gYS5pbXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuXG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDApLl9mb3JjZVJlZCh0aGlzKTtcblxuICAgIHZhciB0ID0gYS5tdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIC8vIChBUileLTEgKiBSXjIgPSAoQV4tMSAqIFJeLTEpICogUl4yID0gQV4tMSAqIFJcbiAgICB2YXIgcmVzID0gdGhpcy5pbW9kKGEuX2ludm1wKHRoaXMubSkubXVsKHRoaXMucjIpKTtcbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcbn0pKHR5cGVvZiBtb2R1bGUgPT09ICd1bmRlZmluZWQnIHx8IG1vZHVsZSwgdGhpcyk7XG4iLCJjb25zdCBldGhVdGlsID0gcmVxdWlyZSgnZXRoZXJldW1qcy11dGlsJylcbmNvbnN0IGV0aEFiaSA9IHJlcXVpcmUoJ2V0aGVyZXVtanMtYWJpJylcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgY29uY2F0U2lnOiBmdW5jdGlvbiAodiwgciwgcykge1xuICAgIGNvbnN0IHJTaWcgPSBldGhVdGlsLmZyb21TaWduZWQocilcbiAgICBjb25zdCBzU2lnID0gZXRoVXRpbC5mcm9tU2lnbmVkKHMpXG4gICAgY29uc3QgdlNpZyA9IGV0aFV0aWwuYnVmZmVyVG9JbnQodilcbiAgICBjb25zdCByU3RyID0gcGFkV2l0aFplcm9lcyhldGhVdGlsLnRvVW5zaWduZWQoclNpZykudG9TdHJpbmcoJ2hleCcpLCA2NClcbiAgICBjb25zdCBzU3RyID0gcGFkV2l0aFplcm9lcyhldGhVdGlsLnRvVW5zaWduZWQoc1NpZykudG9TdHJpbmcoJ2hleCcpLCA2NClcbiAgICBjb25zdCB2U3RyID0gZXRoVXRpbC5zdHJpcEhleFByZWZpeChldGhVdGlsLmludFRvSGV4KHZTaWcpKVxuICAgIHJldHVybiBldGhVdGlsLmFkZEhleFByZWZpeChyU3RyLmNvbmNhdChzU3RyLCB2U3RyKSkudG9TdHJpbmcoJ2hleCcpXG4gIH0sXG5cbiAgbm9ybWFsaXplOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAoIWlucHV0KSByZXR1cm5cblxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInKSB7XG4gICAgICBjb25zdCBidWZmZXIgPSBldGhVdGlsLnRvQnVmZmVyKGlucHV0KVxuICAgICAgaW5wdXQgPSBldGhVdGlsLmJ1ZmZlclRvSGV4KGJ1ZmZlcilcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgdmFyIG1zZyA9ICdldGgtc2lnLXV0aWwubm9ybWFsaXplKCkgcmVxdWlyZXMgaGV4IHN0cmluZyBvciBpbnRlZ2VyIGlucHV0LidcbiAgICAgIG1zZyArPSAnIHJlY2VpdmVkICcgKyAodHlwZW9mIGlucHV0KSArICc6ICcgKyBpbnB1dFxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZylcbiAgICB9XG5cbiAgICByZXR1cm4gZXRoVXRpbC5hZGRIZXhQcmVmaXgoaW5wdXQudG9Mb3dlckNhc2UoKSlcbiAgfSxcblxuICBwZXJzb25hbFNpZ246IGZ1bmN0aW9uIChwcml2YXRlS2V5LCBtc2dQYXJhbXMpIHtcbiAgICB2YXIgbWVzc2FnZSA9IGV0aFV0aWwudG9CdWZmZXIobXNnUGFyYW1zLmRhdGEpXG4gICAgdmFyIG1zZ0hhc2ggPSBldGhVdGlsLmhhc2hQZXJzb25hbE1lc3NhZ2UobWVzc2FnZSlcbiAgICB2YXIgc2lnID0gZXRoVXRpbC5lY3NpZ24obXNnSGFzaCwgcHJpdmF0ZUtleSlcbiAgICB2YXIgc2VyaWFsaXplZCA9IGV0aFV0aWwuYnVmZmVyVG9IZXgodGhpcy5jb25jYXRTaWcoc2lnLnYsIHNpZy5yLCBzaWcucykpXG4gICAgcmV0dXJuIHNlcmlhbGl6ZWRcbiAgfSxcblxuICByZWNvdmVyUGVyc29uYWxTaWduYXR1cmU6IGZ1bmN0aW9uIChtc2dQYXJhbXMpIHtcbiAgICBjb25zdCBwdWJsaWNLZXkgPSBnZXRQdWJsaWNLZXlGb3IobXNnUGFyYW1zKVxuICAgIGNvbnN0IHNlbmRlciA9IGV0aFV0aWwucHVibGljVG9BZGRyZXNzKHB1YmxpY0tleSlcbiAgICBjb25zdCBzZW5kZXJIZXggPSBldGhVdGlsLmJ1ZmZlclRvSGV4KHNlbmRlcilcbiAgICByZXR1cm4gc2VuZGVySGV4XG4gIH0sXG5cbiAgZXh0cmFjdFB1YmxpY0tleTogZnVuY3Rpb24gKG1zZ1BhcmFtcykge1xuICAgIGNvbnN0IHB1YmxpY0tleSA9IGdldFB1YmxpY0tleUZvcihtc2dQYXJhbXMpXG4gICAgcmV0dXJuICcweCcgKyBwdWJsaWNLZXkudG9TdHJpbmcoJ2hleCcpXG4gIH0sXG5cbiAgdHlwZWRTaWduYXR1cmVIYXNoOiBmdW5jdGlvbiAodHlwZWREYXRhKSB7XG4gICAgY29uc3QgaGFzaEJ1ZmZlciA9IHR5cGVkU2lnbmF0dXJlSGFzaCh0eXBlZERhdGEpXG4gICAgcmV0dXJuIGV0aFV0aWwuYnVmZmVyVG9IZXgoaGFzaEJ1ZmZlcilcbiAgfSxcblxuICBzaWduVHlwZWREYXRhOiBmdW5jdGlvbiAocHJpdmF0ZUtleSwgbXNnUGFyYW1zKSB7XG4gICAgY29uc3QgbXNnSGFzaCA9IHR5cGVkU2lnbmF0dXJlSGFzaChtc2dQYXJhbXMuZGF0YSlcbiAgICBjb25zdCBzaWcgPSBldGhVdGlsLmVjc2lnbihtc2dIYXNoLCBwcml2YXRlS2V5KVxuICAgIHJldHVybiBldGhVdGlsLmJ1ZmZlclRvSGV4KHRoaXMuY29uY2F0U2lnKHNpZy52LCBzaWcuciwgc2lnLnMpKVxuICB9LFxuXG4gIHJlY292ZXJUeXBlZFNpZ25hdHVyZTogZnVuY3Rpb24gKG1zZ1BhcmFtcykge1xuICAgIGNvbnN0IG1zZ0hhc2ggPSB0eXBlZFNpZ25hdHVyZUhhc2gobXNnUGFyYW1zLmRhdGEpXG4gICAgY29uc3QgcHVibGljS2V5ID0gcmVjb3ZlclB1YmxpY0tleShtc2dIYXNoLCBtc2dQYXJhbXMuc2lnKVxuICAgIGNvbnN0IHNlbmRlciA9IGV0aFV0aWwucHVibGljVG9BZGRyZXNzKHB1YmxpY0tleSlcbiAgICByZXR1cm4gZXRoVXRpbC5idWZmZXJUb0hleChzZW5kZXIpXG4gIH1cblxufVxuXG4vKipcbiAqIEBwYXJhbSB0eXBlZERhdGEgLSBBcnJheSBvZiBkYXRhIGFsb25nIHdpdGggdHlwZXMsIGFzIHBlciBFSVA3MTIuXG4gKiBAcmV0dXJucyBCdWZmZXJcbiAqL1xuZnVuY3Rpb24gdHlwZWRTaWduYXR1cmVIYXNoKHR5cGVkRGF0YSkge1xuICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcignRXhwZWN0IGFyZ3VtZW50IHRvIGJlIG5vbi1lbXB0eSBhcnJheScpXG4gIGlmICh0eXBlb2YgdHlwZWREYXRhICE9PSAnb2JqZWN0JyB8fCAhdHlwZWREYXRhLmxlbmd0aCkgdGhyb3cgZXJyb3JcblxuICBjb25zdCBkYXRhID0gdHlwZWREYXRhLm1hcChmdW5jdGlvbiAoZSkge1xuICAgIHJldHVybiBlLnR5cGUgPT09ICdieXRlcycgPyBldGhVdGlsLnRvQnVmZmVyKGUudmFsdWUpIDogZS52YWx1ZVxuICB9KVxuICBjb25zdCB0eXBlcyA9IHR5cGVkRGF0YS5tYXAoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUudHlwZSB9KVxuICBjb25zdCBzY2hlbWEgPSB0eXBlZERhdGEubWFwKGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKCFlLm5hbWUpIHRocm93IGVycm9yXG4gICAgcmV0dXJuIGUudHlwZSArICcgJyArIGUubmFtZVxuICB9KVxuXG4gIHJldHVybiBldGhBYmkuc29saWRpdHlTSEEzKFxuICAgIFsnYnl0ZXMzMicsICdieXRlczMyJ10sXG4gICAgW1xuICAgICAgZXRoQWJpLnNvbGlkaXR5U0hBMyhuZXcgQXJyYXkodHlwZWREYXRhLmxlbmd0aCkuZmlsbCgnc3RyaW5nJyksIHNjaGVtYSksXG4gICAgICBldGhBYmkuc29saWRpdHlTSEEzKHR5cGVzLCBkYXRhKVxuICAgIF1cbiAgKVxufVxuXG5mdW5jdGlvbiByZWNvdmVyUHVibGljS2V5KGhhc2gsIHNpZykge1xuICBjb25zdCBzaWduYXR1cmUgPSBldGhVdGlsLnRvQnVmZmVyKHNpZylcbiAgY29uc3Qgc2lnUGFyYW1zID0gZXRoVXRpbC5mcm9tUnBjU2lnKHNpZ25hdHVyZSlcbiAgcmV0dXJuIGV0aFV0aWwuZWNyZWNvdmVyKGhhc2gsIHNpZ1BhcmFtcy52LCBzaWdQYXJhbXMuciwgc2lnUGFyYW1zLnMpXG59XG5cbmZ1bmN0aW9uIGdldFB1YmxpY0tleUZvciAobXNnUGFyYW1zKSB7XG4gIGNvbnN0IG1lc3NhZ2UgPSBldGhVdGlsLnRvQnVmZmVyKG1zZ1BhcmFtcy5kYXRhKVxuICBjb25zdCBtc2dIYXNoID0gZXRoVXRpbC5oYXNoUGVyc29uYWxNZXNzYWdlKG1lc3NhZ2UpXG4gIHJldHVybiByZWNvdmVyUHVibGljS2V5KG1zZ0hhc2gsIG1zZ1BhcmFtcy5zaWcpXG59XG5cblxuZnVuY3Rpb24gcGFkV2l0aFplcm9lcyAobnVtYmVyLCBsZW5ndGgpIHtcbiAgdmFyIG15U3RyaW5nID0gJycgKyBudW1iZXJcbiAgd2hpbGUgKG15U3RyaW5nLmxlbmd0aCA8IGxlbmd0aCkge1xuICAgIG15U3RyaW5nID0gJzAnICsgbXlTdHJpbmdcbiAgfVxuICByZXR1cm4gbXlTdHJpbmdcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvaW5kZXguanMnKVxuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdXNlbGVzcy1lc2NhcGUgKi9cbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnZXRoZXJldW1qcy11dGlsJylcbmNvbnN0IEJOID0gcmVxdWlyZSgnYm4uanMnKVxuXG52YXIgQUJJID0gZnVuY3Rpb24gKCkge1xufVxuXG4vLyBDb252ZXJ0IGZyb20gc2hvcnQgdG8gY2Fub25pY2FsIG5hbWVzXG4vLyBGSVhNRTogb3B0aW1pc2Ugb3IgbWFrZSB0aGlzIG5pY2VyP1xuZnVuY3Rpb24gZWxlbWVudGFyeU5hbWUgKG5hbWUpIHtcbiAgaWYgKG5hbWUuc3RhcnRzV2l0aCgnaW50WycpKSB7XG4gICAgcmV0dXJuICdpbnQyNTYnICsgbmFtZS5zbGljZSgzKVxuICB9IGVsc2UgaWYgKG5hbWUgPT09ICdpbnQnKSB7XG4gICAgcmV0dXJuICdpbnQyNTYnXG4gIH0gZWxzZSBpZiAobmFtZS5zdGFydHNXaXRoKCd1aW50WycpKSB7XG4gICAgcmV0dXJuICd1aW50MjU2JyArIG5hbWUuc2xpY2UoNClcbiAgfSBlbHNlIGlmIChuYW1lID09PSAndWludCcpIHtcbiAgICByZXR1cm4gJ3VpbnQyNTYnXG4gIH0gZWxzZSBpZiAobmFtZS5zdGFydHNXaXRoKCdmaXhlZFsnKSkge1xuICAgIHJldHVybiAnZml4ZWQxMjh4MTI4JyArIG5hbWUuc2xpY2UoNSlcbiAgfSBlbHNlIGlmIChuYW1lID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuICdmaXhlZDEyOHgxMjgnXG4gIH0gZWxzZSBpZiAobmFtZS5zdGFydHNXaXRoKCd1Zml4ZWRbJykpIHtcbiAgICByZXR1cm4gJ3VmaXhlZDEyOHgxMjgnICsgbmFtZS5zbGljZSg2KVxuICB9IGVsc2UgaWYgKG5hbWUgPT09ICd1Zml4ZWQnKSB7XG4gICAgcmV0dXJuICd1Zml4ZWQxMjh4MTI4J1xuICB9XG4gIHJldHVybiBuYW1lXG59XG5cbkFCSS5ldmVudElEID0gZnVuY3Rpb24gKG5hbWUsIHR5cGVzKSB7XG4gIC8vIEZJWE1FOiB1c2Ugbm9kZS5qcyB1dGlsLmZvcm1hdD9cbiAgdmFyIHNpZyA9IG5hbWUgKyAnKCcgKyB0eXBlcy5tYXAoZWxlbWVudGFyeU5hbWUpLmpvaW4oJywnKSArICcpJ1xuICByZXR1cm4gdXRpbHMua2VjY2FrMjU2KEJ1ZmZlci5mcm9tKHNpZykpXG59XG5cbkFCSS5tZXRob2RJRCA9IGZ1bmN0aW9uIChuYW1lLCB0eXBlcykge1xuICByZXR1cm4gQUJJLmV2ZW50SUQobmFtZSwgdHlwZXMpLnNsaWNlKDAsIDQpXG59XG5cbi8vIFBhcnNlIE4gZnJvbSB0eXBlPE4+XG5mdW5jdGlvbiBwYXJzZVR5cGVOICh0eXBlKSB7XG4gIHJldHVybiBwYXJzZUludCgvXlxcRCsoXFxkKykkLy5leGVjKHR5cGUpWzFdLCAxMClcbn1cblxuLy8gUGFyc2UgTixNIGZyb20gdHlwZTxOPng8TT5cbmZ1bmN0aW9uIHBhcnNlVHlwZU54TSAodHlwZSkge1xuICB2YXIgdG1wID0gL15cXEQrKFxcZCspeChcXGQrKSQvLmV4ZWModHlwZSlcbiAgcmV0dXJuIFsgcGFyc2VJbnQodG1wWzFdLCAxMCksIHBhcnNlSW50KHRtcFsyXSwgMTApIF1cbn1cblxuLy8gUGFyc2UgTiBpbiB0eXBlWzxOPl0gd2hlcmUgXCJ0eXBlXCIgY2FuIGl0c2VsZiBiZSBhbiBhcnJheSB0eXBlLlxuZnVuY3Rpb24gcGFyc2VUeXBlQXJyYXkgKHR5cGUpIHtcbiAgdmFyIHRtcCA9IHR5cGUubWF0Y2goLyguKilcXFsoLio/KVxcXSQvKVxuICBpZiAodG1wKSB7XG4gICAgcmV0dXJuIHRtcFsyXSA9PT0gJycgPyAnZHluYW1pYycgOiBwYXJzZUludCh0bXBbMl0sIDEwKVxuICB9XG4gIHJldHVybiBudWxsXG59XG5cbmZ1bmN0aW9uIHBhcnNlTnVtYmVyIChhcmcpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgYXJnXG4gIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgIGlmICh1dGlscy5pc0hleFByZWZpeGVkKGFyZykpIHtcbiAgICAgIHJldHVybiBuZXcgQk4odXRpbHMuc3RyaXBIZXhQcmVmaXgoYXJnKSwgMTYpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgQk4oYXJnLCAxMClcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gbmV3IEJOKGFyZylcbiAgfSBlbHNlIGlmIChhcmcudG9BcnJheSkge1xuICAgIC8vIGFzc3VtZSB0aGlzIGlzIGEgQk4gZm9yIHRoZSBtb21lbnQsIHJlcGxhY2Ugd2l0aCBCTi5pc0JOIHNvb25cbiAgICByZXR1cm4gYXJnXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBcmd1bWVudCBpcyBub3QgYSBudW1iZXInKVxuICB9XG59XG5cbi8vIHNvbWVNZXRob2QoYnl0ZXMsdWludClcbi8vIHNvbWVNZXRob2QoYnl0ZXMsdWludCk6KGJvb2xlYW4pXG5mdW5jdGlvbiBwYXJzZVNpZ25hdHVyZSAoc2lnKSB7XG4gIHZhciB0bXAgPSAvXihcXHcrKVxcKCguKilcXCkkLy5leGVjKHNpZylcblxuICBpZiAodG1wLmxlbmd0aCAhPT0gMykge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBtZXRob2Qgc2lnbmF0dXJlJylcbiAgfVxuXG4gIHZhciBhcmdzID0gL14oLispXFwpOlxcKCguKykkLy5leGVjKHRtcFsyXSlcblxuICBpZiAoYXJncyAhPT0gbnVsbCAmJiBhcmdzLmxlbmd0aCA9PT0gMykge1xuICAgIHJldHVybiB7XG4gICAgICBtZXRob2Q6IHRtcFsxXSxcbiAgICAgIGFyZ3M6IGFyZ3NbMV0uc3BsaXQoJywnKSxcbiAgICAgIHJldGFyZ3M6IGFyZ3NbMl0uc3BsaXQoJywnKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFyYW1zID0gdG1wWzJdLnNwbGl0KCcsJylcbiAgICBpZiAocGFyYW1zLmxlbmd0aCA9PT0gMSAmJiBwYXJhbXNbMF0gPT09ICcnKSB7XG4gICAgICAvLyBTcGVjaWFsLWNhc2UgKHBvc3NpYmx5IG5haXZlKSBmaXh1cCBmb3IgZnVuY3Rpb25zIHRoYXQgdGFrZSBubyBhcmd1bWVudHMuXG4gICAgICAvLyBUT0RPOiBzcGVjaWFsIGNhc2VzIGFyZSBhbHdheXMgYmFkLCBidXQgdGhpcyBtYWtlcyB0aGUgZnVuY3Rpb24gcmV0dXJuXG4gICAgICAvLyBtYXRjaCB3aGF0IHRoZSBjYWxsaW5nIGZ1bmN0aW9ucyBleHBlY3RcbiAgICAgIHBhcmFtcyA9IFtdXG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBtZXRob2Q6IHRtcFsxXSxcbiAgICAgIGFyZ3M6IHBhcmFtc1xuICAgIH1cbiAgfVxufVxuXG4vLyBFbmNvZGVzIGEgc2luZ2xlIGl0ZW0gKGNhbiBiZSBkeW5hbWljIGFycmF5KVxuLy8gQHJldHVybnM6IEJ1ZmZlclxuZnVuY3Rpb24gZW5jb2RlU2luZ2xlICh0eXBlLCBhcmcpIHtcbiAgdmFyIHNpemUsIG51bSwgcmV0LCBpXG5cbiAgaWYgKHR5cGUgPT09ICdhZGRyZXNzJykge1xuICAgIHJldHVybiBlbmNvZGVTaW5nbGUoJ3VpbnQxNjAnLCBwYXJzZU51bWJlcihhcmcpKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdib29sJykge1xuICAgIHJldHVybiBlbmNvZGVTaW5nbGUoJ3VpbnQ4JywgYXJnID8gMSA6IDApXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZW5jb2RlU2luZ2xlKCdieXRlcycsIEJ1ZmZlci5mcm9tKGFyZywgJ3V0ZjgnKSlcbiAgfSBlbHNlIGlmIChpc0FycmF5KHR5cGUpKSB7XG4gICAgLy8gdGhpcyBwYXJ0IGhhbmRsZXMgZml4ZWQtbGVuZ3RoIChbMl0pIGFuZCB2YXJpYWJsZSBsZW5ndGggKFtdKSBhcnJheXNcbiAgICAvLyBOT1RFOiB3ZSBjYXRjaCBoZXJlIGFsbCBjYWxscyB0byBhcnJheXMsIHRoYXQgc2ltcGxpZmllcyB0aGUgcmVzdFxuICAgIGlmICh0eXBlb2YgYXJnLmxlbmd0aCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGFuIGFycmF5PycpXG4gICAgfVxuICAgIHNpemUgPSBwYXJzZVR5cGVBcnJheSh0eXBlKVxuICAgIGlmIChzaXplICE9PSAnZHluYW1pYycgJiYgc2l6ZSAhPT0gMCAmJiBhcmcubGVuZ3RoID4gc2l6ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFbGVtZW50cyBleGNlZWQgYXJyYXkgc2l6ZTogJyArIHNpemUpXG4gICAgfVxuICAgIHJldCA9IFtdXG4gICAgdHlwZSA9IHR5cGUuc2xpY2UoMCwgdHlwZS5sYXN0SW5kZXhPZignWycpKVxuICAgIGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJykge1xuICAgICAgYXJnID0gSlNPTi5wYXJzZShhcmcpXG4gICAgfVxuICAgIGZvciAoaSBpbiBhcmcpIHtcbiAgICAgIHJldC5wdXNoKGVuY29kZVNpbmdsZSh0eXBlLCBhcmdbaV0pKVxuICAgIH1cbiAgICBpZiAoc2l6ZSA9PT0gJ2R5bmFtaWMnKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZW5jb2RlU2luZ2xlKCd1aW50MjU2JywgYXJnLmxlbmd0aClcbiAgICAgIHJldC51bnNoaWZ0KGxlbmd0aClcbiAgICB9XG4gICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQocmV0KVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdieXRlcycpIHtcbiAgICBhcmcgPSBCdWZmZXIuZnJvbShhcmcpXG5cbiAgICByZXQgPSBCdWZmZXIuY29uY2F0KFsgZW5jb2RlU2luZ2xlKCd1aW50MjU2JywgYXJnLmxlbmd0aCksIGFyZyBdKVxuXG4gICAgaWYgKChhcmcubGVuZ3RoICUgMzIpICE9PSAwKSB7XG4gICAgICByZXQgPSBCdWZmZXIuY29uY2F0KFsgcmV0LCB1dGlscy56ZXJvcygzMiAtIChhcmcubGVuZ3RoICUgMzIpKSBdKVxuICAgIH1cblxuICAgIHJldHVybiByZXRcbiAgfSBlbHNlIGlmICh0eXBlLnN0YXJ0c1dpdGgoJ2J5dGVzJykpIHtcbiAgICBzaXplID0gcGFyc2VUeXBlTih0eXBlKVxuICAgIGlmIChzaXplIDwgMSB8fCBzaXplID4gMzIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBieXRlczxOPiB3aWR0aDogJyArIHNpemUpXG4gICAgfVxuXG4gICAgcmV0dXJuIHV0aWxzLnNldExlbmd0aFJpZ2h0KGFyZywgMzIpXG4gIH0gZWxzZSBpZiAodHlwZS5zdGFydHNXaXRoKCd1aW50JykpIHtcbiAgICBzaXplID0gcGFyc2VUeXBlTih0eXBlKVxuICAgIGlmICgoc2l6ZSAlIDgpIHx8IChzaXplIDwgOCkgfHwgKHNpemUgPiAyNTYpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdWludDxOPiB3aWR0aDogJyArIHNpemUpXG4gICAgfVxuXG4gICAgbnVtID0gcGFyc2VOdW1iZXIoYXJnKVxuICAgIGlmIChudW0uYml0TGVuZ3RoKCkgPiBzaXplKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N1cHBsaWVkIHVpbnQgZXhjZWVkcyB3aWR0aDogJyArIHNpemUgKyAnIHZzICcgKyBudW0uYml0TGVuZ3RoKCkpXG4gICAgfVxuXG4gICAgaWYgKG51bSA8IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU3VwcGxpZWQgdWludCBpcyBuZWdhdGl2ZScpXG4gICAgfVxuXG4gICAgcmV0dXJuIG51bS50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDMyKVxuICB9IGVsc2UgaWYgKHR5cGUuc3RhcnRzV2l0aCgnaW50JykpIHtcbiAgICBzaXplID0gcGFyc2VUeXBlTih0eXBlKVxuICAgIGlmICgoc2l6ZSAlIDgpIHx8IChzaXplIDwgOCkgfHwgKHNpemUgPiAyNTYpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW50PE4+IHdpZHRoOiAnICsgc2l6ZSlcbiAgICB9XG5cbiAgICBudW0gPSBwYXJzZU51bWJlcihhcmcpXG4gICAgaWYgKG51bS5iaXRMZW5ndGgoKSA+IHNpemUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU3VwcGxpZWQgaW50IGV4Y2VlZHMgd2lkdGg6ICcgKyBzaXplICsgJyB2cyAnICsgbnVtLmJpdExlbmd0aCgpKVxuICAgIH1cblxuICAgIHJldHVybiBudW0udG9Ud29zKDI1NikudG9BcnJheUxpa2UoQnVmZmVyLCAnYmUnLCAzMilcbiAgfSBlbHNlIGlmICh0eXBlLnN0YXJ0c1dpdGgoJ3VmaXhlZCcpKSB7XG4gICAgc2l6ZSA9IHBhcnNlVHlwZU54TSh0eXBlKVxuXG4gICAgbnVtID0gcGFyc2VOdW1iZXIoYXJnKVxuXG4gICAgaWYgKG51bSA8IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU3VwcGxpZWQgdWZpeGVkIGlzIG5lZ2F0aXZlJylcbiAgICB9XG5cbiAgICByZXR1cm4gZW5jb2RlU2luZ2xlKCd1aW50MjU2JywgbnVtLm11bChuZXcgQk4oMikucG93KG5ldyBCTihzaXplWzFdKSkpKVxuICB9IGVsc2UgaWYgKHR5cGUuc3RhcnRzV2l0aCgnZml4ZWQnKSkge1xuICAgIHNpemUgPSBwYXJzZVR5cGVOeE0odHlwZSlcblxuICAgIHJldHVybiBlbmNvZGVTaW5nbGUoJ2ludDI1NicsIHBhcnNlTnVtYmVyKGFyZykubXVsKG5ldyBCTigyKS5wb3cobmV3IEJOKHNpemVbMV0pKSkpXG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIG9yIGludmFsaWQgdHlwZTogJyArIHR5cGUpXG59XG5cbi8vIERlY29kZXMgYSBzaW5nbGUgaXRlbSAoY2FuIGJlIGR5bmFtaWMgYXJyYXkpXG4vLyBAcmV0dXJuczogYXJyYXlcbi8vIEZJWE1FOiB0aGlzIG1ldGhvZCB3aWxsIG5lZWQgYSBsb3Qgb2YgYXR0ZW50aW9uIGF0IGNoZWNraW5nIGxpbWl0cyBhbmQgdmFsaWRhdGlvblxuZnVuY3Rpb24gZGVjb2RlU2luZ2xlIChwYXJzZWRUeXBlLCBkYXRhLCBvZmZzZXQpIHtcbiAgaWYgKHR5cGVvZiBwYXJzZWRUeXBlID09PSAnc3RyaW5nJykge1xuICAgIHBhcnNlZFR5cGUgPSBwYXJzZVR5cGUocGFyc2VkVHlwZSlcbiAgfVxuICB2YXIgc2l6ZSwgbnVtLCByZXQsIGlcblxuICBpZiAocGFyc2VkVHlwZS5uYW1lID09PSAnYWRkcmVzcycpIHtcbiAgICByZXR1cm4gZGVjb2RlU2luZ2xlKHBhcnNlZFR5cGUucmF3VHlwZSwgZGF0YSwgb2Zmc2V0KS50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDIwKS50b1N0cmluZygnaGV4JylcbiAgfSBlbHNlIGlmIChwYXJzZWRUeXBlLm5hbWUgPT09ICdib29sJykge1xuICAgIHJldHVybiBkZWNvZGVTaW5nbGUocGFyc2VkVHlwZS5yYXdUeXBlLCBkYXRhLCBvZmZzZXQpLnRvU3RyaW5nKCkgPT09IG5ldyBCTigxKS50b1N0cmluZygpXG4gIH0gZWxzZSBpZiAocGFyc2VkVHlwZS5uYW1lID09PSAnc3RyaW5nJykge1xuICAgIHZhciBieXRlcyA9IGRlY29kZVNpbmdsZShwYXJzZWRUeXBlLnJhd1R5cGUsIGRhdGEsIG9mZnNldClcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oYnl0ZXMsICd1dGY4JykudG9TdHJpbmcoKVxuICB9IGVsc2UgaWYgKHBhcnNlZFR5cGUuaXNBcnJheSkge1xuICAgIC8vIHRoaXMgcGFydCBoYW5kbGVzIGZpeGVkLWxlbmd0aCBhcnJheXMgKFsyXSkgYW5kIHZhcmlhYmxlIGxlbmd0aCAoW10pIGFycmF5c1xuICAgIC8vIE5PVEU6IHdlIGNhdGNoIGhlcmUgYWxsIGNhbGxzIHRvIGFycmF5cywgdGhhdCBzaW1wbGlmaWVzIHRoZSByZXN0XG4gICAgcmV0ID0gW11cbiAgICBzaXplID0gcGFyc2VkVHlwZS5zaXplXG5cbiAgICBpZiAocGFyc2VkVHlwZS5zaXplID09PSAnZHluYW1pYycpIHtcbiAgICAgIG9mZnNldCA9IGRlY29kZVNpbmdsZSgndWludDI1NicsIGRhdGEsIG9mZnNldCkudG9OdW1iZXIoKVxuICAgICAgc2l6ZSA9IGRlY29kZVNpbmdsZSgndWludDI1NicsIGRhdGEsIG9mZnNldCkudG9OdW1iZXIoKVxuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ICsgMzJcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgICAgdmFyIGRlY29kZWQgPSBkZWNvZGVTaW5nbGUocGFyc2VkVHlwZS5zdWJBcnJheSwgZGF0YSwgb2Zmc2V0KVxuICAgICAgcmV0LnB1c2goZGVjb2RlZClcbiAgICAgIG9mZnNldCArPSBwYXJzZWRUeXBlLnN1YkFycmF5Lm1lbW9yeVVzYWdlXG4gICAgfVxuICAgIHJldHVybiByZXRcbiAgfSBlbHNlIGlmIChwYXJzZWRUeXBlLm5hbWUgPT09ICdieXRlcycpIHtcbiAgICBvZmZzZXQgPSBkZWNvZGVTaW5nbGUoJ3VpbnQyNTYnLCBkYXRhLCBvZmZzZXQpLnRvTnVtYmVyKClcbiAgICBzaXplID0gZGVjb2RlU2luZ2xlKCd1aW50MjU2JywgZGF0YSwgb2Zmc2V0KS50b051bWJlcigpXG4gICAgcmV0dXJuIGRhdGEuc2xpY2Uob2Zmc2V0ICsgMzIsIG9mZnNldCArIDMyICsgc2l6ZSlcbiAgfSBlbHNlIGlmIChwYXJzZWRUeXBlLm5hbWUuc3RhcnRzV2l0aCgnYnl0ZXMnKSkge1xuICAgIHJldHVybiBkYXRhLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgcGFyc2VkVHlwZS5zaXplKVxuICB9IGVsc2UgaWYgKHBhcnNlZFR5cGUubmFtZS5zdGFydHNXaXRoKCd1aW50JykpIHtcbiAgICBudW0gPSBuZXcgQk4oZGF0YS5zbGljZShvZmZzZXQsIG9mZnNldCArIDMyKSwgMTYsICdiZScpXG4gICAgaWYgKG51bS5iaXRMZW5ndGgoKSA+IHBhcnNlZFR5cGUuc2l6ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdEZWNvZGVkIGludCBleGNlZWRzIHdpZHRoOiAnICsgcGFyc2VkVHlwZS5zaXplICsgJyB2cyAnICsgbnVtLmJpdExlbmd0aCgpKVxuICAgIH1cbiAgICByZXR1cm4gbnVtXG4gIH0gZWxzZSBpZiAocGFyc2VkVHlwZS5uYW1lLnN0YXJ0c1dpdGgoJ2ludCcpKSB7XG4gICAgbnVtID0gbmV3IEJOKGRhdGEuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyAzMiksIDE2LCAnYmUnKS5mcm9tVHdvcygyNTYpXG4gICAgaWYgKG51bS5iaXRMZW5ndGgoKSA+IHBhcnNlZFR5cGUuc2l6ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdEZWNvZGVkIHVpbnQgZXhjZWVkcyB3aWR0aDogJyArIHBhcnNlZFR5cGUuc2l6ZSArICcgdnMgJyArIG51bS5iaXRMZW5ndGgoKSlcbiAgICB9XG5cbiAgICByZXR1cm4gbnVtXG4gIH0gZWxzZSBpZiAocGFyc2VkVHlwZS5uYW1lLnN0YXJ0c1dpdGgoJ3VmaXhlZCcpKSB7XG4gICAgc2l6ZSA9IG5ldyBCTigyKS5wb3cobmV3IEJOKHBhcnNlZFR5cGUuc2l6ZVsxXSkpXG4gICAgbnVtID0gZGVjb2RlU2luZ2xlKCd1aW50MjU2JywgZGF0YSwgb2Zmc2V0KVxuICAgIGlmICghbnVtLm1vZChzaXplKS5pc1plcm8oKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdEZWNpbWFscyBub3Qgc3VwcG9ydGVkIHlldCcpXG4gICAgfVxuICAgIHJldHVybiBudW0uZGl2KHNpemUpXG4gIH0gZWxzZSBpZiAocGFyc2VkVHlwZS5uYW1lLnN0YXJ0c1dpdGgoJ2ZpeGVkJykpIHtcbiAgICBzaXplID0gbmV3IEJOKDIpLnBvdyhuZXcgQk4ocGFyc2VkVHlwZS5zaXplWzFdKSlcbiAgICBudW0gPSBkZWNvZGVTaW5nbGUoJ2ludDI1NicsIGRhdGEsIG9mZnNldClcbiAgICBpZiAoIW51bS5tb2Qoc2l6ZSkuaXNaZXJvKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGVjaW1hbHMgbm90IHN1cHBvcnRlZCB5ZXQnKVxuICAgIH1cbiAgICByZXR1cm4gbnVtLmRpdihzaXplKVxuICB9XG4gIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgb3IgaW52YWxpZCB0eXBlOiAnICsgcGFyc2VkVHlwZS5uYW1lKVxufVxuXG4vLyBQYXJzZSB0aGUgZ2l2ZW4gdHlwZVxuLy8gQHJldHVybnM6IHt9IGNvbnRhaW5pbmcgdGhlIHR5cGUgaXRzZWxmLCBtZW1vcnkgdXNhZ2UgYW5kIChpbmNsdWRpbmcgc2l6ZSBhbmQgc3ViQXJyYXkgaWYgYXBwbGljYWJsZSlcbmZ1bmN0aW9uIHBhcnNlVHlwZSAodHlwZSkge1xuICB2YXIgc2l6ZVxuICB2YXIgcmV0XG4gIGlmIChpc0FycmF5KHR5cGUpKSB7XG4gICAgc2l6ZSA9IHBhcnNlVHlwZUFycmF5KHR5cGUpXG4gICAgdmFyIHN1YkFycmF5ID0gdHlwZS5zbGljZSgwLCB0eXBlLmxhc3RJbmRleE9mKCdbJykpXG4gICAgc3ViQXJyYXkgPSBwYXJzZVR5cGUoc3ViQXJyYXkpXG4gICAgcmV0ID0ge1xuICAgICAgaXNBcnJheTogdHJ1ZSxcbiAgICAgIG5hbWU6IHR5cGUsXG4gICAgICBzaXplOiBzaXplLFxuICAgICAgbWVtb3J5VXNhZ2U6IHNpemUgPT09ICdkeW5hbWljJyA/IDMyIDogc3ViQXJyYXkubWVtb3J5VXNhZ2UgKiBzaXplLFxuICAgICAgc3ViQXJyYXk6IHN1YkFycmF5XG4gICAgfVxuICAgIHJldHVybiByZXRcbiAgfSBlbHNlIHtcbiAgICB2YXIgcmF3VHlwZVxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnYWRkcmVzcyc6XG4gICAgICAgIHJhd1R5cGUgPSAndWludDE2MCdcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2Jvb2wnOlxuICAgICAgICByYXdUeXBlID0gJ3VpbnQ4J1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgcmF3VHlwZSA9ICdieXRlcydcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgcmV0ID0ge1xuICAgICAgcmF3VHlwZTogcmF3VHlwZSxcbiAgICAgIG5hbWU6IHR5cGUsXG4gICAgICBtZW1vcnlVc2FnZTogMzJcbiAgICB9XG5cbiAgICBpZiAoKHR5cGUuc3RhcnRzV2l0aCgnYnl0ZXMnKSAmJiB0eXBlICE9PSAnYnl0ZXMnKSB8fCB0eXBlLnN0YXJ0c1dpdGgoJ3VpbnQnKSB8fCB0eXBlLnN0YXJ0c1dpdGgoJ2ludCcpKSB7XG4gICAgICByZXQuc2l6ZSA9IHBhcnNlVHlwZU4odHlwZSlcbiAgICB9IGVsc2UgaWYgKHR5cGUuc3RhcnRzV2l0aCgndWZpeGVkJykgfHwgdHlwZS5zdGFydHNXaXRoKCdmaXhlZCcpKSB7XG4gICAgICByZXQuc2l6ZSA9IHBhcnNlVHlwZU54TSh0eXBlKVxuICAgIH1cblxuICAgIGlmICh0eXBlLnN0YXJ0c1dpdGgoJ2J5dGVzJykgJiYgdHlwZSAhPT0gJ2J5dGVzJyAmJiAocmV0LnNpemUgPCAxIHx8IHJldC5zaXplID4gMzIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYnl0ZXM8Tj4gd2lkdGg6ICcgKyByZXQuc2l6ZSlcbiAgICB9XG4gICAgaWYgKCh0eXBlLnN0YXJ0c1dpdGgoJ3VpbnQnKSB8fCB0eXBlLnN0YXJ0c1dpdGgoJ2ludCcpKSAmJiAocmV0LnNpemUgJSA4IHx8IHJldC5zaXplIDwgOCB8fCByZXQuc2l6ZSA+IDI1NikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpbnQvdWludDxOPiB3aWR0aDogJyArIHJldC5zaXplKVxuICAgIH1cbiAgICByZXR1cm4gcmV0XG4gIH1cbn1cblxuLy8gSXMgYSB0eXBlIGR5bmFtaWM/XG5mdW5jdGlvbiBpc0R5bmFtaWMgKHR5cGUpIHtcbiAgLy8gRklYTUU6IGhhbmRsZSBhbGwgdHlwZXM/IEkgZG9uJ3QgdGhpbmsgYW55dGhpbmcgaXMgbWlzc2luZyBub3dcbiAgcmV0dXJuICh0eXBlID09PSAnc3RyaW5nJykgfHwgKHR5cGUgPT09ICdieXRlcycpIHx8IChwYXJzZVR5cGVBcnJheSh0eXBlKSA9PT0gJ2R5bmFtaWMnKVxufVxuXG4vLyBJcyBhIHR5cGUgYW4gYXJyYXk/XG5mdW5jdGlvbiBpc0FycmF5ICh0eXBlKSB7XG4gIHJldHVybiB0eXBlLmxhc3RJbmRleE9mKCddJykgPT09IHR5cGUubGVuZ3RoIC0gMVxufVxuXG4vLyBFbmNvZGUgYSBtZXRob2QvZXZlbnQgd2l0aCBhcmd1bWVudHNcbi8vIEB0eXBlcyBhbiBhcnJheSBvZiBzdHJpbmcgdHlwZSBuYW1lc1xuLy8gQGFyZ3MgIGFuIGFycmF5IG9mIHRoZSBhcHByb3ByaWF0ZSB2YWx1ZXNcbkFCSS5yYXdFbmNvZGUgPSBmdW5jdGlvbiAodHlwZXMsIHZhbHVlcykge1xuICB2YXIgb3V0cHV0ID0gW11cbiAgdmFyIGRhdGEgPSBbXVxuXG4gIHZhciBoZWFkTGVuZ3RoID0gMFxuXG4gIHR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBpZiAoaXNBcnJheSh0eXBlKSkge1xuICAgICAgdmFyIHNpemUgPSBwYXJzZVR5cGVBcnJheSh0eXBlKVxuXG4gICAgICBpZiAoc2l6ZSAhPT0gJ2R5bmFtaWMnKSB7XG4gICAgICAgIGhlYWRMZW5ndGggKz0gMzIgKiBzaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoZWFkTGVuZ3RoICs9IDMyXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWRMZW5ndGggKz0gMzJcbiAgICB9XG4gIH0pXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0eXBlID0gZWxlbWVudGFyeU5hbWUodHlwZXNbaV0pXG4gICAgdmFyIHZhbHVlID0gdmFsdWVzW2ldXG4gICAgdmFyIGN1ciA9IGVuY29kZVNpbmdsZSh0eXBlLCB2YWx1ZSlcblxuICAgIC8vIFVzZSB0aGUgaGVhZC90YWlsIG1ldGhvZCBmb3Igc3RvcmluZyBkeW5hbWljIGRhdGFcbiAgICBpZiAoaXNEeW5hbWljKHR5cGUpKSB7XG4gICAgICBvdXRwdXQucHVzaChlbmNvZGVTaW5nbGUoJ3VpbnQyNTYnLCBoZWFkTGVuZ3RoKSlcbiAgICAgIGRhdGEucHVzaChjdXIpXG4gICAgICBoZWFkTGVuZ3RoICs9IGN1ci5sZW5ndGhcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goY3VyKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dHB1dC5jb25jYXQoZGF0YSkpXG59XG5cbkFCSS5yYXdEZWNvZGUgPSBmdW5jdGlvbiAodHlwZXMsIGRhdGEpIHtcbiAgdmFyIHJldCA9IFtdXG4gIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhKVxuICB2YXIgb2Zmc2V0ID0gMFxuICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHR5cGUgPSBlbGVtZW50YXJ5TmFtZSh0eXBlc1tpXSlcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VUeXBlKHR5cGUsIGRhdGEsIG9mZnNldClcbiAgICB2YXIgZGVjb2RlZCA9IGRlY29kZVNpbmdsZShwYXJzZWQsIGRhdGEsIG9mZnNldClcbiAgICBvZmZzZXQgKz0gcGFyc2VkLm1lbW9yeVVzYWdlXG4gICAgcmV0LnB1c2goZGVjb2RlZClcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbkFCSS5zaW1wbGVFbmNvZGUgPSBmdW5jdGlvbiAobWV0aG9kKSB7XG4gIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKS5zbGljZSgxKVxuICB2YXIgc2lnID0gcGFyc2VTaWduYXR1cmUobWV0aG9kKVxuXG4gIC8vIEZJWE1FOiB2YWxpZGF0ZS9jb252ZXJ0IGFyZ3VtZW50c1xuICBpZiAoYXJncy5sZW5ndGggIT09IHNpZy5hcmdzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQXJndW1lbnQgY291bnQgbWlzbWF0Y2gnKVxuICB9XG5cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoWyBBQkkubWV0aG9kSUQoc2lnLm1ldGhvZCwgc2lnLmFyZ3MpLCBBQkkucmF3RW5jb2RlKHNpZy5hcmdzLCBhcmdzKSBdKVxufVxuXG5BQkkuc2ltcGxlRGVjb2RlID0gZnVuY3Rpb24gKG1ldGhvZCwgZGF0YSkge1xuICB2YXIgc2lnID0gcGFyc2VTaWduYXR1cmUobWV0aG9kKVxuXG4gIC8vIEZJWE1FOiB2YWxpZGF0ZS9jb252ZXJ0IGFyZ3VtZW50c1xuICBpZiAoIXNpZy5yZXRhcmdzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyByZXR1cm4gdmFsdWVzIGluIG1ldGhvZCcpXG4gIH1cblxuICByZXR1cm4gQUJJLnJhd0RlY29kZShzaWcucmV0YXJncywgZGF0YSlcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5ICh0eXBlLCB2YWx1ZSkge1xuICBpZiAodHlwZS5zdGFydHNXaXRoKCdhZGRyZXNzJykgfHwgdHlwZS5zdGFydHNXaXRoKCdieXRlcycpKSB7XG4gICAgcmV0dXJuICcweCcgKyB2YWx1ZS50b1N0cmluZygnaGV4JylcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKVxuICB9XG59XG5cbkFCSS5zdHJpbmdpZnkgPSBmdW5jdGlvbiAodHlwZXMsIHZhbHVlcykge1xuICB2YXIgcmV0ID0gW11cblxuICBmb3IgKHZhciBpIGluIHR5cGVzKSB7XG4gICAgdmFyIHR5cGUgPSB0eXBlc1tpXVxuICAgIHZhciB2YWx1ZSA9IHZhbHVlc1tpXVxuXG4gICAgLy8gaWYgaXQgaXMgYW4gYXJyYXkgdHlwZSwgY29uY2F0IHRoZSBpdGVtc1xuICAgIGlmICgvXlteXFxbXStcXFsuKlxcXSQvLnRlc3QodHlwZSkpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdpZnkodHlwZSwgaXRlbSlcbiAgICAgIH0pLmpvaW4oJywgJylcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgPSBzdHJpbmdpZnkodHlwZSwgdmFsdWUpXG4gICAgfVxuXG4gICAgcmV0LnB1c2godmFsdWUpXG4gIH1cblxuICByZXR1cm4gcmV0XG59XG5cbkFCSS5zb2xpZGl0eUhleFZhbHVlID0gZnVuY3Rpb24gKHR5cGUsIHZhbHVlLCBiaXRzaXplKSB7XG4gIC8vIHBhc3MgaW4gYml0c2l6ZSA9IG51bGwgaWYgdXNlIGRlZmF1bHQgYml0c2l6ZVxuICB2YXIgc2l6ZSwgbnVtXG4gIGlmIChpc0FycmF5KHR5cGUpKSB7XG4gICAgdmFyIHN1YlR5cGUgPSB0eXBlLnJlcGxhY2UoL1xcWy4qP1xcXS8sICcnKVxuICAgIGlmICghaXNBcnJheShzdWJUeXBlKSkge1xuICAgICAgdmFyIGFycmF5U2l6ZSA9IHBhcnNlVHlwZUFycmF5KHR5cGUpXG4gICAgICBpZiAoYXJyYXlTaXplICE9PSAnZHluYW1pYycgJiYgYXJyYXlTaXplICE9PSAwICYmIHZhbHVlLmxlbmd0aCA+IGFycmF5U2l6ZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VsZW1lbnRzIGV4Y2VlZCBhcnJheSBzaXplOiAnICsgYXJyYXlTaXplKVxuICAgICAgfVxuICAgIH1cbiAgICB2YXIgYXJyYXlWYWx1ZXMgPSB2YWx1ZS5tYXAoZnVuY3Rpb24gKHYpIHtcbiAgICAgIHJldHVybiBBQkkuc29saWRpdHlIZXhWYWx1ZShzdWJUeXBlLCB2LCAyNTYpXG4gICAgfSlcbiAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChhcnJheVZhbHVlcylcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnYnl0ZXMnKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWUsICd1dGY4JylcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnYm9vbCcpIHtcbiAgICBiaXRzaXplID0gYml0c2l6ZSB8fCA4XG4gICAgdmFyIHBhZGRpbmcgPSBBcnJheSgoYml0c2l6ZSkgLyA0KS5qb2luKCcwJylcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWUgPyBwYWRkaW5nICsgJzEnIDogcGFkZGluZyArICcwJywgJ2hleCcpXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2FkZHJlc3MnKSB7XG4gICAgdmFyIGJ5dGVzaXplID0gMjBcbiAgICBpZiAoYml0c2l6ZSkge1xuICAgICAgYnl0ZXNpemUgPSBiaXRzaXplIC8gOFxuICAgIH1cbiAgICByZXR1cm4gdXRpbHMuc2V0TGVuZ3RoTGVmdCh2YWx1ZSwgYnl0ZXNpemUpXG4gIH0gZWxzZSBpZiAodHlwZS5zdGFydHNXaXRoKCdieXRlcycpKSB7XG4gICAgc2l6ZSA9IHBhcnNlVHlwZU4odHlwZSlcbiAgICBpZiAoc2l6ZSA8IDEgfHwgc2l6ZSA+IDMyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYnl0ZXM8Tj4gd2lkdGg6ICcgKyBzaXplKVxuICAgIH1cblxuICAgIHJldHVybiB1dGlscy5zZXRMZW5ndGhSaWdodCh2YWx1ZSwgc2l6ZSlcbiAgfSBlbHNlIGlmICh0eXBlLnN0YXJ0c1dpdGgoJ3VpbnQnKSkge1xuICAgIHNpemUgPSBwYXJzZVR5cGVOKHR5cGUpXG4gICAgaWYgKChzaXplICUgOCkgfHwgKHNpemUgPCA4KSB8fCAoc2l6ZSA+IDI1NikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB1aW50PE4+IHdpZHRoOiAnICsgc2l6ZSlcbiAgICB9XG5cbiAgICBudW0gPSBwYXJzZU51bWJlcih2YWx1ZSlcbiAgICBpZiAobnVtLmJpdExlbmd0aCgpID4gc2l6ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdXBwbGllZCB1aW50IGV4Y2VlZHMgd2lkdGg6ICcgKyBzaXplICsgJyB2cyAnICsgbnVtLmJpdExlbmd0aCgpKVxuICAgIH1cblxuICAgIGJpdHNpemUgPSBiaXRzaXplIHx8IHNpemVcbiAgICByZXR1cm4gbnVtLnRvQXJyYXlMaWtlKEJ1ZmZlciwgJ2JlJywgYml0c2l6ZSAvIDgpXG4gIH0gZWxzZSBpZiAodHlwZS5zdGFydHNXaXRoKCdpbnQnKSkge1xuICAgIHNpemUgPSBwYXJzZVR5cGVOKHR5cGUpXG4gICAgaWYgKChzaXplICUgOCkgfHwgKHNpemUgPCA4KSB8fCAoc2l6ZSA+IDI1NikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpbnQ8Tj4gd2lkdGg6ICcgKyBzaXplKVxuICAgIH1cblxuICAgIG51bSA9IHBhcnNlTnVtYmVyKHZhbHVlKVxuICAgIGlmIChudW0uYml0TGVuZ3RoKCkgPiBzaXplKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N1cHBsaWVkIGludCBleGNlZWRzIHdpZHRoOiAnICsgc2l6ZSArICcgdnMgJyArIG51bS5iaXRMZW5ndGgoKSlcbiAgICB9XG5cbiAgICBiaXRzaXplID0gYml0c2l6ZSB8fCBzaXplXG4gICAgcmV0dXJuIG51bS50b1R3b3Moc2l6ZSkudG9BcnJheUxpa2UoQnVmZmVyLCAnYmUnLCBiaXRzaXplIC8gOClcbiAgfSBlbHNlIHtcbiAgICAvLyBGSVhNRTogc3VwcG9ydCBhbGwgb3RoZXIgdHlwZXNcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIG9yIGludmFsaWQgdHlwZTogJyArIHR5cGUpXG4gIH1cbn1cblxuQUJJLnNvbGlkaXR5UGFjayA9IGZ1bmN0aW9uICh0eXBlcywgdmFsdWVzKSB7XG4gIGlmICh0eXBlcy5sZW5ndGggIT09IHZhbHVlcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ051bWJlciBvZiB0eXBlcyBhcmUgbm90IG1hdGNoaW5nIHRoZSB2YWx1ZXMnKVxuICB9XG5cbiAgdmFyIHJldCA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0eXBlID0gZWxlbWVudGFyeU5hbWUodHlwZXNbaV0pXG4gICAgdmFyIHZhbHVlID0gdmFsdWVzW2ldXG4gICAgcmV0LnB1c2goQUJJLnNvbGlkaXR5SGV4VmFsdWUodHlwZSwgdmFsdWUsIG51bGwpKVxuICB9XG5cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQocmV0KVxufVxuXG5BQkkuc29saWRpdHlTSEEzID0gZnVuY3Rpb24gKHR5cGVzLCB2YWx1ZXMpIHtcbiAgcmV0dXJuIHV0aWxzLmtlY2NhazI1NihBQkkuc29saWRpdHlQYWNrKHR5cGVzLCB2YWx1ZXMpKVxufVxuXG5BQkkuc29saWRpdHlTSEEyNTYgPSBmdW5jdGlvbiAodHlwZXMsIHZhbHVlcykge1xuICByZXR1cm4gdXRpbHMuc2hhMjU2KEFCSS5zb2xpZGl0eVBhY2sodHlwZXMsIHZhbHVlcykpXG59XG5cbkFCSS5zb2xpZGl0eVJJUEVNRDE2MCA9IGZ1bmN0aW9uICh0eXBlcywgdmFsdWVzKSB7XG4gIHJldHVybiB1dGlscy5yaXBlbWQxNjAoQUJJLnNvbGlkaXR5UGFjayh0eXBlcywgdmFsdWVzKSwgdHJ1ZSlcbn1cblxuLy8gU2VycGVudCdzIHVzZXJzIGFyZSBmYW1pbGlhciB3aXRoIHRoaXMgZW5jb2Rpbmdcbi8vIC0gczogc3RyaW5nXG4vLyAtIGI6IGJ5dGVzXG4vLyAtIGI8Tj46IGJ5dGVzPE4+XG4vLyAtIGk6IGludDI1NlxuLy8gLSBhOiBpbnQyNTZbXVxuXG5mdW5jdGlvbiBpc051bWVyaWMgKGMpIHtcbiAgLy8gRklYTUU6IGlzIHRoaXMgY29ycmVjdD8gU2VlbXMgdG8gd29ya1xuICByZXR1cm4gKGMgPj0gJzAnKSAmJiAoYyA8PSAnOScpXG59XG5cbi8vIEZvciBhIFwiZG9jdW1lbnRhdGlvblwiIHJlZmVyIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9zZXJwZW50L2Jsb2IvZGV2ZWxvcC9wcmVwcm9jZXNzLmNwcFxuQUJJLmZyb21TZXJwZW50ID0gZnVuY3Rpb24gKHNpZykge1xuICB2YXIgcmV0ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWcubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdHlwZSA9IHNpZ1tpXVxuICAgIGlmICh0eXBlID09PSAncycpIHtcbiAgICAgIHJldC5wdXNoKCdieXRlcycpXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnYicpIHtcbiAgICAgIHZhciB0bXAgPSAnYnl0ZXMnXG4gICAgICB2YXIgaiA9IGkgKyAxXG4gICAgICB3aGlsZSAoKGogPCBzaWcubGVuZ3RoKSAmJiBpc051bWVyaWMoc2lnW2pdKSkge1xuICAgICAgICB0bXAgKz0gc2lnW2pdIC0gJzAnXG4gICAgICAgIGorK1xuICAgICAgfVxuICAgICAgaSA9IGogLSAxXG4gICAgICByZXQucHVzaCh0bXApXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnaScpIHtcbiAgICAgIHJldC5wdXNoKCdpbnQyNTYnKVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2EnKSB7XG4gICAgICByZXQucHVzaCgnaW50MjU2W10nKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIG9yIGludmFsaWQgdHlwZTogJyArIHR5cGUpXG4gICAgfVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuQUJJLnRvU2VycGVudCA9IGZ1bmN0aW9uICh0eXBlcykge1xuICB2YXIgcmV0ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0eXBlID0gdHlwZXNbaV1cbiAgICBpZiAodHlwZSA9PT0gJ2J5dGVzJykge1xuICAgICAgcmV0LnB1c2goJ3MnKVxuICAgIH0gZWxzZSBpZiAodHlwZS5zdGFydHNXaXRoKCdieXRlcycpKSB7XG4gICAgICByZXQucHVzaCgnYicgKyBwYXJzZVR5cGVOKHR5cGUpKVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2ludDI1NicpIHtcbiAgICAgIHJldC5wdXNoKCdpJylcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdpbnQyNTZbXScpIHtcbiAgICAgIHJldC5wdXNoKCdhJylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBvciBpbnZhbGlkIHR5cGU6ICcgKyB0eXBlKVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0LmpvaW4oJycpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQUJJXG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaW1wb3J0UHVibGljID0gZXhwb3J0cy5wcml2YXRlVG9QdWJsaWMgPSBleHBvcnRzLnByaXZhdGVUb0FkZHJlc3MgPSBleHBvcnRzLnB1YmxpY1RvQWRkcmVzcyA9IGV4cG9ydHMucHViVG9BZGRyZXNzID0gZXhwb3J0cy5pc1ZhbGlkUHVibGljID0gZXhwb3J0cy5pc1ZhbGlkUHJpdmF0ZSA9IGV4cG9ydHMuaXNQcmVjb21waWxlZCA9IGV4cG9ydHMuZ2VuZXJhdGVBZGRyZXNzMiA9IGV4cG9ydHMuZ2VuZXJhdGVBZGRyZXNzID0gZXhwb3J0cy5pc1ZhbGlkQ2hlY2tzdW1BZGRyZXNzID0gZXhwb3J0cy50b0NoZWNrc3VtQWRkcmVzcyA9IGV4cG9ydHMuaXNaZXJvQWRkcmVzcyA9IGV4cG9ydHMuaXNWYWxpZEFkZHJlc3MgPSBleHBvcnRzLnplcm9BZGRyZXNzID0gdm9pZCAwO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xudmFyIGV0aGpzVXRpbCA9IHJlcXVpcmUoJ2V0aGpzLXV0aWwnKTtcbnZhciBzZWNwMjU2azEgPSByZXF1aXJlKCcuL3NlY3AyNTZrMXYzLWFkYXB0ZXInKTtcbnZhciBCTiA9IHJlcXVpcmUoXCJibi5qc1wiKTtcbnZhciBieXRlc18xID0gcmVxdWlyZShcIi4vYnl0ZXNcIik7XG52YXIgaGFzaF8xID0gcmVxdWlyZShcIi4vaGFzaFwiKTtcbi8qKlxuICogUmV0dXJucyBhIHplcm8gYWRkcmVzcy5cbiAqL1xuZXhwb3J0cy56ZXJvQWRkcmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYWRkcmVzc0xlbmd0aCA9IDIwO1xuICAgIHZhciBhZGRyID0gYnl0ZXNfMS56ZXJvcyhhZGRyZXNzTGVuZ3RoKTtcbiAgICByZXR1cm4gYnl0ZXNfMS5idWZmZXJUb0hleChhZGRyKTtcbn07XG4vKipcbiAqIENoZWNrcyBpZiB0aGUgYWRkcmVzcyBpcyBhIHZhbGlkLiBBY2NlcHRzIGNoZWNrc3VtbWVkIGFkZHJlc3NlcyB0b28uXG4gKi9cbmV4cG9ydHMuaXNWYWxpZEFkZHJlc3MgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICAgIHJldHVybiAvXjB4WzAtOWEtZkEtRl17NDB9JC8udGVzdChhZGRyZXNzKTtcbn07XG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIGFkZHJlc3MgaXMgYSB6ZXJvIGFkZHJlc3MuXG4gKi9cbmV4cG9ydHMuaXNaZXJvQWRkcmVzcyA9IGZ1bmN0aW9uIChhZGRyZXNzKSB7XG4gICAgdmFyIHplcm9BZGRyID0gZXhwb3J0cy56ZXJvQWRkcmVzcygpO1xuICAgIHJldHVybiB6ZXJvQWRkciA9PT0gYnl0ZXNfMS5hZGRIZXhQcmVmaXgoYWRkcmVzcyk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIGEgY2hlY2tzdW1tZWQgYWRkcmVzcy5cbiAqXG4gKiBJZiBhIGVpcDExOTFDaGFpbklkIGlzIHByb3ZpZGVkLCB0aGUgY2hhaW5JZCB3aWxsIGJlIGluY2x1ZGVkIGluIHRoZSBjaGVja3N1bSBjYWxjdWxhdGlvbi4gVGhpc1xuICogaGFzIHRoZSBlZmZlY3Qgb2YgY2hlY2tzdW1tZWQgYWRkcmVzc2VzIGZvciBvbmUgY2hhaW4gaGF2aW5nIGludmFsaWQgY2hlY2tzdW1zIGZvciBvdGhlcnMuXG4gKiBGb3IgbW9yZSBkZXRhaWxzLCBjb25zdWx0IEVJUC0xMTkxLlxuICpcbiAqIFdBUk5JTkc6IENoZWNrc3VtcyB3aXRoIGFuZCB3aXRob3V0IHRoZSBjaGFpbklkIHdpbGwgZGlmZmVyLiBBcyBvZiAyMDE5LTA2LTI2LCB0aGUgbW9zdCBjb21tb25seVxuICogdXNlZCB2YXJpYXRpb24gaW4gRXRoZXJldW0gd2FzIHdpdGhvdXQgdGhlIGNoYWluSWQuIFRoaXMgbWF5IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuICovXG5leHBvcnRzLnRvQ2hlY2tzdW1BZGRyZXNzID0gZnVuY3Rpb24gKGFkZHJlc3MsIGVpcDExOTFDaGFpbklkKSB7XG4gICAgYWRkcmVzcyA9IGV0aGpzVXRpbC5zdHJpcEhleFByZWZpeChhZGRyZXNzKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciBwcmVmaXggPSBlaXAxMTkxQ2hhaW5JZCAhPT0gdW5kZWZpbmVkID8gZWlwMTE5MUNoYWluSWQudG9TdHJpbmcoKSArICcweCcgOiAnJztcbiAgICB2YXIgaGFzaCA9IGhhc2hfMS5rZWNjYWsocHJlZml4ICsgYWRkcmVzcykudG9TdHJpbmcoJ2hleCcpO1xuICAgIHZhciByZXQgPSAnMHgnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWRkcmVzcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocGFyc2VJbnQoaGFzaFtpXSwgMTYpID49IDgpIHtcbiAgICAgICAgICAgIHJldCArPSBhZGRyZXNzW2ldLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXQgKz0gYWRkcmVzc1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufTtcbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBhZGRyZXNzIGlzIGEgdmFsaWQgY2hlY2tzdW1tZWQgYWRkcmVzcy5cbiAqXG4gKiBTZWUgdG9DaGVja3N1bUFkZHJlc3MnIGRvY3VtZW50YXRpb24gZm9yIGRldGFpbHMgYWJvdXQgdGhlIGVpcDExOTFDaGFpbklkIHBhcmFtZXRlci5cbiAqL1xuZXhwb3J0cy5pc1ZhbGlkQ2hlY2tzdW1BZGRyZXNzID0gZnVuY3Rpb24gKGFkZHJlc3MsIGVpcDExOTFDaGFpbklkKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuaXNWYWxpZEFkZHJlc3MoYWRkcmVzcykgJiYgZXhwb3J0cy50b0NoZWNrc3VtQWRkcmVzcyhhZGRyZXNzLCBlaXAxMTkxQ2hhaW5JZCkgPT09IGFkZHJlc3M7XG59O1xuLyoqXG4gKiBHZW5lcmF0ZXMgYW4gYWRkcmVzcyBvZiBhIG5ld2x5IGNyZWF0ZWQgY29udHJhY3QuXG4gKiBAcGFyYW0gZnJvbSBUaGUgYWRkcmVzcyB3aGljaCBpcyBjcmVhdGluZyB0aGlzIG5ldyBhZGRyZXNzXG4gKiBAcGFyYW0gbm9uY2UgVGhlIG5vbmNlIG9mIHRoZSBmcm9tIGFjY291bnRcbiAqL1xuZXhwb3J0cy5nZW5lcmF0ZUFkZHJlc3MgPSBmdW5jdGlvbiAoZnJvbSwgbm9uY2UpIHtcbiAgICBmcm9tID0gYnl0ZXNfMS50b0J1ZmZlcihmcm9tKTtcbiAgICB2YXIgbm9uY2VCTiA9IG5ldyBCTihub25jZSk7XG4gICAgaWYgKG5vbmNlQk4uaXNaZXJvKCkpIHtcbiAgICAgICAgLy8gaW4gUkxQIHdlIHdhbnQgdG8gZW5jb2RlIG51bGwgaW4gdGhlIGNhc2Ugb2YgemVybyBub25jZVxuICAgICAgICAvLyByZWFkIHRoZSBSTFAgZG9jdW1lbnRhdGlvbiBmb3IgYW4gYW5zd2VyIGlmIHlvdSBkYXJlXG4gICAgICAgIHJldHVybiBoYXNoXzEucmxwaGFzaChbZnJvbSwgbnVsbF0pLnNsaWNlKC0yMCk7XG4gICAgfVxuICAgIC8vIE9ubHkgdGFrZSB0aGUgbG93ZXIgMTYwYml0cyBvZiB0aGUgaGFzaFxuICAgIHJldHVybiBoYXNoXzEucmxwaGFzaChbZnJvbSwgQnVmZmVyLmZyb20obm9uY2VCTi50b0FycmF5KCkpXSkuc2xpY2UoLTIwKTtcbn07XG4vKipcbiAqIEdlbmVyYXRlcyBhbiBhZGRyZXNzIGZvciBhIGNvbnRyYWN0IGNyZWF0ZWQgdXNpbmcgQ1JFQVRFMi5cbiAqIEBwYXJhbSBmcm9tIFRoZSBhZGRyZXNzIHdoaWNoIGlzIGNyZWF0aW5nIHRoaXMgbmV3IGFkZHJlc3NcbiAqIEBwYXJhbSBzYWx0IEEgc2FsdFxuICogQHBhcmFtIGluaXRDb2RlIFRoZSBpbml0IGNvZGUgb2YgdGhlIGNvbnRyYWN0IGJlaW5nIGNyZWF0ZWRcbiAqL1xuZXhwb3J0cy5nZW5lcmF0ZUFkZHJlc3MyID0gZnVuY3Rpb24gKGZyb20sIHNhbHQsIGluaXRDb2RlKSB7XG4gICAgdmFyIGZyb21CdWYgPSBieXRlc18xLnRvQnVmZmVyKGZyb20pO1xuICAgIHZhciBzYWx0QnVmID0gYnl0ZXNfMS50b0J1ZmZlcihzYWx0KTtcbiAgICB2YXIgaW5pdENvZGVCdWYgPSBieXRlc18xLnRvQnVmZmVyKGluaXRDb2RlKTtcbiAgICBhc3NlcnQoZnJvbUJ1Zi5sZW5ndGggPT09IDIwKTtcbiAgICBhc3NlcnQoc2FsdEJ1Zi5sZW5ndGggPT09IDMyKTtcbiAgICB2YXIgYWRkcmVzcyA9IGhhc2hfMS5rZWNjYWsyNTYoQnVmZmVyLmNvbmNhdChbQnVmZmVyLmZyb20oJ2ZmJywgJ2hleCcpLCBmcm9tQnVmLCBzYWx0QnVmLCBoYXNoXzEua2VjY2FrMjU2KGluaXRDb2RlQnVmKV0pKTtcbiAgICByZXR1cm4gYWRkcmVzcy5zbGljZSgtMjApO1xufTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBzdXBwbGllZCBhZGRyZXNzIGJlbG9uZ3MgdG8gYSBwcmVjb21waWxlZCBhY2NvdW50IChCeXphbnRpdW0pLlxuICovXG5leHBvcnRzLmlzUHJlY29tcGlsZWQgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICAgIHZhciBhID0gYnl0ZXNfMS51bnBhZChhZGRyZXNzKTtcbiAgICByZXR1cm4gYS5sZW5ndGggPT09IDEgJiYgYVswXSA+PSAxICYmIGFbMF0gPD0gODtcbn07XG4vKipcbiAqIENoZWNrcyBpZiB0aGUgcHJpdmF0ZSBrZXkgc2F0aXNmaWVzIHRoZSBydWxlcyBvZiB0aGUgY3VydmUgc2VjcDI1NmsxLlxuICovXG5leHBvcnRzLmlzVmFsaWRQcml2YXRlID0gZnVuY3Rpb24gKHByaXZhdGVLZXkpIHtcbiAgICByZXR1cm4gc2VjcDI1NmsxLnByaXZhdGVLZXlWZXJpZnkocHJpdmF0ZUtleSk7XG59O1xuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHB1YmxpYyBrZXkgc2F0aXNmaWVzIHRoZSBydWxlcyBvZiB0aGUgY3VydmUgc2VjcDI1NmsxXG4gKiBhbmQgdGhlIHJlcXVpcmVtZW50cyBvZiBFdGhlcmV1bS5cbiAqIEBwYXJhbSBwdWJsaWNLZXkgVGhlIHR3byBwb2ludHMgb2YgYW4gdW5jb21wcmVzc2VkIGtleSwgdW5sZXNzIHNhbml0aXplIGlzIGVuYWJsZWRcbiAqIEBwYXJhbSBzYW5pdGl6ZSBBY2NlcHQgcHVibGljIGtleXMgaW4gb3RoZXIgZm9ybWF0c1xuICovXG5leHBvcnRzLmlzVmFsaWRQdWJsaWMgPSBmdW5jdGlvbiAocHVibGljS2V5LCBzYW5pdGl6ZSkge1xuICAgIGlmIChzYW5pdGl6ZSA9PT0gdm9pZCAwKSB7IHNhbml0aXplID0gZmFsc2U7IH1cbiAgICBpZiAocHVibGljS2V5Lmxlbmd0aCA9PT0gNjQpIHtcbiAgICAgICAgLy8gQ29udmVydCB0byBTRUMxIGZvciBzZWNwMjU2azFcbiAgICAgICAgcmV0dXJuIHNlY3AyNTZrMS5wdWJsaWNLZXlWZXJpZnkoQnVmZmVyLmNvbmNhdChbQnVmZmVyLmZyb20oWzRdKSwgcHVibGljS2V5XSkpO1xuICAgIH1cbiAgICBpZiAoIXNhbml0aXplKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHNlY3AyNTZrMS5wdWJsaWNLZXlWZXJpZnkocHVibGljS2V5KTtcbn07XG4vKipcbiAqIFJldHVybnMgdGhlIGV0aGVyZXVtIGFkZHJlc3Mgb2YgYSBnaXZlbiBwdWJsaWMga2V5LlxuICogQWNjZXB0cyBcIkV0aGVyZXVtIHB1YmxpYyBrZXlzXCIgYW5kIFNFQzEgZW5jb2RlZCBrZXlzLlxuICogQHBhcmFtIHB1YktleSBUaGUgdHdvIHBvaW50cyBvZiBhbiB1bmNvbXByZXNzZWQga2V5LCB1bmxlc3Mgc2FuaXRpemUgaXMgZW5hYmxlZFxuICogQHBhcmFtIHNhbml0aXplIEFjY2VwdCBwdWJsaWMga2V5cyBpbiBvdGhlciBmb3JtYXRzXG4gKi9cbmV4cG9ydHMucHViVG9BZGRyZXNzID0gZnVuY3Rpb24gKHB1YktleSwgc2FuaXRpemUpIHtcbiAgICBpZiAoc2FuaXRpemUgPT09IHZvaWQgMCkgeyBzYW5pdGl6ZSA9IGZhbHNlOyB9XG4gICAgcHViS2V5ID0gYnl0ZXNfMS50b0J1ZmZlcihwdWJLZXkpO1xuICAgIGlmIChzYW5pdGl6ZSAmJiBwdWJLZXkubGVuZ3RoICE9PSA2NCkge1xuICAgICAgICBwdWJLZXkgPSBzZWNwMjU2azEucHVibGljS2V5Q29udmVydChwdWJLZXksIGZhbHNlKS5zbGljZSgxKTtcbiAgICB9XG4gICAgYXNzZXJ0KHB1YktleS5sZW5ndGggPT09IDY0KTtcbiAgICAvLyBPbmx5IHRha2UgdGhlIGxvd2VyIDE2MGJpdHMgb2YgdGhlIGhhc2hcbiAgICByZXR1cm4gaGFzaF8xLmtlY2NhayhwdWJLZXkpLnNsaWNlKC0yMCk7XG59O1xuZXhwb3J0cy5wdWJsaWNUb0FkZHJlc3MgPSBleHBvcnRzLnB1YlRvQWRkcmVzcztcbi8qKlxuICogUmV0dXJucyB0aGUgZXRoZXJldW0gYWRkcmVzcyBvZiBhIGdpdmVuIHByaXZhdGUga2V5LlxuICogQHBhcmFtIHByaXZhdGVLZXkgQSBwcml2YXRlIGtleSBtdXN0IGJlIDI1NiBiaXRzIHdpZGVcbiAqL1xuZXhwb3J0cy5wcml2YXRlVG9BZGRyZXNzID0gZnVuY3Rpb24gKHByaXZhdGVLZXkpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5wdWJsaWNUb0FkZHJlc3MoZXhwb3J0cy5wcml2YXRlVG9QdWJsaWMocHJpdmF0ZUtleSkpO1xufTtcbi8qKlxuICogUmV0dXJucyB0aGUgZXRoZXJldW0gcHVibGljIGtleSBvZiBhIGdpdmVuIHByaXZhdGUga2V5LlxuICogQHBhcmFtIHByaXZhdGVLZXkgQSBwcml2YXRlIGtleSBtdXN0IGJlIDI1NiBiaXRzIHdpZGVcbiAqL1xuZXhwb3J0cy5wcml2YXRlVG9QdWJsaWMgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSkge1xuICAgIHByaXZhdGVLZXkgPSBieXRlc18xLnRvQnVmZmVyKHByaXZhdGVLZXkpO1xuICAgIC8vIHNraXAgdGhlIHR5cGUgZmxhZyBhbmQgdXNlIHRoZSBYLCBZIHBvaW50c1xuICAgIHJldHVybiBzZWNwMjU2azEucHVibGljS2V5Q3JlYXRlKHByaXZhdGVLZXksIGZhbHNlKS5zbGljZSgxKTtcbn07XG4vKipcbiAqIENvbnZlcnRzIGEgcHVibGljIGtleSB0byB0aGUgRXRoZXJldW0gZm9ybWF0LlxuICovXG5leHBvcnRzLmltcG9ydFB1YmxpYyA9IGZ1bmN0aW9uIChwdWJsaWNLZXkpIHtcbiAgICBwdWJsaWNLZXkgPSBieXRlc18xLnRvQnVmZmVyKHB1YmxpY0tleSk7XG4gICAgaWYgKHB1YmxpY0tleS5sZW5ndGggIT09IDY0KSB7XG4gICAgICAgIHB1YmxpY0tleSA9IHNlY3AyNTZrMS5wdWJsaWNLZXlDb252ZXJ0KHB1YmxpY0tleSwgZmFsc2UpLnNsaWNlKDEpO1xuICAgIH1cbiAgICByZXR1cm4gcHVibGljS2V5O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjY291bnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJhVG9KU09OID0gZXhwb3J0cy5hZGRIZXhQcmVmaXggPSBleHBvcnRzLnRvVW5zaWduZWQgPSBleHBvcnRzLmZyb21TaWduZWQgPSBleHBvcnRzLmJ1ZmZlclRvSGV4ID0gZXhwb3J0cy5idWZmZXJUb0ludCA9IGV4cG9ydHMudG9CdWZmZXIgPSBleHBvcnRzLnN0cmlwWmVyb3MgPSBleHBvcnRzLnVucGFkID0gZXhwb3J0cy5zZXRMZW5ndGhSaWdodCA9IGV4cG9ydHMuc2V0TGVuZ3RoID0gZXhwb3J0cy5zZXRMZW5ndGhMZWZ0ID0gZXhwb3J0cy56ZXJvcyA9IHZvaWQgMDtcbnZhciBldGhqc1V0aWwgPSByZXF1aXJlKCdldGhqcy11dGlsJyk7XG52YXIgQk4gPSByZXF1aXJlKFwiYm4uanNcIik7XG4vKipcbiAqIFJldHVybnMgYSBidWZmZXIgZmlsbGVkIHdpdGggMHMuXG4gKiBAcGFyYW0gYnl0ZXMgdGhlIG51bWJlciBvZiBieXRlcyB0aGUgYnVmZmVyIHNob3VsZCBiZVxuICovXG5leHBvcnRzLnplcm9zID0gZnVuY3Rpb24gKGJ5dGVzKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvY1Vuc2FmZShieXRlcykuZmlsbCgwKTtcbn07XG4vKipcbiAqIExlZnQgUGFkcyBhbiBgQXJyYXlgIG9yIGBCdWZmZXJgIHdpdGggbGVhZGluZyB6ZXJvcyB0aWxsIGl0IGhhcyBgbGVuZ3RoYCBieXRlcy5cbiAqIE9yIGl0IHRydW5jYXRlcyB0aGUgYmVnaW5uaW5nIGlmIGl0IGV4Y2VlZHMuXG4gKiBAcGFyYW0gbXNnIHRoZSB2YWx1ZSB0byBwYWQgKEJ1ZmZlcnxBcnJheSlcbiAqIEBwYXJhbSBsZW5ndGggdGhlIG51bWJlciBvZiBieXRlcyB0aGUgb3V0cHV0IHNob3VsZCBiZVxuICogQHBhcmFtIHJpZ2h0IHdoZXRoZXIgdG8gc3RhcnQgcGFkZGluZyBmb3JtIHRoZSBsZWZ0IG9yIHJpZ2h0XG4gKiBAcmV0dXJuIChCdWZmZXJ8QXJyYXkpXG4gKi9cbmV4cG9ydHMuc2V0TGVuZ3RoTGVmdCA9IGZ1bmN0aW9uIChtc2csIGxlbmd0aCwgcmlnaHQpIHtcbiAgICBpZiAocmlnaHQgPT09IHZvaWQgMCkgeyByaWdodCA9IGZhbHNlOyB9XG4gICAgdmFyIGJ1ZiA9IGV4cG9ydHMuemVyb3MobGVuZ3RoKTtcbiAgICBtc2cgPSBleHBvcnRzLnRvQnVmZmVyKG1zZyk7XG4gICAgaWYgKHJpZ2h0KSB7XG4gICAgICAgIGlmIChtc2cubGVuZ3RoIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBtc2cuY29weShidWYpO1xuICAgICAgICAgICAgcmV0dXJuIGJ1ZjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbXNnLnNsaWNlKDAsIGxlbmd0aCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAobXNnLmxlbmd0aCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgbXNnLmNvcHkoYnVmLCBsZW5ndGggLSBtc2cubGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiBidWY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1zZy5zbGljZSgtbGVuZ3RoKTtcbiAgICB9XG59O1xuZXhwb3J0cy5zZXRMZW5ndGggPSBleHBvcnRzLnNldExlbmd0aExlZnQ7XG4vKipcbiAqIFJpZ2h0IFBhZHMgYW4gYEFycmF5YCBvciBgQnVmZmVyYCB3aXRoIGxlYWRpbmcgemVyb3MgdGlsbCBpdCBoYXMgYGxlbmd0aGAgYnl0ZXMuXG4gKiBPciBpdCB0cnVuY2F0ZXMgdGhlIGJlZ2lubmluZyBpZiBpdCBleGNlZWRzLlxuICogQHBhcmFtIG1zZyB0aGUgdmFsdWUgdG8gcGFkIChCdWZmZXJ8QXJyYXkpXG4gKiBAcGFyYW0gbGVuZ3RoIHRoZSBudW1iZXIgb2YgYnl0ZXMgdGhlIG91dHB1dCBzaG91bGQgYmVcbiAqIEByZXR1cm4gKEJ1ZmZlcnxBcnJheSlcbiAqL1xuZXhwb3J0cy5zZXRMZW5ndGhSaWdodCA9IGZ1bmN0aW9uIChtc2csIGxlbmd0aCkge1xuICAgIHJldHVybiBleHBvcnRzLnNldExlbmd0aChtc2csIGxlbmd0aCwgdHJ1ZSk7XG59O1xuLyoqXG4gKiBUcmltcyBsZWFkaW5nIHplcm9zIGZyb20gYSBgQnVmZmVyYCBvciBhbiBgQXJyYXlgLlxuICogQHBhcmFtIGEgKEJ1ZmZlcnxBcnJheXxTdHJpbmcpXG4gKiBAcmV0dXJuIChCdWZmZXJ8QXJyYXl8U3RyaW5nKVxuICovXG5leHBvcnRzLnVucGFkID0gZnVuY3Rpb24gKGEpIHtcbiAgICBhID0gZXRoanNVdGlsLnN0cmlwSGV4UHJlZml4KGEpO1xuICAgIHZhciBmaXJzdCA9IGFbMF07XG4gICAgd2hpbGUgKGEubGVuZ3RoID4gMCAmJiBmaXJzdC50b1N0cmluZygpID09PSAnMCcpIHtcbiAgICAgICAgYSA9IGEuc2xpY2UoMSk7XG4gICAgICAgIGZpcnN0ID0gYVswXTtcbiAgICB9XG4gICAgcmV0dXJuIGE7XG59O1xuZXhwb3J0cy5zdHJpcFplcm9zID0gZXhwb3J0cy51bnBhZDtcbi8qKlxuICogQXR0ZW1wdHMgdG8gdHVybiBhIHZhbHVlIGludG8gYSBgQnVmZmVyYC4gQXMgaW5wdXQgaXQgc3VwcG9ydHMgYEJ1ZmZlcmAsIGBTdHJpbmdgLCBgTnVtYmVyYCwgbnVsbC91bmRlZmluZWQsIGBCTmAgYW5kIG90aGVyIG9iamVjdHMgd2l0aCBhIGB0b0FycmF5KClgIG1ldGhvZC5cbiAqIEBwYXJhbSB2IHRoZSB2YWx1ZVxuICovXG5leHBvcnRzLnRvQnVmZmVyID0gZnVuY3Rpb24gKHYpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih2KSkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2KSkge1xuICAgICAgICAgICAgdiA9IEJ1ZmZlci5mcm9tKHYpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKGV0aGpzVXRpbC5pc0hleFN0cmluZyh2KSkge1xuICAgICAgICAgICAgICAgIHYgPSBCdWZmZXIuZnJvbShldGhqc1V0aWwucGFkVG9FdmVuKGV0aGpzVXRpbC5zdHJpcEhleFByZWZpeCh2KSksICdoZXgnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb252ZXJ0IHN0cmluZyB0byBidWZmZXIuIHRvQnVmZmVyIG9ubHkgc3VwcG9ydHMgMHgtcHJlZml4ZWQgaGV4IHN0cmluZ3MgYW5kIHRoaXMgc3RyaW5nIHdhcyBnaXZlbjogXCIgKyB2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHYgPSBldGhqc1V0aWwuaW50VG9CdWZmZXIodik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodiA9PT0gbnVsbCB8fCB2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQk4uaXNCTih2KSkge1xuICAgICAgICAgICAgdiA9IHYudG9BcnJheUxpa2UoQnVmZmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2LnRvQXJyYXkpIHtcbiAgICAgICAgICAgIC8vIGNvbnZlcnRzIGEgQk4gdG8gYSBCdWZmZXJcbiAgICAgICAgICAgIHYgPSBCdWZmZXIuZnJvbSh2LnRvQXJyYXkoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgdHlwZScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2O1xufTtcbi8qKlxuICogQ29udmVydHMgYSBgQnVmZmVyYCB0byBhIGBOdW1iZXJgLlxuICogQHBhcmFtIGJ1ZiBgQnVmZmVyYCBvYmplY3QgdG8gY29udmVydFxuICogQHRocm93cyBJZiB0aGUgaW5wdXQgbnVtYmVyIGV4Y2VlZHMgNTMgYml0cy5cbiAqL1xuZXhwb3J0cy5idWZmZXJUb0ludCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgICByZXR1cm4gbmV3IEJOKGV4cG9ydHMudG9CdWZmZXIoYnVmKSkudG9OdW1iZXIoKTtcbn07XG4vKipcbiAqIENvbnZlcnRzIGEgYEJ1ZmZlcmAgaW50byBhIGAweGAtcHJlZml4ZWQgaGV4IGBTdHJpbmdgLlxuICogQHBhcmFtIGJ1ZiBgQnVmZmVyYCBvYmplY3QgdG8gY29udmVydFxuICovXG5leHBvcnRzLmJ1ZmZlclRvSGV4ID0gZnVuY3Rpb24gKGJ1Zikge1xuICAgIGJ1ZiA9IGV4cG9ydHMudG9CdWZmZXIoYnVmKTtcbiAgICByZXR1cm4gJzB4JyArIGJ1Zi50b1N0cmluZygnaGV4Jyk7XG59O1xuLyoqXG4gKiBJbnRlcnByZXRzIGEgYEJ1ZmZlcmAgYXMgYSBzaWduZWQgaW50ZWdlciBhbmQgcmV0dXJucyBhIGBCTmAuIEFzc3VtZXMgMjU2LWJpdCBudW1iZXJzLlxuICogQHBhcmFtIG51bSBTaWduZWQgaW50ZWdlciB2YWx1ZVxuICovXG5leHBvcnRzLmZyb21TaWduZWQgPSBmdW5jdGlvbiAobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBCTihudW0pLmZyb21Ud29zKDI1Nik7XG59O1xuLyoqXG4gKiBDb252ZXJ0cyBhIGBCTmAgdG8gYW4gdW5zaWduZWQgaW50ZWdlciBhbmQgcmV0dXJucyBpdCBhcyBhIGBCdWZmZXJgLiBBc3N1bWVzIDI1Ni1iaXQgbnVtYmVycy5cbiAqIEBwYXJhbSBudW1cbiAqL1xuZXhwb3J0cy50b1Vuc2lnbmVkID0gZnVuY3Rpb24gKG51bSkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShudW0udG9Ud29zKDI1NikudG9BcnJheSgpKTtcbn07XG4vKipcbiAqIEFkZHMgXCIweFwiIHRvIGEgZ2l2ZW4gYFN0cmluZ2AgaWYgaXQgZG9lcyBub3QgYWxyZWFkeSBzdGFydCB3aXRoIFwiMHhcIi5cbiAqL1xuZXhwb3J0cy5hZGRIZXhQcmVmaXggPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIHJldHVybiBldGhqc1V0aWwuaXNIZXhQcmVmaXhlZChzdHIpID8gc3RyIDogJzB4JyArIHN0cjtcbn07XG4vKipcbiAqIENvbnZlcnRzIGEgYEJ1ZmZlcmAgb3IgYEFycmF5YCB0byBKU09OLlxuICogQHBhcmFtIGJhIChCdWZmZXJ8QXJyYXkpXG4gKiBAcmV0dXJuIChBcnJheXxTdHJpbmd8bnVsbClcbiAqL1xuZXhwb3J0cy5iYVRvSlNPTiA9IGZ1bmN0aW9uIChiYSkge1xuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoYmEpKSB7XG4gICAgICAgIHJldHVybiBcIjB4XCIgKyBiYS50b1N0cmluZygnaGV4Jyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGJhIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFycmF5LnB1c2goZXhwb3J0cy5iYVRvSlNPTihiYVtpXSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ynl0ZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLktFQ0NBSzI1Nl9STFAgPSBleHBvcnRzLktFQ0NBSzI1Nl9STFBfUyA9IGV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWSA9IGV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWV9TID0gZXhwb3J0cy5LRUNDQUsyNTZfTlVMTCA9IGV4cG9ydHMuS0VDQ0FLMjU2X05VTExfUyA9IGV4cG9ydHMuVFdPX1BPVzI1NiA9IGV4cG9ydHMuTUFYX0lOVEVHRVIgPSB2b2lkIDA7XG52YXIgQk4gPSByZXF1aXJlKFwiYm4uanNcIik7XG4vKipcbiAqIFRoZSBtYXggaW50ZWdlciB0aGF0IHRoaXMgVk0gY2FuIGhhbmRsZVxuICovXG5leHBvcnRzLk1BWF9JTlRFR0VSID0gbmV3IEJOKCdmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmJywgMTYpO1xuLyoqXG4gKiAyXjI1NlxuICovXG5leHBvcnRzLlRXT19QT1cyNTYgPSBuZXcgQk4oJzEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJywgMTYpO1xuLyoqXG4gKiBLZWNjYWstMjU2IGhhc2ggb2YgbnVsbFxuICovXG5leHBvcnRzLktFQ0NBSzI1Nl9OVUxMX1MgPSAnYzVkMjQ2MDE4NmY3MjMzYzkyN2U3ZGIyZGNjNzAzYzBlNTAwYjY1M2NhODIyNzNiN2JmYWQ4MDQ1ZDg1YTQ3MCc7XG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiBudWxsXG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X05VTEwgPSBCdWZmZXIuZnJvbShleHBvcnRzLktFQ0NBSzI1Nl9OVUxMX1MsICdoZXgnKTtcbi8qKlxuICogS2VjY2FrLTI1NiBvZiBhbiBSTFAgb2YgYW4gZW1wdHkgYXJyYXlcbiAqL1xuZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZX1MgPSAnMWRjYzRkZThkZWM3NWQ3YWFiODViNTY3YjZjY2Q0MWFkMzEyNDUxYjk0OGE3NDEzZjBhMTQyZmQ0MGQ0OTM0Nyc7XG4vKipcbiAqIEtlY2Nhay0yNTYgb2YgYW4gUkxQIG9mIGFuIGVtcHR5IGFycmF5XG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWSA9IEJ1ZmZlci5mcm9tKGV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWV9TLCAnaGV4Jyk7XG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiB0aGUgUkxQIG9mIG51bGxcbiAqL1xuZXhwb3J0cy5LRUNDQUsyNTZfUkxQX1MgPSAnNTZlODFmMTcxYmNjNTVhNmZmODM0NWU2OTJjMGY4NmU1YjQ4ZTAxYjk5NmNhZGMwMDE2MjJmYjVlMzYzYjQyMSc7XG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiB0aGUgUkxQIG9mIG51bGxcbiAqL1xuZXhwb3J0cy5LRUNDQUsyNTZfUkxQID0gQnVmZmVyLmZyb20oZXhwb3J0cy5LRUNDQUsyNTZfUkxQX1MsICdoZXgnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmxwaGFzaCA9IGV4cG9ydHMucmlwZW1kMTYwID0gZXhwb3J0cy5zaGEyNTYgPSBleHBvcnRzLmtlY2NhazI1NiA9IGV4cG9ydHMua2VjY2FrID0gdm9pZCAwO1xudmFyIF9hID0gcmVxdWlyZSgnZXRoZXJldW0tY3J5cHRvZ3JhcGh5L2tlY2NhaycpLCBrZWNjYWsyMjQgPSBfYS5rZWNjYWsyMjQsIGtlY2NhazM4NCA9IF9hLmtlY2NhazM4NCwgazI1NiA9IF9hLmtlY2NhazI1Niwga2VjY2FrNTEyID0gX2Eua2VjY2FrNTEyO1xudmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpO1xudmFyIGV0aGpzVXRpbCA9IHJlcXVpcmUoJ2V0aGpzLXV0aWwnKTtcbnZhciBybHAgPSByZXF1aXJlKFwicmxwXCIpO1xudmFyIGJ5dGVzXzEgPSByZXF1aXJlKFwiLi9ieXRlc1wiKTtcbi8qKlxuICogQ3JlYXRlcyBLZWNjYWsgaGFzaCBvZiB0aGUgaW5wdXRcbiAqIEBwYXJhbSBhIFRoZSBpbnB1dCBkYXRhIChCdWZmZXJ8QXJyYXl8U3RyaW5nfE51bWJlcikgSWYgdGhlIHN0cmluZyBpcyBhIDB4LXByZWZpeGVkIGhleCB2YWx1ZVxuICogaXQncyBpbnRlcnByZXRlZCBhcyBoZXhhZGVjaW1hbCwgb3RoZXJ3aXNlIGFzIHV0ZjguXG4gKiBAcGFyYW0gYml0cyBUaGUgS2VjY2FrIHdpZHRoXG4gKi9cbmV4cG9ydHMua2VjY2FrID0gZnVuY3Rpb24gKGEsIGJpdHMpIHtcbiAgICBpZiAoYml0cyA9PT0gdm9pZCAwKSB7IGJpdHMgPSAyNTY7IH1cbiAgICBpZiAodHlwZW9mIGEgPT09ICdzdHJpbmcnICYmICFldGhqc1V0aWwuaXNIZXhTdHJpbmcoYSkpIHtcbiAgICAgICAgYSA9IEJ1ZmZlci5mcm9tKGEsICd1dGY4Jyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhID0gYnl0ZXNfMS50b0J1ZmZlcihhKTtcbiAgICB9XG4gICAgaWYgKCFiaXRzKVxuICAgICAgICBiaXRzID0gMjU2O1xuICAgIHN3aXRjaCAoYml0cykge1xuICAgICAgICBjYXNlIDIyNDoge1xuICAgICAgICAgICAgcmV0dXJuIGtlY2NhazIyNChhKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDI1Njoge1xuICAgICAgICAgICAgcmV0dXJuIGsyNTYoYSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzODQ6IHtcbiAgICAgICAgICAgIHJldHVybiBrZWNjYWszODQoYSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSA1MTI6IHtcbiAgICAgICAgICAgIHJldHVybiBrZWNjYWs1MTIoYSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxkIGFsZ29yaXRobToga2VjY2FrXCIgKyBiaXRzKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG4vKipcbiAqIENyZWF0ZXMgS2VjY2FrLTI1NiBoYXNoIG9mIHRoZSBpbnB1dCwgYWxpYXMgZm9yIGtlY2NhayhhLCAyNTYpLlxuICogQHBhcmFtIGEgVGhlIGlucHV0IGRhdGEgKEJ1ZmZlcnxBcnJheXxTdHJpbmd8TnVtYmVyKVxuICovXG5leHBvcnRzLmtlY2NhazI1NiA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMua2VjY2FrKGEpO1xufTtcbi8qKlxuICogQ3JlYXRlcyBTSEEyNTYgaGFzaCBvZiB0aGUgaW5wdXQuXG4gKiBAcGFyYW0gYSBUaGUgaW5wdXQgZGF0YSAoQnVmZmVyfEFycmF5fFN0cmluZ3xOdW1iZXIpXG4gKi9cbmV4cG9ydHMuc2hhMjU2ID0gZnVuY3Rpb24gKGEpIHtcbiAgICBhID0gYnl0ZXNfMS50b0J1ZmZlcihhKTtcbiAgICByZXR1cm4gY3JlYXRlSGFzaCgnc2hhMjU2JylcbiAgICAgICAgLnVwZGF0ZShhKVxuICAgICAgICAuZGlnZXN0KCk7XG59O1xuLyoqXG4gKiBDcmVhdGVzIFJJUEVNRDE2MCBoYXNoIG9mIHRoZSBpbnB1dC5cbiAqIEBwYXJhbSBhIFRoZSBpbnB1dCBkYXRhIChCdWZmZXJ8QXJyYXl8U3RyaW5nfE51bWJlcilcbiAqIEBwYXJhbSBwYWRkZWQgV2hldGhlciBpdCBzaG91bGQgYmUgcGFkZGVkIHRvIDI1NiBiaXRzIG9yIG5vdFxuICovXG5leHBvcnRzLnJpcGVtZDE2MCA9IGZ1bmN0aW9uIChhLCBwYWRkZWQpIHtcbiAgICBhID0gYnl0ZXNfMS50b0J1ZmZlcihhKTtcbiAgICB2YXIgaGFzaCA9IGNyZWF0ZUhhc2goJ3JtZDE2MCcpXG4gICAgICAgIC51cGRhdGUoYSlcbiAgICAgICAgLmRpZ2VzdCgpO1xuICAgIGlmIChwYWRkZWQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIGJ5dGVzXzEuc2V0TGVuZ3RoKGhhc2gsIDMyKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBoYXNoO1xuICAgIH1cbn07XG4vKipcbiAqIENyZWF0ZXMgU0hBLTMgaGFzaCBvZiB0aGUgUkxQIGVuY29kZWQgdmVyc2lvbiBvZiB0aGUgaW5wdXQuXG4gKiBAcGFyYW0gYSBUaGUgaW5wdXQgZGF0YVxuICovXG5leHBvcnRzLnJscGhhc2ggPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBleHBvcnRzLmtlY2NhayhybHAuZW5jb2RlKGEpKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oYXNoLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZWNwMjU2azEgPSBleHBvcnRzLnJscCA9IGV4cG9ydHMuQk4gPSB2b2lkIDA7XG52YXIgc2VjcDI1NmsxID0gcmVxdWlyZSgnLi9zZWNwMjU2azF2My1hZGFwdGVyJyk7XG5leHBvcnRzLnNlY3AyNTZrMSA9IHNlY3AyNTZrMTtcbnZhciBldGhqc1V0aWwgPSByZXF1aXJlKCdldGhqcy11dGlsJyk7XG52YXIgQk4gPSByZXF1aXJlKFwiYm4uanNcIik7XG5leHBvcnRzLkJOID0gQk47XG52YXIgcmxwID0gcmVxdWlyZShcInJscFwiKTtcbmV4cG9ydHMucmxwID0gcmxwO1xuT2JqZWN0LmFzc2lnbihleHBvcnRzLCBldGhqc1V0aWwpO1xuLyoqXG4gKiBDb25zdGFudHNcbiAqL1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKSwgZXhwb3J0cyk7XG4vKipcbiAqIFB1YmxpYy1rZXkgY3J5cHRvZ3JhcGh5IChzZWNwMjU2azEpIGFuZCBhZGRyZXNzZXNcbiAqL1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2FjY291bnRcIiksIGV4cG9ydHMpO1xuLyoqXG4gKiBIYXNoIGZ1bmN0aW9uc1xuICovXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGFzaFwiKSwgZXhwb3J0cyk7XG4vKipcbiAqIEVDRFNBIHNpZ25hdHVyZVxuICovXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc2lnbmF0dXJlXCIpLCBleHBvcnRzKTtcbi8qKlxuICogVXRpbGl0aWVzIGZvciBtYW5pcHVsYXRpbmcgQnVmZmVycywgYnl0ZSBhcnJheXMsIGV0Yy5cbiAqL1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2J5dGVzXCIpLCBleHBvcnRzKTtcbi8qKlxuICogRnVuY3Rpb24gZm9yIGRlZmluaW5pbmcgcHJvcGVydGllcyBvbiBhbiBvYmplY3RcbiAqL1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL29iamVjdFwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmaW5lUHJvcGVydGllcyA9IHZvaWQgMDtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbnZhciBldGhqc1V0aWwgPSByZXF1aXJlKCdldGhqcy11dGlsJyk7XG52YXIgcmxwID0gcmVxdWlyZShcInJscFwiKTtcbnZhciBieXRlc18xID0gcmVxdWlyZShcIi4vYnl0ZXNcIik7XG4vKipcbiAqIERlZmluZXMgcHJvcGVydGllcyBvbiBhIGBPYmplY3RgLiBJdCBtYWtlIHRoZSBhc3N1bXB0aW9uIHRoYXQgdW5kZXJseWluZyBkYXRhIGlzIGJpbmFyeS5cbiAqIEBwYXJhbSBzZWxmIHRoZSBgT2JqZWN0YCB0byBkZWZpbmUgcHJvcGVydGllcyBvblxuICogQHBhcmFtIGZpZWxkcyBhbiBhcnJheSBmaWVsZHMgdG8gZGVmaW5lLiBGaWVsZHMgY2FuIGNvbnRhaW46XG4gKiAqIGBuYW1lYCAtIHRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0aWVzXG4gKiAqIGBsZW5ndGhgIC0gdGhlIG51bWJlciBvZiBieXRlcyB0aGUgZmllbGQgY2FuIGhhdmVcbiAqICogYGFsbG93TGVzc2AgLSBpZiB0aGUgZmllbGQgY2FuIGJlIGxlc3MgdGhhbiB0aGUgbGVuZ3RoXG4gKiAqIGBhbGxvd0VtcHR5YFxuICogQHBhcmFtIGRhdGEgZGF0YSB0byBiZSB2YWxpZGF0ZWQgYWdhaW5zdCB0aGUgZGVmaW5pdGlvbnNcbiAqIEBkZXByZWNhdGVkXG4gKi9cbmV4cG9ydHMuZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIChzZWxmLCBmaWVsZHMsIGRhdGEpIHtcbiAgICBzZWxmLnJhdyA9IFtdO1xuICAgIHNlbGYuX2ZpZWxkcyA9IFtdO1xuICAgIC8vIGF0dGFjaCB0aGUgYHRvSlNPTmBcbiAgICBzZWxmLnRvSlNPTiA9IGZ1bmN0aW9uIChsYWJlbCkge1xuICAgICAgICBpZiAobGFiZWwgPT09IHZvaWQgMCkgeyBsYWJlbCA9IGZhbHNlOyB9XG4gICAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICAgICAgdmFyIG9ial8xID0ge307XG4gICAgICAgICAgICBzZWxmLl9maWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgICAgICAgICBvYmpfMVtmaWVsZF0gPSBcIjB4XCIgKyBzZWxmW2ZpZWxkXS50b1N0cmluZygnaGV4Jyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBvYmpfMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnl0ZXNfMS5iYVRvSlNPTihzZWxmLnJhdyk7XG4gICAgfTtcbiAgICBzZWxmLnNlcmlhbGl6ZSA9IGZ1bmN0aW9uIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHJscC5lbmNvZGUoc2VsZi5yYXcpO1xuICAgIH07XG4gICAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkLCBpKSB7XG4gICAgICAgIHNlbGYuX2ZpZWxkcy5wdXNoKGZpZWxkLm5hbWUpO1xuICAgICAgICBmdW5jdGlvbiBnZXR0ZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi5yYXdbaV07XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2V0dGVyKHYpIHtcbiAgICAgICAgICAgIHYgPSBieXRlc18xLnRvQnVmZmVyKHYpO1xuICAgICAgICAgICAgaWYgKHYudG9TdHJpbmcoJ2hleCcpID09PSAnMDAnICYmICFmaWVsZC5hbGxvd1plcm8pIHtcbiAgICAgICAgICAgICAgICB2ID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZpZWxkLmFsbG93TGVzcyAmJiBmaWVsZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB2ID0gYnl0ZXNfMS5zdHJpcFplcm9zKHYpO1xuICAgICAgICAgICAgICAgIGFzc2VydChmaWVsZC5sZW5ndGggPj0gdi5sZW5ndGgsIFwiVGhlIGZpZWxkIFwiICsgZmllbGQubmFtZSArIFwiIG11c3Qgbm90IGhhdmUgbW9yZSBcIiArIGZpZWxkLmxlbmd0aCArIFwiIGJ5dGVzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIShmaWVsZC5hbGxvd1plcm8gJiYgdi5sZW5ndGggPT09IDApICYmIGZpZWxkLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGFzc2VydChmaWVsZC5sZW5ndGggPT09IHYubGVuZ3RoLCBcIlRoZSBmaWVsZCBcIiArIGZpZWxkLm5hbWUgKyBcIiBtdXN0IGhhdmUgYnl0ZSBsZW5ndGggb2YgXCIgKyBmaWVsZC5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5yYXdbaV0gPSB2O1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCBmaWVsZC5uYW1lLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZ2V0OiBnZXR0ZXIsXG4gICAgICAgICAgICBzZXQ6IHNldHRlcixcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChmaWVsZC5kZWZhdWx0KSB7XG4gICAgICAgICAgICBzZWxmW2ZpZWxkLm5hbWVdID0gZmllbGQuZGVmYXVsdDtcbiAgICAgICAgfVxuICAgICAgICAvLyBhdHRhY2ggYWxpYXNcbiAgICAgICAgaWYgKGZpZWxkLmFsaWFzKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZiwgZmllbGQuYWxpYXMsIHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgc2V0OiBzZXR0ZXIsXG4gICAgICAgICAgICAgICAgZ2V0OiBnZXR0ZXIsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIGlmIHRoZSBjb25zdHVjdG9yIGlzIHBhc3NlZCBkYXRhXG4gICAgaWYgKGRhdGEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZGF0YSA9IEJ1ZmZlci5mcm9tKGV0aGpzVXRpbC5zdHJpcEhleFByZWZpeChkYXRhKSwgJ2hleCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIHtcbiAgICAgICAgICAgIGRhdGEgPSBybHAuZGVjb2RlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGggPiBzZWxmLl9maWVsZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBudW1iZXIgb2YgZmllbGRzIGluIGRhdGEnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSBhbGwgdGhlIGl0ZW1zIGFyZSBidWZmZXJzXG4gICAgICAgICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKGQsIGkpIHtcbiAgICAgICAgICAgICAgICBzZWxmW3NlbGYuX2ZpZWxkc1tpXV0gPSBieXRlc18xLnRvQnVmZmVyKGQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB2YXIga2V5c18xID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gICAgICAgICAgICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5c18xLmluZGV4T2YoZmllbGQubmFtZSkgIT09IC0xKVxuICAgICAgICAgICAgICAgICAgICBzZWxmW2ZpZWxkLm5hbWVdID0gZGF0YVtmaWVsZC5uYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAoa2V5c18xLmluZGV4T2YoZmllbGQuYWxpYXMpICE9PSAtMSlcbiAgICAgICAgICAgICAgICAgICAgc2VsZltmaWVsZC5hbGlhc10gPSBkYXRhW2ZpZWxkLmFsaWFzXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGRhdGEnKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYmplY3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmVjZGhVbnNhZmUgPSBleHBvcnRzLmVjZGggPSBleHBvcnRzLnJlY292ZXIgPSBleHBvcnRzLnZlcmlmeSA9IGV4cG9ydHMuc2lnbiA9IGV4cG9ydHMuc2lnbmF0dXJlSW1wb3J0TGF4ID0gZXhwb3J0cy5zaWduYXR1cmVJbXBvcnQgPSBleHBvcnRzLnNpZ25hdHVyZUV4cG9ydCA9IGV4cG9ydHMuc2lnbmF0dXJlTm9ybWFsaXplID0gZXhwb3J0cy5wdWJsaWNLZXlDb21iaW5lID0gZXhwb3J0cy5wdWJsaWNLZXlUd2Vha011bCA9IGV4cG9ydHMucHVibGljS2V5VHdlYWtBZGQgPSBleHBvcnRzLnB1YmxpY0tleVZlcmlmeSA9IGV4cG9ydHMucHVibGljS2V5Q29udmVydCA9IGV4cG9ydHMucHVibGljS2V5Q3JlYXRlID0gZXhwb3J0cy5wcml2YXRlS2V5VHdlYWtNdWwgPSBleHBvcnRzLnByaXZhdGVLZXlUd2Vha0FkZCA9IGV4cG9ydHMucHJpdmF0ZUtleU1vZEludmVyc2UgPSBleHBvcnRzLnByaXZhdGVLZXlOZWdhdGUgPSBleHBvcnRzLnByaXZhdGVLZXlJbXBvcnQgPSBleHBvcnRzLnByaXZhdGVLZXlFeHBvcnQgPSBleHBvcnRzLnByaXZhdGVLZXlWZXJpZnkgPSB2b2lkIDA7XG52YXIgc2VjcDI1NmsxID0gcmVxdWlyZSgnZXRoZXJldW0tY3J5cHRvZ3JhcGh5L3NlY3AyNTZrMScpO1xudmFyIHNlY3AyNTZrMXYzID0gcmVxdWlyZSgnLi9zZWNwMjU2azF2My1saWIvaW5kZXgnKTtcbnZhciBkZXIgPSByZXF1aXJlKCcuL3NlY3AyNTZrMXYzLWxpYi9kZXInKTtcbi8qKlxuICogVmVyaWZ5IGFuIEVDRFNBIHByaXZhdGVLZXlcbiAqIEBtZXRob2QgcHJpdmF0ZUtleVZlcmlmeVxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydHMucHJpdmF0ZUtleVZlcmlmeSA9IGZ1bmN0aW9uIChwcml2YXRlS2V5KSB7XG4gICAgLy8gc2VjcDI1NmsxIHY0IHZlcnNpb24gdGhyb3dzIHdoZW4gcHJpdmF0ZUtleSBsZW5ndGggaXMgbm90IDMyXG4gICAgaWYgKHByaXZhdGVLZXkubGVuZ3RoICE9PSAzMikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBzZWNwMjU2azEucHJpdmF0ZUtleVZlcmlmeShVaW50OEFycmF5LmZyb20ocHJpdmF0ZUtleSkpO1xufTtcbi8qKlxuICogRXhwb3J0IGEgcHJpdmF0ZUtleSBpbiBERVIgZm9ybWF0XG4gKiBAbWV0aG9kIHByaXZhdGVLZXlFeHBvcnRcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbXByZXNzZWRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydHMucHJpdmF0ZUtleUV4cG9ydCA9IGZ1bmN0aW9uIChwcml2YXRlS2V5LCBjb21wcmVzc2VkKSB7XG4gICAgLy8gc2VjcDI1NmsxIHY0IHZlcnNpb24gdGhyb3dzIHdoZW4gcHJpdmF0ZUtleSBsZW5ndGggaXMgbm90IDMyXG4gICAgaWYgKHByaXZhdGVLZXkubGVuZ3RoICE9PSAzMikge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigncHJpdmF0ZSBrZXkgbGVuZ3RoIGlzIGludmFsaWQnKTtcbiAgICB9XG4gICAgdmFyIHB1YmxpY0tleSA9IHNlY3AyNTZrMXYzLnByaXZhdGVLZXlFeHBvcnQocHJpdmF0ZUtleSwgY29tcHJlc3NlZCk7XG4gICAgcmV0dXJuIGRlci5wcml2YXRlS2V5RXhwb3J0KHByaXZhdGVLZXksIHB1YmxpY0tleSwgY29tcHJlc3NlZCk7XG59O1xuLyoqXG4gKiBJbXBvcnQgYSBwcml2YXRlS2V5IGluIERFUiBmb3JtYXRcbiAqIEBtZXRob2QgcHJpdmF0ZUtleUltcG9ydFxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5wcml2YXRlS2V5SW1wb3J0ID0gZnVuY3Rpb24gKHByaXZhdGVLZXkpIHtcbiAgICAvLyBwcml2YXRlS2V5SW1wb3J0IG1ldGhvZCBpcyBub3QgcGFydCBvZiBzZWNwMjU2azEgdjQgcGFja2FnZVxuICAgIC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgb24gdjNcbiAgICBwcml2YXRlS2V5ID0gZGVyLnByaXZhdGVLZXlJbXBvcnQocHJpdmF0ZUtleSk7XG4gICAgaWYgKHByaXZhdGVLZXkgIT09IG51bGwgJiYgcHJpdmF0ZUtleS5sZW5ndGggPT09IDMyICYmIGV4cG9ydHMucHJpdmF0ZUtleVZlcmlmeShwcml2YXRlS2V5KSkge1xuICAgICAgICByZXR1cm4gcHJpdmF0ZUtleTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiY291bGRuJ3QgaW1wb3J0IGZyb20gREVSIGZvcm1hdFwiKTtcbn07XG4vKipcbiAqIE5lZ2F0ZSBhIHByaXZhdGVLZXkgYnkgc3VidHJhY3RpbmcgaXQgZnJvbSB0aGUgb3JkZXIgb2YgdGhlIGN1cnZlJ3MgYmFzZSBwb2ludFxuICogQG1ldGhvZCBwcml2YXRlS2V5TmVnYXRlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHJpdmF0ZUtleVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5leHBvcnRzLnByaXZhdGVLZXlOZWdhdGUgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEucHJpdmF0ZUtleU5lZ2F0ZShVaW50OEFycmF5LmZyb20ocHJpdmF0ZUtleSkpKTtcbn07XG4vKipcbiAqIENvbXB1dGUgdGhlIGludmVyc2Ugb2YgYSBwcml2YXRlS2V5IChtb2R1bG8gdGhlIG9yZGVyIG9mIHRoZSBjdXJ2ZSdzIGJhc2UgcG9pbnQpLlxuICogQG1ldGhvZCBwcml2YXRlS2V5TW9kSW52ZXJzZVxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5wcml2YXRlS2V5TW9kSW52ZXJzZSA9IGZ1bmN0aW9uIChwcml2YXRlS2V5KSB7XG4gICAgaWYgKHByaXZhdGVLZXkubGVuZ3RoICE9PSAzMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ByaXZhdGUga2V5IGxlbmd0aCBpcyBpbnZhbGlkJyk7XG4gICAgfVxuICAgIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azF2My5wcml2YXRlS2V5TW9kSW52ZXJzZShVaW50OEFycmF5LmZyb20ocHJpdmF0ZUtleSkpKTtcbn07XG4vKipcbiAqIFR3ZWFrIGEgcHJpdmF0ZUtleSBieSBhZGRpbmcgdHdlYWsgdG8gaXQuXG4gKiBAbWV0aG9kIHByaXZhdGVLZXlUd2Vha0FkZFxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEBwYXJhbSB7QnVmZmVyfSB0d2Vha1xuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5leHBvcnRzLnByaXZhdGVLZXlUd2Vha0FkZCA9IGZ1bmN0aW9uIChwcml2YXRlS2V5LCB0d2Vhaykge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEucHJpdmF0ZUtleVR3ZWFrQWRkKFVpbnQ4QXJyYXkuZnJvbShwcml2YXRlS2V5KSwgdHdlYWspKTtcbn07XG4vKipcbiAqIFR3ZWFrIGEgcHJpdmF0ZUtleSBieSBtdWx0aXBseWluZyBpdCBieSBhIHR3ZWFrLlxuICogQG1ldGhvZCBwcml2YXRlS2V5VHdlYWtNdWxcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcGFyYW0ge0J1ZmZlcn0gdHdlYWtcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5wcml2YXRlS2V5VHdlYWtNdWwgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSwgdHdlYWspIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oc2VjcDI1NmsxLnByaXZhdGVLZXlUd2Vha011bChVaW50OEFycmF5LmZyb20ocHJpdmF0ZUtleSksIFVpbnQ4QXJyYXkuZnJvbSh0d2VhaykpKTtcbn07XG4vKipcbiAqIENvbXB1dGUgdGhlIHB1YmxpYyBrZXkgZm9yIGEgcHJpdmF0ZUtleS5cbiAqIEBtZXRob2QgcHVibGljS2V5Q3JlYXRlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHJpdmF0ZUtleVxuICogQHBhcmFtIHtib29sZWFufSBjb21wcmVzc2VkXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMucHVibGljS2V5Q3JlYXRlID0gZnVuY3Rpb24gKHByaXZhdGVLZXksIGNvbXByZXNzZWQpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oc2VjcDI1NmsxLnB1YmxpY0tleUNyZWF0ZShVaW50OEFycmF5LmZyb20ocHJpdmF0ZUtleSksIGNvbXByZXNzZWQpKTtcbn07XG4vKipcbiAqIENvbnZlcnQgYSBwdWJsaWNLZXkgdG8gY29tcHJlc3NlZCBvciB1bmNvbXByZXNzZWQgZm9ybS5cbiAqIEBtZXRob2QgcHVibGljS2V5Q29udmVydFxuICogQHBhcmFtIHtCdWZmZXJ9IHB1YmxpY0tleVxuICogQHBhcmFtIHtib29sZWFufSBjb21wcmVzc2VkXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMucHVibGljS2V5Q29udmVydCA9IGZ1bmN0aW9uIChwdWJsaWNLZXksIGNvbXByZXNzZWQpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oc2VjcDI1NmsxLnB1YmxpY0tleUNvbnZlcnQoVWludDhBcnJheS5mcm9tKHB1YmxpY0tleSksIGNvbXByZXNzZWQpKTtcbn07XG4vKipcbiAqIFZlcmlmeSBhbiBFQ0RTQSBwdWJsaWNLZXkuXG4gKiBAbWV0aG9kIHB1YmxpY0tleVZlcmlmeVxuICogQHBhcmFtIHtCdWZmZXJ9IHB1YmxpY0tleVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0cy5wdWJsaWNLZXlWZXJpZnkgPSBmdW5jdGlvbiAocHVibGljS2V5KSB7XG4gICAgLy8gc2VjcDI1NmsxIHY0IHZlcnNpb24gdGhyb3dzIHdoZW4gcHVibGljS2V5IGxlbmd0aCBpcyBub3QgMzMgb3IgNjVcbiAgICBpZiAocHVibGljS2V5Lmxlbmd0aCAhPT0gMzMgJiYgcHVibGljS2V5Lmxlbmd0aCAhPT0gNjUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gc2VjcDI1NmsxLnB1YmxpY0tleVZlcmlmeShVaW50OEFycmF5LmZyb20ocHVibGljS2V5KSk7XG59O1xuLyoqXG4gKiBUd2VhayBhIHB1YmxpY0tleSBieSBhZGRpbmcgdHdlYWsgdGltZXMgdGhlIGdlbmVyYXRvciB0byBpdC5cbiAqIEBtZXRob2QgcHVibGljS2V5VHdlYWtBZGRcbiAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXlcbiAqIEBwYXJhbSB7QnVmZmVyfSB0d2Vha1xuICogQHBhcmFtIHtib29sZWFufSBjb21wcmVzc2VkXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMucHVibGljS2V5VHdlYWtBZGQgPSBmdW5jdGlvbiAocHVibGljS2V5LCB0d2VhaywgY29tcHJlc3NlZCkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEucHVibGljS2V5VHdlYWtBZGQoVWludDhBcnJheS5mcm9tKHB1YmxpY0tleSksIFVpbnQ4QXJyYXkuZnJvbSh0d2VhayksIGNvbXByZXNzZWQpKTtcbn07XG4vKipcbiAqIFR3ZWFrIGEgcHVibGljS2V5IGJ5IG11bHRpcGx5aW5nIGl0IGJ5IGEgdHdlYWsgdmFsdWVcbiAqIEBtZXRob2QgcHVibGljS2V5VHdlYWtNdWxcbiAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXlcbiAqIEBwYXJhbSB7QnVmZmVyfSB0d2Vha1xuICogQHBhcmFtIHtib29sZWFufSBjb21wcmVzc2VkXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMucHVibGljS2V5VHdlYWtNdWwgPSBmdW5jdGlvbiAocHVibGljS2V5LCB0d2VhaywgY29tcHJlc3NlZCkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEucHVibGljS2V5VHdlYWtNdWwoVWludDhBcnJheS5mcm9tKHB1YmxpY0tleSksIFVpbnQ4QXJyYXkuZnJvbSh0d2VhayksIGNvbXByZXNzZWQpKTtcbn07XG4vKipcbiAqIEFkZCBhIGdpdmVuIHB1YmxpY0tleXMgdG9nZXRoZXIuXG4gKiBAbWV0aG9kIHB1YmxpY0tleUNvbWJpbmVcbiAqIEBwYXJhbSB7QXJyYXk8QnVmZmVyPn0gcHVibGljS2V5c1xuICogQHBhcmFtIHtib29sZWFufSBjb21wcmVzc2VkXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMucHVibGljS2V5Q29tYmluZSA9IGZ1bmN0aW9uIChwdWJsaWNLZXlzLCBjb21wcmVzc2VkKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBwdWJsaWNLZXlzLmZvckVhY2goZnVuY3Rpb24gKHB1YmxpY0tleSkge1xuICAgICAgICBrZXlzLnB1c2goVWludDhBcnJheS5mcm9tKHB1YmxpY0tleSkpO1xuICAgIH0pO1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEucHVibGljS2V5Q29tYmluZShrZXlzLCBjb21wcmVzc2VkKSk7XG59O1xuLyoqXG4gKiBDb252ZXJ0IGEgc2lnbmF0dXJlIHRvIGEgbm9ybWFsaXplZCBsb3dlci1TIGZvcm0uXG4gKiBAbWV0aG9kIHNpZ25hdHVyZU5vcm1hbGl6ZVxuICogQHBhcmFtIHtCdWZmZXJ9IHNpZ25hdHVyZVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5leHBvcnRzLnNpZ25hdHVyZU5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzaWduYXR1cmUpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oc2VjcDI1NmsxLnNpZ25hdHVyZU5vcm1hbGl6ZShVaW50OEFycmF5LmZyb20oc2lnbmF0dXJlKSkpO1xufTtcbi8qKlxuICogU2VyaWFsaXplIGFuIEVDRFNBIHNpZ25hdHVyZSBpbiBERVIgZm9ybWF0LlxuICogQG1ldGhvZCBzaWduYXR1cmVFeHBvcnRcbiAqIEBwYXJhbSB7QnVmZmVyfSBzaWduYXR1cmVcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5zaWduYXR1cmVFeHBvcnQgPSBmdW5jdGlvbiAoc2lnbmF0dXJlKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5zaWduYXR1cmVFeHBvcnQoVWludDhBcnJheS5mcm9tKHNpZ25hdHVyZSkpKTtcbn07XG4vKipcbiAqIFBhcnNlIGEgREVSIEVDRFNBIHNpZ25hdHVyZSAoZm9sbG93IGJ5IFtCSVA2Nl0oaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW4vYmlwcy9ibG9iL21hc3Rlci9iaXAtMDA2Ni5tZWRpYXdpa2kpKS5cbiAqIEBtZXRob2Qgc2lnbmF0dXJlSW1wb3J0XG4gKiBAcGFyYW0ge0J1ZmZlcn0gc2lnbmF0dXJlXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMuc2lnbmF0dXJlSW1wb3J0ID0gZnVuY3Rpb24gKHNpZ25hdHVyZSkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuc2lnbmF0dXJlSW1wb3J0KFVpbnQ4QXJyYXkuZnJvbShzaWduYXR1cmUpKSk7XG59O1xuLyoqXG4gKiBQYXJzZSBhIERFUiBFQ0RTQSBzaWduYXR1cmUgKG5vdCBmb2xsb3cgYnkgW0JJUDY2XShodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbi9iaXBzL2Jsb2IvbWFzdGVyL2JpcC0wMDY2Lm1lZGlhd2lraSkpLlxuICogQG1ldGhvZCBzaWduYXR1cmVJbXBvcnRMYXhcbiAqIEBwYXJhbSB7QnVmZmVyfSBzaWduYXR1cmVcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5zaWduYXR1cmVJbXBvcnRMYXggPSBmdW5jdGlvbiAoc2lnbmF0dXJlKSB7XG4gICAgLy8gc2lnbmF0dXJlSW1wb3J0TGF4IG1ldGhvZCBpcyBub3QgcGFydCBvZiBzZWNwMjU2azEgdjQgcGFja2FnZVxuICAgIC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgb24gdjNcbiAgICAvLyBlbnN1cmUgdGhhdCBzaWduYXR1cmUgaXMgZ3JlYXRlciB0aGFuIDBcbiAgICBpZiAoc2lnbmF0dXJlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc2lnbmF0dXJlIGxlbmd0aCBpcyBpbnZhbGlkJyk7XG4gICAgfVxuICAgIHZhciBzaWdPYmogPSBkZXIuc2lnbmF0dXJlSW1wb3J0TGF4KHNpZ25hdHVyZSk7XG4gICAgaWYgKHNpZ09iaiA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb3VsZG4ndCBwYXJzZSBERVIgc2lnbmF0dXJlXCIpO1xuICAgIH1cbiAgICByZXR1cm4gc2VjcDI1NmsxdjMuc2lnbmF0dXJlSW1wb3J0KHNpZ09iaik7XG59O1xuLyoqXG4gKiBDcmVhdGUgYW4gRUNEU0Egc2lnbmF0dXJlLiBBbHdheXMgcmV0dXJuIGxvdy1TIHNpZ25hdHVyZS5cbiAqIEBtZXRob2Qgc2lnblxuICogQHBhcmFtIHtCdWZmZXJ9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5leHBvcnRzLnNpZ24gPSBmdW5jdGlvbiAobWVzc2FnZSwgcHJpdmF0ZUtleSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMgc2hvdWxkIGJlIGFuIE9iamVjdCcpO1xuICAgIH1cbiAgICB2YXIgc2lnbk9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgc2lnbk9wdGlvbnMgPSB7fTtcbiAgICAgICAgaWYgKG9wdGlvbnMuZGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gdmFsaWRhdGUgb3B0aW9uLmRhdGEgbGVuZ3RoXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zLmRhdGEgc2hvdWxkIGJlIGEgQnVmZmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuZGF0YSkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGF0YS5sZW5ndGggIT0gMzIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3B0aW9ucy5kYXRhIGxlbmd0aCBpcyBpbnZhbGlkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaWduT3B0aW9ucy5kYXRhID0gbmV3IFVpbnQ4QXJyYXkob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5ub25jZWZuID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zLm5vbmNlZm4gc2hvdWxkIGJlIGEgRnVuY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5ub25jZWZuKSB7XG4gICAgICAgICAgICAvLyBjb252ZXJ0IG9wdGlvbi5ub25jZWZuIGZ1bmN0aW9uIHNpZ25hdHVyZVxuICAgICAgICAgICAgc2lnbk9wdGlvbnMubm9uY2VmbiA9IGZ1bmN0aW9uIChtZXNzYWdlLCBwcml2YXRlS2V5LCBhbGdvLCBkYXRhLCBhdHRlbXB0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGJ1ZmZlckFsZ28gPSBhbGdvICE9IG51bGwgPyBCdWZmZXIuZnJvbShhbGdvKSA6IG51bGw7XG4gICAgICAgICAgICAgICAgdmFyIGJ1ZmZlckRhdGEgPSBkYXRhICE9IG51bGwgPyBCdWZmZXIuZnJvbShkYXRhKSA6IG51bGw7XG4gICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKCcnKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5ub25jZWZuKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IG9wdGlvbnMubm9uY2VmbihCdWZmZXIuZnJvbShtZXNzYWdlKSwgQnVmZmVyLmZyb20ocHJpdmF0ZUtleSksIGJ1ZmZlckFsZ28sIGJ1ZmZlckRhdGEsIGF0dGVtcHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHNpZyA9IHNlY3AyNTZrMS5lY2RzYVNpZ24oVWludDhBcnJheS5mcm9tKG1lc3NhZ2UpLCBVaW50OEFycmF5LmZyb20ocHJpdmF0ZUtleSksIHNpZ25PcHRpb25zKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzaWduYXR1cmU6IEJ1ZmZlci5mcm9tKHNpZy5zaWduYXR1cmUpLFxuICAgICAgICByZWNvdmVyeTogc2lnLnJlY2lkLFxuICAgIH07XG59O1xuLyoqXG4gKiBWZXJpZnkgYW4gRUNEU0Egc2lnbmF0dXJlLlxuICogQG1ldGhvZCB2ZXJpZnlcbiAqIEBwYXJhbSB7QnVmZmVyfSBtZXNzYWdlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gc2lnbmF0dXJlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHVibGljS2V5XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnRzLnZlcmlmeSA9IGZ1bmN0aW9uIChtZXNzYWdlLCBzaWduYXR1cmUsIHB1YmxpY0tleSkge1xuICAgIHJldHVybiBzZWNwMjU2azEuZWNkc2FWZXJpZnkoVWludDhBcnJheS5mcm9tKHNpZ25hdHVyZSksIFVpbnQ4QXJyYXkuZnJvbShtZXNzYWdlKSwgcHVibGljS2V5KTtcbn07XG4vKipcbiAqIFJlY292ZXIgYW4gRUNEU0EgcHVibGljIGtleSBmcm9tIGEgc2lnbmF0dXJlLlxuICogQG1ldGhvZCByZWNvdmVyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gbWVzc2FnZVxuICogQHBhcmFtIHtCdWZmZXJ9IHNpZ25hdHVyZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJlY2lkXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbXByZXNzZWRcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5yZWNvdmVyID0gZnVuY3Rpb24gKG1lc3NhZ2UsIHNpZ25hdHVyZSwgcmVjaWQsIGNvbXByZXNzZWQpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oc2VjcDI1NmsxLmVjZHNhUmVjb3ZlcihVaW50OEFycmF5LmZyb20oc2lnbmF0dXJlKSwgcmVjaWQsIFVpbnQ4QXJyYXkuZnJvbShtZXNzYWdlKSwgY29tcHJlc3NlZCkpO1xufTtcbi8qKlxuICogQ29tcHV0ZSBhbiBFQyBEaWZmaWUtSGVsbG1hbiBzZWNyZXQgYW5kIGFwcGxpZWQgc2hhMjU2IHRvIGNvbXByZXNzZWQgcHVibGljIGtleS5cbiAqIEBtZXRob2QgZWNkaFxuICogQHBhcmFtIHtCdWZmZXJ9IHB1YmxpY0tleVxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5lY2RoID0gZnVuY3Rpb24gKHB1YmxpY0tleSwgcHJpdmF0ZUtleSkge1xuICAgIC8vIG5vdGU6IHNlY3AyNTZrMSB2MyBkb2Vzbid0IGFsbG93IG9wdGlvbmFsIHBhcmFtZXRlclxuICAgIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuZWNkaChVaW50OEFycmF5LmZyb20ocHVibGljS2V5KSwgVWludDhBcnJheS5mcm9tKHByaXZhdGVLZXkpLCB7fSkpO1xufTtcbmV4cG9ydHMuZWNkaFVuc2FmZSA9IGZ1bmN0aW9uIChwdWJsaWNLZXksIHByaXZhdGVLZXksIGNvbXByZXNzZWQpIHtcbiAgICAvLyBlY2RoVW5zYWZlIG1ldGhvZCBpcyBub3QgcGFydCBvZiBzZWNwMjU2azEgdjQgcGFja2FnZVxuICAgIC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgb24gdjNcbiAgICAvLyBlbnN1cmUgdmFsaWQgcHVibGljS2V5IGxlbmd0aFxuICAgIGlmIChwdWJsaWNLZXkubGVuZ3RoICE9PSAzMyAmJiBwdWJsaWNLZXkubGVuZ3RoICE9PSA2NSkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigncHVibGljIGtleSBsZW5ndGggaXMgaW52YWxpZCcpO1xuICAgIH1cbiAgICAvLyBlbnN1cmUgdmFsaWQgcHJpdmF0ZUtleSBsZW5ndGhcbiAgICBpZiAocHJpdmF0ZUtleS5sZW5ndGggIT09IDMyKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdwcml2YXRlIGtleSBsZW5ndGggaXMgaW52YWxpZCcpO1xuICAgIH1cbiAgICByZXR1cm4gQnVmZmVyLmZyb20oc2VjcDI1NmsxdjMuZWNkaFVuc2FmZShVaW50OEFycmF5LmZyb20ocHVibGljS2V5KSwgVWludDhBcnJheS5mcm9tKHByaXZhdGVLZXkpLCBjb21wcmVzc2VkKSk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VjcDI1NmsxdjMtYWRhcHRlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8vIFRoaXMgZmlsZSBpcyBpbXBvcnRlZCBmcm9tIHNlY3AyNTZrMSB2M1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2NyeXB0b2NvaW5qcy9zZWNwMjU2azEtbm9kZS9ibG9iL21hc3Rlci9MSUNFTlNFXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRUNfUFJJVktFWV9FWFBPUlRfREVSX0NPTVBSRVNTRUQgPSBCdWZmZXIuZnJvbShbXG4gICAgLy8gYmVnaW5cbiAgICAweDMwLFxuICAgIDB4ODEsXG4gICAgMHhkMyxcbiAgICAweDAyLFxuICAgIDB4MDEsXG4gICAgMHgwMSxcbiAgICAweDA0LFxuICAgIDB4MjAsXG4gICAgLy8gcHJpdmF0ZSBrZXlcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgLy8gbWlkZGxlXG4gICAgMHhhMCxcbiAgICAweDgxLFxuICAgIDB4ODUsXG4gICAgMHgzMCxcbiAgICAweDgxLFxuICAgIDB4ODIsXG4gICAgMHgwMixcbiAgICAweDAxLFxuICAgIDB4MDEsXG4gICAgMHgzMCxcbiAgICAweDJjLFxuICAgIDB4MDYsXG4gICAgMHgwNyxcbiAgICAweDJhLFxuICAgIDB4ODYsXG4gICAgMHg0OCxcbiAgICAweGNlLFxuICAgIDB4M2QsXG4gICAgMHgwMSxcbiAgICAweDAxLFxuICAgIDB4MDIsXG4gICAgMHgyMSxcbiAgICAweDAwLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmUsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmMsXG4gICAgMHgyZixcbiAgICAweDMwLFxuICAgIDB4MDYsXG4gICAgMHgwNCxcbiAgICAweDAxLFxuICAgIDB4MDAsXG4gICAgMHgwNCxcbiAgICAweDAxLFxuICAgIDB4MDcsXG4gICAgMHgwNCxcbiAgICAweDIxLFxuICAgIDB4MDIsXG4gICAgMHg3OSxcbiAgICAweGJlLFxuICAgIDB4NjYsXG4gICAgMHg3ZSxcbiAgICAweGY5LFxuICAgIDB4ZGMsXG4gICAgMHhiYixcbiAgICAweGFjLFxuICAgIDB4NTUsXG4gICAgMHhhMCxcbiAgICAweDYyLFxuICAgIDB4OTUsXG4gICAgMHhjZSxcbiAgICAweDg3LFxuICAgIDB4MGIsXG4gICAgMHgwNyxcbiAgICAweDAyLFxuICAgIDB4OWIsXG4gICAgMHhmYyxcbiAgICAweGRiLFxuICAgIDB4MmQsXG4gICAgMHhjZSxcbiAgICAweDI4LFxuICAgIDB4ZDksXG4gICAgMHg1OSxcbiAgICAweGYyLFxuICAgIDB4ODEsXG4gICAgMHg1YixcbiAgICAweDE2LFxuICAgIDB4ZjgsXG4gICAgMHgxNyxcbiAgICAweDk4LFxuICAgIDB4MDIsXG4gICAgMHgyMSxcbiAgICAweDAwLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmUsXG4gICAgMHhiYSxcbiAgICAweGFlLFxuICAgIDB4ZGMsXG4gICAgMHhlNixcbiAgICAweGFmLFxuICAgIDB4NDgsXG4gICAgMHhhMCxcbiAgICAweDNiLFxuICAgIDB4YmYsXG4gICAgMHhkMixcbiAgICAweDVlLFxuICAgIDB4OGMsXG4gICAgMHhkMCxcbiAgICAweDM2LFxuICAgIDB4NDEsXG4gICAgMHg0MSxcbiAgICAweDAyLFxuICAgIDB4MDEsXG4gICAgMHgwMSxcbiAgICAweGExLFxuICAgIDB4MjQsXG4gICAgMHgwMyxcbiAgICAweDIyLFxuICAgIDB4MDAsXG4gICAgLy8gcHVibGljIGtleVxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuXSk7XG52YXIgRUNfUFJJVktFWV9FWFBPUlRfREVSX1VOQ09NUFJFU1NFRCA9IEJ1ZmZlci5mcm9tKFtcbiAgICAvLyBiZWdpblxuICAgIDB4MzAsXG4gICAgMHg4MixcbiAgICAweDAxLFxuICAgIDB4MTMsXG4gICAgMHgwMixcbiAgICAweDAxLFxuICAgIDB4MDEsXG4gICAgMHgwNCxcbiAgICAweDIwLFxuICAgIC8vIHByaXZhdGUga2V5XG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIC8vIG1pZGRsZVxuICAgIDB4YTAsXG4gICAgMHg4MSxcbiAgICAweGE1LFxuICAgIDB4MzAsXG4gICAgMHg4MSxcbiAgICAweGEyLFxuICAgIDB4MDIsXG4gICAgMHgwMSxcbiAgICAweDAxLFxuICAgIDB4MzAsXG4gICAgMHgyYyxcbiAgICAweDA2LFxuICAgIDB4MDcsXG4gICAgMHgyYSxcbiAgICAweDg2LFxuICAgIDB4NDgsXG4gICAgMHhjZSxcbiAgICAweDNkLFxuICAgIDB4MDEsXG4gICAgMHgwMSxcbiAgICAweDAyLFxuICAgIDB4MjEsXG4gICAgMHgwMCxcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZlLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZjLFxuICAgIDB4MmYsXG4gICAgMHgzMCxcbiAgICAweDA2LFxuICAgIDB4MDQsXG4gICAgMHgwMSxcbiAgICAweDAwLFxuICAgIDB4MDQsXG4gICAgMHgwMSxcbiAgICAweDA3LFxuICAgIDB4MDQsXG4gICAgMHg0MSxcbiAgICAweDA0LFxuICAgIDB4NzksXG4gICAgMHhiZSxcbiAgICAweDY2LFxuICAgIDB4N2UsXG4gICAgMHhmOSxcbiAgICAweGRjLFxuICAgIDB4YmIsXG4gICAgMHhhYyxcbiAgICAweDU1LFxuICAgIDB4YTAsXG4gICAgMHg2MixcbiAgICAweDk1LFxuICAgIDB4Y2UsXG4gICAgMHg4NyxcbiAgICAweDBiLFxuICAgIDB4MDcsXG4gICAgMHgwMixcbiAgICAweDliLFxuICAgIDB4ZmMsXG4gICAgMHhkYixcbiAgICAweDJkLFxuICAgIDB4Y2UsXG4gICAgMHgyOCxcbiAgICAweGQ5LFxuICAgIDB4NTksXG4gICAgMHhmMixcbiAgICAweDgxLFxuICAgIDB4NWIsXG4gICAgMHgxNixcbiAgICAweGY4LFxuICAgIDB4MTcsXG4gICAgMHg5OCxcbiAgICAweDQ4LFxuICAgIDB4M2EsXG4gICAgMHhkYSxcbiAgICAweDc3LFxuICAgIDB4MjYsXG4gICAgMHhhMyxcbiAgICAweGM0LFxuICAgIDB4NjUsXG4gICAgMHg1ZCxcbiAgICAweGE0LFxuICAgIDB4ZmIsXG4gICAgMHhmYyxcbiAgICAweDBlLFxuICAgIDB4MTEsXG4gICAgMHgwOCxcbiAgICAweGE4LFxuICAgIDB4ZmQsXG4gICAgMHgxNyxcbiAgICAweGI0LFxuICAgIDB4NDgsXG4gICAgMHhhNixcbiAgICAweDg1LFxuICAgIDB4NTQsXG4gICAgMHgxOSxcbiAgICAweDljLFxuICAgIDB4NDcsXG4gICAgMHhkMCxcbiAgICAweDhmLFxuICAgIDB4ZmIsXG4gICAgMHgxMCxcbiAgICAweGQ0LFxuICAgIDB4YjgsXG4gICAgMHgwMixcbiAgICAweDIxLFxuICAgIDB4MDAsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZSxcbiAgICAweGJhLFxuICAgIDB4YWUsXG4gICAgMHhkYyxcbiAgICAweGU2LFxuICAgIDB4YWYsXG4gICAgMHg0OCxcbiAgICAweGEwLFxuICAgIDB4M2IsXG4gICAgMHhiZixcbiAgICAweGQyLFxuICAgIDB4NWUsXG4gICAgMHg4YyxcbiAgICAweGQwLFxuICAgIDB4MzYsXG4gICAgMHg0MSxcbiAgICAweDQxLFxuICAgIDB4MDIsXG4gICAgMHgwMSxcbiAgICAweDAxLFxuICAgIDB4YTEsXG4gICAgMHg0NCxcbiAgICAweDAzLFxuICAgIDB4NDIsXG4gICAgMHgwMCxcbiAgICAvLyBwdWJsaWMga2V5XG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuXSk7XG5leHBvcnRzLnByaXZhdGVLZXlFeHBvcnQgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSwgcHVibGljS2V5LCBjb21wcmVzc2VkKSB7XG4gICAgaWYgKGNvbXByZXNzZWQgPT09IHZvaWQgMCkgeyBjb21wcmVzc2VkID0gdHJ1ZTsgfVxuICAgIHZhciByZXN1bHQgPSBCdWZmZXIuZnJvbShjb21wcmVzc2VkID8gRUNfUFJJVktFWV9FWFBPUlRfREVSX0NPTVBSRVNTRUQgOiBFQ19QUklWS0VZX0VYUE9SVF9ERVJfVU5DT01QUkVTU0VEKTtcbiAgICBwcml2YXRlS2V5LmNvcHkocmVzdWx0LCBjb21wcmVzc2VkID8gOCA6IDkpO1xuICAgIHB1YmxpY0tleS5jb3B5KHJlc3VsdCwgY29tcHJlc3NlZCA/IDE4MSA6IDIxNCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5leHBvcnRzLnByaXZhdGVLZXlJbXBvcnQgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSkge1xuICAgIHZhciBsZW5ndGggPSBwcml2YXRlS2V5Lmxlbmd0aDtcbiAgICAvLyBzZXF1ZW5jZSBoZWFkZXJcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW5ndGggPCBpbmRleCArIDEgfHwgcHJpdmF0ZUtleVtpbmRleF0gIT09IDB4MzApXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGluZGV4ICs9IDE7XG4gICAgLy8gc2VxdWVuY2UgbGVuZ3RoIGNvbnN0cnVjdG9yXG4gICAgaWYgKGxlbmd0aCA8IGluZGV4ICsgMSB8fCAhKHByaXZhdGVLZXlbaW5kZXhdICYgMHg4MCkpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIHZhciBsZW5iID0gcHJpdmF0ZUtleVtpbmRleF0gJiAweDdmO1xuICAgIGluZGV4ICs9IDE7XG4gICAgaWYgKGxlbmIgPCAxIHx8IGxlbmIgPiAyKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBpZiAobGVuZ3RoIDwgaW5kZXggKyBsZW5iKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAvLyBzZXF1ZW5jZSBsZW5ndGhcbiAgICB2YXIgbGVuID0gcHJpdmF0ZUtleVtpbmRleCArIGxlbmIgLSAxXSB8IChsZW5iID4gMSA/IHByaXZhdGVLZXlbaW5kZXggKyBsZW5iIC0gMl0gPDwgOCA6IDApO1xuICAgIGluZGV4ICs9IGxlbmI7XG4gICAgaWYgKGxlbmd0aCA8IGluZGV4ICsgbGVuKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAvLyBzZXF1ZW5jZSBlbGVtZW50IDA6IHZlcnNpb24gbnVtYmVyICg9MSlcbiAgICBpZiAobGVuZ3RoIDwgaW5kZXggKyAzIHx8XG4gICAgICAgIHByaXZhdGVLZXlbaW5kZXhdICE9PSAweDAyIHx8XG4gICAgICAgIHByaXZhdGVLZXlbaW5kZXggKyAxXSAhPT0gMHgwMSB8fFxuICAgICAgICBwcml2YXRlS2V5W2luZGV4ICsgMl0gIT09IDB4MDEpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGluZGV4ICs9IDM7XG4gICAgLy8gc2VxdWVuY2UgZWxlbWVudCAxOiBvY3RldCBzdHJpbmcsIHVwIHRvIDMyIGJ5dGVzXG4gICAgaWYgKGxlbmd0aCA8IGluZGV4ICsgMiB8fFxuICAgICAgICBwcml2YXRlS2V5W2luZGV4XSAhPT0gMHgwNCB8fFxuICAgICAgICBwcml2YXRlS2V5W2luZGV4ICsgMV0gPiAweDIwIHx8XG4gICAgICAgIGxlbmd0aCA8IGluZGV4ICsgMiArIHByaXZhdGVLZXlbaW5kZXggKyAxXSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHByaXZhdGVLZXkuc2xpY2UoaW5kZXggKyAyLCBpbmRleCArIDIgKyBwcml2YXRlS2V5W2luZGV4ICsgMV0pO1xufTtcbmV4cG9ydHMuc2lnbmF0dXJlSW1wb3J0TGF4ID0gZnVuY3Rpb24gKHNpZ25hdHVyZSkge1xuICAgIHZhciByID0gQnVmZmVyLmFsbG9jKDMyLCAwKTtcbiAgICB2YXIgcyA9IEJ1ZmZlci5hbGxvYygzMiwgMCk7XG4gICAgdmFyIGxlbmd0aCA9IHNpZ25hdHVyZS5sZW5ndGg7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICAvLyBzZXF1ZW5jZSB0YWcgYnl0ZVxuICAgIGlmIChzaWduYXR1cmVbaW5kZXgrK10gIT09IDB4MzApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8vIHNlcXVlbmNlIGxlbmd0aCBieXRlXG4gICAgdmFyIGxlbmJ5dGUgPSBzaWduYXR1cmVbaW5kZXgrK107XG4gICAgaWYgKGxlbmJ5dGUgJiAweDgwKSB7XG4gICAgICAgIGluZGV4ICs9IGxlbmJ5dGUgLSAweDgwO1xuICAgICAgICBpZiAoaW5kZXggPiBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIHNlcXVlbmNlIHRhZyBieXRlIGZvciByXG4gICAgaWYgKHNpZ25hdHVyZVtpbmRleCsrXSAhPT0gMHgwMikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLy8gbGVuZ3RoIGZvciByXG4gICAgdmFyIHJsZW4gPSBzaWduYXR1cmVbaW5kZXgrK107XG4gICAgaWYgKHJsZW4gJiAweDgwKSB7XG4gICAgICAgIGxlbmJ5dGUgPSBybGVuIC0gMHg4MDtcbiAgICAgICAgaWYgKGluZGV4ICsgbGVuYnl0ZSA+IGxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICg7IGxlbmJ5dGUgPiAwICYmIHNpZ25hdHVyZVtpbmRleF0gPT09IDB4MDA7IGluZGV4ICs9IDEsIGxlbmJ5dGUgLT0gMSlcbiAgICAgICAgICAgIDtcbiAgICAgICAgZm9yIChybGVuID0gMDsgbGVuYnl0ZSA+IDA7IGluZGV4ICs9IDEsIGxlbmJ5dGUgLT0gMSlcbiAgICAgICAgICAgIHJsZW4gPSAocmxlbiA8PCA4KSArIHNpZ25hdHVyZVtpbmRleF07XG4gICAgfVxuICAgIGlmIChybGVuID4gbGVuZ3RoIC0gaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciByaW5kZXggPSBpbmRleDtcbiAgICBpbmRleCArPSBybGVuO1xuICAgIC8vIHNlcXVlbmNlIHRhZyBieXRlIGZvciBzXG4gICAgaWYgKHNpZ25hdHVyZVtpbmRleCsrXSAhPT0gMHgwMikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLy8gbGVuZ3RoIGZvciBzXG4gICAgdmFyIHNsZW4gPSBzaWduYXR1cmVbaW5kZXgrK107XG4gICAgaWYgKHNsZW4gJiAweDgwKSB7XG4gICAgICAgIGxlbmJ5dGUgPSBzbGVuIC0gMHg4MDtcbiAgICAgICAgaWYgKGluZGV4ICsgbGVuYnl0ZSA+IGxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICg7IGxlbmJ5dGUgPiAwICYmIHNpZ25hdHVyZVtpbmRleF0gPT09IDB4MDA7IGluZGV4ICs9IDEsIGxlbmJ5dGUgLT0gMSlcbiAgICAgICAgICAgIDtcbiAgICAgICAgZm9yIChzbGVuID0gMDsgbGVuYnl0ZSA+IDA7IGluZGV4ICs9IDEsIGxlbmJ5dGUgLT0gMSlcbiAgICAgICAgICAgIHNsZW4gPSAoc2xlbiA8PCA4KSArIHNpZ25hdHVyZVtpbmRleF07XG4gICAgfVxuICAgIGlmIChzbGVuID4gbGVuZ3RoIC0gaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBzaW5kZXggPSBpbmRleDtcbiAgICBpbmRleCArPSBzbGVuO1xuICAgIC8vIGlnbm9yZSBsZWFkaW5nIHplcm9zIGluIHJcbiAgICBmb3IgKDsgcmxlbiA+IDAgJiYgc2lnbmF0dXJlW3JpbmRleF0gPT09IDB4MDA7IHJsZW4gLT0gMSwgcmluZGV4ICs9IDEpXG4gICAgICAgIDtcbiAgICAvLyBjb3B5IHIgdmFsdWVcbiAgICBpZiAocmxlbiA+IDMyKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgcnZhbHVlID0gc2lnbmF0dXJlLnNsaWNlKHJpbmRleCwgcmluZGV4ICsgcmxlbik7XG4gICAgcnZhbHVlLmNvcHkociwgMzIgLSBydmFsdWUubGVuZ3RoKTtcbiAgICAvLyBpZ25vcmUgbGVhZGluZyB6ZXJvcyBpbiBzXG4gICAgZm9yICg7IHNsZW4gPiAwICYmIHNpZ25hdHVyZVtzaW5kZXhdID09PSAweDAwOyBzbGVuIC09IDEsIHNpbmRleCArPSAxKVxuICAgICAgICA7XG4gICAgLy8gY29weSBzIHZhbHVlXG4gICAgaWYgKHNsZW4gPiAzMikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIHN2YWx1ZSA9IHNpZ25hdHVyZS5zbGljZShzaW5kZXgsIHNpbmRleCArIHNsZW4pO1xuICAgIHN2YWx1ZS5jb3B5KHMsIDMyIC0gc3ZhbHVlLmxlbmd0aCk7XG4gICAgcmV0dXJuIHsgcjogciwgczogcyB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8vIFRoaXMgZmlsZSBpcyBpbXBvcnRlZCBmcm9tIHNlY3AyNTZrMSB2M1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2NyeXB0b2NvaW5qcy9zZWNwMjU2azEtbm9kZS9ibG9iL21hc3Rlci9MSUNFTlNFXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQk4gPSByZXF1aXJlKFwiYm4uanNcIik7XG52YXIgRUMgPSByZXF1aXJlKCdlbGxpcHRpYycpLmVjO1xudmFyIGVjID0gbmV3IEVDKCdzZWNwMjU2azEnKTtcbnZhciBlY3BhcmFtcyA9IGVjLmN1cnZlO1xuZXhwb3J0cy5wcml2YXRlS2V5RXhwb3J0ID0gZnVuY3Rpb24gKHByaXZhdGVLZXksIGNvbXByZXNzZWQpIHtcbiAgICBpZiAoY29tcHJlc3NlZCA9PT0gdm9pZCAwKSB7IGNvbXByZXNzZWQgPSB0cnVlOyB9XG4gICAgdmFyIGQgPSBuZXcgQk4ocHJpdmF0ZUtleSk7XG4gICAgaWYgKGQudWNtcChlY3BhcmFtcy5uKSA+PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImNvdWxkbid0IGV4cG9ydCB0byBERVIgZm9ybWF0XCIpO1xuICAgIH1cbiAgICB2YXIgcG9pbnQgPSBlYy5nLm11bChkKTtcbiAgICByZXR1cm4gdG9QdWJsaWNLZXkocG9pbnQuZ2V0WCgpLCBwb2ludC5nZXRZKCksIGNvbXByZXNzZWQpO1xufTtcbmV4cG9ydHMucHJpdmF0ZUtleU1vZEludmVyc2UgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSkge1xuICAgIHZhciBibiA9IG5ldyBCTihwcml2YXRlS2V5KTtcbiAgICBpZiAoYm4udWNtcChlY3BhcmFtcy5uKSA+PSAwIHx8IGJuLmlzWmVybygpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncHJpdmF0ZSBrZXkgcmFuZ2UgaXMgaW52YWxpZCcpO1xuICAgIH1cbiAgICByZXR1cm4gYm4uaW52bShlY3BhcmFtcy5uKS50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDMyKTtcbn07XG5leHBvcnRzLnNpZ25hdHVyZUltcG9ydCA9IGZ1bmN0aW9uIChzaWdPYmopIHtcbiAgICB2YXIgciA9IG5ldyBCTihzaWdPYmoucik7XG4gICAgaWYgKHIudWNtcChlY3BhcmFtcy5uKSA+PSAwKSB7XG4gICAgICAgIHIgPSBuZXcgQk4oMCk7XG4gICAgfVxuICAgIHZhciBzID0gbmV3IEJOKHNpZ09iai5zKTtcbiAgICBpZiAocy51Y21wKGVjcGFyYW1zLm4pID49IDApIHtcbiAgICAgICAgcyA9IG5ldyBCTigwKTtcbiAgICB9XG4gICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoW3IudG9BcnJheUxpa2UoQnVmZmVyLCAnYmUnLCAzMiksIHMudG9BcnJheUxpa2UoQnVmZmVyLCAnYmUnLCAzMildKTtcbn07XG5leHBvcnRzLmVjZGhVbnNhZmUgPSBmdW5jdGlvbiAocHVibGljS2V5LCBwcml2YXRlS2V5LCBjb21wcmVzc2VkKSB7XG4gICAgaWYgKGNvbXByZXNzZWQgPT09IHZvaWQgMCkgeyBjb21wcmVzc2VkID0gdHJ1ZTsgfVxuICAgIHZhciBwb2ludCA9IGVjLmtleUZyb21QdWJsaWMocHVibGljS2V5KTtcbiAgICB2YXIgc2NhbGFyID0gbmV3IEJOKHByaXZhdGVLZXkpO1xuICAgIGlmIChzY2FsYXIudWNtcChlY3BhcmFtcy5uKSA+PSAwIHx8IHNjYWxhci5pc1plcm8oKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NjYWxhciB3YXMgaW52YWxpZCAoemVybyBvciBvdmVyZmxvdyknKTtcbiAgICB9XG4gICAgdmFyIHNoYXJlZCA9IHBvaW50LnB1Yi5tdWwoc2NhbGFyKTtcbiAgICByZXR1cm4gdG9QdWJsaWNLZXkoc2hhcmVkLmdldFgoKSwgc2hhcmVkLmdldFkoKSwgY29tcHJlc3NlZCk7XG59O1xudmFyIHRvUHVibGljS2V5ID0gZnVuY3Rpb24gKHgsIHksIGNvbXByZXNzZWQpIHtcbiAgICB2YXIgcHVibGljS2V5O1xuICAgIGlmIChjb21wcmVzc2VkKSB7XG4gICAgICAgIHB1YmxpY0tleSA9IEJ1ZmZlci5hbGxvYygzMyk7XG4gICAgICAgIHB1YmxpY0tleVswXSA9IHkuaXNPZGQoKSA/IDB4MDMgOiAweDAyO1xuICAgICAgICB4LnRvQXJyYXlMaWtlKEJ1ZmZlciwgJ2JlJywgMzIpLmNvcHkocHVibGljS2V5LCAxKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHB1YmxpY0tleSA9IEJ1ZmZlci5hbGxvYyg2NSk7XG4gICAgICAgIHB1YmxpY0tleVswXSA9IDB4MDQ7XG4gICAgICAgIHgudG9BcnJheUxpa2UoQnVmZmVyLCAnYmUnLCAzMikuY29weShwdWJsaWNLZXksIDEpO1xuICAgICAgICB5LnRvQXJyYXlMaWtlKEJ1ZmZlciwgJ2JlJywgMzIpLmNvcHkocHVibGljS2V5LCAzMyk7XG4gICAgfVxuICAgIHJldHVybiBwdWJsaWNLZXk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmhhc2hQZXJzb25hbE1lc3NhZ2UgPSBleHBvcnRzLmlzVmFsaWRTaWduYXR1cmUgPSBleHBvcnRzLmZyb21ScGNTaWcgPSBleHBvcnRzLnRvUnBjU2lnID0gZXhwb3J0cy5lY3JlY292ZXIgPSBleHBvcnRzLmVjc2lnbiA9IHZvaWQgMDtcbnZhciBzZWNwMjU2azEgPSByZXF1aXJlKCcuL3NlY3AyNTZrMXYzLWFkYXB0ZXInKTtcbnZhciBCTiA9IHJlcXVpcmUoXCJibi5qc1wiKTtcbnZhciBieXRlc18xID0gcmVxdWlyZShcIi4vYnl0ZXNcIik7XG52YXIgaGFzaF8xID0gcmVxdWlyZShcIi4vaGFzaFwiKTtcbi8qKlxuICogUmV0dXJucyB0aGUgRUNEU0Egc2lnbmF0dXJlIG9mIGEgbWVzc2FnZSBoYXNoLlxuICovXG5leHBvcnRzLmVjc2lnbiA9IGZ1bmN0aW9uIChtc2dIYXNoLCBwcml2YXRlS2V5LCBjaGFpbklkKSB7XG4gICAgdmFyIHNpZyA9IHNlY3AyNTZrMS5zaWduKG1zZ0hhc2gsIHByaXZhdGVLZXkpO1xuICAgIHZhciByZWNvdmVyeSA9IHNpZy5yZWNvdmVyeTtcbiAgICB2YXIgcmV0ID0ge1xuICAgICAgICByOiBzaWcuc2lnbmF0dXJlLnNsaWNlKDAsIDMyKSxcbiAgICAgICAgczogc2lnLnNpZ25hdHVyZS5zbGljZSgzMiwgNjQpLFxuICAgICAgICB2OiBjaGFpbklkID8gcmVjb3ZlcnkgKyAoY2hhaW5JZCAqIDIgKyAzNSkgOiByZWNvdmVyeSArIDI3LFxuICAgIH07XG4gICAgcmV0dXJuIHJldDtcbn07XG4vKipcbiAqIEVDRFNBIHB1YmxpYyBrZXkgcmVjb3ZlcnkgZnJvbSBzaWduYXR1cmUuXG4gKiBAcmV0dXJucyBSZWNvdmVyZWQgcHVibGljIGtleVxuICovXG5leHBvcnRzLmVjcmVjb3ZlciA9IGZ1bmN0aW9uIChtc2dIYXNoLCB2LCByLCBzLCBjaGFpbklkKSB7XG4gICAgdmFyIHNpZ25hdHVyZSA9IEJ1ZmZlci5jb25jYXQoW2J5dGVzXzEuc2V0TGVuZ3RoKHIsIDMyKSwgYnl0ZXNfMS5zZXRMZW5ndGgocywgMzIpXSwgNjQpO1xuICAgIHZhciByZWNvdmVyeSA9IGNhbGN1bGF0ZVNpZ1JlY292ZXJ5KHYsIGNoYWluSWQpO1xuICAgIGlmICghaXNWYWxpZFNpZ1JlY292ZXJ5KHJlY292ZXJ5KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2lnbmF0dXJlIHYgdmFsdWUnKTtcbiAgICB9XG4gICAgdmFyIHNlbmRlclB1YktleSA9IHNlY3AyNTZrMS5yZWNvdmVyKG1zZ0hhc2gsIHNpZ25hdHVyZSwgcmVjb3ZlcnkpO1xuICAgIHJldHVybiBzZWNwMjU2azEucHVibGljS2V5Q29udmVydChzZW5kZXJQdWJLZXksIGZhbHNlKS5zbGljZSgxKTtcbn07XG4vKipcbiAqIENvbnZlcnQgc2lnbmF0dXJlIHBhcmFtZXRlcnMgaW50byB0aGUgZm9ybWF0IG9mIGBldGhfc2lnbmAgUlBDIG1ldGhvZC5cbiAqIEByZXR1cm5zIFNpZ25hdHVyZVxuICovXG5leHBvcnRzLnRvUnBjU2lnID0gZnVuY3Rpb24gKHYsIHIsIHMsIGNoYWluSWQpIHtcbiAgICB2YXIgcmVjb3ZlcnkgPSBjYWxjdWxhdGVTaWdSZWNvdmVyeSh2LCBjaGFpbklkKTtcbiAgICBpZiAoIWlzVmFsaWRTaWdSZWNvdmVyeShyZWNvdmVyeSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNpZ25hdHVyZSB2IHZhbHVlJyk7XG4gICAgfVxuICAgIC8vIGdldGggKGFuZCB0aGUgUlBDIGV0aF9zaWduIG1ldGhvZCkgdXNlcyB0aGUgNjUgYnl0ZSBmb3JtYXQgdXNlZCBieSBCaXRjb2luXG4gICAgcmV0dXJuIGJ5dGVzXzEuYnVmZmVyVG9IZXgoQnVmZmVyLmNvbmNhdChbYnl0ZXNfMS5zZXRMZW5ndGhMZWZ0KHIsIDMyKSwgYnl0ZXNfMS5zZXRMZW5ndGhMZWZ0KHMsIDMyKSwgYnl0ZXNfMS50b0J1ZmZlcih2KV0pKTtcbn07XG4vKipcbiAqIENvbnZlcnQgc2lnbmF0dXJlIGZvcm1hdCBvZiB0aGUgYGV0aF9zaWduYCBSUEMgbWV0aG9kIHRvIHNpZ25hdHVyZSBwYXJhbWV0ZXJzXG4gKiBOT1RFOiBhbGwgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBnZXRoOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vZ28tZXRoZXJldW0vaXNzdWVzLzIwNTNcbiAqL1xuZXhwb3J0cy5mcm9tUnBjU2lnID0gZnVuY3Rpb24gKHNpZykge1xuICAgIHZhciBidWYgPSBieXRlc18xLnRvQnVmZmVyKHNpZyk7XG4gICAgLy8gTk9URTogd2l0aCBwb3RlbnRpYWwgaW50cm9kdWN0aW9uIG9mIGNoYWluSWQgdGhpcyBtaWdodCBuZWVkIHRvIGJlIHVwZGF0ZWRcbiAgICBpZiAoYnVmLmxlbmd0aCAhPT0gNjUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNpZ25hdHVyZSBsZW5ndGgnKTtcbiAgICB9XG4gICAgdmFyIHYgPSBidWZbNjRdO1xuICAgIC8vIHN1cHBvcnQgYm90aCB2ZXJzaW9ucyBvZiBgZXRoX3NpZ25gIHJlc3BvbnNlc1xuICAgIGlmICh2IDwgMjcpIHtcbiAgICAgICAgdiArPSAyNztcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdjogdixcbiAgICAgICAgcjogYnVmLnNsaWNlKDAsIDMyKSxcbiAgICAgICAgczogYnVmLnNsaWNlKDMyLCA2NCksXG4gICAgfTtcbn07XG4vKipcbiAqIFZhbGlkYXRlIGEgRUNEU0Egc2lnbmF0dXJlLlxuICogQHBhcmFtIGhvbWVzdGVhZE9yTGF0ZXIgSW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBpcyBiZWluZyB1c2VkIG9uIGVpdGhlciB0aGUgaG9tZXN0ZWFkIGhhcmRmb3JrIG9yIGEgbGF0ZXIgb25lXG4gKi9cbmV4cG9ydHMuaXNWYWxpZFNpZ25hdHVyZSA9IGZ1bmN0aW9uICh2LCByLCBzLCBob21lc3RlYWRPckxhdGVyLCBjaGFpbklkKSB7XG4gICAgaWYgKGhvbWVzdGVhZE9yTGF0ZXIgPT09IHZvaWQgMCkgeyBob21lc3RlYWRPckxhdGVyID0gdHJ1ZTsgfVxuICAgIHZhciBTRUNQMjU2SzFfTl9ESVZfMiA9IG5ldyBCTignN2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmY1ZDU3NmU3MzU3YTQ1MDFkZGZlOTJmNDY2ODFiMjBhMCcsIDE2KTtcbiAgICB2YXIgU0VDUDI1NksxX04gPSBuZXcgQk4oJ2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlYmFhZWRjZTZhZjQ4YTAzYmJmZDI1ZThjZDAzNjQxNDEnLCAxNik7XG4gICAgaWYgKHIubGVuZ3RoICE9PSAzMiB8fCBzLmxlbmd0aCAhPT0gMzIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIWlzVmFsaWRTaWdSZWNvdmVyeShjYWxjdWxhdGVTaWdSZWNvdmVyeSh2LCBjaGFpbklkKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgckJOID0gbmV3IEJOKHIpO1xuICAgIHZhciBzQk4gPSBuZXcgQk4ocyk7XG4gICAgaWYgKHJCTi5pc1plcm8oKSB8fCByQk4uZ3QoU0VDUDI1NksxX04pIHx8IHNCTi5pc1plcm8oKSB8fCBzQk4uZ3QoU0VDUDI1NksxX04pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGhvbWVzdGVhZE9yTGF0ZXIgJiYgc0JOLmNtcChTRUNQMjU2SzFfTl9ESVZfMikgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4vKipcbiAqIFJldHVybnMgdGhlIGtlY2Nhay0yNTYgaGFzaCBvZiBgbWVzc2FnZWAsIHByZWZpeGVkIHdpdGggdGhlIGhlYWRlciB1c2VkIGJ5IHRoZSBgZXRoX3NpZ25gIFJQQyBjYWxsLlxuICogVGhlIG91dHB1dCBvZiB0aGlzIGZ1bmN0aW9uIGNhbiBiZSBmZWQgaW50byBgZWNzaWduYCB0byBwcm9kdWNlIHRoZSBzYW1lIHNpZ25hdHVyZSBhcyB0aGUgYGV0aF9zaWduYFxuICogY2FsbCBmb3IgYSBnaXZlbiBgbWVzc2FnZWAsIG9yIGZlZCB0byBgZWNyZWNvdmVyYCBhbG9uZyB3aXRoIGEgc2lnbmF0dXJlIHRvIHJlY292ZXIgdGhlIHB1YmxpYyBrZXlcbiAqIHVzZWQgdG8gcHJvZHVjZSB0aGUgc2lnbmF0dXJlLlxuICovXG5leHBvcnRzLmhhc2hQZXJzb25hbE1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIHZhciBwcmVmaXggPSBCdWZmZXIuZnJvbShcIlxcdTAwMTlFdGhlcmV1bSBTaWduZWQgTWVzc2FnZTpcXG5cIiArIG1lc3NhZ2UubGVuZ3RoLnRvU3RyaW5nKCksICd1dGYtOCcpO1xuICAgIHJldHVybiBoYXNoXzEua2VjY2FrKEJ1ZmZlci5jb25jYXQoW3ByZWZpeCwgbWVzc2FnZV0pKTtcbn07XG5mdW5jdGlvbiBjYWxjdWxhdGVTaWdSZWNvdmVyeSh2LCBjaGFpbklkKSB7XG4gICAgcmV0dXJuIGNoYWluSWQgPyB2IC0gKDIgKiBjaGFpbklkICsgMzUpIDogdiAtIDI3O1xufVxuZnVuY3Rpb24gaXNWYWxpZFNpZ1JlY292ZXJ5KHJlY292ZXJ5KSB7XG4gICAgcmV0dXJuIHJlY292ZXJ5ID09PSAwIHx8IHJlY292ZXJ5ID09PSAxO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2lnbmF0dXJlLmpzLm1hcCIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIGV0aFV0aWwgPSByZXF1aXJlKCdldGhlcmV1bWpzLXV0aWwnKTtcbnZhciBmZWVzID0gcmVxdWlyZSgnZXRoZXJldW0tY29tbW9uL3BhcmFtcy5qc29uJyk7XG52YXIgQk4gPSBldGhVdGlsLkJOO1xuXG4vLyBzZWNwMjU2azFuLzJcbnZhciBOX0RJVl8yID0gbmV3IEJOKCc3ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjVkNTc2ZTczNTdhNDUwMWRkZmU5MmY0NjY4MWIyMGEwJywgMTYpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdHJhbnNhY3Rpb24gb2JqZWN0LlxuICpcbiAqIEBleGFtcGxlXG4gKiB2YXIgcmF3VHggPSB7XG4gKiAgIG5vbmNlOiAnMDAnLFxuICogICBnYXNQcmljZTogJzA5MTg0ZTcyYTAwMCcsXG4gKiAgIGdhc0xpbWl0OiAnMjcxMCcsXG4gKiAgIHRvOiAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gKiAgIHZhbHVlOiAnMDAnLFxuICogICBkYXRhOiAnN2Y3NDY1NzM3NDMyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNjAwMDU3JyxcbiAqICAgdjogJzFjJyxcbiAqICAgcjogJzVlMWQzYTc2ZmJmODI0MjIwZWFmYzhjNzlhZDU3OGFkMmI2N2QwMWIwYzI0MjVlYjFmMTM0N2U4ZjUwODgyYWInLFxuICogICBzOiAnNWJkNDI4NTM3ZjA1Zjk4MzBlOTM3OTJmOTBlYTZhM2UyZDFlZTg0OTUyZGQ5NmVkYmFlOWY2NThmODMxYWIxMydcbiAqIH07XG4gKiB2YXIgdHggPSBuZXcgVHJhbnNhY3Rpb24ocmF3VHgpO1xuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtCdWZmZXIgfCBBcnJheSB8IE9iamVjdH0gZGF0YSBhIHRyYW5zYWN0aW9uIGNhbiBiZSBpbml0aWFpbGl6ZWQgd2l0aCBlaXRoZXIgYSBidWZmZXIgY29udGFpbmluZyB0aGUgUkxQIHNlcmlhbGl6ZWQgdHJhbnNhY3Rpb24gb3IgYW4gYXJyYXkgb2YgYnVmZmVycyByZWxhdGluZyB0byBlYWNoIG9mIHRoZSB0eCBQcm9wZXJ0aWVzLCBsaXN0ZWQgaW4gb3JkZXIgYmVsb3cgaW4gdGhlIGV4bXBsZS5cbiAqXG4gKiBPciBsYXN0bHkgYW4gT2JqZWN0IGNvbnRhaW5pbmcgdGhlIFByb3BlcnRpZXMgb2YgdGhlIHRyYW5zYWN0aW9uIGxpa2UgaW4gdGhlIFVzYWdlIGV4YW1wbGUuXG4gKlxuICogRm9yIE9iamVjdCBhbmQgQXJyYXlzIGVhY2ggb2YgdGhlIGVsZW1lbnRzIGNhbiBlaXRoZXIgYmUgYSBCdWZmZXIsIGEgaGV4LXByZWZpeGVkICgweCkgU3RyaW5nICwgTnVtYmVyLCBvciBhbiBvYmplY3Qgd2l0aCBhIHRvQnVmZmVyIG1ldGhvZCBzdWNoIGFzIEJpZ251bVxuICpcbiAqIEBwcm9wZXJ0eSB7QnVmZmVyfSByYXcgVGhlIHJhdyBybHAgZW5jb2RlZCB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtCdWZmZXJ9IGRhdGEubm9uY2Ugbm9uY2UgbnVtYmVyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gZGF0YS5nYXNMaW1pdCB0cmFuc2FjdGlvbiBnYXMgbGltaXRcbiAqIEBwYXJhbSB7QnVmZmVyfSBkYXRhLmdhc1ByaWNlIHRyYW5zYWN0aW9uIGdhcyBwcmljZVxuICogQHBhcmFtIHtCdWZmZXJ9IGRhdGEudG8gdG8gdGhlIHRvIGFkZHJlc3NcbiAqIEBwYXJhbSB7QnVmZmVyfSBkYXRhLnZhbHVlIHRoZSBhbW91bnQgb2YgZXRoZXIgc2VudFxuICogQHBhcmFtIHtCdWZmZXJ9IGRhdGEuZGF0YSB0aGlzIHdpbGwgY29udGFpbiB0aGUgZGF0YSBvZiB0aGUgbWVzc2FnZSBvciB0aGUgaW5pdCBvZiBhIGNvbnRyYWN0XG4gKiBAcGFyYW0ge0J1ZmZlcn0gZGF0YS52IEVDIHNpZ25hdHVyZSBwYXJhbWV0ZXJcbiAqIEBwYXJhbSB7QnVmZmVyfSBkYXRhLnIgRUMgc2lnbmF0dXJlIHBhcmFtZXRlclxuICogQHBhcmFtIHtCdWZmZXJ9IGRhdGEucyBFQyByZWNvdmVyeSBJRFxuICogQHBhcmFtIHtOdW1iZXJ9IGRhdGEuY2hhaW5JZCBFSVAgMTU1IGNoYWluSWQgLSBtYWlubmV0OiAxLCByb3BzdGVuOiAzXG4gKiAqL1xuXG52YXIgVHJhbnNhY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFRyYW5zYWN0aW9uKGRhdGEpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVHJhbnNhY3Rpb24pO1xuXG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgLy8gRGVmaW5lIFByb3BlcnRpZXNcbiAgICB2YXIgZmllbGRzID0gW3tcbiAgICAgIG5hbWU6ICdub25jZScsXG4gICAgICBsZW5ndGg6IDMyLFxuICAgICAgYWxsb3dMZXNzOiB0cnVlLFxuICAgICAgZGVmYXVsdDogbmV3IEJ1ZmZlcihbXSlcbiAgICB9LCB7XG4gICAgICBuYW1lOiAnZ2FzUHJpY2UnLFxuICAgICAgbGVuZ3RoOiAzMixcbiAgICAgIGFsbG93TGVzczogdHJ1ZSxcbiAgICAgIGRlZmF1bHQ6IG5ldyBCdWZmZXIoW10pXG4gICAgfSwge1xuICAgICAgbmFtZTogJ2dhc0xpbWl0JyxcbiAgICAgIGFsaWFzOiAnZ2FzJyxcbiAgICAgIGxlbmd0aDogMzIsXG4gICAgICBhbGxvd0xlc3M6IHRydWUsXG4gICAgICBkZWZhdWx0OiBuZXcgQnVmZmVyKFtdKVxuICAgIH0sIHtcbiAgICAgIG5hbWU6ICd0bycsXG4gICAgICBhbGxvd1plcm86IHRydWUsXG4gICAgICBsZW5ndGg6IDIwLFxuICAgICAgZGVmYXVsdDogbmV3IEJ1ZmZlcihbXSlcbiAgICB9LCB7XG4gICAgICBuYW1lOiAndmFsdWUnLFxuICAgICAgbGVuZ3RoOiAzMixcbiAgICAgIGFsbG93TGVzczogdHJ1ZSxcbiAgICAgIGRlZmF1bHQ6IG5ldyBCdWZmZXIoW10pXG4gICAgfSwge1xuICAgICAgbmFtZTogJ2RhdGEnLFxuICAgICAgYWxpYXM6ICdpbnB1dCcsXG4gICAgICBhbGxvd1plcm86IHRydWUsXG4gICAgICBkZWZhdWx0OiBuZXcgQnVmZmVyKFtdKVxuICAgIH0sIHtcbiAgICAgIG5hbWU6ICd2JyxcbiAgICAgIGFsbG93WmVybzogdHJ1ZSxcbiAgICAgIGRlZmF1bHQ6IG5ldyBCdWZmZXIoWzB4MWNdKVxuICAgIH0sIHtcbiAgICAgIG5hbWU6ICdyJyxcbiAgICAgIGxlbmd0aDogMzIsXG4gICAgICBhbGxvd1plcm86IHRydWUsXG4gICAgICBhbGxvd0xlc3M6IHRydWUsXG4gICAgICBkZWZhdWx0OiBuZXcgQnVmZmVyKFtdKVxuICAgIH0sIHtcbiAgICAgIG5hbWU6ICdzJyxcbiAgICAgIGxlbmd0aDogMzIsXG4gICAgICBhbGxvd1plcm86IHRydWUsXG4gICAgICBhbGxvd0xlc3M6IHRydWUsXG4gICAgICBkZWZhdWx0OiBuZXcgQnVmZmVyKFtdKVxuICAgIH1dO1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcmxwIGVuY29kaW5nIG9mIHRoZSB0cmFuc2FjdGlvblxuICAgICAqIEBtZXRob2Qgc2VyaWFsaXplXG4gICAgICogQHJldHVybiB7QnVmZmVyfVxuICAgICAqIEBtZW1iZXJvZiBUcmFuc2FjdGlvblxuICAgICAqIEBuYW1lIHNlcmlhbGl6ZVxuICAgICAqL1xuICAgIC8vIGF0dGFjaGVkIHNlcmlhbGl6ZVxuICAgIGV0aFV0aWwuZGVmaW5lUHJvcGVydGllcyh0aGlzLCBmaWVsZHMsIGRhdGEpO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtCdWZmZXJ9IGZyb20gKHJlYWQgb25seSkgc2VuZGVyIGFkZHJlc3Mgb2YgdGhpcyB0cmFuc2FjdGlvbiwgbWF0aGVtYXRpY2FsbHkgZGVyaXZlZCBmcm9tIG90aGVyIHBhcmFtZXRlcnMuXG4gICAgICogQG5hbWUgZnJvbVxuICAgICAqIEBtZW1iZXJvZiBUcmFuc2FjdGlvblxuICAgICAqL1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZnJvbScsIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IHRoaXMuZ2V0U2VuZGVyQWRkcmVzcy5iaW5kKHRoaXMpXG4gICAgfSk7XG5cbiAgICAvLyBjYWxjdWxhdGUgY2hhaW5JZCBmcm9tIHNpZ25hdHVyZVxuICAgIHZhciBzaWdWID0gZXRoVXRpbC5idWZmZXJUb0ludCh0aGlzLnYpO1xuICAgIHZhciBjaGFpbklkID0gTWF0aC5mbG9vcigoc2lnViAtIDM1KSAvIDIpO1xuICAgIGlmIChjaGFpbklkIDwgMCkgY2hhaW5JZCA9IDA7XG5cbiAgICAvLyBzZXQgY2hhaW5JZFxuICAgIHRoaXMuX2NoYWluSWQgPSBjaGFpbklkIHx8IGRhdGEuY2hhaW5JZCB8fCAwO1xuICAgIHRoaXMuX2hvbWVzdGVhZCA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogSWYgdGhlIHR4J3MgYHRvYCBpcyB0byB0aGUgY3JlYXRpb24gYWRkcmVzc1xuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cblxuXG4gIFRyYW5zYWN0aW9uLnByb3RvdHlwZS50b0NyZWF0aW9uQWRkcmVzcyA9IGZ1bmN0aW9uIHRvQ3JlYXRpb25BZGRyZXNzKCkge1xuICAgIHJldHVybiB0aGlzLnRvLnRvU3RyaW5nKCdoZXgnKSA9PT0gJyc7XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIGEgc2hhMy0yNTYgaGFzaCBvZiB0aGUgc2VyaWFsaXplZCB0eFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtpbmNsdWRlU2lnbmF0dXJlPXRydWVdIHdoZXRoZXIgb3Igbm90IHRvIGluY3VsZGUgdGhlIHNpZ25hdHVyZVxuICAgKiBAcmV0dXJuIHtCdWZmZXJ9XG4gICAqL1xuXG5cbiAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLmhhc2ggPSBmdW5jdGlvbiBoYXNoKGluY2x1ZGVTaWduYXR1cmUpIHtcbiAgICBpZiAoaW5jbHVkZVNpZ25hdHVyZSA9PT0gdW5kZWZpbmVkKSBpbmNsdWRlU2lnbmF0dXJlID0gdHJ1ZTtcblxuICAgIC8vIEVJUDE1NSBzcGVjOlxuICAgIC8vIHdoZW4gY29tcHV0aW5nIHRoZSBoYXNoIG9mIGEgdHJhbnNhY3Rpb24gZm9yIHB1cnBvc2VzIG9mIHNpZ25pbmcgb3IgcmVjb3ZlcmluZyxcbiAgICAvLyBpbnN0ZWFkIG9mIGhhc2hpbmcgb25seSB0aGUgZmlyc3Qgc2l4IGVsZW1lbnRzIChpZS4gbm9uY2UsIGdhc3ByaWNlLCBzdGFydGdhcywgdG8sIHZhbHVlLCBkYXRhKSxcbiAgICAvLyBoYXNoIG5pbmUgZWxlbWVudHMsIHdpdGggdiByZXBsYWNlZCBieSBDSEFJTl9JRCwgciA9IDAgYW5kIHMgPSAwXG5cbiAgICB2YXIgaXRlbXMgPSB2b2lkIDA7XG4gICAgaWYgKGluY2x1ZGVTaWduYXR1cmUpIHtcbiAgICAgIGl0ZW1zID0gdGhpcy5yYXc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLl9jaGFpbklkID4gMCkge1xuICAgICAgICB2YXIgcmF3ID0gdGhpcy5yYXcuc2xpY2UoKTtcbiAgICAgICAgdGhpcy52ID0gdGhpcy5fY2hhaW5JZDtcbiAgICAgICAgdGhpcy5yID0gMDtcbiAgICAgICAgdGhpcy5zID0gMDtcbiAgICAgICAgaXRlbXMgPSB0aGlzLnJhdztcbiAgICAgICAgdGhpcy5yYXcgPSByYXc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVtcyA9IHRoaXMucmF3LnNsaWNlKDAsIDYpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNyZWF0ZSBoYXNoXG4gICAgcmV0dXJuIGV0aFV0aWwucmxwaGFzaChpdGVtcyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIHJldHVybnMgdGhlIHB1YmxpYyBrZXkgb2YgdGhlIHNlbmRlclxuICAgKiBAcmV0dXJuIHtCdWZmZXJ9XG4gICAqL1xuXG5cbiAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLmdldENoYWluSWQgPSBmdW5jdGlvbiBnZXRDaGFpbklkKCkge1xuICAgIHJldHVybiB0aGlzLl9jaGFpbklkO1xuICB9O1xuXG4gIC8qKlxuICAgKiByZXR1cm5zIHRoZSBzZW5kZXIncyBhZGRyZXNzXG4gICAqIEByZXR1cm4ge0J1ZmZlcn1cbiAgICovXG5cblxuICBUcmFuc2FjdGlvbi5wcm90b3R5cGUuZ2V0U2VuZGVyQWRkcmVzcyA9IGZ1bmN0aW9uIGdldFNlbmRlckFkZHJlc3MoKSB7XG4gICAgaWYgKHRoaXMuX2Zyb20pIHtcbiAgICAgIHJldHVybiB0aGlzLl9mcm9tO1xuICAgIH1cbiAgICB2YXIgcHVia2V5ID0gdGhpcy5nZXRTZW5kZXJQdWJsaWNLZXkoKTtcbiAgICB0aGlzLl9mcm9tID0gZXRoVXRpbC5wdWJsaWNUb0FkZHJlc3MocHVia2V5KTtcbiAgICByZXR1cm4gdGhpcy5fZnJvbTtcbiAgfTtcblxuICAvKipcbiAgICogcmV0dXJucyB0aGUgcHVibGljIGtleSBvZiB0aGUgc2VuZGVyXG4gICAqIEByZXR1cm4ge0J1ZmZlcn1cbiAgICovXG5cblxuICBUcmFuc2FjdGlvbi5wcm90b3R5cGUuZ2V0U2VuZGVyUHVibGljS2V5ID0gZnVuY3Rpb24gZ2V0U2VuZGVyUHVibGljS2V5KCkge1xuICAgIGlmICghdGhpcy5fc2VuZGVyUHViS2V5IHx8ICF0aGlzLl9zZW5kZXJQdWJLZXkubGVuZ3RoKSB7XG4gICAgICBpZiAoIXRoaXMudmVyaWZ5U2lnbmF0dXJlKCkpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBTaWduYXR1cmUnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3NlbmRlclB1YktleTtcbiAgfTtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGUgc2lnbmF0dXJlIGlzIHZhbGlkXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuXG5cbiAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLnZlcmlmeVNpZ25hdHVyZSA9IGZ1bmN0aW9uIHZlcmlmeVNpZ25hdHVyZSgpIHtcbiAgICB2YXIgbXNnSGFzaCA9IHRoaXMuaGFzaChmYWxzZSk7XG4gICAgLy8gQWxsIHRyYW5zYWN0aW9uIHNpZ25hdHVyZXMgd2hvc2Ugcy12YWx1ZSBpcyBncmVhdGVyIHRoYW4gc2VjcDI1Nmsxbi8yIGFyZSBjb25zaWRlcmVkIGludmFsaWQuXG4gICAgaWYgKHRoaXMuX2hvbWVzdGVhZCAmJiBuZXcgQk4odGhpcy5zKS5jbXAoTl9ESVZfMikgPT09IDEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgdmFyIHYgPSBldGhVdGlsLmJ1ZmZlclRvSW50KHRoaXMudik7XG4gICAgICBpZiAodGhpcy5fY2hhaW5JZCA+IDApIHtcbiAgICAgICAgdiAtPSB0aGlzLl9jaGFpbklkICogMiArIDg7XG4gICAgICB9XG4gICAgICB0aGlzLl9zZW5kZXJQdWJLZXkgPSBldGhVdGlsLmVjcmVjb3Zlcihtc2dIYXNoLCB2LCB0aGlzLnIsIHRoaXMucyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiAhIXRoaXMuX3NlbmRlclB1YktleTtcbiAgfTtcblxuICAvKipcbiAgICogc2lnbiBhIHRyYW5zYWN0aW9uIHdpdGggYSBnaXZlbiBhIHByaXZhdGUga2V5XG4gICAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gICAqL1xuXG5cbiAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduKHByaXZhdGVLZXkpIHtcbiAgICB2YXIgbXNnSGFzaCA9IHRoaXMuaGFzaChmYWxzZSk7XG4gICAgdmFyIHNpZyA9IGV0aFV0aWwuZWNzaWduKG1zZ0hhc2gsIHByaXZhdGVLZXkpO1xuICAgIGlmICh0aGlzLl9jaGFpbklkID4gMCkge1xuICAgICAgc2lnLnYgKz0gdGhpcy5fY2hhaW5JZCAqIDIgKyA4O1xuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIHNpZyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFRoZSBhbW91bnQgb2YgZ2FzIHBhaWQgZm9yIHRoZSBkYXRhIGluIHRoaXMgdHhcbiAgICogQHJldHVybiB7Qk59XG4gICAqL1xuXG5cbiAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLmdldERhdGFGZWUgPSBmdW5jdGlvbiBnZXREYXRhRmVlKCkge1xuICAgIHZhciBkYXRhID0gdGhpcy5yYXdbNV07XG4gICAgdmFyIGNvc3QgPSBuZXcgQk4oMCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkYXRhW2ldID09PSAwID8gY29zdC5pYWRkbihmZWVzLnR4RGF0YVplcm9HYXMudikgOiBjb3N0LmlhZGRuKGZlZXMudHhEYXRhTm9uWmVyb0dhcy52KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIHRoZSBtaW5pbXVtIGFtb3VudCBvZiBnYXMgdGhlIHR4IG11c3QgaGF2ZSAoRGF0YUZlZSArIFR4RmVlICsgQ3JlYXRpb24gRmVlKVxuICAgKiBAcmV0dXJuIHtCTn1cbiAgICovXG5cblxuICBUcmFuc2FjdGlvbi5wcm90b3R5cGUuZ2V0QmFzZUZlZSA9IGZ1bmN0aW9uIGdldEJhc2VGZWUoKSB7XG4gICAgdmFyIGZlZSA9IHRoaXMuZ2V0RGF0YUZlZSgpLmlhZGRuKGZlZXMudHhHYXMudik7XG4gICAgaWYgKHRoaXMuX2hvbWVzdGVhZCAmJiB0aGlzLnRvQ3JlYXRpb25BZGRyZXNzKCkpIHtcbiAgICAgIGZlZS5pYWRkbihmZWVzLnR4Q3JlYXRpb24udik7XG4gICAgfVxuICAgIHJldHVybiBmZWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIHRoZSB1cCBmcm9udCBhbW91bnQgdGhhdCBhbiBhY2NvdW50IG11c3QgaGF2ZSBmb3IgdGhpcyB0cmFuc2FjdGlvbiB0byBiZSB2YWxpZFxuICAgKiBAcmV0dXJuIHtCTn1cbiAgICovXG5cblxuICBUcmFuc2FjdGlvbi5wcm90b3R5cGUuZ2V0VXBmcm9udENvc3QgPSBmdW5jdGlvbiBnZXRVcGZyb250Q29zdCgpIHtcbiAgICByZXR1cm4gbmV3IEJOKHRoaXMuZ2FzTGltaXQpLmltdWwobmV3IEJOKHRoaXMuZ2FzUHJpY2UpKS5pYWRkKG5ldyBCTih0aGlzLnZhbHVlKSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIHZhbGlkYXRlcyB0aGUgc2lnbmF0dXJlIGFuZCBjaGVja3MgdG8gc2VlIGlmIGl0IGhhcyBlbm91Z2ggZ2FzXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW3N0cmluZ0Vycm9yPWZhbHNlXSB3aGV0aGVyIHRvIHJldHVybiBhIHN0cmluZyB3aXRoIGEgZHNjcmlwdGlvbiBvZiB3aHkgdGhlIHZhbGlkYXRpb24gZmFpbGVkIG9yIHJldHVybiBhIEJsb29sZWFuXG4gICAqIEByZXR1cm4ge0Jvb2xlYW58U3RyaW5nfVxuICAgKi9cblxuXG4gIFRyYW5zYWN0aW9uLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKHN0cmluZ0Vycm9yKSB7XG4gICAgdmFyIGVycm9ycyA9IFtdO1xuICAgIGlmICghdGhpcy52ZXJpZnlTaWduYXR1cmUoKSkge1xuICAgICAgZXJyb3JzLnB1c2goJ0ludmFsaWQgU2lnbmF0dXJlJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZ2V0QmFzZUZlZSgpLmNtcChuZXcgQk4odGhpcy5nYXNMaW1pdCkpID4gMCkge1xuICAgICAgZXJyb3JzLnB1c2goWydnYXMgbGltaXQgaXMgdG9vIGxvdy4gTmVlZCBhdCBsZWFzdCAnICsgdGhpcy5nZXRCYXNlRmVlKCldKTtcbiAgICB9XG5cbiAgICBpZiAoc3RyaW5nRXJyb3IgPT09IHVuZGVmaW5lZCB8fCBzdHJpbmdFcnJvciA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBlcnJvcnMubGVuZ3RoID09PSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZXJyb3JzLmpvaW4oJyAnKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFRyYW5zYWN0aW9uO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zYWN0aW9uOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdldGhlcmV1bS1jcnlwdG9ncmFwaHkva2VjY2FrJyksXG4gICAga2VjY2FrMjI0ID0gX3JlcXVpcmUua2VjY2FrMjI0LFxuICAgIGtlY2NhazM4NCA9IF9yZXF1aXJlLmtlY2NhazM4NCxcbiAgICBrMjU2ID0gX3JlcXVpcmUua2VjY2FrMjU2LFxuICAgIGtlY2NhazUxMiA9IF9yZXF1aXJlLmtlY2NhazUxMjtcblxudmFyIHNlY3AyNTZrMSA9IHJlcXVpcmUoJy4vc2VjcDI1NmsxLWFkYXB0ZXInKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbnZhciBybHAgPSByZXF1aXJlKCdybHAnKTtcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG5PYmplY3QuYXNzaWduKGV4cG9ydHMsIHJlcXVpcmUoJ2V0aGpzLXV0aWwnKSk7XG5cbi8qKlxuICogdGhlIG1heCBpbnRlZ2VyIHRoYXQgdGhpcyBWTSBjYW4gaGFuZGxlIChhIGBgYEJOYGBgKVxuICogQHZhciB7Qk59IE1BWF9JTlRFR0VSXG4gKi9cbmV4cG9ydHMuTUFYX0lOVEVHRVIgPSBuZXcgQk4oJ2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYnLCAxNik7XG5cbi8qKlxuICogMl4yNTYgKGEgYGBgQk5gYGApXG4gKiBAdmFyIHtCTn0gVFdPX1BPVzI1NlxuICovXG5leHBvcnRzLlRXT19QT1cyNTYgPSBuZXcgQk4oJzEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJywgMTYpO1xuXG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiBudWxsIChhIGBgYFN0cmluZ2BgYClcbiAqIEB2YXIge1N0cmluZ30gS0VDQ0FLMjU2X05VTExfU1xuICovXG5leHBvcnRzLktFQ0NBSzI1Nl9OVUxMX1MgPSAnYzVkMjQ2MDE4NmY3MjMzYzkyN2U3ZGIyZGNjNzAzYzBlNTAwYjY1M2NhODIyNzNiN2JmYWQ4MDQ1ZDg1YTQ3MCc7XG5leHBvcnRzLlNIQTNfTlVMTF9TID0gZXhwb3J0cy5LRUNDQUsyNTZfTlVMTF9TO1xuXG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiBudWxsIChhIGBgYEJ1ZmZlcmBgYClcbiAqIEB2YXIge0J1ZmZlcn0gS0VDQ0FLMjU2X05VTExcbiAqL1xuZXhwb3J0cy5LRUNDQUsyNTZfTlVMTCA9IEJ1ZmZlci5mcm9tKGV4cG9ydHMuS0VDQ0FLMjU2X05VTExfUywgJ2hleCcpO1xuZXhwb3J0cy5TSEEzX05VTEwgPSBleHBvcnRzLktFQ0NBSzI1Nl9OVUxMO1xuXG4vKipcbiAqIEtlY2Nhay0yNTYgb2YgYW4gUkxQIG9mIGFuIGVtcHR5IGFycmF5IChhIGBgYFN0cmluZ2BgYClcbiAqIEB2YXIge1N0cmluZ30gS0VDQ0FLMjU2X1JMUF9BUlJBWV9TXG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWV9TID0gJzFkY2M0ZGU4ZGVjNzVkN2FhYjg1YjU2N2I2Y2NkNDFhZDMxMjQ1MWI5NDhhNzQxM2YwYTE0MmZkNDBkNDkzNDcnO1xuZXhwb3J0cy5TSEEzX1JMUF9BUlJBWV9TID0gZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZX1M7XG5cbi8qKlxuICogS2VjY2FrLTI1NiBvZiBhbiBSTFAgb2YgYW4gZW1wdHkgYXJyYXkgKGEgYGBgQnVmZmVyYGBgKVxuICogQHZhciB7QnVmZmVyfSBLRUNDQUsyNTZfUkxQX0FSUkFZXG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWSA9IEJ1ZmZlci5mcm9tKGV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWV9TLCAnaGV4Jyk7XG5leHBvcnRzLlNIQTNfUkxQX0FSUkFZID0gZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZO1xuXG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiB0aGUgUkxQIG9mIG51bGwgIChhIGBgYFN0cmluZ2BgYClcbiAqIEB2YXIge1N0cmluZ30gS0VDQ0FLMjU2X1JMUF9TXG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9TID0gJzU2ZTgxZjE3MWJjYzU1YTZmZjgzNDVlNjkyYzBmODZlNWI0OGUwMWI5OTZjYWRjMDAxNjIyZmI1ZTM2M2I0MjEnO1xuZXhwb3J0cy5TSEEzX1JMUF9TID0gZXhwb3J0cy5LRUNDQUsyNTZfUkxQX1M7XG5cbi8qKlxuICogS2VjY2FrLTI1NiBoYXNoIG9mIHRoZSBSTFAgb2YgbnVsbCAoYSBgYGBCdWZmZXJgYGApXG4gKiBAdmFyIHtCdWZmZXJ9IEtFQ0NBSzI1Nl9STFBcbiAqL1xuZXhwb3J0cy5LRUNDQUsyNTZfUkxQID0gQnVmZmVyLmZyb20oZXhwb3J0cy5LRUNDQUsyNTZfUkxQX1MsICdoZXgnKTtcbmV4cG9ydHMuU0hBM19STFAgPSBleHBvcnRzLktFQ0NBSzI1Nl9STFA7XG5cbi8qKlxuICogW2BCTmBdKGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzKVxuICogQHZhciB7RnVuY3Rpb259XG4gKi9cbmV4cG9ydHMuQk4gPSBCTjtcblxuLyoqXG4gKiBbYHJscGBdKGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bWpzL3JscClcbiAqIEB2YXIge0Z1bmN0aW9ufVxuICovXG5leHBvcnRzLnJscCA9IHJscDtcblxuLyoqXG4gKiBbYHNlY3AyNTZrMWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9jcnlwdG9jb2luanMvc2VjcDI1NmsxLW5vZGUvKVxuICogQHZhciB7T2JqZWN0fVxuICovXG5leHBvcnRzLnNlY3AyNTZrMSA9IHNlY3AyNTZrMTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgYnVmZmVyIGZpbGxlZCB3aXRoIDBzXG4gKiBAbWV0aG9kIHplcm9zXG4gKiBAcGFyYW0ge051bWJlcn0gYnl0ZXMgIHRoZSBudW1iZXIgb2YgYnl0ZXMgdGhlIGJ1ZmZlciBzaG91bGQgYmVcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy56ZXJvcyA9IGZ1bmN0aW9uIChieXRlcykge1xuICByZXR1cm4gQnVmZmVyLmFsbG9jVW5zYWZlKGJ5dGVzKS5maWxsKDApO1xufTtcblxuLyoqXG4gICogUmV0dXJucyBhIHplcm8gYWRkcmVzc1xuICAqIEBtZXRob2QgemVyb0FkZHJlc3NcbiAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICovXG5leHBvcnRzLnplcm9BZGRyZXNzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYWRkcmVzc0xlbmd0aCA9IDIwO1xuICB2YXIgemVyb0FkZHJlc3MgPSBleHBvcnRzLnplcm9zKGFkZHJlc3NMZW5ndGgpO1xuICByZXR1cm4gZXhwb3J0cy5idWZmZXJUb0hleCh6ZXJvQWRkcmVzcyk7XG59O1xuXG4vKipcbiAqIExlZnQgUGFkcyBhbiBgQXJyYXlgIG9yIGBCdWZmZXJgIHdpdGggbGVhZGluZyB6ZXJvcyB0aWxsIGl0IGhhcyBgbGVuZ3RoYCBieXRlcy5cbiAqIE9yIGl0IHRydW5jYXRlcyB0aGUgYmVnaW5uaW5nIGlmIGl0IGV4Y2VlZHMuXG4gKiBAbWV0aG9kIGxzZXRMZW5ndGhcbiAqIEBwYXJhbSB7QnVmZmVyfEFycmF5fSBtc2cgdGhlIHZhbHVlIHRvIHBhZFxuICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aCB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRoZSBvdXRwdXQgc2hvdWxkIGJlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtyaWdodD1mYWxzZV0gd2hldGhlciB0byBzdGFydCBwYWRkaW5nIGZvcm0gdGhlIGxlZnQgb3IgcmlnaHRcbiAqIEByZXR1cm4ge0J1ZmZlcnxBcnJheX1cbiAqL1xuZXhwb3J0cy5zZXRMZW5ndGhMZWZ0ID0gZXhwb3J0cy5zZXRMZW5ndGggPSBmdW5jdGlvbiAobXNnLCBsZW5ndGgsIHJpZ2h0KSB7XG4gIHZhciBidWYgPSBleHBvcnRzLnplcm9zKGxlbmd0aCk7XG4gIG1zZyA9IGV4cG9ydHMudG9CdWZmZXIobXNnKTtcbiAgaWYgKHJpZ2h0KSB7XG4gICAgaWYgKG1zZy5sZW5ndGggPCBsZW5ndGgpIHtcbiAgICAgIG1zZy5jb3B5KGJ1Zik7XG4gICAgICByZXR1cm4gYnVmO1xuICAgIH1cbiAgICByZXR1cm4gbXNnLnNsaWNlKDAsIGxlbmd0aCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKG1zZy5sZW5ndGggPCBsZW5ndGgpIHtcbiAgICAgIG1zZy5jb3B5KGJ1ZiwgbGVuZ3RoIC0gbXNnLmxlbmd0aCk7XG4gICAgICByZXR1cm4gYnVmO1xuICAgIH1cbiAgICByZXR1cm4gbXNnLnNsaWNlKC1sZW5ndGgpO1xuICB9XG59O1xuXG4vKipcbiAqIFJpZ2h0IFBhZHMgYW4gYEFycmF5YCBvciBgQnVmZmVyYCB3aXRoIGxlYWRpbmcgemVyb3MgdGlsbCBpdCBoYXMgYGxlbmd0aGAgYnl0ZXMuXG4gKiBPciBpdCB0cnVuY2F0ZXMgdGhlIGJlZ2lubmluZyBpZiBpdCBleGNlZWRzLlxuICogQHBhcmFtIHtCdWZmZXJ8QXJyYXl9IG1zZyB0aGUgdmFsdWUgdG8gcGFkXG4gKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoIHRoZSBudW1iZXIgb2YgYnl0ZXMgdGhlIG91dHB1dCBzaG91bGQgYmVcbiAqIEByZXR1cm4ge0J1ZmZlcnxBcnJheX1cbiAqL1xuZXhwb3J0cy5zZXRMZW5ndGhSaWdodCA9IGZ1bmN0aW9uIChtc2csIGxlbmd0aCkge1xuICByZXR1cm4gZXhwb3J0cy5zZXRMZW5ndGgobXNnLCBsZW5ndGgsIHRydWUpO1xufTtcblxuLyoqXG4gKiBUcmltcyBsZWFkaW5nIHplcm9zIGZyb20gYSBgQnVmZmVyYCBvciBhbiBgQXJyYXlgXG4gKiBAcGFyYW0ge0J1ZmZlcnxBcnJheXxTdHJpbmd9IGFcbiAqIEByZXR1cm4ge0J1ZmZlcnxBcnJheXxTdHJpbmd9XG4gKi9cbmV4cG9ydHMudW5wYWQgPSBleHBvcnRzLnN0cmlwWmVyb3MgPSBmdW5jdGlvbiAoYSkge1xuICBhID0gZXhwb3J0cy5zdHJpcEhleFByZWZpeChhKTtcbiAgdmFyIGZpcnN0ID0gYVswXTtcbiAgd2hpbGUgKGEubGVuZ3RoID4gMCAmJiBmaXJzdC50b1N0cmluZygpID09PSAnMCcpIHtcbiAgICBhID0gYS5zbGljZSgxKTtcbiAgICBmaXJzdCA9IGFbMF07XG4gIH1cbiAgcmV0dXJuIGE7XG59O1xuLyoqXG4gKiBBdHRlbXB0cyB0byB0dXJuIGEgdmFsdWUgaW50byBhIGBCdWZmZXJgLiBBcyBpbnB1dCBpdCBzdXBwb3J0cyBgQnVmZmVyYCwgYFN0cmluZ2AsIGBOdW1iZXJgLCBudWxsL3VuZGVmaW5lZCwgYEJOYCBhbmQgb3RoZXIgb2JqZWN0cyB3aXRoIGEgYHRvQXJyYXkoKWAgbWV0aG9kLlxuICogQHBhcmFtIHsqfSB2IHRoZSB2YWx1ZVxuICovXG5leHBvcnRzLnRvQnVmZmVyID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodikpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2KSkge1xuICAgICAgdiA9IEJ1ZmZlci5mcm9tKHYpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHYgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAoZXhwb3J0cy5pc0hleFN0cmluZyh2KSkge1xuICAgICAgICB2ID0gQnVmZmVyLmZyb20oZXhwb3J0cy5wYWRUb0V2ZW4oZXhwb3J0cy5zdHJpcEhleFByZWZpeCh2KSksICdoZXgnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHYgPSBCdWZmZXIuZnJvbSh2KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnbnVtYmVyJykge1xuICAgICAgdiA9IGV4cG9ydHMuaW50VG9CdWZmZXIodik7XG4gICAgfSBlbHNlIGlmICh2ID09PSBudWxsIHx8IHYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKTtcbiAgICB9IGVsc2UgaWYgKEJOLmlzQk4odikpIHtcbiAgICAgIHYgPSB2LnRvQXJyYXlMaWtlKEJ1ZmZlcik7XG4gICAgfSBlbHNlIGlmICh2LnRvQXJyYXkpIHtcbiAgICAgIC8vIGNvbnZlcnRzIGEgQk4gdG8gYSBCdWZmZXJcbiAgICAgIHYgPSBCdWZmZXIuZnJvbSh2LnRvQXJyYXkoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCB0eXBlJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiB2O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGBCdWZmZXJgIHRvIGEgYE51bWJlcmBcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEB0aHJvd3MgSWYgdGhlIGlucHV0IG51bWJlciBleGNlZWRzIDUzIGJpdHMuXG4gKi9cbmV4cG9ydHMuYnVmZmVyVG9JbnQgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIHJldHVybiBuZXcgQk4oZXhwb3J0cy50b0J1ZmZlcihidWYpKS50b051bWJlcigpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGBCdWZmZXJgIGludG8gYSBoZXggYFN0cmluZ2BcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZXhwb3J0cy5idWZmZXJUb0hleCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgYnVmID0gZXhwb3J0cy50b0J1ZmZlcihidWYpO1xuICByZXR1cm4gJzB4JyArIGJ1Zi50b1N0cmluZygnaGV4Jyk7XG59O1xuXG4vKipcbiAqIEludGVycHJldHMgYSBgQnVmZmVyYCBhcyBhIHNpZ25lZCBpbnRlZ2VyIGFuZCByZXR1cm5zIGEgYEJOYC4gQXNzdW1lcyAyNTYtYml0IG51bWJlcnMuXG4gKiBAcGFyYW0ge0J1ZmZlcn0gbnVtXG4gKiBAcmV0dXJuIHtCTn1cbiAqL1xuZXhwb3J0cy5mcm9tU2lnbmVkID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gbmV3IEJOKG51bSkuZnJvbVR3b3MoMjU2KTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBgQk5gIHRvIGFuIHVuc2lnbmVkIGludGVnZXIgYW5kIHJldHVybnMgaXQgYXMgYSBgQnVmZmVyYC4gQXNzdW1lcyAyNTYtYml0IG51bWJlcnMuXG4gKiBAcGFyYW0ge0JOfSBudW1cbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy50b1Vuc2lnbmVkID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gQnVmZmVyLmZyb20obnVtLnRvVHdvcygyNTYpLnRvQXJyYXkoKSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgS2VjY2FrIGhhc2ggb2YgdGhlIGlucHV0XG4gKiBAcGFyYW0ge0J1ZmZlcnxBcnJheXxTdHJpbmd8TnVtYmVyfSBhIHRoZSBpbnB1dCBkYXRhXG4gKiBAcGFyYW0ge051bWJlcn0gW2JpdHM9MjU2XSB0aGUgS2VjY2FrIHdpZHRoXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMua2VjY2FrID0gZnVuY3Rpb24gKGEsIGJpdHMpIHtcbiAgYSA9IGV4cG9ydHMudG9CdWZmZXIoYSk7XG4gIGlmICghYml0cykgYml0cyA9IDI1NjtcblxuICBzd2l0Y2ggKGJpdHMpIHtcbiAgICBjYXNlIDIyNDpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIGtlY2NhazIyNChhKTtcbiAgICAgIH1cbiAgICBjYXNlIDI1NjpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIGsyNTYoYSk7XG4gICAgICB9XG4gICAgY2FzZSAzODQ6XG4gICAgICB7XG4gICAgICAgIHJldHVybiBrZWNjYWszODQoYSk7XG4gICAgICB9XG4gICAgY2FzZSA1MTI6XG4gICAgICB7XG4gICAgICAgIHJldHVybiBrZWNjYWs1MTIoYSk7XG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGQgYWxnb3JpdGhtOiBrZWNjYWsnICsgYml0cyk7XG4gICAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBLZWNjYWstMjU2IGhhc2ggb2YgdGhlIGlucHV0LCBhbGlhcyBmb3Iga2VjY2FrKGEsIDI1NilcbiAqIEBwYXJhbSB7QnVmZmVyfEFycmF5fFN0cmluZ3xOdW1iZXJ9IGEgdGhlIGlucHV0IGRhdGFcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5rZWNjYWsyNTYgPSBmdW5jdGlvbiAoYSkge1xuICByZXR1cm4gZXhwb3J0cy5rZWNjYWsoYSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgU0hBLTMgKEtlY2NhaykgaGFzaCBvZiB0aGUgaW5wdXQgW09CU09MRVRFXVxuICogQHBhcmFtIHtCdWZmZXJ8QXJyYXl8U3RyaW5nfE51bWJlcn0gYSB0aGUgaW5wdXQgZGF0YVxuICogQHBhcmFtIHtOdW1iZXJ9IFtiaXRzPTI1Nl0gdGhlIFNIQS0zIHdpZHRoXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMuc2hhMyA9IGV4cG9ydHMua2VjY2FrO1xuXG4vKipcbiAqIENyZWF0ZXMgU0hBMjU2IGhhc2ggb2YgdGhlIGlucHV0XG4gKiBAcGFyYW0ge0J1ZmZlcnxBcnJheXxTdHJpbmd8TnVtYmVyfSBhIHRoZSBpbnB1dCBkYXRhXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMuc2hhMjU2ID0gZnVuY3Rpb24gKGEpIHtcbiAgYSA9IGV4cG9ydHMudG9CdWZmZXIoYSk7XG4gIHJldHVybiBjcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoYSkuZGlnZXN0KCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgUklQRU1EMTYwIGhhc2ggb2YgdGhlIGlucHV0XG4gKiBAcGFyYW0ge0J1ZmZlcnxBcnJheXxTdHJpbmd8TnVtYmVyfSBhIHRoZSBpbnB1dCBkYXRhXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHBhZGRlZCB3aGV0aGVyIGl0IHNob3VsZCBiZSBwYWRkZWQgdG8gMjU2IGJpdHMgb3Igbm90XG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMucmlwZW1kMTYwID0gZnVuY3Rpb24gKGEsIHBhZGRlZCkge1xuICBhID0gZXhwb3J0cy50b0J1ZmZlcihhKTtcbiAgdmFyIGhhc2ggPSBjcmVhdGVIYXNoKCdybWQxNjAnKS51cGRhdGUoYSkuZGlnZXN0KCk7XG4gIGlmIChwYWRkZWQgPT09IHRydWUpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5zZXRMZW5ndGgoaGFzaCwgMzIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBoYXNoO1xuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgU0hBLTMgaGFzaCBvZiB0aGUgUkxQIGVuY29kZWQgdmVyc2lvbiBvZiB0aGUgaW5wdXRcbiAqIEBwYXJhbSB7QnVmZmVyfEFycmF5fFN0cmluZ3xOdW1iZXJ9IGEgdGhlIGlucHV0IGRhdGFcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5ybHBoYXNoID0gZnVuY3Rpb24gKGEpIHtcbiAgcmV0dXJuIGV4cG9ydHMua2VjY2FrKHJscC5lbmNvZGUoYSkpO1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHByaXZhdGUga2V5IHNhdGlzZmllcyB0aGUgcnVsZXMgb2YgdGhlIGN1cnZlIHNlY3AyNTZrMS5cbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnRzLmlzVmFsaWRQcml2YXRlID0gZnVuY3Rpb24gKHByaXZhdGVLZXkpIHtcbiAgcmV0dXJuIHNlY3AyNTZrMS5wcml2YXRlS2V5VmVyaWZ5KHByaXZhdGVLZXkpO1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHB1YmxpYyBrZXkgc2F0aXNmaWVzIHRoZSBydWxlcyBvZiB0aGUgY3VydmUgc2VjcDI1NmsxXG4gKiBhbmQgdGhlIHJlcXVpcmVtZW50cyBvZiBFdGhlcmV1bS5cbiAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXkgVGhlIHR3byBwb2ludHMgb2YgYW4gdW5jb21wcmVzc2VkIGtleSwgdW5sZXNzIHNhbml0aXplIGlzIGVuYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW3Nhbml0aXplPWZhbHNlXSBBY2NlcHQgcHVibGljIGtleXMgaW4gb3RoZXIgZm9ybWF0c1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0cy5pc1ZhbGlkUHVibGljID0gZnVuY3Rpb24gKHB1YmxpY0tleSwgc2FuaXRpemUpIHtcbiAgaWYgKHB1YmxpY0tleS5sZW5ndGggPT09IDY0KSB7XG4gICAgLy8gQ29udmVydCB0byBTRUMxIGZvciBzZWNwMjU2azFcbiAgICByZXR1cm4gc2VjcDI1NmsxLnB1YmxpY0tleVZlcmlmeShCdWZmZXIuY29uY2F0KFtCdWZmZXIuZnJvbShbNF0pLCBwdWJsaWNLZXldKSk7XG4gIH1cblxuICBpZiAoIXNhbml0aXplKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHNlY3AyNTZrMS5wdWJsaWNLZXlWZXJpZnkocHVibGljS2V5KTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZXRoZXJldW0gYWRkcmVzcyBvZiBhIGdpdmVuIHB1YmxpYyBrZXkuXG4gKiBBY2NlcHRzIFwiRXRoZXJldW0gcHVibGljIGtleXNcIiBhbmQgU0VDMSBlbmNvZGVkIGtleXMuXG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHViS2V5IFRoZSB0d28gcG9pbnRzIG9mIGFuIHVuY29tcHJlc3NlZCBrZXksIHVubGVzcyBzYW5pdGl6ZSBpcyBlbmFibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtzYW5pdGl6ZT1mYWxzZV0gQWNjZXB0IHB1YmxpYyBrZXlzIGluIG90aGVyIGZvcm1hdHNcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5wdWJUb0FkZHJlc3MgPSBleHBvcnRzLnB1YmxpY1RvQWRkcmVzcyA9IGZ1bmN0aW9uIChwdWJLZXksIHNhbml0aXplKSB7XG4gIHB1YktleSA9IGV4cG9ydHMudG9CdWZmZXIocHViS2V5KTtcbiAgaWYgKHNhbml0aXplICYmIHB1YktleS5sZW5ndGggIT09IDY0KSB7XG4gICAgcHViS2V5ID0gc2VjcDI1NmsxLnB1YmxpY0tleUNvbnZlcnQocHViS2V5LCBmYWxzZSkuc2xpY2UoMSk7XG4gIH1cbiAgYXNzZXJ0KHB1YktleS5sZW5ndGggPT09IDY0KTtcbiAgLy8gT25seSB0YWtlIHRoZSBsb3dlciAxNjBiaXRzIG9mIHRoZSBoYXNoXG4gIHJldHVybiBleHBvcnRzLmtlY2NhayhwdWJLZXkpLnNsaWNlKC0yMCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGV0aGVyZXVtIHB1YmxpYyBrZXkgb2YgYSBnaXZlbiBwcml2YXRlIGtleVxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXkgQSBwcml2YXRlIGtleSBtdXN0IGJlIDI1NiBiaXRzIHdpZGVcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xudmFyIHByaXZhdGVUb1B1YmxpYyA9IGV4cG9ydHMucHJpdmF0ZVRvUHVibGljID0gZnVuY3Rpb24gKHByaXZhdGVLZXkpIHtcbiAgcHJpdmF0ZUtleSA9IGV4cG9ydHMudG9CdWZmZXIocHJpdmF0ZUtleSk7XG4gIC8vIHNraXAgdGhlIHR5cGUgZmxhZyBhbmQgdXNlIHRoZSBYLCBZIHBvaW50c1xuICByZXR1cm4gc2VjcDI1NmsxLnB1YmxpY0tleUNyZWF0ZShwcml2YXRlS2V5LCBmYWxzZSkuc2xpY2UoMSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgcHVibGljIGtleSB0byB0aGUgRXRoZXJldW0gZm9ybWF0LlxuICogQHBhcmFtIHtCdWZmZXJ9IHB1YmxpY0tleVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5leHBvcnRzLmltcG9ydFB1YmxpYyA9IGZ1bmN0aW9uIChwdWJsaWNLZXkpIHtcbiAgcHVibGljS2V5ID0gZXhwb3J0cy50b0J1ZmZlcihwdWJsaWNLZXkpO1xuICBpZiAocHVibGljS2V5Lmxlbmd0aCAhPT0gNjQpIHtcbiAgICBwdWJsaWNLZXkgPSBzZWNwMjU2azEucHVibGljS2V5Q29udmVydChwdWJsaWNLZXksIGZhbHNlKS5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gcHVibGljS2V5O1xufTtcblxuLyoqXG4gKiBFQ0RTQSBzaWduXG4gKiBAcGFyYW0ge0J1ZmZlcn0gbXNnSGFzaFxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZXhwb3J0cy5lY3NpZ24gPSBmdW5jdGlvbiAobXNnSGFzaCwgcHJpdmF0ZUtleSkge1xuICB2YXIgc2lnID0gc2VjcDI1NmsxLnNpZ24obXNnSGFzaCwgcHJpdmF0ZUtleSk7XG5cbiAgdmFyIHJldCA9IHt9O1xuICByZXQuciA9IHNpZy5zaWduYXR1cmUuc2xpY2UoMCwgMzIpO1xuICByZXQucyA9IHNpZy5zaWduYXR1cmUuc2xpY2UoMzIsIDY0KTtcbiAgcmV0LnYgPSBzaWcucmVjb3ZlcnkgKyAyNztcbiAgcmV0dXJuIHJldDtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUga2VjY2FrLTI1NiBoYXNoIG9mIGBtZXNzYWdlYCwgcHJlZml4ZWQgd2l0aCB0aGUgaGVhZGVyIHVzZWQgYnkgdGhlIGBldGhfc2lnbmAgUlBDIGNhbGwuXG4gKiBUaGUgb3V0cHV0IG9mIHRoaXMgZnVuY3Rpb24gY2FuIGJlIGZlZCBpbnRvIGBlY3NpZ25gIHRvIHByb2R1Y2UgdGhlIHNhbWUgc2lnbmF0dXJlIGFzIHRoZSBgZXRoX3NpZ25gXG4gKiBjYWxsIGZvciBhIGdpdmVuIGBtZXNzYWdlYCwgb3IgZmVkIHRvIGBlY3JlY292ZXJgIGFsb25nIHdpdGggYSBzaWduYXR1cmUgdG8gcmVjb3ZlciB0aGUgcHVibGljIGtleVxuICogdXNlZCB0byBwcm9kdWNlIHRoZSBzaWduYXR1cmUuXG4gKiBAcGFyYW0gbWVzc2FnZVxuICogQHJldHVybnMge0J1ZmZlcn0gaGFzaFxuICovXG5leHBvcnRzLmhhc2hQZXJzb25hbE1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICB2YXIgcHJlZml4ID0gZXhwb3J0cy50b0J1ZmZlcignXFx4MTlFdGhlcmV1bSBTaWduZWQgTWVzc2FnZTpcXG4nICsgbWVzc2FnZS5sZW5ndGgudG9TdHJpbmcoKSk7XG4gIHJldHVybiBleHBvcnRzLmtlY2NhayhCdWZmZXIuY29uY2F0KFtwcmVmaXgsIG1lc3NhZ2VdKSk7XG59O1xuXG4vKipcbiAqIEVDRFNBIHB1YmxpYyBrZXkgcmVjb3ZlcnkgZnJvbSBzaWduYXR1cmVcbiAqIEBwYXJhbSB7QnVmZmVyfSBtc2dIYXNoXG4gKiBAcGFyYW0ge051bWJlcn0gdlxuICogQHBhcmFtIHtCdWZmZXJ9IHJcbiAqIEBwYXJhbSB7QnVmZmVyfSBzXG4gKiBAcmV0dXJuIHtCdWZmZXJ9IHB1YmxpY0tleVxuICovXG5leHBvcnRzLmVjcmVjb3ZlciA9IGZ1bmN0aW9uIChtc2dIYXNoLCB2LCByLCBzKSB7XG4gIHZhciBzaWduYXR1cmUgPSBCdWZmZXIuY29uY2F0KFtleHBvcnRzLnNldExlbmd0aChyLCAzMiksIGV4cG9ydHMuc2V0TGVuZ3RoKHMsIDMyKV0sIDY0KTtcbiAgdmFyIHJlY292ZXJ5ID0gdiAtIDI3O1xuICBpZiAocmVjb3ZlcnkgIT09IDAgJiYgcmVjb3ZlcnkgIT09IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2lnbmF0dXJlIHYgdmFsdWUnKTtcbiAgfVxuICB2YXIgc2VuZGVyUHViS2V5ID0gc2VjcDI1NmsxLnJlY292ZXIobXNnSGFzaCwgc2lnbmF0dXJlLCByZWNvdmVyeSk7XG4gIHJldHVybiBzZWNwMjU2azEucHVibGljS2V5Q29udmVydChzZW5kZXJQdWJLZXksIGZhbHNlKS5zbGljZSgxKTtcbn07XG5cbi8qKlxuICogQ29udmVydCBzaWduYXR1cmUgcGFyYW1ldGVycyBpbnRvIHRoZSBmb3JtYXQgb2YgYGV0aF9zaWduYCBSUEMgbWV0aG9kXG4gKiBAcGFyYW0ge051bWJlcn0gdlxuICogQHBhcmFtIHtCdWZmZXJ9IHJcbiAqIEBwYXJhbSB7QnVmZmVyfSBzXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHNpZ1xuICovXG5leHBvcnRzLnRvUnBjU2lnID0gZnVuY3Rpb24gKHYsIHIsIHMpIHtcbiAgLy8gTk9URTogd2l0aCBwb3RlbnRpYWwgaW50cm9kdWN0aW9uIG9mIGNoYWluSWQgdGhpcyBtaWdodCBuZWVkIHRvIGJlIHVwZGF0ZWRcbiAgaWYgKHYgIT09IDI3ICYmIHYgIT09IDI4KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJlY292ZXJ5IGlkJyk7XG4gIH1cblxuICAvLyBnZXRoIChhbmQgdGhlIFJQQyBldGhfc2lnbiBtZXRob2QpIHVzZXMgdGhlIDY1IGJ5dGUgZm9ybWF0IHVzZWQgYnkgQml0Y29pblxuICAvLyBGSVhNRTogdGhpcyBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZSAtIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9nby1ldGhlcmV1bS9pc3N1ZXMvMjA1M1xuICByZXR1cm4gZXhwb3J0cy5idWZmZXJUb0hleChCdWZmZXIuY29uY2F0KFtleHBvcnRzLnNldExlbmd0aExlZnQociwgMzIpLCBleHBvcnRzLnNldExlbmd0aExlZnQocywgMzIpLCBleHBvcnRzLnRvQnVmZmVyKHYgLSAyNyldKSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgc2lnbmF0dXJlIGZvcm1hdCBvZiB0aGUgYGV0aF9zaWduYCBSUEMgbWV0aG9kIHRvIHNpZ25hdHVyZSBwYXJhbWV0ZXJzXG4gKiBOT1RFOiBhbGwgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBnZXRoOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vZ28tZXRoZXJldW0vaXNzdWVzLzIwNTNcbiAqIEBwYXJhbSB7U3RyaW5nfSBzaWdcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZXhwb3J0cy5mcm9tUnBjU2lnID0gZnVuY3Rpb24gKHNpZykge1xuICBzaWcgPSBleHBvcnRzLnRvQnVmZmVyKHNpZyk7XG5cbiAgLy8gTk9URTogd2l0aCBwb3RlbnRpYWwgaW50cm9kdWN0aW9uIG9mIGNoYWluSWQgdGhpcyBtaWdodCBuZWVkIHRvIGJlIHVwZGF0ZWRcbiAgaWYgKHNpZy5sZW5ndGggIT09IDY1KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNpZ25hdHVyZSBsZW5ndGgnKTtcbiAgfVxuXG4gIHZhciB2ID0gc2lnWzY0XTtcbiAgLy8gc3VwcG9ydCBib3RoIHZlcnNpb25zIG9mIGBldGhfc2lnbmAgcmVzcG9uc2VzXG4gIGlmICh2IDwgMjcpIHtcbiAgICB2ICs9IDI3O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB2OiB2LFxuICAgIHI6IHNpZy5zbGljZSgwLCAzMiksXG4gICAgczogc2lnLnNsaWNlKDMyLCA2NClcbiAgfTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZXRoZXJldW0gYWRkcmVzcyBvZiBhIGdpdmVuIHByaXZhdGUga2V5XG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHJpdmF0ZUtleSBBIHByaXZhdGUga2V5IG11c3QgYmUgMjU2IGJpdHMgd2lkZVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5leHBvcnRzLnByaXZhdGVUb0FkZHJlc3MgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSkge1xuICByZXR1cm4gZXhwb3J0cy5wdWJsaWNUb0FkZHJlc3MocHJpdmF0ZVRvUHVibGljKHByaXZhdGVLZXkpKTtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBhZGRyZXNzIGlzIGEgdmFsaWQuIEFjY2VwdHMgY2hlY2tzdW1tZWQgYWRkcmVzc2VzIHRvb1xuICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3NcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmV4cG9ydHMuaXNWYWxpZEFkZHJlc3MgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICByZXR1cm4gKC9eMHhbMC05YS1mQS1GXXs0MH0kLy50ZXN0KGFkZHJlc3MpXG4gICk7XG59O1xuXG4vKipcbiAgKiBDaGVja3MgaWYgYSBnaXZlbiBhZGRyZXNzIGlzIGEgemVybyBhZGRyZXNzXG4gICogQG1ldGhvZCBpc1plcm9BZGRyZXNzXG4gICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3NcbiAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAqL1xuZXhwb3J0cy5pc1plcm9BZGRyZXNzID0gZnVuY3Rpb24gKGFkZHJlc3MpIHtcbiAgdmFyIHplcm9BZGRyZXNzID0gZXhwb3J0cy56ZXJvQWRkcmVzcygpO1xuICByZXR1cm4gemVyb0FkZHJlc3MgPT09IGV4cG9ydHMuYWRkSGV4UHJlZml4KGFkZHJlc3MpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgY2hlY2tzdW1tZWQgYWRkcmVzc1xuICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3NcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZXhwb3J0cy50b0NoZWNrc3VtQWRkcmVzcyA9IGZ1bmN0aW9uIChhZGRyZXNzKSB7XG4gIGFkZHJlc3MgPSBleHBvcnRzLnN0cmlwSGV4UHJlZml4KGFkZHJlc3MpLnRvTG93ZXJDYXNlKCk7XG4gIHZhciBoYXNoID0gZXhwb3J0cy5rZWNjYWsoYWRkcmVzcykudG9TdHJpbmcoJ2hleCcpO1xuICB2YXIgcmV0ID0gJzB4JztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFkZHJlc3MubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocGFyc2VJbnQoaGFzaFtpXSwgMTYpID49IDgpIHtcbiAgICAgIHJldCArPSBhZGRyZXNzW2ldLnRvVXBwZXJDYXNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldCArPSBhZGRyZXNzW2ldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgYWRkcmVzcyBpcyBhIHZhbGlkIGNoZWNrc3VtbWVkIGFkZHJlc3NcbiAqIEBwYXJhbSB7QnVmZmVyfSBhZGRyZXNzXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnRzLmlzVmFsaWRDaGVja3N1bUFkZHJlc3MgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICByZXR1cm4gZXhwb3J0cy5pc1ZhbGlkQWRkcmVzcyhhZGRyZXNzKSAmJiBleHBvcnRzLnRvQ2hlY2tzdW1BZGRyZXNzKGFkZHJlc3MpID09PSBhZGRyZXNzO1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYW4gYWRkcmVzcyBvZiBhIG5ld2x5IGNyZWF0ZWQgY29udHJhY3RcbiAqIEBwYXJhbSB7QnVmZmVyfSBmcm9tIHRoZSBhZGRyZXNzIHdoaWNoIGlzIGNyZWF0aW5nIHRoaXMgbmV3IGFkZHJlc3NcbiAqIEBwYXJhbSB7QnVmZmVyfSBub25jZSB0aGUgbm9uY2Ugb2YgdGhlIGZyb20gYWNjb3VudFxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5leHBvcnRzLmdlbmVyYXRlQWRkcmVzcyA9IGZ1bmN0aW9uIChmcm9tLCBub25jZSkge1xuICBmcm9tID0gZXhwb3J0cy50b0J1ZmZlcihmcm9tKTtcbiAgbm9uY2UgPSBuZXcgQk4obm9uY2UpO1xuXG4gIGlmIChub25jZS5pc1plcm8oKSkge1xuICAgIC8vIGluIFJMUCB3ZSB3YW50IHRvIGVuY29kZSBudWxsIGluIHRoZSBjYXNlIG9mIHplcm8gbm9uY2VcbiAgICAvLyByZWFkIHRoZSBSTFAgZG9jdW1lbnRhdGlvbiBmb3IgYW4gYW5zd2VyIGlmIHlvdSBkYXJlXG4gICAgbm9uY2UgPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIG5vbmNlID0gQnVmZmVyLmZyb20obm9uY2UudG9BcnJheSgpKTtcbiAgfVxuXG4gIC8vIE9ubHkgdGFrZSB0aGUgbG93ZXIgMTYwYml0cyBvZiB0aGUgaGFzaFxuICByZXR1cm4gZXhwb3J0cy5ybHBoYXNoKFtmcm9tLCBub25jZV0pLnNsaWNlKC0yMCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc3VwcGxpZWQgYWRkcmVzcyBiZWxvbmdzIHRvIGEgcHJlY29tcGlsZWQgYWNjb3VudCAoQnl6YW50aXVtKVxuICogQHBhcmFtIHtCdWZmZXJ8U3RyaW5nfSBhZGRyZXNzXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnRzLmlzUHJlY29tcGlsZWQgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICB2YXIgYSA9IGV4cG9ydHMudW5wYWQoYWRkcmVzcyk7XG4gIHJldHVybiBhLmxlbmd0aCA9PT0gMSAmJiBhWzBdID49IDEgJiYgYVswXSA8PSA4O1xufTtcblxuLyoqXG4gKiBBZGRzIFwiMHhcIiB0byBhIGdpdmVuIGBTdHJpbmdgIGlmIGl0IGRvZXMgbm90IGFscmVhZHkgc3RhcnQgd2l0aCBcIjB4XCJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZXhwb3J0cy5hZGRIZXhQcmVmaXggPSBmdW5jdGlvbiAoc3RyKSB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICByZXR1cm4gZXhwb3J0cy5pc0hleFByZWZpeGVkKHN0cikgPyBzdHIgOiAnMHgnICsgc3RyO1xufTtcblxuLyoqXG4gKiBWYWxpZGF0ZSBFQ0RTQSBzaWduYXR1cmVcbiAqIEBtZXRob2QgaXNWYWxpZFNpZ25hdHVyZVxuICogQHBhcmFtIHtCdWZmZXJ9IHZcbiAqIEBwYXJhbSB7QnVmZmVyfSByXG4gKiBAcGFyYW0ge0J1ZmZlcn0gc1xuICogQHBhcmFtIHtCb29sZWFufSBbaG9tZXN0ZWFkPXRydWVdXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5cbmV4cG9ydHMuaXNWYWxpZFNpZ25hdHVyZSA9IGZ1bmN0aW9uICh2LCByLCBzLCBob21lc3RlYWQpIHtcbiAgdmFyIFNFQ1AyNTZLMV9OX0RJVl8yID0gbmV3IEJOKCc3ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjVkNTc2ZTczNTdhNDUwMWRkZmU5MmY0NjY4MWIyMGEwJywgMTYpO1xuICB2YXIgU0VDUDI1NksxX04gPSBuZXcgQk4oJ2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlYmFhZWRjZTZhZjQ4YTAzYmJmZDI1ZThjZDAzNjQxNDEnLCAxNik7XG5cbiAgaWYgKHIubGVuZ3RoICE9PSAzMiB8fCBzLmxlbmd0aCAhPT0gMzIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodiAhPT0gMjcgJiYgdiAhPT0gMjgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByID0gbmV3IEJOKHIpO1xuICBzID0gbmV3IEJOKHMpO1xuXG4gIGlmIChyLmlzWmVybygpIHx8IHIuZ3QoU0VDUDI1NksxX04pIHx8IHMuaXNaZXJvKCkgfHwgcy5ndChTRUNQMjU2SzFfTikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoaG9tZXN0ZWFkID09PSBmYWxzZSAmJiBuZXcgQk4ocykuY21wKFNFQ1AyNTZLMV9OX0RJVl8yKSA9PT0gMSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGBCdWZmZXJgIG9yIGBBcnJheWAgdG8gSlNPTlxuICogQHBhcmFtIHtCdWZmZXJ8QXJyYXl9IGJhXG4gKiBAcmV0dXJuIHtBcnJheXxTdHJpbmd8bnVsbH1cbiAqL1xuZXhwb3J0cy5iYVRvSlNPTiA9IGZ1bmN0aW9uIChiYSkge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGJhKSkge1xuICAgIHJldHVybiAnMHgnICsgYmEudG9TdHJpbmcoJ2hleCcpO1xuICB9IGVsc2UgaWYgKGJhIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnJheS5wdXNoKGV4cG9ydHMuYmFUb0pTT04oYmFbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG59O1xuXG4vKipcbiAqIERlZmluZXMgcHJvcGVydGllcyBvbiBhIGBPYmplY3RgLiBJdCBtYWtlIHRoZSBhc3N1bXB0aW9uIHRoYXQgdW5kZXJseWluZyBkYXRhIGlzIGJpbmFyeS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzZWxmIHRoZSBgT2JqZWN0YCB0byBkZWZpbmUgcHJvcGVydGllcyBvblxuICogQHBhcmFtIHtBcnJheX0gZmllbGRzIGFuIGFycmF5IGZpZWxkcyB0byBkZWZpbmUuIEZpZWxkcyBjYW4gY29udGFpbjpcbiAqICogYG5hbWVgIC0gdGhlIG5hbWUgb2YgdGhlIHByb3BlcnRpZXNcbiAqICogYGxlbmd0aGAgLSB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRoZSBmaWVsZCBjYW4gaGF2ZVxuICogKiBgYWxsb3dMZXNzYCAtIGlmIHRoZSBmaWVsZCBjYW4gYmUgbGVzcyB0aGFuIHRoZSBsZW5ndGhcbiAqICogYGFsbG93RW1wdHlgXG4gKiBAcGFyYW0geyp9IGRhdGEgZGF0YSB0byBiZSB2YWxpZGF0ZWQgYWdhaW5zdCB0aGUgZGVmaW5pdGlvbnNcbiAqL1xuZXhwb3J0cy5kZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKHNlbGYsIGZpZWxkcywgZGF0YSkge1xuICBzZWxmLnJhdyA9IFtdO1xuICBzZWxmLl9maWVsZHMgPSBbXTtcblxuICAvLyBhdHRhY2ggdGhlIGB0b0pTT05gXG4gIHNlbGYudG9KU09OID0gZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgaWYgKGxhYmVsKSB7XG4gICAgICB2YXIgb2JqID0ge307XG4gICAgICBzZWxmLl9maWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgb2JqW2ZpZWxkXSA9ICcweCcgKyBzZWxmW2ZpZWxkXS50b1N0cmluZygnaGV4Jyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIHJldHVybiBleHBvcnRzLmJhVG9KU09OKHRoaXMucmF3KTtcbiAgfTtcblxuICBzZWxmLnNlcmlhbGl6ZSA9IGZ1bmN0aW9uIHNlcmlhbGl6ZSgpIHtcbiAgICByZXR1cm4gcmxwLmVuY29kZShzZWxmLnJhdyk7XG4gIH07XG5cbiAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkLCBpKSB7XG4gICAgc2VsZi5fZmllbGRzLnB1c2goZmllbGQubmFtZSk7XG4gICAgZnVuY3Rpb24gZ2V0dGVyKCkge1xuICAgICAgcmV0dXJuIHNlbGYucmF3W2ldO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXR0ZXIodikge1xuICAgICAgdiA9IGV4cG9ydHMudG9CdWZmZXIodik7XG5cbiAgICAgIGlmICh2LnRvU3RyaW5nKCdoZXgnKSA9PT0gJzAwJyAmJiAhZmllbGQuYWxsb3daZXJvKSB7XG4gICAgICAgIHYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmaWVsZC5hbGxvd0xlc3MgJiYgZmllbGQubGVuZ3RoKSB7XG4gICAgICAgIHYgPSBleHBvcnRzLnN0cmlwWmVyb3Modik7XG4gICAgICAgIGFzc2VydChmaWVsZC5sZW5ndGggPj0gdi5sZW5ndGgsICdUaGUgZmllbGQgJyArIGZpZWxkLm5hbWUgKyAnIG11c3Qgbm90IGhhdmUgbW9yZSAnICsgZmllbGQubGVuZ3RoICsgJyBieXRlcycpO1xuICAgICAgfSBlbHNlIGlmICghKGZpZWxkLmFsbG93WmVybyAmJiB2Lmxlbmd0aCA9PT0gMCkgJiYgZmllbGQubGVuZ3RoKSB7XG4gICAgICAgIGFzc2VydChmaWVsZC5sZW5ndGggPT09IHYubGVuZ3RoLCAnVGhlIGZpZWxkICcgKyBmaWVsZC5uYW1lICsgJyBtdXN0IGhhdmUgYnl0ZSBsZW5ndGggb2YgJyArIGZpZWxkLmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIHNlbGYucmF3W2ldID0gdjtcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZiwgZmllbGQubmFtZSwge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZ2V0dGVyLFxuICAgICAgc2V0OiBzZXR0ZXJcbiAgICB9KTtcblxuICAgIGlmIChmaWVsZC5kZWZhdWx0KSB7XG4gICAgICBzZWxmW2ZpZWxkLm5hbWVdID0gZmllbGQuZGVmYXVsdDtcbiAgICB9XG5cbiAgICAvLyBhdHRhY2ggYWxpYXNcbiAgICBpZiAoZmllbGQuYWxpYXMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCBmaWVsZC5hbGlhcywge1xuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBzZXQ6IHNldHRlcixcbiAgICAgICAgZ2V0OiBnZXR0ZXJcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gaWYgdGhlIGNvbnN0dWN0b3IgaXMgcGFzc2VkIGRhdGFcbiAgaWYgKGRhdGEpIHtcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICBkYXRhID0gQnVmZmVyLmZyb20oZXhwb3J0cy5zdHJpcEhleFByZWZpeChkYXRhKSwgJ2hleCcpO1xuICAgIH1cblxuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIHtcbiAgICAgIGRhdGEgPSBybHAuZGVjb2RlKGRhdGEpO1xuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICBpZiAoZGF0YS5sZW5ndGggPiBzZWxmLl9maWVsZHMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignd3JvbmcgbnVtYmVyIG9mIGZpZWxkcyBpbiBkYXRhJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIG1ha2Ugc3VyZSBhbGwgdGhlIGl0ZW1zIGFyZSBidWZmZXJzXG4gICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKGQsIGkpIHtcbiAgICAgICAgc2VsZltzZWxmLl9maWVsZHNbaV1dID0gZXhwb3J0cy50b0J1ZmZlcihkKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoKHR5cGVvZiBkYXRhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihkYXRhKSkgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICAgICAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgIGlmIChrZXlzLmluZGV4T2YoZmllbGQubmFtZSkgIT09IC0xKSBzZWxmW2ZpZWxkLm5hbWVdID0gZGF0YVtmaWVsZC5uYW1lXTtcbiAgICAgICAgaWYgKGtleXMuaW5kZXhPZihmaWVsZC5hbGlhcykgIT09IC0xKSBzZWxmW2ZpZWxkLmFsaWFzXSA9IGRhdGFbZmllbGQuYWxpYXNdO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBkYXRhJyk7XG4gICAgfVxuICB9XG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHNlY3AyNTZrMSA9IHJlcXVpcmUoJ2V0aGVyZXVtLWNyeXB0b2dyYXBoeS9zZWNwMjU2azEnKTtcblxudmFyIHNlY3AyNTZrMXYzID0gcmVxdWlyZSgnLi9zZWNwMjU2azEtbGliL2luZGV4Jyk7XG52YXIgZGVyID0gcmVxdWlyZSgnLi9zZWNwMjU2azEtbGliL2RlcicpO1xuXG4vKipcbiAqIFZlcmlmeSBhbiBFQ0RTQSBwcml2YXRlS2V5XG4gKiBAbWV0aG9kIHByaXZhdGVLZXlWZXJpZnlcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG52YXIgcHJpdmF0ZUtleVZlcmlmeSA9IGZ1bmN0aW9uIHByaXZhdGVLZXlWZXJpZnkocHJpdmF0ZUtleSkge1xuICAvLyBzZWNwMjU2azEgdjQgdmVyc2lvbiB0aHJvd3Mgd2hlbiBwcml2YXRlS2V5IGxlbmd0aCBpcyBub3QgMzJcbiAgaWYgKHByaXZhdGVLZXkubGVuZ3RoICE9PSAzMikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBzZWNwMjU2azEucHJpdmF0ZUtleVZlcmlmeShVaW50OEFycmF5LmZyb20ocHJpdmF0ZUtleSkpO1xufTtcblxuLyoqXG4gKiBFeHBvcnQgYSBwcml2YXRlS2V5IGluIERFUiBmb3JtYXRcbiAqIEBtZXRob2QgcHJpdmF0ZUtleUV4cG9ydFxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY29tcHJlc3NlZFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xudmFyIHByaXZhdGVLZXlFeHBvcnQgPSBmdW5jdGlvbiBwcml2YXRlS2V5RXhwb3J0KHByaXZhdGVLZXksIGNvbXByZXNzZWQpIHtcbiAgLy8gcHJpdmF0ZUtleUV4cG9ydCBtZXRob2QgaXMgbm90IHBhcnQgb2Ygc2VjcDI1NmsxIHY0IHBhY2thZ2VcbiAgLy8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBvbiB2M1xuICBpZiAocHJpdmF0ZUtleS5sZW5ndGggIT09IDMyKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3ByaXZhdGUga2V5IGxlbmd0aCBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICB2YXIgcHVibGljS2V5ID0gc2VjcDI1NmsxdjMucHJpdmF0ZUtleUV4cG9ydChwcml2YXRlS2V5LCBjb21wcmVzc2VkKTtcblxuICByZXR1cm4gZGVyLnByaXZhdGVLZXlFeHBvcnQocHJpdmF0ZUtleSwgcHVibGljS2V5LCBjb21wcmVzc2VkKTtcbn07XG5cbi8qKlxuICogSW1wb3J0IGEgcHJpdmF0ZUtleSBpbiBERVIgZm9ybWF0XG4gKiBAbWV0aG9kIHByaXZhdGVLZXlJbXBvcnRcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cblxudmFyIHByaXZhdGVLZXlJbXBvcnQgPSBmdW5jdGlvbiBwcml2YXRlS2V5SW1wb3J0KHByaXZhdGVLZXkpIHtcbiAgLy8gcHJpdmF0ZUtleUltcG9ydCBtZXRob2QgaXMgbm90IHBhcnQgb2Ygc2VjcDI1NmsxIHY0IHBhY2thZ2VcbiAgLy8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBvbiB2M1xuICBwcml2YXRlS2V5ID0gZGVyLnByaXZhdGVLZXlJbXBvcnQocHJpdmF0ZUtleSk7XG4gIGlmIChwcml2YXRlS2V5ICE9PSBudWxsICYmIHByaXZhdGVLZXkubGVuZ3RoID09PSAzMiAmJiBwcml2YXRlS2V5VmVyaWZ5KHByaXZhdGVLZXkpKSB7XG4gICAgcmV0dXJuIHByaXZhdGVLZXk7XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoXCJjb3VsZG4ndCBpbXBvcnQgZnJvbSBERVIgZm9ybWF0XCIpO1xufTtcblxuLyoqXG4gKiBOZWdhdGUgYSBwcml2YXRlS2V5IGJ5IHN1YnRyYWN0aW5nIGl0IGZyb20gdGhlIG9yZGVyIG9mIHRoZSBjdXJ2ZSdzIGJhc2UgcG9pbnRcbiAqIEBtZXRob2QgcHJpdmF0ZUtleU5lZ2F0ZVxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xudmFyIHByaXZhdGVLZXlOZWdhdGUgPSBmdW5jdGlvbiBwcml2YXRlS2V5TmVnYXRlKHByaXZhdGVLZXkpIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5wcml2YXRlS2V5TmVnYXRlKFVpbnQ4QXJyYXkuZnJvbShwcml2YXRlS2V5KSkpO1xufTtcblxuLyoqXG4gKiBDb21wdXRlIHRoZSBpbnZlcnNlIG9mIGEgcHJpdmF0ZUtleSAobW9kdWxvIHRoZSBvcmRlciBvZiB0aGUgY3VydmUncyBiYXNlIHBvaW50KS5cbiAqIEBtZXRob2QgcHJpdmF0ZUtleU1vZEludmVyc2VcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBwcml2YXRlS2V5TW9kSW52ZXJzZSA9IGZ1bmN0aW9uIHByaXZhdGVLZXlNb2RJbnZlcnNlKHByaXZhdGVLZXkpIHtcbiAgaWYgKHByaXZhdGVLZXkubGVuZ3RoICE9PSAzMikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJpdmF0ZSBrZXkgbGVuZ3RoIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azF2My5wcml2YXRlS2V5TW9kSW52ZXJzZShVaW50OEFycmF5LmZyb20ocHJpdmF0ZUtleSkpKTtcbn07XG5cbi8qKlxuICogVHdlYWsgYSBwcml2YXRlS2V5IGJ5IGFkZGluZyB0d2VhayB0byBpdC5cbiAqIEBtZXRob2QgcHJpdmF0ZUtleVR3ZWFrQWRkXG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHJpdmF0ZUtleVxuICogQHBhcmFtIHtCdWZmZXJ9IHR3ZWFrXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBwcml2YXRlS2V5VHdlYWtBZGQgPSBmdW5jdGlvbiBwcml2YXRlS2V5VHdlYWtBZGQocHJpdmF0ZUtleSwgdHdlYWspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5wcml2YXRlS2V5VHdlYWtBZGQoVWludDhBcnJheS5mcm9tKHByaXZhdGVLZXkpLCB0d2VhaykpO1xufTtcblxuLyoqXG4gKiBUd2VhayBhIHByaXZhdGVLZXkgYnkgbXVsdGlwbHlpbmcgaXQgYnkgYSB0d2Vhay5cbiAqIEBtZXRob2QgcHJpdmF0ZUtleVR3ZWFrTXVsXG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHJpdmF0ZUtleVxuICogQHBhcmFtIHtCdWZmZXJ9IHR3ZWFrXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBwcml2YXRlS2V5VHdlYWtNdWwgPSBmdW5jdGlvbiBwcml2YXRlS2V5VHdlYWtNdWwocHJpdmF0ZUtleSwgdHdlYWspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5wcml2YXRlS2V5VHdlYWtNdWwoVWludDhBcnJheS5mcm9tKHByaXZhdGVLZXkpLCBVaW50OEFycmF5LmZyb20odHdlYWspKSk7XG59O1xuXG4vKipcbiAqIENvbXB1dGUgdGhlIHB1YmxpYyBrZXkgZm9yIGEgcHJpdmF0ZUtleS5cbiAqIEBtZXRob2QgcHVibGljS2V5Q3JlYXRlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHJpdmF0ZUtleVxuICogQHBhcmFtIHtib29sZWFufSBjb21wcmVzc2VkXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBwdWJsaWNLZXlDcmVhdGUgPSBmdW5jdGlvbiBwdWJsaWNLZXlDcmVhdGUocHJpdmF0ZUtleSwgY29tcHJlc3NlZCkge1xuICByZXR1cm4gQnVmZmVyLmZyb20oc2VjcDI1NmsxLnB1YmxpY0tleUNyZWF0ZShVaW50OEFycmF5LmZyb20ocHJpdmF0ZUtleSksIGNvbXByZXNzZWQpKTtcbn07XG5cbi8qKlxuICogQ29udmVydCBhIHB1YmxpY0tleSB0byBjb21wcmVzc2VkIG9yIHVuY29tcHJlc3NlZCBmb3JtLlxuICogQG1ldGhvZCBwdWJsaWNLZXlDb252ZXJ0XG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHVibGljS2V5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbXByZXNzZWRcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xudmFyIHB1YmxpY0tleUNvbnZlcnQgPSBmdW5jdGlvbiBwdWJsaWNLZXlDb252ZXJ0KHB1YmxpY0tleSwgY29tcHJlc3NlZCkge1xuICByZXR1cm4gQnVmZmVyLmZyb20oc2VjcDI1NmsxLnB1YmxpY0tleUNvbnZlcnQoVWludDhBcnJheS5mcm9tKHB1YmxpY0tleSksIGNvbXByZXNzZWQpKTtcbn07XG5cbi8qKlxuICogVmVyaWZ5IGFuIEVDRFNBIHB1YmxpY0tleS5cbiAqIEBtZXRob2QgcHVibGljS2V5VmVyaWZ5XG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHVibGljS2V5XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG52YXIgcHVibGljS2V5VmVyaWZ5ID0gZnVuY3Rpb24gcHVibGljS2V5VmVyaWZ5KHB1YmxpY0tleSkge1xuICAvLyBzZWNwMjU2azEgdjQgdmVyc2lvbiB0aHJvd3Mgd2hlbiBwdWJsaWNLZXkgbGVuZ3RoIGlzIG5vdCAzMyBvciA2NVxuICBpZiAocHVibGljS2V5Lmxlbmd0aCAhPT0gMzMgJiYgcHVibGljS2V5Lmxlbmd0aCAhPT0gNjUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gc2VjcDI1NmsxLnB1YmxpY0tleVZlcmlmeShVaW50OEFycmF5LmZyb20ocHVibGljS2V5KSk7XG59O1xuXG4vKipcbiAqIFR3ZWFrIGEgcHVibGljS2V5IGJ5IGFkZGluZyB0d2VhayB0aW1lcyB0aGUgZ2VuZXJhdG9yIHRvIGl0LlxuICogQG1ldGhvZCBwdWJsaWNLZXlUd2Vha0FkZFxuICogQHBhcmFtIHtCdWZmZXJ9IHB1YmxpY0tleVxuICogQHBhcmFtIHtCdWZmZXJ9IHR3ZWFrXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbXByZXNzZWRcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xudmFyIHB1YmxpY0tleVR3ZWFrQWRkID0gZnVuY3Rpb24gcHVibGljS2V5VHdlYWtBZGQocHVibGljS2V5LCB0d2VhaywgY29tcHJlc3NlZCkge1xuICByZXR1cm4gQnVmZmVyLmZyb20oc2VjcDI1NmsxLnB1YmxpY0tleVR3ZWFrQWRkKFVpbnQ4QXJyYXkuZnJvbShwdWJsaWNLZXkpLCBVaW50OEFycmF5LmZyb20odHdlYWspLCBjb21wcmVzc2VkKSk7XG59O1xuXG4vKipcbiAqIFR3ZWFrIGEgcHVibGljS2V5IGJ5IG11bHRpcGx5aW5nIGl0IGJ5IGEgdHdlYWsgdmFsdWVcbiAqIEBtZXRob2QgcHVibGljS2V5VHdlYWtNdWxcbiAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXlcbiAqIEBwYXJhbSB7QnVmZmVyfSB0d2Vha1xuICogQHBhcmFtIHtib29sZWFufSBjb21wcmVzc2VkXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBwdWJsaWNLZXlUd2Vha011bCA9IGZ1bmN0aW9uIHB1YmxpY0tleVR3ZWFrTXVsKHB1YmxpY0tleSwgdHdlYWssIGNvbXByZXNzZWQpIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5wdWJsaWNLZXlUd2Vha011bChVaW50OEFycmF5LmZyb20ocHVibGljS2V5KSwgVWludDhBcnJheS5mcm9tKHR3ZWFrKSwgY29tcHJlc3NlZCkpO1xufTtcblxuLyoqXG4gKiBBZGQgYSBnaXZlbiBwdWJsaWNLZXlzIHRvZ2V0aGVyLlxuICogQG1ldGhvZCBwdWJsaWNLZXlDb21iaW5lXG4gKiBAcGFyYW0ge0FycmF5PEJ1ZmZlcj59IHB1YmxpY0tleXNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY29tcHJlc3NlZFxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG52YXIgcHVibGljS2V5Q29tYmluZSA9IGZ1bmN0aW9uIHB1YmxpY0tleUNvbWJpbmUocHVibGljS2V5cywgY29tcHJlc3NlZCkge1xuICB2YXIga2V5cyA9IFtdO1xuICBwdWJsaWNLZXlzLmZvckVhY2goZnVuY3Rpb24gKHB1YmxpY0tleSkge1xuICAgIGtleXMucHVzaChVaW50OEFycmF5LmZyb20ocHVibGljS2V5KSk7XG4gIH0pO1xuXG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEucHVibGljS2V5Q29tYmluZShrZXlzLCBjb21wcmVzc2VkKSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgYSBzaWduYXR1cmUgdG8gYSBub3JtYWxpemVkIGxvd2VyLVMgZm9ybS5cbiAqIEBtZXRob2Qgc2lnbmF0dXJlTm9ybWFsaXplXG4gKiBAcGFyYW0ge0J1ZmZlcn0gc2lnbmF0dXJlXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBzaWduYXR1cmVOb3JtYWxpemUgPSBmdW5jdGlvbiBzaWduYXR1cmVOb3JtYWxpemUoc2lnbmF0dXJlKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuc2lnbmF0dXJlTm9ybWFsaXplKFVpbnQ4QXJyYXkuZnJvbShzaWduYXR1cmUpKSk7XG59O1xuXG4vKipcbiAqIFNlcmlhbGl6ZSBhbiBFQ0RTQSBzaWduYXR1cmUgaW4gREVSIGZvcm1hdC5cbiAqIEBtZXRob2Qgc2lnbmF0dXJlRXhwb3J0XG4gKiBAcGFyYW0ge0J1ZmZlcn0gc2lnbmF0dXJlXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBzaWduYXR1cmVFeHBvcnQgPSBmdW5jdGlvbiBzaWduYXR1cmVFeHBvcnQoc2lnbmF0dXJlKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuc2lnbmF0dXJlRXhwb3J0KFVpbnQ4QXJyYXkuZnJvbShzaWduYXR1cmUpKSk7XG59O1xuXG4vKipcbiAqIFBhcnNlIGEgREVSIEVDRFNBIHNpZ25hdHVyZSAoZm9sbG93IGJ5IFtCSVA2Nl0oaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW4vYmlwcy9ibG9iL21hc3Rlci9iaXAtMDA2Ni5tZWRpYXdpa2kpKS5cbiAqIEBtZXRob2Qgc2lnbmF0dXJlSW1wb3J0XG4gKiBAcGFyYW0ge0J1ZmZlcn0gc2lnbmF0dXJlXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBzaWduYXR1cmVJbXBvcnQgPSBmdW5jdGlvbiBzaWduYXR1cmVJbXBvcnQoc2lnbmF0dXJlKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuc2lnbmF0dXJlSW1wb3J0KFVpbnQ4QXJyYXkuZnJvbShzaWduYXR1cmUpKSk7XG59O1xuXG4vKipcbiAqIFBhcnNlIGEgREVSIEVDRFNBIHNpZ25hdHVyZSAobm90IGZvbGxvdyBieSBbQklQNjZdKGh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luL2JpcHMvYmxvYi9tYXN0ZXIvYmlwLTAwNjYubWVkaWF3aWtpKSkuXG4gKiBAbWV0aG9kIHNpZ25hdHVyZUltcG9ydExheFxuICogQHBhcmFtIHtCdWZmZXJ9IHNpZ25hdHVyZVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG52YXIgc2lnbmF0dXJlSW1wb3J0TGF4ID0gZnVuY3Rpb24gc2lnbmF0dXJlSW1wb3J0TGF4KHNpZ25hdHVyZSkge1xuICAvLyBzaWduYXR1cmVJbXBvcnRMYXggbWV0aG9kIGlzIG5vdCBwYXJ0IG9mIHNlY3AyNTZrMSB2NCBwYWNrYWdlXG4gIC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgb24gdjNcbiAgLy8gZW5zdXJlIHRoYXQgc2lnbmF0dXJlIGlzIGdyZWF0ZXIgdGhhbiAwXG4gIGlmIChzaWduYXR1cmUubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NpZ25hdHVyZSBsZW5ndGggaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgdmFyIHNpZ09iaiA9IGRlci5zaWduYXR1cmVJbXBvcnRMYXgoc2lnbmF0dXJlKTtcbiAgaWYgKHNpZ09iaiA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImNvdWxkbid0IHBhcnNlIERFUiBzaWduYXR1cmVcIik7XG4gIH1cblxuICByZXR1cm4gc2VjcDI1NmsxdjMuc2lnbmF0dXJlSW1wb3J0KHNpZ09iaik7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFQ0RTQSBzaWduYXR1cmUuIEFsd2F5cyByZXR1cm4gbG93LVMgc2lnbmF0dXJlLlxuICogQG1ldGhvZCBzaWduXG4gKiBAcGFyYW0ge0J1ZmZlcn0gbWVzc2FnZVxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBzaWduID0gZnVuY3Rpb24gc2lnbihtZXNzYWdlLCBwcml2YXRlS2V5LCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucyBzaG91bGQgYmUgYW4gT2JqZWN0Jyk7XG4gIH1cblxuICB2YXIgc2lnbk9wdGlvbnMgPSB2b2lkIDA7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBzaWduT3B0aW9ucyA9IHt9O1xuXG4gICAgaWYgKG9wdGlvbnMuZGF0YSA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucy5kYXRhIHNob3VsZCBiZSBhIEJ1ZmZlcicpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmRhdGEpIHtcbiAgICAgIC8vIHZhbGlkYXRlIG9wdGlvbi5kYXRhIGxlbmd0aFxuICAgICAgaWYgKG9wdGlvbnMuZGF0YS5sZW5ndGggIT09IDMyKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvcHRpb25zLmRhdGEgbGVuZ3RoIGlzIGludmFsaWQnKTtcbiAgICAgIH1cblxuICAgICAgc2lnbk9wdGlvbnMuZGF0YSA9IG5ldyBVaW50OEFycmF5KG9wdGlvbnMuZGF0YSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubm9uY2VmbiA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucy5ub25jZWZuIHNob3VsZCBiZSBhIEZ1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubm9uY2Vmbikge1xuICAgICAgLy8gIGNvbnZlcnQgb3B0aW9uLm5vbmNlZm4gZnVuY3Rpb24gc2lnbmF0dXJlXG4gICAgICBzaWduT3B0aW9ucy5ub25jZWZuID0gZnVuY3Rpb24gKG1lc3NhZ2UsIHByaXZhdGVLZXksIGFsZ28sIGRhdGEsIGF0dGVtcHQpIHtcbiAgICAgICAgdmFyIGJ1ZmZlckFsZ28gPSBhbGdvICE9IG51bGwgPyBCdWZmZXIuZnJvbShhbGdvKSA6IG51bGw7XG4gICAgICAgIHZhciBidWZmZXJEYXRhID0gZGF0YSAhPSBudWxsID8gQnVmZmVyLmZyb20oZGF0YSkgOiBudWxsO1xuXG4gICAgICAgIHZhciBidWZmZXIgPSBCdWZmZXIuZnJvbSgnJyk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubm9uY2Vmbikge1xuICAgICAgICAgIGJ1ZmZlciA9IG9wdGlvbnMubm9uY2VmbihCdWZmZXIuZnJvbShtZXNzYWdlKSwgQnVmZmVyLmZyb20ocHJpdmF0ZUtleSksIGJ1ZmZlckFsZ28sIGJ1ZmZlckRhdGEsIGF0dGVtcHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShidWZmZXIpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgc2lnID0gc2VjcDI1NmsxLmVjZHNhU2lnbihVaW50OEFycmF5LmZyb20obWVzc2FnZSksIFVpbnQ4QXJyYXkuZnJvbShwcml2YXRlS2V5KSwgc2lnbk9wdGlvbnMpO1xuXG4gIHJldHVybiB7XG4gICAgc2lnbmF0dXJlOiBCdWZmZXIuZnJvbShzaWcuc2lnbmF0dXJlKSxcbiAgICByZWNvdmVyeTogc2lnLnJlY2lkXG4gIH07XG59O1xuXG4vKipcbiAqIFZlcmlmeSBhbiBFQ0RTQSBzaWduYXR1cmUuXG4gKiBAbWV0aG9kIHZlcmlmeVxuICogQHBhcmFtIHtCdWZmZXJ9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7QnVmZmVyfSBzaWduYXR1cmVcbiAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXlcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnZhciB2ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSwgc2lnbmF0dXJlLCBwdWJsaWNLZXkpIHtcbiAgLy8gbm90ZTogc2VjcDI1NmsxIHY0IHZlcmlmeSBtZXRob2QgaGFzIGEgZGlmZmVyZW50IGFyZ3VtZW50IG9yZGVyXG4gIHJldHVybiBzZWNwMjU2azEuZWNkc2FWZXJpZnkoVWludDhBcnJheS5mcm9tKHNpZ25hdHVyZSksIFVpbnQ4QXJyYXkuZnJvbShtZXNzYWdlKSwgcHVibGljS2V5KTtcbn07XG5cbi8qKlxuICogUmVjb3ZlciBhbiBFQ0RTQSBwdWJsaWMga2V5IGZyb20gYSBzaWduYXR1cmUuXG4gKiBAbWV0aG9kIHJlY292ZXJcbiAqIEBwYXJhbSB7QnVmZmVyfSBtZXNzYWdlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gc2lnbmF0dXJlXG4gKiBAcGFyYW0ge051bWJlcn0gcmVjaWRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY29tcHJlc3NlZFxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG52YXIgcmVjb3ZlciA9IGZ1bmN0aW9uIHJlY292ZXIobWVzc2FnZSwgc2lnbmF0dXJlLCByZWNpZCwgY29tcHJlc3NlZCkge1xuICAvLyBub3RlOiBzZWNwMjU2azEgdjQgcmVjb3ZlciBtZXRob2QgaGFzIGEgZGlmZmVyZW50IGFyZ3VtZW50IG9yZGVyXG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuZWNkc2FSZWNvdmVyKFVpbnQ4QXJyYXkuZnJvbShzaWduYXR1cmUpLCByZWNpZCwgVWludDhBcnJheS5mcm9tKG1lc3NhZ2UpLCBjb21wcmVzc2VkKSk7XG59O1xuXG4vKipcbiAqIENvbXB1dGUgYW4gRUMgRGlmZmllLUhlbGxtYW4gc2VjcmV0IGFuZCBhcHBsaWVkIHNoYTI1NiB0byBjb21wcmVzc2VkIHB1YmxpYyBrZXkuXG4gKiBAbWV0aG9kIGVjZGhcbiAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXlcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBlY2RoID0gZnVuY3Rpb24gZWNkaChwdWJsaWNLZXksIHByaXZhdGVLZXkpIHtcbiAgLy8gbm90ZTogc2VjcDI1NmsxIHYzIGRvZXNuJ3QgYWxsb3cgb3B0aW9uYWwgcGFyYW1ldGVyXG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuZWNkaChVaW50OEFycmF5LmZyb20ocHVibGljS2V5KSwgVWludDhBcnJheS5mcm9tKHByaXZhdGVLZXkpLCB7fSkpO1xufTtcblxuLyoqXG4gKiBDb21wdXRlIGFuIEVDIERpZmZpZS1IZWxsbWFuIHNlY3JldCBhbmQgcmV0dXJuIHB1YmxpYyBrZXkgYXMgcmVzdWx0XG4gKiBAbWV0aG9kIGVjZGhVbnNhZmVcbiAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXlcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbXByZXNzZWRcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xudmFyIGVjZGhVbnNhZmUgPSBmdW5jdGlvbiBlY2RoVW5zYWZlKHB1YmxpY0tleSwgcHJpdmF0ZUtleSwgY29tcHJlc3NlZCkge1xuICAvLyBlY2RoVW5zYWZlIG1ldGhvZCBpcyBub3QgcGFydCBvZiBzZWNwMjU2azEgdjQgcGFja2FnZVxuICAvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIG9uIHYzXG4gIC8vIGVuc3VyZSB2YWxpZCBwdWJsaWNLZXkgbGVuZ3RoXG4gIGlmIChwdWJsaWNLZXkubGVuZ3RoICE9PSAzMyAmJiBwdWJsaWNLZXkubGVuZ3RoICE9PSA2NSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdwdWJsaWMga2V5IGxlbmd0aCBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICAvLyBlbnN1cmUgdmFsaWQgcHJpdmF0ZUtleSBsZW5ndGhcbiAgaWYgKHByaXZhdGVLZXkubGVuZ3RoICE9PSAzMikge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdwcml2YXRlIGtleSBsZW5ndGggaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMXYzLmVjZGhVbnNhZmUoVWludDhBcnJheS5mcm9tKHB1YmxpY0tleSksIFVpbnQ4QXJyYXkuZnJvbShwcml2YXRlS2V5KSwgY29tcHJlc3NlZCkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHByaXZhdGVLZXlWZXJpZnk6IHByaXZhdGVLZXlWZXJpZnksXG4gIHByaXZhdGVLZXlFeHBvcnQ6IHByaXZhdGVLZXlFeHBvcnQsXG4gIHByaXZhdGVLZXlJbXBvcnQ6IHByaXZhdGVLZXlJbXBvcnQsXG4gIHByaXZhdGVLZXlOZWdhdGU6IHByaXZhdGVLZXlOZWdhdGUsXG4gIHByaXZhdGVLZXlNb2RJbnZlcnNlOiBwcml2YXRlS2V5TW9kSW52ZXJzZSxcbiAgcHJpdmF0ZUtleVR3ZWFrQWRkOiBwcml2YXRlS2V5VHdlYWtBZGQsXG4gIHByaXZhdGVLZXlUd2Vha011bDogcHJpdmF0ZUtleVR3ZWFrTXVsLFxuXG4gIHB1YmxpY0tleUNyZWF0ZTogcHVibGljS2V5Q3JlYXRlLFxuICBwdWJsaWNLZXlDb252ZXJ0OiBwdWJsaWNLZXlDb252ZXJ0LFxuICBwdWJsaWNLZXlWZXJpZnk6IHB1YmxpY0tleVZlcmlmeSxcbiAgcHVibGljS2V5VHdlYWtBZGQ6IHB1YmxpY0tleVR3ZWFrQWRkLFxuICBwdWJsaWNLZXlUd2Vha011bDogcHVibGljS2V5VHdlYWtNdWwsXG4gIHB1YmxpY0tleUNvbWJpbmU6IHB1YmxpY0tleUNvbWJpbmUsXG5cbiAgc2lnbmF0dXJlTm9ybWFsaXplOiBzaWduYXR1cmVOb3JtYWxpemUsXG4gIHNpZ25hdHVyZUV4cG9ydDogc2lnbmF0dXJlRXhwb3J0LFxuICBzaWduYXR1cmVJbXBvcnQ6IHNpZ25hdHVyZUltcG9ydCxcbiAgc2lnbmF0dXJlSW1wb3J0TGF4OiBzaWduYXR1cmVJbXBvcnRMYXgsXG5cbiAgc2lnbjogc2lnbixcbiAgdmVyaWZ5OiB2ZXJpZnksXG4gIHJlY292ZXI6IHJlY292ZXIsXG5cbiAgZWNkaDogZWNkaCxcbiAgZWNkaFVuc2FmZTogZWNkaFVuc2FmZVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLy8gVGhpcyBmaWxlIGlzIGltcG9ydGVkIGZyb20gc2VjcDI1NmsxIHYzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vY3J5cHRvY29pbmpzL3NlY3AyNTZrMS1ub2RlL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcblxudmFyIEVDX1BSSVZLRVlfRVhQT1JUX0RFUl9DT01QUkVTU0VEID0gQnVmZmVyLmZyb20oW1xuLy8gYmVnaW5cbjB4MzAsIDB4ODEsIDB4ZDMsIDB4MDIsIDB4MDEsIDB4MDEsIDB4MDQsIDB4MjAsXG4vLyBwcml2YXRlIGtleVxuMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbi8vIG1pZGRsZVxuMHhhMCwgMHg4MSwgMHg4NSwgMHgzMCwgMHg4MSwgMHg4MiwgMHgwMiwgMHgwMSwgMHgwMSwgMHgzMCwgMHgyYywgMHgwNiwgMHgwNywgMHgyYSwgMHg4NiwgMHg0OCwgMHhjZSwgMHgzZCwgMHgwMSwgMHgwMSwgMHgwMiwgMHgyMSwgMHgwMCwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZSwgMHhmZiwgMHhmZiwgMHhmYywgMHgyZiwgMHgzMCwgMHgwNiwgMHgwNCwgMHgwMSwgMHgwMCwgMHgwNCwgMHgwMSwgMHgwNywgMHgwNCwgMHgyMSwgMHgwMiwgMHg3OSwgMHhiZSwgMHg2NiwgMHg3ZSwgMHhmOSwgMHhkYywgMHhiYiwgMHhhYywgMHg1NSwgMHhhMCwgMHg2MiwgMHg5NSwgMHhjZSwgMHg4NywgMHgwYiwgMHgwNywgMHgwMiwgMHg5YiwgMHhmYywgMHhkYiwgMHgyZCwgMHhjZSwgMHgyOCwgMHhkOSwgMHg1OSwgMHhmMiwgMHg4MSwgMHg1YiwgMHgxNiwgMHhmOCwgMHgxNywgMHg5OCwgMHgwMiwgMHgyMSwgMHgwMCwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZSwgMHhiYSwgMHhhZSwgMHhkYywgMHhlNiwgMHhhZiwgMHg0OCwgMHhhMCwgMHgzYiwgMHhiZiwgMHhkMiwgMHg1ZSwgMHg4YywgMHhkMCwgMHgzNiwgMHg0MSwgMHg0MSwgMHgwMiwgMHgwMSwgMHgwMSwgMHhhMSwgMHgyNCwgMHgwMywgMHgyMiwgMHgwMCxcbi8vIHB1YmxpYyBrZXlcbjB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdKTtcblxudmFyIEVDX1BSSVZLRVlfRVhQT1JUX0RFUl9VTkNPTVBSRVNTRUQgPSBCdWZmZXIuZnJvbShbXG4vLyBiZWdpblxuMHgzMCwgMHg4MiwgMHgwMSwgMHgxMywgMHgwMiwgMHgwMSwgMHgwMSwgMHgwNCwgMHgyMCxcbi8vIHByaXZhdGUga2V5XG4weDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuLy8gbWlkZGxlXG4weGEwLCAweDgxLCAweGE1LCAweDMwLCAweDgxLCAweGEyLCAweDAyLCAweDAxLCAweDAxLCAweDMwLCAweDJjLCAweDA2LCAweDA3LCAweDJhLCAweDg2LCAweDQ4LCAweGNlLCAweDNkLCAweDAxLCAweDAxLCAweDAyLCAweDIxLCAweDAwLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZlLCAweGZmLCAweGZmLCAweGZjLCAweDJmLCAweDMwLCAweDA2LCAweDA0LCAweDAxLCAweDAwLCAweDA0LCAweDAxLCAweDA3LCAweDA0LCAweDQxLCAweDA0LCAweDc5LCAweGJlLCAweDY2LCAweDdlLCAweGY5LCAweGRjLCAweGJiLCAweGFjLCAweDU1LCAweGEwLCAweDYyLCAweDk1LCAweGNlLCAweDg3LCAweDBiLCAweDA3LCAweDAyLCAweDliLCAweGZjLCAweGRiLCAweDJkLCAweGNlLCAweDI4LCAweGQ5LCAweDU5LCAweGYyLCAweDgxLCAweDViLCAweDE2LCAweGY4LCAweDE3LCAweDk4LCAweDQ4LCAweDNhLCAweGRhLCAweDc3LCAweDI2LCAweGEzLCAweGM0LCAweDY1LCAweDVkLCAweGE0LCAweGZiLCAweGZjLCAweDBlLCAweDExLCAweDA4LCAweGE4LCAweGZkLCAweDE3LCAweGI0LCAweDQ4LCAweGE2LCAweDg1LCAweDU0LCAweDE5LCAweDljLCAweDQ3LCAweGQwLCAweDhmLCAweGZiLCAweDEwLCAweGQ0LCAweGI4LCAweDAyLCAweDIxLCAweDAwLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZlLCAweGJhLCAweGFlLCAweGRjLCAweGU2LCAweGFmLCAweDQ4LCAweGEwLCAweDNiLCAweGJmLCAweGQyLCAweDVlLCAweDhjLCAweGQwLCAweDM2LCAweDQxLCAweDQxLCAweDAyLCAweDAxLCAweDAxLCAweGExLCAweDQ0LCAweDAzLCAweDQyLCAweDAwLFxuLy8gcHVibGljIGtleVxuMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF0pO1xuXG5leHBvcnRzLnByaXZhdGVLZXlFeHBvcnQgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSwgcHVibGljS2V5LCBjb21wcmVzc2VkKSB7XG4gIHZhciByZXN1bHQgPSBCdWZmZXIuZnJvbShjb21wcmVzc2VkID8gRUNfUFJJVktFWV9FWFBPUlRfREVSX0NPTVBSRVNTRUQgOiBFQ19QUklWS0VZX0VYUE9SVF9ERVJfVU5DT01QUkVTU0VEKTtcbiAgcHJpdmF0ZUtleS5jb3B5KHJlc3VsdCwgY29tcHJlc3NlZCA/IDggOiA5KTtcbiAgcHVibGljS2V5LmNvcHkocmVzdWx0LCBjb21wcmVzc2VkID8gMTgxIDogMjE0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydHMucHJpdmF0ZUtleUltcG9ydCA9IGZ1bmN0aW9uIChwcml2YXRlS2V5KSB7XG4gIHZhciBsZW5ndGggPSBwcml2YXRlS2V5Lmxlbmd0aDtcblxuICAvLyBzZXF1ZW5jZSBoZWFkZXJcbiAgdmFyIGluZGV4ID0gMDtcbiAgaWYgKGxlbmd0aCA8IGluZGV4ICsgMSB8fCBwcml2YXRlS2V5W2luZGV4XSAhPT0gMHgzMCkgcmV0dXJuIG51bGw7XG4gIGluZGV4ICs9IDE7XG5cbiAgLy8gc2VxdWVuY2UgbGVuZ3RoIGNvbnN0cnVjdG9yXG4gIGlmIChsZW5ndGggPCBpbmRleCArIDEgfHwgIShwcml2YXRlS2V5W2luZGV4XSAmIDB4ODApKSByZXR1cm4gbnVsbDtcblxuICB2YXIgbGVuYiA9IHByaXZhdGVLZXlbaW5kZXhdICYgMHg3ZjtcbiAgaW5kZXggKz0gMTtcbiAgaWYgKGxlbmIgPCAxIHx8IGxlbmIgPiAyKSByZXR1cm4gbnVsbDtcbiAgaWYgKGxlbmd0aCA8IGluZGV4ICsgbGVuYikgcmV0dXJuIG51bGw7XG5cbiAgLy8gc2VxdWVuY2UgbGVuZ3RoXG4gIHZhciBsZW4gPSBwcml2YXRlS2V5W2luZGV4ICsgbGVuYiAtIDFdIHwgKGxlbmIgPiAxID8gcHJpdmF0ZUtleVtpbmRleCArIGxlbmIgLSAyXSA8PCA4IDogMCk7XG4gIGluZGV4ICs9IGxlbmI7XG4gIGlmIChsZW5ndGggPCBpbmRleCArIGxlbikgcmV0dXJuIG51bGw7XG5cbiAgLy8gc2VxdWVuY2UgZWxlbWVudCAwOiB2ZXJzaW9uIG51bWJlciAoPTEpXG4gIGlmIChsZW5ndGggPCBpbmRleCArIDMgfHwgcHJpdmF0ZUtleVtpbmRleF0gIT09IDB4MDIgfHwgcHJpdmF0ZUtleVtpbmRleCArIDFdICE9PSAweDAxIHx8IHByaXZhdGVLZXlbaW5kZXggKyAyXSAhPT0gMHgwMSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGluZGV4ICs9IDM7XG5cbiAgLy8gc2VxdWVuY2UgZWxlbWVudCAxOiBvY3RldCBzdHJpbmcsIHVwIHRvIDMyIGJ5dGVzXG4gIGlmIChsZW5ndGggPCBpbmRleCArIDIgfHwgcHJpdmF0ZUtleVtpbmRleF0gIT09IDB4MDQgfHwgcHJpdmF0ZUtleVtpbmRleCArIDFdID4gMHgyMCB8fCBsZW5ndGggPCBpbmRleCArIDIgKyBwcml2YXRlS2V5W2luZGV4ICsgMV0pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBwcml2YXRlS2V5LnNsaWNlKGluZGV4ICsgMiwgaW5kZXggKyAyICsgcHJpdmF0ZUtleVtpbmRleCArIDFdKTtcbn07XG5cbmV4cG9ydHMuc2lnbmF0dXJlSW1wb3J0TGF4ID0gZnVuY3Rpb24gKHNpZ25hdHVyZSkge1xuICB2YXIgciA9IEJ1ZmZlci5hbGxvYygzMiwgMCk7XG4gIHZhciBzID0gQnVmZmVyLmFsbG9jKDMyLCAwKTtcblxuICB2YXIgbGVuZ3RoID0gc2lnbmF0dXJlLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcblxuICAvLyBzZXF1ZW5jZSB0YWcgYnl0ZVxuICBpZiAoc2lnbmF0dXJlW2luZGV4KytdICE9PSAweDMwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBzZXF1ZW5jZSBsZW5ndGggYnl0ZVxuICB2YXIgbGVuYnl0ZSA9IHNpZ25hdHVyZVtpbmRleCsrXTtcbiAgaWYgKGxlbmJ5dGUgJiAweDgwKSB7XG4gICAgaW5kZXggKz0gbGVuYnl0ZSAtIDB4ODA7XG4gICAgaWYgKGluZGV4ID4gbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvLyBzZXF1ZW5jZSB0YWcgYnl0ZSBmb3IgclxuICBpZiAoc2lnbmF0dXJlW2luZGV4KytdICE9PSAweDAyKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBsZW5ndGggZm9yIHJcbiAgdmFyIHJsZW4gPSBzaWduYXR1cmVbaW5kZXgrK107XG4gIGlmIChybGVuICYgMHg4MCkge1xuICAgIGxlbmJ5dGUgPSBybGVuIC0gMHg4MDtcbiAgICBpZiAoaW5kZXggKyBsZW5ieXRlID4gbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZm9yICg7IGxlbmJ5dGUgPiAwICYmIHNpZ25hdHVyZVtpbmRleF0gPT09IDB4MDA7IGluZGV4ICs9IDEsIGxlbmJ5dGUgLT0gMSkge31cbiAgICBmb3IgKHJsZW4gPSAwOyBsZW5ieXRlID4gMDsgaW5kZXggKz0gMSwgbGVuYnl0ZSAtPSAxKSB7XG4gICAgICBybGVuID0gKHJsZW4gPDwgOCkgKyBzaWduYXR1cmVbaW5kZXhdO1xuICAgIH1cbiAgfVxuICBpZiAocmxlbiA+IGxlbmd0aCAtIGluZGV4KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIHJpbmRleCA9IGluZGV4O1xuICBpbmRleCArPSBybGVuO1xuXG4gIC8vIHNlcXVlbmNlIHRhZyBieXRlIGZvciBzXG4gIGlmIChzaWduYXR1cmVbaW5kZXgrK10gIT09IDB4MDIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIGxlbmd0aCBmb3Igc1xuICB2YXIgc2xlbiA9IHNpZ25hdHVyZVtpbmRleCsrXTtcbiAgaWYgKHNsZW4gJiAweDgwKSB7XG4gICAgbGVuYnl0ZSA9IHNsZW4gLSAweDgwO1xuICAgIGlmIChpbmRleCArIGxlbmJ5dGUgPiBsZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmb3IgKDsgbGVuYnl0ZSA+IDAgJiYgc2lnbmF0dXJlW2luZGV4XSA9PT0gMHgwMDsgaW5kZXggKz0gMSwgbGVuYnl0ZSAtPSAxKSB7fVxuICAgIGZvciAoc2xlbiA9IDA7IGxlbmJ5dGUgPiAwOyBpbmRleCArPSAxLCBsZW5ieXRlIC09IDEpIHtcbiAgICAgIHNsZW4gPSAoc2xlbiA8PCA4KSArIHNpZ25hdHVyZVtpbmRleF07XG4gICAgfVxuICB9XG4gIGlmIChzbGVuID4gbGVuZ3RoIC0gaW5kZXgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgc2luZGV4ID0gaW5kZXg7XG4gIGluZGV4ICs9IHNsZW47XG5cbiAgLy8gaWdub3JlIGxlYWRpbmcgemVyb3MgaW4gclxuICBmb3IgKDsgcmxlbiA+IDAgJiYgc2lnbmF0dXJlW3JpbmRleF0gPT09IDB4MDA7IHJsZW4gLT0gMSwgcmluZGV4ICs9IDEpIHt9XG4gIC8vIGNvcHkgciB2YWx1ZVxuICBpZiAocmxlbiA+IDMyKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIHJ2YWx1ZSA9IHNpZ25hdHVyZS5zbGljZShyaW5kZXgsIHJpbmRleCArIHJsZW4pO1xuICBydmFsdWUuY29weShyLCAzMiAtIHJ2YWx1ZS5sZW5ndGgpO1xuXG4gIC8vIGlnbm9yZSBsZWFkaW5nIHplcm9zIGluIHNcbiAgZm9yICg7IHNsZW4gPiAwICYmIHNpZ25hdHVyZVtzaW5kZXhdID09PSAweDAwOyBzbGVuIC09IDEsIHNpbmRleCArPSAxKSB7fVxuICAvLyBjb3B5IHMgdmFsdWVcbiAgaWYgKHNsZW4gPiAzMikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBzdmFsdWUgPSBzaWduYXR1cmUuc2xpY2Uoc2luZGV4LCBzaW5kZXggKyBzbGVuKTtcbiAgc3ZhbHVlLmNvcHkocywgMzIgLSBzdmFsdWUubGVuZ3RoKTtcblxuICByZXR1cm4geyByOiByLCBzOiBzIH07XG59OyIsIid1c2Ugc3RyaWN0JztcblxuLy8gVGhpcyBmaWxlIGlzIGltcG9ydGVkIGZyb20gc2VjcDI1NmsxIHYzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vY3J5cHRvY29pbmpzL3NlY3AyNTZrMS1ub2RlL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBFQyA9IHJlcXVpcmUoJ2VsbGlwdGljJykuZWM7XG5cbnZhciBlYyA9IG5ldyBFQygnc2VjcDI1NmsxJyk7XG52YXIgZWNwYXJhbXMgPSBlYy5jdXJ2ZTtcblxuZXhwb3J0cy5wcml2YXRlS2V5RXhwb3J0ID0gZnVuY3Rpb24gKHByaXZhdGVLZXksIGNvbXByZXNzZWQpIHtcbiAgdmFyIGQgPSBuZXcgQk4ocHJpdmF0ZUtleSk7XG4gIGlmIChkLnVjbXAoZWNwYXJhbXMubikgPj0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY291bGRuXFwndCBleHBvcnQgdG8gREVSIGZvcm1hdCcpO1xuICB9XG5cbiAgdmFyIHBvaW50ID0gZWMuZy5tdWwoZCk7XG4gIHJldHVybiB0b1B1YmxpY0tleShwb2ludC5nZXRYKCksIHBvaW50LmdldFkoKSwgY29tcHJlc3NlZCk7XG59O1xuXG5leHBvcnRzLnByaXZhdGVLZXlNb2RJbnZlcnNlID0gZnVuY3Rpb24gKHByaXZhdGVLZXkpIHtcbiAgdmFyIGJuID0gbmV3IEJOKHByaXZhdGVLZXkpO1xuICBpZiAoYm4udWNtcChlY3BhcmFtcy5uKSA+PSAwIHx8IGJuLmlzWmVybygpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcml2YXRlIGtleSByYW5nZSBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICByZXR1cm4gYm4uaW52bShlY3BhcmFtcy5uKS50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDMyKTtcbn07XG5cbmV4cG9ydHMuc2lnbmF0dXJlSW1wb3J0ID0gZnVuY3Rpb24gKHNpZ09iaikge1xuICB2YXIgciA9IG5ldyBCTihzaWdPYmoucik7XG4gIGlmIChyLnVjbXAoZWNwYXJhbXMubikgPj0gMCkge1xuICAgIHIgPSBuZXcgQk4oMCk7XG4gIH1cblxuICB2YXIgcyA9IG5ldyBCTihzaWdPYmoucyk7XG4gIGlmIChzLnVjbXAoZWNwYXJhbXMubikgPj0gMCkge1xuICAgIHMgPSBuZXcgQk4oMCk7XG4gIH1cblxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChbci50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDMyKSwgcy50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDMyKV0pO1xufTtcblxuZXhwb3J0cy5lY2RoVW5zYWZlID0gZnVuY3Rpb24gKHB1YmxpY0tleSwgcHJpdmF0ZUtleSwgY29tcHJlc3NlZCkge1xuICB2YXIgcG9pbnQgPSBlYy5rZXlGcm9tUHVibGljKHB1YmxpY0tleSk7XG5cbiAgdmFyIHNjYWxhciA9IG5ldyBCTihwcml2YXRlS2V5KTtcbiAgaWYgKHNjYWxhci51Y21wKGVjcGFyYW1zLm4pID49IDAgfHwgc2NhbGFyLmlzWmVybygpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzY2FsYXIgd2FzIGludmFsaWQgKHplcm8gb3Igb3ZlcmZsb3cpJyk7XG4gIH1cblxuICB2YXIgc2hhcmVkID0gcG9pbnQucHViLm11bChzY2FsYXIpO1xuICByZXR1cm4gdG9QdWJsaWNLZXkoc2hhcmVkLmdldFgoKSwgc2hhcmVkLmdldFkoKSwgY29tcHJlc3NlZCk7XG59O1xuXG52YXIgdG9QdWJsaWNLZXkgPSBmdW5jdGlvbiB0b1B1YmxpY0tleSh4LCB5LCBjb21wcmVzc2VkKSB7XG4gIHZhciBwdWJsaWNLZXkgPSB2b2lkIDA7XG5cbiAgaWYgKGNvbXByZXNzZWQpIHtcbiAgICBwdWJsaWNLZXkgPSBCdWZmZXIuYWxsb2MoMzMpO1xuICAgIHB1YmxpY0tleVswXSA9IHkuaXNPZGQoKSA/IDB4MDMgOiAweDAyO1xuICAgIHgudG9BcnJheUxpa2UoQnVmZmVyLCAnYmUnLCAzMikuY29weShwdWJsaWNLZXksIDEpO1xuICB9IGVsc2Uge1xuICAgIHB1YmxpY0tleSA9IEJ1ZmZlci5hbGxvYyg2NSk7XG4gICAgcHVibGljS2V5WzBdID0gMHgwNDtcbiAgICB4LnRvQXJyYXlMaWtlKEJ1ZmZlciwgJ2JlJywgMzIpLmNvcHkocHVibGljS2V5LCAxKTtcbiAgICB5LnRvQXJyYXlMaWtlKEJ1ZmZlciwgJ2JlJywgMzIpLmNvcHkocHVibGljS2V5LCAzMyk7XG4gIH1cblxuICByZXR1cm4gcHVibGljS2V5O1xufTsiLCJjb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbmNvbnN0IGluaGVyaXRzID0gcmVxdWlyZSgndXRpbCcpLmluaGVyaXRzXG5jb25zdCBldGhVdGlsID0gcmVxdWlyZSgnZXRoZXJldW1qcy11dGlsJylcbmNvbnN0IEV0aEJsb2NrVHJhY2tlciA9IHJlcXVpcmUoJ2V0aC1ibG9jay10cmFja2VyJylcbmNvbnN0IG1hcCA9IHJlcXVpcmUoJ2FzeW5jL21hcCcpXG5jb25zdCBlYWNoU2VyaWVzID0gcmVxdWlyZSgnYXN5bmMvZWFjaFNlcmllcycpXG5jb25zdCBTdG9wbGlnaHQgPSByZXF1aXJlKCcuL3V0aWwvc3RvcGxpZ2h0LmpzJylcbmNvbnN0IGNhY2hlVXRpbHMgPSByZXF1aXJlKCcuL3V0aWwvcnBjLWNhY2hlLXV0aWxzLmpzJylcbmNvbnN0IGNyZWF0ZVBheWxvYWQgPSByZXF1aXJlKCcuL3V0aWwvY3JlYXRlLXBheWxvYWQuanMnKVxuY29uc3Qgbm9vcCA9IGZ1bmN0aW9uKCl7fVxuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYjNQcm92aWRlckVuZ2luZVxuXG5cbmluaGVyaXRzKFdlYjNQcm92aWRlckVuZ2luZSwgRXZlbnRFbWl0dGVyKVxuXG5mdW5jdGlvbiBXZWIzUHJvdmlkZXJFbmdpbmUob3B0cykge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICBFdmVudEVtaXR0ZXIuY2FsbChzZWxmKVxuICBzZWxmLnNldE1heExpc3RlbmVycygzMClcbiAgLy8gcGFyc2Ugb3B0aW9uc1xuICBvcHRzID0gb3B0cyB8fCB7fVxuXG4gIC8vIGJsb2NrIHBvbGxpbmdcbiAgY29uc3QgZGlyZWN0UHJvdmlkZXIgPSB7IHNlbmRBc3luYzogc2VsZi5faGFuZGxlQXN5bmMuYmluZChzZWxmKSB9XG4gIGNvbnN0IGJsb2NrVHJhY2tlclByb3ZpZGVyID0gb3B0cy5ibG9ja1RyYWNrZXJQcm92aWRlciB8fCBkaXJlY3RQcm92aWRlclxuICBzZWxmLl9ibG9ja1RyYWNrZXIgPSBvcHRzLmJsb2NrVHJhY2tlciB8fCBuZXcgRXRoQmxvY2tUcmFja2VyKHtcbiAgICBwcm92aWRlcjogYmxvY2tUcmFja2VyUHJvdmlkZXIsXG4gICAgcG9sbGluZ0ludGVydmFsOiBvcHRzLnBvbGxpbmdJbnRlcnZhbCB8fCA0MDAwLFxuICAgIHNldFNraXBDYWNoZUZsYWc6IHRydWUsXG4gIH0pXG5cbiAgLy8gc2V0IGluaXRpYWxpemF0aW9uIGJsb2NrZXJcbiAgc2VsZi5fcmVhZHkgPSBuZXcgU3RvcGxpZ2h0KClcblxuICAvLyBsb2NhbCBzdGF0ZVxuICBzZWxmLmN1cnJlbnRCbG9jayA9IG51bGxcbiAgc2VsZi5fcHJvdmlkZXJzID0gW11cbn1cblxuLy8gcHVibGljXG5cbldlYjNQcm92aWRlckVuZ2luZS5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbihjYiA9IG5vb3Ape1xuICBjb25zdCBzZWxmID0gdGhpc1xuXG4gIC8vIHRyaWdnZXIgc3RhcnRcbiAgc2VsZi5fcmVhZHkuZ28oKVxuXG4gIC8vIG9uIG5ldyBibG9jaywgcmVxdWVzdCBibG9jayBib2R5IGFuZCBlbWl0IGFzIGV2ZW50c1xuICBzZWxmLl9ibG9ja1RyYWNrZXIub24oJ2xhdGVzdCcsIChibG9ja051bWJlcikgPT4ge1xuICAgIC8vIGdldCBibG9jayBib2R5XG4gICAgc2VsZi5fZ2V0QmxvY2tCeU51bWJlcldpdGhSZXRyeShibG9ja051bWJlciwgKGVyciwgYmxvY2spID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGVycilcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAoIWJsb2NrKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGJsb2NrKVxuICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgYmxvY2tcIikpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgY29uc3QgYnVmZmVyQmxvY2sgPSB0b0J1ZmZlckJsb2NrKGJsb2NrKVxuICAgICAgLy8gc2V0IGN1cnJlbnQgKyBlbWl0IFwiYmxvY2tcIiBldmVudFxuICAgICAgc2VsZi5fc2V0Q3VycmVudEJsb2NrKGJ1ZmZlckJsb2NrKVxuICAgICAgLy8gZW1pdCBvdGhlciBldmVudHNcbiAgICAgIHNlbGYuZW1pdCgncmF3QmxvY2snLCBibG9jaylcbiAgICAgIHNlbGYuZW1pdCgnbGF0ZXN0JywgYmxvY2spXG4gICAgfSlcbiAgfSlcblxuICAvLyBmb3J3YXJkIG90aGVyIGV2ZW50c1xuICBzZWxmLl9ibG9ja1RyYWNrZXIub24oJ3N5bmMnLCBzZWxmLmVtaXQuYmluZChzZWxmLCAnc3luYycpKVxuICBzZWxmLl9ibG9ja1RyYWNrZXIub24oJ2Vycm9yJywgc2VsZi5lbWl0LmJpbmQoc2VsZiwgJ2Vycm9yJykpXG5cbiAgLy8gdXBkYXRlIHN0YXRlXG4gIHNlbGYuX3J1bm5pbmcgPSB0cnVlXG4gIC8vIHNpZ25hbCB0aGF0IHdlIHN0YXJ0ZWRcbiAgc2VsZi5lbWl0KCdzdGFydCcpXG59XG5cbldlYjNQcm92aWRlckVuZ2luZS5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCl7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIC8vIHN0b3AgYmxvY2sgcG9sbGluZyBieSByZW1vdmluZyBldmVudCBsaXN0ZW5lcnNcbiAgc2VsZi5fYmxvY2tUcmFja2VyLnJlbW92ZUFsbExpc3RlbmVycygpXG4gIC8vIHVwZGF0ZSBzdGF0ZVxuICBzZWxmLl9ydW5uaW5nID0gZmFsc2VcbiAgLy8gc2lnbmFsIHRoYXQgd2Ugc3RvcHBlZFxuICBzZWxmLmVtaXQoJ3N0b3AnKVxufVxuXG5XZWIzUHJvdmlkZXJFbmdpbmUucHJvdG90eXBlLmlzUnVubmluZyA9IGZ1bmN0aW9uKCl7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHJldHVybiBzZWxmLl9ydW5uaW5nXG59XG5cbldlYjNQcm92aWRlckVuZ2luZS5wcm90b3R5cGUuYWRkUHJvdmlkZXIgPSBmdW5jdGlvbihzb3VyY2UsIGluZGV4KXtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ251bWJlcicpIHtcbiAgICBzZWxmLl9wcm92aWRlcnMuc3BsaWNlKGluZGV4LCAwLCBzb3VyY2UpXG4gIH0gZWxzZSB7XG4gICAgc2VsZi5fcHJvdmlkZXJzLnB1c2goc291cmNlKVxuICB9XG4gIHNvdXJjZS5zZXRFbmdpbmUodGhpcylcbn1cblxuV2ViM1Byb3ZpZGVyRW5naW5lLnByb3RvdHlwZS5yZW1vdmVQcm92aWRlciA9IGZ1bmN0aW9uKHNvdXJjZSl7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIGNvbnN0IGluZGV4ID0gc2VsZi5fcHJvdmlkZXJzLmluZGV4T2Yoc291cmNlKVxuICBpZiAoaW5kZXggPCAwKSB0aHJvdyBuZXcgRXJyb3IoJ1Byb3ZpZGVyIG5vdCBmb3VuZC4nKVxuICBzZWxmLl9wcm92aWRlcnMuc3BsaWNlKGluZGV4LCAxKVxufVxuXG5XZWIzUHJvdmlkZXJFbmdpbmUucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbihwYXlsb2FkKXtcbiAgdGhyb3cgbmV3IEVycm9yKCdXZWIzUHJvdmlkZXJFbmdpbmUgZG9lcyBub3Qgc3VwcG9ydCBzeW5jaHJvbm91cyByZXF1ZXN0cy4nKVxufVxuXG5XZWIzUHJvdmlkZXJFbmdpbmUucHJvdG90eXBlLnNlbmRBc3luYyA9IGZ1bmN0aW9uKHBheWxvYWQsIGNiKXtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgc2VsZi5fcmVhZHkuYXdhaXQoZnVuY3Rpb24oKXtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHBheWxvYWQpKSB7XG4gICAgICAvLyBoYW5kbGUgYmF0Y2hcbiAgICAgIG1hcChwYXlsb2FkLCBzZWxmLl9oYW5kbGVBc3luYy5iaW5kKHNlbGYpLCBjYilcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaGFuZGxlIHNpbmdsZVxuICAgICAgc2VsZi5faGFuZGxlQXN5bmMocGF5bG9hZCwgY2IpXG4gICAgfVxuXG4gIH0pXG59XG5cbi8vIHByaXZhdGVcblxuV2ViM1Byb3ZpZGVyRW5naW5lLnByb3RvdHlwZS5fZ2V0QmxvY2tCeU51bWJlcldpdGhSZXRyeSA9IGZ1bmN0aW9uKGJsb2NrTnVtYmVyLCBjYikge1xuICBjb25zdCBzZWxmID0gdGhpc1xuXG4gIGxldCByZXRyaWVzUmVtYWluaW5nID0gNVxuXG4gIGF0dGVtcHRSZXF1ZXN0KClcbiAgcmV0dXJuXG5cbiAgZnVuY3Rpb24gYXR0ZW1wdFJlcXVlc3QgKCkge1xuICAgIHNlbGYuX2dldEJsb2NrQnlOdW1iZXIoYmxvY2tOdW1iZXIsIGFmdGVyUmVxdWVzdClcbiAgfVxuXG4gIGZ1bmN0aW9uIGFmdGVyUmVxdWVzdCAoZXJyLCBibG9jaykge1xuICAgIC8vIGFub21hbG91cyBlcnJvciBvY2N1cnJlZFxuICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpXG4gICAgLy8gYmxvY2sgbm90IHJlYWR5IHlldFxuICAgIGlmICghYmxvY2spIHtcbiAgICAgIGlmIChyZXRyaWVzUmVtYWluaW5nID4gMCkge1xuICAgICAgICAvLyB3YWl0IDFzIHRoZW4gdHJ5IGFnYWluXG4gICAgICAgIHJldHJpZXNSZW1haW5pbmctLVxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBhdHRlbXB0UmVxdWVzdCgpXG4gICAgICAgIH0sIDEwMDApXG4gICAgICAgIHJldHVyblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZ2l2ZSB1cCwgcmV0dXJuIGEgbnVsbCBibG9ja1xuICAgICAgICBjYihudWxsLCBudWxsKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gb3RoZXJ3aXNlIHJldHVybiByZXN1bHRcbiAgICBjYihudWxsLCBibG9jaylcbiAgICByZXR1cm5cbiAgfVxufVxuXG5cbldlYjNQcm92aWRlckVuZ2luZS5wcm90b3R5cGUuX2dldEJsb2NrQnlOdW1iZXIgPSBmdW5jdGlvbihibG9ja051bWJlciwgY2IpIHtcbiAgY29uc3QgcmVxID0gY3JlYXRlUGF5bG9hZCh7IG1ldGhvZDogJ2V0aF9nZXRCbG9ja0J5TnVtYmVyJywgcGFyYW1zOiBbYmxvY2tOdW1iZXIsIGZhbHNlXSwgc2tpcENhY2hlOiB0cnVlIH0pXG4gIHRoaXMuX2hhbmRsZUFzeW5jKHJlcSwgKGVyciwgcmVzKSA9PiB7XG4gICAgaWYgKGVycikgcmV0dXJuIGNiKGVycilcbiAgICByZXR1cm4gY2IobnVsbCwgcmVzLnJlc3VsdClcbiAgfSlcbn1cblxuV2ViM1Byb3ZpZGVyRW5naW5lLnByb3RvdHlwZS5faGFuZGxlQXN5bmMgPSBmdW5jdGlvbihwYXlsb2FkLCBmaW5pc2hlZCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIGN1cnJlbnRQcm92aWRlciA9IC0xXG4gIHZhciByZXN1bHQgPSBudWxsXG4gIHZhciBlcnJvciA9IG51bGxcblxuICB2YXIgc3RhY2sgPSBbXVxuXG4gIG5leHQoKVxuXG4gIGZ1bmN0aW9uIG5leHQoYWZ0ZXIpIHtcbiAgICBjdXJyZW50UHJvdmlkZXIgKz0gMVxuICAgIHN0YWNrLnVuc2hpZnQoYWZ0ZXIpXG5cbiAgICAvLyBCdWJibGVkIGRvd24gYXMgZmFyIGFzIHdlIGNvdWxkIGdvLCBhbmQgdGhlIHJlcXVlc3Qgd2Fzbid0XG4gICAgLy8gaGFuZGxlZC4gUmV0dXJuIGFuIGVycm9yLlxuICAgIGlmIChjdXJyZW50UHJvdmlkZXIgPj0gc2VsZi5fcHJvdmlkZXJzLmxlbmd0aCkge1xuICAgICAgZW5kKG5ldyBFcnJvcignUmVxdWVzdCBmb3IgbWV0aG9kIFwiJyArIHBheWxvYWQubWV0aG9kICsgJ1wiIG5vdCBoYW5kbGVkIGJ5IGFueSBzdWJwcm92aWRlci4gUGxlYXNlIGNoZWNrIHlvdXIgc3VicHJvdmlkZXIgY29uZmlndXJhdGlvbiB0byBlbnN1cmUgdGhpcyBtZXRob2QgaXMgaGFuZGxlZC4nKSlcbiAgICB9IGVsc2Uge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHByb3ZpZGVyID0gc2VsZi5fcHJvdmlkZXJzW2N1cnJlbnRQcm92aWRlcl1cbiAgICAgICAgcHJvdmlkZXIuaGFuZGxlUmVxdWVzdChwYXlsb2FkLCBuZXh0LCBlbmQpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGVuZChlKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVuZChfZXJyb3IsIF9yZXN1bHQpIHtcbiAgICBlcnJvciA9IF9lcnJvclxuICAgIHJlc3VsdCA9IF9yZXN1bHRcblxuICAgIGVhY2hTZXJpZXMoc3RhY2ssIGZ1bmN0aW9uKGZuLCBjYWxsYmFjaykge1xuXG4gICAgICBpZiAoZm4pIHtcbiAgICAgICAgZm4oZXJyb3IsIHJlc3VsdCwgY2FsbGJhY2spXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjaygpXG4gICAgICB9XG4gICAgfSwgZnVuY3Rpb24oKSB7XG5cbiAgICAgIHZhciByZXN1bHRPYmogPSB7XG4gICAgICAgIGlkOiBwYXlsb2FkLmlkLFxuICAgICAgICBqc29ucnBjOiBwYXlsb2FkLmpzb25ycGMsXG4gICAgICAgIHJlc3VsdDogcmVzdWx0XG4gICAgICB9XG5cbiAgICAgIGlmIChlcnJvciAhPSBudWxsKSB7XG4gICAgICAgIHJlc3VsdE9iai5lcnJvciA9IHtcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvci5zdGFjayB8fCBlcnJvci5tZXNzYWdlIHx8IGVycm9yLFxuICAgICAgICAgIGNvZGU6IC0zMjAwMFxuICAgICAgICB9XG4gICAgICAgIC8vIHJlc3BvbmQgd2l0aCBib3RoIGVycm9yIGZvcm1hdHNcbiAgICAgICAgZmluaXNoZWQoZXJyb3IsIHJlc3VsdE9iailcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpbmlzaGVkKG51bGwsIHJlc3VsdE9iailcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbi8vXG4vLyBmcm9tIHJlbW90ZS1kYXRhXG4vL1xuXG5XZWIzUHJvdmlkZXJFbmdpbmUucHJvdG90eXBlLl9zZXRDdXJyZW50QmxvY2sgPSBmdW5jdGlvbihibG9jayl7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHNlbGYuY3VycmVudEJsb2NrID0gYmxvY2tcbiAgc2VsZi5lbWl0KCdibG9jaycsIGJsb2NrKVxufVxuXG4vLyB1dGlsXG5cbmZ1bmN0aW9uIHRvQnVmZmVyQmxvY2sgKGpzb25CbG9jaykge1xuICByZXR1cm4ge1xuICAgIG51bWJlcjogICAgICAgICAgIGV0aFV0aWwudG9CdWZmZXIoanNvbkJsb2NrLm51bWJlciksXG4gICAgaGFzaDogICAgICAgICAgICAgZXRoVXRpbC50b0J1ZmZlcihqc29uQmxvY2suaGFzaCksXG4gICAgcGFyZW50SGFzaDogICAgICAgZXRoVXRpbC50b0J1ZmZlcihqc29uQmxvY2sucGFyZW50SGFzaCksXG4gICAgbm9uY2U6ICAgICAgICAgICAgZXRoVXRpbC50b0J1ZmZlcihqc29uQmxvY2subm9uY2UpLFxuICAgIG1peEhhc2g6ICAgICAgICAgIGV0aFV0aWwudG9CdWZmZXIoanNvbkJsb2NrLm1peEhhc2gpLFxuICAgIHNoYTNVbmNsZXM6ICAgICAgIGV0aFV0aWwudG9CdWZmZXIoanNvbkJsb2NrLnNoYTNVbmNsZXMpLFxuICAgIGxvZ3NCbG9vbTogICAgICAgIGV0aFV0aWwudG9CdWZmZXIoanNvbkJsb2NrLmxvZ3NCbG9vbSksXG4gICAgdHJhbnNhY3Rpb25zUm9vdDogZXRoVXRpbC50b0J1ZmZlcihqc29uQmxvY2sudHJhbnNhY3Rpb25zUm9vdCksXG4gICAgc3RhdGVSb290OiAgICAgICAgZXRoVXRpbC50b0J1ZmZlcihqc29uQmxvY2suc3RhdGVSb290KSxcbiAgICByZWNlaXB0c1Jvb3Q6ICAgICBldGhVdGlsLnRvQnVmZmVyKGpzb25CbG9jay5yZWNlaXB0Um9vdCB8fCBqc29uQmxvY2sucmVjZWlwdHNSb290KSxcbiAgICBtaW5lcjogICAgICAgICAgICBldGhVdGlsLnRvQnVmZmVyKGpzb25CbG9jay5taW5lciksXG4gICAgZGlmZmljdWx0eTogICAgICAgZXRoVXRpbC50b0J1ZmZlcihqc29uQmxvY2suZGlmZmljdWx0eSksXG4gICAgdG90YWxEaWZmaWN1bHR5OiAgZXRoVXRpbC50b0J1ZmZlcihqc29uQmxvY2sudG90YWxEaWZmaWN1bHR5KSxcbiAgICBzaXplOiAgICAgICAgICAgICBldGhVdGlsLnRvQnVmZmVyKGpzb25CbG9jay5zaXplKSxcbiAgICBleHRyYURhdGE6ICAgICAgICBldGhVdGlsLnRvQnVmZmVyKGpzb25CbG9jay5leHRyYURhdGEpLFxuICAgIGdhc0xpbWl0OiAgICAgICAgIGV0aFV0aWwudG9CdWZmZXIoanNvbkJsb2NrLmdhc0xpbWl0KSxcbiAgICBnYXNVc2VkOiAgICAgICAgICBldGhVdGlsLnRvQnVmZmVyKGpzb25CbG9jay5nYXNVc2VkKSxcbiAgICB0aW1lc3RhbXA6ICAgICAgICBldGhVdGlsLnRvQnVmZmVyKGpzb25CbG9jay50aW1lc3RhbXApLFxuICAgIHRyYW5zYWN0aW9uczogICAgIGpzb25CbG9jay50cmFuc2FjdGlvbnMsXG4gIH1cbn1cbiIsImNvbnN0IFByb3ZpZGVyU3VicHJvdmlkZXIgPSByZXF1aXJlKCcuL2pzb24tcnBjLWVuZ2luZS1taWRkbGV3YXJlJylcbmNvbnN0IGNyZWF0ZUJsb2NrQ2FjaGVNaWRkbGV3YXJlID0gcmVxdWlyZSgnZXRoLWpzb24tcnBjLW1pZGRsZXdhcmUvYmxvY2stY2FjaGUnKVxuXG5jbGFzcyBCbG9ja0NhY2hlU3VicHJvdmlkZXIgZXh0ZW5kcyBQcm92aWRlclN1YnByb3ZpZGVyIHtcbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKCh7IGJsb2NrVHJhY2tlciB9KSA9PiBjcmVhdGVCbG9ja0NhY2hlTWlkZGxld2FyZShPYmplY3QuYXNzaWduKHsgYmxvY2tUcmFja2VyIH0sIG9wdHMpKSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJsb2NrQ2FjaGVTdWJwcm92aWRlclxuIiwiY29uc3QgUHJvdmlkZXJTdWJwcm92aWRlciA9IHJlcXVpcmUoJy4vanNvbi1ycGMtZW5naW5lLW1pZGRsZXdhcmUnKVxuY29uc3QgY3JlYXRlRmlsdGVyTWlkZGxld2FyZSA9IHJlcXVpcmUoJ2V0aC1qc29uLXJwYy1maWx0ZXJzJylcblxuY2xhc3MgU3Vic2NyaXB0aW9uc1N1YnByb3ZpZGVyIGV4dGVuZHMgUHJvdmlkZXJTdWJwcm92aWRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCh7IGJsb2NrVHJhY2tlciwgcHJvdmlkZXIsIGVuZ2luZSB9KSA9PiB7XG4gICAgICByZXR1cm4gY3JlYXRlRmlsdGVyTWlkZGxld2FyZSh7IGJsb2NrVHJhY2tlciwgcHJvdmlkZXIgfSlcbiAgICB9KVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3Vic2NyaXB0aW9uc1N1YnByb3ZpZGVyXG4iLCJjb25zdCBpbmhlcml0cyA9IHJlcXVpcmUoJ3V0aWwnKS5pbmhlcml0c1xuY29uc3QgU3VicHJvdmlkZXIgPSByZXF1aXJlKCcuL3N1YnByb3ZpZGVyLmpzJylcblxubW9kdWxlLmV4cG9ydHMgPSBGaXh0dXJlUHJvdmlkZXJcblxuaW5oZXJpdHMoRml4dHVyZVByb3ZpZGVyLCBTdWJwcm92aWRlcilcblxuZnVuY3Rpb24gRml4dHVyZVByb3ZpZGVyKHN0YXRpY1Jlc3BvbnNlcyl7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHN0YXRpY1Jlc3BvbnNlcyA9IHN0YXRpY1Jlc3BvbnNlcyB8fCB7fVxuICBzZWxmLnN0YXRpY1Jlc3BvbnNlcyA9IHN0YXRpY1Jlc3BvbnNlc1xufVxuXG5GaXh0dXJlUHJvdmlkZXIucHJvdG90eXBlLmhhbmRsZVJlcXVlc3QgPSBmdW5jdGlvbihwYXlsb2FkLCBuZXh0LCBlbmQpe1xuICBjb25zdCBzZWxmID0gdGhpc1xuICB2YXIgc3RhdGljUmVzcG9uc2UgPSBzZWxmLnN0YXRpY1Jlc3BvbnNlc1twYXlsb2FkLm1ldGhvZF1cbiAgLy8gYXN5bmMgZnVuY3Rpb25cbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBzdGF0aWNSZXNwb25zZSkge1xuICAgIHN0YXRpY1Jlc3BvbnNlKHBheWxvYWQsIG5leHQsIGVuZClcbiAgLy8gc3RhdGljIHJlc3BvbnNlIC0gbnVsbCBpcyB2YWxpZCByZXNwb25zZVxuICB9IGVsc2UgaWYgKHN0YXRpY1Jlc3BvbnNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyByZXR1cm4gcmVzdWx0IGFzeW5jaHJvbm91c2x5XG4gICAgc2V0VGltZW91dCgoKSA9PiBlbmQobnVsbCwgc3RhdGljUmVzcG9uc2UpKVxuICAvLyBubyBwcmVwYXJlZCByZXNwb25zZSAtIHNraXBcbiAgfSBlbHNlIHtcbiAgICBuZXh0KClcbiAgfVxufVxuIiwiLypcbiAqIEVtdWxhdGUgJ2V0aF9hY2NvdW50cycgLyAnZXRoX3NlbmRUcmFuc2FjdGlvbicgdXNpbmcgJ2V0aF9zZW5kUmF3VHJhbnNhY3Rpb24nXG4gKlxuICogVGhlIHR3byBjYWxsYmFja3MgYSB1c2VyIG5lZWRzIHRvIGltcGxlbWVudCBhcmU6XG4gKiAtIGdldEFjY291bnRzKCkgLS0gYXJyYXkgb2YgYWRkcmVzc2VzIHN1cHBvcnRlZFxuICogLSBzaWduVHJhbnNhY3Rpb24odHgpIC0tIHNpZ24gYSByYXcgdHJhbnNhY3Rpb24gb2JqZWN0XG4gKi9cblxuY29uc3Qgd2F0ZXJmYWxsID0gcmVxdWlyZSgnYXN5bmMvd2F0ZXJmYWxsJylcbmNvbnN0IHBhcmFsbGVsID0gcmVxdWlyZSgnYXN5bmMvcGFyYWxsZWwnKVxuY29uc3QgaW5oZXJpdHMgPSByZXF1aXJlKCd1dGlsJykuaW5oZXJpdHNcbmNvbnN0IGV0aFV0aWwgPSByZXF1aXJlKCdldGhlcmV1bWpzLXV0aWwnKVxuY29uc3Qgc2lnVXRpbCA9IHJlcXVpcmUoJ2V0aC1zaWctdXRpbCcpXG5jb25zdCBleHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpXG5jb25zdCBTZW1hcGhvcmUgPSByZXF1aXJlKCdzZW1hcGhvcmUnKVxuY29uc3QgU3VicHJvdmlkZXIgPSByZXF1aXJlKCcuL3N1YnByb3ZpZGVyLmpzJylcbmNvbnN0IGVzdGltYXRlR2FzID0gcmVxdWlyZSgnLi4vdXRpbC9lc3RpbWF0ZS1nYXMuanMnKVxuY29uc3QgaGV4UmVnZXggPSAvXlswLTlBLUZhLWZdKyQvZ1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhvb2tlZFdhbGxldFN1YnByb3ZpZGVyXG5cbi8vIGhhbmRsZXMgdGhlIGZvbGxvd2luZyBSUEMgbWV0aG9kczpcbi8vICAgZXRoX2NvaW5iYXNlXG4vLyAgIGV0aF9hY2NvdW50c1xuLy8gICBldGhfc2VuZFRyYW5zYWN0aW9uXG4vLyAgIGV0aF9zaWduXG4vLyAgIGV0aF9zaWduVHlwZWREYXRhXG4vLyAgIGV0aF9zaWduVHlwZWREYXRhX3YzXG4vLyAgIGV0aF9zaWduVHlwZWREYXRhX3Y0XG4vLyAgIHBlcnNvbmFsX3NpZ25cbi8vICAgZXRoX2RlY3J5cHRNZXNzYWdlXG4vLyAgIGVuY3J5cHRpb25fcHVibGljX2tleVxuLy8gICBwZXJzb25hbF9lY1JlY292ZXJcbi8vICAgcGFyaXR5X3Bvc3RUcmFuc2FjdGlvblxuLy8gICBwYXJpdHlfY2hlY2tSZXF1ZXN0XG4vLyAgIHBhcml0eV9kZWZhdWx0QWNjb3VudFxuXG4vL1xuLy8gVHggU2lnbmF0dXJlIEZsb3dcbi8vXG4vLyBoYW5kbGVSZXF1ZXN0OiBldGhfc2VuZFRyYW5zYWN0aW9uXG4vLyAgIHZhbGlkYXRlVHJhbnNhY3Rpb24gKGJhc2ljIHZhbGlkaXR5IGNoZWNrKVxuLy8gICAgIHZhbGlkYXRlU2VuZGVyIChjaGVja3MgdGhhdCBzZW5kZXIgaXMgaW4gYWNjb3VudHMpXG4vLyAgIHByb2Nlc3NUcmFuc2FjdGlvbiAoc2lnbiB0eCBhbmQgc3VibWl0IHRvIG5ldHdvcmspXG4vLyAgICAgYXBwcm92ZVRyYW5zYWN0aW9uIChVSSBhcHByb3ZhbCBob29rKVxuLy8gICAgIGNoZWNrQXBwcm92YWxcbi8vICAgICBmaW5hbGl6ZUFuZFN1Ym1pdFR4ICh0eCBzaWduaW5nKVxuLy8gICAgICAgbm9uY2VMb2NrLnRha2UgKGJvdHRsZSBuZWNrIHRvIGVuc3VyZSBhdG9taWMgbm9uY2UpXG4vLyAgICAgICAgIGZpbGxJblR4RXh0cmFzIChzZXQgZmFsbGJhY2sgZ2FzUHJpY2UsIG5vbmNlLCBldGMpXG4vLyAgICAgICAgIHNpZ25UcmFuc2FjdGlvbiAocGVyZm9ybSB0aGUgc2lnbmF0dXJlKVxuLy8gICAgICAgICBwdWJsaXNoVHJhbnNhY3Rpb24gKHB1Ymxpc2ggc2lnbmVkIHR4IHRvIG5ldHdvcmspXG4vL1xuXG5cbmluaGVyaXRzKEhvb2tlZFdhbGxldFN1YnByb3ZpZGVyLCBTdWJwcm92aWRlcilcblxuZnVuY3Rpb24gSG9va2VkV2FsbGV0U3VicHJvdmlkZXIob3B0cyl7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIC8vIGNvbnRyb2wgZmxvd1xuICBzZWxmLm5vbmNlTG9jayA9IFNlbWFwaG9yZSgxKVxuXG4gIC8vIGRhdGEgbG9va3VwXG4gIGlmIChvcHRzLmdldEFjY291bnRzKSBzZWxmLmdldEFjY291bnRzID0gb3B0cy5nZXRBY2NvdW50c1xuICAvLyBoaWdoIGxldmVsIG92ZXJyaWRlXG4gIGlmIChvcHRzLnByb2Nlc3NUcmFuc2FjdGlvbikgc2VsZi5wcm9jZXNzVHJhbnNhY3Rpb24gPSBvcHRzLnByb2Nlc3NUcmFuc2FjdGlvblxuICBpZiAob3B0cy5wcm9jZXNzTWVzc2FnZSkgc2VsZi5wcm9jZXNzTWVzc2FnZSA9IG9wdHMucHJvY2Vzc01lc3NhZ2VcbiAgaWYgKG9wdHMucHJvY2Vzc1BlcnNvbmFsTWVzc2FnZSkgc2VsZi5wcm9jZXNzUGVyc29uYWxNZXNzYWdlID0gb3B0cy5wcm9jZXNzUGVyc29uYWxNZXNzYWdlXG4gIGlmIChvcHRzLnByb2Nlc3NUeXBlZE1lc3NhZ2UpIHNlbGYucHJvY2Vzc1R5cGVkTWVzc2FnZSA9IG9wdHMucHJvY2Vzc1R5cGVkTWVzc2FnZVxuICAvLyBhcHByb3ZhbCBob29rc1xuICBzZWxmLmFwcHJvdmVUcmFuc2FjdGlvbiA9IG9wdHMuYXBwcm92ZVRyYW5zYWN0aW9uIHx8IHNlbGYuYXV0b0FwcHJvdmVcbiAgc2VsZi5hcHByb3ZlTWVzc2FnZSA9IG9wdHMuYXBwcm92ZU1lc3NhZ2UgfHwgc2VsZi5hdXRvQXBwcm92ZVxuICBzZWxmLmFwcHJvdmVQZXJzb25hbE1lc3NhZ2UgPSBvcHRzLmFwcHJvdmVQZXJzb25hbE1lc3NhZ2UgfHwgc2VsZi5hdXRvQXBwcm92ZVxuICBzZWxmLmFwcHJvdmVEZWNyeXB0TWVzc2FnZSA9IG9wdHMuYXBwcm92ZURlY3J5cHRNZXNzYWdlIHx8IHNlbGYuYXV0b0FwcHJvdmVcbiAgc2VsZi5hcHByb3ZlRW5jcnlwdGlvblB1YmxpY0tleSA9IG9wdHMuYXBwcm92ZUVuY3J5cHRpb25QdWJsaWNLZXkgfHwgc2VsZi5hdXRvQXBwcm92ZVxuICBzZWxmLmFwcHJvdmVUeXBlZE1lc3NhZ2UgPSBvcHRzLmFwcHJvdmVUeXBlZE1lc3NhZ2UgfHwgc2VsZi5hdXRvQXBwcm92ZVxuICAvLyBhY3R1YWxseSBwZXJmb3JtIHRoZSBzaWduYXR1cmVcbiAgaWYgKG9wdHMuc2lnblRyYW5zYWN0aW9uKSBzZWxmLnNpZ25UcmFuc2FjdGlvbiA9IG9wdHMuc2lnblRyYW5zYWN0aW9uICB8fCBtdXN0UHJvdmlkZUluQ29uc3RydWN0b3IoJ3NpZ25UcmFuc2FjdGlvbicpXG4gIGlmIChvcHRzLnNpZ25NZXNzYWdlKSBzZWxmLnNpZ25NZXNzYWdlID0gb3B0cy5zaWduTWVzc2FnZSAgfHwgbXVzdFByb3ZpZGVJbkNvbnN0cnVjdG9yKCdzaWduTWVzc2FnZScpXG4gIGlmIChvcHRzLnNpZ25QZXJzb25hbE1lc3NhZ2UpIHNlbGYuc2lnblBlcnNvbmFsTWVzc2FnZSA9IG9wdHMuc2lnblBlcnNvbmFsTWVzc2FnZSAgfHwgbXVzdFByb3ZpZGVJbkNvbnN0cnVjdG9yKCdzaWduUGVyc29uYWxNZXNzYWdlJylcbiAgaWYgKG9wdHMuZGVjcnlwdE1lc3NhZ2UpIHNlbGYuZGVjcnlwdE1lc3NhZ2UgPSBvcHRzLmRlY3J5cHRNZXNzYWdlICB8fCBtdXN0UHJvdmlkZUluQ29uc3RydWN0b3IoJ2RlY3J5cHRNZXNzYWdlJylcbiAgaWYgKG9wdHMuZW5jcnlwdGlvblB1YmxpY0tleSkgc2VsZi5lbmNyeXB0aW9uUHVibGljS2V5ID0gb3B0cy5lbmNyeXB0aW9uUHVibGljS2V5ICB8fCBtdXN0UHJvdmlkZUluQ29uc3RydWN0b3IoJ2VuY3J5cHRpb25QdWJsaWNLZXknKVxuICBpZiAob3B0cy5zaWduVHlwZWRNZXNzYWdlKSBzZWxmLnNpZ25UeXBlZE1lc3NhZ2UgPSBvcHRzLnNpZ25UeXBlZE1lc3NhZ2UgIHx8IG11c3RQcm92aWRlSW5Db25zdHJ1Y3Rvcignc2lnblR5cGVkTWVzc2FnZScpXG4gIGlmIChvcHRzLnJlY292ZXJQZXJzb25hbFNpZ25hdHVyZSkgc2VsZi5yZWNvdmVyUGVyc29uYWxTaWduYXR1cmUgPSBvcHRzLnJlY292ZXJQZXJzb25hbFNpZ25hdHVyZVxuICAvLyBwdWJsaXNoIHRvIG5ldHdvcmtcbiAgaWYgKG9wdHMucHVibGlzaFRyYW5zYWN0aW9uKSBzZWxmLnB1Ymxpc2hUcmFuc2FjdGlvbiA9IG9wdHMucHVibGlzaFRyYW5zYWN0aW9uXG4gIC8vIGdhcyBvcHRpb25zXG4gIHNlbGYuZXN0aW1hdGVHYXMgPSBvcHRzLmVzdGltYXRlR2FzIHx8IHNlbGYuZXN0aW1hdGVHYXNcbiAgc2VsZi5nZXRHYXNQcmljZSA9IG9wdHMuZ2V0R2FzUHJpY2UgfHwgc2VsZi5nZXRHYXNQcmljZVxufVxuXG5Ib29rZWRXYWxsZXRTdWJwcm92aWRlci5wcm90b3R5cGUuaGFuZGxlUmVxdWVzdCA9IGZ1bmN0aW9uKHBheWxvYWQsIG5leHQsIGVuZCl7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHNlbGYuX3Bhcml0eVJlcXVlc3RzID0ge31cbiAgc2VsZi5fcGFyaXR5UmVxdWVzdENvdW50ID0gMFxuXG4gIC8vIHN3aXRjaCBzdGF0ZW1lbnQgaXMgbm90IGJsb2NrIHNjb3BlZFxuICAvLyBzcCB3ZSBjYW50IHJlcGVhdCB2YXIgZGVjbGFyYXRpb25zXG4gIGxldCB0eFBhcmFtcywgbXNnUGFyYW1zLCBleHRyYVBhcmFtc1xuICBsZXQgbWVzc2FnZSwgYWRkcmVzc1xuXG4gIHN3aXRjaChwYXlsb2FkLm1ldGhvZCkge1xuXG4gICAgY2FzZSAnZXRoX2NvaW5iYXNlJzpcbiAgICAgIC8vIHByb2Nlc3Mgbm9ybWFsbHlcbiAgICAgIHNlbGYuZ2V0QWNjb3VudHMoZnVuY3Rpb24oZXJyLCBhY2NvdW50cyl7XG4gICAgICAgIGlmIChlcnIpIHJldHVybiBlbmQoZXJyKVxuICAgICAgICBsZXQgcmVzdWx0ID0gYWNjb3VudHNbMF0gfHwgbnVsbFxuICAgICAgICBlbmQobnVsbCwgcmVzdWx0KVxuICAgICAgfSlcbiAgICAgIHJldHVyblxuXG4gICAgY2FzZSAnZXRoX2FjY291bnRzJzpcbiAgICAgIC8vIHByb2Nlc3Mgbm9ybWFsbHlcbiAgICAgIHNlbGYuZ2V0QWNjb3VudHMoZnVuY3Rpb24oZXJyLCBhY2NvdW50cyl7XG4gICAgICAgIGlmIChlcnIpIHJldHVybiBlbmQoZXJyKVxuICAgICAgICBlbmQobnVsbCwgYWNjb3VudHMpXG4gICAgICB9KVxuICAgICAgcmV0dXJuXG5cbiAgICBjYXNlICdldGhfc2VuZFRyYW5zYWN0aW9uJzpcbiAgICAgIHR4UGFyYW1zID0gcGF5bG9hZC5wYXJhbXNbMF1cbiAgICAgIHdhdGVyZmFsbChbXG4gICAgICAgIChjYikgPT4gc2VsZi52YWxpZGF0ZVRyYW5zYWN0aW9uKHR4UGFyYW1zLCBjYiksXG4gICAgICAgIChjYikgPT4gc2VsZi5wcm9jZXNzVHJhbnNhY3Rpb24odHhQYXJhbXMsIGNiKSxcbiAgICAgIF0sIGVuZClcbiAgICAgIHJldHVyblxuXG4gICAgY2FzZSAnZXRoX3NpZ25UcmFuc2FjdGlvbic6XG4gICAgICB0eFBhcmFtcyA9IHBheWxvYWQucGFyYW1zWzBdXG4gICAgICB3YXRlcmZhbGwoW1xuICAgICAgICAoY2IpID0+IHNlbGYudmFsaWRhdGVUcmFuc2FjdGlvbih0eFBhcmFtcywgY2IpLFxuICAgICAgICAoY2IpID0+IHNlbGYucHJvY2Vzc1NpZ25UcmFuc2FjdGlvbih0eFBhcmFtcywgY2IpLFxuICAgICAgXSwgZW5kKVxuICAgICAgcmV0dXJuXG5cbiAgICBjYXNlICdldGhfc2lnbic6XG4gICAgICAvLyBwcm9jZXNzIG5vcm1hbGx5XG4gICAgICBhZGRyZXNzID0gcGF5bG9hZC5wYXJhbXNbMF1cbiAgICAgIG1lc3NhZ2UgPSBwYXlsb2FkLnBhcmFtc1sxXVxuICAgICAgLy8gbm9uLXN0YW5kYXJkIFwiZXh0cmFQYXJhbXNcIiB0byBiZSBhcHBlbmRlZCB0byBvdXIgXCJtc2dQYXJhbXNcIiBvYmpcbiAgICAgIC8vIGdvb2QgcGxhY2UgZm9yIG1ldGFkYXRhXG4gICAgICBleHRyYVBhcmFtcyA9IHBheWxvYWQucGFyYW1zWzJdIHx8IHt9XG4gICAgICBtc2dQYXJhbXMgPSBleHRlbmQoZXh0cmFQYXJhbXMsIHtcbiAgICAgICAgZnJvbTogYWRkcmVzcyxcbiAgICAgICAgZGF0YTogbWVzc2FnZSxcbiAgICAgIH0pXG4gICAgICB3YXRlcmZhbGwoW1xuICAgICAgICAoY2IpID0+IHNlbGYudmFsaWRhdGVNZXNzYWdlKG1zZ1BhcmFtcywgY2IpLFxuICAgICAgICAoY2IpID0+IHNlbGYucHJvY2Vzc01lc3NhZ2UobXNnUGFyYW1zLCBjYiksXG4gICAgICBdLCBlbmQpXG4gICAgICByZXR1cm5cblxuICAgIGNhc2UgJ3BlcnNvbmFsX3NpZ24nOlxuICAgICAgcmV0dXJuIChmdW5jdGlvbigpe1xuICAgICAgICAvLyBwcm9jZXNzIG5vcm1hbGx5XG4gICAgICAgIGNvbnN0IGZpcnN0ID0gcGF5bG9hZC5wYXJhbXNbMF1cbiAgICAgICAgY29uc3Qgc2Vjb25kID0gcGF5bG9hZC5wYXJhbXNbMV1cblxuICAgICAgICAvLyBXZSBpbml0aWFsbHkgaW5jb3JyZWN0bHkgb3JkZXJlZCB0aGVzZSBwYXJhbWV0ZXJzLlxuICAgICAgICAvLyBUbyBncmFjZWZ1bGx5IHJlc3BlY3QgdXNlcnMgd2hvIGFkb3B0ZWQgdGhpcyBBUEkgZWFybHksXG4gICAgICAgIC8vIHdlIGFyZSBjdXJyZW50bHkgZ3JhY2VmdWxseSByZWNvdmVyaW5nIGZyb20gdGhlIHdyb25nIHBhcmFtIG9yZGVyXG4gICAgICAgIC8vIHdoZW4gaXQgaXMgY2xlYXJseSBpZGVudGlmaWFibGUuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRoYXQgbWVhbnMgd2hlbiB0aGUgZmlyc3QgcGFyYW0gaXMgZGVmaW5pdGVseSBhbiBhZGRyZXNzLFxuICAgICAgICAvLyBhbmQgdGhlIHNlY29uZCBwYXJhbSBpcyBkZWZpbml0ZWx5IG5vdCwgYnV0IGlzIGhleC5cbiAgICAgICAgaWYgKHJlc2VtYmxlc0RhdGEoc2Vjb25kKSAmJiByZXNlbWJsZXNBZGRyZXNzKGZpcnN0KSkge1xuICAgICAgICAgIGxldCB3YXJuaW5nID0gYFRoZSBldGhfcGVyc29uYWxTaWduIG1ldGhvZCByZXF1aXJlcyBwYXJhbXMgb3JkZXJlZCBgXG4gICAgICAgICAgd2FybmluZyArPSBgW21lc3NhZ2UsIGFkZHJlc3NdLiBUaGlzIHdhcyBwcmV2aW91c2x5IGhhbmRsZWQgaW5jb3JyZWN0bHksIGBcbiAgICAgICAgICB3YXJuaW5nICs9IGBhbmQgaGFzIGJlZW4gY29ycmVjdGVkIGF1dG9tYXRpY2FsbHkuIGBcbiAgICAgICAgICB3YXJuaW5nICs9IGBQbGVhc2Ugc3dpdGNoIHRoaXMgcGFyYW0gb3JkZXIgZm9yIHNtb290aCBiZWhhdmlvciBpbiB0aGUgZnV0dXJlLmBcbiAgICAgICAgICBjb25zb2xlLndhcm4od2FybmluZylcblxuICAgICAgICAgIGFkZHJlc3MgPSBwYXlsb2FkLnBhcmFtc1swXVxuICAgICAgICAgIG1lc3NhZ2UgPSBwYXlsb2FkLnBhcmFtc1sxXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1lc3NhZ2UgPSBwYXlsb2FkLnBhcmFtc1swXVxuICAgICAgICAgIGFkZHJlc3MgPSBwYXlsb2FkLnBhcmFtc1sxXVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gbm9uLXN0YW5kYXJkIFwiZXh0cmFQYXJhbXNcIiB0byBiZSBhcHBlbmRlZCB0byBvdXIgXCJtc2dQYXJhbXNcIiBvYmpcbiAgICAgICAgLy8gZ29vZCBwbGFjZSBmb3IgbWV0YWRhdGFcbiAgICAgICAgZXh0cmFQYXJhbXMgPSBwYXlsb2FkLnBhcmFtc1syXSB8fCB7fVxuICAgICAgICBtc2dQYXJhbXMgPSBleHRlbmQoZXh0cmFQYXJhbXMsIHtcbiAgICAgICAgICBmcm9tOiBhZGRyZXNzLFxuICAgICAgICAgIGRhdGE6IG1lc3NhZ2UsXG4gICAgICAgIH0pXG4gICAgICAgIHdhdGVyZmFsbChbXG4gICAgICAgICAgKGNiKSA9PiBzZWxmLnZhbGlkYXRlUGVyc29uYWxNZXNzYWdlKG1zZ1BhcmFtcywgY2IpLFxuICAgICAgICAgIChjYikgPT4gc2VsZi5wcm9jZXNzUGVyc29uYWxNZXNzYWdlKG1zZ1BhcmFtcywgY2IpLFxuICAgICAgICBdLCBlbmQpXG4gICAgICB9KSgpXG5cbiAgICBjYXNlICdldGhfZGVjcnlwdE1lc3NhZ2UnOlxuICAgICAgcmV0dXJuIChmdW5jdGlvbigpe1xuICAgICAgICAvLyBwcm9jZXNzIG5vcm1hbGx5XG4gICAgICAgIGNvbnN0IGZpcnN0ID0gcGF5bG9hZC5wYXJhbXNbMF1cbiAgICAgICAgY29uc3Qgc2Vjb25kID0gcGF5bG9hZC5wYXJhbXNbMV1cblxuICAgICAgICAvLyBXZSBpbml0aWFsbHkgaW5jb3JyZWN0bHkgb3JkZXJlZCB0aGVzZSBwYXJhbWV0ZXJzLlxuICAgICAgICAvLyBUbyBncmFjZWZ1bGx5IHJlc3BlY3QgdXNlcnMgd2hvIGFkb3B0ZWQgdGhpcyBBUEkgZWFybHksXG4gICAgICAgIC8vIHdlIGFyZSBjdXJyZW50bHkgZ3JhY2VmdWxseSByZWNvdmVyaW5nIGZyb20gdGhlIHdyb25nIHBhcmFtIG9yZGVyXG4gICAgICAgIC8vIHdoZW4gaXQgaXMgY2xlYXJseSBpZGVudGlmaWFibGUuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRoYXQgbWVhbnMgd2hlbiB0aGUgZmlyc3QgcGFyYW0gaXMgZGVmaW5pdGVseSBhbiBhZGRyZXNzLFxuICAgICAgICAvLyBhbmQgdGhlIHNlY29uZCBwYXJhbSBpcyBkZWZpbml0ZWx5IG5vdCwgYnV0IGlzIGhleC5cbiAgICAgICAgaWYgKHJlc2VtYmxlc0RhdGEoc2Vjb25kKSAmJiByZXNlbWJsZXNBZGRyZXNzKGZpcnN0KSkge1xuICAgICAgICAgIGxldCB3YXJuaW5nID0gYFRoZSBldGhfZGVjcnlwdE1lc3NhZ2UgbWV0aG9kIHJlcXVpcmVzIHBhcmFtcyBvcmRlcmVkIGBcbiAgICAgICAgICB3YXJuaW5nICs9IGBbbWVzc2FnZSwgYWRkcmVzc10uIFRoaXMgd2FzIHByZXZpb3VzbHkgaGFuZGxlZCBpbmNvcnJlY3RseSwgYFxuICAgICAgICAgIHdhcm5pbmcgKz0gYGFuZCBoYXMgYmVlbiBjb3JyZWN0ZWQgYXV0b21hdGljYWxseS4gYFxuICAgICAgICAgIHdhcm5pbmcgKz0gYFBsZWFzZSBzd2l0Y2ggdGhpcyBwYXJhbSBvcmRlciBmb3Igc21vb3RoIGJlaGF2aW9yIGluIHRoZSBmdXR1cmUuYFxuICAgICAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKVxuXG4gICAgICAgICAgYWRkcmVzcyA9IHBheWxvYWQucGFyYW1zWzBdXG4gICAgICAgICAgbWVzc2FnZSA9IHBheWxvYWQucGFyYW1zWzFdXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWVzc2FnZSA9IHBheWxvYWQucGFyYW1zWzBdXG4gICAgICAgICAgYWRkcmVzcyA9IHBheWxvYWQucGFyYW1zWzFdXG4gICAgICAgIH1cblxuICAgICAgICAvLyBub24tc3RhbmRhcmQgXCJleHRyYVBhcmFtc1wiIHRvIGJlIGFwcGVuZGVkIHRvIG91ciBcIm1zZ1BhcmFtc1wiIG9ialxuICAgICAgICAvLyBnb29kIHBsYWNlIGZvciBtZXRhZGF0YVxuICAgICAgICBleHRyYVBhcmFtcyA9IHBheWxvYWQucGFyYW1zWzJdIHx8IHt9XG4gICAgICAgIG1zZ1BhcmFtcyA9IGV4dGVuZChleHRyYVBhcmFtcywge1xuICAgICAgICAgIGZyb206IGFkZHJlc3MsXG4gICAgICAgICAgZGF0YTogbWVzc2FnZSxcbiAgICAgICAgfSlcbiAgICAgICAgd2F0ZXJmYWxsKFtcbiAgICAgICAgICAoY2IpID0+IHNlbGYudmFsaWRhdGVEZWNyeXB0TWVzc2FnZShtc2dQYXJhbXMsIGNiKSxcbiAgICAgICAgICAoY2IpID0+IHNlbGYucHJvY2Vzc0RlY3J5cHRNZXNzYWdlKG1zZ1BhcmFtcywgY2IpLFxuICAgICAgICBdLCBlbmQpXG4gICAgICB9KSgpXG4gICAgICBcbiAgICBjYXNlICdlbmNyeXB0aW9uX3B1YmxpY19rZXknOlxuICAgICAgcmV0dXJuIChmdW5jdGlvbigpe1xuICAgICAgICBjb25zdCBhZGRyZXNzID0gcGF5bG9hZC5wYXJhbXNbMF1cbiAgICAgICAgXG4gICAgICAgIHdhdGVyZmFsbChbXG4gICAgICAgICAgKGNiKSA9PiBzZWxmLnZhbGlkYXRlRW5jcnlwdGlvblB1YmxpY0tleShhZGRyZXNzLCBjYiksXG4gICAgICAgICAgKGNiKSA9PiBzZWxmLnByb2Nlc3NFbmNyeXB0aW9uUHVibGljS2V5KGFkZHJlc3MsIGNiKSxcbiAgICAgICAgXSwgZW5kKVxuICAgICAgfSkoKVxuICAgICAgXG4gICAgY2FzZSAncGVyc29uYWxfZWNSZWNvdmVyJzpcbiAgICAgIHJldHVybiAoZnVuY3Rpb24oKXsgICAgXG4gICAgICAgIG1lc3NhZ2UgPSBwYXlsb2FkLnBhcmFtc1swXVxuICAgICAgICBsZXQgc2lnbmF0dXJlID0gcGF5bG9hZC5wYXJhbXNbMV1cbiAgICAgICAgLy8gbm9uLXN0YW5kYXJkIFwiZXh0cmFQYXJhbXNcIiB0byBiZSBhcHBlbmRlZCB0byBvdXIgXCJtc2dQYXJhbXNcIiBvYmpcbiAgICAgICAgLy8gZ29vZCBwbGFjZSBmb3IgbWV0YWRhdGFcbiAgICAgICAgZXh0cmFQYXJhbXMgPSBwYXlsb2FkLnBhcmFtc1syXSB8fCB7fVxuICAgICAgICBtc2dQYXJhbXMgPSBleHRlbmQoZXh0cmFQYXJhbXMsIHtcbiAgICAgICAgICBzaWc6IHNpZ25hdHVyZSxcbiAgICAgICAgICBkYXRhOiBtZXNzYWdlLFxuICAgICAgICB9KVxuICAgICAgICBzZWxmLnJlY292ZXJQZXJzb25hbFNpZ25hdHVyZShtc2dQYXJhbXMsIGVuZClcbiAgICAgIH0pKClcblxuICAgIGNhc2UgJ2V0aF9zaWduVHlwZWREYXRhJzpcbiAgICBjYXNlICdldGhfc2lnblR5cGVkRGF0YV92Myc6XG4gICAgY2FzZSAnZXRoX3NpZ25UeXBlZERhdGFfdjQnOlxuICAgICAgcmV0dXJuIChmdW5jdGlvbigpeyBcbiAgICAgICAgLy8gcHJvY2VzcyBub3JtYWxseVxuICAgICAgXG4gICAgICAgIGNvbnN0IGZpcnN0ID0gcGF5bG9hZC5wYXJhbXNbMF1cbiAgICAgICAgY29uc3Qgc2Vjb25kID0gcGF5bG9hZC5wYXJhbXNbMV1cblxuICAgICAgICBpZiAocmVzZW1ibGVzQWRkcmVzcyhmaXJzdCkpIHtcbiAgICAgICAgICBhZGRyZXNzID0gZmlyc3RcbiAgICAgICAgICBtZXNzYWdlID0gc2Vjb25kXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWVzc2FnZSA9IGZpcnN0XG4gICAgICAgICAgYWRkcmVzcyA9IHNlY29uZFxuICAgICAgICB9XG5cbiAgICAgICAgZXh0cmFQYXJhbXMgPSBwYXlsb2FkLnBhcmFtc1syXSB8fCB7fVxuICAgICAgICBtc2dQYXJhbXMgPSBleHRlbmQoZXh0cmFQYXJhbXMsIHtcbiAgICAgICAgICBmcm9tOiBhZGRyZXNzLFxuICAgICAgICAgIGRhdGE6IG1lc3NhZ2UsXG4gICAgICAgIH0pXG4gICAgICAgIHdhdGVyZmFsbChbXG4gICAgICAgICAgKGNiKSA9PiBzZWxmLnZhbGlkYXRlVHlwZWRNZXNzYWdlKG1zZ1BhcmFtcywgY2IpLFxuICAgICAgICAgIChjYikgPT4gc2VsZi5wcm9jZXNzVHlwZWRNZXNzYWdlKG1zZ1BhcmFtcywgY2IpLFxuICAgICAgICBdLCBlbmQpXG4gICAgICB9KSgpXG5cbiAgICBjYXNlICdwYXJpdHlfcG9zdFRyYW5zYWN0aW9uJzpcbiAgICAgIHR4UGFyYW1zID0gcGF5bG9hZC5wYXJhbXNbMF1cbiAgICAgIHNlbGYucGFyaXR5UG9zdFRyYW5zYWN0aW9uKHR4UGFyYW1zLCBlbmQpXG4gICAgICByZXR1cm5cblxuICAgIGNhc2UgJ3Bhcml0eV9wb3N0U2lnbic6XG4gICAgICBhZGRyZXNzID0gcGF5bG9hZC5wYXJhbXNbMF1cbiAgICAgIG1lc3NhZ2UgPSBwYXlsb2FkLnBhcmFtc1sxXVxuICAgICAgc2VsZi5wYXJpdHlQb3N0U2lnbihhZGRyZXNzLCBtZXNzYWdlLCBlbmQpXG4gICAgICByZXR1cm5cblxuICAgIGNhc2UgJ3Bhcml0eV9jaGVja1JlcXVlc3QnOlxuICAgICAgcmV0dXJuIChmdW5jdGlvbigpe1xuICAgICAgICBjb25zdCByZXF1ZXN0SWQgPSBwYXlsb2FkLnBhcmFtc1swXVxuICAgICAgICBzZWxmLnBhcml0eUNoZWNrUmVxdWVzdChyZXF1ZXN0SWQsIGVuZClcbiAgICAgIH0pKClcblxuICAgIGNhc2UgJ3Bhcml0eV9kZWZhdWx0QWNjb3VudCc6XG4gICAgICBzZWxmLmdldEFjY291bnRzKGZ1bmN0aW9uKGVyciwgYWNjb3VudHMpe1xuICAgICAgICBpZiAoZXJyKSByZXR1cm4gZW5kKGVycilcbiAgICAgICAgY29uc3QgYWNjb3VudCA9IGFjY291bnRzWzBdIHx8IG51bGxcbiAgICAgICAgZW5kKG51bGwsIGFjY291bnQpXG4gICAgICB9KVxuICAgICAgcmV0dXJuXG5cbiAgICBkZWZhdWx0OlxuICAgICAgbmV4dCgpXG4gICAgICByZXR1cm5cblxuICB9XG59XG5cbi8vXG4vLyBkYXRhIGxvb2t1cFxuLy9cblxuSG9va2VkV2FsbGV0U3VicHJvdmlkZXIucHJvdG90eXBlLmdldEFjY291bnRzID0gZnVuY3Rpb24oY2IpIHtcbiAgY2IobnVsbCwgW10pXG59XG5cblxuLy9cbi8vIFwicHJvY2Vzc1wiIGhpZ2ggbGV2ZWwgZmxvd1xuLy9cblxuSG9va2VkV2FsbGV0U3VicHJvdmlkZXIucHJvdG90eXBlLnByb2Nlc3NUcmFuc2FjdGlvbiA9IGZ1bmN0aW9uKHR4UGFyYW1zLCBjYikge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICB3YXRlcmZhbGwoW1xuICAgIChjYikgPT4gc2VsZi5hcHByb3ZlVHJhbnNhY3Rpb24odHhQYXJhbXMsIGNiKSxcbiAgICAoZGlkQXBwcm92ZSwgY2IpID0+IHNlbGYuY2hlY2tBcHByb3ZhbCgndHJhbnNhY3Rpb24nLCBkaWRBcHByb3ZlLCBjYiksXG4gICAgKGNiKSA9PiBzZWxmLmZpbmFsaXplQW5kU3VibWl0VHgodHhQYXJhbXMsIGNiKSxcbiAgXSwgY2IpXG59XG5cblxuSG9va2VkV2FsbGV0U3VicHJvdmlkZXIucHJvdG90eXBlLnByb2Nlc3NTaWduVHJhbnNhY3Rpb24gPSBmdW5jdGlvbih0eFBhcmFtcywgY2IpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgd2F0ZXJmYWxsKFtcbiAgICAoY2IpID0+IHNlbGYuYXBwcm92ZVRyYW5zYWN0aW9uKHR4UGFyYW1zLCBjYiksXG4gICAgKGRpZEFwcHJvdmUsIGNiKSA9PiBzZWxmLmNoZWNrQXBwcm92YWwoJ3RyYW5zYWN0aW9uJywgZGlkQXBwcm92ZSwgY2IpLFxuICAgIChjYikgPT4gc2VsZi5maW5hbGl6ZVR4KHR4UGFyYW1zLCBjYiksXG4gIF0sIGNiKVxufVxuXG5Ib29rZWRXYWxsZXRTdWJwcm92aWRlci5wcm90b3R5cGUucHJvY2Vzc01lc3NhZ2UgPSBmdW5jdGlvbihtc2dQYXJhbXMsIGNiKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHdhdGVyZmFsbChbXG4gICAgKGNiKSA9PiBzZWxmLmFwcHJvdmVNZXNzYWdlKG1zZ1BhcmFtcywgY2IpLFxuICAgIChkaWRBcHByb3ZlLCBjYikgPT4gc2VsZi5jaGVja0FwcHJvdmFsKCdtZXNzYWdlJywgZGlkQXBwcm92ZSwgY2IpLFxuICAgIChjYikgPT4gc2VsZi5zaWduTWVzc2FnZShtc2dQYXJhbXMsIGNiKSxcbiAgXSwgY2IpXG59XG5cbkhvb2tlZFdhbGxldFN1YnByb3ZpZGVyLnByb3RvdHlwZS5wcm9jZXNzUGVyc29uYWxNZXNzYWdlID0gZnVuY3Rpb24obXNnUGFyYW1zLCBjYikge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICB3YXRlcmZhbGwoW1xuICAgIChjYikgPT4gc2VsZi5hcHByb3ZlUGVyc29uYWxNZXNzYWdlKG1zZ1BhcmFtcywgY2IpLFxuICAgIChkaWRBcHByb3ZlLCBjYikgPT4gc2VsZi5jaGVja0FwcHJvdmFsKCdtZXNzYWdlJywgZGlkQXBwcm92ZSwgY2IpLFxuICAgIChjYikgPT4gc2VsZi5zaWduUGVyc29uYWxNZXNzYWdlKG1zZ1BhcmFtcywgY2IpLFxuICBdLCBjYilcbn1cblxuSG9va2VkV2FsbGV0U3VicHJvdmlkZXIucHJvdG90eXBlLnByb2Nlc3NEZWNyeXB0TWVzc2FnZSA9IGZ1bmN0aW9uKG1zZ1BhcmFtcywgY2IpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgd2F0ZXJmYWxsKFtcbiAgICAoY2IpID0+IHNlbGYuYXBwcm92ZURlY3J5cHRNZXNzYWdlKG1zZ1BhcmFtcywgY2IpLFxuICAgIChkaWRBcHByb3ZlLCBjYikgPT4gc2VsZi5jaGVja0FwcHJvdmFsKCdkZWNyeXB0TWVzc2FnZScsIGRpZEFwcHJvdmUsIGNiKSxcbiAgICAoY2IpID0+IHNlbGYuZGVjcnlwdE1lc3NhZ2UobXNnUGFyYW1zLCBjYiksXG4gIF0sIGNiKVxufVxuXG5Ib29rZWRXYWxsZXRTdWJwcm92aWRlci5wcm90b3R5cGUucHJvY2Vzc0VuY3J5cHRpb25QdWJsaWNLZXkgPSBmdW5jdGlvbihtc2dQYXJhbXMsIGNiKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHdhdGVyZmFsbChbXG4gICAgKGNiKSA9PiBzZWxmLmFwcHJvdmVFbmNyeXB0aW9uUHVibGljS2V5KG1zZ1BhcmFtcywgY2IpLFxuICAgIChkaWRBcHByb3ZlLCBjYikgPT4gc2VsZi5jaGVja0FwcHJvdmFsKCdlbmNyeXB0aW9uUHVibGljS2V5JywgZGlkQXBwcm92ZSwgY2IpLFxuICAgIChjYikgPT4gc2VsZi5lbmNyeXB0aW9uUHVibGljS2V5KG1zZ1BhcmFtcywgY2IpLFxuICBdLCBjYilcbn1cblxuSG9va2VkV2FsbGV0U3VicHJvdmlkZXIucHJvdG90eXBlLnByb2Nlc3NUeXBlZE1lc3NhZ2UgPSBmdW5jdGlvbihtc2dQYXJhbXMsIGNiKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHdhdGVyZmFsbChbXG4gICAgKGNiKSA9PiBzZWxmLmFwcHJvdmVUeXBlZE1lc3NhZ2UobXNnUGFyYW1zLCBjYiksXG4gICAgKGRpZEFwcHJvdmUsIGNiKSA9PiBzZWxmLmNoZWNrQXBwcm92YWwoJ21lc3NhZ2UnLCBkaWRBcHByb3ZlLCBjYiksXG4gICAgKGNiKSA9PiBzZWxmLnNpZ25UeXBlZE1lc3NhZ2UobXNnUGFyYW1zLCBjYiksXG4gIF0sIGNiKVxufVxuXG4vL1xuLy8gYXBwcm92YWxcbi8vXG5cbkhvb2tlZFdhbGxldFN1YnByb3ZpZGVyLnByb3RvdHlwZS5hdXRvQXBwcm92ZSA9IGZ1bmN0aW9uKHR4UGFyYW1zLCBjYikge1xuICBjYihudWxsLCB0cnVlKVxufVxuXG5Ib29rZWRXYWxsZXRTdWJwcm92aWRlci5wcm90b3R5cGUuY2hlY2tBcHByb3ZhbCA9IGZ1bmN0aW9uKHR5cGUsIGRpZEFwcHJvdmUsIGNiKSB7XG4gIGNiKCBkaWRBcHByb3ZlID8gbnVsbCA6IG5ldyBFcnJvcignVXNlciBkZW5pZWQgJyt0eXBlKycgc2lnbmF0dXJlLicpIClcbn1cblxuLy9cbi8vIHBhcml0eVxuLy9cblxuSG9va2VkV2FsbGV0U3VicHJvdmlkZXIucHJvdG90eXBlLnBhcml0eVBvc3RUcmFuc2FjdGlvbiA9IGZ1bmN0aW9uKHR4UGFyYW1zLCBjYikge1xuICBjb25zdCBzZWxmID0gdGhpc1xuXG4gIC8vIGdldCBuZXh0IGlkXG4gIGNvbnN0IGNvdW50ID0gc2VsZi5fcGFyaXR5UmVxdWVzdENvdW50XG4gIGNvbnN0IHJlcUlkID0gYDB4JHtjb3VudC50b1N0cmluZygxNil9YFxuICBzZWxmLl9wYXJpdHlSZXF1ZXN0Q291bnQrK1xuXG4gIHNlbGYuZW1pdFBheWxvYWQoe1xuICAgIG1ldGhvZDogJ2V0aF9zZW5kVHJhbnNhY3Rpb24nLFxuICAgIHBhcmFtczogW3R4UGFyYW1zXSxcbiAgfSwgZnVuY3Rpb24oZXJyb3IsIHJlcyl7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBzZWxmLl9wYXJpdHlSZXF1ZXN0c1tyZXFJZF0gPSB7IGVycm9yIH1cbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCB0eEhhc2ggPSByZXMucmVzdWx0XG4gICAgc2VsZi5fcGFyaXR5UmVxdWVzdHNbcmVxSWRdID0gdHhIYXNoXG4gIH0pXG5cbiAgY2IobnVsbCwgcmVxSWQpXG59XG5cblxuSG9va2VkV2FsbGV0U3VicHJvdmlkZXIucHJvdG90eXBlLnBhcml0eVBvc3RTaWduID0gZnVuY3Rpb24oYWRkcmVzcywgbWVzc2FnZSwgY2IpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcblxuICAvLyBnZXQgbmV4dCBpZFxuICBjb25zdCBjb3VudCA9IHNlbGYuX3Bhcml0eVJlcXVlc3RDb3VudFxuICBjb25zdCByZXFJZCA9IGAweCR7Y291bnQudG9TdHJpbmcoMTYpfWBcbiAgc2VsZi5fcGFyaXR5UmVxdWVzdENvdW50KytcblxuICBzZWxmLmVtaXRQYXlsb2FkKHtcbiAgICBtZXRob2Q6ICdldGhfc2lnbicsXG4gICAgcGFyYW1zOiBbYWRkcmVzcywgbWVzc2FnZV0sXG4gIH0sIGZ1bmN0aW9uKGVycm9yLCByZXMpe1xuICAgIGlmIChlcnJvcikge1xuICAgICAgc2VsZi5fcGFyaXR5UmVxdWVzdHNbcmVxSWRdID0geyBlcnJvciB9XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gcmVzLnJlc3VsdFxuICAgIHNlbGYuX3Bhcml0eVJlcXVlc3RzW3JlcUlkXSA9IHJlc3VsdFxuICB9KVxuXG4gIGNiKG51bGwsIHJlcUlkKVxufVxuXG5Ib29rZWRXYWxsZXRTdWJwcm92aWRlci5wcm90b3R5cGUucGFyaXR5Q2hlY2tSZXF1ZXN0ID0gZnVuY3Rpb24ocmVxSWQsIGNiKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIGNvbnN0IHJlc3VsdCA9IHNlbGYuX3Bhcml0eVJlcXVlc3RzW3JlcUlkXSB8fCBudWxsXG4gIC8vIHR4IG5vdCBoYW5kbGVkIHlldFxuICBpZiAoIXJlc3VsdCkgcmV0dXJuIGNiKG51bGwsIG51bGwpXG4gIC8vIHR4IHdhcyByZWplY3RlZCAob3Igb3RoZXIgZXJyb3IpXG4gIGlmIChyZXN1bHQuZXJyb3IpIHJldHVybiBjYihyZXN1bHQuZXJyb3IpXG4gIC8vIHR4IHNlbnRcbiAgY2IobnVsbCwgcmVzdWx0KVxufVxuXG4vL1xuLy8gc2lnbmF0dXJlIGFuZCByZWNvdmVyeVxuLy9cblxuSG9va2VkV2FsbGV0U3VicHJvdmlkZXIucHJvdG90eXBlLnJlY292ZXJQZXJzb25hbFNpZ25hdHVyZSA9IGZ1bmN0aW9uKG1zZ1BhcmFtcywgY2IpIHtcbiAgbGV0IHNlbmRlckhleFxuICB0cnkge1xuICAgIHNlbmRlckhleCA9IHNpZ1V0aWwucmVjb3ZlclBlcnNvbmFsU2lnbmF0dXJlKG1zZ1BhcmFtcylcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIGNiKGVycilcbiAgfVxuICBjYihudWxsLCBzZW5kZXJIZXgpXG59XG5cbi8vXG4vLyB2YWxpZGF0aW9uXG4vL1xuXG5Ib29rZWRXYWxsZXRTdWJwcm92aWRlci5wcm90b3R5cGUudmFsaWRhdGVUcmFuc2FjdGlvbiA9IGZ1bmN0aW9uKHR4UGFyYW1zLCBjYil7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIC8vIHNob3J0Y3V0OiB1bmRlZmluZWQgc2VuZGVyIGlzIGludmFsaWRcbiAgaWYgKHR4UGFyYW1zLmZyb20gPT09IHVuZGVmaW5lZCkgcmV0dXJuIGNiKG5ldyBFcnJvcihgVW5kZWZpbmVkIGFkZHJlc3MgLSBmcm9tIGFkZHJlc3MgcmVxdWlyZWQgdG8gc2lnbiB0cmFuc2FjdGlvbi5gKSlcbiAgc2VsZi52YWxpZGF0ZVNlbmRlcih0eFBhcmFtcy5mcm9tLCBmdW5jdGlvbihlcnIsIHNlbmRlcklzVmFsaWQpe1xuICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpXG4gICAgaWYgKCFzZW5kZXJJc1ZhbGlkKSByZXR1cm4gY2IobmV3IEVycm9yKGBVbmtub3duIGFkZHJlc3MgLSB1bmFibGUgdG8gc2lnbiB0cmFuc2FjdGlvbiBmb3IgdGhpcyBhZGRyZXNzOiBcIiR7dHhQYXJhbXMuZnJvbX1cImApKVxuICAgIGNiKClcbiAgfSlcbn1cblxuSG9va2VkV2FsbGV0U3VicHJvdmlkZXIucHJvdG90eXBlLnZhbGlkYXRlTWVzc2FnZSA9IGZ1bmN0aW9uKG1zZ1BhcmFtcywgY2Ipe1xuICBjb25zdCBzZWxmID0gdGhpc1xuICBpZiAobXNnUGFyYW1zLmZyb20gPT09IHVuZGVmaW5lZCkgcmV0dXJuIGNiKG5ldyBFcnJvcihgVW5kZWZpbmVkIGFkZHJlc3MgLSBmcm9tIGFkZHJlc3MgcmVxdWlyZWQgdG8gc2lnbiBtZXNzYWdlLmApKVxuICBzZWxmLnZhbGlkYXRlU2VuZGVyKG1zZ1BhcmFtcy5mcm9tLCBmdW5jdGlvbihlcnIsIHNlbmRlcklzVmFsaWQpe1xuICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpXG4gICAgaWYgKCFzZW5kZXJJc1ZhbGlkKSByZXR1cm4gY2IobmV3IEVycm9yKGBVbmtub3duIGFkZHJlc3MgLSB1bmFibGUgdG8gc2lnbiBtZXNzYWdlIGZvciB0aGlzIGFkZHJlc3M6IFwiJHttc2dQYXJhbXMuZnJvbX1cImApKVxuICAgIGNiKClcbiAgfSlcbn1cblxuSG9va2VkV2FsbGV0U3VicHJvdmlkZXIucHJvdG90eXBlLnZhbGlkYXRlUGVyc29uYWxNZXNzYWdlID0gZnVuY3Rpb24obXNnUGFyYW1zLCBjYil7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIGlmIChtc2dQYXJhbXMuZnJvbSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gY2IobmV3IEVycm9yKGBVbmRlZmluZWQgYWRkcmVzcyAtIGZyb20gYWRkcmVzcyByZXF1aXJlZCB0byBzaWduIHBlcnNvbmFsIG1lc3NhZ2UuYCkpXG4gIGlmIChtc2dQYXJhbXMuZGF0YSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gY2IobmV3IEVycm9yKGBVbmRlZmluZWQgbWVzc2FnZSAtIG1lc3NhZ2UgcmVxdWlyZWQgdG8gc2lnbiBwZXJzb25hbCBtZXNzYWdlLmApKVxuICBpZiAoIWlzVmFsaWRIZXgobXNnUGFyYW1zLmRhdGEpKSByZXR1cm4gY2IobmV3IEVycm9yKGBIb29rZWRXYWxsZXRTdWJwcm92aWRlciAtIHZhbGlkYXRlTWVzc2FnZSAtIG1lc3NhZ2Ugd2FzIG5vdCBlbmNvZGVkIGFzIGhleC5gKSlcbiAgc2VsZi52YWxpZGF0ZVNlbmRlcihtc2dQYXJhbXMuZnJvbSwgZnVuY3Rpb24oZXJyLCBzZW5kZXJJc1ZhbGlkKXtcbiAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKVxuICAgIGlmICghc2VuZGVySXNWYWxpZCkgcmV0dXJuIGNiKG5ldyBFcnJvcihgVW5rbm93biBhZGRyZXNzIC0gdW5hYmxlIHRvIHNpZ24gbWVzc2FnZSBmb3IgdGhpcyBhZGRyZXNzOiBcIiR7bXNnUGFyYW1zLmZyb219XCJgKSlcbiAgICBjYigpXG4gIH0pXG59XG5cbkhvb2tlZFdhbGxldFN1YnByb3ZpZGVyLnByb3RvdHlwZS52YWxpZGF0ZURlY3J5cHRNZXNzYWdlID0gZnVuY3Rpb24obXNnUGFyYW1zLCBjYil7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIGlmIChtc2dQYXJhbXMuZnJvbSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gY2IobmV3IEVycm9yKGBVbmRlZmluZWQgYWRkcmVzcyAtIGZyb20gYWRkcmVzcyByZXF1aXJlZCB0byBkZWNyeXB0IG1lc3NhZ2UuYCkpXG4gIGlmIChtc2dQYXJhbXMuZGF0YSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gY2IobmV3IEVycm9yKGBVbmRlZmluZWQgbWVzc2FnZSAtIG1lc3NhZ2UgcmVxdWlyZWQgdG8gZGVjcnlwdCBtZXNzYWdlLmApKVxuICBpZiAoIWlzVmFsaWRIZXgobXNnUGFyYW1zLmRhdGEpKSByZXR1cm4gY2IobmV3IEVycm9yKGBIb29rZWRXYWxsZXRTdWJwcm92aWRlciAtIHZhbGlkYXRlRGVjcnlwdE1lc3NhZ2UgLSBtZXNzYWdlIHdhcyBub3QgZW5jb2RlZCBhcyBoZXguYCkpXG4gIHNlbGYudmFsaWRhdGVTZW5kZXIobXNnUGFyYW1zLmZyb20sIGZ1bmN0aW9uKGVyciwgc2VuZGVySXNWYWxpZCl7XG4gICAgaWYgKGVycikgcmV0dXJuIGNiKGVycilcbiAgICBpZiAoIXNlbmRlcklzVmFsaWQpIHJldHVybiBjYihuZXcgRXJyb3IoYFVua25vd24gYWRkcmVzcyAtIHVuYWJsZSB0byBkZWNyeXB0IG1lc3NhZ2UgZm9yIHRoaXMgYWRkcmVzczogXCIke21zZ1BhcmFtcy5mcm9tfVwiYCkpXG4gICAgY2IoKVxuICB9KVxufVxuXG5Ib29rZWRXYWxsZXRTdWJwcm92aWRlci5wcm90b3R5cGUudmFsaWRhdGVFbmNyeXB0aW9uUHVibGljS2V5ID0gZnVuY3Rpb24oYWRkcmVzcywgY2Ipe1xuICBjb25zdCBzZWxmID0gdGhpc1xuXG4gIHNlbGYudmFsaWRhdGVTZW5kZXIoYWRkcmVzcywgZnVuY3Rpb24oZXJyLCBzZW5kZXJJc1ZhbGlkKXtcbiAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKVxuICAgIGlmICghc2VuZGVySXNWYWxpZCkgcmV0dXJuIGNiKG5ldyBFcnJvcihgVW5rbm93biBhZGRyZXNzIC0gdW5hYmxlIHRvIG9idGFpbiBlbmNyeXB0aW9uIHB1YmxpYyBrZXkgZm9yIHRoaXMgYWRkcmVzczogXCIke2FkZHJlc3N9XCJgKSlcbiAgICBjYigpXG4gIH0pXG59XG5cbkhvb2tlZFdhbGxldFN1YnByb3ZpZGVyLnByb3RvdHlwZS52YWxpZGF0ZVR5cGVkTWVzc2FnZSA9IGZ1bmN0aW9uKG1zZ1BhcmFtcywgY2Ipe1xuICBpZiAobXNnUGFyYW1zLmZyb20gPT09IHVuZGVmaW5lZCkgcmV0dXJuIGNiKG5ldyBFcnJvcihgVW5kZWZpbmVkIGFkZHJlc3MgLSBmcm9tIGFkZHJlc3MgcmVxdWlyZWQgdG8gc2lnbiB0eXBlZCBkYXRhLmApKVxuICBpZiAobXNnUGFyYW1zLmRhdGEgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGNiKG5ldyBFcnJvcihgVW5kZWZpbmVkIGRhdGEgLSBtZXNzYWdlIHJlcXVpcmVkIHRvIHNpZ24gdHlwZWQgZGF0YS5gKSlcbiAgdGhpcy52YWxpZGF0ZVNlbmRlcihtc2dQYXJhbXMuZnJvbSwgZnVuY3Rpb24oZXJyLCBzZW5kZXJJc1ZhbGlkKXtcbiAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKVxuICAgIGlmICghc2VuZGVySXNWYWxpZCkgcmV0dXJuIGNiKG5ldyBFcnJvcihgVW5rbm93biBhZGRyZXNzIC0gdW5hYmxlIHRvIHNpZ24gbWVzc2FnZSBmb3IgdGhpcyBhZGRyZXNzOiBcIiR7bXNnUGFyYW1zLmZyb219XCJgKSlcbiAgICBjYigpXG4gIH0pXG59XG5cbkhvb2tlZFdhbGxldFN1YnByb3ZpZGVyLnByb3RvdHlwZS52YWxpZGF0ZVNlbmRlciA9IGZ1bmN0aW9uKHNlbmRlckFkZHJlc3MsIGNiKXtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgLy8gc2hvcnRjdXQ6IHVuZGVmaW5lZCBzZW5kZXIgaXMgaW52YWxpZFxuICBpZiAoIXNlbmRlckFkZHJlc3MpIHJldHVybiBjYihudWxsLCBmYWxzZSlcbiAgc2VsZi5nZXRBY2NvdW50cyhmdW5jdGlvbihlcnIsIGFjY291bnRzKXtcbiAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKVxuICAgIGNvbnN0IHNlbmRlcklzVmFsaWQgPSAoYWNjb3VudHMubWFwKHRvTG93ZXJDYXNlKS5pbmRleE9mKHNlbmRlckFkZHJlc3MudG9Mb3dlckNhc2UoKSkgIT09IC0xKVxuICAgIGNiKG51bGwsIHNlbmRlcklzVmFsaWQpXG4gIH0pXG59XG5cbi8vXG4vLyB0eCBoZWxwZXJzXG4vL1xuXG5Ib29rZWRXYWxsZXRTdWJwcm92aWRlci5wcm90b3R5cGUuZmluYWxpemVBbmRTdWJtaXRUeCA9IGZ1bmN0aW9uKHR4UGFyYW1zLCBjYikge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICAvLyBjYW4gb25seSBhbGxvdyBvbmUgdHggdG8gcGFzcyB0aHJvdWdoIHRoaXMgZmxvdyBhdCBhIHRpbWVcbiAgLy8gc28gd2UgY2FuIGF0b21pY2FsbHkgY29uc3VtZSBhIG5vbmNlXG4gIHNlbGYubm9uY2VMb2NrLnRha2UoZnVuY3Rpb24oKXtcbiAgICB3YXRlcmZhbGwoW1xuICAgICAgc2VsZi5maWxsSW5UeEV4dHJhcy5iaW5kKHNlbGYsIHR4UGFyYW1zKSxcbiAgICAgIHNlbGYuc2lnblRyYW5zYWN0aW9uLmJpbmQoc2VsZiksXG4gICAgICBzZWxmLnB1Ymxpc2hUcmFuc2FjdGlvbi5iaW5kKHNlbGYpLFxuICAgIF0sIGZ1bmN0aW9uKGVyciwgdHhIYXNoKXtcbiAgICAgIHNlbGYubm9uY2VMb2NrLmxlYXZlKClcbiAgICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpXG4gICAgICBjYihudWxsLCB0eEhhc2gpXG4gICAgfSlcbiAgfSlcbn1cblxuSG9va2VkV2FsbGV0U3VicHJvdmlkZXIucHJvdG90eXBlLmZpbmFsaXplVHggPSBmdW5jdGlvbih0eFBhcmFtcywgY2IpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgLy8gY2FuIG9ubHkgYWxsb3cgb25lIHR4IHRvIHBhc3MgdGhyb3VnaCB0aGlzIGZsb3cgYXQgYSB0aW1lXG4gIC8vIHNvIHdlIGNhbiBhdG9taWNhbGx5IGNvbnN1bWUgYSBub25jZVxuICBzZWxmLm5vbmNlTG9jay50YWtlKGZ1bmN0aW9uKCl7XG4gICAgd2F0ZXJmYWxsKFtcbiAgICAgIHNlbGYuZmlsbEluVHhFeHRyYXMuYmluZChzZWxmLCB0eFBhcmFtcyksXG4gICAgICBzZWxmLnNpZ25UcmFuc2FjdGlvbi5iaW5kKHNlbGYpLFxuICAgIF0sIGZ1bmN0aW9uKGVyciwgc2lnbmVkVHgpe1xuICAgICAgc2VsZi5ub25jZUxvY2subGVhdmUoKVxuICAgICAgaWYgKGVycikgcmV0dXJuIGNiKGVycilcbiAgICAgIGNiKG51bGwsIHtyYXc6IHNpZ25lZFR4LCB0eDogdHhQYXJhbXN9KVxuICAgIH0pXG4gIH0pXG59XG5cbkhvb2tlZFdhbGxldFN1YnByb3ZpZGVyLnByb3RvdHlwZS5wdWJsaXNoVHJhbnNhY3Rpb24gPSBmdW5jdGlvbihyYXdUeCwgY2IpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgc2VsZi5lbWl0UGF5bG9hZCh7XG4gICAgbWV0aG9kOiAnZXRoX3NlbmRSYXdUcmFuc2FjdGlvbicsXG4gICAgcGFyYW1zOiBbcmF3VHhdLFxuICB9LCBmdW5jdGlvbihlcnIsIHJlcyl7XG4gICAgaWYgKGVycikgcmV0dXJuIGNiKGVycilcbiAgICBjYihudWxsLCByZXMucmVzdWx0KVxuICB9KVxufVxuXG5Ib29rZWRXYWxsZXRTdWJwcm92aWRlci5wcm90b3R5cGUuZXN0aW1hdGVHYXMgPSBmdW5jdGlvbih0eFBhcmFtcywgY2IpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgZXN0aW1hdGVHYXMoc2VsZi5lbmdpbmUsIHR4UGFyYW1zLCBjYilcbn1cblxuSG9va2VkV2FsbGV0U3VicHJvdmlkZXIucHJvdG90eXBlLmdldEdhc1ByaWNlID0gZnVuY3Rpb24oY2IpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgc2VsZi5lbWl0UGF5bG9hZCh7IG1ldGhvZDogJ2V0aF9nYXNQcmljZScsIHBhcmFtczogW10gfSwgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgaWYgKGVycikgcmV0dXJuIGNiKGVycilcbiAgICBjYihudWxsLCByZXMucmVzdWx0KVxuICB9KVxufVxuXG5Ib29rZWRXYWxsZXRTdWJwcm92aWRlci5wcm90b3R5cGUuZmlsbEluVHhFeHRyYXMgPSBmdW5jdGlvbih0eFBhcmFtcywgY2Ipe1xuICBjb25zdCBzZWxmID0gdGhpc1xuICBjb25zdCBhZGRyZXNzID0gdHhQYXJhbXMuZnJvbVxuICAvLyBjb25zb2xlLmxvZygnZmlsbEluVHhFeHRyYXMgLSBhZGRyZXNzOicsIGFkZHJlc3MpXG5cbiAgY29uc3QgdGFza3MgPSB7fVxuXG4gIGlmICh0eFBhcmFtcy5nYXNQcmljZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gY29uc29sZS5sb2coXCJuZWVkIHRvIGdldCBnYXNwcmljZVwiKVxuICAgIHRhc2tzLmdhc1ByaWNlID0gc2VsZi5nZXRHYXNQcmljZS5iaW5kKHNlbGYpXG4gIH1cblxuICBpZiAodHhQYXJhbXMubm9uY2UgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIGNvbnNvbGUubG9nKFwibmVlZCB0byBnZXQgbm9uY2VcIilcbiAgICB0YXNrcy5ub25jZSA9IHNlbGYuZW1pdFBheWxvYWQuYmluZChzZWxmLCB7IG1ldGhvZDogJ2V0aF9nZXRUcmFuc2FjdGlvbkNvdW50JywgcGFyYW1zOiBbYWRkcmVzcywgJ3BlbmRpbmcnXSB9KVxuICB9XG5cbiAgaWYgKHR4UGFyYW1zLmdhcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gY29uc29sZS5sb2coXCJuZWVkIHRvIGdldCBnYXNcIilcbiAgICB0YXNrcy5nYXMgPSBzZWxmLmVzdGltYXRlR2FzLmJpbmQoc2VsZiwgY2xvbmVUeFBhcmFtcyh0eFBhcmFtcykpXG4gIH1cblxuICBwYXJhbGxlbCh0YXNrcywgZnVuY3Rpb24oZXJyLCB0YXNrUmVzdWx0cykge1xuICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpXG5cbiAgICBjb25zdCByZXN1bHQgPSB7fVxuICAgIGlmICh0YXNrUmVzdWx0cy5nYXNQcmljZSkgcmVzdWx0Lmdhc1ByaWNlID0gdGFza1Jlc3VsdHMuZ2FzUHJpY2VcbiAgICBpZiAodGFza1Jlc3VsdHMubm9uY2UpIHJlc3VsdC5ub25jZSA9IHRhc2tSZXN1bHRzLm5vbmNlLnJlc3VsdFxuICAgIGlmICh0YXNrUmVzdWx0cy5nYXMpIHJlc3VsdC5nYXMgPSB0YXNrUmVzdWx0cy5nYXNcblxuICAgIGNiKG51bGwsIGV4dGVuZCh0eFBhcmFtcywgcmVzdWx0KSlcbiAgfSlcbn1cblxuLy8gdXRpbFxuXG4vLyB3ZSB1c2UgdGhpcyB0byBjbGVhbiBhbnkgY3VzdG9tIHBhcmFtcyBmcm9tIHRoZSB0eFBhcmFtc1xuZnVuY3Rpb24gY2xvbmVUeFBhcmFtcyh0eFBhcmFtcyl7XG4gIHJldHVybiB7XG4gICAgZnJvbTogdHhQYXJhbXMuZnJvbSxcbiAgICB0bzogdHhQYXJhbXMudG8sXG4gICAgdmFsdWU6IHR4UGFyYW1zLnZhbHVlLFxuICAgIGRhdGE6IHR4UGFyYW1zLmRhdGEsXG4gICAgZ2FzOiB0eFBhcmFtcy5nYXMsXG4gICAgZ2FzUHJpY2U6IHR4UGFyYW1zLmdhc1ByaWNlLFxuICAgIG5vbmNlOiB0eFBhcmFtcy5ub25jZSxcbiAgfVxufVxuXG5mdW5jdGlvbiB0b0xvd2VyQ2FzZShzdHJpbmcpe1xuICByZXR1cm4gc3RyaW5nLnRvTG93ZXJDYXNlKClcbn1cblxuZnVuY3Rpb24gcmVzZW1ibGVzQWRkcmVzcyAoc3RyaW5nKSB7XG4gIGNvbnN0IGZpeGVkID0gZXRoVXRpbC5hZGRIZXhQcmVmaXgoc3RyaW5nKVxuICBjb25zdCBpc1ZhbGlkID0gZXRoVXRpbC5pc1ZhbGlkQWRkcmVzcyhmaXhlZClcbiAgcmV0dXJuIGlzVmFsaWRcbn1cblxuLy8gUmV0dXJucyB0cnVlIGlmIHJlc2VtYmxlcyBoZXggZGF0YVxuLy8gYnV0IGRlZmluaXRlbHkgbm90IGEgdmFsaWQgYWRkcmVzcy5cbmZ1bmN0aW9uIHJlc2VtYmxlc0RhdGEgKHN0cmluZykge1xuICBjb25zdCBmaXhlZCA9IGV0aFV0aWwuYWRkSGV4UHJlZml4KHN0cmluZylcbiAgY29uc3QgaXNWYWxpZEFkZHJlc3MgPSBldGhVdGlsLmlzVmFsaWRBZGRyZXNzKGZpeGVkKVxuICByZXR1cm4gIWlzVmFsaWRBZGRyZXNzICYmIGlzVmFsaWRIZXgoc3RyaW5nKVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkSGV4KGRhdGEpIHtcbiAgY29uc3QgaXNTdHJpbmcgPSB0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZydcbiAgaWYgKCFpc1N0cmluZykgcmV0dXJuIGZhbHNlXG4gIGNvbnN0IGlzSGV4UHJlZml4ZWQgPSBkYXRhLnNsaWNlKDAsMikgPT09ICcweCdcbiAgaWYgKCFpc0hleFByZWZpeGVkKSByZXR1cm4gZmFsc2VcbiAgY29uc3Qgbm9uUHJlZml4ZWQgPSBkYXRhLnNsaWNlKDIpXG4gIGNvbnN0IGlzVmFsaWQgPSBub25QcmVmaXhlZC5tYXRjaChoZXhSZWdleClcbiAgcmV0dXJuIGlzVmFsaWRcbn1cblxuZnVuY3Rpb24gbXVzdFByb3ZpZGVJbkNvbnN0cnVjdG9yKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHBhcmFtcywgY2IpIHtcbiAgICBjYihuZXcgRXJyb3IoJ1Byb3ZpZGVyRW5naW5lIC0gSG9va2VkV2FsbGV0U3VicHJvdmlkZXIgLSBNdXN0IHByb3ZpZGUgXCInICsgbWV0aG9kTmFtZSArICdcIiBmbiBpbiBjb25zdHJ1Y3RvciBvcHRpb25zJykpXG4gIH1cbn1cbiIsImNvbnN0IFN1YnByb3ZpZGVyID0gcmVxdWlyZSgnLi9zdWJwcm92aWRlci5qcycpXG5cbi8vIHdyYXBzIGEganNvbi1ycGMtZW5naW5lIG1pZGRsZXdhcmUgaW4gYSBzdWJwcm92aWRlciBpbnRlcmZhY2VcblxuY2xhc3MgSnNvblJwY0VuZ2luZU1pZGRsZXdhcmVTdWJwcm92aWRlciBleHRlbmRzIFN1YnByb3ZpZGVyIHtcblxuICAvLyB0YWtlIGEgY29uc3RydWN0b3JGbiB0byBjYWxsIG9uY2Ugd2UgaGF2ZSBhIHJlZmVyZW5jZSB0byB0aGUgZW5naW5lXG4gIGNvbnN0cnVjdG9yIChjb25zdHJ1Y3RvckZuKSB7XG4gICAgc3VwZXIoKVxuICAgIGlmICghY29uc3RydWN0b3JGbikgdGhyb3cgbmV3IEVycm9yKCdKc29uUnBjRW5naW5lTWlkZGxld2FyZVN1YnByb3ZpZGVyIC0gbm8gY29uc3RydWN0b3JGbiBzcGVjaWZpZWQnKVxuICAgIHRoaXMuX2NvbnN0cnVjdG9yRm4gPSBjb25zdHJ1Y3RvckZuXG4gIH1cblxuICAvLyB0aGlzIGlzIGNhbGxlZCBvbmNlIHRoZSBzdWJwcm92aWRlciBoYXMgYmVlbiBhZGRlZCB0byB0aGUgcHJvdmlkZXIgZW5naW5lXG4gIHNldEVuZ2luZSAoZW5naW5lKSB7XG4gICAgaWYgKHRoaXMubWlkZGxld2FyZSkgdGhyb3cgbmV3IEVycm9yKCdKc29uUnBjRW5naW5lTWlkZGxld2FyZVN1YnByb3ZpZGVyIC0gc3VicHJvdmlkZXIgYWRkZWQgdG8gZW5naW5lIHR3aWNlJylcbiAgICBjb25zdCBibG9ja1RyYWNrZXIgPSBlbmdpbmUuX2Jsb2NrVHJhY2tlclxuICAgIGNvbnN0IG1pZGRsZXdhcmUgPSB0aGlzLl9jb25zdHJ1Y3RvckZuKHsgZW5naW5lLCBwcm92aWRlcjogZW5naW5lLCBibG9ja1RyYWNrZXIgfSlcbiAgICBpZiAoIW1pZGRsZXdhcmUpIHRocm93IG5ldyBFcnJvcignSnNvblJwY0VuZ2luZU1pZGRsZXdhcmVTdWJwcm92aWRlciAtIF9jb25zdHJ1Y3RvckZuIGRpZCBub3QgcmV0dXJuIG1pZGRsZXdhcmUnKVxuICAgIGlmICh0eXBlb2YgbWlkZGxld2FyZSAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IEVycm9yKCdKc29uUnBjRW5naW5lTWlkZGxld2FyZVN1YnByb3ZpZGVyIC0gc3BlY2lmaWVkIG1pZGRsZXdhcmUgaXMgbm90IGEgZnVuY3Rpb24nKVxuICAgIHRoaXMubWlkZGxld2FyZSA9IG1pZGRsZXdhcmVcbiAgfVxuXG4gIGhhbmRsZVJlcXVlc3QgKHJlcSwgcHJvdkVuZ05leHQsIHByb3ZFbmdFbmQpIHtcbiAgICBjb25zdCByZXMgPSB7IGlkOiByZXEuaWQgfVxuICAgIHRoaXMubWlkZGxld2FyZShyZXEsIHJlcywgbWlkZGxld2FyZU5leHQsIG1pZGRsZXdhcmVFbmQpXG5cbiAgICBmdW5jdGlvbiBtaWRkbGV3YXJlTmV4dCAoaGFuZGxlcikge1xuICAgICAgcHJvdkVuZ05leHQoKGVyciwgcmVzdWx0LCBjYikgPT4ge1xuICAgICAgICAvLyB1cGRhdGUgcmVzcG9uc2Ugb2JqZWN0IHdpdGggcmVzdWx0IG9yIGVycm9yXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBkZWxldGUgcmVzLnJlc3VsdFxuICAgICAgICAgIHJlcy5lcnJvciA9IHsgbWVzc2FnZTogZXJyLm1lc3NhZ2UgfHwgZXJyIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXMucmVzdWx0ID0gcmVzdWx0XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2FsbCBtaWRkbGV3YXJlJ3MgbmV4dCBoYW5kbGVyIChldmVuIGlmIGVycm9yKVxuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGhhbmRsZXIoY2IpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2IoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1pZGRsZXdhcmVFbmQgKGVycikge1xuICAgICAgaWYgKGVycikgcmV0dXJuIHByb3ZFbmdFbmQoZXJyKVxuICAgICAgcHJvdkVuZ0VuZChudWxsLCByZXMucmVzdWx0KVxuICAgIH1cbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gSnNvblJwY0VuZ2luZU1pZGRsZXdhcmVTdWJwcm92aWRlclxuIiwiY29uc3QgaW5oZXJpdHMgPSByZXF1aXJlKCd1dGlsJykuaW5oZXJpdHNcbmNvbnN0IFRyYW5zYWN0aW9uID0gcmVxdWlyZSgnZXRoZXJldW1qcy10eCcpXG5jb25zdCBldGhVdGlsID0gcmVxdWlyZSgnZXRoZXJldW1qcy11dGlsJylcbmNvbnN0IFN1YnByb3ZpZGVyID0gcmVxdWlyZSgnLi9zdWJwcm92aWRlci5qcycpXG5jb25zdCBibG9ja1RhZ0ZvclBheWxvYWQgPSByZXF1aXJlKCcuLi91dGlsL3JwYy1jYWNoZS11dGlscycpLmJsb2NrVGFnRm9yUGF5bG9hZFxuXG5tb2R1bGUuZXhwb3J0cyA9IE5vbmNlVHJhY2tlclN1YnByb3ZpZGVyXG5cbi8vIGhhbmRsZXMgdGhlIGZvbGxvd2luZyBSUEMgbWV0aG9kczpcbi8vICAgZXRoX2dldFRyYW5zYWN0aW9uQ291bnQgKHBlbmRpbmcgb25seSlcbi8vXG4vLyBvYnNlcnZlcyB0aGUgZm9sbG93aW5nIFJQQyBtZXRob2RzOlxuLy8gICBldGhfc2VuZFJhd1RyYW5zYWN0aW9uXG4vLyAgIGV2bV9yZXZlcnQgKHRvIGNsZWFyIHRoZSBub25jZSBjYWNoZSlcblxuaW5oZXJpdHMoTm9uY2VUcmFja2VyU3VicHJvdmlkZXIsIFN1YnByb3ZpZGVyKVxuXG5mdW5jdGlvbiBOb25jZVRyYWNrZXJTdWJwcm92aWRlcihvcHRzKXtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcblxuICBzZWxmLm5vbmNlQ2FjaGUgPSB7fVxufVxuXG5Ob25jZVRyYWNrZXJTdWJwcm92aWRlci5wcm90b3R5cGUuaGFuZGxlUmVxdWVzdCA9IGZ1bmN0aW9uKHBheWxvYWQsIG5leHQsIGVuZCl7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG5cbiAgc3dpdGNoKHBheWxvYWQubWV0aG9kKSB7XG5cbiAgICBjYXNlICdldGhfZ2V0VHJhbnNhY3Rpb25Db3VudCc6XG4gICAgICB2YXIgYmxvY2tUYWcgPSBibG9ja1RhZ0ZvclBheWxvYWQocGF5bG9hZClcbiAgICAgIHZhciBhZGRyZXNzID0gcGF5bG9hZC5wYXJhbXNbMF0udG9Mb3dlckNhc2UoKVxuICAgICAgdmFyIGNhY2hlZFJlc3VsdCA9IHNlbGYubm9uY2VDYWNoZVthZGRyZXNzXVxuICAgICAgLy8gb25seSBoYW5kbGUgcmVxdWVzdHMgYWdhaW5zdCB0aGUgJ3BlbmRpbmcnIGJsb2NrVGFnXG4gICAgICBpZiAoYmxvY2tUYWcgPT09ICdwZW5kaW5nJykge1xuICAgICAgICAvLyBoYXMgYSByZXN1bHRcbiAgICAgICAgaWYgKGNhY2hlZFJlc3VsdCkge1xuICAgICAgICAgIGVuZChudWxsLCBjYWNoZWRSZXN1bHQpXG4gICAgICAgIC8vIGZhbGx0aHJvdWdoIHRoZW4gcG9wdWxhdGUgY2FjaGVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXh0KGZ1bmN0aW9uKGVyciwgcmVzdWx0LCBjYil7XG4gICAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2IoKVxuICAgICAgICAgICAgaWYgKHNlbGYubm9uY2VDYWNoZVthZGRyZXNzXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHNlbGYubm9uY2VDYWNoZVthZGRyZXNzXSA9IHJlc3VsdFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2IoKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHQoKVxuICAgICAgfVxuICAgICAgcmV0dXJuXG5cbiAgICBjYXNlICdldGhfc2VuZFJhd1RyYW5zYWN0aW9uJzpcbiAgICAgIC8vIGFsbG93IHRoZSByZXF1ZXN0IHRvIGNvbnRpbnVlIG5vcm1hbGx5XG4gICAgICBuZXh0KGZ1bmN0aW9uKGVyciwgcmVzdWx0LCBjYil7XG4gICAgICAgIC8vIG9ubHkgdXBkYXRlIGxvY2FsIG5vbmNlIGlmIHR4IHdhcyBzdWJtaXR0ZWQgY29ycmVjdGx5XG4gICAgICAgIGlmIChlcnIpIHJldHVybiBjYigpXG4gICAgICAgIC8vIHBhcnNlIHJhdyB0eFxuICAgICAgICB2YXIgcmF3VHggPSBwYXlsb2FkLnBhcmFtc1swXVxuICAgICAgICB2YXIgc3RyaXBwZWQgPSBldGhVdGlsLnN0cmlwSGV4UHJlZml4KHJhd1R4KVxuICAgICAgICB2YXIgcmF3RGF0YSA9IEJ1ZmZlci5mcm9tKGV0aFV0aWwuc3RyaXBIZXhQcmVmaXgocmF3VHgpLCAnaGV4JylcbiAgICAgICAgdmFyIHR4ID0gbmV3IFRyYW5zYWN0aW9uKEJ1ZmZlci5mcm9tKGV0aFV0aWwuc3RyaXBIZXhQcmVmaXgocmF3VHgpLCAnaGV4JykpXG4gICAgICAgIC8vIGV4dHJhY3QgYWRkcmVzc1xuICAgICAgICB2YXIgYWRkcmVzcyA9ICcweCcrdHguZ2V0U2VuZGVyQWRkcmVzcygpLnRvU3RyaW5nKCdoZXgnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIC8vIGV4dHJhY3Qgbm9uY2UgYW5kIGluY3JlbWVudFxuICAgICAgICB2YXIgbm9uY2UgPSBldGhVdGlsLmJ1ZmZlclRvSW50KHR4Lm5vbmNlKVxuICAgICAgICBub25jZSsrXG4gICAgICAgIC8vIGhleGlmeSBhbmQgbm9ybWFsaXplXG4gICAgICAgIHZhciBoZXhOb25jZSA9IG5vbmNlLnRvU3RyaW5nKDE2KVxuICAgICAgICBpZiAoaGV4Tm9uY2UubGVuZ3RoJTIpIGhleE5vbmNlID0gJzAnK2hleE5vbmNlXG4gICAgICAgIGhleE5vbmNlID0gJzB4JytoZXhOb25jZVxuICAgICAgICAvLyBkb250IHVwZGF0ZSBvdXIgcmVjb3JkIG9uIHRoZSBub25jZSB1bnRpbCB0aGUgc3VibWl0IHdhcyBzdWNjZXNzZnVsXG4gICAgICAgIC8vIHVwZGF0ZSBjYWNoZVxuICAgICAgICBzZWxmLm5vbmNlQ2FjaGVbYWRkcmVzc10gPSBoZXhOb25jZVxuICAgICAgICBjYigpXG4gICAgICB9KVxuICAgICAgcmV0dXJuXG5cbiAgIC8vIENsZWFyIGNhY2hlIG9uIGEgdGVzdHJwYyByZXZlcnRcbiAgIGNhc2UgJ2V2bV9yZXZlcnQnOlxuICAgICAgc2VsZi5ub25jZUNhY2hlID0ge31cbiAgICAgIG5leHQoKVxuICAgICAgcmV0dXJuXG5cbiAgICBkZWZhdWx0OlxuICAgICAgbmV4dCgpXG4gICAgICByZXR1cm5cblxuICB9XG59XG4iLCJjb25zdCBjcmVhdGVQYXlsb2FkID0gcmVxdWlyZSgnLi4vdXRpbC9jcmVhdGUtcGF5bG9hZC5qcycpXG5cbm1vZHVsZS5leHBvcnRzID0gU3ViUHJvdmlkZXJcblxuLy8gdGhpcyBpcyB0aGUgYmFzZSBjbGFzcyBmb3IgYSBzdWJwcm92aWRlciAtLSBtb3N0bHkgaGVscGVyc1xuXG5cbmZ1bmN0aW9uIFN1YlByb3ZpZGVyKCkge1xuXG59XG5cblN1YlByb3ZpZGVyLnByb3RvdHlwZS5zZXRFbmdpbmUgPSBmdW5jdGlvbihlbmdpbmUpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgaWYgKHNlbGYuZW5naW5lKSByZXR1cm5cbiAgc2VsZi5lbmdpbmUgPSBlbmdpbmVcbiAgZW5naW5lLm9uKCdibG9jaycsIGZ1bmN0aW9uKGJsb2NrKSB7XG4gICAgc2VsZi5jdXJyZW50QmxvY2sgPSBibG9ja1xuICB9KVxuXG4gIGVuZ2luZS5vbignc3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5zdGFydCgpXG4gIH0pXG5cbiAgZW5naW5lLm9uKCdzdG9wJywgZnVuY3Rpb24gKCkge1xuICAgIHNlbGYuc3RvcCgpXG4gIH0pXG59XG5cblN1YlByb3ZpZGVyLnByb3RvdHlwZS5oYW5kbGVSZXF1ZXN0ID0gZnVuY3Rpb24ocGF5bG9hZCwgbmV4dCwgZW5kKSB7XG4gIHRocm93IG5ldyBFcnJvcignU3VicHJvdmlkZXJzIHNob3VsZCBvdmVycmlkZSBgaGFuZGxlUmVxdWVzdGAuJylcbn1cblxuU3ViUHJvdmlkZXIucHJvdG90eXBlLmVtaXRQYXlsb2FkID0gZnVuY3Rpb24ocGF5bG9hZCwgY2Ipe1xuICBjb25zdCBzZWxmID0gdGhpc1xuICBzZWxmLmVuZ2luZS5zZW5kQXN5bmMoY3JlYXRlUGF5bG9hZChwYXlsb2FkKSwgY2IpXG59XG5cbi8vIGR1bW1pZXMgZm9yIG92ZXJyaWRpbmdcblxuU3ViUHJvdmlkZXIucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7fVxuXG5TdWJQcm92aWRlci5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7fVxuIiwiY29uc3QgUHJvdmlkZXJTdWJwcm92aWRlciA9IHJlcXVpcmUoJy4vanNvbi1ycGMtZW5naW5lLW1pZGRsZXdhcmUnKVxuY29uc3QgY3JlYXRlU3Vic2NyaXB0aW9uTWFuYWdlciA9IHJlcXVpcmUoJ2V0aC1qc29uLXJwYy1maWx0ZXJzL3N1YnNjcmlwdGlvbk1hbmFnZXInKVxuXG5jbGFzcyBTdWJzY3JpcHRpb25zU3VicHJvdmlkZXIgZXh0ZW5kcyBQcm92aWRlclN1YnByb3ZpZGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKHsgYmxvY2tUcmFja2VyLCBwcm92aWRlciwgZW5naW5lIH0pID0+IHtcbiAgICAgIGNvbnN0IHsgZXZlbnRzLCBtaWRkbGV3YXJlIH0gPSBjcmVhdGVTdWJzY3JpcHRpb25NYW5hZ2VyKHsgYmxvY2tUcmFja2VyLCBwcm92aWRlciB9KVxuICAgICAgLy8gZm9yd2FyZCBzdWJzY3JpcHRpb24gZXZlbnRzIG9uIHRoZSBlbmdpbmVcbiAgICAgIGV2ZW50cy5vbignbm90aWZpY2F0aW9uJywgKGRhdGEpID0+IGVuZ2luZS5lbWl0KCdkYXRhJywgbnVsbCwgZGF0YSkpXG4gICAgICAvLyByZXR1cm4gdGhlIHN1YnNjcmlwdGlvbiBpbnN0YWxsL3JlbW92ZSBtaWRkbGV3YXJlXG4gICAgICByZXR1cm4gbWlkZGxld2FyZVxuICAgIH0pXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTdWJzY3JpcHRpb25zU3VicHJvdmlkZXJcbiIsImNvbnN0IGdldFJhbmRvbUlkID0gcmVxdWlyZSgnLi9yYW5kb20taWQuanMnKVxuY29uc3QgZXh0ZW5kID0gcmVxdWlyZSgneHRlbmQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVBheWxvYWRcblxuXG5mdW5jdGlvbiBjcmVhdGVQYXlsb2FkKGRhdGEpe1xuICByZXR1cm4gZXh0ZW5kKHtcbiAgICAvLyBkZWZhdWx0c1xuICAgIGlkOiBnZXRSYW5kb21JZCgpLFxuICAgIGpzb25ycGM6ICcyLjAnLFxuICAgIHBhcmFtczogW10sXG4gICAgLy8gdXNlci1zcGVjaWZpZWRcbiAgfSwgZGF0YSlcbn1cbiIsImNvbnN0IGNyZWF0ZVBheWxvYWQgPSByZXF1aXJlKCcuL2NyZWF0ZS1wYXlsb2FkLmpzJylcblxubW9kdWxlLmV4cG9ydHMgPSBlc3RpbWF0ZUdhc1xuXG4vKlxuXG5UaGlzIGlzIGEgd29yayBhcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9nby1ldGhlcmV1bS9pc3N1ZXMvMjU3N1xuXG4qL1xuXG5cbmZ1bmN0aW9uIGVzdGltYXRlR2FzKHByb3ZpZGVyLCB0eFBhcmFtcywgY2IpIHtcbiAgcHJvdmlkZXIuc2VuZEFzeW5jKGNyZWF0ZVBheWxvYWQoe1xuICAgIG1ldGhvZDogJ2V0aF9lc3RpbWF0ZUdhcycsXG4gICAgcGFyYW1zOiBbdHhQYXJhbXNdXG4gIH0pLCBmdW5jdGlvbihlcnIsIHJlcyl7XG4gICAgaWYgKGVycikge1xuICAgICAgLy8gaGFuZGxlIHNpbXBsZSB2YWx1ZSB0cmFuc2ZlciBjYXNlXG4gICAgICBpZiAoZXJyLm1lc3NhZ2UgPT09ICdubyBjb250cmFjdCBjb2RlIGF0IGdpdmVuIGFkZHJlc3MnKSB7XG4gICAgICAgIHJldHVybiBjYihudWxsLCAnMHhjZjA4JylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjYihlcnIpICAgICAgICBcbiAgICAgIH1cbiAgICB9XG4gICAgY2IobnVsbCwgcmVzLnJlc3VsdClcbiAgfSlcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVJhbmRvbUlkXG5cblxuZnVuY3Rpb24gY3JlYXRlUmFuZG9tSWQgKCkge1xuICAvLyByYW5kb20gaWRcbiAgcmV0dXJuIE1hdGguZmxvb3IoTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgKiBNYXRoLnJhbmRvbSgpKVxufSIsImNvbnN0IHN0cmluZ2lmeSA9IHJlcXVpcmUoJ2pzb24tc3RhYmxlLXN0cmluZ2lmeScpXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjYWNoZUlkZW50aWZpZXJGb3JQYXlsb2FkOiBjYWNoZUlkZW50aWZpZXJGb3JQYXlsb2FkLFxuICBjYW5DYWNoZTogY2FuQ2FjaGUsXG4gIGJsb2NrVGFnRm9yUGF5bG9hZDogYmxvY2tUYWdGb3JQYXlsb2FkLFxuICBwYXJhbXNXaXRob3V0QmxvY2tUYWc6IHBhcmFtc1dpdGhvdXRCbG9ja1RhZyxcbiAgYmxvY2tUYWdQYXJhbUluZGV4OiBibG9ja1RhZ1BhcmFtSW5kZXgsXG4gIGNhY2hlVHlwZUZvclBheWxvYWQ6IGNhY2hlVHlwZUZvclBheWxvYWQsXG59XG5cbmZ1bmN0aW9uIGNhY2hlSWRlbnRpZmllckZvclBheWxvYWQocGF5bG9hZCwgb3B0cyA9IHt9KXtcbiAgaWYgKCFjYW5DYWNoZShwYXlsb2FkKSkgcmV0dXJuIG51bGxcbiAgY29uc3QgeyBpbmNsdWRlQmxvY2tSZWYgfSA9IG9wdHNcbiAgY29uc3QgcGFyYW1zID0gaW5jbHVkZUJsb2NrUmVmID8gcGF5bG9hZC5wYXJhbXMgOiBwYXJhbXNXaXRob3V0QmxvY2tUYWcocGF5bG9hZClcbiAgcmV0dXJuIHBheWxvYWQubWV0aG9kICsgJzonICsgc3RyaW5naWZ5KHBhcmFtcylcbn1cblxuZnVuY3Rpb24gY2FuQ2FjaGUocGF5bG9hZCl7XG4gIHJldHVybiBjYWNoZVR5cGVGb3JQYXlsb2FkKHBheWxvYWQpICE9PSAnbmV2ZXInXG59XG5cbmZ1bmN0aW9uIGJsb2NrVGFnRm9yUGF5bG9hZChwYXlsb2FkKXtcbiAgdmFyIGluZGV4ID0gYmxvY2tUYWdQYXJhbUluZGV4KHBheWxvYWQpO1xuXG4gIC8vIEJsb2NrIHRhZyBwYXJhbSBub3QgcGFzc2VkLlxuICBpZiAoaW5kZXggPj0gcGF5bG9hZC5wYXJhbXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gcGF5bG9hZC5wYXJhbXNbaW5kZXhdO1xufVxuXG5mdW5jdGlvbiBwYXJhbXNXaXRob3V0QmxvY2tUYWcocGF5bG9hZCl7XG4gIHZhciBpbmRleCA9IGJsb2NrVGFnUGFyYW1JbmRleChwYXlsb2FkKTtcblxuICAvLyBCbG9jayB0YWcgcGFyYW0gbm90IHBhc3NlZC5cbiAgaWYgKGluZGV4ID49IHBheWxvYWQucGFyYW1zLmxlbmd0aCkge1xuICAgIHJldHVybiBwYXlsb2FkLnBhcmFtcztcbiAgfVxuXG4gIC8vIGV0aF9nZXRCbG9ja0J5TnVtYmVyIGhhcyB0aGUgYmxvY2sgdGFnIGZpcnN0LCB0aGVuIHRoZSBvcHRpb25hbCBpbmNsdWRlVHg/IHBhcmFtXG4gIGlmIChwYXlsb2FkLm1ldGhvZCA9PT0gJ2V0aF9nZXRCbG9ja0J5TnVtYmVyJykge1xuICAgIHJldHVybiBwYXlsb2FkLnBhcmFtcy5zbGljZSgxKTtcbiAgfVxuXG4gIHJldHVybiBwYXlsb2FkLnBhcmFtcy5zbGljZSgwLGluZGV4KTtcbn1cblxuZnVuY3Rpb24gYmxvY2tUYWdQYXJhbUluZGV4KHBheWxvYWQpe1xuICBzd2l0Y2gocGF5bG9hZC5tZXRob2QpIHtcbiAgICAvLyBibG9ja1RhZyBpcyB0aGlyZCBwYXJhbVxuICAgIGNhc2UgJ2V0aF9nZXRTdG9yYWdlQXQnOlxuICAgICAgcmV0dXJuIDJcbiAgICAvLyBibG9ja1RhZyBpcyBzZWNvbmQgcGFyYW1cbiAgICBjYXNlICdldGhfZ2V0QmFsYW5jZSc6XG4gICAgY2FzZSAnZXRoX2dldENvZGUnOlxuICAgIGNhc2UgJ2V0aF9nZXRUcmFuc2FjdGlvbkNvdW50JzpcbiAgICBjYXNlICdldGhfY2FsbCc6XG4gICAgY2FzZSAnZXRoX2VzdGltYXRlR2FzJzpcbiAgICAgIHJldHVybiAxXG4gICAgLy8gYmxvY2tUYWcgaXMgZmlyc3QgcGFyYW1cbiAgICBjYXNlICdldGhfZ2V0QmxvY2tCeU51bWJlcic6XG4gICAgICByZXR1cm4gMFxuICAgIC8vIHRoZXJlIGlzIG5vIGJsb2NrVGFnXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWNoZVR5cGVGb3JQYXlsb2FkKHBheWxvYWQpIHtcbiAgc3dpdGNoIChwYXlsb2FkLm1ldGhvZCkge1xuICAgIC8vIGNhY2hlIHBlcm1hbmVudGx5XG4gICAgY2FzZSAnd2ViM19jbGllbnRWZXJzaW9uJzpcbiAgICBjYXNlICd3ZWIzX3NoYTMnOlxuICAgIGNhc2UgJ2V0aF9wcm90b2NvbFZlcnNpb24nOlxuICAgIGNhc2UgJ2V0aF9nZXRCbG9ja1RyYW5zYWN0aW9uQ291bnRCeUhhc2gnOlxuICAgIGNhc2UgJ2V0aF9nZXRVbmNsZUNvdW50QnlCbG9ja0hhc2gnOlxuICAgIGNhc2UgJ2V0aF9nZXRDb2RlJzpcbiAgICBjYXNlICdldGhfZ2V0QmxvY2tCeUhhc2gnOlxuICAgIGNhc2UgJ2V0aF9nZXRUcmFuc2FjdGlvbkJ5SGFzaCc6XG4gICAgY2FzZSAnZXRoX2dldFRyYW5zYWN0aW9uQnlCbG9ja0hhc2hBbmRJbmRleCc6XG4gICAgY2FzZSAnZXRoX2dldFRyYW5zYWN0aW9uUmVjZWlwdCc6XG4gICAgY2FzZSAnZXRoX2dldFVuY2xlQnlCbG9ja0hhc2hBbmRJbmRleCc6XG4gICAgY2FzZSAnZXRoX2dldENvbXBpbGVycyc6XG4gICAgY2FzZSAnZXRoX2NvbXBpbGVMTEwnOlxuICAgIGNhc2UgJ2V0aF9jb21waWxlU29saWRpdHknOlxuICAgIGNhc2UgJ2V0aF9jb21waWxlU2VycGVudCc6XG4gICAgY2FzZSAnc2hoX3ZlcnNpb24nOlxuICAgICAgcmV0dXJuICdwZXJtYSdcblxuICAgIC8vIGNhY2hlIHVudGlsIGZvcmtcbiAgICBjYXNlICdldGhfZ2V0QmxvY2tCeU51bWJlcic6XG4gICAgY2FzZSAnZXRoX2dldEJsb2NrVHJhbnNhY3Rpb25Db3VudEJ5TnVtYmVyJzpcbiAgICBjYXNlICdldGhfZ2V0VW5jbGVDb3VudEJ5QmxvY2tOdW1iZXInOlxuICAgIGNhc2UgJ2V0aF9nZXRUcmFuc2FjdGlvbkJ5QmxvY2tOdW1iZXJBbmRJbmRleCc6XG4gICAgY2FzZSAnZXRoX2dldFVuY2xlQnlCbG9ja051bWJlckFuZEluZGV4JzpcbiAgICAgIHJldHVybiAnZm9yaydcblxuICAgIC8vIGNhY2hlIGZvciBibG9ja1xuICAgIGNhc2UgJ2V0aF9nYXNQcmljZSc6XG4gICAgY2FzZSAnZXRoX2dldEJhbGFuY2UnOlxuICAgIGNhc2UgJ2V0aF9nZXRTdG9yYWdlQXQnOlxuICAgIGNhc2UgJ2V0aF9nZXRUcmFuc2FjdGlvbkNvdW50JzpcbiAgICBjYXNlICdldGhfY2FsbCc6XG4gICAgY2FzZSAnZXRoX2VzdGltYXRlR2FzJzpcbiAgICBjYXNlICdldGhfZ2V0RmlsdGVyTG9ncyc6XG4gICAgY2FzZSAnZXRoX2dldExvZ3MnOlxuICAgIGNhc2UgJ2V0aF9ibG9ja051bWJlcic6XG4gICAgICByZXR1cm4gJ2Jsb2NrJ1xuXG4gICAgLy8gbmV2ZXIgY2FjaGVcbiAgICBjYXNlICduZXRfdmVyc2lvbic6XG4gICAgY2FzZSAnbmV0X3BlZXJDb3VudCc6XG4gICAgY2FzZSAnbmV0X2xpc3RlbmluZyc6XG4gICAgY2FzZSAnZXRoX3N5bmNpbmcnOlxuICAgIGNhc2UgJ2V0aF9zaWduJzpcbiAgICBjYXNlICdldGhfY29pbmJhc2UnOlxuICAgIGNhc2UgJ2V0aF9taW5pbmcnOlxuICAgIGNhc2UgJ2V0aF9oYXNocmF0ZSc6XG4gICAgY2FzZSAnZXRoX2FjY291bnRzJzpcbiAgICBjYXNlICdldGhfc2VuZFRyYW5zYWN0aW9uJzpcbiAgICBjYXNlICdldGhfc2VuZFJhd1RyYW5zYWN0aW9uJzpcbiAgICBjYXNlICdldGhfbmV3RmlsdGVyJzpcbiAgICBjYXNlICdldGhfbmV3QmxvY2tGaWx0ZXInOlxuICAgIGNhc2UgJ2V0aF9uZXdQZW5kaW5nVHJhbnNhY3Rpb25GaWx0ZXInOlxuICAgIGNhc2UgJ2V0aF91bmluc3RhbGxGaWx0ZXInOlxuICAgIGNhc2UgJ2V0aF9nZXRGaWx0ZXJDaGFuZ2VzJzpcbiAgICBjYXNlICdldGhfZ2V0V29yayc6XG4gICAgY2FzZSAnZXRoX3N1Ym1pdFdvcmsnOlxuICAgIGNhc2UgJ2V0aF9zdWJtaXRIYXNocmF0ZSc6XG4gICAgY2FzZSAnZGJfcHV0U3RyaW5nJzpcbiAgICBjYXNlICdkYl9nZXRTdHJpbmcnOlxuICAgIGNhc2UgJ2RiX3B1dEhleCc6XG4gICAgY2FzZSAnZGJfZ2V0SGV4JzpcbiAgICBjYXNlICdzaGhfcG9zdCc6XG4gICAgY2FzZSAnc2hoX25ld0lkZW50aXR5JzpcbiAgICBjYXNlICdzaGhfaGFzSWRlbnRpdHknOlxuICAgIGNhc2UgJ3NoaF9uZXdHcm91cCc6XG4gICAgY2FzZSAnc2hoX2FkZFRvR3JvdXAnOlxuICAgIGNhc2UgJ3NoaF9uZXdGaWx0ZXInOlxuICAgIGNhc2UgJ3NoaF91bmluc3RhbGxGaWx0ZXInOlxuICAgIGNhc2UgJ3NoaF9nZXRGaWx0ZXJDaGFuZ2VzJzpcbiAgICBjYXNlICdzaGhfZ2V0TWVzc2FnZXMnOlxuICAgICAgcmV0dXJuICduZXZlcidcbiAgfVxufVxuIiwiY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG5jb25zdCBpbmhlcml0cyA9IHJlcXVpcmUoJ3V0aWwnKS5pbmhlcml0c1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0b3BsaWdodFxuXG5cbmluaGVyaXRzKFN0b3BsaWdodCwgRXZlbnRFbWl0dGVyKVxuXG5mdW5jdGlvbiBTdG9wbGlnaHQoKXtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgRXZlbnRFbWl0dGVyLmNhbGwoc2VsZilcbiAgc2VsZi5pc0xvY2tlZCA9IHRydWVcbn1cblxuU3RvcGxpZ2h0LnByb3RvdHlwZS5nbyA9IGZ1bmN0aW9uKCl7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHNlbGYuaXNMb2NrZWQgPSBmYWxzZVxuICBzZWxmLmVtaXQoJ3VubG9jaycpXG59XG5cblN0b3BsaWdodC5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCl7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHNlbGYuaXNMb2NrZWQgPSB0cnVlXG4gIHNlbGYuZW1pdCgnbG9jaycpXG59XG5cblN0b3BsaWdodC5wcm90b3R5cGUuYXdhaXQgPSBmdW5jdGlvbihmbil7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIGlmIChzZWxmLmlzTG9ja2VkKSB7XG4gICAgc2VsZi5vbmNlKCd1bmxvY2snLCBmbilcbiAgfSBlbHNlIHtcbiAgICBzZXRUaW1lb3V0KGZuKVxuICB9XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldExvY2FsU3RvcmFnZSA9IGV4cG9ydHMuZ2V0TG9jYWxTdG9yYWdlT3JUaHJvdyA9IGV4cG9ydHMuZ2V0Q3J5cHRvID0gZXhwb3J0cy5nZXRDcnlwdG9PclRocm93ID0gZXhwb3J0cy5nZXRMb2NhdGlvbiA9IGV4cG9ydHMuZ2V0TG9jYXRpb25PclRocm93ID0gZXhwb3J0cy5nZXROYXZpZ2F0b3IgPSBleHBvcnRzLmdldE5hdmlnYXRvck9yVGhyb3cgPSBleHBvcnRzLmdldERvY3VtZW50ID0gZXhwb3J0cy5nZXREb2N1bWVudE9yVGhyb3cgPSBleHBvcnRzLmdldEZyb21XaW5kb3dPclRocm93ID0gZXhwb3J0cy5nZXRGcm9tV2luZG93ID0gdm9pZCAwO1xuZnVuY3Rpb24gZ2V0RnJvbVdpbmRvdyhuYW1lKSB7XG4gICAgbGV0IHJlcyA9IHVuZGVmaW5lZDtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93W25hbWVdICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJlcyA9IHdpbmRvd1tuYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuZ2V0RnJvbVdpbmRvdyA9IGdldEZyb21XaW5kb3c7XG5mdW5jdGlvbiBnZXRGcm9tV2luZG93T3JUaHJvdyhuYW1lKSB7XG4gICAgY29uc3QgcmVzID0gZ2V0RnJvbVdpbmRvdyhuYW1lKTtcbiAgICBpZiAoIXJlcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bmFtZX0gaXMgbm90IGRlZmluZWQgaW4gV2luZG93YCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLmdldEZyb21XaW5kb3dPclRocm93ID0gZ2V0RnJvbVdpbmRvd09yVGhyb3c7XG5mdW5jdGlvbiBnZXREb2N1bWVudE9yVGhyb3coKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3dPclRocm93KFwiZG9jdW1lbnRcIik7XG59XG5leHBvcnRzLmdldERvY3VtZW50T3JUaHJvdyA9IGdldERvY3VtZW50T3JUaHJvdztcbmZ1bmN0aW9uIGdldERvY3VtZW50KCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93KFwiZG9jdW1lbnRcIik7XG59XG5leHBvcnRzLmdldERvY3VtZW50ID0gZ2V0RG9jdW1lbnQ7XG5mdW5jdGlvbiBnZXROYXZpZ2F0b3JPclRocm93KCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93T3JUaHJvdyhcIm5hdmlnYXRvclwiKTtcbn1cbmV4cG9ydHMuZ2V0TmF2aWdhdG9yT3JUaHJvdyA9IGdldE5hdmlnYXRvck9yVGhyb3c7XG5mdW5jdGlvbiBnZXROYXZpZ2F0b3IoKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3coXCJuYXZpZ2F0b3JcIik7XG59XG5leHBvcnRzLmdldE5hdmlnYXRvciA9IGdldE5hdmlnYXRvcjtcbmZ1bmN0aW9uIGdldExvY2F0aW9uT3JUaHJvdygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvd09yVGhyb3coXCJsb2NhdGlvblwiKTtcbn1cbmV4cG9ydHMuZ2V0TG9jYXRpb25PclRocm93ID0gZ2V0TG9jYXRpb25PclRocm93O1xuZnVuY3Rpb24gZ2V0TG9jYXRpb24oKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3coXCJsb2NhdGlvblwiKTtcbn1cbmV4cG9ydHMuZ2V0TG9jYXRpb24gPSBnZXRMb2NhdGlvbjtcbmZ1bmN0aW9uIGdldENyeXB0b09yVGhyb3coKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3dPclRocm93KFwiY3J5cHRvXCIpO1xufVxuZXhwb3J0cy5nZXRDcnlwdG9PclRocm93ID0gZ2V0Q3J5cHRvT3JUaHJvdztcbmZ1bmN0aW9uIGdldENyeXB0bygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvdyhcImNyeXB0b1wiKTtcbn1cbmV4cG9ydHMuZ2V0Q3J5cHRvID0gZ2V0Q3J5cHRvO1xuZnVuY3Rpb24gZ2V0TG9jYWxTdG9yYWdlT3JUaHJvdygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvd09yVGhyb3coXCJsb2NhbFN0b3JhZ2VcIik7XG59XG5leHBvcnRzLmdldExvY2FsU3RvcmFnZU9yVGhyb3cgPSBnZXRMb2NhbFN0b3JhZ2VPclRocm93O1xuZnVuY3Rpb24gZ2V0TG9jYWxTdG9yYWdlKCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93KFwibG9jYWxTdG9yYWdlXCIpO1xufVxuZXhwb3J0cy5nZXRMb2NhbFN0b3JhZ2UgPSBnZXRMb2NhbFN0b3JhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0V2luZG93TWV0YWRhdGEgPSB2b2lkIDA7XG5jb25zdCB3aW5kb3dfZ2V0dGVyc18xID0gcmVxdWlyZShcIkB3YWxsZXRjb25uZWN0L3dpbmRvdy1nZXR0ZXJzXCIpO1xuZnVuY3Rpb24gZ2V0V2luZG93TWV0YWRhdGEoKSB7XG4gICAgbGV0IGRvYztcbiAgICBsZXQgbG9jO1xuICAgIHRyeSB7XG4gICAgICAgIGRvYyA9IHdpbmRvd19nZXR0ZXJzXzEuZ2V0RG9jdW1lbnRPclRocm93KCk7XG4gICAgICAgIGxvYyA9IHdpbmRvd19nZXR0ZXJzXzEuZ2V0TG9jYXRpb25PclRocm93KCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRJY29ucygpIHtcbiAgICAgICAgY29uc3QgbGlua3MgPSBkb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJsaW5rXCIpO1xuICAgICAgICBjb25zdCBpY29ucyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5rID0gbGlua3NbaV07XG4gICAgICAgICAgICBjb25zdCByZWwgPSBsaW5rLmdldEF0dHJpYnV0ZShcInJlbFwiKTtcbiAgICAgICAgICAgIGlmIChyZWwpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVsLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcImljb25cIikgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBocmVmID0gbGluay5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaHJlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhyZWYudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiaHR0cHM6XCIpID09PSAtMSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWYudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiaHR0cDpcIikgPT09IC0xICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZi5pbmRleE9mKFwiLy9cIikgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYWJzb2x1dGVIcmVmID0gbG9jLnByb3RvY29sICsgXCIvL1wiICsgbG9jLmhvc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhyZWYuaW5kZXhPZihcIi9cIikgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJzb2x1dGVIcmVmICs9IGhyZWY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXRoID0gbG9jLnBhdGhuYW1lLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmluYWxQYXRoID0gcGF0aC5qb2luKFwiL1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJzb2x1dGVIcmVmICs9IGZpbmFsUGF0aCArIFwiL1wiICsgaHJlZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbnMucHVzaChhYnNvbHV0ZUhyZWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaHJlZi5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhYnNvbHV0ZVVybCA9IGxvYy5wcm90b2NvbCArIGhyZWY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbnMucHVzaChhYnNvbHV0ZVVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29ucy5wdXNoKGhyZWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpY29ucztcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0V2luZG93TWV0YWRhdGFPZkFueSguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IG1ldGFUYWdzID0gZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibWV0YVwiKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXRhVGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gbWV0YVRhZ3NbaV07XG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gW1wiaXRlbXByb3BcIiwgXCJwcm9wZXJ0eVwiLCBcIm5hbWVcIl1cbiAgICAgICAgICAgICAgICAubWFwKCh0YXJnZXQpID0+IHRhZy5nZXRBdHRyaWJ1dGUodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChhdHRyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGF0dHIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3MuaW5jbHVkZXMoYXR0cik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMubGVuZ3RoICYmIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gdGFnLmdldEF0dHJpYnV0ZShcImNvbnRlbnRcIik7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXROYW1lKCkge1xuICAgICAgICBsZXQgbmFtZSA9IGdldFdpbmRvd01ldGFkYXRhT2ZBbnkoXCJuYW1lXCIsIFwib2c6c2l0ZV9uYW1lXCIsIFwib2c6dGl0bGVcIiwgXCJ0d2l0dGVyOnRpdGxlXCIpO1xuICAgICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgICAgIG5hbWUgPSBkb2MudGl0bGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldERlc2NyaXB0aW9uKCkge1xuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IGdldFdpbmRvd01ldGFkYXRhT2ZBbnkoXCJkZXNjcmlwdGlvblwiLCBcIm9nOmRlc2NyaXB0aW9uXCIsIFwidHdpdHRlcjpkZXNjcmlwdGlvblwiLCBcImtleXdvcmRzXCIpO1xuICAgICAgICByZXR1cm4gZGVzY3JpcHRpb247XG4gICAgfVxuICAgIGNvbnN0IG5hbWUgPSBnZXROYW1lKCk7XG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSBnZXREZXNjcmlwdGlvbigpO1xuICAgIGNvbnN0IHVybCA9IGxvYy5vcmlnaW47XG4gICAgY29uc3QgaWNvbnMgPSBnZXRJY29ucygpO1xuICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICB1cmwsXG4gICAgICAgIGljb25zLFxuICAgICAgICBuYW1lLFxuICAgIH07XG4gICAgcmV0dXJuIG1ldGE7XG59XG5leHBvcnRzLmdldFdpbmRvd01ldGFkYXRhID0gZ2V0V2luZG93TWV0YWRhdGE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGRlc2VsZWN0Q3VycmVudCA9IHJlcXVpcmUoXCJ0b2dnbGUtc2VsZWN0aW9uXCIpO1xuXG52YXIgY2xpcGJvYXJkVG9JRTExRm9ybWF0dGluZyA9IHtcbiAgXCJ0ZXh0L3BsYWluXCI6IFwiVGV4dFwiLFxuICBcInRleHQvaHRtbFwiOiBcIlVybFwiLFxuICBcImRlZmF1bHRcIjogXCJUZXh0XCJcbn1cblxudmFyIGRlZmF1bHRNZXNzYWdlID0gXCJDb3B5IHRvIGNsaXBib2FyZDogI3trZXl9LCBFbnRlclwiO1xuXG5mdW5jdGlvbiBmb3JtYXQobWVzc2FnZSkge1xuICB2YXIgY29weUtleSA9ICgvbWFjIG9zIHgvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpID8gXCLijJhcIiA6IFwiQ3RybFwiKSArIFwiK0NcIjtcbiAgcmV0dXJuIG1lc3NhZ2UucmVwbGFjZSgvI3tcXHMqa2V5XFxzKn0vZywgY29weUtleSk7XG59XG5cbmZ1bmN0aW9uIGNvcHkodGV4dCwgb3B0aW9ucykge1xuICB2YXIgZGVidWcsXG4gICAgbWVzc2FnZSxcbiAgICByZXNlbGVjdFByZXZpb3VzLFxuICAgIHJhbmdlLFxuICAgIHNlbGVjdGlvbixcbiAgICBtYXJrLFxuICAgIHN1Y2Nlc3MgPSBmYWxzZTtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGRlYnVnID0gb3B0aW9ucy5kZWJ1ZyB8fCBmYWxzZTtcbiAgdHJ5IHtcbiAgICByZXNlbGVjdFByZXZpb3VzID0gZGVzZWxlY3RDdXJyZW50KCk7XG5cbiAgICByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgc2VsZWN0aW9uID0gZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgICBtYXJrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgbWFyay50ZXh0Q29udGVudCA9IHRleHQ7XG4gICAgLy8gcmVzZXQgdXNlciBzdHlsZXMgZm9yIHNwYW4gZWxlbWVudFxuICAgIG1hcmsuc3R5bGUuYWxsID0gXCJ1bnNldFwiO1xuICAgIC8vIHByZXZlbnRzIHNjcm9sbGluZyB0byB0aGUgZW5kIG9mIHRoZSBwYWdlXG4gICAgbWFyay5zdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWRcIjtcbiAgICBtYXJrLnN0eWxlLnRvcCA9IDA7XG4gICAgbWFyay5zdHlsZS5jbGlwID0gXCJyZWN0KDAsIDAsIDAsIDApXCI7XG4gICAgLy8gdXNlZCB0byBwcmVzZXJ2ZSBzcGFjZXMgYW5kIGxpbmUgYnJlYWtzXG4gICAgbWFyay5zdHlsZS53aGl0ZVNwYWNlID0gXCJwcmVcIjtcbiAgICAvLyBkbyBub3QgaW5oZXJpdCB1c2VyLXNlbGVjdCAoaXQgbWF5IGJlIGBub25lYClcbiAgICBtYXJrLnN0eWxlLndlYmtpdFVzZXJTZWxlY3QgPSBcInRleHRcIjtcbiAgICBtYXJrLnN0eWxlLk1velVzZXJTZWxlY3QgPSBcInRleHRcIjtcbiAgICBtYXJrLnN0eWxlLm1zVXNlclNlbGVjdCA9IFwidGV4dFwiO1xuICAgIG1hcmsuc3R5bGUudXNlclNlbGVjdCA9IFwidGV4dFwiO1xuICAgIG1hcmsuYWRkRXZlbnRMaXN0ZW5lcihcImNvcHlcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGlmIChvcHRpb25zLmZvcm1hdCkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmICh0eXBlb2YgZS5jbGlwYm9hcmREYXRhID09PSBcInVuZGVmaW5lZFwiKSB7IC8vIElFIDExXG4gICAgICAgICAgZGVidWcgJiYgY29uc29sZS53YXJuKFwidW5hYmxlIHRvIHVzZSBlLmNsaXBib2FyZERhdGFcIik7XG4gICAgICAgICAgZGVidWcgJiYgY29uc29sZS53YXJuKFwidHJ5aW5nIElFIHNwZWNpZmljIHN0dWZmXCIpO1xuICAgICAgICAgIHdpbmRvdy5jbGlwYm9hcmREYXRhLmNsZWFyRGF0YSgpO1xuICAgICAgICAgIHZhciBmb3JtYXQgPSBjbGlwYm9hcmRUb0lFMTFGb3JtYXR0aW5nW29wdGlvbnMuZm9ybWF0XSB8fCBjbGlwYm9hcmRUb0lFMTFGb3JtYXR0aW5nW1wiZGVmYXVsdFwiXVxuICAgICAgICAgIHdpbmRvdy5jbGlwYm9hcmREYXRhLnNldERhdGEoZm9ybWF0LCB0ZXh0KTtcbiAgICAgICAgfSBlbHNlIHsgLy8gYWxsIG90aGVyIGJyb3dzZXJzXG4gICAgICAgICAgZS5jbGlwYm9hcmREYXRhLmNsZWFyRGF0YSgpO1xuICAgICAgICAgIGUuY2xpcGJvYXJkRGF0YS5zZXREYXRhKG9wdGlvbnMuZm9ybWF0LCB0ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMub25Db3B5KSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgb3B0aW9ucy5vbkNvcHkoZS5jbGlwYm9hcmREYXRhKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobWFyayk7XG5cbiAgICByYW5nZS5zZWxlY3ROb2RlQ29udGVudHMobWFyayk7XG4gICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcblxuICAgIHZhciBzdWNjZXNzZnVsID0gZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJjb3B5XCIpO1xuICAgIGlmICghc3VjY2Vzc2Z1bCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY29weSBjb21tYW5kIHdhcyB1bnN1Y2Nlc3NmdWxcIik7XG4gICAgfVxuICAgIHN1Y2Nlc3MgPSB0cnVlO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWJ1ZyAmJiBjb25zb2xlLmVycm9yKFwidW5hYmxlIHRvIGNvcHkgdXNpbmcgZXhlY0NvbW1hbmQ6IFwiLCBlcnIpO1xuICAgIGRlYnVnICYmIGNvbnNvbGUud2FybihcInRyeWluZyBJRSBzcGVjaWZpYyBzdHVmZlwiKTtcbiAgICB0cnkge1xuICAgICAgd2luZG93LmNsaXBib2FyZERhdGEuc2V0RGF0YShvcHRpb25zLmZvcm1hdCB8fCBcInRleHRcIiwgdGV4dCk7XG4gICAgICBvcHRpb25zLm9uQ29weSAmJiBvcHRpb25zLm9uQ29weSh3aW5kb3cuY2xpcGJvYXJkRGF0YSk7XG4gICAgICBzdWNjZXNzID0gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGRlYnVnICYmIGNvbnNvbGUuZXJyb3IoXCJ1bmFibGUgdG8gY29weSB1c2luZyBjbGlwYm9hcmREYXRhOiBcIiwgZXJyKTtcbiAgICAgIGRlYnVnICYmIGNvbnNvbGUuZXJyb3IoXCJmYWxsaW5nIGJhY2sgdG8gcHJvbXB0XCIpO1xuICAgICAgbWVzc2FnZSA9IGZvcm1hdChcIm1lc3NhZ2VcIiBpbiBvcHRpb25zID8gb3B0aW9ucy5tZXNzYWdlIDogZGVmYXVsdE1lc3NhZ2UpO1xuICAgICAgd2luZG93LnByb21wdChtZXNzYWdlLCB0ZXh0KTtcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgaWYgKHR5cGVvZiBzZWxlY3Rpb24ucmVtb3ZlUmFuZ2UgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHNlbGVjdGlvbi5yZW1vdmVSYW5nZShyYW5nZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1hcmspIHtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobWFyayk7XG4gICAgfVxuICAgIHJlc2VsZWN0UHJldmlvdXMoKTtcbiAgfVxuXG4gIHJldHVybiBzdWNjZXNzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcHk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9rZW4gPSAnJVthLWYwLTldezJ9JztcbnZhciBzaW5nbGVNYXRjaGVyID0gbmV3IFJlZ0V4cCh0b2tlbiwgJ2dpJyk7XG52YXIgbXVsdGlNYXRjaGVyID0gbmV3IFJlZ0V4cCgnKCcgKyB0b2tlbiArICcpKycsICdnaScpO1xuXG5mdW5jdGlvbiBkZWNvZGVDb21wb25lbnRzKGNvbXBvbmVudHMsIHNwbGl0KSB7XG5cdHRyeSB7XG5cdFx0Ly8gVHJ5IHRvIGRlY29kZSB0aGUgZW50aXJlIHN0cmluZyBmaXJzdFxuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoY29tcG9uZW50cy5qb2luKCcnKSk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIERvIG5vdGhpbmdcblx0fVxuXG5cdGlmIChjb21wb25lbnRzLmxlbmd0aCA9PT0gMSkge1xuXHRcdHJldHVybiBjb21wb25lbnRzO1xuXHR9XG5cblx0c3BsaXQgPSBzcGxpdCB8fCAxO1xuXG5cdC8vIFNwbGl0IHRoZSBhcnJheSBpbiAyIHBhcnRzXG5cdHZhciBsZWZ0ID0gY29tcG9uZW50cy5zbGljZSgwLCBzcGxpdCk7XG5cdHZhciByaWdodCA9IGNvbXBvbmVudHMuc2xpY2Uoc3BsaXQpO1xuXG5cdHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmNhbGwoW10sIGRlY29kZUNvbXBvbmVudHMobGVmdCksIGRlY29kZUNvbXBvbmVudHMocmlnaHQpKTtcbn1cblxuZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChpbnB1dCk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdHZhciB0b2tlbnMgPSBpbnB1dC5tYXRjaChzaW5nbGVNYXRjaGVyKTtcblxuXHRcdGZvciAodmFyIGkgPSAxOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpbnB1dCA9IGRlY29kZUNvbXBvbmVudHModG9rZW5zLCBpKS5qb2luKCcnKTtcblxuXHRcdFx0dG9rZW5zID0gaW5wdXQubWF0Y2goc2luZ2xlTWF0Y2hlcik7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGlucHV0O1xuXHR9XG59XG5cbmZ1bmN0aW9uIGN1c3RvbURlY29kZVVSSUNvbXBvbmVudChpbnB1dCkge1xuXHQvLyBLZWVwIHRyYWNrIG9mIGFsbCB0aGUgcmVwbGFjZW1lbnRzIGFuZCBwcmVmaWxsIHRoZSBtYXAgd2l0aCB0aGUgYEJPTWBcblx0dmFyIHJlcGxhY2VNYXAgPSB7XG5cdFx0JyVGRSVGRic6ICdcXHVGRkZEXFx1RkZGRCcsXG5cdFx0JyVGRiVGRSc6ICdcXHVGRkZEXFx1RkZGRCdcblx0fTtcblxuXHR2YXIgbWF0Y2ggPSBtdWx0aU1hdGNoZXIuZXhlYyhpbnB1dCk7XG5cdHdoaWxlIChtYXRjaCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBEZWNvZGUgYXMgYmlnIGNodW5rcyBhcyBwb3NzaWJsZVxuXHRcdFx0cmVwbGFjZU1hcFttYXRjaFswXV0gPSBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMF0pO1xuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0dmFyIHJlc3VsdCA9IGRlY29kZShtYXRjaFswXSk7XG5cblx0XHRcdGlmIChyZXN1bHQgIT09IG1hdGNoWzBdKSB7XG5cdFx0XHRcdHJlcGxhY2VNYXBbbWF0Y2hbMF1dID0gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG1hdGNoID0gbXVsdGlNYXRjaGVyLmV4ZWMoaW5wdXQpO1xuXHR9XG5cblx0Ly8gQWRkIGAlQzJgIGF0IHRoZSBlbmQgb2YgdGhlIG1hcCB0byBtYWtlIHN1cmUgaXQgZG9lcyBub3QgcmVwbGFjZSB0aGUgY29tYmluYXRvciBiZWZvcmUgZXZlcnl0aGluZyBlbHNlXG5cdHJlcGxhY2VNYXBbJyVDMiddID0gJ1xcdUZGRkQnO1xuXG5cdHZhciBlbnRyaWVzID0gT2JqZWN0LmtleXMocmVwbGFjZU1hcCk7XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Ly8gUmVwbGFjZSBhbGwgZGVjb2RlZCBjb21wb25lbnRzXG5cdFx0dmFyIGtleSA9IGVudHJpZXNbaV07XG5cdFx0aW5wdXQgPSBpbnB1dC5yZXBsYWNlKG5ldyBSZWdFeHAoa2V5LCAnZycpLCByZXBsYWNlTWFwW2tleV0pO1xuXHR9XG5cblx0cmV0dXJuIGlucHV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChlbmNvZGVkVVJJKSB7XG5cdGlmICh0eXBlb2YgZW5jb2RlZFVSSSAhPT0gJ3N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBgZW5jb2RlZFVSSWAgdG8gYmUgb2YgdHlwZSBgc3RyaW5nYCwgZ290IGAnICsgdHlwZW9mIGVuY29kZWRVUkkgKyAnYCcpO1xuXHR9XG5cblx0dHJ5IHtcblx0XHRlbmNvZGVkVVJJID0gZW5jb2RlZFVSSS5yZXBsYWNlKC9cXCsvZywgJyAnKTtcblxuXHRcdC8vIFRyeSB0aGUgYnVpbHQgaW4gZGVjb2RlciBmaXJzdFxuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZW5jb2RlZFVSSSk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIEZhbGxiYWNrIHRvIGEgbW9yZSBhZHZhbmNlZCBkZWNvZGVyXG5cdFx0cmV0dXJuIGN1c3RvbURlY29kZVVSSUNvbXBvbmVudChlbmNvZGVkVVJJKTtcblx0fVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ3JlYXRlZCAyMDA4LTA4LTE5LlxuICpcbiAqIERpamtzdHJhIHBhdGgtZmluZGluZyBmdW5jdGlvbnMuIEFkYXB0ZWQgZnJvbSB0aGUgRGlqa3N0YXIgUHl0aG9uIHByb2plY3QuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDA4XG4gKiAgIFd5YXR0IEJhbGR3aW4gPHNlbGZAd3lhdHRiYWxkd2luLmNvbT5cbiAqICAgQWxsIHJpZ2h0cyByZXNlcnZlZFxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqXG4gKiAgIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG52YXIgZGlqa3N0cmEgPSB7XG4gIHNpbmdsZV9zb3VyY2Vfc2hvcnRlc3RfcGF0aHM6IGZ1bmN0aW9uKGdyYXBoLCBzLCBkKSB7XG4gICAgLy8gUHJlZGVjZXNzb3IgbWFwIGZvciBlYWNoIG5vZGUgdGhhdCBoYXMgYmVlbiBlbmNvdW50ZXJlZC5cbiAgICAvLyBub2RlIElEID0+IHByZWRlY2Vzc29yIG5vZGUgSURcbiAgICB2YXIgcHJlZGVjZXNzb3JzID0ge307XG5cbiAgICAvLyBDb3N0cyBvZiBzaG9ydGVzdCBwYXRocyBmcm9tIHMgdG8gYWxsIG5vZGVzIGVuY291bnRlcmVkLlxuICAgIC8vIG5vZGUgSUQgPT4gY29zdFxuICAgIHZhciBjb3N0cyA9IHt9O1xuICAgIGNvc3RzW3NdID0gMDtcblxuICAgIC8vIENvc3RzIG9mIHNob3J0ZXN0IHBhdGhzIGZyb20gcyB0byBhbGwgbm9kZXMgZW5jb3VudGVyZWQ7IGRpZmZlcnMgZnJvbVxuICAgIC8vIGBjb3N0c2AgaW4gdGhhdCBpdCBwcm92aWRlcyBlYXN5IGFjY2VzcyB0byB0aGUgbm9kZSB0aGF0IGN1cnJlbnRseSBoYXNcbiAgICAvLyB0aGUga25vd24gc2hvcnRlc3QgcGF0aCBmcm9tIHMuXG4gICAgLy8gWFhYOiBEbyB3ZSBhY3R1YWxseSBuZWVkIGJvdGggYGNvc3RzYCBhbmQgYG9wZW5gP1xuICAgIHZhciBvcGVuID0gZGlqa3N0cmEuUHJpb3JpdHlRdWV1ZS5tYWtlKCk7XG4gICAgb3Blbi5wdXNoKHMsIDApO1xuXG4gICAgdmFyIGNsb3Nlc3QsXG4gICAgICAgIHUsIHYsXG4gICAgICAgIGNvc3Rfb2Zfc190b191LFxuICAgICAgICBhZGphY2VudF9ub2RlcyxcbiAgICAgICAgY29zdF9vZl9lLFxuICAgICAgICBjb3N0X29mX3NfdG9fdV9wbHVzX2Nvc3Rfb2ZfZSxcbiAgICAgICAgY29zdF9vZl9zX3RvX3YsXG4gICAgICAgIGZpcnN0X3Zpc2l0O1xuICAgIHdoaWxlICghb3Blbi5lbXB0eSgpKSB7XG4gICAgICAvLyBJbiB0aGUgbm9kZXMgcmVtYWluaW5nIGluIGdyYXBoIHRoYXQgaGF2ZSBhIGtub3duIGNvc3QgZnJvbSBzLFxuICAgICAgLy8gZmluZCB0aGUgbm9kZSwgdSwgdGhhdCBjdXJyZW50bHkgaGFzIHRoZSBzaG9ydGVzdCBwYXRoIGZyb20gcy5cbiAgICAgIGNsb3Nlc3QgPSBvcGVuLnBvcCgpO1xuICAgICAgdSA9IGNsb3Nlc3QudmFsdWU7XG4gICAgICBjb3N0X29mX3NfdG9fdSA9IGNsb3Nlc3QuY29zdDtcblxuICAgICAgLy8gR2V0IG5vZGVzIGFkamFjZW50IHRvIHUuLi5cbiAgICAgIGFkamFjZW50X25vZGVzID0gZ3JhcGhbdV0gfHwge307XG5cbiAgICAgIC8vIC4uLmFuZCBleHBsb3JlIHRoZSBlZGdlcyB0aGF0IGNvbm5lY3QgdSB0byB0aG9zZSBub2RlcywgdXBkYXRpbmdcbiAgICAgIC8vIHRoZSBjb3N0IG9mIHRoZSBzaG9ydGVzdCBwYXRocyB0byBhbnkgb3IgYWxsIG9mIHRob3NlIG5vZGVzIGFzXG4gICAgICAvLyBuZWNlc3NhcnkuIHYgaXMgdGhlIG5vZGUgYWNyb3NzIHRoZSBjdXJyZW50IGVkZ2UgZnJvbSB1LlxuICAgICAgZm9yICh2IGluIGFkamFjZW50X25vZGVzKSB7XG4gICAgICAgIGlmIChhZGphY2VudF9ub2Rlcy5oYXNPd25Qcm9wZXJ0eSh2KSkge1xuICAgICAgICAgIC8vIEdldCB0aGUgY29zdCBvZiB0aGUgZWRnZSBydW5uaW5nIGZyb20gdSB0byB2LlxuICAgICAgICAgIGNvc3Rfb2ZfZSA9IGFkamFjZW50X25vZGVzW3ZdO1xuXG4gICAgICAgICAgLy8gQ29zdCBvZiBzIHRvIHUgcGx1cyB0aGUgY29zdCBvZiB1IHRvIHYgYWNyb3NzIGUtLXRoaXMgaXMgKmEqXG4gICAgICAgICAgLy8gY29zdCBmcm9tIHMgdG8gdiB0aGF0IG1heSBvciBtYXkgbm90IGJlIGxlc3MgdGhhbiB0aGUgY3VycmVudFxuICAgICAgICAgIC8vIGtub3duIGNvc3QgdG8gdi5cbiAgICAgICAgICBjb3N0X29mX3NfdG9fdV9wbHVzX2Nvc3Rfb2ZfZSA9IGNvc3Rfb2Zfc190b191ICsgY29zdF9vZl9lO1xuXG4gICAgICAgICAgLy8gSWYgd2UgaGF2ZW4ndCB2aXNpdGVkIHYgeWV0IE9SIGlmIHRoZSBjdXJyZW50IGtub3duIGNvc3QgZnJvbSBzIHRvXG4gICAgICAgICAgLy8gdiBpcyBncmVhdGVyIHRoYW4gdGhlIG5ldyBjb3N0IHdlIGp1c3QgZm91bmQgKGNvc3Qgb2YgcyB0byB1IHBsdXNcbiAgICAgICAgICAvLyBjb3N0IG9mIHUgdG8gdiBhY3Jvc3MgZSksIHVwZGF0ZSB2J3MgY29zdCBpbiB0aGUgY29zdCBsaXN0IGFuZFxuICAgICAgICAgIC8vIHVwZGF0ZSB2J3MgcHJlZGVjZXNzb3IgaW4gdGhlIHByZWRlY2Vzc29yIGxpc3QgKGl0J3Mgbm93IHUpLlxuICAgICAgICAgIGNvc3Rfb2Zfc190b192ID0gY29zdHNbdl07XG4gICAgICAgICAgZmlyc3RfdmlzaXQgPSAodHlwZW9mIGNvc3RzW3ZdID09PSAndW5kZWZpbmVkJyk7XG4gICAgICAgICAgaWYgKGZpcnN0X3Zpc2l0IHx8IGNvc3Rfb2Zfc190b192ID4gY29zdF9vZl9zX3RvX3VfcGx1c19jb3N0X29mX2UpIHtcbiAgICAgICAgICAgIGNvc3RzW3ZdID0gY29zdF9vZl9zX3RvX3VfcGx1c19jb3N0X29mX2U7XG4gICAgICAgICAgICBvcGVuLnB1c2godiwgY29zdF9vZl9zX3RvX3VfcGx1c19jb3N0X29mX2UpO1xuICAgICAgICAgICAgcHJlZGVjZXNzb3JzW3ZdID0gdTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb3N0c1tkXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBtc2cgPSBbJ0NvdWxkIG5vdCBmaW5kIGEgcGF0aCBmcm9tICcsIHMsICcgdG8gJywgZCwgJy4nXS5qb2luKCcnKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cblxuICAgIHJldHVybiBwcmVkZWNlc3NvcnM7XG4gIH0sXG5cbiAgZXh0cmFjdF9zaG9ydGVzdF9wYXRoX2Zyb21fcHJlZGVjZXNzb3JfbGlzdDogZnVuY3Rpb24ocHJlZGVjZXNzb3JzLCBkKSB7XG4gICAgdmFyIG5vZGVzID0gW107XG4gICAgdmFyIHUgPSBkO1xuICAgIHZhciBwcmVkZWNlc3NvcjtcbiAgICB3aGlsZSAodSkge1xuICAgICAgbm9kZXMucHVzaCh1KTtcbiAgICAgIHByZWRlY2Vzc29yID0gcHJlZGVjZXNzb3JzW3VdO1xuICAgICAgdSA9IHByZWRlY2Vzc29yc1t1XTtcbiAgICB9XG4gICAgbm9kZXMucmV2ZXJzZSgpO1xuICAgIHJldHVybiBub2RlcztcbiAgfSxcblxuICBmaW5kX3BhdGg6IGZ1bmN0aW9uKGdyYXBoLCBzLCBkKSB7XG4gICAgdmFyIHByZWRlY2Vzc29ycyA9IGRpamtzdHJhLnNpbmdsZV9zb3VyY2Vfc2hvcnRlc3RfcGF0aHMoZ3JhcGgsIHMsIGQpO1xuICAgIHJldHVybiBkaWprc3RyYS5leHRyYWN0X3Nob3J0ZXN0X3BhdGhfZnJvbV9wcmVkZWNlc3Nvcl9saXN0KFxuICAgICAgcHJlZGVjZXNzb3JzLCBkKTtcbiAgfSxcblxuICAvKipcbiAgICogQSB2ZXJ5IG5haXZlIHByaW9yaXR5IHF1ZXVlIGltcGxlbWVudGF0aW9uLlxuICAgKi9cbiAgUHJpb3JpdHlRdWV1ZToge1xuICAgIG1ha2U6IGZ1bmN0aW9uIChvcHRzKSB7XG4gICAgICB2YXIgVCA9IGRpamtzdHJhLlByaW9yaXR5UXVldWUsXG4gICAgICAgICAgdCA9IHt9LFxuICAgICAgICAgIGtleTtcbiAgICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAgICAgZm9yIChrZXkgaW4gVCkge1xuICAgICAgICBpZiAoVC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgdFtrZXldID0gVFtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0LnF1ZXVlID0gW107XG4gICAgICB0LnNvcnRlciA9IG9wdHMuc29ydGVyIHx8IFQuZGVmYXVsdF9zb3J0ZXI7XG4gICAgICByZXR1cm4gdDtcbiAgICB9LFxuXG4gICAgZGVmYXVsdF9zb3J0ZXI6IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYS5jb3N0IC0gYi5jb3N0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBuZXcgaXRlbSB0byB0aGUgcXVldWUgYW5kIGVuc3VyZSB0aGUgaGlnaGVzdCBwcmlvcml0eSBlbGVtZW50XG4gICAgICogaXMgYXQgdGhlIGZyb250IG9mIHRoZSBxdWV1ZS5cbiAgICAgKi9cbiAgICBwdXNoOiBmdW5jdGlvbiAodmFsdWUsIGNvc3QpIHtcbiAgICAgIHZhciBpdGVtID0ge3ZhbHVlOiB2YWx1ZSwgY29zdDogY29zdH07XG4gICAgICB0aGlzLnF1ZXVlLnB1c2goaXRlbSk7XG4gICAgICB0aGlzLnF1ZXVlLnNvcnQodGhpcy5zb3J0ZXIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIGhpZ2hlc3QgcHJpb3JpdHkgZWxlbWVudCBpbiB0aGUgcXVldWUuXG4gICAgICovXG4gICAgcG9wOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5xdWV1ZS5zaGlmdCgpO1xuICAgIH0sXG5cbiAgICBlbXB0eTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMucXVldWUubGVuZ3RoID09PSAwO1xuICAgIH1cbiAgfVxufTtcblxuXG4vLyBub2RlLmpzIG1vZHVsZSBleHBvcnRzXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBkaWprc3RyYTtcbn1cbiIsImNvbnN0IGNhY2hlVXRpbHMgPSByZXF1aXJlKCcuL2NhY2hlLXV0aWxzLmpzJylcbmNvbnN0IGNyZWF0ZUFzeW5jTWlkZGxld2FyZSA9IHJlcXVpcmUoJ2pzb24tcnBjLWVuZ2luZS9zcmMvY3JlYXRlQXN5bmNNaWRkbGV3YXJlJylcbi8vIGA8bmlsPmAgY29tZXMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vZ28tZXRoZXJldW0vaXNzdWVzLzE2OTI1XG5jb25zdCBlbXB0eVZhbHVlcyA9IFt1bmRlZmluZWQsIG51bGwsICdcXHUwMDNjbmlsXFx1MDAzZSddXG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQmxvY2tDYWNoZU1pZGRsZXdhcmVcblxuXG5mdW5jdGlvbiBjcmVhdGVCbG9ja0NhY2hlTWlkZGxld2FyZShvcHRzID0ge30pIHtcbiAgLy8gdmFsaWRhdGUgb3B0aW9uc1xuICBjb25zdCB7IGJsb2NrVHJhY2tlciB9ID0gb3B0c1xuICBpZiAoIWJsb2NrVHJhY2tlcikgdGhyb3cgbmV3IEVycm9yKCdjcmVhdGVCbG9ja0NhY2hlTWlkZGxld2FyZSAtIE5vIEJsb2NrVHJhY2tlciBzcGVjaWZpZWQnKVxuXG4gIC8vIGNyZWF0ZSBjYWNoaW5nIHN0cmF0ZWdpZXNcbiAgY29uc3QgYmxvY2tDYWNoZSA9IG5ldyBCbG9ja0NhY2hlU3RyYXRlZ3koKVxuICBjb25zdCBzdHJhdGVnaWVzID0ge1xuICAgIHBlcm1hOiBibG9ja0NhY2hlLFxuICAgIGJsb2NrOiBibG9ja0NhY2hlLFxuICAgIGZvcms6IGJsb2NrQ2FjaGUsXG4gIH1cblxuICByZXR1cm4gY3JlYXRlQXN5bmNNaWRkbGV3YXJlKGFzeW5jIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgIC8vIGFsbG93IGNhY2ggdG8gYmUgc2tpcHBlZCBpZiBzbyBzcGVjaWZpZWRcbiAgICBpZiAocmVxLnNraXBDYWNoZSkge1xuICAgICAgcmV0dXJuIG5leHQoKVxuICAgIH1cbiAgICAvLyBjaGVjayB0eXBlIGFuZCBtYXRjaGluZyBzdHJhdGVneVxuICAgIGNvbnN0IHR5cGUgPSBjYWNoZVV0aWxzLmNhY2hlVHlwZUZvclBheWxvYWQocmVxKVxuICAgIGNvbnN0IHN0cmF0ZWd5ID0gc3RyYXRlZ2llc1t0eXBlXVxuICAgIC8vIElmIHRoZXJlJ3Mgbm8gc3RyYXRlZ3kgaW4gcGxhY2UsIHBhc3MgaXQgZG93biB0aGUgY2hhaW4uXG4gICAgaWYgKCFzdHJhdGVneSkge1xuICAgICAgcmV0dXJuIG5leHQoKVxuICAgIH1cbiAgICAvLyBJZiB0aGUgc3RyYXRlZ3kgY2FuJ3QgY2FjaGUgdGhpcyByZXF1ZXN0LCBpZ25vcmUgaXQuXG4gICAgaWYgKCFzdHJhdGVneS5jYW5DYWNoZVJlcXVlc3QocmVxKSkge1xuICAgICAgcmV0dXJuIG5leHQoKVxuICAgIH1cblxuICAgIC8vIGdldCBibG9jayByZWZlcmVuY2UgKG51bWJlciBvciBrZXl3b3JkKVxuICAgIGxldCBibG9ja1RhZyA9IGNhY2hlVXRpbHMuYmxvY2tUYWdGb3JQYXlsb2FkKHJlcSlcbiAgICBpZiAoIWJsb2NrVGFnKSBibG9ja1RhZyA9ICdsYXRlc3QnXG5cbiAgICAvLyBnZXQgZXhhY3QgYmxvY2sgbnVtYmVyXG4gICAgbGV0IHJlcXVlc3RlZEJsb2NrTnVtYmVyXG4gICAgaWYgKGJsb2NrVGFnID09PSAnZWFybGllc3QnKSB7XG4gICAgICAvLyB0aGlzIGp1c3QgZXhpc3RzIGZvciBzeW1tZXRyeSB3aXRoIFwibGF0ZXN0XCJcbiAgICAgIHJlcXVlc3RlZEJsb2NrTnVtYmVyID0gJzB4MDAnXG4gICAgfSBlbHNlIGlmIChibG9ja1RhZyA9PT0gJ2xhdGVzdCcpIHtcbiAgICAgIC8vIGZldGNoIGxhdGVzdCBibG9jayBudW1iZXJcbiAgICAgIGNvbnN0IGxhdGVzdEJsb2NrTnVtYmVyID0gYXdhaXQgYmxvY2tUcmFja2VyLmdldExhdGVzdEJsb2NrKClcbiAgICAgIC8vIGNsZWFyIGFsbCBjYWNoZSBiZWZvcmUgbGF0ZXN0IGJsb2NrXG4gICAgICBibG9ja0NhY2hlLmNsZWFyQmVmb3JlKGxhdGVzdEJsb2NrTnVtYmVyKVxuICAgICAgcmVxdWVzdGVkQmxvY2tOdW1iZXIgPSBsYXRlc3RCbG9ja051bWJlclxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBXZSBoYXZlIGEgaGV4IG51bWJlclxuICAgICAgcmVxdWVzdGVkQmxvY2tOdW1iZXIgPSBibG9ja1RhZ1xuICAgIH1cblxuICAgIC8vIGVuZCBvbiBhIGhpdCwgY29udGludWUgb24gYSBtaXNzXG4gICAgY29uc3QgY2FjaGVSZXN1bHQgPSBhd2FpdCBzdHJhdGVneS5nZXQocmVxLCByZXF1ZXN0ZWRCbG9ja051bWJlcilcbiAgICBpZiAoY2FjaGVSZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gY2FjaGUgbWlzc1xuICAgICAgLy8gd2FpdCBmb3Igb3RoZXIgbWlkZGxld2FyZSB0byBoYW5kbGUgcmVxdWVzdFxuICAgICAgYXdhaXQgbmV4dCgpXG4gICAgICAvLyBhZGQgcmVzdWx0IHRvIGNhY2hlXG4gICAgICBhd2FpdCBzdHJhdGVneS5zZXQocmVxLCByZXF1ZXN0ZWRCbG9ja051bWJlciwgcmVzLnJlc3VsdClcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZmlsbCBpbiByZXN1bHQgZnJvbSBjYWNoZVxuICAgICAgcmVzLnJlc3VsdCA9IGNhY2hlUmVzdWx0XG4gICAgfVxuICB9KVxufVxuXG5cbi8vXG4vLyBDYWNoZSBTdHJhdGVnaWVzXG4vL1xuXG5jbGFzcyBCbG9ja0NhY2hlU3RyYXRlZ3kge1xuICBcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuY2FjaGUgPSB7fVxuICB9XG5cbiAgZ2V0QmxvY2tDYWNoZUZvclBheWxvYWQgKHBheWxvYWQsIGJsb2NrTnVtYmVySGV4KSB7XG4gICAgY29uc3QgYmxvY2tOdW1iZXIgPSBOdW1iZXIucGFyc2VJbnQoYmxvY2tOdW1iZXJIZXgsIDE2KVxuICAgIGxldCBibG9ja0NhY2hlID0gdGhpcy5jYWNoZVtibG9ja051bWJlcl1cbiAgICAvLyBjcmVhdGUgbmV3IGNhY2hlIGlmIG5lY2VzYXJ5XG4gICAgaWYgKCFibG9ja0NhY2hlKSB7XG4gICAgICBjb25zdCBuZXdDYWNoZSA9IHt9XG4gICAgICB0aGlzLmNhY2hlW2Jsb2NrTnVtYmVyXSA9IG5ld0NhY2hlXG4gICAgICBibG9ja0NhY2hlID0gbmV3Q2FjaGVcbiAgICB9XG4gICAgcmV0dXJuIGJsb2NrQ2FjaGVcbiAgfVxuXG4gIGFzeW5jIGdldCAocGF5bG9hZCwgcmVxdWVzdGVkQmxvY2tOdW1iZXIpIHtcbiAgICAvLyBsb29rdXAgYmxvY2sgY2FjaGVcbiAgICBjb25zdCBibG9ja0NhY2hlID0gdGhpcy5nZXRCbG9ja0NhY2hlRm9yUGF5bG9hZChwYXlsb2FkLCByZXF1ZXN0ZWRCbG9ja051bWJlcilcbiAgICBpZiAoIWJsb2NrQ2FjaGUpIHJldHVyblxuICAgIC8vIGxvb2t1cCBwYXlsb2FkIGluIGJsb2NrIGNhY2hlXG4gICAgY29uc3QgaWRlbnRpZmllciA9IGNhY2hlVXRpbHMuY2FjaGVJZGVudGlmaWVyRm9yUGF5bG9hZChwYXlsb2FkLCB0cnVlKVxuICAgIGNvbnN0IGNhY2hlZCA9IGJsb2NrQ2FjaGVbaWRlbnRpZmllcl1cbiAgICAvLyBtYXkgYmUgdW5kZWZpbmVkXG4gICAgcmV0dXJuIGNhY2hlZFxuICB9XG5cbiAgYXN5bmMgc2V0IChwYXlsb2FkLCByZXF1ZXN0ZWRCbG9ja051bWJlciwgcmVzdWx0KSB7XG4gICAgLy8gY2hlY2sgaWYgd2UgY2FuIGNhY2hlZCB0aGlzIHJlc3VsdFxuICAgIGNvbnN0IGNhbkNhY2hlID0gdGhpcy5jYW5DYWNoZVJlc3VsdChwYXlsb2FkLCByZXN1bHQpXG4gICAgaWYgKCFjYW5DYWNoZSkgcmV0dXJuXG4gICAgLy8gc2V0IHRoZSB2YWx1ZSBpbiB0aGUgY2FjaGVcbiAgICBjb25zdCBibG9ja0NhY2hlID0gdGhpcy5nZXRCbG9ja0NhY2hlRm9yUGF5bG9hZChwYXlsb2FkLCByZXF1ZXN0ZWRCbG9ja051bWJlcilcbiAgICBjb25zdCBpZGVudGlmaWVyID0gY2FjaGVVdGlscy5jYWNoZUlkZW50aWZpZXJGb3JQYXlsb2FkKHBheWxvYWQsIHRydWUpXG4gICAgYmxvY2tDYWNoZVtpZGVudGlmaWVyXSA9IHJlc3VsdFxuICB9XG5cbiAgY2FuQ2FjaGVSZXF1ZXN0IChwYXlsb2FkKSB7XG4gICAgLy8gY2hlY2sgcmVxdWVzdCBtZXRob2RcbiAgICBpZiAoIWNhY2hlVXRpbHMuY2FuQ2FjaGUocGF5bG9hZCkpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICAvLyBjaGVjayBibG9ja1RhZ1xuICAgIGNvbnN0IGJsb2NrVGFnID0gY2FjaGVVdGlscy5ibG9ja1RhZ0ZvclBheWxvYWQocGF5bG9hZClcbiAgICBpZiAoYmxvY2tUYWcgPT09ICdwZW5kaW5nJykge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIC8vIGNhbiBiZSBjYWNoZWRcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgY2FuQ2FjaGVSZXN1bHQgKHBheWxvYWQsIHJlc3VsdCkge1xuICAgIC8vIG5ldmVyIGNhY2hlIGVtcHR5IHZhbHVlcyAoZS5nLiB1bmRlZmluZWQpXG4gICAgaWYgKGVtcHR5VmFsdWVzLmluY2x1ZGVzKHJlc3VsdCkpIHJldHVyblxuICAgIC8vIGNoZWNrIGlmIHRyYW5zYWN0aW9ucyBoYXZlIGJsb2NrIHJlZmVyZW5jZSBiZWZvcmUgY2FjaGluZ1xuICAgIGlmIChbJ2V0aF9nZXRUcmFuc2FjdGlvbkJ5SGFzaCcsICdldGhfZ2V0VHJhbnNhY3Rpb25SZWNlaXB0J10uaW5jbHVkZXMocGF5bG9hZC5tZXRob2QpKSB7XG4gICAgICBpZiAoIXJlc3VsdCB8fCAhcmVzdWx0LmJsb2NrSGFzaCB8fCByZXN1bHQuYmxvY2tIYXNoID09PSAnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJykge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gb3RoZXJ3aXNlIHRydWVcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLy8gcmVtb3ZlcyBhbGwgYmxvY2sgY2FjaGVzIHdpdGggYmxvY2sgbnVtYmVyIGxvd2VyIHRoYW4gYG9sZEJsb2NrSGV4YFxuICBjbGVhckJlZm9yZSAob2xkQmxvY2tIZXgpe1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzXG4gICAgY29uc3Qgb2xkQmxvY2tOdW1iZXIgPSBOdW1iZXIucGFyc2VJbnQob2xkQmxvY2tIZXgsIDE2KVxuICAgIC8vIGNsZWFyIG9sZCBjYWNoZXNcbiAgICBPYmplY3Qua2V5cyhzZWxmLmNhY2hlKVxuICAgICAgLm1hcChOdW1iZXIpXG4gICAgICAuZmlsdGVyKG51bSA9PiBudW0gPCBvbGRCbG9ja051bWJlcilcbiAgICAgIC5mb3JFYWNoKG51bSA9PiBkZWxldGUgc2VsZi5jYWNoZVtudW1dKVxuICB9XG5cbn1cbiIsImNvbnN0IHN0cmluZ2lmeSA9IHJlcXVpcmUoJ2pzb24tc3RhYmxlLXN0cmluZ2lmeScpXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjYWNoZUlkZW50aWZpZXJGb3JQYXlsb2FkOiBjYWNoZUlkZW50aWZpZXJGb3JQYXlsb2FkLFxuICBjYW5DYWNoZTogY2FuQ2FjaGUsXG4gIGJsb2NrVGFnRm9yUGF5bG9hZDogYmxvY2tUYWdGb3JQYXlsb2FkLFxuICBwYXJhbXNXaXRob3V0QmxvY2tUYWc6IHBhcmFtc1dpdGhvdXRCbG9ja1RhZyxcbiAgYmxvY2tUYWdQYXJhbUluZGV4OiBibG9ja1RhZ1BhcmFtSW5kZXgsXG4gIGNhY2hlVHlwZUZvclBheWxvYWQ6IGNhY2hlVHlwZUZvclBheWxvYWRcbn1cblxuZnVuY3Rpb24gY2FjaGVJZGVudGlmaWVyRm9yUGF5bG9hZCAocGF5bG9hZCwgc2tpcEJsb2NrUmVmKSB7XG4gIGNvbnN0IHNpbXBsZVBhcmFtcyA9IHNraXBCbG9ja1JlZiA/IHBhcmFtc1dpdGhvdXRCbG9ja1RhZyhwYXlsb2FkKSA6IHBheWxvYWQucGFyYW1zXG4gIGlmIChjYW5DYWNoZShwYXlsb2FkKSkge1xuICAgIHJldHVybiBwYXlsb2FkLm1ldGhvZCArICc6JyArIHN0cmluZ2lmeShzaW1wbGVQYXJhbXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW5DYWNoZSAocGF5bG9hZCkge1xuICByZXR1cm4gY2FjaGVUeXBlRm9yUGF5bG9hZChwYXlsb2FkKSAhPT0gJ25ldmVyJ1xufVxuXG5mdW5jdGlvbiBibG9ja1RhZ0ZvclBheWxvYWQgKHBheWxvYWQpIHtcbiAgbGV0IGluZGV4ID0gYmxvY2tUYWdQYXJhbUluZGV4KHBheWxvYWQpXG5cbiAgLy8gQmxvY2sgdGFnIHBhcmFtIG5vdCBwYXNzZWQuXG4gIGlmIChpbmRleCA+PSBwYXlsb2FkLnBhcmFtcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgcmV0dXJuIHBheWxvYWQucGFyYW1zW2luZGV4XVxufVxuXG5mdW5jdGlvbiBwYXJhbXNXaXRob3V0QmxvY2tUYWcgKHBheWxvYWQpIHtcbiAgY29uc3QgaW5kZXggPSBibG9ja1RhZ1BhcmFtSW5kZXgocGF5bG9hZClcblxuICAvLyBCbG9jayB0YWcgcGFyYW0gbm90IHBhc3NlZC5cbiAgaWYgKGluZGV4ID49IHBheWxvYWQucGFyYW1zLmxlbmd0aCkge1xuICAgIHJldHVybiBwYXlsb2FkLnBhcmFtc1xuICB9XG5cbiAgLy8gZXRoX2dldEJsb2NrQnlOdW1iZXIgaGFzIHRoZSBibG9jayB0YWcgZmlyc3QsIHRoZW4gdGhlIG9wdGlvbmFsIGluY2x1ZGVUeD8gcGFyYW1cbiAgaWYgKHBheWxvYWQubWV0aG9kID09PSAnZXRoX2dldEJsb2NrQnlOdW1iZXInKSB7XG4gICAgcmV0dXJuIHBheWxvYWQucGFyYW1zLnNsaWNlKDEpXG4gIH1cblxuICByZXR1cm4gcGF5bG9hZC5wYXJhbXMuc2xpY2UoMCwgaW5kZXgpXG59XG5cbmZ1bmN0aW9uIGJsb2NrVGFnUGFyYW1JbmRleCAocGF5bG9hZCkge1xuICBzd2l0Y2ggKHBheWxvYWQubWV0aG9kKSB7XG4gICAgLy8gYmxvY2tUYWcgaXMgYXQgaW5kZXggMlxuICAgIGNhc2UgJ2V0aF9nZXRTdG9yYWdlQXQnOlxuICAgICAgcmV0dXJuIDJcbiAgICAvLyBibG9ja1RhZyBpcyBhdCBpbmRleCAxXG4gICAgY2FzZSAnZXRoX2dldEJhbGFuY2UnOlxuICAgIGNhc2UgJ2V0aF9nZXRDb2RlJzpcbiAgICBjYXNlICdldGhfZ2V0VHJhbnNhY3Rpb25Db3VudCc6XG4gICAgY2FzZSAnZXRoX2NhbGwnOlxuICAgICAgcmV0dXJuIDFcbiAgICAvLyBibG9ja1RhZyBpcyBhdCBpbmRleCAwXG4gICAgY2FzZSAnZXRoX2dldEJsb2NrQnlOdW1iZXInOlxuICAgICAgcmV0dXJuIDBcbiAgICAvLyB0aGVyZSBpcyBubyBibG9ja1RhZ1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbn1cblxuZnVuY3Rpb24gY2FjaGVUeXBlRm9yUGF5bG9hZCAocGF5bG9hZCkge1xuICBzd2l0Y2ggKHBheWxvYWQubWV0aG9kKSB7XG4gICAgLy8gY2FjaGUgcGVybWFuZW50bHlcbiAgICBjYXNlICd3ZWIzX2NsaWVudFZlcnNpb24nOlxuICAgIGNhc2UgJ3dlYjNfc2hhMyc6XG4gICAgY2FzZSAnZXRoX3Byb3RvY29sVmVyc2lvbic6XG4gICAgY2FzZSAnZXRoX2dldEJsb2NrVHJhbnNhY3Rpb25Db3VudEJ5SGFzaCc6XG4gICAgY2FzZSAnZXRoX2dldFVuY2xlQ291bnRCeUJsb2NrSGFzaCc6XG4gICAgY2FzZSAnZXRoX2dldENvZGUnOlxuICAgIGNhc2UgJ2V0aF9nZXRCbG9ja0J5SGFzaCc6XG4gICAgY2FzZSAnZXRoX2dldFRyYW5zYWN0aW9uQnlIYXNoJzpcbiAgICBjYXNlICdldGhfZ2V0VHJhbnNhY3Rpb25CeUJsb2NrSGFzaEFuZEluZGV4JzpcbiAgICBjYXNlICdldGhfZ2V0VHJhbnNhY3Rpb25SZWNlaXB0JzpcbiAgICBjYXNlICdldGhfZ2V0VW5jbGVCeUJsb2NrSGFzaEFuZEluZGV4JzpcbiAgICBjYXNlICdldGhfZ2V0Q29tcGlsZXJzJzpcbiAgICBjYXNlICdldGhfY29tcGlsZUxMTCc6XG4gICAgY2FzZSAnZXRoX2NvbXBpbGVTb2xpZGl0eSc6XG4gICAgY2FzZSAnZXRoX2NvbXBpbGVTZXJwZW50JzpcbiAgICBjYXNlICdzaGhfdmVyc2lvbic6XG4gICAgY2FzZSAndGVzdF9wZXJtYUNhY2hlJzpcbiAgICAgIHJldHVybiAncGVybWEnXG5cbiAgICAvLyBjYWNoZSB1bnRpbCBmb3JrXG4gICAgY2FzZSAnZXRoX2dldEJsb2NrQnlOdW1iZXInOlxuICAgIGNhc2UgJ2V0aF9nZXRCbG9ja1RyYW5zYWN0aW9uQ291bnRCeU51bWJlcic6XG4gICAgY2FzZSAnZXRoX2dldFVuY2xlQ291bnRCeUJsb2NrTnVtYmVyJzpcbiAgICBjYXNlICdldGhfZ2V0VHJhbnNhY3Rpb25CeUJsb2NrTnVtYmVyQW5kSW5kZXgnOlxuICAgIGNhc2UgJ2V0aF9nZXRVbmNsZUJ5QmxvY2tOdW1iZXJBbmRJbmRleCc6XG4gICAgY2FzZSAndGVzdF9mb3JrQ2FjaGUnOlxuICAgICAgcmV0dXJuICdmb3JrJ1xuXG4gICAgLy8gY2FjaGUgZm9yIGJsb2NrXG4gICAgY2FzZSAnZXRoX2dhc1ByaWNlJzpcbiAgICBjYXNlICdldGhfYmxvY2tOdW1iZXInOlxuICAgIGNhc2UgJ2V0aF9nZXRCYWxhbmNlJzpcbiAgICBjYXNlICdldGhfZ2V0U3RvcmFnZUF0JzpcbiAgICBjYXNlICdldGhfZ2V0VHJhbnNhY3Rpb25Db3VudCc6XG4gICAgY2FzZSAnZXRoX2NhbGwnOlxuICAgIGNhc2UgJ2V0aF9lc3RpbWF0ZUdhcyc6XG4gICAgY2FzZSAnZXRoX2dldEZpbHRlckxvZ3MnOlxuICAgIGNhc2UgJ2V0aF9nZXRMb2dzJzpcbiAgICBjYXNlICd0ZXN0X2Jsb2NrQ2FjaGUnOlxuICAgICAgcmV0dXJuICdibG9jaydcblxuICAgIC8vIG5ldmVyIGNhY2hlXG4gICAgY2FzZSAnbmV0X3ZlcnNpb24nOlxuICAgIGNhc2UgJ25ldF9wZWVyQ291bnQnOlxuICAgIGNhc2UgJ25ldF9saXN0ZW5pbmcnOlxuICAgIGNhc2UgJ2V0aF9zeW5jaW5nJzpcbiAgICBjYXNlICdldGhfc2lnbic6XG4gICAgY2FzZSAnZXRoX2NvaW5iYXNlJzpcbiAgICBjYXNlICdldGhfbWluaW5nJzpcbiAgICBjYXNlICdldGhfaGFzaHJhdGUnOlxuICAgIGNhc2UgJ2V0aF9hY2NvdW50cyc6XG4gICAgY2FzZSAnZXRoX3NlbmRUcmFuc2FjdGlvbic6XG4gICAgY2FzZSAnZXRoX3NlbmRSYXdUcmFuc2FjdGlvbic6XG4gICAgY2FzZSAnZXRoX25ld0ZpbHRlcic6XG4gICAgY2FzZSAnZXRoX25ld0Jsb2NrRmlsdGVyJzpcbiAgICBjYXNlICdldGhfbmV3UGVuZGluZ1RyYW5zYWN0aW9uRmlsdGVyJzpcbiAgICBjYXNlICdldGhfdW5pbnN0YWxsRmlsdGVyJzpcbiAgICBjYXNlICdldGhfZ2V0RmlsdGVyQ2hhbmdlcyc6XG4gICAgY2FzZSAnZXRoX2dldFdvcmsnOlxuICAgIGNhc2UgJ2V0aF9zdWJtaXRXb3JrJzpcbiAgICBjYXNlICdldGhfc3VibWl0SGFzaHJhdGUnOlxuICAgIGNhc2UgJ2RiX3B1dFN0cmluZyc6XG4gICAgY2FzZSAnZGJfZ2V0U3RyaW5nJzpcbiAgICBjYXNlICdkYl9wdXRIZXgnOlxuICAgIGNhc2UgJ2RiX2dldEhleCc6XG4gICAgY2FzZSAnc2hoX3Bvc3QnOlxuICAgIGNhc2UgJ3NoaF9uZXdJZGVudGl0eSc6XG4gICAgY2FzZSAnc2hoX2hhc0lkZW50aXR5JzpcbiAgICBjYXNlICdzaGhfbmV3R3JvdXAnOlxuICAgIGNhc2UgJ3NoaF9hZGRUb0dyb3VwJzpcbiAgICBjYXNlICdzaGhfbmV3RmlsdGVyJzpcbiAgICBjYXNlICdzaGhfdW5pbnN0YWxsRmlsdGVyJzpcbiAgICBjYXNlICdzaGhfZ2V0RmlsdGVyQ2hhbmdlcyc6XG4gICAgY2FzZSAnc2hoX2dldE1lc3NhZ2VzJzpcbiAgICBjYXNlICd0ZXN0X25ldmVyQ2FjaGUnOlxuICAgICAgcmV0dXJuICduZXZlcidcbiAgfVxufVxuIiwiLyoqXG4gKiBKc29uUnBjRW5naW5lIG9ubHkgYWNjZXB0cyBjYWxsYmFjay1iYXNlZCBtaWRkbGV3YXJlIGRpcmVjdGx5LlxuICogY3JlYXRlQXN5bmNNaWRkbGV3YXJlIGV4aXN0cyB0byBlbmFibGUgY29uc3VtZXJzIHRvIHBhc3MgaW4gYXN5bmMgbWlkZGxld2FyZVxuICogZnVuY3Rpb25zLlxuICpcbiAqIEFzeW5jIG1pZGRsZXdhcmUgaGF2ZSBubyBcImVuZFwiIGZ1bmN0aW9uLiBJbnN0ZWFkLCB0aGV5IFwiZW5kXCIgaWYgdGhleSByZXR1cm5cbiAqIHdpdGhvdXQgY2FsbGluZyBcIm5leHRcIi4gUmF0aGVyIHRoYW4gcGFzc2luZyBpbiBleHBsaWNpdCByZXR1cm4gaGFuZGxlcnMsXG4gKiBhc3luYyBtaWRkbGV3YXJlIGNhbiBzaW1wbHkgYXdhaXQgXCJuZXh0XCIsIGFuZCBwZXJmb3JtIG9wZXJhdGlvbnMgb24gdGhlXG4gKiByZXNwb25zZSBvYmplY3Qgd2hlbiBleGVjdXRpb24gcmVzdW1lcy5cbiAqXG4gKiBUbyBhY2NvbXBsaXNoIHRoaXMsIGNyZWF0ZUFzeW5jTWlkZGxld2FyZSBwYXNzZXMgdGhlIGFzeW5jIG1pZGRsZXdhcmUgYVxuICogd3JhcHBlZCBcIm5leHRcIiBmdW5jdGlvbi4gVGhhdCBmdW5jdGlvbiBjYWxscyB0aGUgaW50ZXJuYWwgSnNvblJwY0VuZ2luZVxuICogXCJuZXh0XCIgZnVuY3Rpb24gd2l0aCBhIHJldHVybiBoYW5kbGVyIHRoYXQgcmVzb2x2ZXMgYSBwcm9taXNlIHdoZW4gY2FsbGVkLlxuICpcbiAqIFRoZSByZXR1cm4gaGFuZGxlciB3aWxsIGFsd2F5cyBiZSBjYWxsZWQuIEl0cyByZXNvbHV0aW9uIG9mIHRoZSBwcm9taXNlXG4gKiBlbmFibGVzIHRoZSBjb250cm9sIGZsb3cgZGVzY3JpYmVkIGFib3ZlLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlQXN5bmNNaWRkbGV3YXJlIChhc3luY01pZGRsZXdhcmUpIHtcbiAgcmV0dXJuIChyZXEsIHJlcywgbmV4dCwgZW5kKSA9PiB7XG5cbiAgICAvLyBuZXh0UHJvbWlzZSBpcyB0aGUga2V5IHRvIHRoZSBpbXBsZW1lbnRhdGlvblxuICAgIC8vIGl0IGlzIHJlc29sdmVkIGJ5IHRoZSByZXR1cm4gaGFuZGxlciBwYXNzZWQgdG8gdGhlXG4gICAgLy8gXCJuZXh0XCIgZnVuY3Rpb25cbiAgICBsZXQgcmVzb2x2ZU5leHRQcm9taXNlXG4gICAgY29uc3QgbmV4dFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgcmVzb2x2ZU5leHRQcm9taXNlID0gcmVzb2x2ZVxuICAgIH0pXG5cbiAgICBsZXQgcmV0dXJuSGFuZGxlckNhbGxiYWNrLCBuZXh0V2FzQ2FsbGVkXG5cbiAgICBjb25zdCBhc3luY05leHQgPSBhc3luYyAoKSA9PiB7XG5cbiAgICAgIG5leHRXYXNDYWxsZWQgPSB0cnVlXG5cbiAgICAgIG5leHQoKGNhbGxiYWNrKSA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FsbGJhY2stcmV0dXJuXG4gICAgICAgIHJldHVybkhhbmRsZXJDYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgICAgIHJlc29sdmVOZXh0UHJvbWlzZSgpXG4gICAgICB9KVxuICAgICAgYXdhaXQgbmV4dFByb21pc2VcbiAgICB9XG5cbiAgICBhc3luY01pZGRsZXdhcmUocmVxLCByZXMsIGFzeW5jTmV4dClcbiAgICAgIC50aGVuKGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKG5leHRXYXNDYWxsZWQpIHtcbiAgICAgICAgICBhd2FpdCBuZXh0UHJvbWlzZSAvLyB3ZSBtdXN0IHdhaXQgdW50aWwgdGhlIHJldHVybiBoYW5kbGVyIGlzIGNhbGxlZFxuICAgICAgICAgIHJldHVybkhhbmRsZXJDYWxsYmFjayhudWxsKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVuZChudWxsKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICBpZiAocmV0dXJuSGFuZGxlckNhbGxiYWNrKSB7XG4gICAgICAgICAgcmV0dXJuSGFuZGxlckNhbGxiYWNrKGVycm9yKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVuZChlcnJvcilcbiAgICAgICAgfVxuICAgICAgfSlcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgICAgICA9IGlzVHlwZWRBcnJheVxuaXNUeXBlZEFycmF5LnN0cmljdCA9IGlzU3RyaWN0VHlwZWRBcnJheVxuaXNUeXBlZEFycmF5Lmxvb3NlICA9IGlzTG9vc2VUeXBlZEFycmF5XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdcbnZhciBuYW1lcyA9IHtcbiAgICAnW29iamVjdCBJbnQ4QXJyYXldJzogdHJ1ZVxuICAsICdbb2JqZWN0IEludDE2QXJyYXldJzogdHJ1ZVxuICAsICdbb2JqZWN0IEludDMyQXJyYXldJzogdHJ1ZVxuICAsICdbb2JqZWN0IFVpbnQ4QXJyYXldJzogdHJ1ZVxuICAsICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XSc6IHRydWVcbiAgLCAnW29iamVjdCBVaW50MTZBcnJheV0nOiB0cnVlXG4gICwgJ1tvYmplY3QgVWludDMyQXJyYXldJzogdHJ1ZVxuICAsICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nOiB0cnVlXG4gICwgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSc6IHRydWVcbn1cblxuZnVuY3Rpb24gaXNUeXBlZEFycmF5KGFycikge1xuICByZXR1cm4gKFxuICAgICAgIGlzU3RyaWN0VHlwZWRBcnJheShhcnIpXG4gICAgfHwgaXNMb29zZVR5cGVkQXJyYXkoYXJyKVxuICApXG59XG5cbmZ1bmN0aW9uIGlzU3RyaWN0VHlwZWRBcnJheShhcnIpIHtcbiAgcmV0dXJuIChcbiAgICAgICBhcnIgaW5zdGFuY2VvZiBJbnQ4QXJyYXlcbiAgICB8fCBhcnIgaW5zdGFuY2VvZiBJbnQxNkFycmF5XG4gICAgfHwgYXJyIGluc3RhbmNlb2YgSW50MzJBcnJheVxuICAgIHx8IGFyciBpbnN0YW5jZW9mIFVpbnQ4QXJyYXlcbiAgICB8fCBhcnIgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheVxuICAgIHx8IGFyciBpbnN0YW5jZW9mIFVpbnQxNkFycmF5XG4gICAgfHwgYXJyIGluc3RhbmNlb2YgVWludDMyQXJyYXlcbiAgICB8fCBhcnIgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXlcbiAgICB8fCBhcnIgaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXlcbiAgKVxufVxuXG5mdW5jdGlvbiBpc0xvb3NlVHlwZWRBcnJheShhcnIpIHtcbiAgcmV0dXJuIG5hbWVzW3RvU3RyaW5nLmNhbGwoYXJyKV1cbn1cbiIsIlxudmFyIGNhblByb21pc2UgPSByZXF1aXJlKCcuL2Nhbi1wcm9taXNlJylcblxudmFyIFFSQ29kZSA9IHJlcXVpcmUoJy4vY29yZS9xcmNvZGUnKVxudmFyIENhbnZhc1JlbmRlcmVyID0gcmVxdWlyZSgnLi9yZW5kZXJlci9jYW52YXMnKVxudmFyIFN2Z1JlbmRlcmVyID0gcmVxdWlyZSgnLi9yZW5kZXJlci9zdmctdGFnLmpzJylcblxuZnVuY3Rpb24gcmVuZGVyQ2FudmFzIChyZW5kZXJGdW5jLCBjYW52YXMsIHRleHQsIG9wdHMsIGNiKSB7XG4gIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpXG4gIHZhciBhcmdzTnVtID0gYXJncy5sZW5ndGhcbiAgdmFyIGlzTGFzdEFyZ0NiID0gdHlwZW9mIGFyZ3NbYXJnc051bSAtIDFdID09PSAnZnVuY3Rpb24nXG5cbiAgaWYgKCFpc0xhc3RBcmdDYiAmJiAhY2FuUHJvbWlzZSgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYWxsYmFjayByZXF1aXJlZCBhcyBsYXN0IGFyZ3VtZW50JylcbiAgfVxuXG4gIGlmIChpc0xhc3RBcmdDYikge1xuICAgIGlmIChhcmdzTnVtIDwgMikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUb28gZmV3IGFyZ3VtZW50cyBwcm92aWRlZCcpXG4gICAgfVxuXG4gICAgaWYgKGFyZ3NOdW0gPT09IDIpIHtcbiAgICAgIGNiID0gdGV4dFxuICAgICAgdGV4dCA9IGNhbnZhc1xuICAgICAgY2FudmFzID0gb3B0cyA9IHVuZGVmaW5lZFxuICAgIH0gZWxzZSBpZiAoYXJnc051bSA9PT0gMykge1xuICAgICAgaWYgKGNhbnZhcy5nZXRDb250ZXh0ICYmIHR5cGVvZiBjYiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY2IgPSBvcHRzXG4gICAgICAgIG9wdHMgPSB1bmRlZmluZWRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNiID0gb3B0c1xuICAgICAgICBvcHRzID0gdGV4dFxuICAgICAgICB0ZXh0ID0gY2FudmFzXG4gICAgICAgIGNhbnZhcyA9IHVuZGVmaW5lZFxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYXJnc051bSA8IDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVG9vIGZldyBhcmd1bWVudHMgcHJvdmlkZWQnKVxuICAgIH1cblxuICAgIGlmIChhcmdzTnVtID09PSAxKSB7XG4gICAgICB0ZXh0ID0gY2FudmFzXG4gICAgICBjYW52YXMgPSBvcHRzID0gdW5kZWZpbmVkXG4gICAgfSBlbHNlIGlmIChhcmdzTnVtID09PSAyICYmICFjYW52YXMuZ2V0Q29udGV4dCkge1xuICAgICAgb3B0cyA9IHRleHRcbiAgICAgIHRleHQgPSBjYW52YXNcbiAgICAgIGNhbnZhcyA9IHVuZGVmaW5lZFxuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgZGF0YSA9IFFSQ29kZS5jcmVhdGUodGV4dCwgb3B0cylcbiAgICAgICAgcmVzb2x2ZShyZW5kZXJGdW5jKGRhdGEsIGNhbnZhcywgb3B0cykpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICB0cnkge1xuICAgIHZhciBkYXRhID0gUVJDb2RlLmNyZWF0ZSh0ZXh0LCBvcHRzKVxuICAgIGNiKG51bGwsIHJlbmRlckZ1bmMoZGF0YSwgY2FudmFzLCBvcHRzKSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNiKGUpXG4gIH1cbn1cblxuZXhwb3J0cy5jcmVhdGUgPSBRUkNvZGUuY3JlYXRlXG5leHBvcnRzLnRvQ2FudmFzID0gcmVuZGVyQ2FudmFzLmJpbmQobnVsbCwgQ2FudmFzUmVuZGVyZXIucmVuZGVyKVxuZXhwb3J0cy50b0RhdGFVUkwgPSByZW5kZXJDYW52YXMuYmluZChudWxsLCBDYW52YXNSZW5kZXJlci5yZW5kZXJUb0RhdGFVUkwpXG5cbi8vIG9ubHkgc3ZnIGZvciBub3cuXG5leHBvcnRzLnRvU3RyaW5nID0gcmVuZGVyQ2FudmFzLmJpbmQobnVsbCwgZnVuY3Rpb24gKGRhdGEsIF8sIG9wdHMpIHtcbiAgcmV0dXJuIFN2Z1JlbmRlcmVyLnJlbmRlcihkYXRhLCBvcHRzKVxufSlcbiIsIi8vIGNhbi1wcm9taXNlIGhhcyBhIGNyYXNoIGluIHNvbWUgdmVyc2lvbnMgb2YgcmVhY3QgbmF0aXZlIHRoYXQgZG9udCBoYXZlXG4vLyBzdGFuZGFyZCBnbG9iYWwgb2JqZWN0c1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NvbGRhaXIvbm9kZS1xcmNvZGUvaXNzdWVzLzE1N1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHR5cGVvZiBQcm9taXNlID09PSAnZnVuY3Rpb24nICYmIFByb21pc2UucHJvdG90eXBlICYmIFByb21pc2UucHJvdG90eXBlLnRoZW5cbn1cbiIsIi8qKlxuICogQWxpZ25tZW50IHBhdHRlcm4gYXJlIGZpeGVkIHJlZmVyZW5jZSBwYXR0ZXJuIGluIGRlZmluZWQgcG9zaXRpb25zXG4gKiBpbiBhIG1hdHJpeCBzeW1ib2xvZ3ksIHdoaWNoIGVuYWJsZXMgdGhlIGRlY29kZSBzb2Z0d2FyZSB0byByZS1zeW5jaHJvbmlzZVxuICogdGhlIGNvb3JkaW5hdGUgbWFwcGluZyBvZiB0aGUgaW1hZ2UgbW9kdWxlcyBpbiB0aGUgZXZlbnQgb2YgbW9kZXJhdGUgYW1vdW50c1xuICogb2YgZGlzdG9ydGlvbiBvZiB0aGUgaW1hZ2UuXG4gKlxuICogQWxpZ25tZW50IHBhdHRlcm5zIGFyZSBwcmVzZW50IG9ubHkgaW4gUVIgQ29kZSBzeW1ib2xzIG9mIHZlcnNpb24gMiBvciBsYXJnZXJcbiAqIGFuZCB0aGVpciBudW1iZXIgZGVwZW5kcyBvbiB0aGUgc3ltYm9sIHZlcnNpb24uXG4gKi9cblxudmFyIGdldFN5bWJvbFNpemUgPSByZXF1aXJlKCcuL3V0aWxzJykuZ2V0U3ltYm9sU2l6ZVxuXG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgcm93L2NvbHVtbiBjb29yZGluYXRlcyBvZiB0aGUgY2VudGVyIG1vZHVsZSBvZiBlYWNoIGFsaWdubWVudCBwYXR0ZXJuXG4gKiBmb3IgdGhlIHNwZWNpZmllZCBRUiBDb2RlIHZlcnNpb24uXG4gKlxuICogVGhlIGFsaWdubWVudCBwYXR0ZXJucyBhcmUgcG9zaXRpb25lZCBzeW1tZXRyaWNhbGx5IG9uIGVpdGhlciBzaWRlIG9mIHRoZSBkaWFnb25hbFxuICogcnVubmluZyBmcm9tIHRoZSB0b3AgbGVmdCBjb3JuZXIgb2YgdGhlIHN5bWJvbCB0byB0aGUgYm90dG9tIHJpZ2h0IGNvcm5lci5cbiAqXG4gKiBTaW5jZSBwb3NpdGlvbnMgYXJlIHNpbW1ldHJpY2FsIG9ubHkgaGFsZiBvZiB0aGUgY29vcmRpbmF0ZXMgYXJlIHJldHVybmVkLlxuICogRWFjaCBpdGVtIG9mIHRoZSBhcnJheSB3aWxsIHJlcHJlc2VudCBpbiB0dXJuIHRoZSB4IGFuZCB5IGNvb3JkaW5hdGUuXG4gKiBAc2VlIHtAbGluayBnZXRQb3NpdGlvbnN9XG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgIEFycmF5IG9mIGNvb3JkaW5hdGVcbiAqL1xuZXhwb3J0cy5nZXRSb3dDb2xDb29yZHMgPSBmdW5jdGlvbiBnZXRSb3dDb2xDb29yZHMgKHZlcnNpb24pIHtcbiAgaWYgKHZlcnNpb24gPT09IDEpIHJldHVybiBbXVxuXG4gIHZhciBwb3NDb3VudCA9IE1hdGguZmxvb3IodmVyc2lvbiAvIDcpICsgMlxuICB2YXIgc2l6ZSA9IGdldFN5bWJvbFNpemUodmVyc2lvbilcbiAgdmFyIGludGVydmFscyA9IHNpemUgPT09IDE0NSA/IDI2IDogTWF0aC5jZWlsKChzaXplIC0gMTMpIC8gKDIgKiBwb3NDb3VudCAtIDIpKSAqIDJcbiAgdmFyIHBvc2l0aW9ucyA9IFtzaXplIC0gN10gLy8gTGFzdCBjb29yZCBpcyBhbHdheXMgKHNpemUgLSA3KVxuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgcG9zQ291bnQgLSAxOyBpKyspIHtcbiAgICBwb3NpdGlvbnNbaV0gPSBwb3NpdGlvbnNbaSAtIDFdIC0gaW50ZXJ2YWxzXG4gIH1cblxuICBwb3NpdGlvbnMucHVzaCg2KSAvLyBGaXJzdCBjb29yZCBpcyBhbHdheXMgNlxuXG4gIHJldHVybiBwb3NpdGlvbnMucmV2ZXJzZSgpXG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBwb3NpdGlvbnMgb2YgZWFjaCBhbGlnbm1lbnQgcGF0dGVybi5cbiAqIEVhY2ggYXJyYXkncyBlbGVtZW50IHJlcHJlc2VudCB0aGUgY2VudGVyIHBvaW50IG9mIHRoZSBwYXR0ZXJuIGFzICh4LCB5KSBjb29yZGluYXRlc1xuICpcbiAqIENvb3JkaW5hdGVzIGFyZSBjYWxjdWxhdGVkIGV4cGFuZGluZyB0aGUgcm93L2NvbHVtbiBjb29yZGluYXRlcyByZXR1cm5lZCBieSB7QGxpbmsgZ2V0Um93Q29sQ29vcmRzfVxuICogYW5kIGZpbHRlcmluZyBvdXQgdGhlIGl0ZW1zIHRoYXQgb3ZlcmxhcHMgd2l0aCBmaW5kZXIgcGF0dGVyblxuICpcbiAqIEBleGFtcGxlXG4gKiBGb3IgYSBWZXJzaW9uIDcgc3ltYm9sIHtAbGluayBnZXRSb3dDb2xDb29yZHN9IHJldHVybnMgdmFsdWVzIDYsIDIyIGFuZCAzOC5cbiAqIFRoZSBhbGlnbm1lbnQgcGF0dGVybnMsIHRoZXJlZm9yZSwgYXJlIHRvIGJlIGNlbnRlcmVkIG9uIChyb3csIGNvbHVtbilcbiAqIHBvc2l0aW9ucyAoNiwyMiksICgyMiw2KSwgKDIyLDIyKSwgKDIyLDM4KSwgKDM4LDIyKSwgKDM4LDM4KS5cbiAqIE5vdGUgdGhhdCB0aGUgY29vcmRpbmF0ZXMgKDYsNiksICg2LDM4KSwgKDM4LDYpIGFyZSBvY2N1cGllZCBieSBmaW5kZXIgcGF0dGVybnNcbiAqIGFuZCBhcmUgbm90IHRoZXJlZm9yZSB1c2VkIGZvciBhbGlnbm1lbnQgcGF0dGVybnMuXG4gKlxuICogdmFyIHBvcyA9IGdldFBvc2l0aW9ucyg3KVxuICogLy8gW1s2LDIyXSwgWzIyLDZdLCBbMjIsMjJdLCBbMjIsMzhdLCBbMzgsMjJdLCBbMzgsMzhdXVxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICBBcnJheSBvZiBjb29yZGluYXRlc1xuICovXG5leHBvcnRzLmdldFBvc2l0aW9ucyA9IGZ1bmN0aW9uIGdldFBvc2l0aW9ucyAodmVyc2lvbikge1xuICB2YXIgY29vcmRzID0gW11cbiAgdmFyIHBvcyA9IGV4cG9ydHMuZ2V0Um93Q29sQ29vcmRzKHZlcnNpb24pXG4gIHZhciBwb3NMZW5ndGggPSBwb3MubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3NMZW5ndGg7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgcG9zTGVuZ3RoOyBqKyspIHtcbiAgICAgIC8vIFNraXAgaWYgcG9zaXRpb24gaXMgb2NjdXBpZWQgYnkgZmluZGVyIHBhdHRlcm5zXG4gICAgICBpZiAoKGkgPT09IDAgJiYgaiA9PT0gMCkgfHwgICAgICAgICAgICAgLy8gdG9wLWxlZnRcbiAgICAgICAgICAoaSA9PT0gMCAmJiBqID09PSBwb3NMZW5ndGggLSAxKSB8fCAvLyBib3R0b20tbGVmdFxuICAgICAgICAgIChpID09PSBwb3NMZW5ndGggLSAxICYmIGogPT09IDApKSB7IC8vIHRvcC1yaWdodFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBjb29yZHMucHVzaChbcG9zW2ldLCBwb3Nbal1dKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb29yZHNcbn1cbiIsInZhciBNb2RlID0gcmVxdWlyZSgnLi9tb2RlJylcblxuLyoqXG4gKiBBcnJheSBvZiBjaGFyYWN0ZXJzIGF2YWlsYWJsZSBpbiBhbHBoYW51bWVyaWMgbW9kZVxuICpcbiAqIEFzIHBlciBRUiBDb2RlIHNwZWNpZmljYXRpb24sIHRvIGVhY2ggY2hhcmFjdGVyXG4gKiBpcyBhc3NpZ25lZCBhIHZhbHVlIGZyb20gMCB0byA0NCB3aGljaCBpbiB0aGlzIGNhc2UgY29pbmNpZGVzXG4gKiB3aXRoIHRoZSBhcnJheSBpbmRleFxuICpcbiAqIEB0eXBlIHtBcnJheX1cbiAqL1xudmFyIEFMUEhBX05VTV9DSEFSUyA9IFtcbiAgJzAnLCAnMScsICcyJywgJzMnLCAnNCcsICc1JywgJzYnLCAnNycsICc4JywgJzknLFxuICAnQScsICdCJywgJ0MnLCAnRCcsICdFJywgJ0YnLCAnRycsICdIJywgJ0knLCAnSicsICdLJywgJ0wnLCAnTScsXG4gICdOJywgJ08nLCAnUCcsICdRJywgJ1InLCAnUycsICdUJywgJ1UnLCAnVicsICdXJywgJ1gnLCAnWScsICdaJyxcbiAgJyAnLCAnJCcsICclJywgJyonLCAnKycsICctJywgJy4nLCAnLycsICc6J1xuXVxuXG5mdW5jdGlvbiBBbHBoYW51bWVyaWNEYXRhIChkYXRhKSB7XG4gIHRoaXMubW9kZSA9IE1vZGUuQUxQSEFOVU1FUklDXG4gIHRoaXMuZGF0YSA9IGRhdGFcbn1cblxuQWxwaGFudW1lcmljRGF0YS5nZXRCaXRzTGVuZ3RoID0gZnVuY3Rpb24gZ2V0Qml0c0xlbmd0aCAobGVuZ3RoKSB7XG4gIHJldHVybiAxMSAqIE1hdGguZmxvb3IobGVuZ3RoIC8gMikgKyA2ICogKGxlbmd0aCAlIDIpXG59XG5cbkFscGhhbnVtZXJpY0RhdGEucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uIGdldExlbmd0aCAoKSB7XG4gIHJldHVybiB0aGlzLmRhdGEubGVuZ3RoXG59XG5cbkFscGhhbnVtZXJpY0RhdGEucHJvdG90eXBlLmdldEJpdHNMZW5ndGggPSBmdW5jdGlvbiBnZXRCaXRzTGVuZ3RoICgpIHtcbiAgcmV0dXJuIEFscGhhbnVtZXJpY0RhdGEuZ2V0Qml0c0xlbmd0aCh0aGlzLmRhdGEubGVuZ3RoKVxufVxuXG5BbHBoYW51bWVyaWNEYXRhLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChiaXRCdWZmZXIpIHtcbiAgdmFyIGlcblxuICAvLyBJbnB1dCBkYXRhIGNoYXJhY3RlcnMgYXJlIGRpdmlkZWQgaW50byBncm91cHMgb2YgdHdvIGNoYXJhY3RlcnNcbiAgLy8gYW5kIGVuY29kZWQgYXMgMTEtYml0IGJpbmFyeSBjb2Rlcy5cbiAgZm9yIChpID0gMDsgaSArIDIgPD0gdGhpcy5kYXRhLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgLy8gVGhlIGNoYXJhY3RlciB2YWx1ZSBvZiB0aGUgZmlyc3QgY2hhcmFjdGVyIGlzIG11bHRpcGxpZWQgYnkgNDVcbiAgICB2YXIgdmFsdWUgPSBBTFBIQV9OVU1fQ0hBUlMuaW5kZXhPZih0aGlzLmRhdGFbaV0pICogNDVcblxuICAgIC8vIFRoZSBjaGFyYWN0ZXIgdmFsdWUgb2YgdGhlIHNlY29uZCBkaWdpdCBpcyBhZGRlZCB0byB0aGUgcHJvZHVjdFxuICAgIHZhbHVlICs9IEFMUEhBX05VTV9DSEFSUy5pbmRleE9mKHRoaXMuZGF0YVtpICsgMV0pXG5cbiAgICAvLyBUaGUgc3VtIGlzIHRoZW4gc3RvcmVkIGFzIDExLWJpdCBiaW5hcnkgbnVtYmVyXG4gICAgYml0QnVmZmVyLnB1dCh2YWx1ZSwgMTEpXG4gIH1cblxuICAvLyBJZiB0aGUgbnVtYmVyIG9mIGlucHV0IGRhdGEgY2hhcmFjdGVycyBpcyBub3QgYSBtdWx0aXBsZSBvZiB0d28sXG4gIC8vIHRoZSBjaGFyYWN0ZXIgdmFsdWUgb2YgdGhlIGZpbmFsIGNoYXJhY3RlciBpcyBlbmNvZGVkIGFzIGEgNi1iaXQgYmluYXJ5IG51bWJlci5cbiAgaWYgKHRoaXMuZGF0YS5sZW5ndGggJSAyKSB7XG4gICAgYml0QnVmZmVyLnB1dChBTFBIQV9OVU1fQ0hBUlMuaW5kZXhPZih0aGlzLmRhdGFbaV0pLCA2KVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQWxwaGFudW1lcmljRGF0YVxuIiwiZnVuY3Rpb24gQml0QnVmZmVyICgpIHtcbiAgdGhpcy5idWZmZXIgPSBbXVxuICB0aGlzLmxlbmd0aCA9IDBcbn1cblxuQml0QnVmZmVyLnByb3RvdHlwZSA9IHtcblxuICBnZXQ6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHZhciBidWZJbmRleCA9IE1hdGguZmxvb3IoaW5kZXggLyA4KVxuICAgIHJldHVybiAoKHRoaXMuYnVmZmVyW2J1ZkluZGV4XSA+Pj4gKDcgLSBpbmRleCAlIDgpKSAmIDEpID09PSAxXG4gIH0sXG5cbiAgcHV0OiBmdW5jdGlvbiAobnVtLCBsZW5ndGgpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnB1dEJpdCgoKG51bSA+Pj4gKGxlbmd0aCAtIGkgLSAxKSkgJiAxKSA9PT0gMSlcbiAgICB9XG4gIH0sXG5cbiAgZ2V0TGVuZ3RoSW5CaXRzOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubGVuZ3RoXG4gIH0sXG5cbiAgcHV0Qml0OiBmdW5jdGlvbiAoYml0KSB7XG4gICAgdmFyIGJ1ZkluZGV4ID0gTWF0aC5mbG9vcih0aGlzLmxlbmd0aCAvIDgpXG4gICAgaWYgKHRoaXMuYnVmZmVyLmxlbmd0aCA8PSBidWZJbmRleCkge1xuICAgICAgdGhpcy5idWZmZXIucHVzaCgwKVxuICAgIH1cblxuICAgIGlmIChiaXQpIHtcbiAgICAgIHRoaXMuYnVmZmVyW2J1ZkluZGV4XSB8PSAoMHg4MCA+Pj4gKHRoaXMubGVuZ3RoICUgOCkpXG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGgrK1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQml0QnVmZmVyXG4iLCJ2YXIgQnVmZmVyVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWxzL2J1ZmZlcicpXG5cbi8qKlxuICogSGVscGVyIGNsYXNzIHRvIGhhbmRsZSBRUiBDb2RlIHN5bWJvbCBtb2R1bGVzXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHNpemUgU3ltYm9sIHNpemVcbiAqL1xuZnVuY3Rpb24gQml0TWF0cml4IChzaXplKSB7XG4gIGlmICghc2l6ZSB8fCBzaXplIDwgMSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQml0TWF0cml4IHNpemUgbXVzdCBiZSBkZWZpbmVkIGFuZCBncmVhdGVyIHRoYW4gMCcpXG4gIH1cblxuICB0aGlzLnNpemUgPSBzaXplXG4gIHRoaXMuZGF0YSA9IEJ1ZmZlclV0aWwuYWxsb2Moc2l6ZSAqIHNpemUpXG4gIHRoaXMucmVzZXJ2ZWRCaXQgPSBCdWZmZXJVdGlsLmFsbG9jKHNpemUgKiBzaXplKVxufVxuXG4vKipcbiAqIFNldCBiaXQgdmFsdWUgYXQgc3BlY2lmaWVkIGxvY2F0aW9uXG4gKiBJZiByZXNlcnZlZCBmbGFnIGlzIHNldCwgdGhpcyBiaXQgd2lsbCBiZSBpZ25vcmVkIGR1cmluZyBtYXNraW5nIHByb2Nlc3NcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gIHJvd1xuICogQHBhcmFtIHtOdW1iZXJ9ICBjb2xcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVzZXJ2ZWRcbiAqL1xuQml0TWF0cml4LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAocm93LCBjb2wsIHZhbHVlLCByZXNlcnZlZCkge1xuICB2YXIgaW5kZXggPSByb3cgKiB0aGlzLnNpemUgKyBjb2xcbiAgdGhpcy5kYXRhW2luZGV4XSA9IHZhbHVlXG4gIGlmIChyZXNlcnZlZCkgdGhpcy5yZXNlcnZlZEJpdFtpbmRleF0gPSB0cnVlXG59XG5cbi8qKlxuICogUmV0dXJucyBiaXQgdmFsdWUgYXQgc3BlY2lmaWVkIGxvY2F0aW9uXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSAgcm93XG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICBjb2xcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbkJpdE1hdHJpeC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHJvdywgY29sKSB7XG4gIHJldHVybiB0aGlzLmRhdGFbcm93ICogdGhpcy5zaXplICsgY29sXVxufVxuXG4vKipcbiAqIEFwcGxpZXMgeG9yIG9wZXJhdG9yIGF0IHNwZWNpZmllZCBsb2NhdGlvblxuICogKHVzZWQgZHVyaW5nIG1hc2tpbmcgcHJvY2VzcylcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gIHJvd1xuICogQHBhcmFtIHtOdW1iZXJ9ICBjb2xcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAqL1xuQml0TWF0cml4LnByb3RvdHlwZS54b3IgPSBmdW5jdGlvbiAocm93LCBjb2wsIHZhbHVlKSB7XG4gIHRoaXMuZGF0YVtyb3cgKiB0aGlzLnNpemUgKyBjb2xdIF49IHZhbHVlXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYml0IGF0IHNwZWNpZmllZCBsb2NhdGlvbiBpcyByZXNlcnZlZFxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSAgIHJvd1xuICogQHBhcmFtIHtOdW1iZXJ9ICAgY29sXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5CaXRNYXRyaXgucHJvdG90eXBlLmlzUmVzZXJ2ZWQgPSBmdW5jdGlvbiAocm93LCBjb2wpIHtcbiAgcmV0dXJuIHRoaXMucmVzZXJ2ZWRCaXRbcm93ICogdGhpcy5zaXplICsgY29sXVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJpdE1hdHJpeFxuIiwidmFyIEJ1ZmZlclV0aWwgPSByZXF1aXJlKCcuLi91dGlscy9idWZmZXInKVxudmFyIE1vZGUgPSByZXF1aXJlKCcuL21vZGUnKVxuXG5mdW5jdGlvbiBCeXRlRGF0YSAoZGF0YSkge1xuICB0aGlzLm1vZGUgPSBNb2RlLkJZVEVcbiAgdGhpcy5kYXRhID0gQnVmZmVyVXRpbC5mcm9tKGRhdGEpXG59XG5cbkJ5dGVEYXRhLmdldEJpdHNMZW5ndGggPSBmdW5jdGlvbiBnZXRCaXRzTGVuZ3RoIChsZW5ndGgpIHtcbiAgcmV0dXJuIGxlbmd0aCAqIDhcbn1cblxuQnl0ZURhdGEucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uIGdldExlbmd0aCAoKSB7XG4gIHJldHVybiB0aGlzLmRhdGEubGVuZ3RoXG59XG5cbkJ5dGVEYXRhLnByb3RvdHlwZS5nZXRCaXRzTGVuZ3RoID0gZnVuY3Rpb24gZ2V0Qml0c0xlbmd0aCAoKSB7XG4gIHJldHVybiBCeXRlRGF0YS5nZXRCaXRzTGVuZ3RoKHRoaXMuZGF0YS5sZW5ndGgpXG59XG5cbkJ5dGVEYXRhLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChiaXRCdWZmZXIpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmRhdGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgYml0QnVmZmVyLnB1dCh0aGlzLmRhdGFbaV0sIDgpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCeXRlRGF0YVxuIiwidmFyIEVDTGV2ZWwgPSByZXF1aXJlKCcuL2Vycm9yLWNvcnJlY3Rpb24tbGV2ZWwnKVxyXG5cclxudmFyIEVDX0JMT0NLU19UQUJMRSA9IFtcclxuLy8gTCAgTSAgUSAgSFxyXG4gIDEsIDEsIDEsIDEsXHJcbiAgMSwgMSwgMSwgMSxcclxuICAxLCAxLCAyLCAyLFxyXG4gIDEsIDIsIDIsIDQsXHJcbiAgMSwgMiwgNCwgNCxcclxuICAyLCA0LCA0LCA0LFxyXG4gIDIsIDQsIDYsIDUsXHJcbiAgMiwgNCwgNiwgNixcclxuICAyLCA1LCA4LCA4LFxyXG4gIDQsIDUsIDgsIDgsXHJcbiAgNCwgNSwgOCwgMTEsXHJcbiAgNCwgOCwgMTAsIDExLFxyXG4gIDQsIDksIDEyLCAxNixcclxuICA0LCA5LCAxNiwgMTYsXHJcbiAgNiwgMTAsIDEyLCAxOCxcclxuICA2LCAxMCwgMTcsIDE2LFxyXG4gIDYsIDExLCAxNiwgMTksXHJcbiAgNiwgMTMsIDE4LCAyMSxcclxuICA3LCAxNCwgMjEsIDI1LFxyXG4gIDgsIDE2LCAyMCwgMjUsXHJcbiAgOCwgMTcsIDIzLCAyNSxcclxuICA5LCAxNywgMjMsIDM0LFxyXG4gIDksIDE4LCAyNSwgMzAsXHJcbiAgMTAsIDIwLCAyNywgMzIsXHJcbiAgMTIsIDIxLCAyOSwgMzUsXHJcbiAgMTIsIDIzLCAzNCwgMzcsXHJcbiAgMTIsIDI1LCAzNCwgNDAsXHJcbiAgMTMsIDI2LCAzNSwgNDIsXHJcbiAgMTQsIDI4LCAzOCwgNDUsXHJcbiAgMTUsIDI5LCA0MCwgNDgsXHJcbiAgMTYsIDMxLCA0MywgNTEsXHJcbiAgMTcsIDMzLCA0NSwgNTQsXHJcbiAgMTgsIDM1LCA0OCwgNTcsXHJcbiAgMTksIDM3LCA1MSwgNjAsXHJcbiAgMTksIDM4LCA1MywgNjMsXHJcbiAgMjAsIDQwLCA1NiwgNjYsXHJcbiAgMjEsIDQzLCA1OSwgNzAsXHJcbiAgMjIsIDQ1LCA2MiwgNzQsXHJcbiAgMjQsIDQ3LCA2NSwgNzcsXHJcbiAgMjUsIDQ5LCA2OCwgODFcclxuXVxyXG5cclxudmFyIEVDX0NPREVXT1JEU19UQUJMRSA9IFtcclxuLy8gTCAgTSAgUSAgSFxyXG4gIDcsIDEwLCAxMywgMTcsXHJcbiAgMTAsIDE2LCAyMiwgMjgsXHJcbiAgMTUsIDI2LCAzNiwgNDQsXHJcbiAgMjAsIDM2LCA1MiwgNjQsXHJcbiAgMjYsIDQ4LCA3MiwgODgsXHJcbiAgMzYsIDY0LCA5NiwgMTEyLFxyXG4gIDQwLCA3MiwgMTA4LCAxMzAsXHJcbiAgNDgsIDg4LCAxMzIsIDE1NixcclxuICA2MCwgMTEwLCAxNjAsIDE5MixcclxuICA3MiwgMTMwLCAxOTIsIDIyNCxcclxuICA4MCwgMTUwLCAyMjQsIDI2NCxcclxuICA5NiwgMTc2LCAyNjAsIDMwOCxcclxuICAxMDQsIDE5OCwgMjg4LCAzNTIsXHJcbiAgMTIwLCAyMTYsIDMyMCwgMzg0LFxyXG4gIDEzMiwgMjQwLCAzNjAsIDQzMixcclxuICAxNDQsIDI4MCwgNDA4LCA0ODAsXHJcbiAgMTY4LCAzMDgsIDQ0OCwgNTMyLFxyXG4gIDE4MCwgMzM4LCA1MDQsIDU4OCxcclxuICAxOTYsIDM2NCwgNTQ2LCA2NTAsXHJcbiAgMjI0LCA0MTYsIDYwMCwgNzAwLFxyXG4gIDIyNCwgNDQyLCA2NDQsIDc1MCxcclxuICAyNTIsIDQ3NiwgNjkwLCA4MTYsXHJcbiAgMjcwLCA1MDQsIDc1MCwgOTAwLFxyXG4gIDMwMCwgNTYwLCA4MTAsIDk2MCxcclxuICAzMTIsIDU4OCwgODcwLCAxMDUwLFxyXG4gIDMzNiwgNjQ0LCA5NTIsIDExMTAsXHJcbiAgMzYwLCA3MDAsIDEwMjAsIDEyMDAsXHJcbiAgMzkwLCA3MjgsIDEwNTAsIDEyNjAsXHJcbiAgNDIwLCA3ODQsIDExNDAsIDEzNTAsXHJcbiAgNDUwLCA4MTIsIDEyMDAsIDE0NDAsXHJcbiAgNDgwLCA4NjgsIDEyOTAsIDE1MzAsXHJcbiAgNTEwLCA5MjQsIDEzNTAsIDE2MjAsXHJcbiAgNTQwLCA5ODAsIDE0NDAsIDE3MTAsXHJcbiAgNTcwLCAxMDM2LCAxNTMwLCAxODAwLFxyXG4gIDU3MCwgMTA2NCwgMTU5MCwgMTg5MCxcclxuICA2MDAsIDExMjAsIDE2ODAsIDE5ODAsXHJcbiAgNjMwLCAxMjA0LCAxNzcwLCAyMTAwLFxyXG4gIDY2MCwgMTI2MCwgMTg2MCwgMjIyMCxcclxuICA3MjAsIDEzMTYsIDE5NTAsIDIzMTAsXHJcbiAgNzUwLCAxMzcyLCAyMDQwLCAyNDMwXHJcbl1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZXJyb3IgY29ycmVjdGlvbiBibG9jayB0aGF0IHRoZSBRUiBDb2RlIHNob3VsZCBjb250YWluXHJcbiAqIGZvciB0aGUgc3BlY2lmaWVkIHZlcnNpb24gYW5kIGVycm9yIGNvcnJlY3Rpb24gbGV2ZWwuXHJcbiAqXHJcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiAgICAgICAgICAgICAgUVIgQ29kZSB2ZXJzaW9uXHJcbiAqIEBwYXJhbSAge051bWJlcn0gZXJyb3JDb3JyZWN0aW9uTGV2ZWwgRXJyb3IgY29ycmVjdGlvbiBsZXZlbFxyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgIE51bWJlciBvZiBlcnJvciBjb3JyZWN0aW9uIGJsb2Nrc1xyXG4gKi9cclxuZXhwb3J0cy5nZXRCbG9ja3NDb3VudCA9IGZ1bmN0aW9uIGdldEJsb2Nrc0NvdW50ICh2ZXJzaW9uLCBlcnJvckNvcnJlY3Rpb25MZXZlbCkge1xyXG4gIHN3aXRjaCAoZXJyb3JDb3JyZWN0aW9uTGV2ZWwpIHtcclxuICAgIGNhc2UgRUNMZXZlbC5MOlxyXG4gICAgICByZXR1cm4gRUNfQkxPQ0tTX1RBQkxFWyh2ZXJzaW9uIC0gMSkgKiA0ICsgMF1cclxuICAgIGNhc2UgRUNMZXZlbC5NOlxyXG4gICAgICByZXR1cm4gRUNfQkxPQ0tTX1RBQkxFWyh2ZXJzaW9uIC0gMSkgKiA0ICsgMV1cclxuICAgIGNhc2UgRUNMZXZlbC5ROlxyXG4gICAgICByZXR1cm4gRUNfQkxPQ0tTX1RBQkxFWyh2ZXJzaW9uIC0gMSkgKiA0ICsgMl1cclxuICAgIGNhc2UgRUNMZXZlbC5IOlxyXG4gICAgICByZXR1cm4gRUNfQkxPQ0tTX1RBQkxFWyh2ZXJzaW9uIC0gMSkgKiA0ICsgM11cclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiB1bmRlZmluZWRcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZXJyb3IgY29ycmVjdGlvbiBjb2Rld29yZHMgdG8gdXNlIGZvciB0aGUgc3BlY2lmaWVkXHJcbiAqIHZlcnNpb24gYW5kIGVycm9yIGNvcnJlY3Rpb24gbGV2ZWwuXHJcbiAqXHJcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiAgICAgICAgICAgICAgUVIgQ29kZSB2ZXJzaW9uXHJcbiAqIEBwYXJhbSAge051bWJlcn0gZXJyb3JDb3JyZWN0aW9uTGV2ZWwgRXJyb3IgY29ycmVjdGlvbiBsZXZlbFxyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgIE51bWJlciBvZiBlcnJvciBjb3JyZWN0aW9uIGNvZGV3b3Jkc1xyXG4gKi9cclxuZXhwb3J0cy5nZXRUb3RhbENvZGV3b3Jkc0NvdW50ID0gZnVuY3Rpb24gZ2V0VG90YWxDb2Rld29yZHNDb3VudCAodmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpIHtcclxuICBzd2l0Y2ggKGVycm9yQ29ycmVjdGlvbkxldmVsKSB7XHJcbiAgICBjYXNlIEVDTGV2ZWwuTDpcclxuICAgICAgcmV0dXJuIEVDX0NPREVXT1JEU19UQUJMRVsodmVyc2lvbiAtIDEpICogNCArIDBdXHJcbiAgICBjYXNlIEVDTGV2ZWwuTTpcclxuICAgICAgcmV0dXJuIEVDX0NPREVXT1JEU19UQUJMRVsodmVyc2lvbiAtIDEpICogNCArIDFdXHJcbiAgICBjYXNlIEVDTGV2ZWwuUTpcclxuICAgICAgcmV0dXJuIEVDX0NPREVXT1JEU19UQUJMRVsodmVyc2lvbiAtIDEpICogNCArIDJdXHJcbiAgICBjYXNlIEVDTGV2ZWwuSDpcclxuICAgICAgcmV0dXJuIEVDX0NPREVXT1JEU19UQUJMRVsodmVyc2lvbiAtIDEpICogNCArIDNdXHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gdW5kZWZpbmVkXHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydHMuTCA9IHsgYml0OiAxIH1cbmV4cG9ydHMuTSA9IHsgYml0OiAwIH1cbmV4cG9ydHMuUSA9IHsgYml0OiAzIH1cbmV4cG9ydHMuSCA9IHsgYml0OiAyIH1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAoc3RyaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignUGFyYW0gaXMgbm90IGEgc3RyaW5nJylcbiAgfVxuXG4gIHZhciBsY1N0ciA9IHN0cmluZy50b0xvd2VyQ2FzZSgpXG5cbiAgc3dpdGNoIChsY1N0cikge1xuICAgIGNhc2UgJ2wnOlxuICAgIGNhc2UgJ2xvdyc6XG4gICAgICByZXR1cm4gZXhwb3J0cy5MXG5cbiAgICBjYXNlICdtJzpcbiAgICBjYXNlICdtZWRpdW0nOlxuICAgICAgcmV0dXJuIGV4cG9ydHMuTVxuXG4gICAgY2FzZSAncSc6XG4gICAgY2FzZSAncXVhcnRpbGUnOlxuICAgICAgcmV0dXJuIGV4cG9ydHMuUVxuXG4gICAgY2FzZSAnaCc6XG4gICAgY2FzZSAnaGlnaCc6XG4gICAgICByZXR1cm4gZXhwb3J0cy5IXG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIEVDIExldmVsOiAnICsgc3RyaW5nKVxuICB9XG59XG5cbmV4cG9ydHMuaXNWYWxpZCA9IGZ1bmN0aW9uIGlzVmFsaWQgKGxldmVsKSB7XG4gIHJldHVybiBsZXZlbCAmJiB0eXBlb2YgbGV2ZWwuYml0ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIGxldmVsLmJpdCA+PSAwICYmIGxldmVsLmJpdCA8IDRcbn1cblxuZXhwb3J0cy5mcm9tID0gZnVuY3Rpb24gZnJvbSAodmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICBpZiAoZXhwb3J0cy5pc1ZhbGlkKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh2YWx1ZSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkZWZhdWx0VmFsdWVcbiAgfVxufVxuIiwidmFyIGdldFN5bWJvbFNpemUgPSByZXF1aXJlKCcuL3V0aWxzJykuZ2V0U3ltYm9sU2l6ZVxudmFyIEZJTkRFUl9QQVRURVJOX1NJWkUgPSA3XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBwb3NpdGlvbnMgb2YgZWFjaCBmaW5kZXIgcGF0dGVybi5cbiAqIEVhY2ggYXJyYXkncyBlbGVtZW50IHJlcHJlc2VudCB0aGUgdG9wLWxlZnQgcG9pbnQgb2YgdGhlIHBhdHRlcm4gYXMgKHgsIHkpIGNvb3JkaW5hdGVzXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgIEFycmF5IG9mIGNvb3JkaW5hdGVzXG4gKi9cbmV4cG9ydHMuZ2V0UG9zaXRpb25zID0gZnVuY3Rpb24gZ2V0UG9zaXRpb25zICh2ZXJzaW9uKSB7XG4gIHZhciBzaXplID0gZ2V0U3ltYm9sU2l6ZSh2ZXJzaW9uKVxuXG4gIHJldHVybiBbXG4gICAgLy8gdG9wLWxlZnRcbiAgICBbMCwgMF0sXG4gICAgLy8gdG9wLXJpZ2h0XG4gICAgW3NpemUgLSBGSU5ERVJfUEFUVEVSTl9TSVpFLCAwXSxcbiAgICAvLyBib3R0b20tbGVmdFxuICAgIFswLCBzaXplIC0gRklOREVSX1BBVFRFUk5fU0laRV1cbiAgXVxufVxuIiwidmFyIFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5cbnZhciBHMTUgPSAoMSA8PCAxMCkgfCAoMSA8PCA4KSB8ICgxIDw8IDUpIHwgKDEgPDwgNCkgfCAoMSA8PCAyKSB8ICgxIDw8IDEpIHwgKDEgPDwgMClcbnZhciBHMTVfTUFTSyA9ICgxIDw8IDE0KSB8ICgxIDw8IDEyKSB8ICgxIDw8IDEwKSB8ICgxIDw8IDQpIHwgKDEgPDwgMSlcbnZhciBHMTVfQkNIID0gVXRpbHMuZ2V0QkNIRGlnaXQoRzE1KVxuXG4vKipcbiAqIFJldHVybnMgZm9ybWF0IGluZm9ybWF0aW9uIHdpdGggcmVsYXRpdmUgZXJyb3IgY29ycmVjdGlvbiBiaXRzXG4gKlxuICogVGhlIGZvcm1hdCBpbmZvcm1hdGlvbiBpcyBhIDE1LWJpdCBzZXF1ZW5jZSBjb250YWluaW5nIDUgZGF0YSBiaXRzLFxuICogd2l0aCAxMCBlcnJvciBjb3JyZWN0aW9uIGJpdHMgY2FsY3VsYXRlZCB1c2luZyB0aGUgKDE1LCA1KSBCQ0ggY29kZS5cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGVycm9yQ29ycmVjdGlvbkxldmVsIEVycm9yIGNvcnJlY3Rpb24gbGV2ZWxcbiAqIEBwYXJhbSAge051bWJlcn0gbWFzayAgICAgICAgICAgICAgICAgTWFzayBwYXR0ZXJuXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgIEVuY29kZWQgZm9ybWF0IGluZm9ybWF0aW9uIGJpdHNcbiAqL1xuZXhwb3J0cy5nZXRFbmNvZGVkQml0cyA9IGZ1bmN0aW9uIGdldEVuY29kZWRCaXRzIChlcnJvckNvcnJlY3Rpb25MZXZlbCwgbWFzaykge1xuICB2YXIgZGF0YSA9ICgoZXJyb3JDb3JyZWN0aW9uTGV2ZWwuYml0IDw8IDMpIHwgbWFzaylcbiAgdmFyIGQgPSBkYXRhIDw8IDEwXG5cbiAgd2hpbGUgKFV0aWxzLmdldEJDSERpZ2l0KGQpIC0gRzE1X0JDSCA+PSAwKSB7XG4gICAgZCBePSAoRzE1IDw8IChVdGlscy5nZXRCQ0hEaWdpdChkKSAtIEcxNV9CQ0gpKVxuICB9XG5cbiAgLy8geG9yIGZpbmFsIGRhdGEgd2l0aCBtYXNrIHBhdHRlcm4gaW4gb3JkZXIgdG8gZW5zdXJlIHRoYXRcbiAgLy8gbm8gY29tYmluYXRpb24gb2YgRXJyb3IgQ29ycmVjdGlvbiBMZXZlbCBhbmQgZGF0YSBtYXNrIHBhdHRlcm5cbiAgLy8gd2lsbCByZXN1bHQgaW4gYW4gYWxsLXplcm8gZGF0YSBzdHJpbmdcbiAgcmV0dXJuICgoZGF0YSA8PCAxMCkgfCBkKSBeIEcxNV9NQVNLXG59XG4iLCJ2YXIgQnVmZmVyVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWxzL2J1ZmZlcicpXG5cbnZhciBFWFBfVEFCTEUgPSBCdWZmZXJVdGlsLmFsbG9jKDUxMilcbnZhciBMT0dfVEFCTEUgPSBCdWZmZXJVdGlsLmFsbG9jKDI1Nilcbi8qKlxuICogUHJlY29tcHV0ZSB0aGUgbG9nIGFuZCBhbnRpLWxvZyB0YWJsZXMgZm9yIGZhc3RlciBjb21wdXRhdGlvbiBsYXRlclxuICpcbiAqIEZvciBlYWNoIHBvc3NpYmxlIHZhbHVlIGluIHRoZSBnYWxvaXMgZmllbGQgMl44LCB3ZSB3aWxsIHByZS1jb21wdXRlXG4gKiB0aGUgbG9nYXJpdGhtIGFuZCBhbnRpLWxvZ2FyaXRobSAoZXhwb25lbnRpYWwpIG9mIHRoaXMgdmFsdWVcbiAqXG4gKiByZWYge0BsaW5rIGh0dHBzOi8vZW4ud2lraXZlcnNpdHkub3JnL3dpa2kvUmVlZCVFMiU4MCU5M1NvbG9tb25fY29kZXNfZm9yX2NvZGVycyNJbnRyb2R1Y3Rpb25fdG9fbWF0aGVtYXRpY2FsX2ZpZWxkc31cbiAqL1xuOyhmdW5jdGlvbiBpbml0VGFibGVzICgpIHtcbiAgdmFyIHggPSAxXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMjU1OyBpKyspIHtcbiAgICBFWFBfVEFCTEVbaV0gPSB4XG4gICAgTE9HX1RBQkxFW3hdID0gaVxuXG4gICAgeCA8PD0gMSAvLyBtdWx0aXBseSBieSAyXG5cbiAgICAvLyBUaGUgUVIgY29kZSBzcGVjaWZpY2F0aW9uIHNheXMgdG8gdXNlIGJ5dGUtd2lzZSBtb2R1bG8gMTAwMDExMTAxIGFyaXRobWV0aWMuXG4gICAgLy8gVGhpcyBtZWFucyB0aGF0IHdoZW4gYSBudW1iZXIgaXMgMjU2IG9yIGxhcmdlciwgaXQgc2hvdWxkIGJlIFhPUmVkIHdpdGggMHgxMUQuXG4gICAgaWYgKHggJiAweDEwMCkgeyAvLyBzaW1pbGFyIHRvIHggPj0gMjU2LCBidXQgYSBsb3QgZmFzdGVyIChiZWNhdXNlIDB4MTAwID09IDI1NilcbiAgICAgIHggXj0gMHgxMURcbiAgICB9XG4gIH1cblxuICAvLyBPcHRpbWl6YXRpb246IGRvdWJsZSB0aGUgc2l6ZSBvZiB0aGUgYW50aS1sb2cgdGFibGUgc28gdGhhdCB3ZSBkb24ndCBuZWVkIHRvIG1vZCAyNTUgdG9cbiAgLy8gc3RheSBpbnNpZGUgdGhlIGJvdW5kcyAoYmVjYXVzZSB3ZSB3aWxsIG1haW5seSB1c2UgdGhpcyB0YWJsZSBmb3IgdGhlIG11bHRpcGxpY2F0aW9uIG9mXG4gIC8vIHR3byBHRiBudW1iZXJzLCBubyBtb3JlKS5cbiAgLy8gQHNlZSB7QGxpbmsgbXVsfVxuICBmb3IgKGkgPSAyNTU7IGkgPCA1MTI7IGkrKykge1xuICAgIEVYUF9UQUJMRVtpXSA9IEVYUF9UQUJMRVtpIC0gMjU1XVxuICB9XG59KCkpXG5cbi8qKlxuICogUmV0dXJucyBsb2cgdmFsdWUgb2YgbiBpbnNpZGUgR2Fsb2lzIEZpZWxkXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSBuXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cbmV4cG9ydHMubG9nID0gZnVuY3Rpb24gbG9nIChuKSB7XG4gIGlmIChuIDwgMSkgdGhyb3cgbmV3IEVycm9yKCdsb2coJyArIG4gKyAnKScpXG4gIHJldHVybiBMT0dfVEFCTEVbbl1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFudGktbG9nIHZhbHVlIG9mIG4gaW5zaWRlIEdhbG9pcyBGaWVsZFxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gblxuICogQHJldHVybiB7TnVtYmVyfVxuICovXG5leHBvcnRzLmV4cCA9IGZ1bmN0aW9uIGV4cCAobikge1xuICByZXR1cm4gRVhQX1RBQkxFW25dXG59XG5cbi8qKlxuICogTXVsdGlwbGllcyB0d28gbnVtYmVyIGluc2lkZSBHYWxvaXMgRmllbGRcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHhcbiAqIEBwYXJhbSAge051bWJlcn0geVxuICogQHJldHVybiB7TnVtYmVyfVxuICovXG5leHBvcnRzLm11bCA9IGZ1bmN0aW9uIG11bCAoeCwgeSkge1xuICBpZiAoeCA9PT0gMCB8fCB5ID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIHNob3VsZCBiZSBFWFBfVEFCTEVbKExPR19UQUJMRVt4XSArIExPR19UQUJMRVt5XSkgJSAyNTVdIGlmIEVYUF9UQUJMRSB3YXNuJ3Qgb3ZlcnNpemVkXG4gIC8vIEBzZWUge0BsaW5rIGluaXRUYWJsZXN9XG4gIHJldHVybiBFWFBfVEFCTEVbTE9HX1RBQkxFW3hdICsgTE9HX1RBQkxFW3ldXVxufVxuIiwidmFyIE1vZGUgPSByZXF1aXJlKCcuL21vZGUnKVxudmFyIFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5cbmZ1bmN0aW9uIEthbmppRGF0YSAoZGF0YSkge1xuICB0aGlzLm1vZGUgPSBNb2RlLktBTkpJXG4gIHRoaXMuZGF0YSA9IGRhdGFcbn1cblxuS2FuamlEYXRhLmdldEJpdHNMZW5ndGggPSBmdW5jdGlvbiBnZXRCaXRzTGVuZ3RoIChsZW5ndGgpIHtcbiAgcmV0dXJuIGxlbmd0aCAqIDEzXG59XG5cbkthbmppRGF0YS5wcm90b3R5cGUuZ2V0TGVuZ3RoID0gZnVuY3Rpb24gZ2V0TGVuZ3RoICgpIHtcbiAgcmV0dXJuIHRoaXMuZGF0YS5sZW5ndGhcbn1cblxuS2FuamlEYXRhLnByb3RvdHlwZS5nZXRCaXRzTGVuZ3RoID0gZnVuY3Rpb24gZ2V0Qml0c0xlbmd0aCAoKSB7XG4gIHJldHVybiBLYW5qaURhdGEuZ2V0Qml0c0xlbmd0aCh0aGlzLmRhdGEubGVuZ3RoKVxufVxuXG5LYW5qaURhdGEucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGJpdEJ1ZmZlcikge1xuICB2YXIgaVxuXG4gIC8vIEluIHRoZSBTaGlmdCBKSVMgc3lzdGVtLCBLYW5qaSBjaGFyYWN0ZXJzIGFyZSByZXByZXNlbnRlZCBieSBhIHR3byBieXRlIGNvbWJpbmF0aW9uLlxuICAvLyBUaGVzZSBieXRlIHZhbHVlcyBhcmUgc2hpZnRlZCBmcm9tIHRoZSBKSVMgWCAwMjA4IHZhbHVlcy5cbiAgLy8gSklTIFggMDIwOCBnaXZlcyBkZXRhaWxzIG9mIHRoZSBzaGlmdCBjb2RlZCByZXByZXNlbnRhdGlvbi5cbiAgZm9yIChpID0gMDsgaSA8IHRoaXMuZGF0YS5sZW5ndGg7IGkrKykge1xuICAgIHZhciB2YWx1ZSA9IFV0aWxzLnRvU0pJUyh0aGlzLmRhdGFbaV0pXG5cbiAgICAvLyBGb3IgY2hhcmFjdGVycyB3aXRoIFNoaWZ0IEpJUyB2YWx1ZXMgZnJvbSAweDgxNDAgdG8gMHg5RkZDOlxuICAgIGlmICh2YWx1ZSA+PSAweDgxNDAgJiYgdmFsdWUgPD0gMHg5RkZDKSB7XG4gICAgICAvLyBTdWJ0cmFjdCAweDgxNDAgZnJvbSBTaGlmdCBKSVMgdmFsdWVcbiAgICAgIHZhbHVlIC09IDB4ODE0MFxuXG4gICAgLy8gRm9yIGNoYXJhY3RlcnMgd2l0aCBTaGlmdCBKSVMgdmFsdWVzIGZyb20gMHhFMDQwIHRvIDB4RUJCRlxuICAgIH0gZWxzZSBpZiAodmFsdWUgPj0gMHhFMDQwICYmIHZhbHVlIDw9IDB4RUJCRikge1xuICAgICAgLy8gU3VidHJhY3QgMHhDMTQwIGZyb20gU2hpZnQgSklTIHZhbHVlXG4gICAgICB2YWx1ZSAtPSAweEMxNDBcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSW52YWxpZCBTSklTIGNoYXJhY3RlcjogJyArIHRoaXMuZGF0YVtpXSArICdcXG4nICtcbiAgICAgICAgJ01ha2Ugc3VyZSB5b3VyIGNoYXJzZXQgaXMgVVRGLTgnKVxuICAgIH1cblxuICAgIC8vIE11bHRpcGx5IG1vc3Qgc2lnbmlmaWNhbnQgYnl0ZSBvZiByZXN1bHQgYnkgMHhDMFxuICAgIC8vIGFuZCBhZGQgbGVhc3Qgc2lnbmlmaWNhbnQgYnl0ZSB0byBwcm9kdWN0XG4gICAgdmFsdWUgPSAoKCh2YWx1ZSA+Pj4gOCkgJiAweGZmKSAqIDB4QzApICsgKHZhbHVlICYgMHhmZilcblxuICAgIC8vIENvbnZlcnQgcmVzdWx0IHRvIGEgMTMtYml0IGJpbmFyeSBzdHJpbmdcbiAgICBiaXRCdWZmZXIucHV0KHZhbHVlLCAxMylcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEthbmppRGF0YVxuIiwiLyoqXG4gKiBEYXRhIG1hc2sgcGF0dGVybiByZWZlcmVuY2VcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMuUGF0dGVybnMgPSB7XG4gIFBBVFRFUk4wMDA6IDAsXG4gIFBBVFRFUk4wMDE6IDEsXG4gIFBBVFRFUk4wMTA6IDIsXG4gIFBBVFRFUk4wMTE6IDMsXG4gIFBBVFRFUk4xMDA6IDQsXG4gIFBBVFRFUk4xMDE6IDUsXG4gIFBBVFRFUk4xMTA6IDYsXG4gIFBBVFRFUk4xMTE6IDdcbn1cblxuLyoqXG4gKiBXZWlnaHRlZCBwZW5hbHR5IHNjb3JlcyBmb3IgdGhlIHVuZGVzaXJhYmxlIGZlYXR1cmVzXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG52YXIgUGVuYWx0eVNjb3JlcyA9IHtcbiAgTjE6IDMsXG4gIE4yOiAzLFxuICBOMzogNDAsXG4gIE40OiAxMFxufVxuXG4vKipcbiAqIENoZWNrIGlmIG1hc2sgcGF0dGVybiB2YWx1ZSBpcyB2YWxpZFxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gIG1hc2sgICAgTWFzayBwYXR0ZXJuXG4gKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICAgIHRydWUgaWYgdmFsaWQsIGZhbHNlIG90aGVyd2lzZVxuICovXG5leHBvcnRzLmlzVmFsaWQgPSBmdW5jdGlvbiBpc1ZhbGlkIChtYXNrKSB7XG4gIHJldHVybiBtYXNrICE9IG51bGwgJiYgbWFzayAhPT0gJycgJiYgIWlzTmFOKG1hc2spICYmIG1hc2sgPj0gMCAmJiBtYXNrIDw9IDdcbn1cblxuLyoqXG4gKiBSZXR1cm5zIG1hc2sgcGF0dGVybiBmcm9tIGEgdmFsdWUuXG4gKiBJZiB2YWx1ZSBpcyBub3QgdmFsaWQsIHJldHVybnMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfFN0cmluZ30gdmFsdWUgICAgICAgIE1hc2sgcGF0dGVybiB2YWx1ZVxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgICAgICAgICAgICAgIFZhbGlkIG1hc2sgcGF0dGVybiBvciB1bmRlZmluZWRcbiAqL1xuZXhwb3J0cy5mcm9tID0gZnVuY3Rpb24gZnJvbSAodmFsdWUpIHtcbiAgcmV0dXJuIGV4cG9ydHMuaXNWYWxpZCh2YWx1ZSkgPyBwYXJzZUludCh2YWx1ZSwgMTApIDogdW5kZWZpbmVkXG59XG5cbi8qKlxuKiBGaW5kIGFkamFjZW50IG1vZHVsZXMgaW4gcm93L2NvbHVtbiB3aXRoIHRoZSBzYW1lIGNvbG9yXG4qIGFuZCBhc3NpZ24gYSBwZW5hbHR5IHZhbHVlLlxuKlxuKiBQb2ludHM6IE4xICsgaVxuKiBpIGlzIHRoZSBhbW91bnQgYnkgd2hpY2ggdGhlIG51bWJlciBvZiBhZGphY2VudCBtb2R1bGVzIG9mIHRoZSBzYW1lIGNvbG9yIGV4Y2VlZHMgNVxuKi9cbmV4cG9ydHMuZ2V0UGVuYWx0eU4xID0gZnVuY3Rpb24gZ2V0UGVuYWx0eU4xIChkYXRhKSB7XG4gIHZhciBzaXplID0gZGF0YS5zaXplXG4gIHZhciBwb2ludHMgPSAwXG4gIHZhciBzYW1lQ291bnRDb2wgPSAwXG4gIHZhciBzYW1lQ291bnRSb3cgPSAwXG4gIHZhciBsYXN0Q29sID0gbnVsbFxuICB2YXIgbGFzdFJvdyA9IG51bGxcblxuICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCBzaXplOyByb3crKykge1xuICAgIHNhbWVDb3VudENvbCA9IHNhbWVDb3VudFJvdyA9IDBcbiAgICBsYXN0Q29sID0gbGFzdFJvdyA9IG51bGxcblxuICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IHNpemU7IGNvbCsrKSB7XG4gICAgICB2YXIgbW9kdWxlID0gZGF0YS5nZXQocm93LCBjb2wpXG4gICAgICBpZiAobW9kdWxlID09PSBsYXN0Q29sKSB7XG4gICAgICAgIHNhbWVDb3VudENvbCsrXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2FtZUNvdW50Q29sID49IDUpIHBvaW50cyArPSBQZW5hbHR5U2NvcmVzLk4xICsgKHNhbWVDb3VudENvbCAtIDUpXG4gICAgICAgIGxhc3RDb2wgPSBtb2R1bGVcbiAgICAgICAgc2FtZUNvdW50Q29sID0gMVxuICAgICAgfVxuXG4gICAgICBtb2R1bGUgPSBkYXRhLmdldChjb2wsIHJvdylcbiAgICAgIGlmIChtb2R1bGUgPT09IGxhc3RSb3cpIHtcbiAgICAgICAgc2FtZUNvdW50Um93KytcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzYW1lQ291bnRSb3cgPj0gNSkgcG9pbnRzICs9IFBlbmFsdHlTY29yZXMuTjEgKyAoc2FtZUNvdW50Um93IC0gNSlcbiAgICAgICAgbGFzdFJvdyA9IG1vZHVsZVxuICAgICAgICBzYW1lQ291bnRSb3cgPSAxXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNhbWVDb3VudENvbCA+PSA1KSBwb2ludHMgKz0gUGVuYWx0eVNjb3Jlcy5OMSArIChzYW1lQ291bnRDb2wgLSA1KVxuICAgIGlmIChzYW1lQ291bnRSb3cgPj0gNSkgcG9pbnRzICs9IFBlbmFsdHlTY29yZXMuTjEgKyAoc2FtZUNvdW50Um93IC0gNSlcbiAgfVxuXG4gIHJldHVybiBwb2ludHNcbn1cblxuLyoqXG4gKiBGaW5kIDJ4MiBibG9ja3Mgd2l0aCB0aGUgc2FtZSBjb2xvciBhbmQgYXNzaWduIGEgcGVuYWx0eSB2YWx1ZVxuICpcbiAqIFBvaW50czogTjIgKiAobSAtIDEpICogKG4gLSAxKVxuICovXG5leHBvcnRzLmdldFBlbmFsdHlOMiA9IGZ1bmN0aW9uIGdldFBlbmFsdHlOMiAoZGF0YSkge1xuICB2YXIgc2l6ZSA9IGRhdGEuc2l6ZVxuICB2YXIgcG9pbnRzID0gMFxuXG4gIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHNpemUgLSAxOyByb3crKykge1xuICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IHNpemUgLSAxOyBjb2wrKykge1xuICAgICAgdmFyIGxhc3QgPSBkYXRhLmdldChyb3csIGNvbCkgK1xuICAgICAgICBkYXRhLmdldChyb3csIGNvbCArIDEpICtcbiAgICAgICAgZGF0YS5nZXQocm93ICsgMSwgY29sKSArXG4gICAgICAgIGRhdGEuZ2V0KHJvdyArIDEsIGNvbCArIDEpXG5cbiAgICAgIGlmIChsYXN0ID09PSA0IHx8IGxhc3QgPT09IDApIHBvaW50cysrXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBvaW50cyAqIFBlbmFsdHlTY29yZXMuTjJcbn1cblxuLyoqXG4gKiBGaW5kIDE6MTozOjE6MSByYXRpbyAoZGFyazpsaWdodDpkYXJrOmxpZ2h0OmRhcmspIHBhdHRlcm4gaW4gcm93L2NvbHVtbixcbiAqIHByZWNlZGVkIG9yIGZvbGxvd2VkIGJ5IGxpZ2h0IGFyZWEgNCBtb2R1bGVzIHdpZGVcbiAqXG4gKiBQb2ludHM6IE4zICogbnVtYmVyIG9mIHBhdHRlcm4gZm91bmRcbiAqL1xuZXhwb3J0cy5nZXRQZW5hbHR5TjMgPSBmdW5jdGlvbiBnZXRQZW5hbHR5TjMgKGRhdGEpIHtcbiAgdmFyIHNpemUgPSBkYXRhLnNpemVcbiAgdmFyIHBvaW50cyA9IDBcbiAgdmFyIGJpdHNDb2wgPSAwXG4gIHZhciBiaXRzUm93ID0gMFxuXG4gIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHNpemU7IHJvdysrKSB7XG4gICAgYml0c0NvbCA9IGJpdHNSb3cgPSAwXG4gICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgc2l6ZTsgY29sKyspIHtcbiAgICAgIGJpdHNDb2wgPSAoKGJpdHNDb2wgPDwgMSkgJiAweDdGRikgfCBkYXRhLmdldChyb3csIGNvbClcbiAgICAgIGlmIChjb2wgPj0gMTAgJiYgKGJpdHNDb2wgPT09IDB4NUQwIHx8IGJpdHNDb2wgPT09IDB4MDVEKSkgcG9pbnRzKytcblxuICAgICAgYml0c1JvdyA9ICgoYml0c1JvdyA8PCAxKSAmIDB4N0ZGKSB8IGRhdGEuZ2V0KGNvbCwgcm93KVxuICAgICAgaWYgKGNvbCA+PSAxMCAmJiAoYml0c1JvdyA9PT0gMHg1RDAgfHwgYml0c1JvdyA9PT0gMHgwNUQpKSBwb2ludHMrK1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwb2ludHMgKiBQZW5hbHR5U2NvcmVzLk4zXG59XG5cbi8qKlxuICogQ2FsY3VsYXRlIHByb3BvcnRpb24gb2YgZGFyayBtb2R1bGVzIGluIGVudGlyZSBzeW1ib2xcbiAqXG4gKiBQb2ludHM6IE40ICoga1xuICpcbiAqIGsgaXMgdGhlIHJhdGluZyBvZiB0aGUgZGV2aWF0aW9uIG9mIHRoZSBwcm9wb3J0aW9uIG9mIGRhcmsgbW9kdWxlc1xuICogaW4gdGhlIHN5bWJvbCBmcm9tIDUwJSBpbiBzdGVwcyBvZiA1JVxuICovXG5leHBvcnRzLmdldFBlbmFsdHlONCA9IGZ1bmN0aW9uIGdldFBlbmFsdHlONCAoZGF0YSkge1xuICB2YXIgZGFya0NvdW50ID0gMFxuICB2YXIgbW9kdWxlc0NvdW50ID0gZGF0YS5kYXRhLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlc0NvdW50OyBpKyspIGRhcmtDb3VudCArPSBkYXRhLmRhdGFbaV1cblxuICB2YXIgayA9IE1hdGguYWJzKE1hdGguY2VpbCgoZGFya0NvdW50ICogMTAwIC8gbW9kdWxlc0NvdW50KSAvIDUpIC0gMTApXG5cbiAgcmV0dXJuIGsgKiBQZW5hbHR5U2NvcmVzLk40XG59XG5cbi8qKlxuICogUmV0dXJuIG1hc2sgdmFsdWUgYXQgZ2l2ZW4gcG9zaXRpb25cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IG1hc2tQYXR0ZXJuIFBhdHRlcm4gcmVmZXJlbmNlIHZhbHVlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGkgICAgICAgICAgIFJvd1xuICogQHBhcmFtICB7TnVtYmVyfSBqICAgICAgICAgICBDb2x1bW5cbiAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgICAgICAgTWFzayB2YWx1ZVxuICovXG5mdW5jdGlvbiBnZXRNYXNrQXQgKG1hc2tQYXR0ZXJuLCBpLCBqKSB7XG4gIHN3aXRjaCAobWFza1BhdHRlcm4pIHtcbiAgICBjYXNlIGV4cG9ydHMuUGF0dGVybnMuUEFUVEVSTjAwMDogcmV0dXJuIChpICsgaikgJSAyID09PSAwXG4gICAgY2FzZSBleHBvcnRzLlBhdHRlcm5zLlBBVFRFUk4wMDE6IHJldHVybiBpICUgMiA9PT0gMFxuICAgIGNhc2UgZXhwb3J0cy5QYXR0ZXJucy5QQVRURVJOMDEwOiByZXR1cm4gaiAlIDMgPT09IDBcbiAgICBjYXNlIGV4cG9ydHMuUGF0dGVybnMuUEFUVEVSTjAxMTogcmV0dXJuIChpICsgaikgJSAzID09PSAwXG4gICAgY2FzZSBleHBvcnRzLlBhdHRlcm5zLlBBVFRFUk4xMDA6IHJldHVybiAoTWF0aC5mbG9vcihpIC8gMikgKyBNYXRoLmZsb29yKGogLyAzKSkgJSAyID09PSAwXG4gICAgY2FzZSBleHBvcnRzLlBhdHRlcm5zLlBBVFRFUk4xMDE6IHJldHVybiAoaSAqIGopICUgMiArIChpICogaikgJSAzID09PSAwXG4gICAgY2FzZSBleHBvcnRzLlBhdHRlcm5zLlBBVFRFUk4xMTA6IHJldHVybiAoKGkgKiBqKSAlIDIgKyAoaSAqIGopICUgMykgJSAyID09PSAwXG4gICAgY2FzZSBleHBvcnRzLlBhdHRlcm5zLlBBVFRFUk4xMTE6IHJldHVybiAoKGkgKiBqKSAlIDMgKyAoaSArIGopICUgMikgJSAyID09PSAwXG5cbiAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBtYXNrUGF0dGVybjonICsgbWFza1BhdHRlcm4pXG4gIH1cbn1cblxuLyoqXG4gKiBBcHBseSBhIG1hc2sgcGF0dGVybiB0byBhIEJpdE1hdHJpeFxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gICAgcGF0dGVybiBQYXR0ZXJuIHJlZmVyZW5jZSBudW1iZXJcbiAqIEBwYXJhbSAge0JpdE1hdHJpeH0gZGF0YSAgICBCaXRNYXRyaXggZGF0YVxuICovXG5leHBvcnRzLmFwcGx5TWFzayA9IGZ1bmN0aW9uIGFwcGx5TWFzayAocGF0dGVybiwgZGF0YSkge1xuICB2YXIgc2l6ZSA9IGRhdGEuc2l6ZVxuXG4gIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IHNpemU7IGNvbCsrKSB7XG4gICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgc2l6ZTsgcm93KyspIHtcbiAgICAgIGlmIChkYXRhLmlzUmVzZXJ2ZWQocm93LCBjb2wpKSBjb250aW51ZVxuICAgICAgZGF0YS54b3Iocm93LCBjb2wsIGdldE1hc2tBdChwYXR0ZXJuLCByb3csIGNvbCkpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYmVzdCBtYXNrIHBhdHRlcm4gZm9yIGRhdGFcbiAqXG4gKiBAcGFyYW0gIHtCaXRNYXRyaXh9IGRhdGFcbiAqIEByZXR1cm4ge051bWJlcn0gTWFzayBwYXR0ZXJuIHJlZmVyZW5jZSBudW1iZXJcbiAqL1xuZXhwb3J0cy5nZXRCZXN0TWFzayA9IGZ1bmN0aW9uIGdldEJlc3RNYXNrIChkYXRhLCBzZXR1cEZvcm1hdEZ1bmMpIHtcbiAgdmFyIG51bVBhdHRlcm5zID0gT2JqZWN0LmtleXMoZXhwb3J0cy5QYXR0ZXJucykubGVuZ3RoXG4gIHZhciBiZXN0UGF0dGVybiA9IDBcbiAgdmFyIGxvd2VyUGVuYWx0eSA9IEluZmluaXR5XG5cbiAgZm9yICh2YXIgcCA9IDA7IHAgPCBudW1QYXR0ZXJuczsgcCsrKSB7XG4gICAgc2V0dXBGb3JtYXRGdW5jKHApXG4gICAgZXhwb3J0cy5hcHBseU1hc2socCwgZGF0YSlcblxuICAgIC8vIENhbGN1bGF0ZSBwZW5hbHR5XG4gICAgdmFyIHBlbmFsdHkgPVxuICAgICAgZXhwb3J0cy5nZXRQZW5hbHR5TjEoZGF0YSkgK1xuICAgICAgZXhwb3J0cy5nZXRQZW5hbHR5TjIoZGF0YSkgK1xuICAgICAgZXhwb3J0cy5nZXRQZW5hbHR5TjMoZGF0YSkgK1xuICAgICAgZXhwb3J0cy5nZXRQZW5hbHR5TjQoZGF0YSlcblxuICAgIC8vIFVuZG8gcHJldmlvdXNseSBhcHBsaWVkIG1hc2tcbiAgICBleHBvcnRzLmFwcGx5TWFzayhwLCBkYXRhKVxuXG4gICAgaWYgKHBlbmFsdHkgPCBsb3dlclBlbmFsdHkpIHtcbiAgICAgIGxvd2VyUGVuYWx0eSA9IHBlbmFsdHlcbiAgICAgIGJlc3RQYXR0ZXJuID0gcFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBiZXN0UGF0dGVyblxufVxuIiwidmFyIFZlcnNpb25DaGVjayA9IHJlcXVpcmUoJy4vdmVyc2lvbi1jaGVjaycpXG52YXIgUmVnZXggPSByZXF1aXJlKCcuL3JlZ2V4JylcblxuLyoqXG4gKiBOdW1lcmljIG1vZGUgZW5jb2RlcyBkYXRhIGZyb20gdGhlIGRlY2ltYWwgZGlnaXQgc2V0ICgwIC0gOSlcbiAqIChieXRlIHZhbHVlcyAzMEhFWCB0byAzOUhFWCkuXG4gKiBOb3JtYWxseSwgMyBkYXRhIGNoYXJhY3RlcnMgYXJlIHJlcHJlc2VudGVkIGJ5IDEwIGJpdHMuXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuZXhwb3J0cy5OVU1FUklDID0ge1xuICBpZDogJ051bWVyaWMnLFxuICBiaXQ6IDEgPDwgMCxcbiAgY2NCaXRzOiBbMTAsIDEyLCAxNF1cbn1cblxuLyoqXG4gKiBBbHBoYW51bWVyaWMgbW9kZSBlbmNvZGVzIGRhdGEgZnJvbSBhIHNldCBvZiA0NSBjaGFyYWN0ZXJzLFxuICogaS5lLiAxMCBudW1lcmljIGRpZ2l0cyAoMCAtIDkpLFxuICogICAgICAyNiBhbHBoYWJldGljIGNoYXJhY3RlcnMgKEEgLSBaKSxcbiAqICAgYW5kIDkgc3ltYm9scyAoU1AsICQsICUsICosICssIC0sIC4sIC8sIDopLlxuICogTm9ybWFsbHksIHR3byBpbnB1dCBjaGFyYWN0ZXJzIGFyZSByZXByZXNlbnRlZCBieSAxMSBiaXRzLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMuQUxQSEFOVU1FUklDID0ge1xuICBpZDogJ0FscGhhbnVtZXJpYycsXG4gIGJpdDogMSA8PCAxLFxuICBjY0JpdHM6IFs5LCAxMSwgMTNdXG59XG5cbi8qKlxuICogSW4gYnl0ZSBtb2RlLCBkYXRhIGlzIGVuY29kZWQgYXQgOCBiaXRzIHBlciBjaGFyYWN0ZXIuXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuZXhwb3J0cy5CWVRFID0ge1xuICBpZDogJ0J5dGUnLFxuICBiaXQ6IDEgPDwgMixcbiAgY2NCaXRzOiBbOCwgMTYsIDE2XVxufVxuXG4vKipcbiAqIFRoZSBLYW5qaSBtb2RlIGVmZmljaWVudGx5IGVuY29kZXMgS2FuamkgY2hhcmFjdGVycyBpbiBhY2NvcmRhbmNlIHdpdGhcbiAqIHRoZSBTaGlmdCBKSVMgc3lzdGVtIGJhc2VkIG9uIEpJUyBYIDAyMDguXG4gKiBUaGUgU2hpZnQgSklTIHZhbHVlcyBhcmUgc2hpZnRlZCBmcm9tIHRoZSBKSVMgWCAwMjA4IHZhbHVlcy5cbiAqIEpJUyBYIDAyMDggZ2l2ZXMgZGV0YWlscyBvZiB0aGUgc2hpZnQgY29kZWQgcmVwcmVzZW50YXRpb24uXG4gKiBFYWNoIHR3by1ieXRlIGNoYXJhY3RlciB2YWx1ZSBpcyBjb21wYWN0ZWQgdG8gYSAxMy1iaXQgYmluYXJ5IGNvZGV3b3JkLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMuS0FOSkkgPSB7XG4gIGlkOiAnS2FuamknLFxuICBiaXQ6IDEgPDwgMyxcbiAgY2NCaXRzOiBbOCwgMTAsIDEyXVxufVxuXG4vKipcbiAqIE1peGVkIG1vZGUgd2lsbCBjb250YWluIGEgc2VxdWVuY2VzIG9mIGRhdGEgaW4gYSBjb21iaW5hdGlvbiBvZiBhbnkgb2ZcbiAqIHRoZSBtb2RlcyBkZXNjcmliZWQgYWJvdmVcbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnRzLk1JWEVEID0ge1xuICBiaXQ6IC0xXG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGJpdHMgbmVlZGVkIHRvIHN0b3JlIHRoZSBkYXRhIGxlbmd0aFxuICogYWNjb3JkaW5nIHRvIFFSIENvZGUgc3BlY2lmaWNhdGlvbnMuXG4gKlxuICogQHBhcmFtICB7TW9kZX0gICBtb2RlICAgIERhdGEgbW9kZVxuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgIE51bWJlciBvZiBiaXRzXG4gKi9cbmV4cG9ydHMuZ2V0Q2hhckNvdW50SW5kaWNhdG9yID0gZnVuY3Rpb24gZ2V0Q2hhckNvdW50SW5kaWNhdG9yIChtb2RlLCB2ZXJzaW9uKSB7XG4gIGlmICghbW9kZS5jY0JpdHMpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBtb2RlOiAnICsgbW9kZSlcblxuICBpZiAoIVZlcnNpb25DaGVjay5pc1ZhbGlkKHZlcnNpb24pKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZlcnNpb246ICcgKyB2ZXJzaW9uKVxuICB9XG5cbiAgaWYgKHZlcnNpb24gPj0gMSAmJiB2ZXJzaW9uIDwgMTApIHJldHVybiBtb2RlLmNjQml0c1swXVxuICBlbHNlIGlmICh2ZXJzaW9uIDwgMjcpIHJldHVybiBtb2RlLmNjQml0c1sxXVxuICByZXR1cm4gbW9kZS5jY0JpdHNbMl1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtb3N0IGVmZmljaWVudCBtb2RlIHRvIHN0b3JlIHRoZSBzcGVjaWZpZWQgZGF0YVxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gZGF0YVN0ciBJbnB1dCBkYXRhIHN0cmluZ1xuICogQHJldHVybiB7TW9kZX0gICAgICAgICAgIEJlc3QgbW9kZVxuICovXG5leHBvcnRzLmdldEJlc3RNb2RlRm9yRGF0YSA9IGZ1bmN0aW9uIGdldEJlc3RNb2RlRm9yRGF0YSAoZGF0YVN0cikge1xuICBpZiAoUmVnZXgudGVzdE51bWVyaWMoZGF0YVN0cikpIHJldHVybiBleHBvcnRzLk5VTUVSSUNcbiAgZWxzZSBpZiAoUmVnZXgudGVzdEFscGhhbnVtZXJpYyhkYXRhU3RyKSkgcmV0dXJuIGV4cG9ydHMuQUxQSEFOVU1FUklDXG4gIGVsc2UgaWYgKFJlZ2V4LnRlc3RLYW5qaShkYXRhU3RyKSkgcmV0dXJuIGV4cG9ydHMuS0FOSklcbiAgZWxzZSByZXR1cm4gZXhwb3J0cy5CWVRFXG59XG5cbi8qKlxuICogUmV0dXJuIG1vZGUgbmFtZSBhcyBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge01vZGV9IG1vZGUgTW9kZSBvYmplY3RcbiAqIEByZXR1cm5zIHtTdHJpbmd9ICBNb2RlIG5hbWVcbiAqL1xuZXhwb3J0cy50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nIChtb2RlKSB7XG4gIGlmIChtb2RlICYmIG1vZGUuaWQpIHJldHVybiBtb2RlLmlkXG4gIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBtb2RlJylcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBpbnB1dCBwYXJhbSBpcyBhIHZhbGlkIG1vZGUgb2JqZWN0XG4gKlxuICogQHBhcmFtICAge01vZGV9ICAgIG1vZGUgTW9kZSBvYmplY3RcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHZhbGlkIG1vZGUsIGZhbHNlIG90aGVyd2lzZVxuICovXG5leHBvcnRzLmlzVmFsaWQgPSBmdW5jdGlvbiBpc1ZhbGlkIChtb2RlKSB7XG4gIHJldHVybiBtb2RlICYmIG1vZGUuYml0ICYmIG1vZGUuY2NCaXRzXG59XG5cbi8qKlxuICogR2V0IG1vZGUgb2JqZWN0IGZyb20gaXRzIG5hbWVcbiAqXG4gKiBAcGFyYW0gICB7U3RyaW5nfSBzdHJpbmcgTW9kZSBuYW1lXG4gKiBAcmV0dXJucyB7TW9kZX0gICAgICAgICAgTW9kZSBvYmplY3RcbiAqL1xuZnVuY3Rpb24gZnJvbVN0cmluZyAoc3RyaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignUGFyYW0gaXMgbm90IGEgc3RyaW5nJylcbiAgfVxuXG4gIHZhciBsY1N0ciA9IHN0cmluZy50b0xvd2VyQ2FzZSgpXG5cbiAgc3dpdGNoIChsY1N0cikge1xuICAgIGNhc2UgJ251bWVyaWMnOlxuICAgICAgcmV0dXJuIGV4cG9ydHMuTlVNRVJJQ1xuICAgIGNhc2UgJ2FscGhhbnVtZXJpYyc6XG4gICAgICByZXR1cm4gZXhwb3J0cy5BTFBIQU5VTUVSSUNcbiAgICBjYXNlICdrYW5qaSc6XG4gICAgICByZXR1cm4gZXhwb3J0cy5LQU5KSVxuICAgIGNhc2UgJ2J5dGUnOlxuICAgICAgcmV0dXJuIGV4cG9ydHMuQllURVxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbW9kZTogJyArIHN0cmluZylcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgbW9kZSBmcm9tIGEgdmFsdWUuXG4gKiBJZiB2YWx1ZSBpcyBub3QgYSB2YWxpZCBtb2RlLCByZXR1cm5zIGRlZmF1bHRWYWx1ZVxuICpcbiAqIEBwYXJhbSAge01vZGV8U3RyaW5nfSB2YWx1ZSAgICAgICAgRW5jb2RpbmcgbW9kZVxuICogQHBhcmFtICB7TW9kZX0gICAgICAgIGRlZmF1bHRWYWx1ZSBGYWxsYmFjayB2YWx1ZVxuICogQHJldHVybiB7TW9kZX0gICAgICAgICAgICAgICAgICAgICBFbmNvZGluZyBtb2RlXG4gKi9cbmV4cG9ydHMuZnJvbSA9IGZ1bmN0aW9uIGZyb20gKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgaWYgKGV4cG9ydHMuaXNWYWxpZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodmFsdWUpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlXG4gIH1cbn1cbiIsInZhciBNb2RlID0gcmVxdWlyZSgnLi9tb2RlJylcblxuZnVuY3Rpb24gTnVtZXJpY0RhdGEgKGRhdGEpIHtcbiAgdGhpcy5tb2RlID0gTW9kZS5OVU1FUklDXG4gIHRoaXMuZGF0YSA9IGRhdGEudG9TdHJpbmcoKVxufVxuXG5OdW1lcmljRGF0YS5nZXRCaXRzTGVuZ3RoID0gZnVuY3Rpb24gZ2V0Qml0c0xlbmd0aCAobGVuZ3RoKSB7XG4gIHJldHVybiAxMCAqIE1hdGguZmxvb3IobGVuZ3RoIC8gMykgKyAoKGxlbmd0aCAlIDMpID8gKChsZW5ndGggJSAzKSAqIDMgKyAxKSA6IDApXG59XG5cbk51bWVyaWNEYXRhLnByb3RvdHlwZS5nZXRMZW5ndGggPSBmdW5jdGlvbiBnZXRMZW5ndGggKCkge1xuICByZXR1cm4gdGhpcy5kYXRhLmxlbmd0aFxufVxuXG5OdW1lcmljRGF0YS5wcm90b3R5cGUuZ2V0Qml0c0xlbmd0aCA9IGZ1bmN0aW9uIGdldEJpdHNMZW5ndGggKCkge1xuICByZXR1cm4gTnVtZXJpY0RhdGEuZ2V0Qml0c0xlbmd0aCh0aGlzLmRhdGEubGVuZ3RoKVxufVxuXG5OdW1lcmljRGF0YS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoYml0QnVmZmVyKSB7XG4gIHZhciBpLCBncm91cCwgdmFsdWVcblxuICAvLyBUaGUgaW5wdXQgZGF0YSBzdHJpbmcgaXMgZGl2aWRlZCBpbnRvIGdyb3VwcyBvZiB0aHJlZSBkaWdpdHMsXG4gIC8vIGFuZCBlYWNoIGdyb3VwIGlzIGNvbnZlcnRlZCB0byBpdHMgMTAtYml0IGJpbmFyeSBlcXVpdmFsZW50LlxuICBmb3IgKGkgPSAwOyBpICsgMyA8PSB0aGlzLmRhdGEubGVuZ3RoOyBpICs9IDMpIHtcbiAgICBncm91cCA9IHRoaXMuZGF0YS5zdWJzdHIoaSwgMylcbiAgICB2YWx1ZSA9IHBhcnNlSW50KGdyb3VwLCAxMClcblxuICAgIGJpdEJ1ZmZlci5wdXQodmFsdWUsIDEwKVxuICB9XG5cbiAgLy8gSWYgdGhlIG51bWJlciBvZiBpbnB1dCBkaWdpdHMgaXMgbm90IGFuIGV4YWN0IG11bHRpcGxlIG9mIHRocmVlLFxuICAvLyB0aGUgZmluYWwgb25lIG9yIHR3byBkaWdpdHMgYXJlIGNvbnZlcnRlZCB0byA0IG9yIDcgYml0cyByZXNwZWN0aXZlbHkuXG4gIHZhciByZW1haW5pbmdOdW0gPSB0aGlzLmRhdGEubGVuZ3RoIC0gaVxuICBpZiAocmVtYWluaW5nTnVtID4gMCkge1xuICAgIGdyb3VwID0gdGhpcy5kYXRhLnN1YnN0cihpKVxuICAgIHZhbHVlID0gcGFyc2VJbnQoZ3JvdXAsIDEwKVxuXG4gICAgYml0QnVmZmVyLnB1dCh2YWx1ZSwgcmVtYWluaW5nTnVtICogMyArIDEpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBOdW1lcmljRGF0YVxuIiwidmFyIEJ1ZmZlclV0aWwgPSByZXF1aXJlKCcuLi91dGlscy9idWZmZXInKVxudmFyIEdGID0gcmVxdWlyZSgnLi9nYWxvaXMtZmllbGQnKVxuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIHBvbHlub21pYWxzIGluc2lkZSBHYWxvaXMgRmllbGRcbiAqXG4gKiBAcGFyYW0gIHtCdWZmZXJ9IHAxIFBvbHlub21pYWxcbiAqIEBwYXJhbSAge0J1ZmZlcn0gcDIgUG9seW5vbWlhbFxuICogQHJldHVybiB7QnVmZmVyfSAgICBQcm9kdWN0IG9mIHAxIGFuZCBwMlxuICovXG5leHBvcnRzLm11bCA9IGZ1bmN0aW9uIG11bCAocDEsIHAyKSB7XG4gIHZhciBjb2VmZiA9IEJ1ZmZlclV0aWwuYWxsb2MocDEubGVuZ3RoICsgcDIubGVuZ3RoIC0gMSlcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHAxLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBwMi5sZW5ndGg7IGorKykge1xuICAgICAgY29lZmZbaSArIGpdIF49IEdGLm11bChwMVtpXSwgcDJbal0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvZWZmXG59XG5cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSByZW1haW5kZXIgb2YgcG9seW5vbWlhbHMgZGl2aXNpb25cbiAqXG4gKiBAcGFyYW0gIHtCdWZmZXJ9IGRpdmlkZW50IFBvbHlub21pYWxcbiAqIEBwYXJhbSAge0J1ZmZlcn0gZGl2aXNvciAgUG9seW5vbWlhbFxuICogQHJldHVybiB7QnVmZmVyfSAgICAgICAgICBSZW1haW5kZXJcbiAqL1xuZXhwb3J0cy5tb2QgPSBmdW5jdGlvbiBtb2QgKGRpdmlkZW50LCBkaXZpc29yKSB7XG4gIHZhciByZXN1bHQgPSBCdWZmZXJVdGlsLmZyb20oZGl2aWRlbnQpXG5cbiAgd2hpbGUgKChyZXN1bHQubGVuZ3RoIC0gZGl2aXNvci5sZW5ndGgpID49IDApIHtcbiAgICB2YXIgY29lZmYgPSByZXN1bHRbMF1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGl2aXNvci5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0W2ldIF49IEdGLm11bChkaXZpc29yW2ldLCBjb2VmZilcbiAgICB9XG5cbiAgICAvLyByZW1vdmUgYWxsIHplcm9zIGZyb20gYnVmZmVyIGhlYWRcbiAgICB2YXIgb2Zmc2V0ID0gMFxuICAgIHdoaWxlIChvZmZzZXQgPCByZXN1bHQubGVuZ3RoICYmIHJlc3VsdFtvZmZzZXRdID09PSAwKSBvZmZzZXQrK1xuICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZShvZmZzZXQpXG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG5cbi8qKlxuICogR2VuZXJhdGUgYW4gaXJyZWR1Y2libGUgZ2VuZXJhdG9yIHBvbHlub21pYWwgb2Ygc3BlY2lmaWVkIGRlZ3JlZVxuICogKHVzZWQgYnkgUmVlZC1Tb2xvbW9uIGVuY29kZXIpXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSBkZWdyZWUgRGVncmVlIG9mIHRoZSBnZW5lcmF0b3IgcG9seW5vbWlhbFxuICogQHJldHVybiB7QnVmZmVyfSAgICAgICAgQnVmZmVyIGNvbnRhaW5pbmcgcG9seW5vbWlhbCBjb2VmZmljaWVudHNcbiAqL1xuZXhwb3J0cy5nZW5lcmF0ZUVDUG9seW5vbWlhbCA9IGZ1bmN0aW9uIGdlbmVyYXRlRUNQb2x5bm9taWFsIChkZWdyZWUpIHtcbiAgdmFyIHBvbHkgPSBCdWZmZXJVdGlsLmZyb20oWzFdKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRlZ3JlZTsgaSsrKSB7XG4gICAgcG9seSA9IGV4cG9ydHMubXVsKHBvbHksIFsxLCBHRi5leHAoaSldKVxuICB9XG5cbiAgcmV0dXJuIHBvbHlcbn1cbiIsInZhciBCdWZmZXJVdGlsID0gcmVxdWlyZSgnLi4vdXRpbHMvYnVmZmVyJylcbnZhciBVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxudmFyIEVDTGV2ZWwgPSByZXF1aXJlKCcuL2Vycm9yLWNvcnJlY3Rpb24tbGV2ZWwnKVxudmFyIEJpdEJ1ZmZlciA9IHJlcXVpcmUoJy4vYml0LWJ1ZmZlcicpXG52YXIgQml0TWF0cml4ID0gcmVxdWlyZSgnLi9iaXQtbWF0cml4JylcbnZhciBBbGlnbm1lbnRQYXR0ZXJuID0gcmVxdWlyZSgnLi9hbGlnbm1lbnQtcGF0dGVybicpXG52YXIgRmluZGVyUGF0dGVybiA9IHJlcXVpcmUoJy4vZmluZGVyLXBhdHRlcm4nKVxudmFyIE1hc2tQYXR0ZXJuID0gcmVxdWlyZSgnLi9tYXNrLXBhdHRlcm4nKVxudmFyIEVDQ29kZSA9IHJlcXVpcmUoJy4vZXJyb3ItY29ycmVjdGlvbi1jb2RlJylcbnZhciBSZWVkU29sb21vbkVuY29kZXIgPSByZXF1aXJlKCcuL3JlZWQtc29sb21vbi1lbmNvZGVyJylcbnZhciBWZXJzaW9uID0gcmVxdWlyZSgnLi92ZXJzaW9uJylcbnZhciBGb3JtYXRJbmZvID0gcmVxdWlyZSgnLi9mb3JtYXQtaW5mbycpXG52YXIgTW9kZSA9IHJlcXVpcmUoJy4vbW9kZScpXG52YXIgU2VnbWVudHMgPSByZXF1aXJlKCcuL3NlZ21lbnRzJylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogUVJDb2RlIGZvciBKYXZhU2NyaXB0XG4gKlxuICogbW9kaWZpZWQgYnkgUnlhbiBEYXkgZm9yIG5vZGVqcyBzdXBwb3J0XG4gKiBDb3B5cmlnaHQgKGMpIDIwMTEgUnlhbiBEYXlcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2U6XG4gKiAgIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gKlxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFFSQ29kZSBmb3IgSmF2YVNjcmlwdFxuLy9cbi8vIENvcHlyaWdodCAoYykgMjAwOSBLYXp1aGlrbyBBcmFzZVxuLy9cbi8vIFVSTDogaHR0cDovL3d3dy5kLXByb2plY3QuY29tL1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZTpcbi8vICAgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbi8vXG4vLyBUaGUgd29yZCBcIlFSIENvZGVcIiBpcyByZWdpc3RlcmVkIHRyYWRlbWFyayBvZlxuLy8gREVOU08gV0FWRSBJTkNPUlBPUkFURURcbi8vICAgaHR0cDovL3d3dy5kZW5zby13YXZlLmNvbS9xcmNvZGUvZmFxcGF0ZW50LWUuaHRtbFxuLy9cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qL1xuXG4vKipcbiAqIEFkZCBmaW5kZXIgcGF0dGVybnMgYml0cyB0byBtYXRyaXhcbiAqXG4gKiBAcGFyYW0gIHtCaXRNYXRyaXh9IG1hdHJpeCAgTW9kdWxlcyBtYXRyaXhcbiAqIEBwYXJhbSAge051bWJlcn0gICAgdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqL1xuZnVuY3Rpb24gc2V0dXBGaW5kZXJQYXR0ZXJuIChtYXRyaXgsIHZlcnNpb24pIHtcbiAgdmFyIHNpemUgPSBtYXRyaXguc2l6ZVxuICB2YXIgcG9zID0gRmluZGVyUGF0dGVybi5nZXRQb3NpdGlvbnModmVyc2lvbilcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciByb3cgPSBwb3NbaV1bMF1cbiAgICB2YXIgY29sID0gcG9zW2ldWzFdXG5cbiAgICBmb3IgKHZhciByID0gLTE7IHIgPD0gNzsgcisrKSB7XG4gICAgICBpZiAocm93ICsgciA8PSAtMSB8fCBzaXplIDw9IHJvdyArIHIpIGNvbnRpbnVlXG5cbiAgICAgIGZvciAodmFyIGMgPSAtMTsgYyA8PSA3OyBjKyspIHtcbiAgICAgICAgaWYgKGNvbCArIGMgPD0gLTEgfHwgc2l6ZSA8PSBjb2wgKyBjKSBjb250aW51ZVxuXG4gICAgICAgIGlmICgociA+PSAwICYmIHIgPD0gNiAmJiAoYyA9PT0gMCB8fCBjID09PSA2KSkgfHxcbiAgICAgICAgICAoYyA+PSAwICYmIGMgPD0gNiAmJiAociA9PT0gMCB8fCByID09PSA2KSkgfHxcbiAgICAgICAgICAociA+PSAyICYmIHIgPD0gNCAmJiBjID49IDIgJiYgYyA8PSA0KSkge1xuICAgICAgICAgIG1hdHJpeC5zZXQocm93ICsgciwgY29sICsgYywgdHJ1ZSwgdHJ1ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXRyaXguc2V0KHJvdyArIHIsIGNvbCArIGMsIGZhbHNlLCB0cnVlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWRkIHRpbWluZyBwYXR0ZXJuIGJpdHMgdG8gbWF0cml4XG4gKlxuICogTm90ZTogdGhpcyBmdW5jdGlvbiBtdXN0IGJlIGNhbGxlZCBiZWZvcmUge0BsaW5rIHNldHVwQWxpZ25tZW50UGF0dGVybn1cbiAqXG4gKiBAcGFyYW0gIHtCaXRNYXRyaXh9IG1hdHJpeCBNb2R1bGVzIG1hdHJpeFxuICovXG5mdW5jdGlvbiBzZXR1cFRpbWluZ1BhdHRlcm4gKG1hdHJpeCkge1xuICB2YXIgc2l6ZSA9IG1hdHJpeC5zaXplXG5cbiAgZm9yICh2YXIgciA9IDg7IHIgPCBzaXplIC0gODsgcisrKSB7XG4gICAgdmFyIHZhbHVlID0gciAlIDIgPT09IDBcbiAgICBtYXRyaXguc2V0KHIsIDYsIHZhbHVlLCB0cnVlKVxuICAgIG1hdHJpeC5zZXQoNiwgciwgdmFsdWUsIHRydWUpXG4gIH1cbn1cblxuLyoqXG4gKiBBZGQgYWxpZ25tZW50IHBhdHRlcm5zIGJpdHMgdG8gbWF0cml4XG4gKlxuICogTm90ZTogdGhpcyBmdW5jdGlvbiBtdXN0IGJlIGNhbGxlZCBhZnRlciB7QGxpbmsgc2V0dXBUaW1pbmdQYXR0ZXJufVxuICpcbiAqIEBwYXJhbSAge0JpdE1hdHJpeH0gbWF0cml4ICBNb2R1bGVzIG1hdHJpeFxuICogQHBhcmFtICB7TnVtYmVyfSAgICB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICovXG5mdW5jdGlvbiBzZXR1cEFsaWdubWVudFBhdHRlcm4gKG1hdHJpeCwgdmVyc2lvbikge1xuICB2YXIgcG9zID0gQWxpZ25tZW50UGF0dGVybi5nZXRQb3NpdGlvbnModmVyc2lvbilcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciByb3cgPSBwb3NbaV1bMF1cbiAgICB2YXIgY29sID0gcG9zW2ldWzFdXG5cbiAgICBmb3IgKHZhciByID0gLTI7IHIgPD0gMjsgcisrKSB7XG4gICAgICBmb3IgKHZhciBjID0gLTI7IGMgPD0gMjsgYysrKSB7XG4gICAgICAgIGlmIChyID09PSAtMiB8fCByID09PSAyIHx8IGMgPT09IC0yIHx8IGMgPT09IDIgfHxcbiAgICAgICAgICAociA9PT0gMCAmJiBjID09PSAwKSkge1xuICAgICAgICAgIG1hdHJpeC5zZXQocm93ICsgciwgY29sICsgYywgdHJ1ZSwgdHJ1ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXRyaXguc2V0KHJvdyArIHIsIGNvbCArIGMsIGZhbHNlLCB0cnVlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWRkIHZlcnNpb24gaW5mbyBiaXRzIHRvIG1hdHJpeFxuICpcbiAqIEBwYXJhbSAge0JpdE1hdHJpeH0gbWF0cml4ICBNb2R1bGVzIG1hdHJpeFxuICogQHBhcmFtICB7TnVtYmVyfSAgICB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICovXG5mdW5jdGlvbiBzZXR1cFZlcnNpb25JbmZvIChtYXRyaXgsIHZlcnNpb24pIHtcbiAgdmFyIHNpemUgPSBtYXRyaXguc2l6ZVxuICB2YXIgYml0cyA9IFZlcnNpb24uZ2V0RW5jb2RlZEJpdHModmVyc2lvbilcbiAgdmFyIHJvdywgY29sLCBtb2RcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE4OyBpKyspIHtcbiAgICByb3cgPSBNYXRoLmZsb29yKGkgLyAzKVxuICAgIGNvbCA9IGkgJSAzICsgc2l6ZSAtIDggLSAzXG4gICAgbW9kID0gKChiaXRzID4+IGkpICYgMSkgPT09IDFcblxuICAgIG1hdHJpeC5zZXQocm93LCBjb2wsIG1vZCwgdHJ1ZSlcbiAgICBtYXRyaXguc2V0KGNvbCwgcm93LCBtb2QsIHRydWUpXG4gIH1cbn1cblxuLyoqXG4gKiBBZGQgZm9ybWF0IGluZm8gYml0cyB0byBtYXRyaXhcbiAqXG4gKiBAcGFyYW0gIHtCaXRNYXRyaXh9IG1hdHJpeCAgICAgICAgICAgICAgIE1vZHVsZXMgbWF0cml4XG4gKiBAcGFyYW0gIHtFcnJvckNvcnJlY3Rpb25MZXZlbH0gICAgZXJyb3JDb3JyZWN0aW9uTGV2ZWwgRXJyb3IgY29ycmVjdGlvbiBsZXZlbFxuICogQHBhcmFtICB7TnVtYmVyfSAgICBtYXNrUGF0dGVybiAgICAgICAgICBNYXNrIHBhdHRlcm4gcmVmZXJlbmNlIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHNldHVwRm9ybWF0SW5mbyAobWF0cml4LCBlcnJvckNvcnJlY3Rpb25MZXZlbCwgbWFza1BhdHRlcm4pIHtcbiAgdmFyIHNpemUgPSBtYXRyaXguc2l6ZVxuICB2YXIgYml0cyA9IEZvcm1hdEluZm8uZ2V0RW5jb2RlZEJpdHMoZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIG1hc2tQYXR0ZXJuKVxuICB2YXIgaSwgbW9kXG5cbiAgZm9yIChpID0gMDsgaSA8IDE1OyBpKyspIHtcbiAgICBtb2QgPSAoKGJpdHMgPj4gaSkgJiAxKSA9PT0gMVxuXG4gICAgLy8gdmVydGljYWxcbiAgICBpZiAoaSA8IDYpIHtcbiAgICAgIG1hdHJpeC5zZXQoaSwgOCwgbW9kLCB0cnVlKVxuICAgIH0gZWxzZSBpZiAoaSA8IDgpIHtcbiAgICAgIG1hdHJpeC5zZXQoaSArIDEsIDgsIG1vZCwgdHJ1ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgbWF0cml4LnNldChzaXplIC0gMTUgKyBpLCA4LCBtb2QsIHRydWUpXG4gICAgfVxuXG4gICAgLy8gaG9yaXpvbnRhbFxuICAgIGlmIChpIDwgOCkge1xuICAgICAgbWF0cml4LnNldCg4LCBzaXplIC0gaSAtIDEsIG1vZCwgdHJ1ZSlcbiAgICB9IGVsc2UgaWYgKGkgPCA5KSB7XG4gICAgICBtYXRyaXguc2V0KDgsIDE1IC0gaSAtIDEgKyAxLCBtb2QsIHRydWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIG1hdHJpeC5zZXQoOCwgMTUgLSBpIC0gMSwgbW9kLCB0cnVlKVxuICAgIH1cbiAgfVxuXG4gIC8vIGZpeGVkIG1vZHVsZVxuICBtYXRyaXguc2V0KHNpemUgLSA4LCA4LCAxLCB0cnVlKVxufVxuXG4vKipcbiAqIEFkZCBlbmNvZGVkIGRhdGEgYml0cyB0byBtYXRyaXhcbiAqXG4gKiBAcGFyYW0gIHtCaXRNYXRyaXh9IG1hdHJpeCBNb2R1bGVzIG1hdHJpeFxuICogQHBhcmFtICB7QnVmZmVyfSAgICBkYXRhICAgRGF0YSBjb2Rld29yZHNcbiAqL1xuZnVuY3Rpb24gc2V0dXBEYXRhIChtYXRyaXgsIGRhdGEpIHtcbiAgdmFyIHNpemUgPSBtYXRyaXguc2l6ZVxuICB2YXIgaW5jID0gLTFcbiAgdmFyIHJvdyA9IHNpemUgLSAxXG4gIHZhciBiaXRJbmRleCA9IDdcbiAgdmFyIGJ5dGVJbmRleCA9IDBcblxuICBmb3IgKHZhciBjb2wgPSBzaXplIC0gMTsgY29sID4gMDsgY29sIC09IDIpIHtcbiAgICBpZiAoY29sID09PSA2KSBjb2wtLVxuXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgMjsgYysrKSB7XG4gICAgICAgIGlmICghbWF0cml4LmlzUmVzZXJ2ZWQocm93LCBjb2wgLSBjKSkge1xuICAgICAgICAgIHZhciBkYXJrID0gZmFsc2VcblxuICAgICAgICAgIGlmIChieXRlSW5kZXggPCBkYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgZGFyayA9ICgoKGRhdGFbYnl0ZUluZGV4XSA+Pj4gYml0SW5kZXgpICYgMSkgPT09IDEpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbWF0cml4LnNldChyb3csIGNvbCAtIGMsIGRhcmspXG4gICAgICAgICAgYml0SW5kZXgtLVxuXG4gICAgICAgICAgaWYgKGJpdEluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgYnl0ZUluZGV4KytcbiAgICAgICAgICAgIGJpdEluZGV4ID0gN1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByb3cgKz0gaW5jXG5cbiAgICAgIGlmIChyb3cgPCAwIHx8IHNpemUgPD0gcm93KSB7XG4gICAgICAgIHJvdyAtPSBpbmNcbiAgICAgICAgaW5jID0gLWluY1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZSBlbmNvZGVkIGNvZGV3b3JkcyBmcm9tIGRhdGEgaW5wdXRcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgdmVyc2lvbiAgICAgICAgICAgICAgUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcGFyYW0gIHtFcnJvckNvcnJlY3Rpb25MZXZlbH0gICBlcnJvckNvcnJlY3Rpb25MZXZlbCBFcnJvciBjb3JyZWN0aW9uIGxldmVsXG4gKiBAcGFyYW0gIHtCeXRlRGF0YX0gZGF0YSAgICAgICAgICAgICAgICAgRGF0YSBpbnB1dFxuICogQHJldHVybiB7QnVmZmVyfSAgICAgICAgICAgICAgICAgICAgICAgIEJ1ZmZlciBjb250YWluaW5nIGVuY29kZWQgY29kZXdvcmRzXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURhdGEgKHZlcnNpb24sIGVycm9yQ29ycmVjdGlvbkxldmVsLCBzZWdtZW50cykge1xuICAvLyBQcmVwYXJlIGRhdGEgYnVmZmVyXG4gIHZhciBidWZmZXIgPSBuZXcgQml0QnVmZmVyKClcblxuICBzZWdtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgLy8gcHJlZml4IGRhdGEgd2l0aCBtb2RlIGluZGljYXRvciAoNCBiaXRzKVxuICAgIGJ1ZmZlci5wdXQoZGF0YS5tb2RlLmJpdCwgNClcblxuICAgIC8vIFByZWZpeCBkYXRhIHdpdGggY2hhcmFjdGVyIGNvdW50IGluZGljYXRvci5cbiAgICAvLyBUaGUgY2hhcmFjdGVyIGNvdW50IGluZGljYXRvciBpcyBhIHN0cmluZyBvZiBiaXRzIHRoYXQgcmVwcmVzZW50cyB0aGVcbiAgICAvLyBudW1iZXIgb2YgY2hhcmFjdGVycyB0aGF0IGFyZSBiZWluZyBlbmNvZGVkLlxuICAgIC8vIFRoZSBjaGFyYWN0ZXIgY291bnQgaW5kaWNhdG9yIG11c3QgYmUgcGxhY2VkIGFmdGVyIHRoZSBtb2RlIGluZGljYXRvclxuICAgIC8vIGFuZCBtdXN0IGJlIGEgY2VydGFpbiBudW1iZXIgb2YgYml0cyBsb25nLCBkZXBlbmRpbmcgb24gdGhlIFFSIHZlcnNpb25cbiAgICAvLyBhbmQgZGF0YSBtb2RlXG4gICAgLy8gQHNlZSB7QGxpbmsgTW9kZS5nZXRDaGFyQ291bnRJbmRpY2F0b3J9LlxuICAgIGJ1ZmZlci5wdXQoZGF0YS5nZXRMZW5ndGgoKSwgTW9kZS5nZXRDaGFyQ291bnRJbmRpY2F0b3IoZGF0YS5tb2RlLCB2ZXJzaW9uKSlcblxuICAgIC8vIGFkZCBiaW5hcnkgZGF0YSBzZXF1ZW5jZSB0byBidWZmZXJcbiAgICBkYXRhLndyaXRlKGJ1ZmZlcilcbiAgfSlcblxuICAvLyBDYWxjdWxhdGUgcmVxdWlyZWQgbnVtYmVyIG9mIGJpdHNcbiAgdmFyIHRvdGFsQ29kZXdvcmRzID0gVXRpbHMuZ2V0U3ltYm9sVG90YWxDb2Rld29yZHModmVyc2lvbilcbiAgdmFyIGVjVG90YWxDb2Rld29yZHMgPSBFQ0NvZGUuZ2V0VG90YWxDb2Rld29yZHNDb3VudCh2ZXJzaW9uLCBlcnJvckNvcnJlY3Rpb25MZXZlbClcbiAgdmFyIGRhdGFUb3RhbENvZGV3b3Jkc0JpdHMgPSAodG90YWxDb2Rld29yZHMgLSBlY1RvdGFsQ29kZXdvcmRzKSAqIDhcblxuICAvLyBBZGQgYSB0ZXJtaW5hdG9yLlxuICAvLyBJZiB0aGUgYml0IHN0cmluZyBpcyBzaG9ydGVyIHRoYW4gdGhlIHRvdGFsIG51bWJlciBvZiByZXF1aXJlZCBiaXRzLFxuICAvLyBhIHRlcm1pbmF0b3Igb2YgdXAgdG8gZm91ciAwcyBtdXN0IGJlIGFkZGVkIHRvIHRoZSByaWdodCBzaWRlIG9mIHRoZSBzdHJpbmcuXG4gIC8vIElmIHRoZSBiaXQgc3RyaW5nIGlzIG1vcmUgdGhhbiBmb3VyIGJpdHMgc2hvcnRlciB0aGFuIHRoZSByZXF1aXJlZCBudW1iZXIgb2YgYml0cyxcbiAgLy8gYWRkIGZvdXIgMHMgdG8gdGhlIGVuZC5cbiAgaWYgKGJ1ZmZlci5nZXRMZW5ndGhJbkJpdHMoKSArIDQgPD0gZGF0YVRvdGFsQ29kZXdvcmRzQml0cykge1xuICAgIGJ1ZmZlci5wdXQoMCwgNClcbiAgfVxuXG4gIC8vIElmIHRoZSBiaXQgc3RyaW5nIGlzIGZld2VyIHRoYW4gZm91ciBiaXRzIHNob3J0ZXIsIGFkZCBvbmx5IHRoZSBudW1iZXIgb2YgMHMgdGhhdFxuICAvLyBhcmUgbmVlZGVkIHRvIHJlYWNoIHRoZSByZXF1aXJlZCBudW1iZXIgb2YgYml0cy5cblxuICAvLyBBZnRlciBhZGRpbmcgdGhlIHRlcm1pbmF0b3IsIGlmIHRoZSBudW1iZXIgb2YgYml0cyBpbiB0aGUgc3RyaW5nIGlzIG5vdCBhIG11bHRpcGxlIG9mIDgsXG4gIC8vIHBhZCB0aGUgc3RyaW5nIG9uIHRoZSByaWdodCB3aXRoIDBzIHRvIG1ha2UgdGhlIHN0cmluZydzIGxlbmd0aCBhIG11bHRpcGxlIG9mIDguXG4gIHdoaWxlIChidWZmZXIuZ2V0TGVuZ3RoSW5CaXRzKCkgJSA4ICE9PSAwKSB7XG4gICAgYnVmZmVyLnB1dEJpdCgwKVxuICB9XG5cbiAgLy8gQWRkIHBhZCBieXRlcyBpZiB0aGUgc3RyaW5nIGlzIHN0aWxsIHNob3J0ZXIgdGhhbiB0aGUgdG90YWwgbnVtYmVyIG9mIHJlcXVpcmVkIGJpdHMuXG4gIC8vIEV4dGVuZCB0aGUgYnVmZmVyIHRvIGZpbGwgdGhlIGRhdGEgY2FwYWNpdHkgb2YgdGhlIHN5bWJvbCBjb3JyZXNwb25kaW5nIHRvXG4gIC8vIHRoZSBWZXJzaW9uIGFuZCBFcnJvciBDb3JyZWN0aW9uIExldmVsIGJ5IGFkZGluZyB0aGUgUGFkIENvZGV3b3JkcyAxMTEwMTEwMCAoMHhFQylcbiAgLy8gYW5kIDAwMDEwMDAxICgweDExKSBhbHRlcm5hdGVseS5cbiAgdmFyIHJlbWFpbmluZ0J5dGUgPSAoZGF0YVRvdGFsQ29kZXdvcmRzQml0cyAtIGJ1ZmZlci5nZXRMZW5ndGhJbkJpdHMoKSkgLyA4XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVtYWluaW5nQnl0ZTsgaSsrKSB7XG4gICAgYnVmZmVyLnB1dChpICUgMiA/IDB4MTEgOiAweEVDLCA4KVxuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZUNvZGV3b3JkcyhidWZmZXIsIHZlcnNpb24sIGVycm9yQ29ycmVjdGlvbkxldmVsKVxufVxuXG4vKipcbiAqIEVuY29kZSBpbnB1dCBkYXRhIHdpdGggUmVlZC1Tb2xvbW9uIGFuZCByZXR1cm4gY29kZXdvcmRzIHdpdGhcbiAqIHJlbGF0aXZlIGVycm9yIGNvcnJlY3Rpb24gYml0c1xuICpcbiAqIEBwYXJhbSAge0JpdEJ1ZmZlcn0gYml0QnVmZmVyICAgICAgICAgICAgRGF0YSB0byBlbmNvZGVcbiAqIEBwYXJhbSAge051bWJlcn0gICAgdmVyc2lvbiAgICAgICAgICAgICAgUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcGFyYW0gIHtFcnJvckNvcnJlY3Rpb25MZXZlbH0gZXJyb3JDb3JyZWN0aW9uTGV2ZWwgRXJyb3IgY29ycmVjdGlvbiBsZXZlbFxuICogQHJldHVybiB7QnVmZmVyfSAgICAgICAgICAgICAgICAgICAgICAgICBCdWZmZXIgY29udGFpbmluZyBlbmNvZGVkIGNvZGV3b3Jkc1xuICovXG5mdW5jdGlvbiBjcmVhdGVDb2Rld29yZHMgKGJpdEJ1ZmZlciwgdmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpIHtcbiAgLy8gVG90YWwgY29kZXdvcmRzIGZvciB0aGlzIFFSIGNvZGUgdmVyc2lvbiAoRGF0YSArIEVycm9yIGNvcnJlY3Rpb24pXG4gIHZhciB0b3RhbENvZGV3b3JkcyA9IFV0aWxzLmdldFN5bWJvbFRvdGFsQ29kZXdvcmRzKHZlcnNpb24pXG5cbiAgLy8gVG90YWwgbnVtYmVyIG9mIGVycm9yIGNvcnJlY3Rpb24gY29kZXdvcmRzXG4gIHZhciBlY1RvdGFsQ29kZXdvcmRzID0gRUNDb2RlLmdldFRvdGFsQ29kZXdvcmRzQ291bnQodmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpXG5cbiAgLy8gVG90YWwgbnVtYmVyIG9mIGRhdGEgY29kZXdvcmRzXG4gIHZhciBkYXRhVG90YWxDb2Rld29yZHMgPSB0b3RhbENvZGV3b3JkcyAtIGVjVG90YWxDb2Rld29yZHNcblxuICAvLyBUb3RhbCBudW1iZXIgb2YgYmxvY2tzXG4gIHZhciBlY1RvdGFsQmxvY2tzID0gRUNDb2RlLmdldEJsb2Nrc0NvdW50KHZlcnNpb24sIGVycm9yQ29ycmVjdGlvbkxldmVsKVxuXG4gIC8vIENhbGN1bGF0ZSBob3cgbWFueSBibG9ja3MgZWFjaCBncm91cCBzaG91bGQgY29udGFpblxuICB2YXIgYmxvY2tzSW5Hcm91cDIgPSB0b3RhbENvZGV3b3JkcyAlIGVjVG90YWxCbG9ja3NcbiAgdmFyIGJsb2Nrc0luR3JvdXAxID0gZWNUb3RhbEJsb2NrcyAtIGJsb2Nrc0luR3JvdXAyXG5cbiAgdmFyIHRvdGFsQ29kZXdvcmRzSW5Hcm91cDEgPSBNYXRoLmZsb29yKHRvdGFsQ29kZXdvcmRzIC8gZWNUb3RhbEJsb2NrcylcblxuICB2YXIgZGF0YUNvZGV3b3Jkc0luR3JvdXAxID0gTWF0aC5mbG9vcihkYXRhVG90YWxDb2Rld29yZHMgLyBlY1RvdGFsQmxvY2tzKVxuICB2YXIgZGF0YUNvZGV3b3Jkc0luR3JvdXAyID0gZGF0YUNvZGV3b3Jkc0luR3JvdXAxICsgMVxuXG4gIC8vIE51bWJlciBvZiBFQyBjb2Rld29yZHMgaXMgdGhlIHNhbWUgZm9yIGJvdGggZ3JvdXBzXG4gIHZhciBlY0NvdW50ID0gdG90YWxDb2Rld29yZHNJbkdyb3VwMSAtIGRhdGFDb2Rld29yZHNJbkdyb3VwMVxuXG4gIC8vIEluaXRpYWxpemUgYSBSZWVkLVNvbG9tb24gZW5jb2RlciB3aXRoIGEgZ2VuZXJhdG9yIHBvbHlub21pYWwgb2YgZGVncmVlIGVjQ291bnRcbiAgdmFyIHJzID0gbmV3IFJlZWRTb2xvbW9uRW5jb2RlcihlY0NvdW50KVxuXG4gIHZhciBvZmZzZXQgPSAwXG4gIHZhciBkY0RhdGEgPSBuZXcgQXJyYXkoZWNUb3RhbEJsb2NrcylcbiAgdmFyIGVjRGF0YSA9IG5ldyBBcnJheShlY1RvdGFsQmxvY2tzKVxuICB2YXIgbWF4RGF0YVNpemUgPSAwXG4gIHZhciBidWZmZXIgPSBCdWZmZXJVdGlsLmZyb20oYml0QnVmZmVyLmJ1ZmZlcilcblxuICAvLyBEaXZpZGUgdGhlIGJ1ZmZlciBpbnRvIHRoZSByZXF1aXJlZCBudW1iZXIgb2YgYmxvY2tzXG4gIGZvciAodmFyIGIgPSAwOyBiIDwgZWNUb3RhbEJsb2NrczsgYisrKSB7XG4gICAgdmFyIGRhdGFTaXplID0gYiA8IGJsb2Nrc0luR3JvdXAxID8gZGF0YUNvZGV3b3Jkc0luR3JvdXAxIDogZGF0YUNvZGV3b3Jkc0luR3JvdXAyXG5cbiAgICAvLyBleHRyYWN0IGEgYmxvY2sgb2YgZGF0YSBmcm9tIGJ1ZmZlclxuICAgIGRjRGF0YVtiXSA9IGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIGRhdGFTaXplKVxuXG4gICAgLy8gQ2FsY3VsYXRlIEVDIGNvZGV3b3JkcyBmb3IgdGhpcyBkYXRhIGJsb2NrXG4gICAgZWNEYXRhW2JdID0gcnMuZW5jb2RlKGRjRGF0YVtiXSlcblxuICAgIG9mZnNldCArPSBkYXRhU2l6ZVxuICAgIG1heERhdGFTaXplID0gTWF0aC5tYXgobWF4RGF0YVNpemUsIGRhdGFTaXplKVxuICB9XG5cbiAgLy8gQ3JlYXRlIGZpbmFsIGRhdGFcbiAgLy8gSW50ZXJsZWF2ZSB0aGUgZGF0YSBhbmQgZXJyb3IgY29ycmVjdGlvbiBjb2Rld29yZHMgZnJvbSBlYWNoIGJsb2NrXG4gIHZhciBkYXRhID0gQnVmZmVyVXRpbC5hbGxvYyh0b3RhbENvZGV3b3JkcylcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgaSwgclxuXG4gIC8vIEFkZCBkYXRhIGNvZGV3b3Jkc1xuICBmb3IgKGkgPSAwOyBpIDwgbWF4RGF0YVNpemU7IGkrKykge1xuICAgIGZvciAociA9IDA7IHIgPCBlY1RvdGFsQmxvY2tzOyByKyspIHtcbiAgICAgIGlmIChpIDwgZGNEYXRhW3JdLmxlbmd0aCkge1xuICAgICAgICBkYXRhW2luZGV4KytdID0gZGNEYXRhW3JdW2ldXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQXBwZWQgRUMgY29kZXdvcmRzXG4gIGZvciAoaSA9IDA7IGkgPCBlY0NvdW50OyBpKyspIHtcbiAgICBmb3IgKHIgPSAwOyByIDwgZWNUb3RhbEJsb2NrczsgcisrKSB7XG4gICAgICBkYXRhW2luZGV4KytdID0gZWNEYXRhW3JdW2ldXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyoqXG4gKiBCdWlsZCBRUiBDb2RlIHN5bWJvbFxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gZGF0YSAgICAgICAgICAgICAgICAgSW5wdXQgc3RyaW5nXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHZlcnNpb24gICAgICAgICAgICAgIFFSIENvZGUgdmVyc2lvblxuICogQHBhcmFtICB7RXJyb3JDb3JyZXRpb25MZXZlbH0gZXJyb3JDb3JyZWN0aW9uTGV2ZWwgRXJyb3IgbGV2ZWxcbiAqIEBwYXJhbSAge01hc2tQYXR0ZXJufSBtYXNrUGF0dGVybiAgICAgTWFzayBwYXR0ZXJuXG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICAgICAgICAgICAgIE9iamVjdCBjb250YWluaW5nIHN5bWJvbCBkYXRhXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVN5bWJvbCAoZGF0YSwgdmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIG1hc2tQYXR0ZXJuKSB7XG4gIHZhciBzZWdtZW50c1xuXG4gIGlmIChpc0FycmF5KGRhdGEpKSB7XG4gICAgc2VnbWVudHMgPSBTZWdtZW50cy5mcm9tQXJyYXkoZGF0YSlcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgZXN0aW1hdGVkVmVyc2lvbiA9IHZlcnNpb25cblxuICAgIGlmICghZXN0aW1hdGVkVmVyc2lvbikge1xuICAgICAgdmFyIHJhd1NlZ21lbnRzID0gU2VnbWVudHMucmF3U3BsaXQoZGF0YSlcblxuICAgICAgLy8gRXN0aW1hdGUgYmVzdCB2ZXJzaW9uIHRoYXQgY2FuIGNvbnRhaW4gcmF3IHNwbGl0dGVkIHNlZ21lbnRzXG4gICAgICBlc3RpbWF0ZWRWZXJzaW9uID0gVmVyc2lvbi5nZXRCZXN0VmVyc2lvbkZvckRhdGEocmF3U2VnbWVudHMsXG4gICAgICAgIGVycm9yQ29ycmVjdGlvbkxldmVsKVxuICAgIH1cblxuICAgIC8vIEJ1aWxkIG9wdGltaXplZCBzZWdtZW50c1xuICAgIC8vIElmIGVzdGltYXRlZCB2ZXJzaW9uIGlzIHVuZGVmaW5lZCwgdHJ5IHdpdGggdGhlIGhpZ2hlc3QgdmVyc2lvblxuICAgIHNlZ21lbnRzID0gU2VnbWVudHMuZnJvbVN0cmluZyhkYXRhLCBlc3RpbWF0ZWRWZXJzaW9uIHx8IDQwKVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBkYXRhJylcbiAgfVxuXG4gIC8vIEdldCB0aGUgbWluIHZlcnNpb24gdGhhdCBjYW4gY29udGFpbiBkYXRhXG4gIHZhciBiZXN0VmVyc2lvbiA9IFZlcnNpb24uZ2V0QmVzdFZlcnNpb25Gb3JEYXRhKHNlZ21lbnRzLFxuICAgICAgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpXG5cbiAgLy8gSWYgbm8gdmVyc2lvbiBpcyBmb3VuZCwgZGF0YSBjYW5ub3QgYmUgc3RvcmVkXG4gIGlmICghYmVzdFZlcnNpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBhbW91bnQgb2YgZGF0YSBpcyB0b28gYmlnIHRvIGJlIHN0b3JlZCBpbiBhIFFSIENvZGUnKVxuICB9XG5cbiAgLy8gSWYgbm90IHNwZWNpZmllZCwgdXNlIG1pbiB2ZXJzaW9uIGFzIGRlZmF1bHRcbiAgaWYgKCF2ZXJzaW9uKSB7XG4gICAgdmVyc2lvbiA9IGJlc3RWZXJzaW9uXG5cbiAgLy8gQ2hlY2sgaWYgdGhlIHNwZWNpZmllZCB2ZXJzaW9uIGNhbiBjb250YWluIHRoZSBkYXRhXG4gIH0gZWxzZSBpZiAodmVyc2lvbiA8IGJlc3RWZXJzaW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdcXG4nICtcbiAgICAgICdUaGUgY2hvc2VuIFFSIENvZGUgdmVyc2lvbiBjYW5ub3QgY29udGFpbiB0aGlzIGFtb3VudCBvZiBkYXRhLlxcbicgK1xuICAgICAgJ01pbmltdW0gdmVyc2lvbiByZXF1aXJlZCB0byBzdG9yZSBjdXJyZW50IGRhdGEgaXM6ICcgKyBiZXN0VmVyc2lvbiArICcuXFxuJ1xuICAgIClcbiAgfVxuXG4gIHZhciBkYXRhQml0cyA9IGNyZWF0ZURhdGEodmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIHNlZ21lbnRzKVxuXG4gIC8vIEFsbG9jYXRlIG1hdHJpeCBidWZmZXJcbiAgdmFyIG1vZHVsZUNvdW50ID0gVXRpbHMuZ2V0U3ltYm9sU2l6ZSh2ZXJzaW9uKVxuICB2YXIgbW9kdWxlcyA9IG5ldyBCaXRNYXRyaXgobW9kdWxlQ291bnQpXG5cbiAgLy8gQWRkIGZ1bmN0aW9uIG1vZHVsZXNcbiAgc2V0dXBGaW5kZXJQYXR0ZXJuKG1vZHVsZXMsIHZlcnNpb24pXG4gIHNldHVwVGltaW5nUGF0dGVybihtb2R1bGVzKVxuICBzZXR1cEFsaWdubWVudFBhdHRlcm4obW9kdWxlcywgdmVyc2lvbilcblxuICAvLyBBZGQgdGVtcG9yYXJ5IGR1bW15IGJpdHMgZm9yIGZvcm1hdCBpbmZvIGp1c3QgdG8gc2V0IHRoZW0gYXMgcmVzZXJ2ZWQuXG4gIC8vIFRoaXMgaXMgbmVlZGVkIHRvIHByZXZlbnQgdGhlc2UgYml0cyBmcm9tIGJlaW5nIG1hc2tlZCBieSB7QGxpbmsgTWFza1BhdHRlcm4uYXBwbHlNYXNrfVxuICAvLyBzaW5jZSB0aGUgbWFza2luZyBvcGVyYXRpb24gbXVzdCBiZSBwZXJmb3JtZWQgb25seSBvbiB0aGUgZW5jb2RpbmcgcmVnaW9uLlxuICAvLyBUaGVzZSBibG9ja3Mgd2lsbCBiZSByZXBsYWNlZCB3aXRoIGNvcnJlY3QgdmFsdWVzIGxhdGVyIGluIGNvZGUuXG4gIHNldHVwRm9ybWF0SW5mbyhtb2R1bGVzLCBlcnJvckNvcnJlY3Rpb25MZXZlbCwgMClcblxuICBpZiAodmVyc2lvbiA+PSA3KSB7XG4gICAgc2V0dXBWZXJzaW9uSW5mbyhtb2R1bGVzLCB2ZXJzaW9uKVxuICB9XG5cbiAgLy8gQWRkIGRhdGEgY29kZXdvcmRzXG4gIHNldHVwRGF0YShtb2R1bGVzLCBkYXRhQml0cylcblxuICBpZiAoaXNOYU4obWFza1BhdHRlcm4pKSB7XG4gICAgLy8gRmluZCBiZXN0IG1hc2sgcGF0dGVyblxuICAgIG1hc2tQYXR0ZXJuID0gTWFza1BhdHRlcm4uZ2V0QmVzdE1hc2sobW9kdWxlcyxcbiAgICAgIHNldHVwRm9ybWF0SW5mby5iaW5kKG51bGwsIG1vZHVsZXMsIGVycm9yQ29ycmVjdGlvbkxldmVsKSlcbiAgfVxuXG4gIC8vIEFwcGx5IG1hc2sgcGF0dGVyblxuICBNYXNrUGF0dGVybi5hcHBseU1hc2sobWFza1BhdHRlcm4sIG1vZHVsZXMpXG5cbiAgLy8gUmVwbGFjZSBmb3JtYXQgaW5mbyBiaXRzIHdpdGggY29ycmVjdCB2YWx1ZXNcbiAgc2V0dXBGb3JtYXRJbmZvKG1vZHVsZXMsIGVycm9yQ29ycmVjdGlvbkxldmVsLCBtYXNrUGF0dGVybilcblxuICByZXR1cm4ge1xuICAgIG1vZHVsZXM6IG1vZHVsZXMsXG4gICAgdmVyc2lvbjogdmVyc2lvbixcbiAgICBlcnJvckNvcnJlY3Rpb25MZXZlbDogZXJyb3JDb3JyZWN0aW9uTGV2ZWwsXG4gICAgbWFza1BhdHRlcm46IG1hc2tQYXR0ZXJuLFxuICAgIHNlZ21lbnRzOiBzZWdtZW50c1xuICB9XG59XG5cbi8qKlxuICogUVIgQ29kZVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nIHwgQXJyYXl9IGRhdGEgICAgICAgICAgICAgICAgIElucHV0IGRhdGFcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zICAgICAgICAgICAgICAgICAgICAgIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb25zXG4gKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy52ZXJzaW9uICAgICAgICAgICAgICBRUiBDb2RlIHZlcnNpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLmVycm9yQ29ycmVjdGlvbkxldmVsIEVycm9yIGNvcnJlY3Rpb24gbGV2ZWxcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9wdGlvbnMudG9TSklTRnVuYyAgICAgICAgIEhlbHBlciBmdW5jIHRvIGNvbnZlcnQgdXRmOCB0byBzamlzXG4gKi9cbmV4cG9ydHMuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlIChkYXRhLCBvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3VuZGVmaW5lZCcgfHwgZGF0YSA9PT0gJycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGlucHV0IHRleHQnKVxuICB9XG5cbiAgdmFyIGVycm9yQ29ycmVjdGlvbkxldmVsID0gRUNMZXZlbC5NXG4gIHZhciB2ZXJzaW9uXG4gIHZhciBtYXNrXG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIFVzZSBoaWdoZXIgZXJyb3IgY29ycmVjdGlvbiBsZXZlbCBhcyBkZWZhdWx0XG4gICAgZXJyb3JDb3JyZWN0aW9uTGV2ZWwgPSBFQ0xldmVsLmZyb20ob3B0aW9ucy5lcnJvckNvcnJlY3Rpb25MZXZlbCwgRUNMZXZlbC5NKVxuICAgIHZlcnNpb24gPSBWZXJzaW9uLmZyb20ob3B0aW9ucy52ZXJzaW9uKVxuICAgIG1hc2sgPSBNYXNrUGF0dGVybi5mcm9tKG9wdGlvbnMubWFza1BhdHRlcm4pXG5cbiAgICBpZiAob3B0aW9ucy50b1NKSVNGdW5jKSB7XG4gICAgICBVdGlscy5zZXRUb1NKSVNGdW5jdGlvbihvcHRpb25zLnRvU0pJU0Z1bmMpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZVN5bWJvbChkYXRhLCB2ZXJzaW9uLCBlcnJvckNvcnJlY3Rpb25MZXZlbCwgbWFzaylcbn1cbiIsInZhciBCdWZmZXJVdGlsID0gcmVxdWlyZSgnLi4vdXRpbHMvYnVmZmVyJylcbnZhciBQb2x5bm9taWFsID0gcmVxdWlyZSgnLi9wb2x5bm9taWFsJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXJcblxuZnVuY3Rpb24gUmVlZFNvbG9tb25FbmNvZGVyIChkZWdyZWUpIHtcbiAgdGhpcy5nZW5Qb2x5ID0gdW5kZWZpbmVkXG4gIHRoaXMuZGVncmVlID0gZGVncmVlXG5cbiAgaWYgKHRoaXMuZGVncmVlKSB0aGlzLmluaXRpYWxpemUodGhpcy5kZWdyZWUpXG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgZW5jb2Rlci5cbiAqIFRoZSBpbnB1dCBwYXJhbSBzaG91bGQgY29ycmVzcG9uZCB0byB0aGUgbnVtYmVyIG9mIGVycm9yIGNvcnJlY3Rpb24gY29kZXdvcmRzLlxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gZGVncmVlXG4gKi9cblJlZWRTb2xvbW9uRW5jb2Rlci5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIGluaXRpYWxpemUgKGRlZ3JlZSkge1xuICAvLyBjcmVhdGUgYW4gaXJyZWR1Y2libGUgZ2VuZXJhdG9yIHBvbHlub21pYWxcbiAgdGhpcy5kZWdyZWUgPSBkZWdyZWVcbiAgdGhpcy5nZW5Qb2x5ID0gUG9seW5vbWlhbC5nZW5lcmF0ZUVDUG9seW5vbWlhbCh0aGlzLmRlZ3JlZSlcbn1cblxuLyoqXG4gKiBFbmNvZGVzIGEgY2h1bmsgb2YgZGF0YVxuICpcbiAqIEBwYXJhbSAge0J1ZmZlcn0gZGF0YSBCdWZmZXIgY29udGFpbmluZyBpbnB1dCBkYXRhXG4gKiBAcmV0dXJuIHtCdWZmZXJ9ICAgICAgQnVmZmVyIGNvbnRhaW5pbmcgZW5jb2RlZCBkYXRhXG4gKi9cblJlZWRTb2xvbW9uRW5jb2Rlci5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlIChkYXRhKSB7XG4gIGlmICghdGhpcy5nZW5Qb2x5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFbmNvZGVyIG5vdCBpbml0aWFsaXplZCcpXG4gIH1cblxuICAvLyBDYWxjdWxhdGUgRUMgZm9yIHRoaXMgZGF0YSBibG9ja1xuICAvLyBleHRlbmRzIGRhdGEgc2l6ZSB0byBkYXRhK2dlblBvbHkgc2l6ZVxuICB2YXIgcGFkID0gQnVmZmVyVXRpbC5hbGxvYyh0aGlzLmRlZ3JlZSlcbiAgdmFyIHBhZGRlZERhdGEgPSBCdWZmZXIuY29uY2F0KFtkYXRhLCBwYWRdLCBkYXRhLmxlbmd0aCArIHRoaXMuZGVncmVlKVxuXG4gIC8vIFRoZSBlcnJvciBjb3JyZWN0aW9uIGNvZGV3b3JkcyBhcmUgdGhlIHJlbWFpbmRlciBhZnRlciBkaXZpZGluZyB0aGUgZGF0YSBjb2Rld29yZHNcbiAgLy8gYnkgYSBnZW5lcmF0b3IgcG9seW5vbWlhbFxuICB2YXIgcmVtYWluZGVyID0gUG9seW5vbWlhbC5tb2QocGFkZGVkRGF0YSwgdGhpcy5nZW5Qb2x5KVxuXG4gIC8vIHJldHVybiBFQyBkYXRhIGJsb2NrcyAobGFzdCBuIGJ5dGUsIHdoZXJlIG4gaXMgdGhlIGRlZ3JlZSBvZiBnZW5Qb2x5KVxuICAvLyBJZiBjb2VmZmljaWVudHMgbnVtYmVyIGluIHJlbWFpbmRlciBhcmUgbGVzcyB0aGFuIGdlblBvbHkgZGVncmVlLFxuICAvLyBwYWQgd2l0aCAwcyB0byB0aGUgbGVmdCB0byByZWFjaCB0aGUgbmVlZGVkIG51bWJlciBvZiBjb2VmZmljaWVudHNcbiAgdmFyIHN0YXJ0ID0gdGhpcy5kZWdyZWUgLSByZW1haW5kZXIubGVuZ3RoXG4gIGlmIChzdGFydCA+IDApIHtcbiAgICB2YXIgYnVmZiA9IEJ1ZmZlclV0aWwuYWxsb2ModGhpcy5kZWdyZWUpXG4gICAgcmVtYWluZGVyLmNvcHkoYnVmZiwgc3RhcnQpXG5cbiAgICByZXR1cm4gYnVmZlxuICB9XG5cbiAgcmV0dXJuIHJlbWFpbmRlclxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlZWRTb2xvbW9uRW5jb2RlclxuIiwidmFyIG51bWVyaWMgPSAnWzAtOV0rJ1xudmFyIGFscGhhbnVtZXJpYyA9ICdbQS1aICQlKitcXFxcLS4vOl0rJ1xudmFyIGthbmppID0gJyg/Olt1MzAwMC11MzAzRl18W3UzMDQwLXUzMDlGXXxbdTMwQTAtdTMwRkZdfCcgK1xuICAnW3VGRjAwLXVGRkVGXXxbdTRFMDAtdTlGQUZdfFt1MjYwNS11MjYwNl18W3UyMTkwLXUyMTk1XXx1MjAzQnwnICtcbiAgJ1t1MjAxMHUyMDE1dTIwMTh1MjAxOXUyMDI1dTIwMjZ1MjAxQ3UyMDFEdTIyMjV1MjI2MF18JyArXG4gICdbdTAzOTEtdTA0NTFdfFt1MDBBN3UwMEE4dTAwQjF1MDBCNHUwMEQ3dTAwRjddKSsnXG5rYW5qaSA9IGthbmppLnJlcGxhY2UoL3UvZywgJ1xcXFx1JylcblxudmFyIGJ5dGUgPSAnKD86KD8hW0EtWjAtOSAkJSorXFxcXC0uLzpdfCcgKyBrYW5qaSArICcpKD86LnxbXFxyXFxuXSkpKydcblxuZXhwb3J0cy5LQU5KSSA9IG5ldyBSZWdFeHAoa2FuamksICdnJylcbmV4cG9ydHMuQllURV9LQU5KSSA9IG5ldyBSZWdFeHAoJ1teQS1aMC05ICQlKitcXFxcLS4vOl0rJywgJ2cnKVxuZXhwb3J0cy5CWVRFID0gbmV3IFJlZ0V4cChieXRlLCAnZycpXG5leHBvcnRzLk5VTUVSSUMgPSBuZXcgUmVnRXhwKG51bWVyaWMsICdnJylcbmV4cG9ydHMuQUxQSEFOVU1FUklDID0gbmV3IFJlZ0V4cChhbHBoYW51bWVyaWMsICdnJylcblxudmFyIFRFU1RfS0FOSkkgPSBuZXcgUmVnRXhwKCdeJyArIGthbmppICsgJyQnKVxudmFyIFRFU1RfTlVNRVJJQyA9IG5ldyBSZWdFeHAoJ14nICsgbnVtZXJpYyArICckJylcbnZhciBURVNUX0FMUEhBTlVNRVJJQyA9IG5ldyBSZWdFeHAoJ15bQS1aMC05ICQlKitcXFxcLS4vOl0rJCcpXG5cbmV4cG9ydHMudGVzdEthbmppID0gZnVuY3Rpb24gdGVzdEthbmppIChzdHIpIHtcbiAgcmV0dXJuIFRFU1RfS0FOSkkudGVzdChzdHIpXG59XG5cbmV4cG9ydHMudGVzdE51bWVyaWMgPSBmdW5jdGlvbiB0ZXN0TnVtZXJpYyAoc3RyKSB7XG4gIHJldHVybiBURVNUX05VTUVSSUMudGVzdChzdHIpXG59XG5cbmV4cG9ydHMudGVzdEFscGhhbnVtZXJpYyA9IGZ1bmN0aW9uIHRlc3RBbHBoYW51bWVyaWMgKHN0cikge1xuICByZXR1cm4gVEVTVF9BTFBIQU5VTUVSSUMudGVzdChzdHIpXG59XG4iLCJ2YXIgTW9kZSA9IHJlcXVpcmUoJy4vbW9kZScpXG52YXIgTnVtZXJpY0RhdGEgPSByZXF1aXJlKCcuL251bWVyaWMtZGF0YScpXG52YXIgQWxwaGFudW1lcmljRGF0YSA9IHJlcXVpcmUoJy4vYWxwaGFudW1lcmljLWRhdGEnKVxudmFyIEJ5dGVEYXRhID0gcmVxdWlyZSgnLi9ieXRlLWRhdGEnKVxudmFyIEthbmppRGF0YSA9IHJlcXVpcmUoJy4va2FuamktZGF0YScpXG52YXIgUmVnZXggPSByZXF1aXJlKCcuL3JlZ2V4JylcbnZhciBVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxudmFyIGRpamtzdHJhID0gcmVxdWlyZSgnZGlqa3N0cmFqcycpXG5cbi8qKlxuICogUmV0dXJucyBVVEY4IGJ5dGUgbGVuZ3RoXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBzdHIgSW5wdXQgc3RyaW5nXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICBOdW1iZXIgb2YgYnl0ZVxuICovXG5mdW5jdGlvbiBnZXRTdHJpbmdCeXRlTGVuZ3RoIChzdHIpIHtcbiAgcmV0dXJuIHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKS5sZW5ndGhcbn1cblxuLyoqXG4gKiBHZXQgYSBsaXN0IG9mIHNlZ21lbnRzIG9mIHRoZSBzcGVjaWZpZWQgbW9kZVxuICogZnJvbSBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSAge01vZGV9ICAgbW9kZSBTZWdtZW50IG1vZGVcbiAqIEBwYXJhbSAge1N0cmluZ30gc3RyICBTdHJpbmcgdG8gcHJvY2Vzc1xuICogQHJldHVybiB7QXJyYXl9ICAgICAgIEFycmF5IG9mIG9iamVjdCB3aXRoIHNlZ21lbnRzIGRhdGFcbiAqL1xuZnVuY3Rpb24gZ2V0U2VnbWVudHMgKHJlZ2V4LCBtb2RlLCBzdHIpIHtcbiAgdmFyIHNlZ21lbnRzID0gW11cbiAgdmFyIHJlc3VsdFxuXG4gIHdoaWxlICgocmVzdWx0ID0gcmVnZXguZXhlYyhzdHIpKSAhPT0gbnVsbCkge1xuICAgIHNlZ21lbnRzLnB1c2goe1xuICAgICAgZGF0YTogcmVzdWx0WzBdLFxuICAgICAgaW5kZXg6IHJlc3VsdC5pbmRleCxcbiAgICAgIG1vZGU6IG1vZGUsXG4gICAgICBsZW5ndGg6IHJlc3VsdFswXS5sZW5ndGhcbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnRzXG59XG5cbi8qKlxuICogRXh0cmFjdHMgYSBzZXJpZXMgb2Ygc2VnbWVudHMgd2l0aCB0aGUgYXBwcm9wcmlhdGVcbiAqIG1vZGVzIGZyb20gYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGRhdGFTdHIgSW5wdXQgc3RyaW5nXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgICAgQXJyYXkgb2Ygb2JqZWN0IHdpdGggc2VnbWVudHMgZGF0YVxuICovXG5mdW5jdGlvbiBnZXRTZWdtZW50c0Zyb21TdHJpbmcgKGRhdGFTdHIpIHtcbiAgdmFyIG51bVNlZ3MgPSBnZXRTZWdtZW50cyhSZWdleC5OVU1FUklDLCBNb2RlLk5VTUVSSUMsIGRhdGFTdHIpXG4gIHZhciBhbHBoYU51bVNlZ3MgPSBnZXRTZWdtZW50cyhSZWdleC5BTFBIQU5VTUVSSUMsIE1vZGUuQUxQSEFOVU1FUklDLCBkYXRhU3RyKVxuICB2YXIgYnl0ZVNlZ3NcbiAgdmFyIGthbmppU2Vnc1xuXG4gIGlmIChVdGlscy5pc0thbmppTW9kZUVuYWJsZWQoKSkge1xuICAgIGJ5dGVTZWdzID0gZ2V0U2VnbWVudHMoUmVnZXguQllURSwgTW9kZS5CWVRFLCBkYXRhU3RyKVxuICAgIGthbmppU2VncyA9IGdldFNlZ21lbnRzKFJlZ2V4LktBTkpJLCBNb2RlLktBTkpJLCBkYXRhU3RyKVxuICB9IGVsc2Uge1xuICAgIGJ5dGVTZWdzID0gZ2V0U2VnbWVudHMoUmVnZXguQllURV9LQU5KSSwgTW9kZS5CWVRFLCBkYXRhU3RyKVxuICAgIGthbmppU2VncyA9IFtdXG4gIH1cblxuICB2YXIgc2VncyA9IG51bVNlZ3MuY29uY2F0KGFscGhhTnVtU2VncywgYnl0ZVNlZ3MsIGthbmppU2VncylcblxuICByZXR1cm4gc2Vnc1xuICAgIC5zb3J0KGZ1bmN0aW9uIChzMSwgczIpIHtcbiAgICAgIHJldHVybiBzMS5pbmRleCAtIHMyLmluZGV4XG4gICAgfSlcbiAgICAubWFwKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IG9iai5kYXRhLFxuICAgICAgICBtb2RlOiBvYmoubW9kZSxcbiAgICAgICAgbGVuZ3RoOiBvYmoubGVuZ3RoXG4gICAgICB9XG4gICAgfSlcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGhvdyBtYW55IGJpdHMgYXJlIG5lZWRlZCB0byBlbmNvZGUgYSBzdHJpbmcgb2ZcbiAqIHNwZWNpZmllZCBsZW5ndGggd2l0aCB0aGUgc3BlY2lmaWVkIG1vZGVcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGxlbmd0aCBTdHJpbmcgbGVuZ3RoXG4gKiBAcGFyYW0gIHtNb2RlfSBtb2RlICAgICBTZWdtZW50IG1vZGVcbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgIEJpdCBsZW5ndGhcbiAqL1xuZnVuY3Rpb24gZ2V0U2VnbWVudEJpdHNMZW5ndGggKGxlbmd0aCwgbW9kZSkge1xuICBzd2l0Y2ggKG1vZGUpIHtcbiAgICBjYXNlIE1vZGUuTlVNRVJJQzpcbiAgICAgIHJldHVybiBOdW1lcmljRGF0YS5nZXRCaXRzTGVuZ3RoKGxlbmd0aClcbiAgICBjYXNlIE1vZGUuQUxQSEFOVU1FUklDOlxuICAgICAgcmV0dXJuIEFscGhhbnVtZXJpY0RhdGEuZ2V0Qml0c0xlbmd0aChsZW5ndGgpXG4gICAgY2FzZSBNb2RlLktBTkpJOlxuICAgICAgcmV0dXJuIEthbmppRGF0YS5nZXRCaXRzTGVuZ3RoKGxlbmd0aClcbiAgICBjYXNlIE1vZGUuQllURTpcbiAgICAgIHJldHVybiBCeXRlRGF0YS5nZXRCaXRzTGVuZ3RoKGxlbmd0aClcbiAgfVxufVxuXG4vKipcbiAqIE1lcmdlcyBhZGphY2VudCBzZWdtZW50cyB3aGljaCBoYXZlIHRoZSBzYW1lIG1vZGVcbiAqXG4gKiBAcGFyYW0gIHtBcnJheX0gc2VncyBBcnJheSBvZiBvYmplY3Qgd2l0aCBzZWdtZW50cyBkYXRhXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICBBcnJheSBvZiBvYmplY3Qgd2l0aCBzZWdtZW50cyBkYXRhXG4gKi9cbmZ1bmN0aW9uIG1lcmdlU2VnbWVudHMgKHNlZ3MpIHtcbiAgcmV0dXJuIHNlZ3MucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGN1cnIpIHtcbiAgICB2YXIgcHJldlNlZyA9IGFjYy5sZW5ndGggLSAxID49IDAgPyBhY2NbYWNjLmxlbmd0aCAtIDFdIDogbnVsbFxuICAgIGlmIChwcmV2U2VnICYmIHByZXZTZWcubW9kZSA9PT0gY3Vyci5tb2RlKSB7XG4gICAgICBhY2NbYWNjLmxlbmd0aCAtIDFdLmRhdGEgKz0gY3Vyci5kYXRhXG4gICAgICByZXR1cm4gYWNjXG4gICAgfVxuXG4gICAgYWNjLnB1c2goY3VycilcbiAgICByZXR1cm4gYWNjXG4gIH0sIFtdKVxufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIGxpc3Qgb2YgYWxsIHBvc3NpYmxlIG5vZGVzIGNvbWJpbmF0aW9uIHdoaWNoXG4gKiB3aWxsIGJlIHVzZWQgdG8gYnVpbGQgYSBzZWdtZW50cyBncmFwaC5cbiAqXG4gKiBOb2RlcyBhcmUgZGl2aWRlZCBieSBncm91cHMuIEVhY2ggZ3JvdXAgd2lsbCBjb250YWluIGEgbGlzdCBvZiBhbGwgdGhlIG1vZGVzXG4gKiBpbiB3aGljaCBpcyBwb3NzaWJsZSB0byBlbmNvZGUgdGhlIGdpdmVuIHRleHQuXG4gKlxuICogRm9yIGV4YW1wbGUgdGhlIHRleHQgJzEyMzQ1JyBjYW4gYmUgZW5jb2RlZCBhcyBOdW1lcmljLCBBbHBoYW51bWVyaWMgb3IgQnl0ZS5cbiAqIFRoZSBncm91cCBmb3IgJzEyMzQ1JyB3aWxsIGNvbnRhaW4gdGhlbiAzIG9iamVjdHMsIG9uZSBmb3IgZWFjaFxuICogcG9zc2libGUgZW5jb2RpbmcgbW9kZS5cbiAqXG4gKiBFYWNoIG5vZGUgcmVwcmVzZW50cyBhIHBvc3NpYmxlIHNlZ21lbnQuXG4gKlxuICogQHBhcmFtICB7QXJyYXl9IHNlZ3MgQXJyYXkgb2Ygb2JqZWN0IHdpdGggc2VnbWVudHMgZGF0YVxuICogQHJldHVybiB7QXJyYXl9ICAgICAgQXJyYXkgb2Ygb2JqZWN0IHdpdGggc2VnbWVudHMgZGF0YVxuICovXG5mdW5jdGlvbiBidWlsZE5vZGVzIChzZWdzKSB7XG4gIHZhciBub2RlcyA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2Vncy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzZWcgPSBzZWdzW2ldXG5cbiAgICBzd2l0Y2ggKHNlZy5tb2RlKSB7XG4gICAgICBjYXNlIE1vZGUuTlVNRVJJQzpcbiAgICAgICAgbm9kZXMucHVzaChbc2VnLFxuICAgICAgICAgIHsgZGF0YTogc2VnLmRhdGEsIG1vZGU6IE1vZGUuQUxQSEFOVU1FUklDLCBsZW5ndGg6IHNlZy5sZW5ndGggfSxcbiAgICAgICAgICB7IGRhdGE6IHNlZy5kYXRhLCBtb2RlOiBNb2RlLkJZVEUsIGxlbmd0aDogc2VnLmxlbmd0aCB9XG4gICAgICAgIF0pXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIE1vZGUuQUxQSEFOVU1FUklDOlxuICAgICAgICBub2Rlcy5wdXNoKFtzZWcsXG4gICAgICAgICAgeyBkYXRhOiBzZWcuZGF0YSwgbW9kZTogTW9kZS5CWVRFLCBsZW5ndGg6IHNlZy5sZW5ndGggfVxuICAgICAgICBdKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBNb2RlLktBTkpJOlxuICAgICAgICBub2Rlcy5wdXNoKFtzZWcsXG4gICAgICAgICAgeyBkYXRhOiBzZWcuZGF0YSwgbW9kZTogTW9kZS5CWVRFLCBsZW5ndGg6IGdldFN0cmluZ0J5dGVMZW5ndGgoc2VnLmRhdGEpIH1cbiAgICAgICAgXSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgTW9kZS5CWVRFOlxuICAgICAgICBub2Rlcy5wdXNoKFtcbiAgICAgICAgICB7IGRhdGE6IHNlZy5kYXRhLCBtb2RlOiBNb2RlLkJZVEUsIGxlbmd0aDogZ2V0U3RyaW5nQnl0ZUxlbmd0aChzZWcuZGF0YSkgfVxuICAgICAgICBdKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBub2Rlc1xufVxuXG4vKipcbiAqIEJ1aWxkcyBhIGdyYXBoIGZyb20gYSBsaXN0IG9mIG5vZGVzLlxuICogQWxsIHNlZ21lbnRzIGluIGVhY2ggbm9kZSBncm91cCB3aWxsIGJlIGNvbm5lY3RlZCB3aXRoIGFsbCB0aGUgc2VnbWVudHMgb2ZcbiAqIHRoZSBuZXh0IGdyb3VwIGFuZCBzbyBvbi5cbiAqXG4gKiBBdCBlYWNoIGNvbm5lY3Rpb24gd2lsbCBiZSBhc3NpZ25lZCBhIHdlaWdodCBkZXBlbmRpbmcgb24gdGhlXG4gKiBzZWdtZW50J3MgYnl0ZSBsZW5ndGguXG4gKlxuICogQHBhcmFtICB7QXJyYXl9IG5vZGVzICAgIEFycmF5IG9mIG9iamVjdCB3aXRoIHNlZ21lbnRzIGRhdGFcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICBHcmFwaCBvZiBhbGwgcG9zc2libGUgc2VnbWVudHNcbiAqL1xuZnVuY3Rpb24gYnVpbGRHcmFwaCAobm9kZXMsIHZlcnNpb24pIHtcbiAgdmFyIHRhYmxlID0ge31cbiAgdmFyIGdyYXBoID0geydzdGFydCc6IHt9fVxuICB2YXIgcHJldk5vZGVJZHMgPSBbJ3N0YXJ0J11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5vZGVHcm91cCA9IG5vZGVzW2ldXG4gICAgdmFyIGN1cnJlbnROb2RlSWRzID0gW11cblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbm9kZUdyb3VwLmxlbmd0aDsgaisrKSB7XG4gICAgICB2YXIgbm9kZSA9IG5vZGVHcm91cFtqXVxuICAgICAgdmFyIGtleSA9ICcnICsgaSArIGpcblxuICAgICAgY3VycmVudE5vZGVJZHMucHVzaChrZXkpXG4gICAgICB0YWJsZVtrZXldID0geyBub2RlOiBub2RlLCBsYXN0Q291bnQ6IDAgfVxuICAgICAgZ3JhcGhba2V5XSA9IHt9XG5cbiAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgcHJldk5vZGVJZHMubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgdmFyIHByZXZOb2RlSWQgPSBwcmV2Tm9kZUlkc1tuXVxuXG4gICAgICAgIGlmICh0YWJsZVtwcmV2Tm9kZUlkXSAmJiB0YWJsZVtwcmV2Tm9kZUlkXS5ub2RlLm1vZGUgPT09IG5vZGUubW9kZSkge1xuICAgICAgICAgIGdyYXBoW3ByZXZOb2RlSWRdW2tleV0gPVxuICAgICAgICAgICAgZ2V0U2VnbWVudEJpdHNMZW5ndGgodGFibGVbcHJldk5vZGVJZF0ubGFzdENvdW50ICsgbm9kZS5sZW5ndGgsIG5vZGUubW9kZSkgLVxuICAgICAgICAgICAgZ2V0U2VnbWVudEJpdHNMZW5ndGgodGFibGVbcHJldk5vZGVJZF0ubGFzdENvdW50LCBub2RlLm1vZGUpXG5cbiAgICAgICAgICB0YWJsZVtwcmV2Tm9kZUlkXS5sYXN0Q291bnQgKz0gbm9kZS5sZW5ndGhcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodGFibGVbcHJldk5vZGVJZF0pIHRhYmxlW3ByZXZOb2RlSWRdLmxhc3RDb3VudCA9IG5vZGUubGVuZ3RoXG5cbiAgICAgICAgICBncmFwaFtwcmV2Tm9kZUlkXVtrZXldID0gZ2V0U2VnbWVudEJpdHNMZW5ndGgobm9kZS5sZW5ndGgsIG5vZGUubW9kZSkgK1xuICAgICAgICAgICAgNCArIE1vZGUuZ2V0Q2hhckNvdW50SW5kaWNhdG9yKG5vZGUubW9kZSwgdmVyc2lvbikgLy8gc3dpdGNoIGNvc3RcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHByZXZOb2RlSWRzID0gY3VycmVudE5vZGVJZHNcbiAgfVxuXG4gIGZvciAobiA9IDA7IG4gPCBwcmV2Tm9kZUlkcy5sZW5ndGg7IG4rKykge1xuICAgIGdyYXBoW3ByZXZOb2RlSWRzW25dXVsnZW5kJ10gPSAwXG4gIH1cblxuICByZXR1cm4geyBtYXA6IGdyYXBoLCB0YWJsZTogdGFibGUgfVxufVxuXG4vKipcbiAqIEJ1aWxkcyBhIHNlZ21lbnQgZnJvbSBhIHNwZWNpZmllZCBkYXRhIGFuZCBtb2RlLlxuICogSWYgYSBtb2RlIGlzIG5vdCBzcGVjaWZpZWQsIHRoZSBtb3JlIHN1aXRhYmxlIHdpbGwgYmUgdXNlZC5cbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGRhdGEgICAgICAgICAgICAgSW5wdXQgZGF0YVxuICogQHBhcmFtICB7TW9kZSB8IFN0cmluZ30gbW9kZXNIaW50IERhdGEgbW9kZVxuICogQHJldHVybiB7U2VnbWVudH0gICAgICAgICAgICAgICAgIFNlZ21lbnRcbiAqL1xuZnVuY3Rpb24gYnVpbGRTaW5nbGVTZWdtZW50IChkYXRhLCBtb2Rlc0hpbnQpIHtcbiAgdmFyIG1vZGVcbiAgdmFyIGJlc3RNb2RlID0gTW9kZS5nZXRCZXN0TW9kZUZvckRhdGEoZGF0YSlcblxuICBtb2RlID0gTW9kZS5mcm9tKG1vZGVzSGludCwgYmVzdE1vZGUpXG5cbiAgLy8gTWFrZSBzdXJlIGRhdGEgY2FuIGJlIGVuY29kZWRcbiAgaWYgKG1vZGUgIT09IE1vZGUuQllURSAmJiBtb2RlLmJpdCA8IGJlc3RNb2RlLmJpdCkge1xuICAgIHRocm93IG5ldyBFcnJvcignXCInICsgZGF0YSArICdcIicgK1xuICAgICAgJyBjYW5ub3QgYmUgZW5jb2RlZCB3aXRoIG1vZGUgJyArIE1vZGUudG9TdHJpbmcobW9kZSkgK1xuICAgICAgJy5cXG4gU3VnZ2VzdGVkIG1vZGUgaXM6ICcgKyBNb2RlLnRvU3RyaW5nKGJlc3RNb2RlKSlcbiAgfVxuXG4gIC8vIFVzZSBNb2RlLkJZVEUgaWYgS2Fuamkgc3VwcG9ydCBpcyBkaXNhYmxlZFxuICBpZiAobW9kZSA9PT0gTW9kZS5LQU5KSSAmJiAhVXRpbHMuaXNLYW5qaU1vZGVFbmFibGVkKCkpIHtcbiAgICBtb2RlID0gTW9kZS5CWVRFXG4gIH1cblxuICBzd2l0Y2ggKG1vZGUpIHtcbiAgICBjYXNlIE1vZGUuTlVNRVJJQzpcbiAgICAgIHJldHVybiBuZXcgTnVtZXJpY0RhdGEoZGF0YSlcblxuICAgIGNhc2UgTW9kZS5BTFBIQU5VTUVSSUM6XG4gICAgICByZXR1cm4gbmV3IEFscGhhbnVtZXJpY0RhdGEoZGF0YSlcblxuICAgIGNhc2UgTW9kZS5LQU5KSTpcbiAgICAgIHJldHVybiBuZXcgS2FuamlEYXRhKGRhdGEpXG5cbiAgICBjYXNlIE1vZGUuQllURTpcbiAgICAgIHJldHVybiBuZXcgQnl0ZURhdGEoZGF0YSlcbiAgfVxufVxuXG4vKipcbiAqIEJ1aWxkcyBhIGxpc3Qgb2Ygc2VnbWVudHMgZnJvbSBhbiBhcnJheS5cbiAqIEFycmF5IGNhbiBjb250YWluIFN0cmluZ3Mgb3IgT2JqZWN0cyB3aXRoIHNlZ21lbnQncyBpbmZvLlxuICpcbiAqIEZvciBlYWNoIGl0ZW0gd2hpY2ggaXMgYSBzdHJpbmcsIHdpbGwgYmUgZ2VuZXJhdGVkIGEgc2VnbWVudCB3aXRoIHRoZSBnaXZlblxuICogc3RyaW5nIGFuZCB0aGUgbW9yZSBhcHByb3ByaWF0ZSBlbmNvZGluZyBtb2RlLlxuICpcbiAqIEZvciBlYWNoIGl0ZW0gd2hpY2ggaXMgYW4gb2JqZWN0LCB3aWxsIGJlIGdlbmVyYXRlZCBhIHNlZ21lbnQgd2l0aCB0aGUgZ2l2ZW5cbiAqIGRhdGEgYW5kIG1vZGUuXG4gKiBPYmplY3RzIG11c3QgY29udGFpbiBhdCBsZWFzdCB0aGUgcHJvcGVydHkgXCJkYXRhXCIuXG4gKiBJZiBwcm9wZXJ0eSBcIm1vZGVcIiBpcyBub3QgcHJlc2VudCwgdGhlIG1vcmUgc3VpdGFibGUgbW9kZSB3aWxsIGJlIHVzZWQuXG4gKlxuICogQHBhcmFtICB7QXJyYXl9IGFycmF5IEFycmF5IG9mIG9iamVjdHMgd2l0aCBzZWdtZW50cyBkYXRhXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgQXJyYXkgb2YgU2VnbWVudHNcbiAqL1xuZXhwb3J0cy5mcm9tQXJyYXkgPSBmdW5jdGlvbiBmcm9tQXJyYXkgKGFycmF5KSB7XG4gIHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgc2VnKSB7XG4gICAgaWYgKHR5cGVvZiBzZWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBhY2MucHVzaChidWlsZFNpbmdsZVNlZ21lbnQoc2VnLCBudWxsKSlcbiAgICB9IGVsc2UgaWYgKHNlZy5kYXRhKSB7XG4gICAgICBhY2MucHVzaChidWlsZFNpbmdsZVNlZ21lbnQoc2VnLmRhdGEsIHNlZy5tb2RlKSlcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjXG4gIH0sIFtdKVxufVxuXG4vKipcbiAqIEJ1aWxkcyBhbiBvcHRpbWl6ZWQgc2VxdWVuY2Ugb2Ygc2VnbWVudHMgZnJvbSBhIHN0cmluZyxcbiAqIHdoaWNoIHdpbGwgcHJvZHVjZSB0aGUgc2hvcnRlc3QgcG9zc2libGUgYml0c3RyZWFtLlxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gZGF0YSAgICBJbnB1dCBzdHJpbmdcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICBBcnJheSBvZiBzZWdtZW50c1xuICovXG5leHBvcnRzLmZyb21TdHJpbmcgPSBmdW5jdGlvbiBmcm9tU3RyaW5nIChkYXRhLCB2ZXJzaW9uKSB7XG4gIHZhciBzZWdzID0gZ2V0U2VnbWVudHNGcm9tU3RyaW5nKGRhdGEsIFV0aWxzLmlzS2FuamlNb2RlRW5hYmxlZCgpKVxuXG4gIHZhciBub2RlcyA9IGJ1aWxkTm9kZXMoc2VncylcbiAgdmFyIGdyYXBoID0gYnVpbGRHcmFwaChub2RlcywgdmVyc2lvbilcbiAgdmFyIHBhdGggPSBkaWprc3RyYS5maW5kX3BhdGgoZ3JhcGgubWFwLCAnc3RhcnQnLCAnZW5kJylcblxuICB2YXIgb3B0aW1pemVkU2VncyA9IFtdXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgcGF0aC5sZW5ndGggLSAxOyBpKyspIHtcbiAgICBvcHRpbWl6ZWRTZWdzLnB1c2goZ3JhcGgudGFibGVbcGF0aFtpXV0ubm9kZSlcbiAgfVxuXG4gIHJldHVybiBleHBvcnRzLmZyb21BcnJheShtZXJnZVNlZ21lbnRzKG9wdGltaXplZFNlZ3MpKVxufVxuXG4vKipcbiAqIFNwbGl0cyBhIHN0cmluZyBpbiB2YXJpb3VzIHNlZ21lbnRzIHdpdGggdGhlIG1vZGVzIHdoaWNoXG4gKiBiZXN0IHJlcHJlc2VudCB0aGVpciBjb250ZW50LlxuICogVGhlIHByb2R1Y2VkIHNlZ21lbnRzIGFyZSBmYXIgZnJvbSBiZWluZyBvcHRpbWl6ZWQuXG4gKiBUaGUgb3V0cHV0IG9mIHRoaXMgZnVuY3Rpb24gaXMgb25seSB1c2VkIHRvIGVzdGltYXRlIGEgUVIgQ29kZSB2ZXJzaW9uXG4gKiB3aGljaCBtYXkgY29udGFpbiB0aGUgZGF0YS5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGRhdGEgSW5wdXQgc3RyaW5nXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgQXJyYXkgb2Ygc2VnbWVudHNcbiAqL1xuZXhwb3J0cy5yYXdTcGxpdCA9IGZ1bmN0aW9uIHJhd1NwbGl0IChkYXRhKSB7XG4gIHJldHVybiBleHBvcnRzLmZyb21BcnJheShcbiAgICBnZXRTZWdtZW50c0Zyb21TdHJpbmcoZGF0YSwgVXRpbHMuaXNLYW5qaU1vZGVFbmFibGVkKCkpXG4gIClcbn1cbiIsInZhciB0b1NKSVNGdW5jdGlvblxudmFyIENPREVXT1JEU19DT1VOVCA9IFtcbiAgMCwgLy8gTm90IHVzZWRcbiAgMjYsIDQ0LCA3MCwgMTAwLCAxMzQsIDE3MiwgMTk2LCAyNDIsIDI5MiwgMzQ2LFxuICA0MDQsIDQ2NiwgNTMyLCA1ODEsIDY1NSwgNzMzLCA4MTUsIDkwMSwgOTkxLCAxMDg1LFxuICAxMTU2LCAxMjU4LCAxMzY0LCAxNDc0LCAxNTg4LCAxNzA2LCAxODI4LCAxOTIxLCAyMDUxLCAyMTg1LFxuICAyMzIzLCAyNDY1LCAyNjExLCAyNzYxLCAyODc2LCAzMDM0LCAzMTk2LCAzMzYyLCAzNTMyLCAzNzA2XG5dXG5cbi8qKlxuICogUmV0dXJucyB0aGUgUVIgQ29kZSBzaXplIGZvciB0aGUgc3BlY2lmaWVkIHZlcnNpb25cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgc2l6ZSBvZiBRUiBjb2RlXG4gKi9cbmV4cG9ydHMuZ2V0U3ltYm9sU2l6ZSA9IGZ1bmN0aW9uIGdldFN5bWJvbFNpemUgKHZlcnNpb24pIHtcbiAgaWYgKCF2ZXJzaW9uKSB0aHJvdyBuZXcgRXJyb3IoJ1widmVyc2lvblwiIGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCcpXG4gIGlmICh2ZXJzaW9uIDwgMSB8fCB2ZXJzaW9uID4gNDApIHRocm93IG5ldyBFcnJvcignXCJ2ZXJzaW9uXCIgc2hvdWxkIGJlIGluIHJhbmdlIGZyb20gMSB0byA0MCcpXG4gIHJldHVybiB2ZXJzaW9uICogNCArIDE3XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgdG90YWwgbnVtYmVyIG9mIGNvZGV3b3JkcyB1c2VkIHRvIHN0b3JlIGRhdGEgYW5kIEVDIGluZm9ybWF0aW9uLlxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICBEYXRhIGxlbmd0aCBpbiBiaXRzXG4gKi9cbmV4cG9ydHMuZ2V0U3ltYm9sVG90YWxDb2Rld29yZHMgPSBmdW5jdGlvbiBnZXRTeW1ib2xUb3RhbENvZGV3b3JkcyAodmVyc2lvbikge1xuICByZXR1cm4gQ09ERVdPUkRTX0NPVU5UW3ZlcnNpb25dXG59XG5cbi8qKlxuICogRW5jb2RlIGRhdGEgd2l0aCBCb3NlLUNoYXVkaHVyaS1Ib2NxdWVuZ2hlbVxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gZGF0YSBWYWx1ZSB0byBlbmNvZGVcbiAqIEByZXR1cm4ge051bWJlcn0gICAgICBFbmNvZGVkIHZhbHVlXG4gKi9cbmV4cG9ydHMuZ2V0QkNIRGlnaXQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB2YXIgZGlnaXQgPSAwXG5cbiAgd2hpbGUgKGRhdGEgIT09IDApIHtcbiAgICBkaWdpdCsrXG4gICAgZGF0YSA+Pj49IDFcbiAgfVxuXG4gIHJldHVybiBkaWdpdFxufVxuXG5leHBvcnRzLnNldFRvU0pJU0Z1bmN0aW9uID0gZnVuY3Rpb24gc2V0VG9TSklTRnVuY3Rpb24gKGYpIHtcbiAgaWYgKHR5cGVvZiBmICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdcInRvU0pJU0Z1bmNcIiBpcyBub3QgYSB2YWxpZCBmdW5jdGlvbi4nKVxuICB9XG5cbiAgdG9TSklTRnVuY3Rpb24gPSBmXG59XG5cbmV4cG9ydHMuaXNLYW5qaU1vZGVFbmFibGVkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHlwZW9mIHRvU0pJU0Z1bmN0aW9uICE9PSAndW5kZWZpbmVkJ1xufVxuXG5leHBvcnRzLnRvU0pJUyA9IGZ1bmN0aW9uIHRvU0pJUyAoa2FuamkpIHtcbiAgcmV0dXJuIHRvU0pJU0Z1bmN0aW9uKGthbmppKVxufVxuIiwiLyoqXG4gKiBDaGVjayBpZiBRUiBDb2RlIHZlcnNpb24gaXMgdmFsaWRcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgICB0cnVlIGlmIHZhbGlkIHZlcnNpb24sIGZhbHNlIG90aGVyd2lzZVxuICovXG5leHBvcnRzLmlzVmFsaWQgPSBmdW5jdGlvbiBpc1ZhbGlkICh2ZXJzaW9uKSB7XG4gIHJldHVybiAhaXNOYU4odmVyc2lvbikgJiYgdmVyc2lvbiA+PSAxICYmIHZlcnNpb24gPD0gNDBcbn1cbiIsInZhciBVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxudmFyIEVDQ29kZSA9IHJlcXVpcmUoJy4vZXJyb3ItY29ycmVjdGlvbi1jb2RlJylcbnZhciBFQ0xldmVsID0gcmVxdWlyZSgnLi9lcnJvci1jb3JyZWN0aW9uLWxldmVsJylcbnZhciBNb2RlID0gcmVxdWlyZSgnLi9tb2RlJylcbnZhciBWZXJzaW9uQ2hlY2sgPSByZXF1aXJlKCcuL3ZlcnNpb24tY2hlY2snKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLy8gR2VuZXJhdG9yIHBvbHlub21pYWwgdXNlZCB0byBlbmNvZGUgdmVyc2lvbiBpbmZvcm1hdGlvblxudmFyIEcxOCA9ICgxIDw8IDEyKSB8ICgxIDw8IDExKSB8ICgxIDw8IDEwKSB8ICgxIDw8IDkpIHwgKDEgPDwgOCkgfCAoMSA8PCA1KSB8ICgxIDw8IDIpIHwgKDEgPDwgMClcbnZhciBHMThfQkNIID0gVXRpbHMuZ2V0QkNIRGlnaXQoRzE4KVxuXG5mdW5jdGlvbiBnZXRCZXN0VmVyc2lvbkZvckRhdGFMZW5ndGggKG1vZGUsIGxlbmd0aCwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpIHtcbiAgZm9yICh2YXIgY3VycmVudFZlcnNpb24gPSAxOyBjdXJyZW50VmVyc2lvbiA8PSA0MDsgY3VycmVudFZlcnNpb24rKykge1xuICAgIGlmIChsZW5ndGggPD0gZXhwb3J0cy5nZXRDYXBhY2l0eShjdXJyZW50VmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIG1vZGUpKSB7XG4gICAgICByZXR1cm4gY3VycmVudFZlcnNpb25cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGdldFJlc2VydmVkQml0c0NvdW50IChtb2RlLCB2ZXJzaW9uKSB7XG4gIC8vIENoYXJhY3RlciBjb3VudCBpbmRpY2F0b3IgKyBtb2RlIGluZGljYXRvciBiaXRzXG4gIHJldHVybiBNb2RlLmdldENoYXJDb3VudEluZGljYXRvcihtb2RlLCB2ZXJzaW9uKSArIDRcbn1cblxuZnVuY3Rpb24gZ2V0VG90YWxCaXRzRnJvbURhdGFBcnJheSAoc2VnbWVudHMsIHZlcnNpb24pIHtcbiAgdmFyIHRvdGFsQml0cyA9IDBcblxuICBzZWdtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIHJlc2VydmVkQml0cyA9IGdldFJlc2VydmVkQml0c0NvdW50KGRhdGEubW9kZSwgdmVyc2lvbilcbiAgICB0b3RhbEJpdHMgKz0gcmVzZXJ2ZWRCaXRzICsgZGF0YS5nZXRCaXRzTGVuZ3RoKClcbiAgfSlcblxuICByZXR1cm4gdG90YWxCaXRzXG59XG5cbmZ1bmN0aW9uIGdldEJlc3RWZXJzaW9uRm9yTWl4ZWREYXRhIChzZWdtZW50cywgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpIHtcbiAgZm9yICh2YXIgY3VycmVudFZlcnNpb24gPSAxOyBjdXJyZW50VmVyc2lvbiA8PSA0MDsgY3VycmVudFZlcnNpb24rKykge1xuICAgIHZhciBsZW5ndGggPSBnZXRUb3RhbEJpdHNGcm9tRGF0YUFycmF5KHNlZ21lbnRzLCBjdXJyZW50VmVyc2lvbilcbiAgICBpZiAobGVuZ3RoIDw9IGV4cG9ydHMuZ2V0Q2FwYWNpdHkoY3VycmVudFZlcnNpb24sIGVycm9yQ29ycmVjdGlvbkxldmVsLCBNb2RlLk1JWEVEKSkge1xuICAgICAgcmV0dXJuIGN1cnJlbnRWZXJzaW9uXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZFxufVxuXG4vKipcbiAqIFJldHVybnMgdmVyc2lvbiBudW1iZXIgZnJvbSBhIHZhbHVlLlxuICogSWYgdmFsdWUgaXMgbm90IGEgdmFsaWQgdmVyc2lvbiwgcmV0dXJucyBkZWZhdWx0VmFsdWVcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ8U3RyaW5nfSB2YWx1ZSAgICAgICAgUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgICAgICBkZWZhdWx0VmFsdWUgRmFsbGJhY2sgdmFsdWVcbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICAgICAgICAgICAgICBRUiBDb2RlIHZlcnNpb24gbnVtYmVyXG4gKi9cbmV4cG9ydHMuZnJvbSA9IGZ1bmN0aW9uIGZyb20gKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgaWYgKFZlcnNpb25DaGVjay5pc1ZhbGlkKHZhbHVlKSkge1xuICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApXG4gIH1cblxuICByZXR1cm4gZGVmYXVsdFZhbHVlXG59XG5cbi8qKlxuICogUmV0dXJucyBob3cgbXVjaCBkYXRhIGNhbiBiZSBzdG9yZWQgd2l0aCB0aGUgc3BlY2lmaWVkIFFSIGNvZGUgdmVyc2lvblxuICogYW5kIGVycm9yIGNvcnJlY3Rpb24gbGV2ZWxcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHZlcnNpb24gICAgICAgICAgICAgIFFSIENvZGUgdmVyc2lvbiAoMS00MClcbiAqIEBwYXJhbSAge051bWJlcn0gZXJyb3JDb3JyZWN0aW9uTGV2ZWwgRXJyb3IgY29ycmVjdGlvbiBsZXZlbFxuICogQHBhcmFtICB7TW9kZX0gICBtb2RlICAgICAgICAgICAgICAgICBEYXRhIG1vZGVcbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICAgICAgICAgICAgICAgUXVhbnRpdHkgb2Ygc3RvcmFibGUgZGF0YVxuICovXG5leHBvcnRzLmdldENhcGFjaXR5ID0gZnVuY3Rpb24gZ2V0Q2FwYWNpdHkgKHZlcnNpb24sIGVycm9yQ29ycmVjdGlvbkxldmVsLCBtb2RlKSB7XG4gIGlmICghVmVyc2lvbkNoZWNrLmlzVmFsaWQodmVyc2lvbikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgUVIgQ29kZSB2ZXJzaW9uJylcbiAgfVxuXG4gIC8vIFVzZSBCeXRlIG1vZGUgYXMgZGVmYXVsdFxuICBpZiAodHlwZW9mIG1vZGUgPT09ICd1bmRlZmluZWQnKSBtb2RlID0gTW9kZS5CWVRFXG5cbiAgLy8gVG90YWwgY29kZXdvcmRzIGZvciB0aGlzIFFSIGNvZGUgdmVyc2lvbiAoRGF0YSArIEVycm9yIGNvcnJlY3Rpb24pXG4gIHZhciB0b3RhbENvZGV3b3JkcyA9IFV0aWxzLmdldFN5bWJvbFRvdGFsQ29kZXdvcmRzKHZlcnNpb24pXG5cbiAgLy8gVG90YWwgbnVtYmVyIG9mIGVycm9yIGNvcnJlY3Rpb24gY29kZXdvcmRzXG4gIHZhciBlY1RvdGFsQ29kZXdvcmRzID0gRUNDb2RlLmdldFRvdGFsQ29kZXdvcmRzQ291bnQodmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpXG5cbiAgLy8gVG90YWwgbnVtYmVyIG9mIGRhdGEgY29kZXdvcmRzXG4gIHZhciBkYXRhVG90YWxDb2Rld29yZHNCaXRzID0gKHRvdGFsQ29kZXdvcmRzIC0gZWNUb3RhbENvZGV3b3JkcykgKiA4XG5cbiAgaWYgKG1vZGUgPT09IE1vZGUuTUlYRUQpIHJldHVybiBkYXRhVG90YWxDb2Rld29yZHNCaXRzXG5cbiAgdmFyIHVzYWJsZUJpdHMgPSBkYXRhVG90YWxDb2Rld29yZHNCaXRzIC0gZ2V0UmVzZXJ2ZWRCaXRzQ291bnQobW9kZSwgdmVyc2lvbilcblxuICAvLyBSZXR1cm4gbWF4IG51bWJlciBvZiBzdG9yYWJsZSBjb2Rld29yZHNcbiAgc3dpdGNoIChtb2RlKSB7XG4gICAgY2FzZSBNb2RlLk5VTUVSSUM6XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcigodXNhYmxlQml0cyAvIDEwKSAqIDMpXG5cbiAgICBjYXNlIE1vZGUuQUxQSEFOVU1FUklDOlxuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoKHVzYWJsZUJpdHMgLyAxMSkgKiAyKVxuXG4gICAgY2FzZSBNb2RlLktBTkpJOlxuICAgICAgcmV0dXJuIE1hdGguZmxvb3IodXNhYmxlQml0cyAvIDEzKVxuXG4gICAgY2FzZSBNb2RlLkJZVEU6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKHVzYWJsZUJpdHMgLyA4KVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbWluaW11bSB2ZXJzaW9uIG5lZWRlZCB0byBjb250YWluIHRoZSBhbW91bnQgb2YgZGF0YVxuICpcbiAqIEBwYXJhbSAge1NlZ21lbnR9IGRhdGEgICAgICAgICAgICAgICAgICAgIFNlZ21lbnQgb2YgZGF0YVxuICogQHBhcmFtICB7TnVtYmVyfSBbZXJyb3JDb3JyZWN0aW9uTGV2ZWw9SF0gRXJyb3IgY29ycmVjdGlvbiBsZXZlbFxuICogQHBhcmFtICB7TW9kZX0gbW9kZSAgICAgICAgICAgICAgICAgICAgICAgRGF0YSBtb2RlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgICAgICBRUiBDb2RlIHZlcnNpb25cbiAqL1xuZXhwb3J0cy5nZXRCZXN0VmVyc2lvbkZvckRhdGEgPSBmdW5jdGlvbiBnZXRCZXN0VmVyc2lvbkZvckRhdGEgKGRhdGEsIGVycm9yQ29ycmVjdGlvbkxldmVsKSB7XG4gIHZhciBzZWdcblxuICB2YXIgZWNsID0gRUNMZXZlbC5mcm9tKGVycm9yQ29ycmVjdGlvbkxldmVsLCBFQ0xldmVsLk0pXG5cbiAgaWYgKGlzQXJyYXkoZGF0YSkpIHtcbiAgICBpZiAoZGF0YS5sZW5ndGggPiAxKSB7XG4gICAgICByZXR1cm4gZ2V0QmVzdFZlcnNpb25Gb3JNaXhlZERhdGEoZGF0YSwgZWNsKVxuICAgIH1cblxuICAgIGlmIChkYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIDFcbiAgICB9XG5cbiAgICBzZWcgPSBkYXRhWzBdXG4gIH0gZWxzZSB7XG4gICAgc2VnID0gZGF0YVxuICB9XG5cbiAgcmV0dXJuIGdldEJlc3RWZXJzaW9uRm9yRGF0YUxlbmd0aChzZWcubW9kZSwgc2VnLmdldExlbmd0aCgpLCBlY2wpXG59XG5cbi8qKlxuICogUmV0dXJucyB2ZXJzaW9uIGluZm9ybWF0aW9uIHdpdGggcmVsYXRpdmUgZXJyb3IgY29ycmVjdGlvbiBiaXRzXG4gKlxuICogVGhlIHZlcnNpb24gaW5mb3JtYXRpb24gaXMgaW5jbHVkZWQgaW4gUVIgQ29kZSBzeW1ib2xzIG9mIHZlcnNpb24gNyBvciBsYXJnZXIuXG4gKiBJdCBjb25zaXN0cyBvZiBhbiAxOC1iaXQgc2VxdWVuY2UgY29udGFpbmluZyA2IGRhdGEgYml0cyxcbiAqIHdpdGggMTIgZXJyb3IgY29ycmVjdGlvbiBiaXRzIGNhbGN1bGF0ZWQgdXNpbmcgdGhlICgxOCwgNikgR29sYXkgY29kZS5cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgRW5jb2RlZCB2ZXJzaW9uIGluZm8gYml0c1xuICovXG5leHBvcnRzLmdldEVuY29kZWRCaXRzID0gZnVuY3Rpb24gZ2V0RW5jb2RlZEJpdHMgKHZlcnNpb24pIHtcbiAgaWYgKCFWZXJzaW9uQ2hlY2suaXNWYWxpZCh2ZXJzaW9uKSB8fCB2ZXJzaW9uIDwgNykge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBRUiBDb2RlIHZlcnNpb24nKVxuICB9XG5cbiAgdmFyIGQgPSB2ZXJzaW9uIDw8IDEyXG5cbiAgd2hpbGUgKFV0aWxzLmdldEJDSERpZ2l0KGQpIC0gRzE4X0JDSCA+PSAwKSB7XG4gICAgZCBePSAoRzE4IDw8IChVdGlscy5nZXRCQ0hEaWdpdChkKSAtIEcxOF9CQ0gpKVxuICB9XG5cbiAgcmV0dXJuICh2ZXJzaW9uIDw8IDEyKSB8IGRcbn1cbiIsInZhciBVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuXG5mdW5jdGlvbiBjbGVhckNhbnZhcyAoY3R4LCBjYW52YXMsIHNpemUpIHtcbiAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpXG5cbiAgaWYgKCFjYW52YXMuc3R5bGUpIGNhbnZhcy5zdHlsZSA9IHt9XG4gIGNhbnZhcy5oZWlnaHQgPSBzaXplXG4gIGNhbnZhcy53aWR0aCA9IHNpemVcbiAgY2FudmFzLnN0eWxlLmhlaWdodCA9IHNpemUgKyAncHgnXG4gIGNhbnZhcy5zdHlsZS53aWR0aCA9IHNpemUgKyAncHgnXG59XG5cbmZ1bmN0aW9uIGdldENhbnZhc0VsZW1lbnQgKCkge1xuICB0cnkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0byBzcGVjaWZ5IGEgY2FudmFzIGVsZW1lbnQnKVxuICB9XG59XG5cbmV4cG9ydHMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyIChxckRhdGEsIGNhbnZhcywgb3B0aW9ucykge1xuICB2YXIgb3B0cyA9IG9wdGlvbnNcbiAgdmFyIGNhbnZhc0VsID0gY2FudmFzXG5cbiAgaWYgKHR5cGVvZiBvcHRzID09PSAndW5kZWZpbmVkJyAmJiAoIWNhbnZhcyB8fCAhY2FudmFzLmdldENvbnRleHQpKSB7XG4gICAgb3B0cyA9IGNhbnZhc1xuICAgIGNhbnZhcyA9IHVuZGVmaW5lZFxuICB9XG5cbiAgaWYgKCFjYW52YXMpIHtcbiAgICBjYW52YXNFbCA9IGdldENhbnZhc0VsZW1lbnQoKVxuICB9XG5cbiAgb3B0cyA9IFV0aWxzLmdldE9wdGlvbnMob3B0cylcbiAgdmFyIHNpemUgPSBVdGlscy5nZXRJbWFnZVdpZHRoKHFyRGF0YS5tb2R1bGVzLnNpemUsIG9wdHMpXG5cbiAgdmFyIGN0eCA9IGNhbnZhc0VsLmdldENvbnRleHQoJzJkJylcbiAgdmFyIGltYWdlID0gY3R4LmNyZWF0ZUltYWdlRGF0YShzaXplLCBzaXplKVxuICBVdGlscy5xclRvSW1hZ2VEYXRhKGltYWdlLmRhdGEsIHFyRGF0YSwgb3B0cylcblxuICBjbGVhckNhbnZhcyhjdHgsIGNhbnZhc0VsLCBzaXplKVxuICBjdHgucHV0SW1hZ2VEYXRhKGltYWdlLCAwLCAwKVxuXG4gIHJldHVybiBjYW52YXNFbFxufVxuXG5leHBvcnRzLnJlbmRlclRvRGF0YVVSTCA9IGZ1bmN0aW9uIHJlbmRlclRvRGF0YVVSTCAocXJEYXRhLCBjYW52YXMsIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSBvcHRpb25zXG5cbiAgaWYgKHR5cGVvZiBvcHRzID09PSAndW5kZWZpbmVkJyAmJiAoIWNhbnZhcyB8fCAhY2FudmFzLmdldENvbnRleHQpKSB7XG4gICAgb3B0cyA9IGNhbnZhc1xuICAgIGNhbnZhcyA9IHVuZGVmaW5lZFxuICB9XG5cbiAgaWYgKCFvcHRzKSBvcHRzID0ge31cblxuICB2YXIgY2FudmFzRWwgPSBleHBvcnRzLnJlbmRlcihxckRhdGEsIGNhbnZhcywgb3B0cylcblxuICB2YXIgdHlwZSA9IG9wdHMudHlwZSB8fCAnaW1hZ2UvcG5nJ1xuICB2YXIgcmVuZGVyZXJPcHRzID0gb3B0cy5yZW5kZXJlck9wdHMgfHwge31cblxuICByZXR1cm4gY2FudmFzRWwudG9EYXRhVVJMKHR5cGUsIHJlbmRlcmVyT3B0cy5xdWFsaXR5KVxufVxuIiwidmFyIFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5cbmZ1bmN0aW9uIGdldENvbG9yQXR0cmliIChjb2xvciwgYXR0cmliKSB7XG4gIHZhciBhbHBoYSA9IGNvbG9yLmEgLyAyNTVcbiAgdmFyIHN0ciA9IGF0dHJpYiArICc9XCInICsgY29sb3IuaGV4ICsgJ1wiJ1xuXG4gIHJldHVybiBhbHBoYSA8IDFcbiAgICA/IHN0ciArICcgJyArIGF0dHJpYiArICctb3BhY2l0eT1cIicgKyBhbHBoYS50b0ZpeGVkKDIpLnNsaWNlKDEpICsgJ1wiJ1xuICAgIDogc3RyXG59XG5cbmZ1bmN0aW9uIHN2Z0NtZCAoY21kLCB4LCB5KSB7XG4gIHZhciBzdHIgPSBjbWQgKyB4XG4gIGlmICh0eXBlb2YgeSAhPT0gJ3VuZGVmaW5lZCcpIHN0ciArPSAnICcgKyB5XG5cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBxclRvUGF0aCAoZGF0YSwgc2l6ZSwgbWFyZ2luKSB7XG4gIHZhciBwYXRoID0gJydcbiAgdmFyIG1vdmVCeSA9IDBcbiAgdmFyIG5ld1JvdyA9IGZhbHNlXG4gIHZhciBsaW5lTGVuZ3RoID0gMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjb2wgPSBNYXRoLmZsb29yKGkgJSBzaXplKVxuICAgIHZhciByb3cgPSBNYXRoLmZsb29yKGkgLyBzaXplKVxuXG4gICAgaWYgKCFjb2wgJiYgIW5ld1JvdykgbmV3Um93ID0gdHJ1ZVxuXG4gICAgaWYgKGRhdGFbaV0pIHtcbiAgICAgIGxpbmVMZW5ndGgrK1xuXG4gICAgICBpZiAoIShpID4gMCAmJiBjb2wgPiAwICYmIGRhdGFbaSAtIDFdKSkge1xuICAgICAgICBwYXRoICs9IG5ld1Jvd1xuICAgICAgICAgID8gc3ZnQ21kKCdNJywgY29sICsgbWFyZ2luLCAwLjUgKyByb3cgKyBtYXJnaW4pXG4gICAgICAgICAgOiBzdmdDbWQoJ20nLCBtb3ZlQnksIDApXG5cbiAgICAgICAgbW92ZUJ5ID0gMFxuICAgICAgICBuZXdSb3cgPSBmYWxzZVxuICAgICAgfVxuXG4gICAgICBpZiAoIShjb2wgKyAxIDwgc2l6ZSAmJiBkYXRhW2kgKyAxXSkpIHtcbiAgICAgICAgcGF0aCArPSBzdmdDbWQoJ2gnLCBsaW5lTGVuZ3RoKVxuICAgICAgICBsaW5lTGVuZ3RoID0gMFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtb3ZlQnkrK1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXRoXG59XG5cbmV4cG9ydHMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyIChxckRhdGEsIG9wdGlvbnMsIGNiKSB7XG4gIHZhciBvcHRzID0gVXRpbHMuZ2V0T3B0aW9ucyhvcHRpb25zKVxuICB2YXIgc2l6ZSA9IHFyRGF0YS5tb2R1bGVzLnNpemVcbiAgdmFyIGRhdGEgPSBxckRhdGEubW9kdWxlcy5kYXRhXG4gIHZhciBxcmNvZGVzaXplID0gc2l6ZSArIG9wdHMubWFyZ2luICogMlxuXG4gIHZhciBiZyA9ICFvcHRzLmNvbG9yLmxpZ2h0LmFcbiAgICA/ICcnXG4gICAgOiAnPHBhdGggJyArIGdldENvbG9yQXR0cmliKG9wdHMuY29sb3IubGlnaHQsICdmaWxsJykgK1xuICAgICAgJyBkPVwiTTAgMGgnICsgcXJjb2Rlc2l6ZSArICd2JyArIHFyY29kZXNpemUgKyAnSDB6XCIvPidcblxuICB2YXIgcGF0aCA9XG4gICAgJzxwYXRoICcgKyBnZXRDb2xvckF0dHJpYihvcHRzLmNvbG9yLmRhcmssICdzdHJva2UnKSArXG4gICAgJyBkPVwiJyArIHFyVG9QYXRoKGRhdGEsIHNpemUsIG9wdHMubWFyZ2luKSArICdcIi8+J1xuXG4gIHZhciB2aWV3Qm94ID0gJ3ZpZXdCb3g9XCInICsgJzAgMCAnICsgcXJjb2Rlc2l6ZSArICcgJyArIHFyY29kZXNpemUgKyAnXCInXG5cbiAgdmFyIHdpZHRoID0gIW9wdHMud2lkdGggPyAnJyA6ICd3aWR0aD1cIicgKyBvcHRzLndpZHRoICsgJ1wiIGhlaWdodD1cIicgKyBvcHRzLndpZHRoICsgJ1wiICdcblxuICB2YXIgc3ZnVGFnID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiICcgKyB3aWR0aCArIHZpZXdCb3ggKyAnIHNoYXBlLXJlbmRlcmluZz1cImNyaXNwRWRnZXNcIj4nICsgYmcgKyBwYXRoICsgJzwvc3ZnPlxcbidcblxuICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IobnVsbCwgc3ZnVGFnKVxuICB9XG5cbiAgcmV0dXJuIHN2Z1RhZ1xufVxuIiwiZnVuY3Rpb24gaGV4MnJnYmEgKGhleCkge1xuICBpZiAodHlwZW9mIGhleCA9PT0gJ251bWJlcicpIHtcbiAgICBoZXggPSBoZXgudG9TdHJpbmcoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBoZXggIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDb2xvciBzaG91bGQgYmUgZGVmaW5lZCBhcyBoZXggc3RyaW5nJylcbiAgfVxuXG4gIHZhciBoZXhDb2RlID0gaGV4LnNsaWNlKCkucmVwbGFjZSgnIycsICcnKS5zcGxpdCgnJylcbiAgaWYgKGhleENvZGUubGVuZ3RoIDwgMyB8fCBoZXhDb2RlLmxlbmd0aCA9PT0gNSB8fCBoZXhDb2RlLmxlbmd0aCA+IDgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaGV4IGNvbG9yOiAnICsgaGV4KVxuICB9XG5cbiAgLy8gQ29udmVydCBmcm9tIHNob3J0IHRvIGxvbmcgZm9ybSAoZmZmIC0+IGZmZmZmZilcbiAgaWYgKGhleENvZGUubGVuZ3RoID09PSAzIHx8IGhleENvZGUubGVuZ3RoID09PSA0KSB7XG4gICAgaGV4Q29kZSA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sIGhleENvZGUubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gW2MsIGNdXG4gICAgfSkpXG4gIH1cblxuICAvLyBBZGQgZGVmYXVsdCBhbHBoYSB2YWx1ZVxuICBpZiAoaGV4Q29kZS5sZW5ndGggPT09IDYpIGhleENvZGUucHVzaCgnRicsICdGJylcblxuICB2YXIgaGV4VmFsdWUgPSBwYXJzZUludChoZXhDb2RlLmpvaW4oJycpLCAxNilcblxuICByZXR1cm4ge1xuICAgIHI6IChoZXhWYWx1ZSA+PiAyNCkgJiAyNTUsXG4gICAgZzogKGhleFZhbHVlID4+IDE2KSAmIDI1NSxcbiAgICBiOiAoaGV4VmFsdWUgPj4gOCkgJiAyNTUsXG4gICAgYTogaGV4VmFsdWUgJiAyNTUsXG4gICAgaGV4OiAnIycgKyBoZXhDb2RlLnNsaWNlKDAsIDYpLmpvaW4oJycpXG4gIH1cbn1cblxuZXhwb3J0cy5nZXRPcHRpb25zID0gZnVuY3Rpb24gZ2V0T3B0aW9ucyAob3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fVxuICBpZiAoIW9wdGlvbnMuY29sb3IpIG9wdGlvbnMuY29sb3IgPSB7fVxuXG4gIHZhciBtYXJnaW4gPSB0eXBlb2Ygb3B0aW9ucy5tYXJnaW4gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgb3B0aW9ucy5tYXJnaW4gPT09IG51bGwgfHxcbiAgICBvcHRpb25zLm1hcmdpbiA8IDAgPyA0IDogb3B0aW9ucy5tYXJnaW5cblxuICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoICYmIG9wdGlvbnMud2lkdGggPj0gMjEgPyBvcHRpb25zLndpZHRoIDogdW5kZWZpbmVkXG4gIHZhciBzY2FsZSA9IG9wdGlvbnMuc2NhbGUgfHwgNFxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIHNjYWxlOiB3aWR0aCA/IDQgOiBzY2FsZSxcbiAgICBtYXJnaW46IG1hcmdpbixcbiAgICBjb2xvcjoge1xuICAgICAgZGFyazogaGV4MnJnYmEob3B0aW9ucy5jb2xvci5kYXJrIHx8ICcjMDAwMDAwZmYnKSxcbiAgICAgIGxpZ2h0OiBoZXgycmdiYShvcHRpb25zLmNvbG9yLmxpZ2h0IHx8ICcjZmZmZmZmZmYnKVxuICAgIH0sXG4gICAgdHlwZTogb3B0aW9ucy50eXBlLFxuICAgIHJlbmRlcmVyT3B0czogb3B0aW9ucy5yZW5kZXJlck9wdHMgfHwge31cbiAgfVxufVxuXG5leHBvcnRzLmdldFNjYWxlID0gZnVuY3Rpb24gZ2V0U2NhbGUgKHFyU2l6ZSwgb3B0cykge1xuICByZXR1cm4gb3B0cy53aWR0aCAmJiBvcHRzLndpZHRoID49IHFyU2l6ZSArIG9wdHMubWFyZ2luICogMlxuICAgID8gb3B0cy53aWR0aCAvIChxclNpemUgKyBvcHRzLm1hcmdpbiAqIDIpXG4gICAgOiBvcHRzLnNjYWxlXG59XG5cbmV4cG9ydHMuZ2V0SW1hZ2VXaWR0aCA9IGZ1bmN0aW9uIGdldEltYWdlV2lkdGggKHFyU2l6ZSwgb3B0cykge1xuICB2YXIgc2NhbGUgPSBleHBvcnRzLmdldFNjYWxlKHFyU2l6ZSwgb3B0cylcbiAgcmV0dXJuIE1hdGguZmxvb3IoKHFyU2l6ZSArIG9wdHMubWFyZ2luICogMikgKiBzY2FsZSlcbn1cblxuZXhwb3J0cy5xclRvSW1hZ2VEYXRhID0gZnVuY3Rpb24gcXJUb0ltYWdlRGF0YSAoaW1nRGF0YSwgcXIsIG9wdHMpIHtcbiAgdmFyIHNpemUgPSBxci5tb2R1bGVzLnNpemVcbiAgdmFyIGRhdGEgPSBxci5tb2R1bGVzLmRhdGFcbiAgdmFyIHNjYWxlID0gZXhwb3J0cy5nZXRTY2FsZShzaXplLCBvcHRzKVxuICB2YXIgc3ltYm9sU2l6ZSA9IE1hdGguZmxvb3IoKHNpemUgKyBvcHRzLm1hcmdpbiAqIDIpICogc2NhbGUpXG4gIHZhciBzY2FsZWRNYXJnaW4gPSBvcHRzLm1hcmdpbiAqIHNjYWxlXG4gIHZhciBwYWxldHRlID0gW29wdHMuY29sb3IubGlnaHQsIG9wdHMuY29sb3IuZGFya11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbFNpemU7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgc3ltYm9sU2l6ZTsgaisrKSB7XG4gICAgICB2YXIgcG9zRHN0ID0gKGkgKiBzeW1ib2xTaXplICsgaikgKiA0XG4gICAgICB2YXIgcHhDb2xvciA9IG9wdHMuY29sb3IubGlnaHRcblxuICAgICAgaWYgKGkgPj0gc2NhbGVkTWFyZ2luICYmIGogPj0gc2NhbGVkTWFyZ2luICYmXG4gICAgICAgIGkgPCBzeW1ib2xTaXplIC0gc2NhbGVkTWFyZ2luICYmIGogPCBzeW1ib2xTaXplIC0gc2NhbGVkTWFyZ2luKSB7XG4gICAgICAgIHZhciBpU3JjID0gTWF0aC5mbG9vcigoaSAtIHNjYWxlZE1hcmdpbikgLyBzY2FsZSlcbiAgICAgICAgdmFyIGpTcmMgPSBNYXRoLmZsb29yKChqIC0gc2NhbGVkTWFyZ2luKSAvIHNjYWxlKVxuICAgICAgICBweENvbG9yID0gcGFsZXR0ZVtkYXRhW2lTcmMgKiBzaXplICsgalNyY10gPyAxIDogMF1cbiAgICAgIH1cblxuICAgICAgaW1nRGF0YVtwb3NEc3QrK10gPSBweENvbG9yLnJcbiAgICAgIGltZ0RhdGFbcG9zRHN0KytdID0gcHhDb2xvci5nXG4gICAgICBpbWdEYXRhW3Bvc0RzdCsrXSA9IHB4Q29sb3IuYlxuICAgICAgaW1nRGF0YVtwb3NEc3RdID0gcHhDb2xvci5hXG4gICAgfVxuICB9XG59XG4iLCIvKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIGEgc3Vic2V0IG9mIG5vZGUuanMgQnVmZmVyIG1ldGhvZHMgZm9yIHRoZSBicm93c2VyLlxuICogQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJcbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICAvLyBDYW4gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGJlIGF1Z21lbnRlZD9cbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0ge19fcHJvdG9fXzogVWludDhBcnJheS5wcm90b3R5cGUsIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfX1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MlxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbnZhciBLX01BWF9MRU5HVEggPSBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuICAgID8gMHg3ZmZmZmZmZlxuICAgIDogMHgzZmZmZmZmZlxuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBvZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXG4gIH1cblxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuXG4gIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogZmFsc2VcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBLX01BWF9MRU5HVEhgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIEtfTUFYX0xFTkdUSC50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKHRoYXQsIGxlbmd0aCkge1xuICB2YXIgYnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICBidWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICBidWYgPSB0aGF0XG4gICAgaWYgKGJ1ZiA9PT0gbnVsbCkge1xuICAgICAgYnVmID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG4gICAgfVxuICAgIGJ1Zi5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgdmFyIGJ1ZiA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcblxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgIGJ1ZltpXSA9IDBcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZykge1xuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcpIHwgMFxuICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gYnVmLndyaXRlKHN0cmluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIGJ1ZiA9IGJ1Zi5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdmFyIGJ1ZiA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICBidWZbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIHZhciBidWZcbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIGJ1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGJ1ZiA9IGZyb21BcnJheUxpa2UodGhhdCwgYnVmKVxuICB9XG5cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdmFyIGJ1ZiA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pXG5cbiAgICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGJ1ZlxuICAgIH1cblxuICAgIG9iai5jb3B5KGJ1ZiwgMCwgMCwgbGVuKVxuICAgIHJldHVybiBidWZcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgQXJyYXkuaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBvZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIG9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF0pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiBuZXcgQnVmZmVyKHZhbClcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKG51bGwsIDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBhbGxvY1Vuc2FmZShudWxsLCBsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxubW9kdWxlLmV4cG9ydHMuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICB2YXIgYnVmZmVyID0gbmV3IEJ1ZmZlcihzaXplKVxuICBidWZmZXIuZmlsbCgwKVxuICByZXR1cm4gYnVmZmVyXG59XG5cbm1vZHVsZS5leHBvcnRzLmZyb20gPSBmdW5jdGlvbiAoZGF0YSkge1xuICByZXR1cm4gbmV3IEJ1ZmZlcihkYXRhKVxufVxuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGN1c3RvbUluc3BlY3RTeW1ib2wgPVxuICAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sWydmb3InXSA9PT0gJ2Z1bmN0aW9uJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICA/IFN5bWJvbFsnZm9yJ10oJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICA6IG51bGxcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG52YXIgS19NQVhfTEVOR1RIID0gMHg3ZmZmZmZmZlxuZXhwb3J0cy5rTWF4TGVuZ3RoID0gS19NQVhfTEVOR1RIXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFByaW50IHdhcm5pbmcgYW5kIHJlY29tbWVuZCB1c2luZyBgYnVmZmVyYCB2NC54IHdoaWNoIGhhcyBhbiBPYmplY3RcbiAqICAgICAgICAgICAgICAgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIFdlIHJlcG9ydCB0aGF0IHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGlmIHRoZSBhcmUgbm90IHN1YmNsYXNzYWJsZVxuICogdXNpbmcgX19wcm90b19fLiBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YFxuICogKFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4KS4gSUUgMTAgbGFja3Mgc3VwcG9ydFxuICogZm9yIF9fcHJvdG9fXyBhbmQgaGFzIGEgYnVnZ3kgdHlwZWQgYXJyYXkgaW1wbGVtZW50YXRpb24uXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gdHlwZWRBcnJheVN1cHBvcnQoKVxuXG5pZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gIGNvbnNvbGUuZXJyb3IoXG4gICAgJ1RoaXMgYnJvd3NlciBsYWNrcyB0eXBlZCBhcnJheSAoVWludDhBcnJheSkgc3VwcG9ydCB3aGljaCBpcyByZXF1aXJlZCBieSAnICtcbiAgICAnYGJ1ZmZlcmAgdjUueC4gVXNlIGBidWZmZXJgIHY0LnggaWYgeW91IHJlcXVpcmUgb2xkIGJyb3dzZXIgc3VwcG9ydC4nXG4gIClcbn1cblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICAvLyBDYW4gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWQ/XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgdmFyIHByb3RvID0geyBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH0gfVxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihwcm90bywgVWludDhBcnJheS5wcm90b3R5cGUpXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGFyciwgcHJvdG8pXG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDJcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIucHJvdG90eXBlLCAncGFyZW50Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0aGlzKSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLmJ1ZmZlclxuICB9XG59KVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLnByb3RvdHlwZSwgJ29mZnNldCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGhpcykpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5ieXRlT2Zmc2V0XG4gIH1cbn0pXG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAobGVuZ3RoKSB7XG4gIGlmIChsZW5ndGggPiBLX01BWF9MRU5HVEgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJyArIGxlbmd0aCArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICB9XG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIHZhciBidWYgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihidWYsIEJ1ZmZlci5wcm90b3R5cGUpXG4gIHJldHVybiBidWZcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnVGhlIFwic3RyaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIHN0cmluZy4gUmVjZWl2ZWQgdHlwZSBudW1iZXInXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZShhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20oYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG5mdW5jdGlvbiBmcm9tICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlWaWV3KHZhbHVlKVxuICB9XG5cbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksICcgK1xuICAgICAgJ29yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHZhbHVlKVxuICAgIClcbiAgfVxuXG4gIGlmIChpc0luc3RhbmNlKHZhbHVlLCBBcnJheUJ1ZmZlcikgfHxcbiAgICAgICh2YWx1ZSAmJiBpc0luc3RhbmNlKHZhbHVlLmJ1ZmZlciwgQXJyYXlCdWZmZXIpKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAoaXNJbnN0YW5jZSh2YWx1ZSwgU2hhcmVkQXJyYXlCdWZmZXIpIHx8XG4gICAgICAodmFsdWUgJiYgaXNJbnN0YW5jZSh2YWx1ZS5idWZmZXIsIFNoYXJlZEFycmF5QnVmZmVyKSkpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgb2YgdHlwZSBudW1iZXIuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJ1xuICAgIClcbiAgfVxuXG4gIHZhciB2YWx1ZU9mID0gdmFsdWUudmFsdWVPZiAmJiB2YWx1ZS52YWx1ZU9mKClcbiAgaWYgKHZhbHVlT2YgIT0gbnVsbCAmJiB2YWx1ZU9mICE9PSB2YWx1ZSkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbSh2YWx1ZU9mLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICB2YXIgYiA9IGZyb21PYmplY3QodmFsdWUpXG4gIGlmIChiKSByZXR1cm4gYlxuXG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9QcmltaXRpdmUgIT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIHZhbHVlW1N5bWJvbC50b1ByaW1pdGl2ZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oXG4gICAgICB2YWx1ZVtTeW1ib2wudG9QcmltaXRpdmVdKCdzdHJpbmcnKSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoXG4gICAgKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgJyArXG4gICAgJ29yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHZhbHVlKVxuICApXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20odmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gTm90ZTogQ2hhbmdlIHByb3RvdHlwZSAqYWZ0ZXIqIEJ1ZmZlci5mcm9tIGlzIGRlZmluZWQgdG8gd29ya2Fyb3VuZCBDaHJvbWUgYnVnOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC8xNDhcbk9iamVjdC5zZXRQcm90b3R5cGVPZihCdWZmZXIucHJvdG90eXBlLCBVaW50OEFycmF5LnByb3RvdHlwZSlcbk9iamVjdC5zZXRQcm90b3R5cGVPZihCdWZmZXIsIFVpbnQ4QXJyYXkpXG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyBzaXplICsgJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcInNpemVcIicpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2Moc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlIChzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gYnVmLndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICBidWYgPSBidWYuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlIChhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHZhciBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgYnVmW2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheVZpZXcgKGFycmF5Vmlldykge1xuICBpZiAoaXNJbnN0YW5jZShhcnJheVZpZXcsIFVpbnQ4QXJyYXkpKSB7XG4gICAgdmFyIGNvcHkgPSBuZXcgVWludDhBcnJheShhcnJheVZpZXcpXG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcihjb3B5LmJ1ZmZlciwgY29weS5ieXRlT2Zmc2V0LCBjb3B5LmJ5dGVMZW5ndGgpXG4gIH1cbiAgcmV0dXJuIGZyb21BcnJheUxpa2UoYXJyYXlWaWV3KVxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wib2Zmc2V0XCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJsZW5ndGhcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgdmFyIGJ1ZlxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGJ1ZiwgQnVmZmVyLnByb3RvdHlwZSlcblxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKGxlbilcblxuICAgIGlmIChidWYubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gYnVmXG4gICAgfVxuXG4gICAgb2JqLmNvcHkoYnVmLCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIGJ1ZlxuICB9XG5cbiAgaWYgKG9iai5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgbnVtYmVySXNOYU4ob2JqLmxlbmd0aCkpIHtcbiAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIoMClcbiAgICB9XG4gICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqKVxuICB9XG5cbiAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBBcnJheS5pc0FycmF5KG9iai5kYXRhKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iai5kYXRhKVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBLX01BWF9MRU5HVEhgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIEtfTUFYX0xFTkdUSC50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuIGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlciA9PT0gdHJ1ZSAmJlxuICAgIGIgIT09IEJ1ZmZlci5wcm90b3R5cGUgLy8gc28gQnVmZmVyLmlzQnVmZmVyKEJ1ZmZlci5wcm90b3R5cGUpIHdpbGwgYmUgZmFsc2Vcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmIChpc0luc3RhbmNlKGEsIFVpbnQ4QXJyYXkpKSBhID0gQnVmZmVyLmZyb20oYSwgYS5vZmZzZXQsIGEuYnl0ZUxlbmd0aClcbiAgaWYgKGlzSW5zdGFuY2UoYiwgVWludDhBcnJheSkpIGIgPSBCdWZmZXIuZnJvbShiLCBiLm9mZnNldCwgYi5ieXRlTGVuZ3RoKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJidWYxXCIsIFwiYnVmMlwiIGFyZ3VtZW50cyBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5J1xuICAgIClcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIUFycmF5LmlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmIChpc0luc3RhbmNlKGJ1ZiwgVWludDhBcnJheSkpIHtcbiAgICAgIGlmIChwb3MgKyBidWYubGVuZ3RoID4gYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICBCdWZmZXIuZnJvbShidWYpLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgICAgICBidWZmZXIsXG4gICAgICAgICAgYnVmLFxuICAgICAgICAgIHBvc1xuICAgICAgICApXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIH1cbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBpc0luc3RhbmNlKHN0cmluZywgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBvciBBcnJheUJ1ZmZlci4gJyArXG4gICAgICAnUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIHN0cmluZ1xuICAgIClcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBtdXN0TWF0Y2ggPSAoYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdID09PSB0cnVlKVxuICBpZiAoIW11c3RNYXRjaCAmJiBsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHtcbiAgICAgICAgICByZXR1cm4gbXVzdE1hdGNoID8gLTEgOiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICB9XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcmNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhpcyBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIChhbmQgdGhlIGBpcy1idWZmZXJgIG5wbSBwYWNrYWdlKVxuLy8gdG8gZGV0ZWN0IGEgQnVmZmVyIGluc3RhbmNlLiBJdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgYGluc3RhbmNlb2YgQnVmZmVyYFxuLy8gcmVsaWFibHkgaW4gYSBicm93c2VyaWZ5IGNvbnRleHQgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBtdWx0aXBsZSBkaWZmZXJlbnRcbi8vIGNvcGllcyBvZiB0aGUgJ2J1ZmZlcicgcGFja2FnZSBpbiB1c2UuIFRoaXMgbWV0aG9kIHdvcmtzIGV2ZW4gZm9yIEJ1ZmZlclxuLy8gaW5zdGFuY2VzIHRoYXQgd2VyZSBjcmVhdGVkIGZyb20gYW5vdGhlciBjb3B5IG9mIHRoZSBgYnVmZmVyYCBwYWNrYWdlLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMTU0XG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nID0gQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZ1xuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLnJlcGxhY2UoLyguezJ9KS9nLCAnJDEgJykudHJpbSgpXG4gIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cbmlmIChjdXN0b21JbnNwZWN0U3ltYm9sKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGVbY3VzdG9tSW5zcGVjdFN5bWJvbF0gPSBCdWZmZXIucHJvdG90eXBlLmluc3BlY3Rcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKGlzSW5zdGFuY2UodGFyZ2V0LCBVaW50OEFycmF5KSkge1xuICAgIHRhcmdldCA9IEJ1ZmZlci5mcm9tKHRhcmdldCwgdGFyZ2V0Lm9mZnNldCwgdGFyZ2V0LmJ5dGVMZW5ndGgpXG4gIH1cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwidGFyZ2V0XCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheS4gJyArXG4gICAgICAnUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB0YXJnZXQpXG4gICAgKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAobnVtYmVySXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmICh0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbdmFsXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKG51bWJlcklzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPj4+IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKVxuICAgICAgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKVxuICAgICAgICAgID8gM1xuICAgICAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpXG4gICAgICAgICAgICAgID8gMlxuICAgICAgICAgICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gaGV4U2xpY2VMb29rdXBUYWJsZVtidWZbaV1dXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIC8vIElmIGJ5dGVzLmxlbmd0aCBpcyBvZGQsIHRoZSBsYXN0IDggYml0cyBtdXN0IGJlIGlnbm9yZWQgKHNhbWUgYXMgbm9kZS5qcylcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGggLSAxOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIChieXRlc1tpICsgMV0gKiAyNTYpKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihuZXdCdWYsIEJ1ZmZlci5wcm90b3R5cGUpXG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludExFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50QkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDggPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDE2TEUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50MTZCRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQzMkxFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDMyQkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludExFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludEJFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDggPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MTZMRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDE2QkUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQzMkxFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MzJCRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsICg4ICogYnl0ZUxlbmd0aCkgLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgc2hvdWxkIGJlIGEgQnVmZmVyJylcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBVc2UgYnVpbHQtaW4gd2hlbiBhdmFpbGFibGUsIG1pc3NpbmcgZnJvbSBJRTExXG4gICAgdGhpcy5jb3B5V2l0aGluKHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmICgoZW5jb2RpbmcgPT09ICd1dGY4JyAmJiBjb2RlIDwgMTI4KSB8fFxuICAgICAgICAgIGVuY29kaW5nID09PSAnbGF0aW4xJykge1xuICAgICAgICAvLyBGYXN0IHBhdGg6IElmIGB2YWxgIGZpdHMgaW50byBhIHNpbmdsZSBieXRlLCB1c2UgdGhhdCBudW1lcmljIHZhbHVlLlxuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgdmFsID0gTnVtYmVyKHZhbClcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgdmFsdWUgXCInICsgdmFsICtcbiAgICAgICAgJ1wiIGlzIGludmFsaWQgZm9yIGFyZ3VtZW50IFwidmFsdWVcIicpXG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teKy8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgdGFrZXMgZXF1YWwgc2lnbnMgYXMgZW5kIG9mIHRoZSBCYXNlNjQgZW5jb2RpbmdcbiAgc3RyID0gc3RyLnNwbGl0KCc9JylbMF1cbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0ci50cmltKCkucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuLy8gQXJyYXlCdWZmZXIgb3IgVWludDhBcnJheSBvYmplY3RzIGZyb20gb3RoZXIgY29udGV4dHMgKGkuZS4gaWZyYW1lcykgZG8gbm90IHBhc3Ncbi8vIHRoZSBgaW5zdGFuY2VvZmAgY2hlY2sgYnV0IHRoZXkgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgb2YgdGhhdCB0eXBlLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMTY2XG5mdW5jdGlvbiBpc0luc3RhbmNlIChvYmosIHR5cGUpIHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIHR5cGUgfHxcbiAgICAob2JqICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yLm5hbWUgIT0gbnVsbCAmJlxuICAgICAgb2JqLmNvbnN0cnVjdG9yLm5hbWUgPT09IHR5cGUubmFtZSlcbn1cbmZ1bmN0aW9uIG51bWJlcklzTmFOIChvYmopIHtcbiAgLy8gRm9yIElFMTEgc3VwcG9ydFxuICByZXR1cm4gb2JqICE9PSBvYmogLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cblxuLy8gQ3JlYXRlIGxvb2t1cCB0YWJsZSBmb3IgYHRvU3RyaW5nKCdoZXgnKWBcbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzIxOVxudmFyIGhleFNsaWNlTG9va3VwVGFibGUgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgYWxwaGFiZXQgPSAnMDEyMzQ1Njc4OWFiY2RlZidcbiAgdmFyIHRhYmxlID0gbmV3IEFycmF5KDI1NilcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgdmFyIGkxNiA9IGkgKiAxNlxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgMTY7ICsraikge1xuICAgICAgdGFibGVbaTE2ICsgal0gPSBhbHBoYWJldFtpXSArIGFscGhhYmV0W2pdXG4gICAgfVxuICB9XG4gIHJldHVybiB0YWJsZVxufSkoKVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5jb25zdCBzdHJpY3RVcmlFbmNvZGUgPSByZXF1aXJlKCdzdHJpY3QtdXJpLWVuY29kZScpO1xuY29uc3QgZGVjb2RlQ29tcG9uZW50ID0gcmVxdWlyZSgnZGVjb2RlLXVyaS1jb21wb25lbnQnKTtcbmNvbnN0IHNwbGl0T25GaXJzdCA9IHJlcXVpcmUoJ3NwbGl0LW9uLWZpcnN0Jyk7XG5cbmNvbnN0IGlzTnVsbE9yVW5kZWZpbmVkID0gdmFsdWUgPT4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZDtcblxuZnVuY3Rpb24gZW5jb2RlckZvckFycmF5Rm9ybWF0KG9wdGlvbnMpIHtcblx0c3dpdGNoIChvcHRpb25zLmFycmF5Rm9ybWF0KSB7XG5cdFx0Y2FzZSAnaW5kZXgnOlxuXHRcdFx0cmV0dXJuIGtleSA9PiAocmVzdWx0LCB2YWx1ZSkgPT4ge1xuXHRcdFx0XHRjb25zdCBpbmRleCA9IHJlc3VsdC5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHZhbHVlID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0XHQob3B0aW9ucy5za2lwTnVsbCAmJiB2YWx1ZSA9PT0gbnVsbCkgfHxcblx0XHRcdFx0XHQob3B0aW9ucy5za2lwRW1wdHlTdHJpbmcgJiYgdmFsdWUgPT09ICcnKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHZhbHVlID09PSBudWxsKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFsuLi5yZXN1bHQsIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgJ1snLCBpbmRleCwgJ10nXS5qb2luKCcnKV07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW1xuXHRcdFx0XHRcdC4uLnJlc3VsdCxcblx0XHRcdFx0XHRbZW5jb2RlKGtleSwgb3B0aW9ucyksICdbJywgZW5jb2RlKGluZGV4LCBvcHRpb25zKSwgJ109JywgZW5jb2RlKHZhbHVlLCBvcHRpb25zKV0uam9pbignJylcblx0XHRcdFx0XTtcblx0XHRcdH07XG5cblx0XHRjYXNlICdicmFja2V0Jzpcblx0XHRcdHJldHVybiBrZXkgPT4gKHJlc3VsdCwgdmFsdWUpID0+IHtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHZhbHVlID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0XHQob3B0aW9ucy5za2lwTnVsbCAmJiB2YWx1ZSA9PT0gbnVsbCkgfHxcblx0XHRcdFx0XHQob3B0aW9ucy5za2lwRW1wdHlTdHJpbmcgJiYgdmFsdWUgPT09ICcnKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHZhbHVlID09PSBudWxsKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFsuLi5yZXN1bHQsIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgJ1tdJ10uam9pbignJyldO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFsuLi5yZXN1bHQsIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgJ1tdPScsIGVuY29kZSh2YWx1ZSwgb3B0aW9ucyldLmpvaW4oJycpXTtcblx0XHRcdH07XG5cblx0XHRjYXNlICdjb21tYSc6XG5cdFx0Y2FzZSAnc2VwYXJhdG9yJzpcblx0XHRcdHJldHVybiBrZXkgPT4gKHJlc3VsdCwgdmFsdWUpID0+IHtcblx0XHRcdFx0aWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChyZXN1bHQubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFtbZW5jb2RlKGtleSwgb3B0aW9ucyksICc9JywgZW5jb2RlKHZhbHVlLCBvcHRpb25zKV0uam9pbignJyldO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtbcmVzdWx0LCBlbmNvZGUodmFsdWUsIG9wdGlvbnMpXS5qb2luKG9wdGlvbnMuYXJyYXlGb3JtYXRTZXBhcmF0b3IpXTtcblx0XHRcdH07XG5cblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIGtleSA9PiAocmVzdWx0LCB2YWx1ZSkgPT4ge1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0dmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHRcdChvcHRpb25zLnNraXBOdWxsICYmIHZhbHVlID09PSBudWxsKSB8fFxuXHRcdFx0XHRcdChvcHRpb25zLnNraXBFbXB0eVN0cmluZyAmJiB2YWx1ZSA9PT0gJycpXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAodmFsdWUgPT09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm4gWy4uLnJlc3VsdCwgZW5jb2RlKGtleSwgb3B0aW9ucyldO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFsuLi5yZXN1bHQsIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgJz0nLCBlbmNvZGUodmFsdWUsIG9wdGlvbnMpXS5qb2luKCcnKV07XG5cdFx0XHR9O1xuXHR9XG59XG5cbmZ1bmN0aW9uIHBhcnNlckZvckFycmF5Rm9ybWF0KG9wdGlvbnMpIHtcblx0bGV0IHJlc3VsdDtcblxuXHRzd2l0Y2ggKG9wdGlvbnMuYXJyYXlGb3JtYXQpIHtcblx0XHRjYXNlICdpbmRleCc6XG5cdFx0XHRyZXR1cm4gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSA9PiB7XG5cdFx0XHRcdHJlc3VsdCA9IC9cXFsoXFxkKilcXF0kLy5leGVjKGtleSk7XG5cblx0XHRcdFx0a2V5ID0ga2V5LnJlcGxhY2UoL1xcW1xcZCpcXF0kLywgJycpO1xuXG5cdFx0XHRcdGlmICghcmVzdWx0KSB7XG5cdFx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IHZhbHVlO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChhY2N1bXVsYXRvcltrZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0ge307XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhY2N1bXVsYXRvcltrZXldW3Jlc3VsdFsxXV0gPSB2YWx1ZTtcblx0XHRcdH07XG5cblx0XHRjYXNlICdicmFja2V0Jzpcblx0XHRcdHJldHVybiAoa2V5LCB2YWx1ZSwgYWNjdW11bGF0b3IpID0+IHtcblx0XHRcdFx0cmVzdWx0ID0gLyhcXFtcXF0pJC8uZXhlYyhrZXkpO1xuXHRcdFx0XHRrZXkgPSBrZXkucmVwbGFjZSgvXFxbXFxdJC8sICcnKTtcblxuXHRcdFx0XHRpZiAoIXJlc3VsdCkge1xuXHRcdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSB2YWx1ZTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoYWNjdW11bGF0b3Jba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFt2YWx1ZV07XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFtdLmNvbmNhdChhY2N1bXVsYXRvcltrZXldLCB2YWx1ZSk7XG5cdFx0XHR9O1xuXG5cdFx0Y2FzZSAnY29tbWEnOlxuXHRcdGNhc2UgJ3NlcGFyYXRvcic6XG5cdFx0XHRyZXR1cm4gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGlzQXJyYXkgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLnNwbGl0KCcnKS5pbmRleE9mKG9wdGlvbnMuYXJyYXlGb3JtYXRTZXBhcmF0b3IpID4gLTE7XG5cdFx0XHRcdGNvbnN0IG5ld1ZhbHVlID0gaXNBcnJheSA/IHZhbHVlLnNwbGl0KG9wdGlvbnMuYXJyYXlGb3JtYXRTZXBhcmF0b3IpLm1hcChpdGVtID0+IGRlY29kZShpdGVtLCBvcHRpb25zKSkgOiB2YWx1ZSA9PT0gbnVsbCA/IHZhbHVlIDogZGVjb2RlKHZhbHVlLCBvcHRpb25zKTtcblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IG5ld1ZhbHVlO1xuXHRcdFx0fTtcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSA9PiB7XG5cdFx0XHRcdGlmIChhY2N1bXVsYXRvcltrZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0gdmFsdWU7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFtdLmNvbmNhdChhY2N1bXVsYXRvcltrZXldLCB2YWx1ZSk7XG5cdFx0XHR9O1xuXHR9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQXJyYXlGb3JtYXRTZXBhcmF0b3IodmFsdWUpIHtcblx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgfHwgdmFsdWUubGVuZ3RoICE9PSAxKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignYXJyYXlGb3JtYXRTZXBhcmF0b3IgbXVzdCBiZSBzaW5nbGUgY2hhcmFjdGVyIHN0cmluZycpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWx1ZSwgb3B0aW9ucykge1xuXHRpZiAob3B0aW9ucy5lbmNvZGUpIHtcblx0XHRyZXR1cm4gb3B0aW9ucy5zdHJpY3QgPyBzdHJpY3RVcmlFbmNvZGUodmFsdWUpIDogZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcblx0fVxuXG5cdHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gZGVjb2RlKHZhbHVlLCBvcHRpb25zKSB7XG5cdGlmIChvcHRpb25zLmRlY29kZSkge1xuXHRcdHJldHVybiBkZWNvZGVDb21wb25lbnQodmFsdWUpO1xuXHR9XG5cblx0cmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBrZXlzU29ydGVyKGlucHV0KSB7XG5cdGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuXHRcdHJldHVybiBpbnB1dC5zb3J0KCk7XG5cdH1cblxuXHRpZiAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0Jykge1xuXHRcdHJldHVybiBrZXlzU29ydGVyKE9iamVjdC5rZXlzKGlucHV0KSlcblx0XHRcdC5zb3J0KChhLCBiKSA9PiBOdW1iZXIoYSkgLSBOdW1iZXIoYikpXG5cdFx0XHQubWFwKGtleSA9PiBpbnB1dFtrZXldKTtcblx0fVxuXG5cdHJldHVybiBpbnB1dDtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlSGFzaChpbnB1dCkge1xuXHRjb25zdCBoYXNoU3RhcnQgPSBpbnB1dC5pbmRleE9mKCcjJyk7XG5cdGlmIChoYXNoU3RhcnQgIT09IC0xKSB7XG5cdFx0aW5wdXQgPSBpbnB1dC5zbGljZSgwLCBoYXNoU3RhcnQpO1xuXHR9XG5cblx0cmV0dXJuIGlucHV0O1xufVxuXG5mdW5jdGlvbiBnZXRIYXNoKHVybCkge1xuXHRsZXQgaGFzaCA9ICcnO1xuXHRjb25zdCBoYXNoU3RhcnQgPSB1cmwuaW5kZXhPZignIycpO1xuXHRpZiAoaGFzaFN0YXJ0ICE9PSAtMSkge1xuXHRcdGhhc2ggPSB1cmwuc2xpY2UoaGFzaFN0YXJ0KTtcblx0fVxuXG5cdHJldHVybiBoYXNoO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0KGlucHV0KSB7XG5cdGlucHV0ID0gcmVtb3ZlSGFzaChpbnB1dCk7XG5cdGNvbnN0IHF1ZXJ5U3RhcnQgPSBpbnB1dC5pbmRleE9mKCc/Jyk7XG5cdGlmIChxdWVyeVN0YXJ0ID09PSAtMSkge1xuXHRcdHJldHVybiAnJztcblx0fVxuXG5cdHJldHVybiBpbnB1dC5zbGljZShxdWVyeVN0YXJ0ICsgMSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVmFsdWUodmFsdWUsIG9wdGlvbnMpIHtcblx0aWYgKG9wdGlvbnMucGFyc2VOdW1iZXJzICYmICFOdW1iZXIuaXNOYU4oTnVtYmVyKHZhbHVlKSkgJiYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUudHJpbSgpICE9PSAnJykpIHtcblx0XHR2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5wYXJzZUJvb2xlYW5zICYmIHZhbHVlICE9PSBudWxsICYmICh2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScgfHwgdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gJ2ZhbHNlJykpIHtcblx0XHR2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcblx0fVxuXG5cdHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gcGFyc2UoaW5wdXQsIG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuXHRcdGRlY29kZTogdHJ1ZSxcblx0XHRzb3J0OiB0cnVlLFxuXHRcdGFycmF5Rm9ybWF0OiAnbm9uZScsXG5cdFx0YXJyYXlGb3JtYXRTZXBhcmF0b3I6ICcsJyxcblx0XHRwYXJzZU51bWJlcnM6IGZhbHNlLFxuXHRcdHBhcnNlQm9vbGVhbnM6IGZhbHNlXG5cdH0sIG9wdGlvbnMpO1xuXG5cdHZhbGlkYXRlQXJyYXlGb3JtYXRTZXBhcmF0b3Iob3B0aW9ucy5hcnJheUZvcm1hdFNlcGFyYXRvcik7XG5cblx0Y29uc3QgZm9ybWF0dGVyID0gcGFyc2VyRm9yQXJyYXlGb3JtYXQob3B0aW9ucyk7XG5cblx0Ly8gQ3JlYXRlIGFuIG9iamVjdCB3aXRoIG5vIHByb3RvdHlwZVxuXHRjb25zdCByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5cdGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG5cdGlucHV0ID0gaW5wdXQudHJpbSgpLnJlcGxhY2UoL15bPyMmXS8sICcnKTtcblxuXHRpZiAoIWlucHV0KSB7XG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG5cdGZvciAoY29uc3QgcGFyYW0gb2YgaW5wdXQuc3BsaXQoJyYnKSkge1xuXHRcdGxldCBba2V5LCB2YWx1ZV0gPSBzcGxpdE9uRmlyc3Qob3B0aW9ucy5kZWNvZGUgPyBwYXJhbS5yZXBsYWNlKC9cXCsvZywgJyAnKSA6IHBhcmFtLCAnPScpO1xuXG5cdFx0Ly8gTWlzc2luZyBgPWAgc2hvdWxkIGJlIGBudWxsYDpcblx0XHQvLyBodHRwOi8vdzMub3JnL1RSLzIwMTIvV0QtdXJsLTIwMTIwNTI0LyNjb2xsZWN0LXVybC1wYXJhbWV0ZXJzXG5cdFx0dmFsdWUgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IFsnY29tbWEnLCAnc2VwYXJhdG9yJ10uaW5jbHVkZXMob3B0aW9ucy5hcnJheUZvcm1hdCkgPyB2YWx1ZSA6IGRlY29kZSh2YWx1ZSwgb3B0aW9ucyk7XG5cdFx0Zm9ybWF0dGVyKGRlY29kZShrZXksIG9wdGlvbnMpLCB2YWx1ZSwgcmV0KTtcblx0fVxuXG5cdGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHJldCkpIHtcblx0XHRjb25zdCB2YWx1ZSA9IHJldFtrZXldO1xuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKSB7XG5cdFx0XHRmb3IgKGNvbnN0IGsgb2YgT2JqZWN0LmtleXModmFsdWUpKSB7XG5cdFx0XHRcdHZhbHVlW2tdID0gcGFyc2VWYWx1ZSh2YWx1ZVtrXSwgb3B0aW9ucyk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldFtrZXldID0gcGFyc2VWYWx1ZSh2YWx1ZSwgb3B0aW9ucyk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc29ydCA9PT0gZmFsc2UpIHtcblx0XHRyZXR1cm4gcmV0O1xuXHR9XG5cblx0cmV0dXJuIChvcHRpb25zLnNvcnQgPT09IHRydWUgPyBPYmplY3Qua2V5cyhyZXQpLnNvcnQoKSA6IE9iamVjdC5rZXlzKHJldCkuc29ydChvcHRpb25zLnNvcnQpKS5yZWR1Y2UoKHJlc3VsdCwga2V5KSA9PiB7XG5cdFx0Y29uc3QgdmFsdWUgPSByZXRba2V5XTtcblx0XHRpZiAoQm9vbGVhbih2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRcdC8vIFNvcnQgb2JqZWN0IGtleXMsIG5vdCB2YWx1ZXNcblx0XHRcdHJlc3VsdFtrZXldID0ga2V5c1NvcnRlcih2YWx1ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdFtrZXldID0gdmFsdWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fSwgT2JqZWN0LmNyZWF0ZShudWxsKSk7XG59XG5cbmV4cG9ydHMuZXh0cmFjdCA9IGV4dHJhY3Q7XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5cbmV4cG9ydHMuc3RyaW5naWZ5ID0gKG9iamVjdCwgb3B0aW9ucykgPT4ge1xuXHRpZiAoIW9iamVjdCkge1xuXHRcdHJldHVybiAnJztcblx0fVxuXG5cdG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcblx0XHRlbmNvZGU6IHRydWUsXG5cdFx0c3RyaWN0OiB0cnVlLFxuXHRcdGFycmF5Rm9ybWF0OiAnbm9uZScsXG5cdFx0YXJyYXlGb3JtYXRTZXBhcmF0b3I6ICcsJ1xuXHR9LCBvcHRpb25zKTtcblxuXHR2YWxpZGF0ZUFycmF5Rm9ybWF0U2VwYXJhdG9yKG9wdGlvbnMuYXJyYXlGb3JtYXRTZXBhcmF0b3IpO1xuXG5cdGNvbnN0IHNob3VsZEZpbHRlciA9IGtleSA9PiAoXG5cdFx0KG9wdGlvbnMuc2tpcE51bGwgJiYgaXNOdWxsT3JVbmRlZmluZWQob2JqZWN0W2tleV0pKSB8fFxuXHRcdChvcHRpb25zLnNraXBFbXB0eVN0cmluZyAmJiBvYmplY3Rba2V5XSA9PT0gJycpXG5cdCk7XG5cblx0Y29uc3QgZm9ybWF0dGVyID0gZW5jb2RlckZvckFycmF5Rm9ybWF0KG9wdGlvbnMpO1xuXG5cdGNvbnN0IG9iamVjdENvcHkgPSB7fTtcblxuXHRmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhvYmplY3QpKSB7XG5cdFx0aWYgKCFzaG91bGRGaWx0ZXIoa2V5KSkge1xuXHRcdFx0b2JqZWN0Q29weVtrZXldID0gb2JqZWN0W2tleV07XG5cdFx0fVxuXHR9XG5cblx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdENvcHkpO1xuXG5cdGlmIChvcHRpb25zLnNvcnQgIT09IGZhbHNlKSB7XG5cdFx0a2V5cy5zb3J0KG9wdGlvbnMuc29ydCk7XG5cdH1cblxuXHRyZXR1cm4ga2V5cy5tYXAoa2V5ID0+IHtcblx0XHRjb25zdCB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG5cdFx0aWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cblx0XHRpZiAodmFsdWUgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBlbmNvZGUoa2V5LCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRcdHJldHVybiB2YWx1ZVxuXHRcdFx0XHQucmVkdWNlKGZvcm1hdHRlcihrZXkpLCBbXSlcblx0XHRcdFx0LmpvaW4oJyYnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZW5jb2RlKGtleSwgb3B0aW9ucykgKyAnPScgKyBlbmNvZGUodmFsdWUsIG9wdGlvbnMpO1xuXHR9KS5maWx0ZXIoeCA9PiB4Lmxlbmd0aCA+IDApLmpvaW4oJyYnKTtcbn07XG5cbmV4cG9ydHMucGFyc2VVcmwgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHtcblx0b3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuXHRcdGRlY29kZTogdHJ1ZVxuXHR9LCBvcHRpb25zKTtcblxuXHRjb25zdCBbdXJsLCBoYXNoXSA9IHNwbGl0T25GaXJzdChpbnB1dCwgJyMnKTtcblxuXHRyZXR1cm4gT2JqZWN0LmFzc2lnbihcblx0XHR7XG5cdFx0XHR1cmw6IHVybC5zcGxpdCgnPycpWzBdIHx8ICcnLFxuXHRcdFx0cXVlcnk6IHBhcnNlKGV4dHJhY3QoaW5wdXQpLCBvcHRpb25zKVxuXHRcdH0sXG5cdFx0b3B0aW9ucyAmJiBvcHRpb25zLnBhcnNlRnJhZ21lbnRJZGVudGlmaWVyICYmIGhhc2ggPyB7ZnJhZ21lbnRJZGVudGlmaWVyOiBkZWNvZGUoaGFzaCwgb3B0aW9ucyl9IDoge31cblx0KTtcbn07XG5cbmV4cG9ydHMuc3RyaW5naWZ5VXJsID0gKGlucHV0LCBvcHRpb25zKSA9PiB7XG5cdG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcblx0XHRlbmNvZGU6IHRydWUsXG5cdFx0c3RyaWN0OiB0cnVlXG5cdH0sIG9wdGlvbnMpO1xuXG5cdGNvbnN0IHVybCA9IHJlbW92ZUhhc2goaW5wdXQudXJsKS5zcGxpdCgnPycpWzBdIHx8ICcnO1xuXHRjb25zdCBxdWVyeUZyb21VcmwgPSBleHBvcnRzLmV4dHJhY3QoaW5wdXQudXJsKTtcblx0Y29uc3QgcGFyc2VkUXVlcnlGcm9tVXJsID0gZXhwb3J0cy5wYXJzZShxdWVyeUZyb21VcmwsIHtzb3J0OiBmYWxzZX0pO1xuXG5cdGNvbnN0IHF1ZXJ5ID0gT2JqZWN0LmFzc2lnbihwYXJzZWRRdWVyeUZyb21VcmwsIGlucHV0LnF1ZXJ5KTtcblx0bGV0IHF1ZXJ5U3RyaW5nID0gZXhwb3J0cy5zdHJpbmdpZnkocXVlcnksIG9wdGlvbnMpO1xuXHRpZiAocXVlcnlTdHJpbmcpIHtcblx0XHRxdWVyeVN0cmluZyA9IGA/JHtxdWVyeVN0cmluZ31gO1xuXHR9XG5cblx0bGV0IGhhc2ggPSBnZXRIYXNoKGlucHV0LnVybCk7XG5cdGlmIChpbnB1dC5mcmFnbWVudElkZW50aWZpZXIpIHtcblx0XHRoYXNoID0gYCMke2VuY29kZShpbnB1dC5mcmFnbWVudElkZW50aWZpZXIsIG9wdGlvbnMpfWA7XG5cdH1cblxuXHRyZXR1cm4gYCR7dXJsfSR7cXVlcnlTdHJpbmd9JHtoYXNofWA7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChzdHJpbmcsIHNlcGFyYXRvcikgPT4ge1xuXHRpZiAoISh0eXBlb2Ygc3RyaW5nID09PSAnc3RyaW5nJyAmJiB0eXBlb2Ygc2VwYXJhdG9yID09PSAnc3RyaW5nJykpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgYXJndW1lbnRzIHRvIGJlIG9mIHR5cGUgYHN0cmluZ2AnKTtcblx0fVxuXG5cdGlmIChzZXBhcmF0b3IgPT09ICcnKSB7XG5cdFx0cmV0dXJuIFtzdHJpbmddO1xuXHR9XG5cblx0Y29uc3Qgc2VwYXJhdG9ySW5kZXggPSBzdHJpbmcuaW5kZXhPZihzZXBhcmF0b3IpO1xuXG5cdGlmIChzZXBhcmF0b3JJbmRleCA9PT0gLTEpIHtcblx0XHRyZXR1cm4gW3N0cmluZ107XG5cdH1cblxuXHRyZXR1cm4gW1xuXHRcdHN0cmluZy5zbGljZSgwLCBzZXBhcmF0b3JJbmRleCksXG5cdFx0c3RyaW5nLnNsaWNlKHNlcGFyYXRvckluZGV4ICsgc2VwYXJhdG9yLmxlbmd0aClcblx0XTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IHN0ciA9PiBlbmNvZGVVUklDb21wb25lbnQoc3RyKS5yZXBsYWNlKC9bIScoKSpdL2csIHggPT4gYCUke3guY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKX1gKTtcbiIsIlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxlY3Rpb24gPSBkb2N1bWVudC5nZXRTZWxlY3Rpb24oKTtcbiAgaWYgKCFzZWxlY3Rpb24ucmFuZ2VDb3VudCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7fTtcbiAgfVxuICB2YXIgYWN0aXZlID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblxuICB2YXIgcmFuZ2VzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZWN0aW9uLnJhbmdlQ291bnQ7IGkrKykge1xuICAgIHJhbmdlcy5wdXNoKHNlbGVjdGlvbi5nZXRSYW5nZUF0KGkpKTtcbiAgfVxuXG4gIHN3aXRjaCAoYWN0aXZlLnRhZ05hbWUudG9VcHBlckNhc2UoKSkgeyAvLyAudG9VcHBlckNhc2UgaGFuZGxlcyBYSFRNTFxuICAgIGNhc2UgJ0lOUFVUJzpcbiAgICBjYXNlICdURVhUQVJFQSc6XG4gICAgICBhY3RpdmUuYmx1cigpO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgYWN0aXZlID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHNlbGVjdGlvbi50eXBlID09PSAnQ2FyZXQnICYmXG4gICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuXG4gICAgaWYgKCFzZWxlY3Rpb24ucmFuZ2VDb3VudCkge1xuICAgICAgcmFuZ2VzLmZvckVhY2goZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGFjdGl2ZSAmJlxuICAgIGFjdGl2ZS5mb2N1cygpO1xuICB9O1xufTtcbiIsIi8qKlxuICogQ29udmVydCBhIHR5cGVkIGFycmF5IHRvIGEgQnVmZmVyIHdpdGhvdXQgYSBjb3B5XG4gKlxuICogQXV0aG9yOiAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIExpY2Vuc2U6ICBNSVRcbiAqXG4gKiBgbnBtIGluc3RhbGwgdHlwZWRhcnJheS10by1idWZmZXJgXG4gKi9cblxudmFyIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJ2lzLXR5cGVkYXJyYXknKS5zdHJpY3RcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0eXBlZGFycmF5VG9CdWZmZXIgKGFycikge1xuICBpZiAoaXNUeXBlZEFycmF5KGFycikpIHtcbiAgICAvLyBUbyBhdm9pZCBhIGNvcHksIHVzZSB0aGUgdHlwZWQgYXJyYXkncyB1bmRlcmx5aW5nIEFycmF5QnVmZmVyIHRvIGJhY2sgbmV3IEJ1ZmZlclxuICAgIHZhciBidWYgPSBCdWZmZXIuZnJvbShhcnIuYnVmZmVyKVxuICAgIGlmIChhcnIuYnl0ZUxlbmd0aCAhPT0gYXJyLmJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgICAvLyBSZXNwZWN0IHRoZSBcInZpZXdcIiwgaS5lLiBieXRlT2Zmc2V0IGFuZCBieXRlTGVuZ3RoLCB3aXRob3V0IGRvaW5nIGEgY29weVxuICAgICAgYnVmID0gYnVmLnNsaWNlKGFyci5ieXRlT2Zmc2V0LCBhcnIuYnl0ZU9mZnNldCArIGFyci5ieXRlTGVuZ3RoKVxuICAgIH1cbiAgICByZXR1cm4gYnVmXG4gIH0gZWxzZSB7XG4gICAgLy8gUGFzcyB0aHJvdWdoIGFsbCBvdGhlciB0eXBlcyB0byBgQnVmZmVyLmZyb21gXG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGFycilcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==
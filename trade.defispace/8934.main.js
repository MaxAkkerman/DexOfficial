/*! For license information please see 8934.main.js.LICENSE.txt */
(self.webpackChunkmy_swap=self.webpackChunkmy_swap||[]).push([[8934],{75508:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ComposedStore=void 0;const n=r(28877);class i extends n.ObservableStore{constructor(t){super({}),this._children=t||{},Object.keys(this._children).forEach((t=>{const e=this._children[t];this._addChild(t,e)}))}_addChild(t,e){const r=e=>{const r=this.getState();r[t]=e,this.putState(r)};e.subscribe(r),r(e.getState())}}e.ComposedStore=i},70401:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MergedStore=void 0;const n=r(28877);class i extends n.ObservableStore{constructor(t=[]){super({}),this._children=t,t.forEach((t=>this._addChild(t))),this._updateWholeState()}_addChild(t){t.subscribe((()=>this._updateWholeState()))}_updateWholeState(){const t=this._children.map((t=>t.getState())),e=Object.assign({},...t);this.putState(e)}}e.MergedStore=i},28877:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.ObservableStore=void 0;const i=n(r(19394));class o extends i.default{constructor(t){super(),this._state=t||{}}getState(){return this._getState()}putState(t){this._putState(t),this.emit("update",t)}updateState(t){if(t&&"object"==typeof t){const e=this.getState();this.putState(Object.assign(Object.assign({},e),t))}else this.putState(t)}subscribe(t){this.on("update",t)}unsubscribe(t){this.removeListener("update",t)}_getState(){return this._state}_putState(t){this._state=t}}e.ObservableStore=o},97969:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.storeAsStream=void 0;const n=r(42830);class i extends n.Duplex{constructor(t){super({objectMode:!0}),this.resume(),this.handler=t=>this.push(t),this.obsStore=t,this.obsStore.subscribe(this.handler)}pipe(t,e){const r=super.pipe(t,e);return t.write(this.obsStore.getState()),r}_write(t,e,r){this.obsStore.putState(t),r()}_read(t){}_destroy(t,e){this.obsStore.unsubscribe(this.handler),super._destroy(t,e)}}e.storeAsStream=function(t){return new i(t)}},12724:function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),i=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),i(r(97969),e),i(r(75508),e),i(r(70401),e),i(r(28877),e),i(r(26546),e)},26546:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.storeTransformStream=void 0;const n=r(14650);e.storeTransformStream=function(t){return n.obj(((e,r,n)=>{try{return void n(null,t(e))}catch(t){return void n(t)}}))}},2450:(t,e,r)=>{"use strict";var n=new(0,r(86266).ec)("secp256k1"),i=r.g.crypto||r.g.msCrypto||{},o=i.subtle||i.webkitSubtle,s=r(55835);const a=Buffer.from("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141","hex"),u=Buffer.alloc(32,0);function c(t,e){if(!t)throw new Error(e||"Assertion failed")}function h(t){return e=t,!(!Buffer.isBuffer(e)||32!==e.length)&&t.compare(u)>0&&t.compare(a)<0;var e}function l(t){var e=new Uint8Array(t);return void 0===i.getRandomValues?Buffer.from(s.randomBytes(t)):(i.getRandomValues(e),Buffer.from(e))}function f(t){return function(e,r,n){return new Promise((function(i){if(o)return o.importKey("raw",r,{name:"AES-CBC"},!1,[t]).then((function(r){var i={name:"AES-CBC",iv:e};return o[t](i,r,n)})).then((function(t){i(Buffer.from(new Uint8Array(t)))}));if("encrypt"===t){var a=s.createCipheriv("aes-256-cbc",r,e);let t=a.update(n),o=a.final();i(Buffer.concat([t,o]))}else if("decrypt"===t){var u=s.createDecipheriv("aes-256-cbc",r,e);let t=u.update(n),o=u.final();i(Buffer.concat([t,o]))}}))}}f("encrypt");var d=f("decrypt");e.oq=function(){for(var t=l(32);!h(t);)t=l(32);return t};e.rc=function(t){return c(32===t.length,"Bad private key"),c(h(t),"Bad private key"),Buffer.from(n.keyFromPrivate(t).getPublic("arr"))};e.pe=function(t,e){var r,i,o;return(i=t,o=e.ephemPublicKey,new Promise((function(t){c(Buffer.isBuffer(i),"Bad private key"),c(Buffer.isBuffer(o),"Bad public key"),c(32===i.length,"Bad private key"),c(h(i),"Bad private key"),c(65===o.length||33===o.length,"Bad public key"),65===o.length&&c(4===o[0],"Bad public key"),33===o.length&&c(2===o[0]||3===o[0],"Bad public key");var e=n.keyFromPrivate(i),r=n.keyFromPublic(o),s=e.derive(r.getPublic());t(Buffer.from(s.toArray()))}))).then((function(t){return e=t,new Promise((function(t){var r=s.createHash("sha512").update(e).digest();t(new Uint8Array(r))}));var e})).then((function(t){r=t.slice(0,32);var n,i,o,a=t.slice(32),u=Buffer.concat([e.iv,e.ephemPublicKey,e.ciphertext]);return n=a,i=u,o=e.mac,new Promise((function(t){var e=s.createHmac("sha256",Buffer.from(n));e.update(i),t(function(t,e){if(t.length!==e.length)return!1;for(var r=0,n=0;n<t.length;n++)r|=t[n]^e[n];return 0===r}(e.digest(),o))}))})).then((function(t){return c(t,"Bad MAC"),d(e.iv,r,e.ciphertext)})).then((function(t){return Buffer.from(new Uint8Array(t))}))}},81477:(t,e,r)=>{"use strict";r.r(e),r.d(e,{BUTTON_POSITION:()=>Ut,LOGIN_PROVIDER:()=>Lt,PAYMENT_PROVIDER:()=>Dt,TORUS_BUILD_ENV:()=>qt,TorusInpageProvider:()=>oe,WALLET_OPENLOGIN_VERIFIER_MAP:()=>Ft,default:()=>me});var n=r(31692),i=r.n(n),o=r(18269);const s="mainnet",a=[{constant:!0,inputs:[],name:"currentEpoch",outputs:[{internalType:"uint256",name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{internalType:"uint256",name:"epoch",type:"uint256"}],name:"getEpochInfo",outputs:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"n",type:"uint256"},{internalType:"uint256",name:"k",type:"uint256"},{internalType:"uint256",name:"t",type:"uint256"},{internalType:"address[]",name:"nodeList",type:"address[]"},{internalType:"uint256",name:"prevEpoch",type:"uint256"},{internalType:"uint256",name:"nextEpoch",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{internalType:"address",name:"nodeAddress",type:"address"}],name:"getNodeDetails",outputs:[{internalType:"string",name:"declaredIp",type:"string"},{internalType:"uint256",name:"position",type:"uint256"},{internalType:"uint256",name:"pubKx",type:"uint256"},{internalType:"uint256",name:"pubKy",type:"uint256"},{internalType:"string",name:"tmP2PListenAddress",type:"string"},{internalType:"string",name:"p2pListenAddress",type:"string"}],payable:!1,stateMutability:"view",type:"function"}];class u{constructor({network:t="mainnet",proxyAddress:e="0x638646503746d5456209e33a2ff5e3226d698bea"}={}){let r;this._currentEpoch="19",this._torusNodeEndpoints=["https://torus-19.torusnode.com/jrpc","https://torus-node.ens.domains/jrpc","https://torus-node.matic.network/jrpc","https://torus.zilliqa.network/jrpc","https://torus-mainnet.cosmos.network/jrpc","https://torus2.etherscan.com/jrpc","https://torus-node-v2.skalelabs.com/jrpc","https://torus-node.binancex.dev/jrpc","https://torusnode.ont.io/jrpc"],this._torusNodePub=[{X:"bbe83c64177c3775550e6ba6ac2bc059f6847d644c9e4894e42c60d7974d8c2b",Y:"82b49a7caf70def38cdad2740af45c1e4f969650105c5019a29bb18b21a9acb5"},{X:"c208cac4ef9a47d386097a9c915b28e9cb89213abee8d26a17198ee261201b0d",Y:"c7db2fe4631109f40833de9dc78d07e35706549ee48fa557b33e4e75e1047873"},{X:"ca1766bb426d4ca5582818a0c5439d560ea64f5baa060793ab29dd3d0ceacfe",Y:"d46c1d08c40e1306e1bca328c2287b8268166b11a1ba4b8442ea2ad0c5e32152"},{X:"c3934dd2f6f4b3d2e1e398cc501e143c1e1a381b52feb6d1525af34d16253768",Y:"71f5141a5035799099f5ea3e241e66946bc55dc857ac3bd7d6fcdb8dcd3eeeef"},{X:"22e66f1929631d00bf026227581597f085fd94fd952fc0dca9f0833398b5c064",Y:"6088b3912e10a1e9d50355a609c10db7d188f16a2e2fd7357e51bf4f6a74f0a1"},{X:"9dc9fa410f3ce9eb70df70cdea00a49f2c4cc7a31c08c0dab5f863ed35ff5139",Y:"627a291cb87a75c61da3f65d6818e1e05e360217179817ed27e8c73bca7ec122"},{X:"118b9fc07e97b096d899b9f6658463ce6a8caa64038e37fc969df4e6023dd8c6",Y:"baf9fa4e51770f4796ea165dd03a769b8606681a38954a0a92c4cbffd6609ce9"},{X:"8a6d8b925da15a273dec3d8f8395ec35cd6878f274b2b180e4e106999db64043",Y:"96f67f870c157743da0b1eb84d89bf30500d74dc84c11f501ee1cb013acc8c46"},{X:"39cecb62e863729f572f7dfc46c24867981bf04bb405fed0df39e33984bfade5",Y:"61c2364434012e68a2be2e9952805037e52629d7762fafc8e10e9fb5bad8f790"}],this._torusIndexes=[1,2,3,4,5,6,7,8,9],this._network=s;try{r=new URL(t).href}catch(e){r=`https://${t}.infura.io/v3/b8cdb0e4cff24599a286bf8e87ff1c96`}i().setProvider(r),this.nodeListContract=new(i())(a,e),this.nodeListAddress=e,this.updated=!1,this._network=t}get _nodeDetails(){return{currentEpoch:this._currentEpoch,nodeListAddress:this.nodeListAddress,torusNodeEndpoints:this._torusNodeEndpoints,torusNodePub:this._torusNodePub,torusIndexes:this._torusIndexes,updated:this.updated}}getCurrentEpoch(){return this.nodeListContract.methods.currentEpoch().call()}getEpochInfo(t){return this.nodeListContract.methods.getEpochInfo(t).call()}getNodeEndpoint(t){return this.nodeListContract.methods.getNodeDetails(t).call()}getNodeDetails(t=!1,e=!1){return r=this,n=void 0,a=function*(){try{if(t&&this._network===s)return this._nodeDetails;if(this.updated)return this._nodeDetails;const r=yield this.getCurrentEpoch();if(e&&this._network===s&&r===this._currentEpoch)return this._nodeDetails;this._currentEpoch=r;const n=yield this.getEpochInfo(r),i=n.nodeList.map(((t,e)=>e+1));this._torusIndexes=i;const a=n.nodeList.map((t=>this.getNodeEndpoint(t))),u=yield Promise.all(a),c=[],h=[];for(let t=0;t<u.length;t+=1){const e=u[t],r=`https://${e.declaredIp.split(":")[0]}/jrpc`;c.push(r),h.push({X:(0,o.toHex)(e.pubKx).replace("0x",""),Y:(0,o.toHex)(e.pubKy).replace("0x","")})}return this._torusNodeEndpoints=c,this._torusNodePub=h,this.updated=!0,this._nodeDetails}catch(t){return this._nodeDetails}},new((i=void 0)||(i=Promise))((function(t,e){function o(t){try{u(a.next(t))}catch(t){e(t)}}function s(t){try{u(a.throw(t))}catch(t){e(t)}}function u(e){var r;e.done?t(e.value):(r=e.value,r instanceof i?r:new i((function(t){t(r)}))).then(o,s)}u((a=a.apply(r,n||[])).next())}));var r,n,i,a}}var c=r(72378),h=r.n(c);let l="torus-default",f="";function d(t){f=t}function p(t){l=t}function m(){const t={};return l&&(t["x-api-key"]=l),f&&(t["x-embed-host"]=f),t}const g=(t,e={},r={})=>{return n=void 0,i=void 0,s=function*(){const n={mode:"cors",headers:{}};r.useAPIKey&&(n.headers=Object.assign(Object.assign({},n.headers),m()));const i=h()(n,e,{method:"GET"}),o=yield fetch(t,i);if(o.ok)return o.json();throw o},new((o=void 0)||(o=Promise))((function(t,e){function r(t){try{u(s.next(t))}catch(t){e(t)}}function a(t){try{u(s.throw(t))}catch(t){e(t)}}function u(e){var n;e.done?t(e.value):(n=e.value,n instanceof o?n:new o((function(t){t(n)}))).then(r,a)}u((s=s.apply(n,i||[])).next())}));var n,i,o,s},v=(t,e={},r={},n={})=>{const i={mode:"cors",headers:{"Content-Type":"application/json; charset=utf-8"}};n.useAPIKey&&(i.headers=Object.assign(Object.assign({},i.headers),m()));const o=h()(i,r,{method:"POST"});return n.isUrlEncodedData?(o.body=e,"application/json; charset=utf-8"===o.headers["Content-Type"]&&delete o.headers["Content-Type"]):o.body=JSON.stringify(e),((t,e)=>{const r=new Promise(((e,r)=>{const n=setTimeout((()=>{clearTimeout(n),r(new Error(`Timed out in ${t}ms`))}),t)}));return Promise.race([e,r])})(n.timeout||6e4,fetch(t,o).then((t=>{if(t.ok)return t.json();throw t})))},y=(t,e)=>({jsonrpc:"2.0",method:t,id:10,params:e});var b=r(88473),w=r(61798),M=r.n(w);r(45772),r(95811),URL;var _=r(17187),x=r(4445),k=r.n(x),O=r(12840),S=r.n(O),A=r(30778),E=r.n(A),j=r(99554),T=r.n(j);function P(){}const C="ACK";class I extends b.Duplex{constructor({name:t,target:e,targetWindow:r=window,targetOrigin:n="*"}){if(super({objectMode:!0}),!t||!e)throw new Error("Invalid input.");this._init=!1,this._haveSyn=!1,this._name=t,this._target=e,this._targetWindow=r,this._targetOrigin=n,this._onMessage=this.onMessage.bind(this),this._synIntervalId=null,window.addEventListener("message",this._onMessage,!1),this._handShake()}_break(){this.cork(),this._write("BRK",null,P),this._haveSyn=!1,this._init=!1}_handShake(){this._write("SYN",null,P),this.cork()}_onData(t){if(this._init)if("BRK"===t)this._break();else try{this.push(t)}catch(t){this.emit("error",t)}else"SYN"===t?(this._haveSyn=!0,this._write(C,null,P)):t===C&&(this._init=!0,this._haveSyn||this._write(C,null,P),this.uncork())}_postMessage(t){const e=this._targetOrigin;this._targetWindow.postMessage({target:this._target,data:t},e)}onMessage(t){const e=t.data;"*"!==this._targetOrigin&&t.origin!==this._targetOrigin||t.source!==this._targetWindow||"object"!=typeof e||e.target!==this._name||!e.data||this._onData(e.data)}_read(){}_write(t,e,r){this._postMessage(t),r()}_destroy(){window.removeEventListener("message",this._onMessage,!1)}}function B(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))}function N(t,e,r){try{Reflect.apply(t,e,r)}catch(t){setTimeout((()=>{throw t}))}}class R extends _.EventEmitter{emit(t,...e){let r="error"===t;const n=this._events;if(void 0!==n)r=r&&void 0===n.error;else if(!r)return!1;if(r){let t;if(e.length>0&&([t]=e),t instanceof Error)throw t;const r=new Error("Unhandled error."+(t?` (${t.message})`:""));throw r.context=t,r}const i=n[t];if(void 0===i)return!1;if("function"==typeof i)N(i,this,e);else{const t=i.length,r=function(t){const e=t.length,r=new Array(e);for(let n=0;n<e;n+=1)r[n]=t[n];return r}(i);for(let n=0;n<t;n+=1)N(r[n],this,e)}return!0}}class L extends Error{constructor({code:t,message:e,data:r}){if(!Number.isInteger(t))throw new Error("code must be an integer");if(!e||"string"!=typeof e)throw new Error("message must be string");super(e),this.code=t,void 0!==r&&(this.data=r)}toString(){return k()({code:this.code,message:this.message,data:this.data,stack:this.stack})}}function F(t){return t.toString()}class D extends R{constructor(){super(),this._middleware=[]}static _runAllMiddleware(t,e,r){return B(this,void 0,void 0,(function*(){const n=[];let i=null,o=!1;for(const s of r)if([i,o]=yield D._runMiddleware(t,e,s,n),o)break;return[i,o,n.reverse()]}))}static _runMiddleware(t,e,r,n){return new Promise((i=>{const o=t=>{const r=t||e.error;r&&(e.error=F(r)),i([r,!0])},s=t=>{e.error?o(e.error):(t&&("function"!=typeof t&&o(new L({code:-32603,message:"JRPCEngine: 'next' return handlers must be functions"})),n.push(t)),i([null,!1]))};try{r(t,e,s,o)}catch(t){o(t)}}))}static _runReturnHandlers(t){return B(this,void 0,void 0,(function*(){for(const e of t)yield new Promise(((t,r)=>{e((e=>e?r(e):t()))}))}))}static _checkForCompletion(t,e,r){if(!("result"in e)&&!("error"in e))throw new L({code:-32603,message:"Response has no error or result for request"});if(!r)throw new L({code:-32603,message:"Nothing ended request"})}push(t){this._middleware.push(t)}handle(t,e){if(e&&"function"!=typeof e)throw new Error('"callback" must be a function if provided.');return Array.isArray(t)?e?this._handleBatch(t,e):this._handleBatch(t):e?this._handle(t,e):this._promiseHandle(t)}asMiddleware(){return(t,e,r,n)=>B(this,void 0,void 0,(function*(){try{const[i,o,s]=yield D._runAllMiddleware(t,e,this._middleware);return o?(yield D._runReturnHandlers(s),n(i)):r((t=>B(this,void 0,void 0,(function*(){try{yield D._runReturnHandlers(s)}catch(e){return t(e)}return t()}))))}catch(t){return n(t)}}))}_handleBatch(t,e){return B(this,void 0,void 0,(function*(){try{const r=yield Promise.all(t.map(this._promiseHandle.bind(this)));return e?e(null,r):r}catch(t){if(e)return e(t);throw t}}))}_promiseHandle(t){return new Promise((e=>{this._handle(t,((t,r)=>{e(r)}))}))}_handle(t,e){return B(this,void 0,void 0,(function*(){if(!t||Array.isArray(t)||"object"!=typeof t){const t=new L({code:-32603,message:"request must be plain object"});return e(t,{id:void 0,jsonrpc:"2.0",error:t})}if("string"!=typeof t.method){const r=new L({code:-32603,message:"method must be string"});return e(r,{id:t.id,jsonrpc:"2.0",error:r})}const r=Object.assign({},t),n={id:r.id,jsonrpc:r.jsonrpc};let i=null;try{yield this._processRequest(r,n)}catch(t){i=t}return i&&(delete n.result,n.error||(n.error=F(i))),e(i,n)}))}_processRequest(t,e){return B(this,void 0,void 0,(function*(){const[r,n,i]=yield D._runAllMiddleware(t,e,this._middleware);if(D._checkForCompletion(t,e,n),yield D._runReturnHandlers(i),r)throw r}))}}class q extends b.Duplex{constructor({parent:t,name:e}){super({objectMode:!0}),this._parent=t,this._name=e}_read(){}_write(t,e,r){this._parent.push({name:this._name,data:t}),r()}}const U=Symbol("IGNORE_SUBSTREAM");class H extends b.Duplex{constructor(t={}){super(Object.assign(Object.assign({},t),{objectMode:!0})),this._substreams={}}createStream(t){if(!t)throw new Error("ObjectMultiplex - name must not be empty");if(this._substreams[t])throw new Error(`ObjectMultiplex - Substream for name "${t}" already exists`);const e=new q({parent:this,name:t});return this._substreams[t]=e,function(t,r){const n=E()((t=>e.destroy(t||void 0)));S()(t,{readable:!1},n),S()(t,{writable:!1},n)}(this),e}ignoreStream(t){if(!t)throw new Error("ObjectMultiplex - name must not be empty");if(this._substreams[t])throw new Error(`ObjectMultiplex - Substream for name "${t}" already exists`);this._substreams[t]=U}_read(){}_write(t,e,r){const{name:n,data:i}=t;if(!n)return window.console.warn(`ObjectMultiplex - malformed chunk without name "${t}"`),r();const o=this._substreams[n];return o?(o!==U&&o.push(i),r()):(window.console.warn(`ObjectMultiplex - orphaned data for stream "${n}"`),r())}}var z=r(96156);function V(t){return(V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function W(t,e,r,n,i,o,s){try{var a=t[o](s),u=a.value}catch(t){return void r(t)}a.done?e(u):Promise.resolve(u).then(n,i)}function $(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var o=t.apply(e,r);function s(t){W(o,n,i,s,a,"next",t)}function a(t){W(o,n,i,s,a,"throw",t)}s(void 0)}))}}function G(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function K(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var Z=r(87757),J=r.n(Z),Y=r(2450),X=r(13550),Q=r.n(X),tt=r(86266),et=r(67266),rt=r.n(et),nt=r(2043),it=r.n(nt),ot=r(14665);function st(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&(0,ot.Z)(t,e)}var at=r(63349);function ut(t,e){if(e&&("object"===V(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return(0,at.Z)(t)}function ct(t){return(ct=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ht(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}function lt(t,e,r){return(lt=ht()?Reflect.construct:function(t,e,r){var n=[null];n.push.apply(n,e);var i=new(Function.bind.apply(t,n));return r&&(0,ot.Z)(i,r.prototype),i}).apply(null,arguments)}function ft(t){var e="function"==typeof Map?new Map:void 0;return(ft=function(t){if(null===t||(r=t,-1===Function.toString.call(r).indexOf("[native code]")))return t;var r;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return lt(t,arguments,ct(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),(0,ot.Z)(n,t)})(t)}function dt(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function pt(t){return function(t){if(Array.isArray(t))return dt(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return dt(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?dt(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var mt=it().getLogger("torus.js");mt.disableAll();var gt=function(t){st(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=ct(e);if(r){var i=ct(this).constructor;t=Reflect.construct(n,arguments,i)}else t=n.apply(this,arguments);return ut(this,t)});function i(t){var e,r=t.errors,o=t.responses,s=t.predicate;return G(this,i),(e=n.call(this,"Unable to resolve enough promises.")).errors=r,e.responses=o,e.predicate=s,e}return i}(ft(Error)),vt=function(t,e){return new Promise((function(r,n){var i,o=0,s={resolved:!1},a=new Array(t.length).fill(void 0),u=new Array(t.length).fill(void 0);t.forEach((function(c,h){c.then((function(t){u[h]=t})).catch((function(t){a[h]=t})).finally((function(){s.resolved||e(u.slice(0),s).then((function(t){s.resolved=!0,r(t)})).catch((function(t){i=t})).finally((function(e){if((o+=1)===t.length){var r=Object.values(u.reduce((function(t,e){var r,n,i=e||{},o=i.id,s=i.error;return(null==s||null===(r=s.data)||void 0===r?void 0:r.length)>0&&(s.data.startsWith("Error occurred while verifying params")?t[o]=(n=s.data).charAt(0).toUpperCase()+n.slice(1):t[o]=s.data),t}),{}));if(r.length>0){var s=r.length>1?"\n".concat(r.map((function(t){return"• ".concat(t)})).join("\n")):r[0];n(new Error(s))}else{var c;n(new gt({errors:a,responses:u,predicate:(null===(c=i)||void 0===c?void 0:c.message)||i}))}}}))}))}))}))};function yt(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function bt(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?yt(Object(r),!0).forEach((function(e){(0,z.Z)(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):yt(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}var wt=function(t){st(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=ct(e);if(r){var i=ct(this).constructor;t=Reflect.construct(n,arguments,i)}else t=n.apply(this,arguments);return ut(this,t)});function i(){return G(this,i),n.apply(this,arguments)}return i}(ft(Error)),Mt=function t(e,r){var n=e;if("number"==typeof n&&(n=Array.from({length:n},(function(t,e){return e}))),r>n.length||r<=0)return[];if(r===n.length)return[n];if(1===r)return n.reduce((function(t,e){return[].concat(pt(t),[[e]])}),[]);for(var i=[],o=[],s=0;s<=n.length-r+1;s+=1){o=t(n.slice(s+1),r-1);for(var a=0;a<o.length;a+=1)i.push([n[s]].concat(pt(o[a])))}return i},_t=function(t,e){for(var r={},n=0;n<t.length;n+=1){var i=rt()(t[n]);if(r[i]=r[i]?r[i]+1:1,r[i]===e)return t[n]}},xt=function(){var t=$(J().mark((function t(e,r,n){var i;return J().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=e.map((function(t){return v(t,y("VerifierLookupRequest",{verifier:r,verifier_id:n.toString()})).catch((function(t){return mt.error("lookup request failed",t)}))})),t.abrupt("return",vt(i,(function(t){var r=t.filter((function(t){return t})),n=_t(r.map((function(t){return t&&t.error})),1+~~(e.length/2)),i=_t(r.map((function(t){return t&&t.result})),1+~~(e.length/2));return i||n?Promise.resolve({keyResult:i,errorResult:n}):Promise.reject(new Error("invalid results ".concat(JSON.stringify(t))))})));case 2:case"end":return t.stop()}}),t)})));return function(e,r,n){return t.apply(this,arguments)}}(),kt=function(t,e,r,n){return new Promise((function(i,o){setTimeout((function(){xt(t,e,r).then(i).catch(o)}),n)}))},Ot=function(){var t=$(J().mark((function t(e,r,n,i,o,s){var a,u,c,h;return J().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(void 0===n?(a=Math.floor(Math.random()*e.length),u=a):a=n%e.length,a!==i){t.next=3;break}throw new Error("Looped through all");case 3:return void 0!==i&&(u=i),c=y("KeyAssign",{verifier:o,verifier_id:s.toString()}),t.prev=5,t.next=8,v("https://signer.tor.us/api/sign",c,{headers:{pubKeyX:r[a].X,pubKeyY:r[a].Y}},{useAPIKey:!0});case 8:return h=t.sent,t.abrupt("return",v(e[a],bt(bt({},c),h),{headers:{"Content-Type":"application/json; charset=utf-8"}}));case 12:return t.prev=12,t.t0=t.catch(5),mt.error(t.t0),t.abrupt("return",Ot(e,r,a+1,u,o,s));case 16:case"end":return t.stop()}}),t,null,[[5,12]])})));return function(e,r,n,i,o,s){return t.apply(this,arguments)}}();function St(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function At(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?St(Object(r),!0).forEach((function(e){(0,z.Z)(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):St(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}var Et=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.enableOneKey,n=void 0!==r&&r,i=e.metadataHost,o=void 0===i?"https://metadata.tor.us":i,s=e.allowHost,a=void 0===s?"https://signer.tor.us/api/allow":s,u=e.serverTimeOffset,c=void 0===u?0:u;G(this,t),this.ec=new tt.ec("secp256k1"),this.metadataHost=o,this.allowHost=a,this.enableOneKey=n,this.serverTimeOffset=c||0}var e,r,n,i,s,a,u,c,h,l,f;return e=t,n=[{key:"enableLogging",value:function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];t?mt.enableAll():mt.disableAll()}},{key:"setAPIKey",value:function(t){p(t)}},{key:"setEmbedHost",value:function(t){d(t)}},{key:"isGetOrSetNonceError",value:function(t){return t instanceof wt}}],(r=[{key:"getUserTypeAndAddress",value:(f=$(J().mark((function t(e,r,n){var i,o,s,a,u,c,h,l,f,d,p,m,g,v,y,b,w,M,_,x,k,O=arguments;return J().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=n.verifier,o=n.verifierId,s=O.length>3&&void 0!==O[3]&&O[3],t.next=4,xt(e,i,o);case 4:if(t.t0=t.sent,t.t0){t.next=7;break}t.t0={};case 7:if(a=t.t0,u=a.keyResult,c=a.errorResult,h=!1,!c||!JSON.stringify(c).includes("Verifier + VerifierID has not yet been assigned")){t.next=26;break}if(s){t.next=14;break}throw new Error("Verifier + VerifierID has not yet been assigned");case 14:return t.next=16,Ot(e,r,void 0,void 0,i,o);case 16:return t.next=18,kt(e,i,o,1e3);case 18:if(t.t1=t.sent,t.t1){t.next=21;break}t.t1={};case 21:f=t.t1,l=f.keyResult,h=!0,t.next=31;break;case 26:if(!u){t.next=30;break}l=u,t.next=31;break;case 30:throw new Error("node results do not match at first lookup ".concat(JSON.stringify(u||{}),", ").concat(JSON.stringify(c||{})));case 31:if(!l){t.next=61;break}return d=l.keys[0],p=d.pub_key_X,m=d.pub_key_Y,t.prev=33,t.next=37,this.getOrSetNonce(p,m,void 0,!h);case 37:M=t.sent,g=M.typeOfUser,v=M.nonce,y=M.pubNonce,w=M.upgraded,v=new(Q())(v||"0",16),t.next=48;break;case 45:throw t.prev=45,t.t2=t.catch(33),new wt;case 48:if("v1"!==g){t.next=52;break}b=this.ec.keyFromPublic({x:p.toString(16),y:m.toString(16)}).getPublic().add(this.ec.keyFromPrivate(v.toString(16)).getPublic()),t.next=57;break;case 52:if("v2"!==g){t.next=56;break}b=this.ec.keyFromPublic({x:p.toString(16),y:m.toString(16)}).getPublic().add(this.ec.keyFromPublic({x:y.x,y:y.y}).getPublic()),t.next=57;break;case 56:throw new Error("getOrSetNonce should always return typeOfUser.");case 57:return _=b.getX().toString(16),x=b.getY().toString(16),k=this.generateAddressFromPubKey(b.getX(),b.getY()),t.abrupt("return",{typeOfUser:g,nonce:v,pubNonce:y,upgraded:w,X:_,Y:x,address:k});case 61:throw new Error("node results do not match at final lookup ".concat(JSON.stringify(u||{}),", ").concat(JSON.stringify(c||{})));case 62:case"end":return t.stop()}}),t,this,[[33,45]])}))),function(t,e,r){return f.apply(this,arguments)})},{key:"setCustomKey",value:(l=$(J().mark((function t(e){var r,n,i,o,s,a,u,c,h;return J().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.privKeyHex,n=e.metadataNonce,i=e.torusKeyHex,o=e.customKeyHex,i?s=new(Q())(i,16):(a=new(Q())(r,16),s=a.sub(n).umod(this.ec.curve.n)),u=new(Q())(o,16),c=u.sub(s).umod(this.ec.curve.n),h=this.generateMetadataParams(c.toString(16),s.toString(16)),t.next=7,this.setMetadata(h);case 7:case"end":return t.stop()}}),t,this)}))),function(t){return l.apply(this,arguments)})},{key:"retrieveShares",value:(h=$(J().mark((function t(e,r,n,i,s){var a,u,c,h,l,f,d,p,m,b=this,w=arguments;return J().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return a=w.length>5&&void 0!==w[5]?w[5]:{},u=[],t.next=4,g(this.allowHost,{headers:{verifier:n,verifier_id:i.verifier_id}},{useAPIKey:!0});case 4:for(c=(0,Y.oq)(),h=(0,Y.rc)(c).toString("hex"),l=h.slice(2,66),f=h.slice(66),d=(0,o.keccak256)(s),p=0;p<e.length;p+=1)m=v(e[p],y("CommitmentRequest",{messageprefix:"mug00",tokencommitment:d.slice(2),temppubx:l,temppuby:f,verifieridentifier:n})).catch((function(t){return mt.error("commitment",t)})),u.push(m);return t.abrupt("return",vt(u,(function(t){return t.filter((function(t){return!(!t||"object"!==V(t)||t.error)})).length>=3*~~(e.length/4)+1?Promise.resolve(t):Promise.reject(new Error("invalid ".concat(JSON.stringify(t))))})).then((function(t){for(var o=[],u=[],h=0;h<t.length;h+=1)t[h]&&u.push(t[h].result);for(var l=0;l<e.length;l+=1){var f=v(e[l],y("ShareRequest",{encrypted:"yes",item:[At(At({},i),{},{idtoken:s,nodesignatures:u,verifieridentifier:n},a)]})).catch((function(t){return mt.error("share req",t)}));o.push(f)}return vt(o,function(){var t=$(J().mark((function t(n,i){var o,s,a,u,h,l,f,d,p,m,g,v;return J().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(o=n.filter((function(t){return t})),s=_t(n.map((function(t){return t&&t.result&&t.result.keys[0].PublicKey})),1+~~(e.length/2)),!(o.length>=1+~~(e.length/2)&&s)){t.next=25;break}for(a=[],u=[],h=0;h<n.length;h+=1)n[h]&&n[h].result&&n[h].result.keys&&n[h].result.keys.length>0?(n[h].result.keys.sort((function(t,e){return new(Q())(t.Index,16).cmp(new(Q())(e.Index,16))})),n[h].result.keys[0].Metadata?(l={ephemPublicKey:Buffer.from(n[h].result.keys[0].Metadata.ephemPublicKey,"hex"),iv:Buffer.from(n[h].result.keys[0].Metadata.iv,"hex"),mac:Buffer.from(n[h].result.keys[0].Metadata.mac,"hex"),mode:Buffer.from(n[h].result.keys[0].Metadata.mode,"hex")},a.push((0,Y.pe)(c,At(At({},l),{},{ciphertext:Buffer.from(atob(n[h].result.keys[0].Share).padStart(64,"0"),"hex")})).catch((function(t){return mt.debug("share decryption",t)})))):a.push(Promise.resolve(Buffer.from(n[h].result.keys[0].Share.padStart(64,"0"),"hex")))):a.push(Promise.resolve(void 0)),u.push(new(Q())(r[h],16));return t.next=8,Promise.all(a);case 8:if(f=t.sent,!i.resolved){t.next=11;break}return t.abrupt("return",void 0);case 11:d=f.reduce((function(t,e,r){return e&&t.push({index:u[r],value:new(Q())(e)}),t}),[]),p=Mt(d.length,1+~~(e.length/2)),g=function(t){var e=p[t],r=d.filter((function(t,r){return e.includes(r)})),n=r.map((function(t){return t.value})),i=r.map((function(t){return t.index})),o=b.lagrangeInterpolation(n,i),a=(0,Y.rc)(Buffer.from(o.toString(16,64),"hex")).toString("hex"),u=a.slice(2,66),c=a.slice(66);if(0===new(Q())(u,16).cmp(new(Q())(s.X,16))&&0===new(Q())(c,16).cmp(new(Q())(s.Y,16)))return m=o,"break"},v=0;case 15:if(!(v<p.length)){t.next=22;break}if("break"!==g(v)){t.next=19;break}return t.abrupt("break",22);case 19:v+=1,t.next=15;break;case 22:if(void 0!==m){t.next=24;break}throw new Error("could not derive private key");case 24:return t.abrupt("return",m);case 25:throw new Error("invalid");case 26:case"end":return t.stop()}}),t)})));return function(e,r){return t.apply(this,arguments)}}())})).then(function(){var t=$(J().mark((function t(e){var r,n,i,o,s,a,u,c;return J().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r=e,n=(0,Y.rc)(Buffer.from(r.toString(16,64),"hex")).toString("hex"),i=n.slice(2,66),o=n.slice(66),!b.enableOneKey){t.next=12;break}return t.next=7,b.getNonce(i,o,r);case 7:a=t.sent,u=a.nonce,s=new(Q())(u||"0",16),t.next=15;break;case 12:return t.next=14,b.getMetadata({pub_key_X:i,pub_key_Y:o});case 14:s=t.sent;case 15:return mt.debug("> torus.js/retrieveShares",{privKey:r.toString(16),metadataNonce:s.toString(16)}),r=r.add(s).umod(b.ec.curve.n),c=b.generateAddressFromPrivKey(r),mt.debug("> torus.js/retrieveShares",{ethAddress:c,privKey:r.toString(16)}),t.abrupt("return",{ethAddress:c,privKey:r.toString("hex",64),metadataNonce:s});case 20:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()));case 11:case"end":return t.stop()}}),t,this)}))),function(t,e,r,n,i){return h.apply(this,arguments)})},{key:"getMetadata",value:(c=$(J().mark((function t(e,r){var n;return J().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,v("".concat(this.metadataHost,"/get"),e,r,{useAPIKey:!0});case 3:if((n=t.sent)&&n.message){t.next=6;break}return t.abrupt("return",new(Q())(0));case 6:return t.abrupt("return",new(Q())(n.message,16));case 9:return t.prev=9,t.t0=t.catch(0),mt.error("get metadata error",t.t0),t.abrupt("return",new(Q())(0));case 13:case"end":return t.stop()}}),t,this,[[0,9]])}))),function(t,e){return c.apply(this,arguments)})},{key:"generateMetadataParams",value:function(t,e){var r=this.ec.keyFromPrivate(e.toString("hex",64)),n={data:t,timestamp:new(Q())(~~(this.serverTimeOffset+Date.now()/1e3)).toString(16)},i=r.sign((0,o.keccak256)(rt()(n)).slice(2));return{pub_key_X:r.getPublic().getX().toString("hex"),pub_key_Y:r.getPublic().getY().toString("hex"),set_data:n,signature:Buffer.from(i.r.toString(16,64)+i.s.toString(16,64)+new(Q())(i.v).toString(16,2),"hex").toString("base64")}}},{key:"setMetadata",value:(u=$(J().mark((function t(e,r){var n;return J().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,v("".concat(this.metadataHost,"/set"),e,r,{useAPIKey:!0});case 3:return n=t.sent,t.abrupt("return",n.message);case 7:return t.prev=7,t.t0=t.catch(0),mt.error("set metadata error",t.t0),t.abrupt("return","");case 11:case"end":return t.stop()}}),t,this,[[0,7]])}))),function(t,e){return u.apply(this,arguments)})},{key:"lagrangeInterpolation",value:function(t,e){if(t.length!==e.length)return null;for(var r=new(Q())(0),n=0;n<t.length;n+=1){for(var i=new(Q())(1),o=new(Q())(1),s=0;s<t.length;s+=1)if(n!==s){i=(i=i.mul(e[s].neg())).umod(this.ec.curve.n);var a=e[n].sub(e[s]);a=a.umod(this.ec.curve.n),o=o.mul(a).umod(this.ec.curve.n)}var u=i.mul(o.invm(this.ec.curve.n)).umod(this.ec.curve.n);u=u.mul(t[n]).umod(this.ec.curve.n),r=r.add(u)}return r.umod(this.ec.curve.n)}},{key:"generateAddressFromPrivKey",value:function(t){var e=this.ec.keyFromPrivate(t.toString("hex",64),"hex").getPublic().encode("hex").slice(2),r="0x".concat((0,o.keccak256)(Buffer.from(e,"hex")).slice(26));return(0,o.toChecksumAddress)(r)}},{key:"generateAddressFromPubKey",value:function(t,e){var r=this.ec.keyFromPublic({x:t.toString("hex",64),y:e.toString("hex",64)}).getPublic().encode("hex").slice(2),n="0x".concat((0,o.keccak256)(Buffer.from(r,"hex")).slice(26));return(0,o.toChecksumAddress)(n)}},{key:"getPublicAddress",value:(a=$(J().mark((function t(e,r,n){var i,o,s,a,u,c,h,l,f,d,p,m,g,v,y,b,w,M,_,x,k=arguments;return J().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=n.verifier,o=n.verifierId,s=k.length>3&&void 0!==k[3]&&k[3],mt.debug("> torus.js/getPublicAddress",{endpoints:e,torusNodePubs:r,verifier:i,verifierId:o,isExtended:s}),u=!1,t.next=6,xt(e,i,o);case 6:if(t.t0=t.sent,t.t0){t.next=9;break}t.t0={};case 9:if(c=t.t0,h=c.keyResult,!(l=c.errorResult)||!JSON.stringify(l).includes("Verifier + VerifierID has not yet been assigned")){t.next=25;break}return t.next=15,Ot(e,r,void 0,void 0,i,o);case 15:return t.next=17,kt(e,i,o,1e3);case 17:if(t.t1=t.sent,t.t1){t.next=20;break}t.t1={};case 20:f=t.t1,a=f.keyResult,u=!0,t.next=30;break;case 25:if(!h){t.next=29;break}a=h,t.next=30;break;case 29:throw new Error("node results do not match at first lookup ".concat(JSON.stringify(h||{}),", ").concat(JSON.stringify(l||{})));case 30:if(mt.debug("> torus.js/getPublicAddress",{finalKeyResult:a,isNewKey:u}),!a){t.next=72;break}if(p=a.keys[0],m=p.pub_key_X,g=p.pub_key_Y,!this.enableOneKey){t.next=60;break}return t.prev=34,t.next=38,this.getOrSetNonce(m,g,void 0,!u);case 38:_=t.sent,v=_.typeOfUser,y=_.nonce,b=_.pubNonce,M=_.upgraded,y=new(Q())(y||"0",16),t.next=49;break;case 46:throw t.prev=46,t.t2=t.catch(34),new wt;case 49:if("v1"!==v){t.next=53;break}w=this.ec.keyFromPublic({x:m.toString(16),y:g.toString(16)}).getPublic().add(this.ec.keyFromPrivate(y.toString(16)).getPublic()),t.next=58;break;case 53:if("v2"!==v){t.next=57;break}w=M?this.ec.keyFromPublic({x:m.toString(16),y:g.toString(16)}).getPublic():this.ec.keyFromPublic({x:m.toString(16),y:g.toString(16)}).getPublic().add(this.ec.keyFromPublic({x:b.x,y:b.y}).getPublic()),t.next=58;break;case 57:throw new Error("getOrSetNonce should always return typeOfUser.");case 58:t.next=65;break;case 60:return v="v1",t.next=63,this.getMetadata({pub_key_X:m,pub_key_Y:g});case 63:y=t.sent,w=this.ec.keyFromPublic({x:m.toString(16),y:g.toString(16)}).getPublic().add(this.ec.keyFromPrivate(y.toString(16)).getPublic());case 65:if(m=w.getX().toString(16),g=w.getY().toString(16),x=this.generateAddressFromPubKey(w.getX(),w.getY()),mt.debug("> torus.js/getPublicAddress",{X:m,Y:g,address:x,typeOfUser:v,nonce:null===(d=y)||void 0===d?void 0:d.toString(16),pubNonce:b}),s){t.next=71;break}return t.abrupt("return",x);case 71:return t.abrupt("return",{typeOfUser:v,address:x,X:m,Y:g,metadataNonce:y,pubNonce:b});case 72:throw new Error("node results do not match at final lookup ".concat(JSON.stringify(h||{}),", ").concat(JSON.stringify(l||{})));case 73:case"end":return t.stop()}}),t,this,[[34,46]])}))),function(t,e,r){return a.apply(this,arguments)})},{key:"getOrSetNonce",value:(s=$(J().mark((function t(e,r,n){var i,o,s,a=arguments;return J().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=a.length>3&&void 0!==a[3]&&a[3],s=i?"getNonce":"getOrSetNonce",o=n?this.generateMetadataParams(s,n):{pub_key_X:e,pub_key_Y:r,set_data:{data:s}},t.abrupt("return",v("".concat(this.metadataHost,"/get_or_set_nonce"),o,void 0,{useAPIKey:!0}));case 4:case"end":return t.stop()}}),t,this)}))),function(t,e,r){return s.apply(this,arguments)})},{key:"getNonce",value:(i=$(J().mark((function t(e,r,n){return J().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",this.getOrSetNonce(e,r,n,!0));case 1:case"end":return t.stop()}}),t,this)}))),function(t,e,r){return i.apply(this,arguments)})},{key:"getPostboxKeyFrom1OutOf1",value:function(t,e){var r=new(Q())(t,16),n=new(Q())(e,16);return r.sub(n).umod(this.ec.curve.n).toString("hex")}}])&&K(e.prototype,r),n&&K(e,n),t}(),jt=r(12724),Tt=r(79826),Pt=r(64063),Ct=r.n(Pt);function It(t){return null!==t&&"object"==typeof t&&"function"==typeof t.pipe}var Bt=r(23482),Nt=r.n(Bt);function Rt(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))}const Lt={GOOGLE:"google",FACEBOOK:"facebook",TWITCH:"twitch",REDDIT:"reddit",DISCORD:"discord"},Ft={[Lt.GOOGLE]:"tkey-google",[Lt.FACEBOOK]:"tkey-facebook",[Lt.TWITCH]:"tkey-twitch",[Lt.REDDIT]:"tkey-reddit",[Lt.DISCORD]:"tkey-discord"},Dt={MOONPAY:"moonpay",WYRE:"wyre",RAMPNETWORK:"rampnetwork",XANPOOL:"xanpool",MERCURYO:"mercuryo",TRANSAK:"transak"},qt={PRODUCTION:"production",DEVELOPMENT:"development",BINANCE:"binance",TESTING:"testing",LRC:"lrc",BETA:"beta"},Ut={BOTTOM_LEFT:"bottom-left",TOP_LEFT:"top-left",BOTTOM_RIGHT:"bottom-right",TOP_RIGHT:"top-right"},Ht={[Dt.RAMPNETWORK]:{line1:"Debit Card/ Apple Pay/ Bank transfer",line2:"0.49% - 2.9%",line3:"5,000€/purchase, 20,000€/mo",supportPage:"https://instant.ramp.network/",minOrderValue:50,maxOrderValue:2e4,validCurrencies:["GBP","EUR","USD"],validCryptoCurrencies:["ETH","DAI","USDC","BSC_BNB"],includeFees:!0,enforceMax:!1},[Dt.MOONPAY]:{line1:"Credit / Debit Card / Apple Pay",line2:"4.5% or 5 USD",line3:"2,000€/day, 10,000€/mo",supportPage:"https://help.moonpay.io/en/",minOrderValue:24.99,maxOrderValue:5e4,validCurrencies:["USD","EUR","GBP","AUD","CAD","SGD","RUB"],validCryptoCurrencies:["ETH","DAI","TUSD","USDC","USDT","BNB_BSC","BUSD_BSC"],includeFees:!0,enforceMax:!1},[Dt.WYRE]:{line1:"Apple Pay/ Debit/ Credit Card",line2:"4.9% + 30¢ or 5 USD",line3:"$250/day",supportPage:"https://support.sendwyre.com/en/",minOrderValue:5,maxOrderValue:500,validCurrencies:["USD","AUD","CAD","GBP","EUR"],validCryptoCurrencies:["ETH","DAI","USDC","USDT"],includeFees:!1,enforceMax:!1},[Dt.XANPOOL]:{line1:"PayNow/ InstaPay/ FPS/ GoJekPay/ UPI/ PromptPay/ VietelPay/ DuitNow",line2:"2.5% buying, 3% selling",line3:"$2,500 / day",supportPage:"mailto:support@xanpool.com",minOrderValue:100,maxOrderValue:2500,validCurrencies:["SGD","HKD","MYR","PHP","INR","VND","THB","IDR"],validCryptoCurrencies:["ETH","USDT"],includeFees:!0,sell:!0,enforceMax:!1},[Dt.MERCURYO]:{line1:"Credit/ Debit Card/ Apple Pay",line2:"3.95% or 4 USD",line3:"10,000€/day, 25,000€/mo",supportPage:"mailto:support@mercuryo.io",minOrderValue:30,maxOrderValue:5e3,validCurrencies:["USD","EUR","RUB","TRY","GBP","UAH"],validCryptoCurrencies:["ETH","DAI","BAT","USDT","OKB"],includeFees:!0,enforceMax:!1},[Dt.TRANSAK]:{line1:"Credit/ Debit Card/ <br/>Bank Transfer (sepa/gbp)",line2:"0.99% - 5.5% or 5 USD",line3:"500€/day",supportPage:"https://support.transak.com/hc/en-US",minOrderValue:20,maxOrderValue:500,validCurrencies:["USD","EUR","GBP","AUD","CAD","SGD"],validCryptoCurrencies:["ETH","DAI","USDC","USDT"],includeFees:!0,enforceMax:!1}};var zt={supportedVerifierList:[Lt.GOOGLE,Lt.REDDIT,Lt.DISCORD],paymentProviders:Ht,api:"https://api.tor.us",translations:{en:{embed:{continue:"Continue",actionRequired:"Authorization required",pendingAction:"Click continue to proceed with your request in a popup",cookiesRequired:"Cookies Required",enableCookies:"Please enable cookies in your browser preferences to access Torus",clickHere:"More Info"}},de:{embed:{continue:"Fortsetzen",actionRequired:"Autorisierung erforderlich",pendingAction:"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren",cookiesRequired:"Cookies benötigt",enableCookies:"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen",clickHere:"Mehr Info"}},ja:{embed:{continue:"継続する",actionRequired:"認証が必要です",pendingAction:"続行をクリックして、ポップアップでリクエストを続行します",cookiesRequired:"必要なクッキー",enableCookies:"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。",clickHere:"詳しくは"}},ko:{embed:{continue:"계속하다",actionRequired:"승인 필요",pendingAction:"팝업에서 요청을 진행하려면 계속을 클릭하십시오.",cookiesRequired:"쿠키 필요",enableCookies:"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.",clickHere:"더 많은 정보"}},zh:{embed:{continue:"继续",actionRequired:"需要授权",pendingAction:"单击继续以在弹出窗口中继续您的请求",cookiesRequired:"必填Cookie",enableCookies:"请在您的浏览器首选项中启用cookie以访问Torus。",clickHere:"更多信息"}}},prodTorusUrl:"",localStorageKey:`torus-${window.location.hostname}`};const Vt=t=>new Promise(((e,r)=>{null!=window.document.body?Promise.resolve(t()).then(e).catch(r):window.document.addEventListener("DOMContentLoaded",(()=>{Promise.resolve(t()).then(e).catch(r)}))})),Wt=t=>{const e=window.document.createElement("template"),r=t.trim();return e.innerHTML=r,e.content.firstChild},$t=(t,e,r)=>{const n=i=>{r(i),t.removeListener(e,n)};t.on(e,n)};var Gt=it().getLogger("torus-embed"),Kt={errors:{disconnected:()=>"Torus: Lost connection to Torus.",permanentlyDisconnected:()=>"Torus: Disconnected from iframe. Page reload required.",sendSiteMetadata:()=>"Torus: Failed to send site metadata. This is an internal error, please report this bug.",unsupportedSync:t=>`Torus: The Torus Ethereum provider does not support synchronous methods like ${t} without a callback parameter.`,invalidDuplexStream:()=>"Must provide a Node.js-style duplex stream.",invalidOptions:(t,e)=>`Invalid options. Received: { maxEventListeners: ${t}, shouldSendMetadata: ${e} }`,invalidRequestArgs:()=>"Expected a single, non-array, object argument.",invalidRequestMethod:()=>"'args.method' must be a non-empty string.",invalidRequestParams:()=>"'args.params' must be an object or array if provided.",invalidLoggerObject:()=>"'args.logger' must be an object if provided.",invalidLoggerMethod:t=>`'args.logger' must include required method '${t}'.`},info:{connected:t=>`Torus: Connected to chain with ID "${t}".`},warnings:{enableDeprecation:'Torus: ""ethereum.enable()" is deprecated and may be removed in the future. Please use "ethereum.send("eth_requestAccounts")" instead. For more information, see: https://eips.ethereum.org/EIPS/eip-1102',sendDeprecation:'Torus: "ethereum.send(...)" is deprecated and may be removed in the future. Please use "ethereum.sendAsync(...)" or "ethereum.request(...)" instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193',events:{close:'Torus: The event "close" is deprecated and may be removed in the future. Please use "disconnect" instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193',data:'Torus: The event "data" is deprecated and will be removed in the future.Use "message" instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#message',networkChanged:'Torus: The event "networkChanged" is deprecated and may be removed in the future. Please use "chainChanged" instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193',notification:'Torus: The event "notification" is deprecated and may be removed in the future. Please use "message" instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193'},publicConfigStore:'Torus: The property "publicConfigStore" is deprecated and WILL be removed in the future.'}};const{paymentProviders:Zt}=zt;function Jt(t,e,r){let n=`MetaMask: Lost connection to "${t}".`;(null==e?void 0:e.stack)&&(n+=`\n${e.stack}`),Gt.warn(n),r&&r.listenerCount("error")>0&&r.emit("error",n)}const Yt=()=>Math.random().toString(36).slice(2),Xt=(t,e)=>Rt(void 0,void 0,void 0,(function*(){let r,n;let i=e.version||"1.18.6";try{if(("binance"===t||"production"===t)&&!e.version){let t;t=zt.prodTorusUrl?{data:zt.prodTorusUrl}:yield g(`${zt.api}/latestversion?name=@toruslabs/torus-embed&version=1.18.6`,{},{useAPIKey:!0}),i=t.data,zt.prodTorusUrl=t.data}}catch(t){Gt.error(t,"unable to fetch latest version")}switch(Gt.info("version used: ",i),t){case"binance":r=`https://binance.tor.us/v${i}`,n="info";break;case"testing":r="https://testing.tor.us",n="debug";break;case"lrc":r="https://lrc.tor.us",n="debug";break;case"beta":r="https://beta.tor.us",n="debug";break;case"development":r="http://localhost:4050",n="debug";break;default:r=`https://app.tor.us/v${i}`,n="error"}return{torusUrl:r,logLevel:n}})),Qt=()=>{let t=window.navigator.language||"en-US";const e=t.split("-");return t=Object.prototype.hasOwnProperty.call(zt.translations,e[0])?e[0]:"en",t},te=["eth_subscription"],ee=()=>{},re="directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=660,width=375",ne="directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=700,width=450";R.defaultMaxListeners=100;const ie=(t,e,r=!0)=>(n,i)=>n||i.error?e(n||i.error):!r||Array.isArray(i)?t(i):t(i.result);class oe extends R{constructor(t,{maxEventListeners:e=100,shouldSendMetadata:r=!0,jsonRpcStreamName:n="provider"}={}){if(super(),this._sentWarnings={enable:!1,experimentalMethods:!1,send:!1,publicConfigStore:!1,events:{close:!1,data:!1,networkChanged:!1,notification:!1}},!function(t){return It(t)&&!1!==t.writable&&"function"==typeof t._write&&"object"==typeof t._writableState}(i=t)||!function(t){return It(t)&&!1!==t.readable&&"function"==typeof t._read&&"object"==typeof t._readableState}(i))throw new Error(Kt.errors.invalidDuplexStream());var i;this.isTorus=!0,this.setMaxListeners(e),this._state=Object.assign({},oe._defaultState),this.selectedAddress=null,this.networkVersion=null,this.chainId=null,this.shouldSendMetadata=r,this._handleAccountsChanged=this._handleAccountsChanged.bind(this),this._handleChainChanged=this._handleChainChanged.bind(this),this._handleUnlockStateChanged=this._handleUnlockStateChanged.bind(this),this._handleConnect=this._handleConnect.bind(this),this._handleDisconnect=this._handleDisconnect.bind(this),this._handleStreamDisconnect=this._handleStreamDisconnect.bind(this),this._sendSync=this._sendSync.bind(this),this._rpcRequest=this._rpcRequest.bind(this),this._warnOfDeprecation=this._warnOfDeprecation.bind(this),this._initializeState=this._initializeState.bind(this),this.request=this.request.bind(this),this.send=this.send.bind(this),this.sendAsync=this.sendAsync.bind(this);const o=new H;T()(t,o,t,this._handleStreamDisconnect.bind(this,"MetaMask")),this._publicConfigStore=new jt.ObservableStore({storageKey:"Metamask-Config"}),T()(o.createStream("publicConfig"),(0,jt.storeAsStream)(this._publicConfigStore),Jt.bind(this,"MetaMask PublicConfigStore")),o.ignoreStream("phishing"),this.on("connect",(()=>{this._state.isConnected=!0}));const s=function(){const t={},e=new R,r=new b.Duplex({objectMode:!0,read:function(){return!1},write:function(r,n,i){let o;try{r.id?function(e){const r=t[e.id];if(!r)throw new Error(`StreamMiddleware - Unknown response id "${e.id}"`);delete t[e.id],Object.assign(r.res,e),setTimeout(r.end)}(r):function(t){e.emit("notification",t)}(r)}catch(t){o=t}i(o)}});return{events:e,middleware:(e,n,i,o)=>{r.push(e),t[e.id]={req:e,res:n,next:i,end:o}},stream:r}}();T()(s.stream,o.createStream(n),s.stream,this._handleStreamDisconnect.bind(this,"MetaMask RpcProvider"));const a=new D;a.push(((t,e,r,n)=>{const i=t.id,o=M()(32).toString("hex");t.id=o,e.id=o,r((r=>{t.id=i,e.id=i,r()}))})),a.push(((t,e,r)=>{"string"==typeof t.method&&t.method||(e.error=Tt.ethErrors.rpc.invalidRequest({message:"The request 'method' must be a non-empty string.",data:t})),r((t=>{const{error:r}=e;return r?(Gt.error(`MetaMask - RPC Error: ${r.message}`,r),t()):t()}))})),a.push(s.middleware),this._rpcEngine=a,s.events.on("notification",(t=>{const{method:e,params:r}=t;"wallet_accountsChanged"===e?this._handleAccountsChanged(r):"wallet_unlockStateChanged"===e?this._handleUnlockStateChanged(r):"wallet_chainChanged"===e?this._handleChainChanged(r):te.includes(t.method)&&(this.emit("data",t),this.emit("notification",r.result),this.emit("message",{type:e,data:r}))}))}get publicConfigStore(){return this._sentWarnings.publicConfigStore||(Gt.warn(Kt.warnings.publicConfigStore),this._sentWarnings.publicConfigStore=!0),this._publicConfigStore}isConnected(){return this._state.isConnected}request(t){return Rt(this,void 0,void 0,(function*(){if(!t||"object"!=typeof t||Array.isArray(t))throw Tt.ethErrors.rpc.invalidRequest({message:Kt.errors.invalidRequestArgs(),data:t});const{method:e,params:r}=t;if("string"!=typeof e||0===e.length)throw Tt.ethErrors.rpc.invalidRequest({message:Kt.errors.invalidRequestMethod(),data:t});if(void 0!==r&&!Array.isArray(r)&&("object"!=typeof r||null===r))throw Tt.ethErrors.rpc.invalidRequest({message:Kt.errors.invalidRequestParams(),data:t});return new Promise(((t,n)=>{this._rpcRequest({method:e,params:r},ie(t,n))}))}))}sendAsync(t,e){this._rpcRequest(t,e)}addListener(t,e){return this._warnOfDeprecation(t),super.addListener(t,e)}on(t,e){return this._warnOfDeprecation(t),super.on(t,e)}once(t,e){return this._warnOfDeprecation(t),super.once(t,e)}prependListener(t,e){return this._warnOfDeprecation(t),super.prependListener(t,e)}prependOnceListener(t,e){return this._warnOfDeprecation(t),super.prependOnceListener(t,e)}_initializeState(){return Rt(this,void 0,void 0,(function*(){try{const{accounts:t,chainId:e,isUnlocked:r,networkVersion:n}=yield this.request({method:"wallet_getProviderState"});this.emit("connect",{chainId:e}),this._handleChainChanged({chainId:e,networkVersion:n}),this._handleUnlockStateChanged({accounts:t,isUnlocked:r}),this._handleAccountsChanged(t)}catch(t){Gt.error("MetaMask: Failed to get initial state. Please report this bug.",t)}finally{Gt.info("initialized state"),this._state.initialized=!0,this.emit("_initialized")}}))}_rpcRequest(t,e,r=!1){let n=e;const i=t;if(!Array.isArray(i))if(i.jsonrpc||(i.jsonrpc="2.0"),"eth_accounts"===i.method||"eth_requestAccounts"===i.method)n=(t,n)=>{this._handleAccountsChanged(n.result||[],"eth_accounts"===i.method,r),e(t,n)};else if("wallet_getProviderState"===i.method)return void this._rpcEngine.handle(t,n);this.tryPreopenHandle(i,n)}send(t,e){return this._sentWarnings.send||(Gt.warn(Kt.warnings.sendDeprecation),this._sentWarnings.send=!0),"string"!=typeof t||e&&!Array.isArray(e)?t&&"object"==typeof t&&"function"==typeof e?this._rpcRequest(t,e):this._sendSync(t):new Promise(((r,n)=>{try{this._rpcRequest({method:t,params:e},ie(r,n,!1))}catch(t){n(t)}}))}_sendSync(t){let e;switch(t.method){case"eth_accounts":e=this.selectedAddress?[this.selectedAddress]:[];break;case"eth_coinbase":e=this.selectedAddress||null;break;case"eth_uninstallFilter":this._rpcRequest(t,ee),e=!0;break;case"net_version":e=this.networkVersion||null;break;default:throw new Error(Kt.errors.unsupportedSync(t.method))}return{id:t.id,jsonrpc:t.jsonrpc,result:e}}_handleConnect(t){this._state.isConnected||(this._state.isConnected=!0,this.emit("connect",{chainId:t}),Gt.debug(Kt.info.connected(t)))}_handleDisconnect(t,e){if(this._state.isConnected||!this._state.isPermanentlyDisconnected&&!t){let r;this._state.isConnected=!1,t?(r=new Tt.EthereumRpcError(1013,e||Kt.errors.disconnected()),Gt.debug(r)):(r=new Tt.EthereumRpcError(1011,e||Kt.errors.permanentlyDisconnected()),Gt.error(r),this.chainId=null,this._state.accounts=null,this.selectedAddress=null,this._state.isUnlocked=!1,this._state.isPermanentlyDisconnected=!0),this.emit("disconnect",r)}}_handleStreamDisconnect(t,e){Jt(t,e,this),this._handleDisconnect(!1,e?e.message:void 0)}_handleAccountsChanged(t,e=!1,r=!1){let n=t;Array.isArray(n)||(Gt.error("MetaMask: Received non-array accounts parameter. Please report this bug.",n),n=[]);for(const e of t)if("string"!=typeof e){Gt.error("MetaMask: Received non-string account. Please report this bug.",t),n=[];break}Ct()(this._state.accounts,n)||(e&&Array.isArray(this._state.accounts)&&this._state.accounts.length>0&&!r&&Gt.error('MetaMask: "eth_accounts" unexpectedly updated accounts. Please report this bug.',n),this._state.accounts=n,this.emit("accountsChanged",n)),this.selectedAddress!==n[0]&&(this.selectedAddress=n[0]||null)}_handleChainChanged({chainId:t,networkVersion:e}={}){t&&e?"loading"===e?this._handleDisconnect(!0):(this._handleConnect(t),t!==this.chainId&&(this.chainId=t,this._state.initialized&&this.emit("chainChanged",this.chainId))):Gt.error("MetaMask: Received invalid network parameters. Please report this bug.",{chainId:t,networkVersion:e})}_handleUnlockStateChanged({accounts:t,isUnlocked:e}={}){"boolean"==typeof e?e!==this._state.isUnlocked&&(this._state.isUnlocked=e,this._handleAccountsChanged(t||[])):Gt.error("MetaMask: Received invalid isUnlocked parameter. Please report this bug.",{isUnlocked:e})}_warnOfDeprecation(t){!1===this._sentWarnings.events[t]&&(Gt.warn(Kt.warnings.events[t]),this._sentWarnings.events[t]=!0)}}oe._defaultState={accounts:null,isConnected:!1,isUnlocked:!1,initialized:!1,isPermanentlyDisconnected:!1,hasEmittedConnection:!1};const se=(t,e)=>{const r={};return t.algorithms.forEach((t=>{r[t]=Nt()(t).update(e,"utf8").digest("base64")})),r};class ae extends _.EventEmitter{constructor({url:t,target:e,features:r}){super(),this.url=t,this.target=e||"_blank",this.features=r||function(){const t=void 0!==window.screenLeft?window.screenLeft:window.screenX,e=void 0!==window.screenTop?window.screenTop:window.screenY,r=window.innerWidth?window.innerWidth:document.documentElement.clientWidth?document.documentElement.clientWidth:window.screen.width,n=window.innerHeight?window.innerHeight:document.documentElement.clientHeight?document.documentElement.clientHeight:window.screen.height,i=Math.abs((r-1200)/2/1+t);return`titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=700,width=1200,top=${Math.abs((n-700)/2/1+e)},left=${i}`}(),this.window=void 0,this.windowTimer=void 0,this.iClosedWindow=!1,this._setupTimer()}_setupTimer(){this.windowTimer=Number(setInterval((()=>{this.window&&this.window.closed&&(clearInterval(this.windowTimer),this.iClosedWindow||this.emit("close"),this.iClosedWindow=!1,this.window=void 0),void 0===this.window&&clearInterval(this.windowTimer)}),500))}open(){var t;return this.window=window.open(this.url.href,this.target,this.features),(null===(t=this.window)||void 0===t?void 0:t.focus)&&this.window.focus(),Promise.resolve()}close(){this.iClosedWindow=!0,this.window&&this.window.close()}redirect(t){t?window.location.replace(this.url.href):window.location.href=this.url.href}}function ue(t){return new Promise(((e,r)=>{try{const r=document.createElement("img");r.onload=()=>e(!0),r.onerror=()=>e(!1),r.src=t}catch(t){r(t)}}))}const ce=t=>{const{document:e}=t,r=e.querySelector('head > meta[property="og:site_name"]');if(r)return r.content;const n=e.querySelector('head > meta[name="title"]');return n?n.content:e.title&&e.title.length>0?e.title:t.location.hostname};function he(t){return Rt(this,void 0,void 0,(function*(){const{document:e}=t;let r=e.querySelector('head > link[rel="shortcut icon"]');return r&&(yield ue(r.href))?r.href:(r=Array.from(e.querySelectorAll('head > link[rel="icon"]')).find((t=>Boolean(t.href))),r&&(yield ue(r.href))?r.href:null)}))}const le={[Lt.GOOGLE]:!0,[Lt.FACEBOOK]:!0,[Lt.REDDIT]:!0,[Lt.TWITCH]:!0,[Lt.DISCORD]:!0},fe="sha384-S0TXaSCX5RwoXnfccta4phouwN1NNRtIFNII5DGoK4apkT5XXJ4FHPN/eFZgDxuW",de=["eth_sendTransaction","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","personal_sign","eth_getEncryptionPublicKey","eth_decrypt"],pe=function(t){let e;try{e=window.localStorage;const t="__storage_test__";return e.setItem(t,t),e.removeItem(t),!0}catch(t){return t&&(22===t.code||1014===t.code||"QuotaExceededError"===t.name||"NS_ERROR_DOM_QUOTA_REACHED"===t.name)&&e&&0!==e.length}}();!function(){Rt(this,void 0,void 0,(function*(){try{if("undefined"==typeof document)return;const t=document.createElement("link"),{torusUrl:e}=yield Xt("production",{check:!1,hash:fe,version:""});t.href=`${e}/popup`,t.crossOrigin="anonymous",t.type="text/html",t.rel="prefetch",t.relList&&t.relList.supports&&t.relList.supports("prefetch")&&document.head.appendChild(t)}catch(t){Gt.warn(t)}}))}();class me{constructor({buttonPosition:t=Ut.BOTTOM_LEFT,modalZIndex:e=99999,apiKey:r="torus-default"}={}){this.buttonPosition=Ut.BOTTOM_LEFT,this.paymentProviders=zt.paymentProviders,this.buttonPosition=t,this.torusUrl="",this.isLoggedIn=!1,this.isInitialized=!1,this.torusWidgetVisibility=!0,this.requestedVerifier="",this.currentVerifier="",this.nodeDetailManager=new u,this.torusJs=new Et({metadataHost:"https://metadata.tor.us",allowHost:"https://signer.tor.us/api/allow"}),this.apiKey=r,Et.setAPIKey(r),p(r),this.modalZIndex=e,this.alertZIndex=e+1e3,this.isIframeFullScreen=!1,this.dappStorageKey=""}init({buildEnv:t=qt.PRODUCTION,enableLogging:e=!1,enabledVerifiers:r=le,network:n={host:"mainnet",chainId:null,networkName:"",blockExplorer:"",ticker:"",tickerName:""},loginConfig:i={},showTorusButton:o=!0,integrity:s={check:!1,hash:fe,version:""},whiteLabel:a,skipTKey:u=!1,useLocalStorage:c=!1}={}){return Rt(this,void 0,void 0,(function*(){if(this.isInitialized)throw new Error("Already initialized");const{torusUrl:l,logLevel:f}=yield Xt(t,s);Gt.info(l,"url loaded"),this.torusUrl=l,this.whiteLabel=a,Gt.setDefaultLevel(f),e?Gt.enableAll():Gt.disableAll(),this.torusWidgetVisibility=o;let d="";if(pe&&c){const t=window.localStorage.getItem(zt.localStorageKey);if(t)d=t;else{const t=`torus-app-${Yt()}`;window.localStorage.setItem(zt.localStorageKey,t),d=t}}this.dappStorageKey=d;const p=new URL(l);p.pathname.endsWith("/")?p.pathname+="popup":p.pathname+="/popup",d&&(p.hash=`#dappStorageKey=${d}`),this.torusIframe=Wt(`<iframe\n        id="torusIframe"\n        class="torusIframe"\n        src="${p.href}"\n        style="display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ${this.modalZIndex}"\n      ></iframe>`),this.torusAlertContainer=Wt('<div id="torusAlertContainer"></div>'),this.torusAlertContainer.style.display="none",this.torusAlertContainer.style.setProperty("z-index",this.alertZIndex.toString());const m=window.document.createElement("link");m.setAttribute("rel","stylesheet"),m.setAttribute("type","text/css"),m.setAttribute("href",`${l}/css/widget.css`),this.styleLink=m;const{defaultLanguage:g=Qt(),customTranslations:v={}}=this.whiteLabel||{},y=h()(zt.translations,v)[g]||zt.translations[Qt()];this.embedTranslations=y.embed;const b=()=>Rt(this,void 0,void 0,(function*(){return yield function(){return Rt(this,void 0,void 0,(function*(){return new Promise((t=>{"loading"!==document.readyState?t():((t,e,r,...n)=>{const i=()=>{r(...n),t.removeEventListener(e,i)};t.addEventListener(e,i)})(document,"DOMContentLoaded",t)}))}))}(),new Promise(((t,e)=>{this.torusIframe.onload=()=>Rt(this,void 0,void 0,(function*(){this._setupWeb3();const o=this.communicationMux.getStream("init_stream");o.on("data",(r=>{const{name:n,data:i,error:o}=r;"init_complete"===n&&i.success?(this.isInitialized=!0,this._displayIframe(this.isIframeFullScreen),t(void 0)):o&&e(new Error(o))})),o.write({name:"init_stream",data:{enabledVerifiers:r,loginConfig:i,whiteLabel:this.whiteLabel,buttonPosition:this.buttonPosition,torusWidgetVisibility:this.torusWidgetVisibility,apiKey:this.apiKey,skipTKey:u,network:n}})})),window.document.head.appendChild(this.styleLink),window.document.body.appendChild(this.torusIframe),window.document.body.appendChild(this.torusAlertContainer)}))}));if("production"===t&&s.check){const t=`${l}/popup`,e=yield fetch(t,{cache:"reload"});if("max-age=3600"!==e.headers.get("Cache-Control"))throw new Error(`Unexpected Cache-Control headers, got ${e.headers.get("Cache-Control")}`);const r=((t,e)=>{const r=(t=>({algorithms:t.algorithms||["sha256"],delimiter:t.delimiter||" ",full:t.full||!1}))(t),n={hashes:se(r,e),integrity:void 0};return n.integrity=((t,e)=>{let r="";return r+=Object.keys(e.hashes).map((t=>`${t}-${e.hashes[t]}`)).join(t.delimiter),r})(r,n),r.full?n:n.integrity})({algorithms:["sha384"]},yield e.text());if(Gt.info(r,"integrity"),r!==s.hash)throw this.clearInit(),new Error("Integrity check failed");yield b()}else yield b()}))}login({verifier:t=""}={}){if(!this.isInitialized)throw new Error("Call init() first");return this.requestedVerifier=t,this.ethereum.enable()}logout(){return new Promise(((t,e)=>{if(!this.isLoggedIn)return void e(new Error("User has not logged in yet"));this.communicationMux.getStream("logout").write({name:"logOut"});const r=this.communicationMux.getStream("status");$t(r,"data",(r=>{r.loggedIn?e(new Error("Some Error Occured")):(this.isLoggedIn=!1,this.currentVerifier="",this.requestedVerifier="",t())}))}))}cleanUp(){return Rt(this,void 0,void 0,(function*(){this.isLoggedIn&&(yield this.logout()),this.clearInit()}))}clearInit(){function t(t){return t instanceof Element||t instanceof HTMLDocument}t(this.styleLink)&&window.document.body.contains(this.styleLink)&&(this.styleLink.remove(),this.styleLink=void 0),t(this.torusIframe)&&window.document.body.contains(this.torusIframe)&&(this.torusIframe.remove(),this.torusIframe=void 0),t(this.torusAlertContainer)&&window.document.body.contains(this.torusAlertContainer)&&(this.torusAlert=void 0,this.torusAlertContainer.remove(),this.torusAlertContainer=void 0),this.isInitialized=!1}hideTorusButton(){this.torusWidgetVisibility=!1,this._sendWidgetVisibilityStatus(!1),this._displayIframe()}showTorusButton(){this.torusWidgetVisibility=!0,this._sendWidgetVisibilityStatus(!0),this._displayIframe()}setProvider(t={}){var{host:e="mainnet",chainId:r=null,networkName:n=""}=t,i=function(t,e){var r={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.indexOf(n)<0&&(r[n]=t[n]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(t);i<n.length;i++)e.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(t,n[i])&&(r[n[i]]=t[n[i]])}return r}(t,["host","chainId","networkName"]);return new Promise(((t,o)=>{const s=this.communicationMux.getStream("provider_change");$t(s,"data",(e=>{const{err:r,success:n}=e.data;Gt.info(e),r?o(r):n?t():o(new Error("some error occured"))}));const a=Yt();this._handleWindow(a,{target:"_blank",features:re}),s.write({name:"show_provider_change",data:{network:Object.assign({host:e,chainId:r,networkName:n},i),preopenInstanceId:a,override:!1}})}))}showWallet(t,e={}){const r=this.communicationMux.getStream("show_wallet"),n=t?`/${t}`:"";r.write({name:"show_wallet",data:{path:n}}),$t(r,"data",(t=>{if("show_wallet_instance"===t.name){const{instanceId:r}=t.data,i=new URL(`${this.torusUrl}/wallet${n}`);i.searchParams.append("integrity","true"),i.searchParams.append("instanceId",r),Object.keys(e).forEach((t=>{i.searchParams.append(t,e[t])})),this.dappStorageKey&&(i.hash=`#dappStorageKey=${this.dappStorageKey}`),new ae({url:i,features:"directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=740,width=1315"}).open()}}))}getPublicAddress({verifier:t,verifierId:e,isExtended:r=!1}){return Rt(this,void 0,void 0,(function*(){if(!zt.supportedVerifierList.includes(t)||!Ft[t])throw new Error("Unsupported verifier");const n=yield this.nodeDetailManager.getNodeDetails(!1,!0),i=n.torusNodeEndpoints,o=n.torusNodePub,s=t,a=Ft[t];try{const t=yield this.torusJs.getUserTypeAndAddress(i,o,{verifier:s,verifierId:e});if("v1"===t.typeOfUser)return r?t:t.address;const n=yield this.torusJs.getUserTypeAndAddress(i,o,{verifier:a,verifierId:e},!0);return r?n:n.address}catch(t){if(null==t?void 0:t.message.includes("Verifier + VerifierID has not yet been assigned")){const t=yield this.torusJs.getUserTypeAndAddress(i,o,{verifier:a,verifierId:e},!0);return r?t:t.address}throw t}}))}getUserInfo(t){return new Promise(((e,r)=>{if(this.isLoggedIn){const n=this.communicationMux.getStream("user_info_access");n.write({name:"user_info_access_request"});const i=n=>{const{name:i,data:{approved:o,payload:s,rejected:a,newRequest:u}}=n;if("user_info_access_response"===i)if(o)e(s);else if(a)r(new Error("User rejected the request"));else if(u){const n=this.communicationMux.getStream("user_info");$t(n,"data",(t=>{"user_info_response"===t.name&&(t.data.approved?e(t.data.payload):r(new Error("User rejected the request")))}));const i=Yt();this._handleWindow(i,{target:"_blank",features:re}),n.write({name:"user_info_request",data:{message:t,preopenInstanceId:i}})}};$t(n,"data",i)}else r(new Error("User has not logged in yet"))}))}initiateTopup(t,e){return new Promise(((r,n)=>{if(this.isInitialized){const{errors:i,isValid:o}=((t,e)=>{const r={};if(!t)return{errors:r,isValid:!0};if(t&&!Zt[t])return r.provider="Invalid Provider",{errors:r,isValid:0===Object.keys(r).length};const n=Zt[t],i=e||{};if(i.fiatValue){const t=+parseFloat(i.fiatValue.toString())||0;t<n.minOrderValue&&(r.fiatValue="Requested amount is lower than supported"),t>n.maxOrderValue&&n.enforceMax&&(r.fiatValue="Requested amount is higher than supported")}return i.selectedCurrency&&!n.validCurrencies.includes(i.selectedCurrency)&&(r.selectedCurrency="Unsupported currency"),i.selectedCryptoCurrency&&!n.validCryptoCurrencies.includes(i.selectedCryptoCurrency)&&(r.selectedCryptoCurrency="Unsupported cryptoCurrency"),{errors:r,isValid:0===Object.keys(r).length}})(t,e);if(!o)return void n(new Error(JSON.stringify(i)));const s=this.communicationMux.getStream("topup");$t(s,"data",(t=>{"topup_response"===t.name&&(t.data.success?r(t.data.success):n(new Error(t.data.error)))}));const a=Yt();this._handleWindow(a),s.write({name:"topup_request",data:{provider:t,params:e,preopenInstanceId:a}})}else n(new Error("Torus is not initialized yet"))}))}_handleWindow(t,{url:e,target:r,features:n}={}){if(t){const i=this.communicationMux.getStream("window"),o=new URL(e||`${this.torusUrl}/redirect?preopenInstanceId=${t}`);this.dappStorageKey&&(o.hash?o.hash+=`&dappStorageKey=${this.dappStorageKey}`:o.hash=`#dappStorageKey=${this.dappStorageKey}`);const s=new ae({url:o,target:r,features:n});if(s.open(),!s.window)return void this._createPopupBlockAlert(t,o.href);i.write({name:"opened_window",data:{preopenInstanceId:t}});const a=({preopenInstanceId:e,close:r})=>{e===t&&r&&(s.close(),i.removeListener("data",a))};i.on("data",a),s.once("close",(()=>{i.write({data:{preopenInstanceId:t,closed:!0}}),i.removeListener("data",a)}))}}_setEmbedWhiteLabel(t){const{theme:e}=this.whiteLabel||{};if(e){const{isDark:r=!1,colors:n={}}=e;r&&t.classList.add("torus-dark"),n.torusBrand1&&t.style.setProperty("--torus-brand-1",n.torusBrand1),n.torusGray2&&t.style.setProperty("--torus-gray-2",n.torusGray2)}}_getLogoUrl(){var t,e,r,n;let i=`${this.torusUrl}/images/torus_icon-blue.svg`;return i=(null===(e=null===(t=this.whiteLabel)||void 0===t?void 0:t.theme)||void 0===e?void 0:e.isDark)?(null===(r=this.whiteLabel)||void 0===r?void 0:r.logoLight)||i:(null===(n=this.whiteLabel)||void 0===n?void 0:n.logoDark)||i,i}_sendWidgetVisibilityStatus(t){this.communicationMux.getStream("torus-widget-visibility").write({data:t})}_displayIframe(t=!1){const e={};if(t)e.display="block",e.width="100%",e.height="100%",e.top="0px",e.right="0px",e.left="0px",e.bottom="0px";else switch(e.display=this.torusWidgetVisibility?"block":"none",e.height="70px",e.width="70px",this.buttonPosition){case Ut.TOP_LEFT:e.top="0px",e.left="0px",e.right="auto",e.bottom="auto";break;case Ut.TOP_RIGHT:e.top="0px",e.right="0px",e.left="auto",e.bottom="auto";break;case Ut.BOTTOM_RIGHT:e.bottom="0px",e.right="0px",e.top="auto",e.left="auto";break;case Ut.BOTTOM_LEFT:default:e.bottom="0px",e.left="0px",e.top="auto",e.right="auto"}Object.assign(this.torusIframe.style,e),this.isIframeFullScreen=t}_setupWeb3(){Gt.info("setupWeb3 running");const t=new I({name:"embed_metamask",target:"iframe_metamask",targetWindow:this.torusIframe.contentWindow,targetOrigin:new URL(this.torusUrl).origin}),e=new I({name:"embed_comm",target:"iframe_comm",targetWindow:this.torusIframe.contentWindow,targetOrigin:new URL(this.torusUrl).origin}),r=new oe(t),n=t=>{const e=r[t];r[t]=function(t,...n){return t&&"eth_requestAccounts"===t?r.enable():e.apply(this,[t,...n])}};n("send"),n("sendAsync"),r.enable=()=>new Promise(((t,e)=>{r.sendAsync({jsonrpc:"2.0",id:Yt(),method:"eth_requestAccounts",params:[]},((r,n)=>{const{result:i}=n||{};if(r)setTimeout((()=>{e(r)}),50);else if(Array.isArray(i)&&i.length>0){const r=()=>{if(""!==this.requestedVerifier&&this.currentVerifier!==this.requestedVerifier){const{requestedVerifier:r}=this;this.logout().then((n=>{this.requestedVerifier=r,this._showLoginPopup(!0,t,e)})).catch((t=>e(t)))}else t(i)};this.isLoggedIn?r():this.isLoginCallback=r}else this._showLoginPopup(!0,t,e)}))})),r.tryPreopenHandle=(t,e)=>{const n=t;if(!Array.isArray(n)&&de.includes(n.method)){const t=Yt();this._handleWindow(t,{target:"_blank",features:ne}),n.preopenInstanceId=t}r._rpcEngine.handle(n,e)};const i=new Proxy(r,{deleteProperty:()=>!0});this.ethereum=i;const o=function(t){const e=new H;return e.getStream=function(t){return this._substreams[t]?this._substreams[t]:this.createStream(t)},T()(t,e,t,(t=>{t&&window.console.error(t)})),e}(e);this.communicationMux=o,o.getStream("window").on("data",(t=>{"create_window"===t.name&&this._createPopupBlockAlert(t.data.preopenInstanceId,t.data.url)})),o.getStream("widget").on("data",(t=>{const{data:e}=t;this._displayIframe(e)})),o.getStream("status").on("data",(t=>{t.loggedIn?(this.isLoggedIn=t.loggedIn,this.currentVerifier=t.verifier):this._displayIframe(),this.isLoginCallback&&(this.isLoginCallback(),delete this.isLoginCallback)})),this.provider=i,this.provider.shouldSendMetadata&&function(t){Rt(this,void 0,void 0,(function*(){try{const e=yield Rt(void 0,void 0,void 0,(function*(){return{name:ce(window),icon:yield he(window)}}));t.handle({jsonrpc:"2.0",id:Yt(),method:"wallet_sendDomainMetadata",params:e},ee)}catch(t){Gt.error({message:Kt.errors.sendSiteMetadata(),originalError:t})}}))}(this.provider._rpcEngine),r._initializeState(),Gt.debug("Torus - injected provider")}_showLoginPopup(t,e,r){const n=t=>{const{err:n,selectedAddress:i}=t;n?(Gt.error(n),r&&r(n)):e&&e([i]),this.isIframeFullScreen&&this._displayIframe()},i=this.communicationMux.getStream("oauth");if(this.requestedVerifier){$t(i,"data",n);const e=Yt();this._handleWindow(e),i.write({name:"oauth",data:{calledFromEmbed:t,verifier:this.requestedVerifier,preopenInstanceId:e}})}else this._displayIframe(!0),$t(i,"data",n),i.write({name:"oauth_modal",data:{calledFromEmbed:t}})}_createPopupBlockAlert(t,e){const r=this._getLogoUrl(),n=Wt(`<div id="torusAlert" class="torus-alert--v2"><div id="torusAlert__logo"><img src="${r}" /></div><div><h1 id="torusAlert__title">${this.embedTranslations.actionRequired}</h1><p id="torusAlert__desc">${this.embedTranslations.pendingAction}</p></div></div>`),i=Wt(`<div><a id="torusAlert__btn">${this.embedTranslations.continue}</a></div>`),o=Wt('<div id="torusAlert__btn-container"></div>');o.appendChild(i),n.appendChild(o),this._setEmbedWhiteLabel(n),Vt((()=>{this.torusAlertContainer.style.display="block",this.torusAlertContainer.appendChild(n)})),Vt((()=>{i.addEventListener("click",(()=>{this._handleWindow(t,{url:e,target:"_blank",features:ne}),n.remove(),0===this.torusAlertContainer.children.length&&(this.torusAlertContainer.style.display="none")}))}))}}},16314:(t,e,r)=>{"use strict";var n=["BigInt64Array","BigUint64Array","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray"],i="undefined"==typeof globalThis?r.g:globalThis;t.exports=function(){for(var t=[],e=0;e<n.length;e++)"function"==typeof i[n[e]]&&(t[t.length]=n[e]);return t}},82240:(t,e,r)=>{"use strict";var n=r(31518);function i(t,e){return void 0===e&&(e="utf8"),Buffer.isBuffer(t)?s(t.toString("base64")):s(Buffer.from(t,e).toString("base64"))}function o(t){return t=t.toString(),n.default(t).replace(/\-/g,"+").replace(/_/g,"/")}function s(t){return t.replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")}var a=i;a.encode=i,a.decode=function(t,e){return void 0===e&&(e="utf8"),Buffer.from(o(t),"base64").toString(e)},a.toBase64=o,a.fromBase64=s,a.toBuffer=function(t){return Buffer.from(o(t),"base64")},e.default=a},31518:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=t.length,r=e%4;if(!r)return t;var n=e,i=4-r,o=e+i,s=Buffer.alloc(o);for(s.write(t);i--;)s.write("=",n++);return s.toString()}},45772:(t,e,r)=>{t.exports=r(82240).default,t.exports.default=t.exports},94079:(t,e,r)=>{"use strict";var n=r(40210)("%Object.getOwnPropertyDescriptor%",!0);if(n)try{n([],"length")}catch(t){n=null}t.exports=n},284:t=>{var e=function(){if("object"==typeof self&&self)return self;if("object"==typeof window&&window)return window;throw new Error("Unable to resolve global `this`")};t.exports=function(){if(this)return this;if("object"==typeof globalThis&&globalThis)return globalThis;try{Object.defineProperty(Object.prototype,"__global__",{get:function(){return this},configurable:!0})}catch(t){return e()}try{return __global__||e()}finally{delete Object.prototype.__global__}}()},46877:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(339);function i(t){return!("string"!=typeof t||!/^(0x)?[0-9a-f]{512}$/i.test(t)||!/^(0x)?[0-9a-f]{512}$/.test(t)&&!/^(0x)?[0-9A-F]{512}$/.test(t))}function o(t,e){"object"==typeof e&&e.constructor===Uint8Array&&(e=n.bytesToHex(e));const r=n.keccak256(e).replace("0x","");for(let e=0;e<12;e+=4){const n=(parseInt(r.substr(e,2),16)<<8)+parseInt(r.substr(e+2,2),16)&2047,i=1<<n%4;if((s(t.charCodeAt(t.length-1-Math.floor(n/4)))&i)!==i)return!1}return!0}function s(t){if(t>=48&&t<=57)return t-48;if(t>=65&&t<=70)return t-55;if(t>=97&&t<=102)return t-87;throw new Error("invalid bloom")}function a(t){return!("string"!=typeof t||!/^(0x)?[0-9a-f]{64}$/i.test(t)||!/^(0x)?[0-9a-f]{64}$/.test(t)&&!/^(0x)?[0-9A-F]{64}$/.test(t))}function u(t){return!("string"!=typeof t||!t.match(/^(0x)?[0-9a-fA-F]{40}$/)&&!t.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/))}e.isBloom=i,e.isInBloom=o,e.isUserEthereumAddressInBloom=function(t,e){if(!i(t))throw new Error("Invalid bloom given");if(!u(e))throw new Error(`Invalid ethereum address given: "${e}"`);return o(t,n.padLeft(e,64))},e.isContractAddressInBloom=function(t,e){if(!i(t))throw new Error("Invalid bloom given");if(!u(e))throw new Error(`Invalid contract address given: "${e}"`);return o(t,e)},e.isTopicInBloom=function(t,e){if(!i(t))throw new Error("Invalid bloom given");if(!a(e))throw new Error("Invalid topic");return o(t,e)},e.isTopic=a,e.isAddress=u},339:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(91094);function i(t){if(null==t)throw new Error("cannot convert null value to array");if("string"==typeof t){const e=t.match(/^(0x)?[0-9a-fA-F]*$/);if(!e)throw new Error("invalid hexidecimal string");if("0x"!==e[1])throw new Error("hex string must have 0x prefix");(t=t.substring(2)).length%2&&(t="0"+t);const r=[];for(let e=0;e<t.length;e+=2)r.push(parseInt(t.substr(e,2),16));return o(new Uint8Array(r))}if(function(t){if(!t||parseInt(String(t.length))!=t.length||"string"==typeof t)return!1;for(let e=0;e<t.length;e++){const r=t[e];if(r<0||r>=256||parseInt(String(r))!=r)return!1}return!0}(t))return o(new Uint8Array(t));throw new Error("invalid arrayify value")}function o(t){return void 0!==t.slice||(t.slice=()=>{const e=Array.prototype.slice.call(arguments);return o(new Uint8Array(Array.prototype.slice.apply(t,e)))}),t}e.keccak256=function(t){return"0x"+n.keccak_256(i(t))},e.padLeft=(t,e)=>{const r=/^0x/i.test(t)||"number"==typeof t,n=e-(t=t.toString().replace(/^0x/i,"")).length+1>=0?e-t.length+1:0;return(r?"0x":"")+new Array(n).join("0")+t},e.bytesToHex=function(t){const e=[];for(let r=0;r<t.length;r++)e.push((t[r]>>>4).toString(16)),e.push((15&t[r]).toString(16));return`0x${e.join("").replace(/^0+/,"")}`},e.toByteArray=i},64063:t=>{"use strict";t.exports=function t(e,r){if(e===r)return!0;if(e&&r&&"object"==typeof e&&"object"==typeof r){if(e.constructor!==r.constructor)return!1;var n,i,o;if(Array.isArray(e)){if((n=e.length)!=r.length)return!1;for(i=n;0!=i--;)if(!t(e[i],r[i]))return!1;return!0}if(e.constructor===RegExp)return e.source===r.source&&e.flags===r.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===r.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===r.toString();if((n=(o=Object.keys(e)).length)!==Object.keys(r).length)return!1;for(i=n;0!=i--;)if(!Object.prototype.hasOwnProperty.call(r,o[i]))return!1;for(i=n;0!=i--;){var s=o[i];if(!t(e[s],r[s]))return!1}return!0}return e!=e&&r!=r}},43101:t=>{var e=Object.prototype.hasOwnProperty,r=Object.prototype.toString;t.exports=function(t,n,i){if("[object Function]"!==r.call(n))throw new TypeError("iterator must be a function");var o=t.length;if(o===+o)for(var s=0;s<o;s++)n.call(i,t[s],s,t);else for(var a in t)e.call(t,a)&&n.call(i,t[a],a,t)}},96410:(t,e,r)=>{"use strict";var n=r(55419);t.exports=function(){return n()&&!!Symbol.toStringTag}},82584:(t,e,r)=>{"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag,i=r(21924)("Object.prototype.toString"),o=function(t){return!(n&&t&&"object"==typeof t&&Symbol.toStringTag in t)&&"[object Arguments]"===i(t)},s=function(t){return!!o(t)||null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Array]"!==i(t)&&"[object Function]"===i(t.callee)},a=function(){return o(arguments)}();o.isLegacyArguments=s,t.exports=a?o:s},48662:(t,e,r)=>{"use strict";var n,i=Object.prototype.toString,o=Function.prototype.toString,s=/^\s*(?:function)?\*/,a=r(96410)(),u=Object.getPrototypeOf;t.exports=function(t){if("function"!=typeof t)return!1;if(s.test(o.call(t)))return!0;if(!a)return"[object GeneratorFunction]"===i.call(t);if(!u)return!1;if(void 0===n){var e=function(){if(!a)return!1;try{return Function("return function*() {}")()}catch(t){}}();n=!!e&&u(e)}return u(t)===n}},23944:t=>{t.exports=function(t){if("string"!=typeof t)throw new Error("[is-hex-prefixed] value must be type 'string', is currently type "+typeof t+", while checking isHexPrefixed.");return"0x"===t.slice(0,2)}},85692:(t,e,r)=>{"use strict";var n=r(43101),i=r(16314),o=r(21924),s=o("Object.prototype.toString"),a=r(96410)(),u="undefined"==typeof globalThis?r.g:globalThis,c=i(),h=o("Array.prototype.indexOf",!0)||function(t,e){for(var r=0;r<t.length;r+=1)if(t[r]===e)return r;return-1},l=o("String.prototype.slice"),f={},d=r(94079),p=Object.getPrototypeOf;a&&d&&p&&n(c,(function(t){var e=new u[t];if(Symbol.toStringTag in e){var r=p(e),n=d(r,Symbol.toStringTag);if(!n){var i=p(r);n=d(i,Symbol.toStringTag)}f[t]=n.get}})),t.exports=function(t){if(!t||"object"!=typeof t)return!1;if(!a||!(Symbol.toStringTag in t)){var e=l(s(t),8,-1);return h(c,e)>-1}return!!d&&function(t){var e=!1;return n(f,(function(r,n){if(!e)try{e=r.call(t)===n}catch(t){}})),e}(t)}},67266:(t,e,r)=>{var n="undefined"!=typeof JSON?JSON:r(58418);t.exports=function(t,e){e||(e={}),"function"==typeof e&&(e={cmp:e});var r=e.space||"";"number"==typeof r&&(r=Array(r+1).join(" "));var s,a="boolean"==typeof e.cycles&&e.cycles,u=e.replacer||function(t,e){return e},c=e.cmp&&(s=e.cmp,function(t){return function(e,r){var n={key:e,value:t[e]},i={key:r,value:t[r]};return s(n,i)}}),h=[];return function t(e,s,l,f){var d=r?"\n"+new Array(f+1).join(r):"",p=r?": ":":";if(l&&l.toJSON&&"function"==typeof l.toJSON&&(l=l.toJSON()),void 0!==(l=u.call(e,s,l))){if("object"!=typeof l||null===l)return n.stringify(l);if(i(l)){for(var m=[],g=0;g<l.length;g++){var v=t(l,g,l[g],f+1)||n.stringify(null);m.push(d+r+v)}return"["+m.join(",")+d+"]"}if(-1!==h.indexOf(l)){if(a)return n.stringify("__cycle__");throw new TypeError("Converting circular structure to JSON")}h.push(l);var y=o(l).sort(c&&c(l));for(m=[],g=0;g<y.length;g++){var b=t(l,s=y[g],l[s],f+1);if(b){var w=n.stringify(s)+p+b;m.push(d+r+w)}}return h.splice(h.indexOf(l),1),"{"+m.join(",")+d+"}"}}({"":t},"",t,0)};var i=Array.isArray||function(t){return"[object Array]"==={}.toString.call(t)},o=Object.keys||function(t){var e=Object.prototype.hasOwnProperty||function(){return!0},r=[];for(var n in t)e.call(t,n)&&r.push(n);return r}},58418:(t,e,r)=>{e.parse=r(51396),e.stringify=r(66177)},51396:t=>{var e,r,n,i,o={'"':'"',"\\":"\\","/":"/",b:"\b",f:"\f",n:"\n",r:"\r",t:"\t"},s=function(t){throw{name:"SyntaxError",message:t,at:e,text:n}},a=function(t){return t&&t!==r&&s("Expected '"+t+"' instead of '"+r+"'"),r=n.charAt(e),e+=1,r},u=function(){var t,e="";for("-"===r&&(e="-",a("-"));r>="0"&&r<="9";)e+=r,a();if("."===r)for(e+=".";a()&&r>="0"&&r<="9";)e+=r;if("e"===r||"E"===r)for(e+=r,a(),"-"!==r&&"+"!==r||(e+=r,a());r>="0"&&r<="9";)e+=r,a();if(t=+e,isFinite(t))return t;s("Bad number")},c=function(){var t,e,n,i="";if('"'===r)for(;a();){if('"'===r)return a(),i;if("\\"===r)if(a(),"u"===r){for(n=0,e=0;e<4&&(t=parseInt(a(),16),isFinite(t));e+=1)n=16*n+t;i+=String.fromCharCode(n)}else{if("string"!=typeof o[r])break;i+=o[r]}else i+=r}s("Bad string")},h=function(){for(;r&&r<=" ";)a()};i=function(){switch(h(),r){case"{":return function(){var t,e={};if("{"===r){if(a("{"),h(),"}"===r)return a("}"),e;for(;r;){if(t=c(),h(),a(":"),Object.hasOwnProperty.call(e,t)&&s('Duplicate key "'+t+'"'),e[t]=i(),h(),"}"===r)return a("}"),e;a(","),h()}}s("Bad object")}();case"[":return function(){var t=[];if("["===r){if(a("["),h(),"]"===r)return a("]"),t;for(;r;){if(t.push(i()),h(),"]"===r)return a("]"),t;a(","),h()}}s("Bad array")}();case'"':return c();case"-":return u();default:return r>="0"&&r<="9"?u():function(){switch(r){case"t":return a("t"),a("r"),a("u"),a("e"),!0;case"f":return a("f"),a("a"),a("l"),a("s"),a("e"),!1;case"n":return a("n"),a("u"),a("l"),a("l"),null}s("Unexpected '"+r+"'")}()}},t.exports=function(t,o){var a;return n=t,e=0,r=" ",a=i(),h(),r&&s("Syntax error"),"function"==typeof o?function t(e,r){var n,i,s=e[r];if(s&&"object"==typeof s)for(n in s)Object.prototype.hasOwnProperty.call(s,n)&&(void 0!==(i=t(s,n))?s[n]=i:delete s[n]);return o.call(e,r,s)}({"":a},""):a}},66177:t=>{var e,r,n,i=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,o={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"};function s(t){return i.lastIndex=0,i.test(t)?'"'+t.replace(i,(function(t){var e=o[t];return"string"==typeof e?e:"\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4)}))+'"':'"'+t+'"'}function a(t,i){var o,u,c,h,l,f=e,d=i[t];switch(d&&"object"==typeof d&&"function"==typeof d.toJSON&&(d=d.toJSON(t)),"function"==typeof n&&(d=n.call(i,t,d)),typeof d){case"string":return s(d);case"number":return isFinite(d)?String(d):"null";case"boolean":case"null":return String(d);case"object":if(!d)return"null";if(e+=r,l=[],"[object Array]"===Object.prototype.toString.apply(d)){for(h=d.length,o=0;o<h;o+=1)l[o]=a(o,d)||"null";return c=0===l.length?"[]":e?"[\n"+e+l.join(",\n"+e)+"\n"+f+"]":"["+l.join(",")+"]",e=f,c}if(n&&"object"==typeof n)for(h=n.length,o=0;o<h;o+=1)"string"==typeof(u=n[o])&&(c=a(u,d))&&l.push(s(u)+(e?": ":":")+c);else for(u in d)Object.prototype.hasOwnProperty.call(d,u)&&(c=a(u,d))&&l.push(s(u)+(e?": ":":")+c);return c=0===l.length?"{}":e?"{\n"+e+l.join(",\n"+e)+"\n"+f+"}":"{"+l.join(",")+"}",e=f,c}}t.exports=function(t,i,o){var s;if(e="",r="","number"==typeof o)for(s=0;s<o;s+=1)r+=" ";else"string"==typeof o&&(r=o);if(n=i,i&&"function"!=typeof i&&("object"!=typeof i||"number"!=typeof i.length))throw new Error("JSON.stringify");return a("",{"":t})}},72378:(t,e,r)=>{t=r.nmd(t);var n="__lodash_hash_undefined__",i=9007199254740991,o="[object Arguments]",s="[object Function]",a="[object Object]",u=/^\[object .+?Constructor\]$/,c=/^(?:0|[1-9]\d*)$/,h={};h["[object Float32Array]"]=h["[object Float64Array]"]=h["[object Int8Array]"]=h["[object Int16Array]"]=h["[object Int32Array]"]=h["[object Uint8Array]"]=h["[object Uint8ClampedArray]"]=h["[object Uint16Array]"]=h["[object Uint32Array]"]=!0,h[o]=h["[object Array]"]=h["[object ArrayBuffer]"]=h["[object Boolean]"]=h["[object DataView]"]=h["[object Date]"]=h["[object Error]"]=h[s]=h["[object Map]"]=h["[object Number]"]=h[a]=h["[object RegExp]"]=h["[object Set]"]=h["[object String]"]=h["[object WeakMap]"]=!1;var l="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g,f="object"==typeof self&&self&&self.Object===Object&&self,d=l||f||Function("return this")(),p=e&&!e.nodeType&&e,m=p&&t&&!t.nodeType&&t,g=m&&m.exports===p,v=g&&l.process,y=function(){try{return m&&m.require&&m.require("util").types||v&&v.binding&&v.binding("util")}catch(t){}}(),b=y&&y.isTypedArray;function w(t,e,r){switch(r.length){case 0:return t.call(e);case 1:return t.call(e,r[0]);case 2:return t.call(e,r[0],r[1]);case 3:return t.call(e,r[0],r[1],r[2])}return t.apply(e,r)}var M,_,x,k=Array.prototype,O=Function.prototype,S=Object.prototype,A=d["__core-js_shared__"],E=O.toString,j=S.hasOwnProperty,T=(M=/[^.]+$/.exec(A&&A.keys&&A.keys.IE_PROTO||""))?"Symbol(src)_1."+M:"",P=S.toString,C=E.call(Object),I=RegExp("^"+E.call(j).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),B=g?d.Buffer:void 0,N=d.Symbol,R=d.Uint8Array,L=(B&&B.allocUnsafe,_=Object.getPrototypeOf,x=Object,function(t){return _(x(t))}),F=Object.create,D=S.propertyIsEnumerable,q=k.splice,U=N?N.toStringTag:void 0,H=function(){try{var t=at(Object,"defineProperty");return t({},"",{}),t}catch(t){}}(),z=B?B.isBuffer:void 0,V=Math.max,W=Date.now,$=at(d,"Map"),G=at(Object,"create"),K=function(){function t(){}return function(e){if(!bt(e))return{};if(F)return F(e);t.prototype=e;var r=new t;return t.prototype=void 0,r}}();function Z(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function J(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function Y(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function X(t){var e=this.__data__=new J(t);this.size=e.size}function Q(t,e,r){(void 0!==r&&!ft(t[e],r)||void 0===r&&!(e in t))&&rt(t,e,r)}function tt(t,e,r){var n=t[e];j.call(t,e)&&ft(n,r)&&(void 0!==r||e in t)||rt(t,e,r)}function et(t,e){for(var r=t.length;r--;)if(ft(t[r][0],e))return r;return-1}function rt(t,e,r){"__proto__"==e&&H?H(t,e,{configurable:!0,enumerable:!0,value:r,writable:!0}):t[e]=r}Z.prototype.clear=function(){this.__data__=G?G(null):{},this.size=0},Z.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},Z.prototype.get=function(t){var e=this.__data__;if(G){var r=e[t];return r===n?void 0:r}return j.call(e,t)?e[t]:void 0},Z.prototype.has=function(t){var e=this.__data__;return G?void 0!==e[t]:j.call(e,t)},Z.prototype.set=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=G&&void 0===e?n:e,this},J.prototype.clear=function(){this.__data__=[],this.size=0},J.prototype.delete=function(t){var e=this.__data__,r=et(e,t);return!(r<0||(r==e.length-1?e.pop():q.call(e,r,1),--this.size,0))},J.prototype.get=function(t){var e=this.__data__,r=et(e,t);return r<0?void 0:e[r][1]},J.prototype.has=function(t){return et(this.__data__,t)>-1},J.prototype.set=function(t,e){var r=this.__data__,n=et(r,t);return n<0?(++this.size,r.push([t,e])):r[n][1]=e,this},Y.prototype.clear=function(){this.size=0,this.__data__={hash:new Z,map:new($||J),string:new Z}},Y.prototype.delete=function(t){var e=st(this,t).delete(t);return this.size-=e?1:0,e},Y.prototype.get=function(t){return st(this,t).get(t)},Y.prototype.has=function(t){return st(this,t).has(t)},Y.prototype.set=function(t,e){var r=st(this,t),n=r.size;return r.set(t,e),this.size+=r.size==n?0:1,this},X.prototype.clear=function(){this.__data__=new J,this.size=0},X.prototype.delete=function(t){var e=this.__data__,r=e.delete(t);return this.size=e.size,r},X.prototype.get=function(t){return this.__data__.get(t)},X.prototype.has=function(t){return this.__data__.has(t)},X.prototype.set=function(t,e){var r=this.__data__;if(r instanceof J){var n=r.__data__;if(!$||n.length<199)return n.push([t,e]),this.size=++r.size,this;r=this.__data__=new Y(n)}return r.set(t,e),this.size=r.size,this};function nt(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":U&&U in Object(t)?function(t){var e=j.call(t,U),r=t[U];try{t[U]=void 0;var n=!0}catch(t){}var i=P.call(t);return n&&(e?t[U]=r:delete t[U]),i}(t):function(t){return P.call(t)}(t)}function it(t){return wt(t)&&nt(t)==o}function ot(t,e,r,n,i){t!==e&&function(t,e,r){for(var n=-1,i=Object(t),o=r(t),s=o.length;s--;){var a=o[++n];if(!1===e(i[a],a,i))break}}(e,(function(o,s){if(i||(i=new X),bt(o))!function(t,e,r,n,i,o,s){var u=ht(t,r),c=ht(e,r),h=s.get(c);if(h)Q(t,r,h);else{var l,f,d,p,m,g=o?o(u,c,r+"",t,e,s):void 0,v=void 0===g;if(v){var y=pt(c),b=!y&&gt(c),w=!y&&!b&&Mt(c);g=c,y||b||w?pt(u)?g=u:wt(m=u)&&mt(m)?g=function(t,e){var r=-1,n=t.length;for(e||(e=Array(n));++r<n;)e[r]=t[r];return e}(u):b?(v=!1,g=function(t,e){return t.slice()}(c)):w?(v=!1,p=new(d=(l=c).buffer).constructor(d.byteLength),new R(p).set(new R(d)),f=p,g=new l.constructor(f,l.byteOffset,l.length)):g=[]:function(t){if(!wt(t)||nt(t)!=a)return!1;var e=L(t);if(null===e)return!0;var r=j.call(e,"constructor")&&e.constructor;return"function"==typeof r&&r instanceof r&&E.call(r)==C}(c)||dt(c)?(g=u,dt(u)?g=function(t){return function(t,e,r,n){var i=!r;r||(r={});for(var o=-1,s=e.length;++o<s;){var a=e[o],u=void 0;void 0===u&&(u=t[a]),i?rt(r,a,u):tt(r,a,u)}return r}(t,_t(t))}(u):bt(u)&&!vt(u)||(g=function(t){return"function"!=typeof t.constructor||ct(t)?{}:K(L(t))}(c))):v=!1}v&&(s.set(c,g),i(g,c,n,o,s),s.delete(c)),Q(t,r,g)}}(t,e,s,r,ot,n,i);else{var u=n?n(ht(t,s),o,s+"",t,e,i):void 0;void 0===u&&(u=o),Q(t,s,u)}}),_t)}function st(t,e){var r,n,i=t.__data__;return("string"==(n=typeof(r=e))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?i["string"==typeof e?"string":"hash"]:i.map}function at(t,e){var r=function(t,e){return null==t?void 0:t[e]}(t,e);return function(t){return!(!bt(t)||function(t){return!!T&&T in t}(t))&&(vt(t)?I:u).test(function(t){if(null!=t){try{return E.call(t)}catch(t){}try{return t+""}catch(t){}}return""}(t))}(r)?r:void 0}function ut(t,e){var r=typeof t;return!!(e=null==e?i:e)&&("number"==r||"symbol"!=r&&c.test(t))&&t>-1&&t%1==0&&t<e}function ct(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||S)}function ht(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var lt=function(t){var e=0,r=0;return function(){var n=W(),i=16-(n-r);if(r=n,i>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}(H?function(t,e){return H(t,"toString",{configurable:!0,enumerable:!1,value:(r=e,function(){return r}),writable:!0});var r}:Ot);function ft(t,e){return t===e||t!=t&&e!=e}var dt=it(function(){return arguments}())?it:function(t){return wt(t)&&j.call(t,"callee")&&!D.call(t,"callee")},pt=Array.isArray;function mt(t){return null!=t&&yt(t.length)&&!vt(t)}var gt=z||function(){return!1};function vt(t){if(!bt(t))return!1;var e=nt(t);return e==s||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}function yt(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=i}function bt(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function wt(t){return null!=t&&"object"==typeof t}var Mt=b?function(t){return function(e){return t(e)}}(b):function(t){return wt(t)&&yt(t.length)&&!!h[nt(t)]};function _t(t){return mt(t)?function(t,e){var r=pt(t),n=!r&&dt(t),i=!r&&!n&&gt(t),o=!r&&!n&&!i&&Mt(t),s=r||n||i||o,a=s?function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}(t.length,String):[],u=a.length;for(var c in t)!e&&!j.call(t,c)||s&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||ut(c,u))||a.push(c);return a}(t,!0):function(t){if(!bt(t))return function(t){var e=[];if(null!=t)for(var r in Object(t))e.push(r);return e}(t);var e=ct(t),r=[];for(var n in t)("constructor"!=n||!e&&j.call(t,n))&&r.push(n);return r}(t)}var xt,kt=(xt=function(t,e,r){ot(t,e,r)},function(t,e){return lt(function(t,e,r){return e=V(void 0===e?t.length-1:e,0),function(){for(var n=arguments,i=-1,o=V(n.length-e,0),s=Array(o);++i<o;)s[i]=n[e+i];i=-1;for(var a=Array(e+1);++i<e;)a[i]=n[i];return a[e]=r(s),w(t,this,a)}}(t,e,Ot),t+"")}((function(t,e){var r=-1,n=e.length,i=n>1?e[n-1]:void 0,o=n>2?e[2]:void 0;for(i=xt.length>3&&"function"==typeof i?(n--,i):void 0,o&&function(t,e,r){if(!bt(r))return!1;var n=typeof e;return!!("number"==n?mt(r)&&ut(e,r.length):"string"==n&&e in r)&&ft(r[e],t)}(e[0],e[1],o)&&(i=n<3?void 0:i,n=1),t=Object(t);++r<n;){var s=e[r];s&&xt(t,s,r)}return t})));function Ot(t){return t}t.exports=kt},2043:function(t,e,r){var n,i;!function(o,s){"use strict";void 0===(i="function"==typeof(n=function(){var t=function(){},e="undefined",r=typeof window!==e&&typeof window.navigator!==e&&/Trident\/|MSIE /.test(window.navigator.userAgent),n=["trace","debug","info","warn","error"];function i(t,e){var r=t[e];if("function"==typeof r.bind)return r.bind(t);try{return Function.prototype.bind.call(r,t)}catch(e){return function(){return Function.prototype.apply.apply(r,[t,arguments])}}}function o(){console.log&&(console.log.apply?console.log.apply(console,arguments):Function.prototype.apply.apply(console.log,[console,arguments])),console.trace&&console.trace()}function s(n){return"debug"===n&&(n="log"),typeof console!==e&&("trace"===n&&r?o:void 0!==console[n]?i(console,n):void 0!==console.log?i(console,"log"):t)}function a(e,r){for(var i=0;i<n.length;i++){var o=n[i];this[o]=i<e?t:this.methodFactory(o,e,r)}this.log=this.debug}function u(t,r,n){return function(){typeof console!==e&&(a.call(this,r,n),this[t].apply(this,arguments))}}function c(t,e,r){return s(t)||u.apply(this,arguments)}function h(t,r,i){var o,s=this;r=null==r?"WARN":r;var u="loglevel";function h(){var t;if(typeof window!==e&&u){try{t=window.localStorage[u]}catch(t){}if(typeof t===e)try{var r=window.document.cookie,n=r.indexOf(encodeURIComponent(u)+"=");-1!==n&&(t=/^([^;]+)/.exec(r.slice(n))[1])}catch(t){}return void 0===s.levels[t]&&(t=void 0),t}}"string"==typeof t?u+=":"+t:"symbol"==typeof t&&(u=void 0),s.name=t,s.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},s.methodFactory=i||c,s.getLevel=function(){return o},s.setLevel=function(r,i){if("string"==typeof r&&void 0!==s.levels[r.toUpperCase()]&&(r=s.levels[r.toUpperCase()]),!("number"==typeof r&&r>=0&&r<=s.levels.SILENT))throw"log.setLevel() called with invalid level: "+r;if(o=r,!1!==i&&function(t){var r=(n[t]||"silent").toUpperCase();if(typeof window!==e&&u){try{return void(window.localStorage[u]=r)}catch(t){}try{window.document.cookie=encodeURIComponent(u)+"="+r+";"}catch(t){}}}(r),a.call(s,r,t),typeof console===e&&r<s.levels.SILENT)return"No console available for logging"},s.setDefaultLevel=function(t){r=t,h()||s.setLevel(t,!1)},s.resetLevel=function(){s.setLevel(r,!1),function(){if(typeof window!==e&&u){try{return void window.localStorage.removeItem(u)}catch(t){}try{window.document.cookie=encodeURIComponent(u)+"=; expires=Thu, 01 Jan 1970 00:00:00 UTC"}catch(t){}}}()},s.enableAll=function(t){s.setLevel(s.levels.TRACE,t)},s.disableAll=function(t){s.setLevel(s.levels.SILENT,t)};var l=h();null==l&&(l=r),s.setLevel(l,!1)}var l=new h,f={};l.getLogger=function(t){if("symbol"!=typeof t&&"string"!=typeof t||""===t)throw new TypeError("You must supply a name when creating a logger.");var e=f[t];return e||(e=f[t]=new h(t,l.getLevel(),l.methodFactory)),e};var d=typeof window!==e?window.log:void 0;return l.noConflict=function(){return typeof window!==e&&window.log===l&&(window.log=d),l},l.getLoggers=function(){return f},l.default=l,l})?n.call(e,r,e,t):n)||(t.exports=i)}()},43455:function(t){var e;"undefined"!=typeof self&&self,e=function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=7)}([function(t,e,r){"use strict";r.d(e,"j",(function(){return i})),r.d(e,"d",(function(){return o})),r.d(e,"c",(function(){return s})),r.d(e,"h",(function(){return a})),r.d(e,"b",(function(){return u})),r.d(e,"k",(function(){return c})),r.d(e,"e",(function(){return h})),r.d(e,"g",(function(){return l})),r.d(e,"i",(function(){return f})),r.d(e,"a",(function(){return d})),r.d(e,"f",(function(){return p}));var n=r(1),i=c((function(t,e){var r=e.length;return c((function(n){for(var i=0;i<n.length;i++)e[r+i]=n[i];return e.length=r+n.length,t.apply(this,e)}))}));function o(t,e){return function(){return t.call(this,e.apply(this,arguments))}}function s(t){return function(e){return e[t]}}c((function(t){var e=Object(n.c)(t);function r(t,e){return[u(t,e)]}return c((function(t){return Object(n.f)(r,t,e)[0]}))}));var a=c((function(t){return c((function(e){for(var r,n=0;n<s("length")(t);n++)if(r=u(e,t[n]))return r}))}));function u(t,e){return e.apply(void 0,t)}function c(t){var e=t.length-1,r=Array.prototype.slice;if(0===e)return function(){return t.call(this,r.call(arguments))};if(1===e)return function(){return t.call(this,arguments[0],r.call(arguments,1))};var n=Array(t.length);return function(){for(var i=0;i<e;i++)n[i]=arguments[i];return n[e]=r.call(arguments,e),t.apply(this,n)}}function h(t){return function(e,r){return t(r,e)}}function l(t,e){return function(r){return t(r)&&e(r)}}function f(){}function d(){return!0}function p(t){return function(){return t}}},function(t,e,r){"use strict";r.d(e,"d",(function(){return i})),r.d(e,"g",(function(){return s})),r.d(e,"l",(function(){return a})),r.d(e,"c",(function(){return u})),r.d(e,"h",(function(){return c})),r.d(e,"i",(function(){return h})),r.d(e,"j",(function(){return l})),r.d(e,"f",(function(){return f})),r.d(e,"m",(function(){return d})),r.d(e,"a",(function(){return p})),r.d(e,"b",(function(){return m})),r.d(e,"k",(function(){return g})),r.d(e,"e",(function(){return v}));var n=r(0);function i(t,e){return[t,e]}var o=null,s=Object(n.c)(0),a=Object(n.c)(1);function u(t){return g(t.reduce(Object(n.e)(i),o))}var c=Object(n.k)(u);function h(t){return f((function(t,e){return t.unshift(e),t}),[],t)}function l(t,e){return e?i(t(s(e)),l(t,a(e))):o}function f(t,e,r){return r?t(f(t,e,a(r)),s(r)):e}function d(t,e,r){return function t(r,n){return r?e(s(r))?(n(s(r)),a(r)):i(s(r),t(a(r),n)):o}(t,r||n.i)}function p(t,e){return!e||t(s(e))&&p(t,a(e))}function m(t,e){t&&(s(t).apply(null,e),m(a(t),e))}function g(t){return function t(e,r){return e?t(a(e),i(s(e),r)):r}(t,o)}function v(t,e){return e&&(t(s(e))?s(e):v(t,a(e)))}},function(t,e,r){"use strict";r.d(e,"c",(function(){return o})),r.d(e,"e",(function(){return s})),r.d(e,"d",(function(){return a})),r.d(e,"a",(function(){return u})),r.d(e,"b",(function(){return c}));var n=r(1),i=r(0);function o(t,e){return e&&e.constructor===t}var s=Object(i.c)("length"),a=Object(i.j)(o,String);function u(t){return void 0!==t}function c(t,e){return e instanceof Object&&Object(n.a)((function(t){return t in e}),t)}},function(t,e,r){"use strict";r.d(e,"f",(function(){return i})),r.d(e,"d",(function(){return o})),r.d(e,"g",(function(){return s})),r.d(e,"e",(function(){return a})),r.d(e,"b",(function(){return u})),r.d(e,"h",(function(){return c})),r.d(e,"i",(function(){return h})),r.d(e,"c",(function(){return l})),r.d(e,"m",(function(){return f})),r.d(e,"n",(function(){return d})),r.d(e,"a",(function(){return p})),r.d(e,"j",(function(){return m})),r.d(e,"l",(function(){return g})),r.d(e,"k",(function(){return v})),r.d(e,"o",(function(){return y}));var n=1,i=n++,o=n++,s=n++,a=n++,u="fail",c=n++,h=n++,l="start",f="data",d="end",p=n++,m=n++,g=n++,v=n++;function y(t,e,r){try{var n=JSON.parse(e)}catch(t){}return{statusCode:t,body:e,jsonBody:n,thrown:r}}},function(t,e,r){"use strict";r.d(e,"b",(function(){return i})),r.d(e,"a",(function(){return o})),r.d(e,"c",(function(){return s}));var n=r(0);function i(t,e){return{key:t,node:e}}var o=Object(n.c)("key"),s=Object(n.c)("node")},function(t,e,r){"use strict";r.d(e,"a",(function(){return u}));var n=r(1),i=r(0),o=r(2),s=r(8),a=r(9);function u(t){var e=Object(n.h)("resume","pause","pipe"),r=Object(i.j)(o.b,e);return t?r(t)||Object(o.d)(t)?Object(s.a)(a.a,t):Object(s.a)(a.a,t.url,t.method,t.body,t.headers,t.withCredentials,t.cached):Object(a.a)()}u.drop=function(){return u.drop}},function(t,e,r){"use strict";r.d(e,"b",(function(){return u})),r.d(e,"a",(function(){return a}));var n=r(3),i=r(4),o=r(2),s=r(1),a={};function u(t){var e=t(n.f).emit,r=t(n.d).emit,u=t(n.i).emit,c=t(n.h).emit;function h(t,e,r){Object(i.c)(Object(s.g)(t))[e]=r}function l(t,r,n){t&&h(t,r,n);var o=Object(s.d)(Object(i.b)(r,n),t);return e(o),o}var f={};return f[n.l]=function(t,e){if(!t)return u(e),l(t,a,e);var r=function(t,e){var r=Object(i.c)(Object(s.g)(t));return Object(o.c)(Array,r)?l(t,Object(o.e)(r),e):t}(t,e),n=Object(s.l)(r),c=Object(i.a)(Object(s.g)(r));return h(n,c,e),Object(s.d)(Object(i.b)(c,e),n)},f[n.k]=function(t){return r(t),Object(s.l)(t)||c(Object(i.c)(Object(s.g)(t)))},f[n.j]=l,f}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(5);e.default=n.a},function(t,e,r){"use strict";r.d(e,"a",(function(){return i}));var n=r(2);function i(t,e,r,i,o,s,a){return o=o?JSON.parse(JSON.stringify(o)):{},i?(Object(n.d)(i)||(i=JSON.stringify(i),o["Content-Type"]=o["Content-Type"]||"application/json"),o["Content-Length"]=o["Content-Length"]||i.length):i=null,t(r||"GET",function(t,e){return!1===e&&(-1===t.indexOf("?")?t+="?":t+="&",t+="_="+(new Date).getTime()),t}(e,a),i,o,s||!1)}},function(t,e,r){"use strict";r.d(e,"a",(function(){return l}));var n=r(10),i=r(12),o=r(6),s=r(13),a=r(14),u=r(16),c=r(17),h=r(18);function l(t,e,r,l,f){var d=Object(n.a)();return e&&Object(h.b)(d,Object(h.a)(),t,e,r,l,f),Object(c.a)(d),Object(i.a)(d,Object(o.b)(d)),Object(s.a)(d,a.a),Object(u.a)(d,e)}},function(t,e,r){"use strict";r.d(e,"a",(function(){return o}));var n=r(11),i=r(0);function o(){var t={},e=o("newListener"),r=o("removeListener");function o(i){return t[i]=Object(n.a)(i,e,r),t[i]}function s(e){return t[e]||o(e)}return["emit","on","un"].forEach((function(t){s[t]=Object(i.k)((function(e,r){Object(i.b)(r,s(e)[t])}))})),s}},function(t,e,r){"use strict";r.d(e,"a",(function(){return s}));var n=r(1),i=r(2),o=r(0);function s(t,e,r){var s,a;function u(t){return function(e){return e.id===t}}return{on:function(r,i){var o={listener:r,id:i||r};return e&&e.emit(t,r,o.id),s=Object(n.d)(o,s),a=Object(n.d)(r,a),this},emit:function(){Object(n.b)(a,arguments)},un:function(e){var i;s=Object(n.m)(s,u(e),(function(t){i=t})),i&&(a=Object(n.m)(a,(function(t){return t===i.listener})),r&&r.emit(t,i.listener,i.id))},listeners:function(){return a},hasListener:function(t){var e=t?u(t):o.a;return Object(i.a)(Object(n.e)(e,s))}}}},function(t,e,r){"use strict";r.d(e,"a",(function(){return s}));var n=r(4),i=r(3),o=r(1);function s(t,e){var r,s={};function a(t){return function(e){r=t(r,e)}}for(var u in e)t(u).on(a(e[u]),s);t(i.g).on((function(t){var e=Object(o.g)(r),i=Object(n.a)(e),s=Object(o.l)(r);s&&(Object(n.c)(Object(o.g)(s))[i]=t)})),t(i.e).on((function(){var t=Object(o.g)(r),e=Object(n.a)(t),i=Object(o.l)(r);i&&delete Object(n.c)(Object(o.g)(i))[e]})),t(i.a).on((function(){for(var r in e)t(r).un(s)}))}},function(t,e,r){"use strict";r.d(e,"a",(function(){return s}));var n=r(3),i=r(1),o=r(4);function s(t,e){var r={node:t(n.d),path:t(n.f)};t("newListener").on((function(n){var s=/(node|path):(.*)/.exec(n);if(s){var a=r[s[1]];a.hasListener(n)||function(e,r,n){var s=t(e).emit;r.on((function(t){var e=n(t);!1!==e&&function(t,e,r){var n=Object(i.k)(r);t(e,Object(i.i)(Object(i.l)(Object(i.j)(o.a,n))),Object(i.i)(Object(i.j)(o.c,n)))}(s,Object(o.c)(e),t)}),e),t("removeListener").on((function(n){n===e&&(t(n).listeners()||r.un(e))}))}(n,a,e(s[2]))}}))}},function(t,e,r){"use strict";r.d(e,"a",(function(){return c}));var n=r(0),i=r(1),o=r(4),s=r(2),a=r(6),u=r(15),c=Object(u.a)((function(t,e,r,u,c){var h=Object(n.d)(o.a,i.g),l=Object(n.d)(o.c,i.g);function f(t,e){return e[1]?Object(n.g)(t,i.g):t}function d(t){return t===n.a?n.a:Object(n.g)((function(t){return h(t)!==a.a}),Object(n.d)(t,i.l))}function p(){return function(t){return h(t)===a.a}}function m(t,e,r,n,o){var a=t(r);if(a){var u=function(t,e,r){return Object(i.f)((function(t,e){return e(t,r)}),e,t)}(e,n,a);return o(r.substr(Object(s.e)(a[0])),u)}}function g(t,e){return Object(n.j)(m,t,e)}var v=Object(n.h)(g(t,Object(i.h)(f,(function(t,e){var r=e[3];if(!r)return t;var o=Object(n.j)(s.b,Object(i.c)(r.split(/\W+/))),a=Object(n.d)(o,l);return Object(n.g)(a,t)}),(function(t,e){var r=e[2],i=r&&"*"!==r?function(t){return String(h(t))===r}:n.a;return Object(n.g)(i,t)}),d)),g(e,Object(i.h)((function(t){if(t===n.a)return n.a;var e=p(),r=t,i=d((function(t){return o(t)})),o=Object(n.h)(e,r,i);return o}))),g(r,Object(i.h)()),g(u,Object(i.h)(f,p)),g(c,Object(i.h)((function(t){return function(e){var r=t(e);return!0===r?Object(i.g)(e):r}}))),(function(t){throw Error('"'+t+'" could not be tokenised')}));function y(t,e){return e}function b(t,e){return v(t,e,t?b:y)}return function(t){try{return b(t,n.a)}catch(e){throw Error('Could not compile "'+t+'" because '+e.message)}}}))},function(t,e,r){"use strict";r.d(e,"a",(function(){return m}));var n,i,o,s,a,u,c,h,l,f,d,p=r(0),m=(n=Object(p.k)((function(t){return t.unshift(/^/),(e=RegExp(t.map(Object(p.c)("source")).join(""))).exec.bind(e);var e})),s=n(i=/(\$?)/,/([\w-_]+|\*)/,o=/(?:{([\w ]*?)})?/),a=n(i,/\["([^"]+)"\]/,o),u=n(i,/\[(\d+|\*)\]/,o),c=n(i,/()/,/{([\w ]*?)}/),h=n(/\.\./),l=n(/\./),f=n(i,/!/),d=n(/$/),function(t){return t(Object(p.h)(s,a,u,c),h,l,f,d)})},function(t,e,r){"use strict";r.d(e,"a",(function(){return a}));var n=r(3),i=r(0),o=r(2),s=r(5);function a(t,e){var r,a=/^(node|path):./,u=t(n.h),c=t(n.e).emit,h=t(n.g).emit,l=Object(i.k)((function(e,n){if(r[e])Object(i.b)(n,r[e]);else{var o=t(e),s=n[0];a.test(e)?f(o,p(s)):o.on(s)}return r}));function f(t,e,n){n=n||e;var o=d(e);return t.on((function(){var e=!1;r.forget=function(){e=!0},Object(i.b)(arguments,o),delete r.forget,e&&t.un(n)}),n),r}function d(t){return function(){try{return t.apply(r,arguments)}catch(t){setTimeout((function(){throw new Error(t.message)}))}}}function p(t){return function(){var e=t.apply(this,arguments);Object(o.a)(e)&&(e===s.a.drop?c():h(e))}}function m(e,r,n){var i;i="node"===e?p(n):n,f(function(e,r){return t(e+":"+r)}(e,r),i,n)}function g(t,e,n){return Object(o.d)(e)?m(t,e,n):function(t,e){for(var r in e)m(t,r,e[r])}(t,e),r}return t(n.i).on((function(t){r.root=Object(i.f)(t)})),t(n.c).on((function(t,e){r.header=function(t){return t?e[t]:e}})),r={on:l,addListener:l,removeListener:function(e,n,i){if("done"===e)u.un(n);else if("node"===e||"path"===e)t.un(e+":"+n,i);else{var o=n;t(e).un(o)}return r},emit:t.emit,node:Object(i.j)(g,"node"),path:Object(i.j)(g,"path"),done:Object(i.j)(f,u),start:Object(i.j)((function(e,n){return t(e).on(d(n),n),r}),n.c),fail:t(n.b).on,abort:t(n.a).emit,header:i.i,root:i.i,source:e}}},function(t,e,r){"use strict";r.d(e,"a",(function(){return i}));var n=r(3);function i(t){var e,r,i,o,s=t(n.j).emit,a=t(n.l).emit,u=t(n.k).emit,c=t(n.b).emit,h=65536,l=/[\\"\n]/g,f=0,d=f++,p=f++,m=f++,g=f++,v=f++,y=f++,b=f++,w=f++,M=f++,_=f++,x=f++,k=f++,O=f++,S=f++,A=f++,E=f++,j=f++,T=f++,P=f++,C=f++,I=h,B="",N=!1,R=!1,L=d,F=[],D=null,q=0,U=0,H=0,z=0,V=1;function W(t){void 0!==o&&(a(o),u(),o=void 0),e=Error(t+"\nLn: "+V+"\nCol: "+z+"\nChr: "+r),c(Object(n.o)(void 0,void 0,e))}function $(t){return"\r"===t||"\n"===t||" "===t||"\t"===t}t(n.m).on((function(t){if(!e){if(R)return W("Cannot write after close");var n,c=0;for(r=t[0];r&&(c>0&&(i=r),r=t[c++]);)switch(H++,"\n"===r?(V++,z=0):z++,L){case d:if("{"===r)L=m;else if("["===r)L=v;else if(!$(r))return W("Non-whitespace before {[.");continue;case w:case m:if($(r))continue;if(L===w)F.push(M);else{if("}"===r){a({}),u(),L=F.pop()||p;continue}F.push(g)}if('"'!==r)return W('Malformed object key should start with " ');L=b;continue;case M:case g:if($(r))continue;if(":"===r)L===g?(F.push(g),void 0!==o&&(a({}),s(o),o=void 0),U++):void 0!==o&&(s(o),o=void 0),L=p;else if("}"===r)void 0!==o&&(a(o),u(),o=void 0),u(),U--,L=F.pop()||p;else{if(","!==r)return W("Bad object");L===g&&F.push(g),void 0!==o&&(a(o),u(),o=void 0),L=w}continue;case v:case p:if($(r))continue;if(L===v){if(a([]),U++,L=p,"]"===r){u(),U--,L=F.pop()||p;continue}F.push(y)}if('"'===r)L=b;else if("{"===r)L=m;else if("["===r)L=v;else if("t"===r)L=_;else if("f"===r)L=O;else if("n"===r)L=j;else if("-"===r)B+=r;else if("0"===r)B+=r,L=20;else{if(-1==="123456789".indexOf(r))return W("Bad value");B+=r,L=20}continue;case y:if(","===r)F.push(y),void 0!==o&&(a(o),u(),o=void 0),L=p;else{if("]"!==r){if($(r))continue;return W("Bad array")}void 0!==o&&(a(o),u(),o=void 0),u(),U--,L=F.pop()||p}continue;case b:void 0===o&&(o="");var f=c-1;t:for(;;){for(;q>0;)if(D+=r,r=t.charAt(c++),4===q?(o+=String.fromCharCode(parseInt(D,16)),q=0,f=c-1):q++,!r)break t;if('"'===r&&!N){L=F.pop()||p,o+=t.substring(f,c-1);break}if(!("\\"!==r||N||(N=!0,o+=t.substring(f,c-1),r=t.charAt(c++))))break;if(N){if(N=!1,"n"===r?o+="\n":"r"===r?o+="\r":"t"===r?o+="\t":"f"===r?o+="\f":"b"===r?o+="\b":"u"===r?(q=1,D=""):o+=r,r=t.charAt(c++),f=c-1,r)continue;break}l.lastIndex=c;var G=l.exec(t);if(!G){c=t.length+1,o+=t.substring(f,c-1);break}if(c=G.index+1,!(r=t.charAt(G.index))){o+=t.substring(f,c-1);break}}continue;case _:if(!r)continue;if("r"!==r)return W("Invalid true started with t"+r);L=x;continue;case x:if(!r)continue;if("u"!==r)return W("Invalid true started with tr"+r);L=k;continue;case k:if(!r)continue;if("e"!==r)return W("Invalid true started with tru"+r);a(!0),u(),L=F.pop()||p;continue;case O:if(!r)continue;if("a"!==r)return W("Invalid false started with f"+r);L=S;continue;case S:if(!r)continue;if("l"!==r)return W("Invalid false started with fa"+r);L=A;continue;case A:if(!r)continue;if("s"!==r)return W("Invalid false started with fal"+r);L=E;continue;case E:if(!r)continue;if("e"!==r)return W("Invalid false started with fals"+r);a(!1),u(),L=F.pop()||p;continue;case j:if(!r)continue;if("u"!==r)return W("Invalid null started with n"+r);L=T;continue;case T:if(!r)continue;if("l"!==r)return W("Invalid null started with nu"+r);L=P;continue;case P:if(!r)continue;if("l"!==r)return W("Invalid null started with nul"+r);a(null),u(),L=F.pop()||p;continue;case C:if("."!==r)return W("Leading zero not followed by .");B+=r,L=20;continue;case 20:if(-1!=="0123456789".indexOf(r))B+=r;else if("."===r){if(-1!==B.indexOf("."))return W("Invalid number has two dots");B+=r}else if("e"===r||"E"===r){if(-1!==B.indexOf("e")||-1!==B.indexOf("E"))return W("Invalid number has two exponential");B+=r}else if("+"===r||"-"===r){if("e"!==i&&"E"!==i)return W("Invalid symbol in number");B+=r}else B&&(a(parseFloat(B)),u(),B=""),c--,L=F.pop()||p;continue;default:return W("Unknown state: "+L)}H>=I&&(n=0,void 0!==o&&o.length>h&&(W("Max buffer length exceeded: textNode"),n=Math.max(n,o.length)),B.length>h&&(W("Max buffer length exceeded: numberNode"),n=Math.max(n,B.length)),I=h-n+H)}})),t(n.n).on((function(){if(L===d)return a({}),u(),void(R=!0);L===p&&0===U||W("Unexpected end"),void 0!==o&&(a(o),u(),o=void 0),R=!0}))}},function(t,e,r){"use strict";r.d(e,"a",(function(){return u})),r.d(e,"b",(function(){return c}));var n=r(19),i=r(3),o=r(2),s=r(20),a=r(0);function u(){return new XMLHttpRequest}function c(t,e,r,u,c,h,l){var f=t(i.m).emit,d=t(i.b).emit,p=0,m=!0;function g(){if("2"===String(e.status)[0]){var t=e.responseText,r=(" "+t.substr(p)).substr(1);r&&f(r),p=Object(o.e)(t)}}function v(e){try{m&&t(i.c).emit(e.status,Object(s.a)(e.getAllResponseHeaders())),m=!1}catch(t){}}t(i.a).on((function(){e.onreadystatechange=null,e.abort()})),"onprogress"in e&&(e.onprogress=g),e.onreadystatechange=function(){switch(e.readyState){case 2:case 3:return v(e);case 4:v(e),"2"===String(e.status)[0]?(g(),t(i.n).emit()):d(Object(i.o)(e.status,e.responseText))}};try{for(var y in e.open(r,u,!0),h)e.setRequestHeader(y,h[y]);Object(n.a)(window.location,Object(n.b)(u))||e.setRequestHeader("X-Requested-With","XMLHttpRequest"),e.withCredentials=l,e.send(c)}catch(t){window.setTimeout(Object(a.j)(d,Object(i.o)(void 0,void 0,t)),0)}}},function(t,e,r){"use strict";function n(t,e){function r(e){return String(e.port||{"http:":80,"https:":443}[e.protocol||t.protocol])}return!!(e.protocol&&e.protocol!==t.protocol||e.host&&e.host!==t.host||e.host&&r(e)!==r(t))}function i(t){var e=/(\w+:)?(?:\/\/)([\w.-]+)?(?::(\d+))?\/?/.exec(t)||[];return{protocol:e[1]||"",host:e[2]||"",port:e[3]||""}}r.d(e,"a",(function(){return n})),r.d(e,"b",(function(){return i}))},function(t,e,r){"use strict";function n(t){var e={};return t&&t.split("\r\n").forEach((function(t){var r=t.indexOf(": ");e[t.substring(0,r)]=t.substring(r+2)})),e}r.d(e,"a",(function(){return n}))}]).default},t.exports=e()},49604:(t,e,r)=>{var n=r(23944);t.exports=function(t){return"string"!=typeof t?t:n(t)?t.slice(2):t}},54928:t=>{"use strict";t.exports={ErrorResponse:function(t){var e=t&&t.error&&t.error.message?t.error.message:JSON.stringify(t),r=t.error&&t.error.data?t.error.data:null,n=new Error("Returned error: "+e);return n.data=r,n},InvalidNumberOfParams:function(t,e,r){return new Error('Invalid number of parameters for "'+r+'". Got '+t+" expected "+e+"!")},InvalidConnection:function(t,e){return this.ConnectionError("CONNECTION ERROR: Couldn't connect to node "+t+".",e)},InvalidProvider:function(){return new Error("Provider not set or invalid")},InvalidResponse:function(t){var e=t&&t.error&&t.error.message?t.error.message:"Invalid JSON RPC response: "+JSON.stringify(t);return new Error(e)},ConnectionTimeout:function(t){return new Error("CONNECTION TIMEOUT: timeout of "+t+" ms achived")},ConnectionNotOpenError:function(t){return this.ConnectionError("connection not open on send()",t)},ConnectionCloseError:function(t){return"object"==typeof t&&t.code&&t.reason?this.ConnectionError("CONNECTION ERROR: The connection got closed with the close code `"+t.code+"` and the following reason string `"+t.reason+"`",t):new Error("CONNECTION ERROR: The connection closed unexpectedly")},MaxAttemptsReachedOnReconnectingError:function(){return new Error("Maximum number of reconnect attempts reached!")},PendingRequestsOnReconnectingError:function(){return new Error("CONNECTION ERROR: Provider started to reconnect before the response got received!")},ConnectionError:function(t,e){const r=new Error(t);return e&&(r.code=e.code,r.reason=e.reason),r},RevertInstructionError:function(t,e){var r=new Error("Your request got reverted with the following reason string: "+t);return r.reason=t,r.signature=e,r},TransactionRevertInstructionError:function(t,e,r){var n=new Error("Transaction has been reverted by the EVM:\n"+JSON.stringify(r,null,2));return n.reason=t,n.signature=e,n.receipt=r,n},TransactionError:function(t,e){var r=new Error(t);return r.receipt=e,r},NoContractAddressFoundError:function(t){return this.TransactionError("The transaction receipt didn't contain a contract address.",t)},ContractCodeNotStoredError:function(t){return this.TransactionError("The contract code couldn't be stored, please check your gas limit.",t)},TransactionRevertedWithoutReasonError:function(t){return this.TransactionError("Transaction has been reverted by the EVM:\n"+JSON.stringify(t,null,2),t)},TransactionOutOfGasError:function(t){return this.TransactionError("Transaction ran out of gas. Please provide more gas:\n"+JSON.stringify(t,null,2),t)},ResolverMethodMissingError:function(t,e){return new Error("The resolver at "+t+'does not implement requested method: "'+e+'".')},ContractMissingABIError:function(){return new Error("You must provide the json interface of the contract when instantiating a contract object.")},ContractOnceRequiresCallbackError:function(){return new Error("Once requires a callback as the second parameter.")},ContractEventDoesNotExistError:function(t){return new Error('Event "'+t+"\" doesn't exist in this contract.")},ContractReservedEventError:function(t){return new Error('The event "'+t+"\" is a reserved event name, you can't use it.")},ContractMissingDeployDataError:function(){return new Error('No "data" specified in neither the given options, nor the default options.')},ContractNoAddressDefinedError:function(){return new Error("This contract object doesn't have address set yet, please set an address first.")},ContractNoFromAddressDefinedError:function(){return new Error('No "from" address specified in neither the given options, nor the default options.')}}},76267:(t,e,r)=>{"use strict";var n=r(18269),i=r(34751),o=function(t){return n.toBN(t).toString(10)},s=function(t){if(void 0!==t)return function(t){return"latest"===t||"pending"===t||"earliest"===t}(t)?t:"genesis"===t?"0x0":n.isHexStrict(t)?"string"==typeof t?t.toLowerCase():t:n.numberToHex(t)},a=function(t){if(t.to&&(t.to=h(t.to)),t.data&&t.input)throw new Error('You can\'t have "data" and "input" as properties of transactions at the same time, please use either "data" or "input" instead.');if(!t.data&&t.input&&(t.data=t.input,delete t.input),t.data&&!t.data.startsWith("0x")&&(t.data="0x"+t.data),t.data&&!n.isHex(t.data))throw new Error("The data field must be HEX encoded data.");return(t.gas||t.gasLimit)&&(t.gas=t.gas||t.gasLimit),(t.maxPriorityFeePerGas||t.maxFeePerGas)&&delete t.gasPrice,["gasPrice","gas","value","maxPriorityFeePerGas","maxFeePerGas","nonce"].filter((function(e){return void 0!==t[e]})).forEach((function(e){t[e]=n.numberToHex(t[e])})),t},u=function(t){return null!==t.blockNumber&&(t.blockNumber=n.hexToNumber(t.blockNumber)),null!==t.transactionIndex&&(t.transactionIndex=n.hexToNumber(t.transactionIndex)),t.nonce=n.hexToNumber(t.nonce),t.gas=n.hexToNumber(t.gas),t.gasPrice&&(t.gasPrice=o(t.gasPrice)),t.maxFeePerGas&&(t.maxFeePerGas=o(t.maxFeePerGas)),t.maxPriorityFeePerGas&&(t.maxPriorityFeePerGas=o(t.maxPriorityFeePerGas)),t.type&&(t.type=n.hexToNumber(t.type)),t.value=o(t.value),t.to&&n.isAddress(t.to)?t.to=n.toChecksumAddress(t.to):t.to=null,t.from&&(t.from=n.toChecksumAddress(t.from)),t},c=function(t){if("string"==typeof t.blockHash&&"string"==typeof t.transactionHash&&"string"==typeof t.logIndex){var e=n.sha3(t.blockHash.replace("0x","")+t.transactionHash.replace("0x","")+t.logIndex.replace("0x",""));t.id="log_"+e.replace("0x","").substr(0,8)}else t.id||(t.id=null);return null!==t.blockNumber&&(t.blockNumber=n.hexToNumber(t.blockNumber)),null!==t.transactionIndex&&(t.transactionIndex=n.hexToNumber(t.transactionIndex)),null!==t.logIndex&&(t.logIndex=n.hexToNumber(t.logIndex)),t.address&&(t.address=n.toChecksumAddress(t.address)),t},h=function(t){var e=new i(t);if(e.isValid()&&e.isDirect())return e.toAddress().toLowerCase();if(n.isAddress(t))return"0x"+t.toLowerCase().replace("0x","");throw new Error(`Provided address ${t} is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted.`)};t.exports={inputDefaultBlockNumberFormatter:function(t){return s(this&&null==t?this.defaultBlock:t)},inputBlockNumberFormatter:s,inputCallFormatter:function(t){var e=(t=a(t)).from||(this?this.defaultAccount:null);return e&&(t.from=h(e)),t},inputTransactionFormatter:function(t){if("number"!=typeof(t=a(t)).from&&(!t.from||"object"!=typeof t.from)){if(t.from=t.from||(this?this.defaultAccount:null),!t.from&&"number"!=typeof t.from)throw new Error('The send transactions "from" field must be defined!');t.from=h(t.from)}return t},inputAddressFormatter:h,inputPostFormatter:function(t){return t.ttl&&(t.ttl=n.numberToHex(t.ttl)),t.workToProve&&(t.workToProve=n.numberToHex(t.workToProve)),t.priority&&(t.priority=n.numberToHex(t.priority)),Array.isArray(t.topics)||(t.topics=t.topics?[t.topics]:[]),t.topics=t.topics.map((function(t){return 0===t.indexOf("0x")?t:n.fromUtf8(t)})),t},inputLogFormatter:function(t){var e=function(t){return null==t?null:0===(t=String(t)).indexOf("0x")?t:n.fromUtf8(t)};return void 0===t&&(t={}),void 0===t.fromBlock&&(t={...t,fromBlock:"latest"}),(t.fromBlock||0===t.fromBlock)&&(t.fromBlock=s(t.fromBlock)),(t.toBlock||0===t.toBlock)&&(t.toBlock=s(t.toBlock)),t.topics=t.topics||[],t.topics=t.topics.map((function(t){return Array.isArray(t)?t.map(e):e(t)})),e=null,t.address&&(t.address=Array.isArray(t.address)?t.address.map((function(t){return h(t)})):h(t.address)),t},inputSignFormatter:function(t){return n.isHexStrict(t)?t:n.utf8ToHex(t)},inputStorageKeysFormatter:function(t){return t.map(n.numberToHex)},outputProofFormatter:function(t){return t.address=n.toChecksumAddress(t.address),t.nonce=n.hexToNumberString(t.nonce),t.balance=n.hexToNumberString(t.balance),t},outputBigNumberFormatter:o,outputTransactionFormatter:u,outputTransactionReceiptFormatter:function(t){if("object"!=typeof t)throw new Error("Received receipt is invalid: "+t);return null!==t.blockNumber&&(t.blockNumber=n.hexToNumber(t.blockNumber)),null!==t.transactionIndex&&(t.transactionIndex=n.hexToNumber(t.transactionIndex)),t.cumulativeGasUsed=n.hexToNumber(t.cumulativeGasUsed),t.gasUsed=n.hexToNumber(t.gasUsed),Array.isArray(t.logs)&&(t.logs=t.logs.map(c)),t.contractAddress&&(t.contractAddress=n.toChecksumAddress(t.contractAddress)),void 0!==t.status&&null!==t.status&&(t.status=Boolean(parseInt(t.status))),t},outputBlockFormatter:function(t){return t.gasLimit=n.hexToNumber(t.gasLimit),t.gasUsed=n.hexToNumber(t.gasUsed),t.size=n.hexToNumber(t.size),t.timestamp=n.hexToNumber(t.timestamp),null!==t.number&&(t.number=n.hexToNumber(t.number)),t.difficulty&&(t.difficulty=o(t.difficulty)),t.totalDifficulty&&(t.totalDifficulty=o(t.totalDifficulty)),Array.isArray(t.transactions)&&t.transactions.forEach((function(t){if("string"!=typeof t)return u(t)})),t.miner&&(t.miner=n.toChecksumAddress(t.miner)),t.baseFeePerGas&&(t.baseFeePerGas=n.hexToNumber(t.baseFeePerGas)),t},outputLogFormatter:c,outputPostFormatter:function(t){return t.expiry=n.hexToNumber(t.expiry),t.sent=n.hexToNumber(t.sent),t.ttl=n.hexToNumber(t.ttl),t.workProved=n.hexToNumber(t.workProved),t.topics||(t.topics=[]),t.topics=t.topics.map((function(t){return n.toUtf8(t)})),t},outputSyncingFormatter:function(t){return t.startingBlock=n.hexToNumber(t.startingBlock),t.currentBlock=n.hexToNumber(t.currentBlock),t.highestBlock=n.hexToNumber(t.highestBlock),t.knownStates&&(t.knownStates=n.hexToNumber(t.knownStates),t.pulledStates=n.hexToNumber(t.pulledStates)),t}}},84390:(t,e,r)=>{"use strict";var n=r(54928),i=r(76267);t.exports={errors:n,formatters:i}},93952:(t,e,r)=>{"use strict";var n=r(84390).errors,i=r(84390).formatters,o=r(18269),s=r(4017),a=r(96602).subscriptions,u=r(64377),c=function(t){if(!t.call||!t.name)throw new Error('When creating a method you need to provide at least the "name" and "call" property.');this.name=t.name,this.call=t.call,this.params=t.params||0,this.inputFormatter=t.inputFormatter,this.outputFormatter=t.outputFormatter,this.transformPayload=t.transformPayload,this.extraFormatters=t.extraFormatters,this.abiCoder=t.abiCoder,this.requestManager=t.requestManager,this.accounts=t.accounts,this.defaultBlock=t.defaultBlock||"latest",this.defaultAccount=t.defaultAccount||null,this.transactionBlockTimeout=t.transactionBlockTimeout||50,this.transactionConfirmationBlocks=t.transactionConfirmationBlocks||24,this.transactionPollingTimeout=t.transactionPollingTimeout||750,this.blockHeaderTimeout=t.blockHeaderTimeout||10,this.defaultCommon=t.defaultCommon,this.defaultChain=t.defaultChain,this.defaultHardfork=t.defaultHardfork,this.handleRevert=t.handleRevert};c.prototype.setRequestManager=function(t,e){this.requestManager=t,e&&(this.accounts=e)},c.prototype.createFunction=function(t,e){var r=this.buildCall();return r.call=this.call,this.setRequestManager(t||this.requestManager,e||this.accounts),r},c.prototype.attachToObject=function(t){var e=this.buildCall();e.call=this.call;var r=this.name.split(".");r.length>1?(t[r[0]]=t[r[0]]||{},t[r[0]][r[1]]=e):t[r[0]]=e},c.prototype.getCall=function(t){return"function"==typeof this.call?this.call(t):this.call},c.prototype.extractCallback=function(t){if("function"==typeof t[t.length-1])return t.pop()},c.prototype.validateArgs=function(t){if(t.length!==this.params)throw n.InvalidNumberOfParams(t.length,this.params,this.name)},c.prototype.formatInput=function(t){var e=this;return this.inputFormatter?this.inputFormatter.map((function(r,n){return r?r.call(e,t[n]):t[n]})):t},c.prototype.formatOutput=function(t){var e=this;return Array.isArray(t)?t.map((function(t){return e.outputFormatter&&t?e.outputFormatter(t):t})):this.outputFormatter&&t?this.outputFormatter(t):t},c.prototype.toPayload=function(t){var e=this.getCall(t),r=this.extractCallback(t),n=this.formatInput(t);this.validateArgs(n);var i={method:e,params:n,callback:r};return this.transformPayload&&(i=this.transformPayload(i)),i},c.prototype._confirmTransaction=function(t,e,r){var h=this,l=!1,f=!0,d=0,p=0,m=null,g=null,v=null,y=r.params[0]&&"object"==typeof r.params[0]&&r.params[0].gas?r.params[0].gas:null,b=!!r.params[0]&&"object"==typeof r.params[0]&&r.params[0].data&&r.params[0].from&&!r.params[0].to,w=b&&r.params[0].data.length>2,M=[new c({name:"getBlockByNumber",call:"eth_getBlockByNumber",params:2,inputFormatter:[i.inputBlockNumberFormatter,function(t){return!!t}],outputFormatter:i.outputBlockFormatter}),new c({name:"getTransactionReceipt",call:"eth_getTransactionReceipt",params:1,inputFormatter:[null],outputFormatter:i.outputTransactionReceiptFormatter}),new c({name:"getCode",call:"eth_getCode",params:2,inputFormatter:[i.inputAddressFormatter,i.inputDefaultBlockNumberFormatter]}),new c({name:"getTransactionByHash",call:"eth_getTransactionByHash",params:1,inputFormatter:[null],outputFormatter:i.outputTransactionFormatter}),new a({name:"subscribe",type:"eth",subscriptions:{newBlockHeaders:{subscriptionName:"newHeads",params:0,outputFormatter:i.outputBlockFormatter}}})],_={};M.forEach((t=>{t.attachToObject(_),t.requestManager=h.requestManager}));var x=function(a,c,M,x,k){if(!M)return k||(k={unsubscribe:function(){clearInterval(m),clearTimeout(g)}}),(a?s.resolve(a):_.getTransactionReceipt(e)).catch((function(e){k.unsubscribe(),l=!0,o._fireError({message:"Failed to check for transaction receipt:",data:e},t.eventEmitter,t.reject)})).then((async function(e){if(!e||!e.blockHash)throw new Error("Receipt missing or blockHash null");if(h.extraFormatters&&h.extraFormatters.receiptFormatter&&(e=h.extraFormatters.receiptFormatter(e)),t.eventEmitter.listeners("confirmation").length>0){var r;if(void 0===a||0!==p){var n=await _.getBlockByNumber("latest"),i=n?n.hash:null;c?v?(r=await _.getBlockByNumber(v.number+1))&&(v=r,t.eventEmitter.emit("confirmation",p,e,i)):(r=await _.getBlockByNumber(e.blockNumber),v=r,t.eventEmitter.emit("confirmation",p,e,i)):t.eventEmitter.emit("confirmation",p,e,i)}(c&&r||!c)&&p++,f=!1,p===h.transactionConfirmationBlocks+1&&(k.unsubscribe(),t.eventEmitter.removeAllListeners())}return e})).then((async function(e){if(b&&!l){if(!e.contractAddress)return f&&(k.unsubscribe(),l=!0),void o._fireError(n.NoContractAddressFoundError(e),t.eventEmitter,t.reject,null,e);var r;try{r=await _.getCode(e.contractAddress)}catch(t){}if(!r)return;!0===e.status&&w||r.length>2?(t.eventEmitter.emit("receipt",e),h.extraFormatters&&h.extraFormatters.contractDeployFormatter?t.resolve(h.extraFormatters.contractDeployFormatter(e)):t.resolve(e),f&&t.eventEmitter.removeAllListeners()):o._fireError(n.ContractCodeNotStoredError(e),t.eventEmitter,t.reject,null,e),f&&k.unsubscribe(),l=!0}return e})).then((async function(e){if(!b&&!l){if(e.outOfGas||y&&y===e.gasUsed||!0!==e.status&&"0x1"!==e.status&&void 0!==e.status)if(JSON.stringify(e,null,2),!1===e.status||"0x0"===e.status)try{var s;if(!h.handleRevert||"eth_sendTransaction"!==h.call&&"eth_sendRawTransaction"!==h.call)throw!1;var a=r.params[0];if("eth_sendRawTransaction"===h.call){var c=r.params[0],d=u.parse(c);a=i.inputTransactionFormatter({data:d.data,to:d.to,from:d.from,gas:d.gasLimit.toHexString(),gasPrice:d.gasPrice.toHexString(),value:d.value.toHexString()})}if(!(s=await h.getRevertReason(a,e.blockNumber)))throw!1;o._fireError(n.TransactionRevertInstructionError(s.reason,s.signature,e),t.eventEmitter,t.reject,null,e)}catch(r){o._fireError(n.TransactionRevertedWithoutReasonError(e),t.eventEmitter,t.reject,null,e)}else o._fireError(n.TransactionOutOfGasError(e),t.eventEmitter,t.reject,null,e);else t.eventEmitter.emit("receipt",e),t.resolve(e),f&&t.eventEmitter.removeAllListeners();f&&k.unsubscribe(),l=!0}})).catch((function(){d++,c?d-1>=h.transactionPollingTimeout&&(k.unsubscribe(),l=!0,o._fireError(n.TransactionError("Transaction was not mined within "+h.transactionPollingTimeout+" seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!"),t.eventEmitter,t.reject)):d-1>=h.transactionBlockTimeout&&(k.unsubscribe(),l=!0,o._fireError(n.TransactionError("Transaction was not mined within "+h.transactionBlockTimeout+" blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!"),t.eventEmitter,t.reject))}));k.unsubscribe(),l=!0,o._fireError({message:"Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.",data:M},t.eventEmitter,t.reject)},k=function(t){let e=!1;const r=()=>{m=setInterval(x.bind(null,t,!0),1e3)};if(!this.requestManager.provider.on)return r();_.subscribe("newBlockHeaders",(function(n,i,o){if(e=!0,n||!i)return r();x(t,!1,n,0,o)})),g=setTimeout((()=>{e||r()}),1e3*this.blockHeaderTimeout)}.bind(this);_.getTransactionReceipt(e).then((function(e){e&&e.blockHash?(t.eventEmitter.listeners("confirmation").length>0&&k(e),x(e,!1)):l||k()})).catch((function(){l||k()}))};var h=function(t,e){return"number"==typeof t?e.wallet[t]:t&&"object"==typeof t&&t.address&&t.privateKey?t:e.wallet[t.toLowerCase()]};function l(t,e){return new Promise(((r,n)=>{try{var i=new c({name:"getBlockByNumber",call:"eth_getBlockByNumber",params:2,inputFormatter:[function(t){return t?o.toHex(t):"latest"},function(){return!1}]}).createFunction(t.requestManager),s=new c({name:"getGasPrice",call:"eth_gasPrice",params:0}).createFunction(t.requestManager);Promise.all([i(),s()]).then((t=>{const[n,i]=t;if(("0x2"===e.type||void 0===e.type)&&n&&n.baseFeePerGas){let t,i;e.gasPrice?(t=e.gasPrice,i=e.gasPrice,delete e.gasPrice):(t=e.maxPriorityFeePerGas||"0x9502F900",i=e.maxFeePerGas||o.toHex(o.toBN(n.baseFeePerGas).mul(o.toBN(2)).add(o.toBN(t)))),r({maxFeePerGas:i,maxPriorityFeePerGas:t})}else{if(e.maxPriorityFeePerGas||e.maxFeePerGas)throw Error("Network doesn't support eip-1559");r({gasPrice:i})}}))}catch(t){n(t)}}))}c.prototype.buildCall=function(){var t=this,e="eth_sendTransaction"===t.call||"eth_sendRawTransaction"===t.call,r="eth_call"===t.call,i=function(){var i=s(!e),a=t.toPayload(Array.prototype.slice.call(arguments)),u=function(s,u){var c;if(t.handleRevert&&r&&t.abiCoder&&(!s&&t.isRevertReasonString(u)?c=u.substring(10):s&&s.data&&(c=s.data.substring(10)),c)){var h=t.abiCoder.decodeParameter("string","0x"+c),l="Error(String)";o._fireError(n.RevertInstructionError(h,l),i.eventEmitter,i.reject,a.callback,{reason:h,signature:l})}else{try{u=t.formatOutput(u)}catch(t){s=t}if(u instanceof Error&&(s=u),s)return s.error&&(s=s.error),o._fireError(s,i.eventEmitter,i.reject,a.callback);a.callback&&a.callback(null,u),e?(i.eventEmitter.emit("transactionHash",u),t._confirmTransaction(i,u,a)):s||i.resolve(u)}},c=function(e){var r={...a,method:"eth_sendRawTransaction",params:[e.rawTransaction]};t.requestManager.send(r,u)},f=function(t,e){var r;if(e&&e.accounts&&e.accounts.wallet&&e.accounts.wallet.length)if("eth_sendTransaction"===t.method){var n=t.params[0];if((r=h(n&&"object"==typeof n?n.from:null,e.accounts))&&r.privateKey)return delete(n=JSON.parse(JSON.stringify(n))).from,e.defaultChain&&!n.chain&&(n.chain=e.defaultChain),e.defaultHardfork&&!n.hardfork&&(n.hardfork=e.defaultHardfork),e.defaultCommon&&!n.common&&(n.common=e.defaultCommon),void e.accounts.signTransaction(n,r.privateKey).then(c).catch((function(t){if("function"==typeof i.eventEmitter.listeners&&i.eventEmitter.listeners("error").length){try{i.eventEmitter.emit("error",t)}catch(t){}i.eventEmitter.removeAllListeners(),i.eventEmitter.catch((function(){}))}i.reject(t)}))}else if("eth_sign"===t.method){var o=t.params[1];if((r=h(t.params[0],e.accounts))&&r.privateKey){var s=e.accounts.sign(o,r.privateKey);return t.callback&&t.callback(null,s.signature),void i.resolve(s.signature)}}return e.requestManager.send(t,u)};return e&&a.params[0]&&"object"==typeof a.params[0]&&void 0===a.params[0].gasPrice&&(void 0===a.params[0].maxPriorityFeePerGas||void 0===a.params[0].maxFeePerGas)?l(t,a.params[0]).then((r=>{void 0!==r.gasPrice?a.params[0].gasPrice=r.gasPrice:void 0!==r.maxPriorityFeePerGas&&void 0!==r.maxFeePerGas&&(a.params[0].maxPriorityFeePerGas=r.maxPriorityFeePerGas,a.params[0].maxFeePerGas=r.maxFeePerGas),e&&setTimeout((()=>{i.eventEmitter.emit("sending",a)}),0),f(a,t)})):(e&&setTimeout((()=>{i.eventEmitter.emit("sending",a)}),0),f(a,t)),e&&setTimeout((()=>{i.eventEmitter.emit("sent",a)}),0),i.eventEmitter};return i.method=t,i.request=this.request.bind(this),i},c.prototype.getRevertReason=function(t,e){var r=this;return new Promise((function(n,i){new c({name:"call",call:"eth_call",params:2,abiCoder:r.abiCoder,handleRevert:!0}).createFunction(r.requestManager)(t,o.numberToHex(e)).then((function(){n(!1)})).catch((function(t){t.reason?n({reason:t.reason,signature:t.signature}):i(t)}))}))},c.prototype.isRevertReasonString=function(t){return"string"==typeof t&&(t.length-2)/2%32==4&&"0x08c379a0"===t.substring(0,10)},c.prototype.request=function(){var t=this.toPayload(Array.prototype.slice.call(arguments));return t.format=this.formatOutput.bind(this),t},t.exports=c},4017:(t,e,r)=>{"use strict";var n=r(63130),i=function(t){var e,r,i=new Promise((function(){e=arguments[0],r=arguments[1]}));if(t)return{resolve:e,reject:r,eventEmitter:i};var o=new n;return i._events=o._events,i.emit=o.emit,i.on=o.on,i.once=o.once,i.off=o.off,i.listeners=o.listeners,i.addListener=o.addListener,i.removeListener=o.removeListener,i.removeAllListeners=o.removeAllListeners,{resolve:e,reject:r,eventEmitter:i}};i.resolve=function(t){var e=i(!0);return e.resolve(t),e.eventEmitter},t.exports=i},63130:t=>{"use strict";var e=Object.prototype.hasOwnProperty,r="~";function n(){}function i(t,e,r){this.fn=t,this.context=e,this.once=r||!1}function o(t,e,n,o,s){if("function"!=typeof n)throw new TypeError("The listener must be a function");var a=new i(n,o||t,s),u=r?r+e:e;return t._events[u]?t._events[u].fn?t._events[u]=[t._events[u],a]:t._events[u].push(a):(t._events[u]=a,t._eventsCount++),t}function s(t,e){0==--t._eventsCount?t._events=new n:delete t._events[e]}function a(){this._events=new n,this._eventsCount=0}Object.create&&(n.prototype=Object.create(null),(new n).__proto__||(r=!1)),a.prototype.eventNames=function(){var t,n,i=[];if(0===this._eventsCount)return i;for(n in t=this._events)e.call(t,n)&&i.push(r?n.slice(1):n);return Object.getOwnPropertySymbols?i.concat(Object.getOwnPropertySymbols(t)):i},a.prototype.listeners=function(t){var e=r?r+t:t,n=this._events[e];if(!n)return[];if(n.fn)return[n.fn];for(var i=0,o=n.length,s=new Array(o);i<o;i++)s[i]=n[i].fn;return s},a.prototype.listenerCount=function(t){var e=r?r+t:t,n=this._events[e];return n?n.fn?1:n.length:0},a.prototype.emit=function(t,e,n,i,o,s){var a=r?r+t:t;if(!this._events[a])return!1;var u,c,h=this._events[a],l=arguments.length;if(h.fn){switch(h.once&&this.removeListener(t,h.fn,void 0,!0),l){case 1:return h.fn.call(h.context),!0;case 2:return h.fn.call(h.context,e),!0;case 3:return h.fn.call(h.context,e,n),!0;case 4:return h.fn.call(h.context,e,n,i),!0;case 5:return h.fn.call(h.context,e,n,i,o),!0;case 6:return h.fn.call(h.context,e,n,i,o,s),!0}for(c=1,u=new Array(l-1);c<l;c++)u[c-1]=arguments[c];h.fn.apply(h.context,u)}else{var f,d=h.length;for(c=0;c<d;c++)switch(h[c].once&&this.removeListener(t,h[c].fn,void 0,!0),l){case 1:h[c].fn.call(h[c].context);break;case 2:h[c].fn.call(h[c].context,e);break;case 3:h[c].fn.call(h[c].context,e,n);break;case 4:h[c].fn.call(h[c].context,e,n,i);break;default:if(!u)for(f=1,u=new Array(l-1);f<l;f++)u[f-1]=arguments[f];h[c].fn.apply(h[c].context,u)}}return!0},a.prototype.on=function(t,e,r){return o(this,t,e,r,!1)},a.prototype.once=function(t,e,r){return o(this,t,e,r,!0)},a.prototype.removeListener=function(t,e,n,i){var o=r?r+t:t;if(!this._events[o])return this;if(!e)return s(this,o),this;var a=this._events[o];if(a.fn)a.fn!==e||i&&!a.once||n&&a.context!==n||s(this,o);else{for(var u=0,c=[],h=a.length;u<h;u++)(a[u].fn!==e||i&&!a[u].once||n&&a[u].context!==n)&&c.push(a[u]);c.length?this._events[o]=1===c.length?c[0]:c:s(this,o)}return this},a.prototype.removeAllListeners=function(t){var e;return t?(e=r?r+t:t,this._events[e]&&s(this,e)):(this._events=new n,this._eventsCount=0),this},a.prototype.off=a.prototype.removeListener,a.prototype.addListener=a.prototype.on,a.prefixed=r,a.EventEmitter=a,t.exports=a},98991:(t,e,r)=>{"use strict";var n=r(28911),i=r(84390).errors,o=function(t){this.requestManager=t,this.requests=[]};o.prototype.add=function(t){this.requests.push(t)},o.prototype.execute=function(){var t=this.requests;this.requestManager.sendBatch(t,(function(e,r){r=r||[],t.map((function(t,e){return r[e]||{}})).forEach((function(e,r){if(t[r].callback){if(e&&e.error)return t[r].callback(i.ErrorResponse(e));if(!n.isValidResponse(e))return t[r].callback(i.InvalidResponse(e));try{t[r].callback(null,t[r].format?t[r].format(e.result):e.result)}catch(e){t[r].callback(e)}}}))}))},t.exports=o},72319:t=>{"use strict";var e,r=null;try{e=Function("return this")()}catch(t){e=window}void 0!==e.ethereum?r=e.ethereum:void 0!==e.web3&&e.web3.currentProvider&&(e.web3.currentProvider.sendAsync&&(e.web3.currentProvider.send=e.web3.currentProvider.sendAsync,delete e.web3.currentProvider.sendAsync),!e.web3.currentProvider.on&&e.web3.currentProvider.connection&&"ipcProviderWrapper"===e.web3.currentProvider.connection.constructor.name&&(e.web3.currentProvider.on=function(t,e){if("function"!=typeof e)throw new Error("The second parameter callback must be a function.");switch(t){case"data":this.connection.on("data",(function(t){var r="";t=t.toString();try{r=JSON.parse(t)}catch(r){return e(new Error("Couldn't parse response data"+t))}r.id||-1===r.method.indexOf("_subscription")||e(null,r)}));break;default:this.connection.on(t,e)}}),r=e.web3.currentProvider),t.exports=r},24983:(t,e,r)=>{"use strict";const{callbackify:n}=r(31601);var i=r(84390).errors,o=r(28911),s=r(98991),a=r(72319),u=function t(e,r){this.provider=null,this.providers=t.providers,this.setProvider(e,r),this.subscriptions=new Map};u.givenProvider=a,u.providers={WebsocketProvider:r(69556),HttpProvider:r(34351),IpcProvider:r(73097)},u.prototype.setProvider=function(t,e){var r=this;if(t&&"string"==typeof t&&this.providers)if(/^http(s)?:\/\//i.test(t))t=new this.providers.HttpProvider(t);else if(/^ws(s)?:\/\//i.test(t))t=new this.providers.WebsocketProvider(t);else if(t&&"object"==typeof e&&"function"==typeof e.connect)t=new this.providers.IpcProvider(t,e);else if(t)throw new Error("Can't autodetect provider for \""+t+'"');if(this.provider&&this.provider.connected&&this.clearSubscriptions(),this.provider=t||null,this.provider&&this.provider.on){"function"==typeof t.request?this.provider.on("message",(function(t){if(t&&"eth_subscription"===t.type&&t.data){const e=t.data;e.subscription&&r.subscriptions.has(e.subscription)&&r.subscriptions.get(e.subscription).callback(null,e.result)}})):this.provider.on("data",(function(t,e){(t=t||e).method&&t.params&&t.params.subscription&&r.subscriptions.has(t.params.subscription)&&r.subscriptions.get(t.params.subscription).callback(null,t.params.result)})),this.provider.on("connect",(function(){r.subscriptions.forEach((function(t){t.subscription.resubscribe()}))})),this.provider.on("error",(function(t){r.subscriptions.forEach((function(e){e.callback(t)}))}));const e=function(t){r._isCleanCloseEvent(t)&&!r._isIpcCloseError(t)||(r.subscriptions.forEach((function(e){e.callback(i.ConnectionCloseError(t)),r.subscriptions.delete(e.subscription.id)})),r.provider&&r.provider.emit&&r.provider.emit("error",i.ConnectionCloseError(t))),r.provider&&r.provider.emit&&r.provider.emit("end",t)};this.provider.on("close",e),this.provider.on("disconnect",e)}},u.prototype.send=function(t,e){if(e=e||function(){},!this.provider)return e(i.InvalidProvider());const{method:r,params:s}=t,a=o.toPayload(r,s),u=this._jsonrpcResultCallback(e,a);if(this.provider.request)n(this.provider.request.bind(this.provider))({method:r,params:s},e);else if(this.provider.sendAsync)this.provider.sendAsync(a,u);else{if(!this.provider.send)throw new Error("Provider does not have a request or send method to use.");this.provider.send(a,u)}},u.prototype.sendBatch=function(t,e){if(!this.provider)return e(i.InvalidProvider());var r=o.toBatchPayload(t);this.provider[this.provider.sendAsync?"sendAsync":"send"](r,(function(t,r){return t?e(t):Array.isArray(r)?void e(null,r):e(i.InvalidResponse(r))}))},u.prototype.addSubscription=function(t,e){if(!this.provider.on)throw new Error("The provider doesn't support subscriptions: "+this.provider.constructor.name);this.subscriptions.set(t.id,{callback:e,subscription:t})},u.prototype.removeSubscription=function(t,e){if(this.subscriptions.has(t)){var r=this.subscriptions.get(t).subscription.options.type;return this.subscriptions.delete(t),void this.send({method:r+"_unsubscribe",params:[t]},e)}"function"==typeof e&&e(null)},u.prototype.clearSubscriptions=function(t){try{var e=this;return this.subscriptions.size>0&&this.subscriptions.forEach((function(r,n){t&&"syncing"===r.name||e.removeSubscription(n)})),this.provider.reset&&this.provider.reset(),!0}catch(t){throw new Error(`Error while clearing subscriptions: ${t}`)}},u.prototype._isCleanCloseEvent=function(t){return"object"==typeof t&&([1e3].includes(t.code)||!0===t.wasClean)},u.prototype._isIpcCloseError=function(t){return"boolean"==typeof t&&t},u.prototype._jsonrpcResultCallback=function(t,e){return function(r,n){return n&&n.id&&e.id!==n.id?t(new Error(`Wrong response id ${n.id} (expected: ${e.id}) in ${JSON.stringify(e)}`)):r?t(r):n&&n.error?t(i.ErrorResponse(n)):o.isValidResponse(n)?void t(null,n.result):t(i.InvalidResponse(n))}},t.exports={Manager:u,BatchManager:s}},28911:t=>{"use strict";var e={messageId:0,toPayload:function(t,r){if(!t)throw new Error('JSONRPC method should be specified for params: "'+JSON.stringify(r)+'"!');return e.messageId++,{jsonrpc:"2.0",id:e.messageId,method:t,params:r||[]}},isValidResponse:function(t){return Array.isArray(t)?t.every(e):e(t);function e(t){return!(!t||t.error||"2.0"!==t.jsonrpc||"number"!=typeof t.id&&"string"!=typeof t.id||void 0===t.result)}},toBatchPayload:function(t){return t.map((function(t){return e.toPayload(t.method,t.params)}))}};t.exports=e},18563:t=>{t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},97496:(t,e,r)=>{"use strict";var n=r(82584),i=r(48662),o=r(86430),s=r(85692);function a(t){return t.call.bind(t)}var u="undefined"!=typeof BigInt,c="undefined"!=typeof Symbol,h=a(Object.prototype.toString),l=a(Number.prototype.valueOf),f=a(String.prototype.valueOf),d=a(Boolean.prototype.valueOf);if(u)var p=a(BigInt.prototype.valueOf);if(c)var m=a(Symbol.prototype.valueOf);function g(t,e){if("object"!=typeof t)return!1;try{return e(t),!0}catch(t){return!1}}function v(t){return"[object Map]"===h(t)}function y(t){return"[object Set]"===h(t)}function b(t){return"[object WeakMap]"===h(t)}function w(t){return"[object WeakSet]"===h(t)}function M(t){return"[object ArrayBuffer]"===h(t)}function _(t){return"undefined"!=typeof ArrayBuffer&&(M.working?M(t):t instanceof ArrayBuffer)}function x(t){return"[object DataView]"===h(t)}function k(t){return"undefined"!=typeof DataView&&(x.working?x(t):t instanceof DataView)}e.isArgumentsObject=n,e.isGeneratorFunction=i,e.isTypedArray=s,e.isPromise=function(t){return"undefined"!=typeof Promise&&t instanceof Promise||null!==t&&"object"==typeof t&&"function"==typeof t.then&&"function"==typeof t.catch},e.isArrayBufferView=function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):s(t)||k(t)},e.isUint8Array=function(t){return"Uint8Array"===o(t)},e.isUint8ClampedArray=function(t){return"Uint8ClampedArray"===o(t)},e.isUint16Array=function(t){return"Uint16Array"===o(t)},e.isUint32Array=function(t){return"Uint32Array"===o(t)},e.isInt8Array=function(t){return"Int8Array"===o(t)},e.isInt16Array=function(t){return"Int16Array"===o(t)},e.isInt32Array=function(t){return"Int32Array"===o(t)},e.isFloat32Array=function(t){return"Float32Array"===o(t)},e.isFloat64Array=function(t){return"Float64Array"===o(t)},e.isBigInt64Array=function(t){return"BigInt64Array"===o(t)},e.isBigUint64Array=function(t){return"BigUint64Array"===o(t)},v.working="undefined"!=typeof Map&&v(new Map),e.isMap=function(t){return"undefined"!=typeof Map&&(v.working?v(t):t instanceof Map)},y.working="undefined"!=typeof Set&&y(new Set),e.isSet=function(t){return"undefined"!=typeof Set&&(y.working?y(t):t instanceof Set)},b.working="undefined"!=typeof WeakMap&&b(new WeakMap),e.isWeakMap=function(t){return"undefined"!=typeof WeakMap&&(b.working?b(t):t instanceof WeakMap)},w.working="undefined"!=typeof WeakSet&&w(new WeakSet),e.isWeakSet=function(t){return w(t)},M.working="undefined"!=typeof ArrayBuffer&&M(new ArrayBuffer),e.isArrayBuffer=_,x.working="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView&&x(new DataView(new ArrayBuffer(1),0,1)),e.isDataView=k;var O="undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:void 0;function S(t){return"[object SharedArrayBuffer]"===h(t)}function A(t){return void 0!==O&&(void 0===S.working&&(S.working=S(new O)),S.working?S(t):t instanceof O)}function E(t){return g(t,l)}function j(t){return g(t,f)}function T(t){return g(t,d)}function P(t){return u&&g(t,p)}function C(t){return c&&g(t,m)}e.isSharedArrayBuffer=A,e.isAsyncFunction=function(t){return"[object AsyncFunction]"===h(t)},e.isMapIterator=function(t){return"[object Map Iterator]"===h(t)},e.isSetIterator=function(t){return"[object Set Iterator]"===h(t)},e.isGeneratorObject=function(t){return"[object Generator]"===h(t)},e.isWebAssemblyCompiledModule=function(t){return"[object WebAssembly.Module]"===h(t)},e.isNumberObject=E,e.isStringObject=j,e.isBooleanObject=T,e.isBigIntObject=P,e.isSymbolObject=C,e.isBoxedPrimitive=function(t){return E(t)||j(t)||T(t)||P(t)||C(t)},e.isAnyArrayBuffer=function(t){return"undefined"!=typeof Uint8Array&&(_(t)||A(t))},["isProxy","isExternal","isModuleNamespaceObject"].forEach((function(t){Object.defineProperty(e,t,{enumerable:!1,value:function(){throw new Error(t+" is not supported in userland")}})}))},31601:(t,e,r)=>{var n=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),r={},n=0;n<e.length;n++)r[e[n]]=Object.getOwnPropertyDescriptor(t,e[n]);return r},i=/%[sdj%]/g;e.format=function(t){if(!y(t)){for(var e=[],r=0;r<arguments.length;r++)e.push(u(arguments[r]));return e.join(" ")}r=1;for(var n=arguments,o=n.length,s=String(t).replace(i,(function(t){if("%%"===t)return"%";if(r>=o)return t;switch(t){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch(t){return"[Circular]"}default:return t}})),a=n[r];r<o;a=n[++r])g(a)||!M(a)?s+=" "+a:s+=" "+u(a);return s},e.deprecate=function(t,r){if("undefined"!=typeof process&&!0===process.noDeprecation)return t;if("undefined"==typeof process)return function(){return e.deprecate(t,r).apply(this,arguments)};var n=!1;return function(){if(!n){if(process.throwDeprecation)throw new Error(r);process.traceDeprecation?console.trace(r):console.error(r),n=!0}return t.apply(this,arguments)}};var o={},s=/^$/;if("MISSING_ENV_VAR".NODE_DEBUG){var a="MISSING_ENV_VAR".NODE_DEBUG;a=a.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),s=new RegExp("^"+a+"$","i")}function u(t,r){var n={seen:[],stylize:h};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),m(r)?n.showHidden=r:r&&e._extend(n,r),b(n.showHidden)&&(n.showHidden=!1),b(n.depth)&&(n.depth=2),b(n.colors)&&(n.colors=!1),b(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=c),l(n,t,n.depth)}function c(t,e){var r=u.styles[e];return r?"["+u.colors[r][0]+"m"+t+"["+u.colors[r][1]+"m":t}function h(t,e){return t}function l(t,r,n){if(t.customInspect&&r&&k(r.inspect)&&r.inspect!==e.inspect&&(!r.constructor||r.constructor.prototype!==r)){var i=r.inspect(n,t);return y(i)||(i=l(t,i,n)),i}var o=function(t,e){if(b(e))return t.stylize("undefined","undefined");if(y(e)){var r="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(r,"string")}return v(e)?t.stylize(""+e,"number"):m(e)?t.stylize(""+e,"boolean"):g(e)?t.stylize("null","null"):void 0}(t,r);if(o)return o;var s=Object.keys(r),a=function(t){var e={};return t.forEach((function(t,r){e[t]=!0})),e}(s);if(t.showHidden&&(s=Object.getOwnPropertyNames(r)),x(r)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return f(r);if(0===s.length){if(k(r)){var u=r.name?": "+r.name:"";return t.stylize("[Function"+u+"]","special")}if(w(r))return t.stylize(RegExp.prototype.toString.call(r),"regexp");if(_(r))return t.stylize(Date.prototype.toString.call(r),"date");if(x(r))return f(r)}var c,h="",M=!1,O=["{","}"];return p(r)&&(M=!0,O=["[","]"]),k(r)&&(h=" [Function"+(r.name?": "+r.name:"")+"]"),w(r)&&(h=" "+RegExp.prototype.toString.call(r)),_(r)&&(h=" "+Date.prototype.toUTCString.call(r)),x(r)&&(h=" "+f(r)),0!==s.length||M&&0!=r.length?n<0?w(r)?t.stylize(RegExp.prototype.toString.call(r),"regexp"):t.stylize("[Object]","special"):(t.seen.push(r),c=M?function(t,e,r,n,i){for(var o=[],s=0,a=e.length;s<a;++s)j(e,String(s))?o.push(d(t,e,r,n,String(s),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(d(t,e,r,n,i,!0))})),o}(t,r,n,a,s):s.map((function(e){return d(t,r,n,a,e,M)})),t.seen.pop(),function(t,e,r){return t.reduce((function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?r[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+r[1]:r[0]+e+" "+t.join(", ")+" "+r[1]}(c,h,O)):O[0]+h+O[1]}function f(t){return"["+Error.prototype.toString.call(t)+"]"}function d(t,e,r,n,i,o){var s,a,u;if((u=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?a=u.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):u.set&&(a=t.stylize("[Setter]","special")),j(n,i)||(s="["+i+"]"),a||(t.seen.indexOf(u.value)<0?(a=g(r)?l(t,u.value,null):l(t,u.value,r-1)).indexOf("\n")>-1&&(a=o?a.split("\n").map((function(t){return"  "+t})).join("\n").substr(2):"\n"+a.split("\n").map((function(t){return"   "+t})).join("\n")):a=t.stylize("[Circular]","special")),b(s)){if(o&&i.match(/^\d+$/))return a;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=t.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=t.stylize(s,"string"))}return s+": "+a}function p(t){return Array.isArray(t)}function m(t){return"boolean"==typeof t}function g(t){return null===t}function v(t){return"number"==typeof t}function y(t){return"string"==typeof t}function b(t){return void 0===t}function w(t){return M(t)&&"[object RegExp]"===O(t)}function M(t){return"object"==typeof t&&null!==t}function _(t){return M(t)&&"[object Date]"===O(t)}function x(t){return M(t)&&("[object Error]"===O(t)||t instanceof Error)}function k(t){return"function"==typeof t}function O(t){return Object.prototype.toString.call(t)}function S(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(t){if(t=t.toUpperCase(),!o[t])if(s.test(t)){var r=process.pid;o[t]=function(){var n=e.format.apply(e,arguments);console.error("%s %d: %s",t,r,n)}}else o[t]=function(){};return o[t]},e.inspect=u,u.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},u.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.types=r(97496),e.isArray=p,e.isBoolean=m,e.isNull=g,e.isNullOrUndefined=function(t){return null==t},e.isNumber=v,e.isString=y,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=b,e.isRegExp=w,e.types.isRegExp=w,e.isObject=M,e.isDate=_,e.types.isDate=_,e.isError=x,e.types.isNativeError=x,e.isFunction=k,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=r(18563);var A=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function E(){var t=new Date,e=[S(t.getHours()),S(t.getMinutes()),S(t.getSeconds())].join(":");return[t.getDate(),A[t.getMonth()],e].join(" ")}function j(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){console.log("%s - %s",E(),e.format.apply(e,arguments))},e.inherits=r(35717),e._extend=function(t,e){if(!e||!M(e))return t;for(var r=Object.keys(e),n=r.length;n--;)t[r[n]]=e[r[n]];return t};var T="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function P(t,e){if(!t){var r=new Error("Promise was rejected with a falsy value");r.reason=t,t=r}return e(t)}e.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(T&&t[T]){var e;if("function"!=typeof(e=t[T]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,T,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,r,n=new Promise((function(t,n){e=t,r=n})),i=[],o=0;o<arguments.length;o++)i.push(arguments[o]);i.push((function(t,n){t?r(t):e(n)}));try{t.apply(this,i)}catch(t){r(t)}return n}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),T&&Object.defineProperty(e,T,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,n(t))},e.promisify.custom=T,e.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function e(){for(var e=[],r=0;r<arguments.length;r++)e.push(arguments[r]);var n=e.pop();if("function"!=typeof n)throw new TypeError("The last argument must be of type Function");var i=this,o=function(){return n.apply(i,arguments)};t.apply(this,e).then((function(t){process.nextTick(o.bind(null,null,t))}),(function(t){process.nextTick(P.bind(null,t,o))}))}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),Object.defineProperties(e,n(t)),e}},96602:(t,e,r)=>{"use strict";var n=r(45826),i=function(t){this.name=t.name,this.type=t.type,this.subscriptions=t.subscriptions||{},this.requestManager=null};i.prototype.setRequestManager=function(t){this.requestManager=t},i.prototype.attachToObject=function(t){var e=this.buildCall(),r=this.name.split(".");r.length>1?(t[r[0]]=t[r[0]]||{},t[r[0]][r[1]]=e):t[r[0]]=e},i.prototype.buildCall=function(){var t=this;return function(){t.subscriptions[arguments[0]]||console.warn("Subscription "+JSON.stringify(arguments[0])+" doesn't exist. Subscribing anyway.");var e=new n({subscription:t.subscriptions[arguments[0]]||{},requestManager:t.requestManager,type:t.type});return e.subscribe.apply(e,arguments)}},t.exports={subscriptions:i,subscription:n}},45826:(t,e,r)=>{"use strict";var n=r(84390).errors,i=r(60373),o=r(84390).formatters;function s(t){return t}function a(t){i.call(this),this.id=null,this.callback=s,this.arguments=null,this.lastBlock=null,this.options={subscription:t.subscription,type:t.type,requestManager:t.requestManager}}a.prototype=Object.create(i.prototype),a.prototype.constructor=a,a.prototype._extractCallback=function(t){if("function"==typeof t[t.length-1])return t.pop()},a.prototype._validateArgs=function(t){var e=this.options.subscription;if(e||(e={}),e.params||(e.params=0),t.length!==e.params)throw n.InvalidNumberOfParams(t.length,e.params,e.subscriptionName)},a.prototype._formatInput=function(t){var e=this.options.subscription;return e&&e.inputFormatter?e.inputFormatter.map((function(e,r){return e?e(t[r]):t[r]})):t},a.prototype._formatOutput=function(t){var e=this.options.subscription;return e&&e.outputFormatter&&t?e.outputFormatter(t):t},a.prototype._toPayload=function(t){var e=[];if(this.callback=this._extractCallback(t)||s,this.subscriptionMethod||(this.subscriptionMethod=t.shift(),this.options.subscription.subscriptionName&&(this.subscriptionMethod=this.options.subscription.subscriptionName)),this.arguments||(this.arguments=this._formatInput(t),this._validateArgs(this.arguments),t=[]),e.push(this.subscriptionMethod),e=e.concat(this.arguments),t.length)throw new Error("Only a callback is allowed as parameter on an already instantiated subscription.");return{method:this.options.type+"_subscribe",params:e}},a.prototype.unsubscribe=function(t){this.options.requestManager.removeSubscription(this.id,t),this.id=null,this.lastBlock=null,this.removeAllListeners()},a.prototype.subscribe=function(){var t=this,e=Array.prototype.slice.call(arguments),r=this._toPayload(e);if(!r)return this;if(!this.options.requestManager.provider)return setTimeout((function(){var e=new Error("No provider set.");t.callback(e,null,t),t.emit("error",e)}),0),this;if(!this.options.requestManager.provider.on)return setTimeout((function(){var e=new Error("The current provider doesn't support subscriptions: "+t.options.requestManager.provider.constructor.name);t.callback(e,null,t),t.emit("error",e)}),0),this;if(this.lastBlock&&this.options.params&&"object"==typeof this.options.params&&(r.params[1]=this.options.params,r.params[1].fromBlock=o.inputBlockNumberFormatter(this.lastBlock+1)),this.id&&this.unsubscribe(),this.options.params=r.params[1],"logs"===r.params[0]&&r.params[1]&&"object"==typeof r.params[1]&&r.params[1].hasOwnProperty("fromBlock")&&isFinite(r.params[1].fromBlock)){var n=Object.assign({},r.params[1]);this.options.requestManager.send({method:"eth_getLogs",params:[n]},(function(e,r){e?setTimeout((function(){t.callback(e,null,t),t.emit("error",e)}),0):r.forEach((function(e){var r=t._formatOutput(e);t.callback(null,r,t),t.emit("data",r)}))}))}return"object"==typeof r.params[1]&&delete r.params[1].fromBlock,this.options.requestManager.send(r,(function(e,n){!e&&n?(t.id=n,t.method=r.params[0],t.options.requestManager.addSubscription(t,(function(e,r){e?(t.callback(e,!1,t),t.emit("error",e)):(Array.isArray(r)||(r=[r]),r.forEach((function(e){var r=t._formatOutput(e);if(t.lastBlock=r&&"object"==typeof r?r.blockNumber:null,"function"==typeof t.options.subscription.subscriptionHandler)return t.options.subscription.subscriptionHandler.call(t,r);t.emit("data",r),t.callback(null,r,t)})))})),t.emit("connected",n)):setTimeout((function(){t.callback(e,!1,t),t.emit("error",e)}),0)})),this},a.prototype.resubscribe=function(){this.options.requestManager.removeSubscription(this.id),this.id=null,this.subscribe(this.callback)},t.exports=a},60373:t=>{"use strict";var e=Object.prototype.hasOwnProperty,r="~";function n(){}function i(t,e,r){this.fn=t,this.context=e,this.once=r||!1}function o(t,e,n,o,s){if("function"!=typeof n)throw new TypeError("The listener must be a function");var a=new i(n,o||t,s),u=r?r+e:e;return t._events[u]?t._events[u].fn?t._events[u]=[t._events[u],a]:t._events[u].push(a):(t._events[u]=a,t._eventsCount++),t}function s(t,e){0==--t._eventsCount?t._events=new n:delete t._events[e]}function a(){this._events=new n,this._eventsCount=0}Object.create&&(n.prototype=Object.create(null),(new n).__proto__||(r=!1)),a.prototype.eventNames=function(){var t,n,i=[];if(0===this._eventsCount)return i;for(n in t=this._events)e.call(t,n)&&i.push(r?n.slice(1):n);return Object.getOwnPropertySymbols?i.concat(Object.getOwnPropertySymbols(t)):i},a.prototype.listeners=function(t){var e=r?r+t:t,n=this._events[e];if(!n)return[];if(n.fn)return[n.fn];for(var i=0,o=n.length,s=new Array(o);i<o;i++)s[i]=n[i].fn;return s},a.prototype.listenerCount=function(t){var e=r?r+t:t,n=this._events[e];return n?n.fn?1:n.length:0},a.prototype.emit=function(t,e,n,i,o,s){var a=r?r+t:t;if(!this._events[a])return!1;var u,c,h=this._events[a],l=arguments.length;if(h.fn){switch(h.once&&this.removeListener(t,h.fn,void 0,!0),l){case 1:return h.fn.call(h.context),!0;case 2:return h.fn.call(h.context,e),!0;case 3:return h.fn.call(h.context,e,n),!0;case 4:return h.fn.call(h.context,e,n,i),!0;case 5:return h.fn.call(h.context,e,n,i,o),!0;case 6:return h.fn.call(h.context,e,n,i,o,s),!0}for(c=1,u=new Array(l-1);c<l;c++)u[c-1]=arguments[c];h.fn.apply(h.context,u)}else{var f,d=h.length;for(c=0;c<d;c++)switch(h[c].once&&this.removeListener(t,h[c].fn,void 0,!0),l){case 1:h[c].fn.call(h[c].context);break;case 2:h[c].fn.call(h[c].context,e);break;case 3:h[c].fn.call(h[c].context,e,n);break;case 4:h[c].fn.call(h[c].context,e,n,i);break;default:if(!u)for(f=1,u=new Array(l-1);f<l;f++)u[f-1]=arguments[f];h[c].fn.apply(h[c].context,u)}}return!0},a.prototype.on=function(t,e,r){return o(this,t,e,r,!1)},a.prototype.once=function(t,e,r){return o(this,t,e,r,!0)},a.prototype.removeListener=function(t,e,n,i){var o=r?r+t:t;if(!this._events[o])return this;if(!e)return s(this,o),this;var a=this._events[o];if(a.fn)a.fn!==e||i&&!a.once||n&&a.context!==n||s(this,o);else{for(var u=0,c=[],h=a.length;u<h;u++)(a[u].fn!==e||i&&!a[u].once||n&&a[u].context!==n)&&c.push(a[u]);c.length?this._events[o]=1===c.length?c[0]:c:s(this,o)}return this},a.prototype.removeAllListeners=function(t){var e;return t?(e=r?r+t:t,this._events[e]&&s(this,e)):(this._events=new n,this._eventsCount=0),this},a.prototype.off=a.prototype.removeListener,a.prototype.addListener=a.prototype.on,a.prefixed=r,a.EventEmitter=a,t.exports=a},37327:(t,e,r)=>{"use strict";var n=r(84390).formatters,i=r(93952),o=r(18269);t.exports=function(t){var e=function(e){var r;return e.property?(t[e.property]||(t[e.property]={}),r=t[e.property]):r=t,e.methods&&e.methods.forEach((function(e){e instanceof i||(e=new i(e)),e.attachToObject(r),e.setRequestManager(t._requestManager)})),t};return e.formatters=n,e.utils=o,e.Method=i,e}},92928:(t,e,r)=>{const n=r(24983),i=r(37327);t.exports={packageInit:(t,e)=>{if(e=Array.prototype.slice.call(e),!t)throw new Error('You need to instantiate using the "new" keyword.');Object.defineProperty(t,"currentProvider",{get:()=>t._provider,set:e=>t.setProvider(e),enumerable:!0,configurable:!0}),e[0]&&e[0]._requestManager?t._requestManager=e[0]._requestManager:t._requestManager=new n.Manager(e[0],e[1]),t.givenProvider=n.Manager.givenProvider,t.providers=n.Manager.providers,t._provider=t._requestManager.provider,t.setProvider||(t.setProvider=(e,r)=>(t._requestManager.setProvider(e,r),t._provider=t._requestManager.provider,!0)),t.setRequestManager=e=>{t._requestManager=e,t._provider=e.provider},t.BatchRequest=n.BatchManager.bind(null,t._requestManager),t.extend=i(t)},addProviders:t=>{t.givenProvider=n.Manager.givenProvider,t.providers=n.Manager.providers}}},93338:(t,e,r)=>{var n=r(48764).Buffer,i=r(18269),o=r(39896).RQ,s=r(39896)._R,a=new o((function(t,e){return!t.match(/^u?int/)||Array.isArray(e)||e&&"object"==typeof e&&"BN"===e.constructor.name?e:e.toString()}));function u(){}var c=function(){};c.prototype.encodeFunctionSignature=function(t){return("function"==typeof t||"object"==typeof t&&t)&&(t=i._jsonInterfaceMethodToString(t)),i.sha3(t).slice(0,10)},c.prototype.encodeEventSignature=function(t){return("function"==typeof t||"object"==typeof t&&t)&&(t=i._jsonInterfaceMethodToString(t)),i.sha3(t)},c.prototype.encodeParameter=function(t,e){return this.encodeParameters([t],[e])},c.prototype.encodeParameters=function(t,e){var r=this;return t=r.mapTypes(t),e=e.map((function(e,n){let i=t[n];if("object"==typeof i&&i.type&&(i=i.type),e=r.formatParam(i,e),"string"==typeof i&&i.includes("tuple")){const t=a._getCoder(s.from(i)),n=(t,e)=>{if("array"===t.name)return e.map((e=>n(a._getCoder(s.from(t.type.replace("[]",""))),e)));t.coders.forEach(((t,i)=>{"tuple"===t.name?n(t,e[i]):e[i]=r.formatParam(t.name,e[i])}))};n(t,e)}return e})),a.encode(t,e)},c.prototype.mapTypes=function(t){var e=this,r=[];return t.forEach((function(t){if("object"==typeof t&&"function"===t.type&&(t=Object.assign({},t,{type:"bytes24"})),e.isSimplifiedStructFormat(t)){var n=Object.keys(t)[0];r.push(Object.assign(e.mapStructNameAndType(n),{components:e.mapStructToCoderFormat(t[n])}))}else r.push(t)})),r},c.prototype.isSimplifiedStructFormat=function(t){return"object"==typeof t&&void 0===t.components&&void 0===t.name},c.prototype.mapStructNameAndType=function(t){var e="tuple";return t.indexOf("[]")>-1&&(e="tuple[]",t=t.slice(0,-2)),{type:e,name:t}},c.prototype.mapStructToCoderFormat=function(t){var e=this,r=[];return Object.keys(t).forEach((function(n){"object"!=typeof t[n]?r.push({name:n,type:t[n]}):r.push(Object.assign(e.mapStructNameAndType(n),{components:e.mapStructToCoderFormat(t[n])}))})),r},c.prototype.formatParam=function(t,e){const r=new RegExp(/^bytes([0-9]*)$/),o=new RegExp(/^bytes([0-9]*)\[\]$/),s=new RegExp(/^(u?int)([0-9]*)$/),a=new RegExp(/^(u?int)([0-9]*)\[\]$/);if(i.isBN(e)||i.isBigNumber(e))return e.toString(10);if(t.match(o)||t.match(a))return e.map((e=>this.formatParam(t.replace("[]",""),e)));let u=t.match(s);if(u){let t=parseInt(u[2]||"256");t/8<e.length&&(e=i.leftPad(e,t))}if(u=t.match(r),u){n.isBuffer(e)&&(e=i.toHex(e));let t=parseInt(u[1]);if(t){let r=2*t;"0x"===e.substring(0,2)&&(r+=2),e.length<r&&(e=i.rightPad(e,2*t))}e.length%2==1&&(e="0x0"+e.substring(2))}return e},c.prototype.encodeFunctionCall=function(t,e){return this.encodeFunctionSignature(t)+this.encodeParameters(t.inputs,e).replace("0x","")},c.prototype.decodeParameter=function(t,e){return this.decodeParameters([t],e)[0]},c.prototype.decodeParameters=function(t,e){return this.decodeParametersWith(t,e,!1)},c.prototype.decodeParametersWith=function(t,e,r){if(t.length>0&&(!e||"0x"===e||"0X"===e))throw new Error("Returned values aren't valid, did it run Out of Gas? You might also see this error if you are not using the correct ABI for the contract you are retrieving data from, requesting data from a block number that does not exist, or querying a node which is not fully synced.");var n=a.decode(this.mapTypes(t),"0x"+e.replace(/0x/i,""),r),i=new u;return i.__length__=0,t.forEach((function(t,e){var r=n[i.__length__];r="0x"===r?null:r,i[e]=r,("function"==typeof t||t&&"object"==typeof t)&&t.name&&(i[t.name]=r),i.__length__++})),i},c.prototype.decodeLog=function(t,e,r){var n=this;r=Array.isArray(r)?r:[r],e=e||"";var i=[],o=[],s=0;t.forEach((function(t,e){t.indexed?(o[e]=["bool","int","uint","address","fixed","ufixed"].find((function(e){return-1!==t.type.indexOf(e)}))?n.decodeParameter(t.type,r[s]):r[s],s++):i[e]=t}));var a=e,c=a?this.decodeParametersWith(i,a,!0):[],h=new u;return h.__length__=0,t.forEach((function(t,e){h[e]="string"===t.type?"":null,void 0!==c[e]&&(h[e]=c[e]),void 0!==o[e]&&(h[e]=o[e]),t.name&&(h[t.name]=h[e]),h.__length__++})),h};var h=new c;t.exports=h},39896:(t,e,r)=>{"use strict";r.d(e,{RQ:()=>H,_R:()=>p});var n=r(53587),i=r(80711);const o="abi/5.0.7",s=new i.Yd(o),a={};let u={calldata:!0,memory:!0,storage:!0},c={calldata:!0,memory:!0};function h(t,e){if("bytes"===t||"string"===t){if(u[e])return!0}else if("address"===t){if("payable"===e)return!0}else if((t.indexOf("[")>=0||"tuple"===t)&&c[e])return!0;return(u[e]||"payable"===e)&&s.throwArgumentError("invalid modifier","name",e),!1}function l(t,e){for(let r in e)(0,n.zG)(t,r,e[r])}const f=Object.freeze({sighash:"sighash",minimal:"minimal",full:"full",json:"json"}),d=new RegExp(/^(.*)\[([0-9]*)\]$/);class p{constructor(t,e){t!==a&&s.throwError("use fromString",i.Yd.errors.UNSUPPORTED_OPERATION,{operation:"new ParamType()"}),l(this,e);let r=this.type.match(d);l(this,r?{arrayLength:parseInt(r[2]||"-1"),arrayChildren:p.fromObject({type:r[1],components:this.components}),baseType:"array"}:{arrayLength:null,arrayChildren:null,baseType:null!=this.components?"tuple":this.type}),this._isParamType=!0,Object.freeze(this)}format(t){if(t||(t=f.sighash),f[t]||s.throwArgumentError("invalid format type","format",t),t===f.json){let e={type:"tuple"===this.baseType?"tuple":this.type,name:this.name||void 0};return"boolean"==typeof this.indexed&&(e.indexed=this.indexed),this.components&&(e.components=this.components.map((e=>JSON.parse(e.format(t))))),JSON.stringify(e)}let e="";return"array"===this.baseType?(e+=this.arrayChildren.format(t),e+="["+(this.arrayLength<0?"":String(this.arrayLength))+"]"):"tuple"===this.baseType?(t!==f.sighash&&(e+=this.type),e+="("+this.components.map((e=>e.format(t))).join(t===f.full?", ":",")+")"):e+=this.type,t!==f.sighash&&(!0===this.indexed&&(e+=" indexed"),t===f.full&&this.name&&(e+=" "+this.name)),e}static from(t,e){return"string"==typeof t?p.fromString(t,e):p.fromObject(t)}static fromObject(t){return p.isParamType(t)?t:new p(a,{name:t.name||null,type:m(t.type),indexed:null==t.indexed?null:!!t.indexed,components:t.components?t.components.map(p.fromObject):null})}static fromString(t,e){return r=function(t,e){let r=t;function n(e){s.throwArgumentError(`unexpected character at position ${e}`,"param",t)}function i(t){let r={type:"",name:"",parent:t,state:{allowType:!0}};return e&&(r.indexed=!1),r}t=t.replace(/\s/g," ");let o={type:"",name:"",state:{allowType:!0}},a=o;for(let r=0;r<t.length;r++){let o=t[r];switch(o){case"(":a.state.allowType&&""===a.type?a.type="tuple":a.state.allowParams||n(r),a.state.allowType=!1,a.type=m(a.type),a.components=[i(a)],a=a.components[0];break;case")":delete a.state,"indexed"===a.name&&(e||n(r),a.indexed=!0,a.name=""),h(a.type,a.name)&&(a.name=""),a.type=m(a.type);let t=a;a=a.parent,a||n(r),delete t.parent,a.state.allowParams=!1,a.state.allowName=!0,a.state.allowArray=!0;break;case",":delete a.state,"indexed"===a.name&&(e||n(r),a.indexed=!0,a.name=""),h(a.type,a.name)&&(a.name=""),a.type=m(a.type);let s=i(a.parent);a.parent.components.push(s),delete a.parent,a=s;break;case" ":a.state.allowType&&""!==a.type&&(a.type=m(a.type),delete a.state.allowType,a.state.allowName=!0,a.state.allowParams=!0),a.state.allowName&&""!==a.name&&("indexed"===a.name?(e||n(r),a.indexed&&n(r),a.indexed=!0,a.name=""):h(a.type,a.name)?a.name="":a.state.allowName=!1);break;case"[":a.state.allowArray||n(r),a.type+=o,a.state.allowArray=!1,a.state.allowName=!1,a.state.readArray=!0;break;case"]":a.state.readArray||n(r),a.type+=o,a.state.readArray=!1,a.state.allowArray=!0,a.state.allowName=!0;break;default:a.state.allowType?(a.type+=o,a.state.allowParams=!0,a.state.allowArray=!0):a.state.allowName?(a.name+=o,delete a.state.allowArray):a.state.readArray?a.type+=o:n(r)}}return a.parent&&s.throwArgumentError("unexpected eof","param",t),delete o.state,"indexed"===a.name?(e||n(r.length-7),a.indexed&&n(r.length-7),a.indexed=!0,a.name=""):h(a.type,a.name)&&(a.name=""),o.type=m(o.type),o}(t,!!e),p.fromObject({name:r.name,type:r.type,indexed:r.indexed,components:r.components});var r}static isParamType(t){return!(null==t||!t._isParamType)}}function m(t){return t.match(/^uint($|[^1-9])/)?t="uint256"+t.substring(4):t.match(/^int($|[^1-9])/)&&(t="int256"+t.substring(3)),t}var g=r(93286),v=r(2593);const y=new i.Yd(o);class b{constructor(t,e,r,n){this.name=t,this.type=e,this.localName=r,this.dynamic=n}_throwError(t,e){y.throwArgumentError(t,this.localName,e)}}class w{constructor(t){(0,n.zG)(this,"wordSize",t||32),this._data=[],this._dataLength=0,this._padding=new Uint8Array(t)}get data(){return(0,g.xs)(this._data)}get length(){return this._dataLength}_writeData(t){return this._data.push(t),this._dataLength+=t.length,t.length}appendWriter(t){return this._writeData((0,g.zo)(t._data))}writeBytes(t){let e=(0,g.lE)(t);const r=e.length%this.wordSize;return r&&(e=(0,g.zo)([e,this._padding.slice(r)])),this._writeData(e)}_getValue(t){let e=(0,g.lE)(v.O$.from(t));return e.length>this.wordSize&&y.throwError("value out-of-bounds",i.Yd.errors.BUFFER_OVERRUN,{length:this.wordSize,offset:e.length}),e.length%this.wordSize&&(e=(0,g.zo)([this._padding.slice(e.length%this.wordSize),e])),e}writeValue(t){return this._writeData(this._getValue(t))}writeUpdatableValue(){const t=this._data.length;return this._data.push(this._padding),this._dataLength+=this.wordSize,e=>{this._data[t]=this._getValue(e)}}}class M{constructor(t,e,r,i){(0,n.zG)(this,"_data",(0,g.lE)(t)),(0,n.zG)(this,"wordSize",e||32),(0,n.zG)(this,"_coerceFunc",r),(0,n.zG)(this,"allowLoose",i),this._offset=0}get data(){return(0,g.Dv)(this._data)}get consumed(){return this._offset}static coerce(t,e){let r=t.match("^u?int([0-9]+)$");return r&&parseInt(r[1])<=48&&(e=e.toNumber()),e}coerce(t,e){return this._coerceFunc?this._coerceFunc(t,e):M.coerce(t,e)}_peekBytes(t,e,r){let n=Math.ceil(e/this.wordSize)*this.wordSize;return this._offset+n>this._data.length&&(this.allowLoose&&r&&this._offset+e<=this._data.length?n=e:y.throwError("data out-of-bounds",i.Yd.errors.BUFFER_OVERRUN,{length:this._data.length,offset:this._offset+n})),this._data.slice(this._offset,this._offset+n)}subReader(t){return new M(this._data.slice(this._offset+t),this.wordSize,this._coerceFunc,this.allowLoose)}readBytes(t,e){let r=this._peekBytes(0,t,!!e);return this._offset+=r.length,r.slice(0,t)}readValue(){return v.O$.from(this.readBytes(this.wordSize))}}var _=r(64594);class x extends b{constructor(t){super("address","address",t,!1)}encode(t,e){try{(0,_.Kn)(e)}catch(t){this._throwError(t.message,e)}return t.writeValue(e)}decode(t){return(0,_.Kn)((0,g.$m)(t.readValue().toHexString(),20))}}class k extends b{constructor(t){super(t.name,t.type,void 0,t.dynamic),this.coder=t}encode(t,e){return this.coder.encode(t,e)}decode(t){return this.coder.decode(t)}}const O=new i.Yd(o);function S(t,e,r){let n=null;if(Array.isArray(r))n=r;else if(r&&"object"==typeof r){let t={};n=e.map((e=>{const n=e.localName;return n||O.throwError("cannot encode object for signature with missing names",i.Yd.errors.INVALID_ARGUMENT,{argument:"values",coder:e,value:r}),t[n]&&O.throwError("cannot encode object for signature with duplicate names",i.Yd.errors.INVALID_ARGUMENT,{argument:"values",coder:e,value:r}),t[n]=!0,r[n]}))}else O.throwArgumentError("invalid tuple value","tuple",r);e.length!==n.length&&O.throwArgumentError("types/value length mismatch","tuple",r);let o=new w(t.wordSize),s=new w(t.wordSize),a=[];e.forEach(((t,e)=>{let r=n[e];if(t.dynamic){let e=s.length;t.encode(s,r);let n=o.writeUpdatableValue();a.push((t=>{n(t+e)}))}else t.encode(o,r)})),a.forEach((t=>{t(o.length)}));let u=t.appendWriter(o);return u+=t.appendWriter(s),u}function A(t,e){let r=[],n=t.subReader(0);e.forEach((e=>{let o=null;if(e.dynamic){let r=t.readValue(),s=n.subReader(r.toNumber());try{o=e.decode(s)}catch(t){if(t.code===i.Yd.errors.BUFFER_OVERRUN)throw t;o=t,o.baseType=e.name,o.name=e.localName,o.type=e.type}}else try{o=e.decode(t)}catch(t){if(t.code===i.Yd.errors.BUFFER_OVERRUN)throw t;o=t,o.baseType=e.name,o.name=e.localName,o.type=e.type}null!=o&&r.push(o)}));const o=e.reduce(((t,e)=>{const r=e.localName;return r&&(t[r]||(t[r]=0),t[r]++),t}),{});e.forEach(((t,e)=>{let n=t.localName;if(!n||1!==o[n])return;if("length"===n&&(n="_length"),null!=r[n])return;const i=r[e];i instanceof Error?Object.defineProperty(r,n,{get:()=>{throw i}}):r[n]=i}));for(let t=0;t<r.length;t++){const e=r[t];e instanceof Error&&Object.defineProperty(r,t,{get:()=>{throw e}})}return Object.freeze(r)}class E extends b{constructor(t,e,r){super("array",t.type+"["+(e>=0?e:"")+"]",r,-1===e||t.dynamic),this.coder=t,this.length=e}encode(t,e){Array.isArray(e)||this._throwError("expected array value",e);let r=this.length;-1===r&&(r=e.length,t.writeValue(e.length)),O.checkArgumentCount(e.length,r,"coder array"+(this.localName?" "+this.localName:""));let n=[];for(let t=0;t<e.length;t++)n.push(this.coder);return S(t,n,e)}decode(t){let e=this.length;-1===e&&(e=t.readValue().toNumber());let r=[];for(let t=0;t<e;t++)r.push(new k(this.coder));return t.coerce(this.name,A(t,r))}}class j extends b{constructor(t){super("bool","bool",t,!1)}encode(t,e){return t.writeValue(e?1:0)}decode(t){return t.coerce(this.type,!t.readValue().isZero())}}class T extends b{constructor(t,e){super(t,t,e,!0)}encode(t,e){e=(0,g.lE)(e);let r=t.writeValue(e.length);return r+=t.writeBytes(e),r}decode(t){return t.readBytes(t.readValue().toNumber(),!0)}}class P extends T{constructor(t){super("bytes",t)}decode(t){return t.coerce(this.name,(0,g.Dv)(super.decode(t)))}}class C extends b{constructor(t,e){let r="bytes"+String(t);super(r,r,e,!1),this.size=t}encode(t,e){let r=(0,g.lE)(e);return r.length!==this.size&&this._throwError("incorrect data length",e),t.writeBytes(r)}decode(t){return t.coerce(this.name,(0,g.Dv)(t.readBytes(this.size)))}}class I extends b{constructor(t){super("null","",t,!1)}encode(t,e){return null!=e&&this._throwError("not null",e),t.writeBytes([])}decode(t){return t.readBytes(0),t.coerce(this.name,null)}}var B=r(21046);class N extends b{constructor(t,e,r){const n=(e?"int":"uint")+8*t;super(n,n,r,!1),this.size=t,this.signed=e}encode(t,e){let r=v.O$.from(e),n=B.Bz.mask(8*t.wordSize);if(this.signed){let t=n.mask(8*this.size-1);(r.gt(t)||r.lt(t.add(B.fh).mul(B.tL)))&&this._throwError("value out-of-bounds",e)}else(r.lt(B._Y)||r.gt(n.mask(8*this.size)))&&this._throwError("value out-of-bounds",e);return r=r.toTwos(8*this.size).mask(8*this.size),this.signed&&(r=r.fromTwos(8*this.size).toTwos(8*t.wordSize)),t.writeValue(r)}decode(t){let e=t.readValue().mask(8*this.size);return this.signed&&(e=e.fromTwos(8*this.size)),t.coerce(this.name,e)}}var R=r(44242);class L extends T{constructor(t){super("string",t)}encode(t,e){return super.encode(t,(0,R.Y0)(e))}decode(t){return(0,R.ZN)(super.decode(t))}}class F extends b{constructor(t,e){let r=!1;const n=[];t.forEach((t=>{t.dynamic&&(r=!0),n.push(t.type)})),super("tuple","tuple("+n.join(",")+")",e,r),this.coders=t}encode(t,e){return S(t,this.coders,e)}decode(t){return t.coerce(this.name,A(t,this.coders))}}const D=new i.Yd(o),q=new RegExp(/^bytes([0-9]*)$/),U=new RegExp(/^(u?int)([0-9]*)$/);class H{constructor(t){D.checkNew(new.target,H),(0,n.zG)(this,"coerceFunc",t||null)}_getCoder(t){switch(t.baseType){case"address":return new x(t.name);case"bool":return new j(t.name);case"string":return new L(t.name);case"bytes":return new P(t.name);case"array":return new E(this._getCoder(t.arrayChildren),t.arrayLength,t.name);case"tuple":return new F((t.components||[]).map((t=>this._getCoder(t))),t.name);case"":return new I(t.name)}let e=t.type.match(U);if(e){let r=parseInt(e[2]||"256");return(0===r||r>256||r%8!=0)&&D.throwArgumentError("invalid "+e[1]+" bit length","param",t),new N(r/8,"int"===e[1],t.name)}if(e=t.type.match(q),e){let r=parseInt(e[1]);return(0===r||r>32)&&D.throwArgumentError("invalid bytes length","param",t),new C(r,t.name)}return D.throwArgumentError("invalid type","type",t.type)}_getWordSize(){return 32}_getReader(t,e){return new M(t,this._getWordSize(),this.coerceFunc,e)}_getWriter(){return new w(this._getWordSize())}encode(t,e){t.length!==e.length&&D.throwError("types/values length mismatch",i.Yd.errors.INVALID_ARGUMENT,{count:{types:t.length,values:e.length},value:{types:t,values:e}});const r=t.map((t=>this._getCoder(p.from(t)))),n=new F(r,"_"),o=this._getWriter();return n.encode(o,e),o.data}decode(t,e,r){const n=t.map((t=>this._getCoder(p.from(t))));return new F(n,"_").decode(this._getReader((0,g.lE)(e),r))}}new H,new i.Yd(o)},31692:(t,e,r)=>{"use strict";var n=r(92928),i=r(93952),o=r(18269),s=r(96602).subscription,a=r(84390).formatters,u=r(84390).errors,c=r(4017),h=r(93338),l=function t(e,r,i){var s=this,c=Array.prototype.slice.call(arguments);if(!(this instanceof t))throw new Error('Please use the "new" keyword to instantiate a web3.eth.Contract() object!');if(this.setProvider=function(){n.packageInit(s,arguments),s.clearSubscriptions=s._requestManager.clearSubscriptions},n.packageInit(this,[this.constructor]),this.clearSubscriptions=this._requestManager.clearSubscriptions,!e||!Array.isArray(e))throw u.ContractMissingABIError();this.options={};var l=c[c.length-1];l&&"object"==typeof l&&!Array.isArray(l)&&(i=l,this.options={...this.options,...this._getOrSetDefaultOptions(i)},r&&"object"==typeof r&&(r=null)),Object.defineProperty(this.options,"address",{set:function(t){t&&(s._address=o.toChecksumAddress(a.inputAddressFormatter(t)))},get:function(){return s._address},enumerable:!0}),Object.defineProperty(this.options,"jsonInterface",{set:function(t){return s.methods={},s.events={},s._jsonInterface=t.map((function(t){var e,r;if(t.constant="view"===t.stateMutability||"pure"===t.stateMutability||t.constant,t.payable="payable"===t.stateMutability||t.payable,t.name&&(r=o._jsonInterfaceMethodToString(t)),"function"===t.type){if(t.signature=h.encodeFunctionSignature(r),e=s._createTxObject.bind({method:t,parent:s}),s.methods[t.name]){var n=s._createTxObject.bind({method:t,parent:s,nextMethod:s.methods[t.name]});s.methods[t.name]=n}else s.methods[t.name]=e;s.methods[t.signature]=e,s.methods[r]=e}else if("event"===t.type){t.signature=h.encodeEventSignature(r);var i=s._on.bind(s,t.signature);s.events[t.name]&&"bound "!==s.events[t.name].name||(s.events[t.name]=i),s.events[t.signature]=i,s.events[r]=i}return t})),s.events.allEvents=s._on.bind(s,"allevents"),s._jsonInterface},get:function(){return s._jsonInterface},enumerable:!0});var f=this.constructor.defaultAccount,d=this.constructor.defaultBlock||"latest";Object.defineProperty(this,"handleRevert",{get:function(){return!1===s.options.handleRevert||!0===s.options.handleRevert?s.options.handleRevert:this.constructor.handleRevert},set:function(t){s.options.handleRevert=t},enumerable:!0}),Object.defineProperty(this,"defaultCommon",{get:function(){return s.options.common||this.constructor.defaultCommon},set:function(t){s.options.common=t},enumerable:!0}),Object.defineProperty(this,"defaultHardfork",{get:function(){return s.options.hardfork||this.constructor.defaultHardfork},set:function(t){s.options.hardfork=t},enumerable:!0}),Object.defineProperty(this,"defaultChain",{get:function(){return s.options.chain||this.constructor.defaultChain},set:function(t){s.options.chain=t},enumerable:!0}),Object.defineProperty(this,"transactionPollingTimeout",{get:function(){return 0===s.options.transactionPollingTimeout?s.options.transactionPollingTimeout:s.options.transactionPollingTimeout||this.constructor.transactionPollingTimeout},set:function(t){s.options.transactionPollingTimeout=t},enumerable:!0}),Object.defineProperty(this,"transactionConfirmationBlocks",{get:function(){return 0===s.options.transactionConfirmationBlocks?s.options.transactionConfirmationBlocks:s.options.transactionConfirmationBlocks||this.constructor.transactionConfirmationBlocks},set:function(t){s.options.transactionConfirmationBlocks=t},enumerable:!0}),Object.defineProperty(this,"transactionBlockTimeout",{get:function(){return 0===s.options.transactionBlockTimeout?s.options.transactionBlockTimeout:s.options.transactionBlockTimeout||this.constructor.transactionBlockTimeout},set:function(t){s.options.transactionBlockTimeout=t},enumerable:!0}),Object.defineProperty(this,"blockHeaderTimeout",{get:function(){return 0===s.options.blockHeaderTimeout?s.options.blockHeaderTimeout:s.options.blockHeaderTimeout||this.constructor.blockHeaderTimeout},set:function(t){s.options.blockHeaderTimeout=t},enumerable:!0}),Object.defineProperty(this,"defaultAccount",{get:function(){return f},set:function(t){return t&&(f=o.toChecksumAddress(a.inputAddressFormatter(t))),t},enumerable:!0}),Object.defineProperty(this,"defaultBlock",{get:function(){return d},set:function(t){return d=t,t},enumerable:!0}),this.methods={},this.events={},this._address=null,this._jsonInterface=[],this.options.address=r,this.options.jsonInterface=e};l.setProvider=function(t,e){n.packageInit(this,[t]),this._ethAccounts=e},l.prototype._getCallback=function(t){if(t&&t[t.length-1]&&"function"==typeof t[t.length-1])return t.pop()},l.prototype._checkListener=function(t,e){if(e===t)throw u.ContractReservedEventError(t)},l.prototype._getOrSetDefaultOptions=function(t){var e=t.gasPrice?String(t.gasPrice):null,r=t.from?o.toChecksumAddress(a.inputAddressFormatter(t.from)):null;return t.data=t.data||this.options.data,t.from=r||this.options.from,t.gasPrice=e||this.options.gasPrice,t.gas=t.gas||t.gasLimit||this.options.gas,delete t.gasLimit,t},l.prototype._encodeEventABI=function(t,e){var r=(e=e||{}).filter||{},n={};if(["fromBlock","toBlock"].filter((function(t){return void 0!==e[t]})).forEach((function(t){n[t]=a.inputBlockNumberFormatter(e[t])})),Array.isArray(e.topics))n.topics=e.topics;else{if(n.topics=[],t&&!t.anonymous&&"ALLEVENTS"!==t.name&&n.topics.push(t.signature),"ALLEVENTS"!==t.name){var i=t.inputs.filter((function(t){return!0===t.indexed})).map((function(t){var e=r[t.name];return e?Array.isArray(e)?e.map((function(e){return h.encodeParameter(t.type,e)})):h.encodeParameter(t.type,e):null}));n.topics=n.topics.concat(i)}n.topics.length||delete n.topics}return this.options.address&&(n.address=this.options.address.toLowerCase()),n},l.prototype._decodeEventABI=function(t){var e=this;t.data=t.data||"",t.topics=t.topics||[];var r=a.outputLogFormatter(t);if("ALLEVENTS"===e.name&&(e=e.jsonInterface.find((function(e){return e.signature===t.topics[0]}))||{anonymous:!0}),e.inputs=e.inputs||[],!e.anonymous){let r=0;e.inputs.forEach((t=>t.indexed?r++:null)),r>0&&t.topics.length!==r+1&&(e={anonymous:!0,inputs:[]})}var n=e.anonymous?t.topics:t.topics.slice(1);return r.returnValues=h.decodeLog(e.inputs,t.data,n),delete r.returnValues.__length__,r.event=e.name,r.signature=e.anonymous||!t.topics[0]?null:t.topics[0],r.raw={data:r.data,topics:r.topics},delete r.data,delete r.topics,r},l.prototype._encodeMethodABI=function(){var t=this._method.signature,e=this.arguments||[],r=!1,n=this._parent.options.jsonInterface.filter((function(e){return"constructor"===t&&e.type===t||(e.signature===t||e.signature===t.replace("0x","")||e.name===t)&&"function"===e.type})).map((function(t){var n=Array.isArray(t.inputs)?t.inputs.length:0;if(n!==e.length)throw new Error("The number of arguments is not matching the methods required number. You need to pass "+n+" arguments.");return"function"===t.type&&(r=t.signature),Array.isArray(t.inputs)?t.inputs:[]})).map((function(t){return h.encodeParameters(t,e).replace("0x","")}))[0]||"";if("constructor"===t){if(!this._deployData)throw new Error("The contract has no contract data option set. This is necessary to append the constructor parameters.");return this._deployData.startsWith("0x")||(this._deployData="0x"+this._deployData),this._deployData+n}var i=r?r+n:n;if(!i)throw new Error("Couldn't find a matching contract method named \""+this._method.name+'".');return i},l.prototype._decodeMethodReturn=function(t,e){if(!e)return null;e=e.length>=2?e.slice(2):e;var r=h.decodeParameters(t,e);return 1===r.__length__?r[0]:(delete r.__length__,r)},l.prototype.deploy=function(t,e){if((t=t||{}).arguments=t.arguments||[],!(t=this._getOrSetDefaultOptions(t)).data){if("function"==typeof e)return e(u.ContractMissingDeployDataError());throw u.ContractMissingDeployDataError()}var r=this.options.jsonInterface.find((t=>"constructor"===t.type))||{};return r.signature="constructor",this._createTxObject.apply({method:r,parent:this,deployData:t.data,_ethAccounts:this.constructor._ethAccounts},t.arguments)},l.prototype._generateEventOptions=function(){var t=Array.prototype.slice.call(arguments),e=this._getCallback(t),r="object"===(!!t[t.length-1]&&typeof t[t.length-1])?t.pop():{},n="string"==typeof t[0]?t[0]:"allevents",i="allevents"===n.toLowerCase()?{name:"ALLEVENTS",jsonInterface:this.options.jsonInterface}:this.options.jsonInterface.find((function(t){return"event"===t.type&&(t.name===n||t.signature==="0x"+n.replace("0x",""))}));if(!i)throw u.ContractEventDoesNotExistError(n);if(!o.isAddress(this.options.address))throw u.ContractNoAddressDefinedError();return{params:this._encodeEventABI(i,r),event:i,callback:e}},l.prototype.clone=function(){return new this.constructor(this.options.jsonInterface,this.options.address,this.options)},l.prototype.once=function(t,e,r){var n=Array.prototype.slice.call(arguments);if(!(r=this._getCallback(n)))throw u.ContractOnceRequiresCallbackError();e&&delete e.fromBlock,this._on(t,e,(function(t,e,n){n.unsubscribe(),"function"==typeof r&&r(t,e,n)}))},l.prototype._on=function(){var t=this._generateEventOptions.apply(this,arguments);t.params&&t.params.toBlock&&(delete t.params.toBlock,console.warn("Invalid option: toBlock. Use getPastEvents for specific range.")),this._checkListener("newListener",t.event.name),this._checkListener("removeListener",t.event.name);var e=new s({subscription:{params:1,inputFormatter:[a.inputLogFormatter],outputFormatter:this._decodeEventABI.bind(t.event),subscriptionHandler:function(t){t.removed?this.emit("changed",t):this.emit("data",t),"function"==typeof this.callback&&this.callback(null,t,this)}},type:"eth",requestManager:this._requestManager});return e.subscribe("logs",t.params,t.callback||function(){}),e},l.prototype.getPastEvents=function(){var t=this._generateEventOptions.apply(this,arguments),e=new i({name:"getPastLogs",call:"eth_getLogs",params:1,inputFormatter:[a.inputLogFormatter],outputFormatter:this._decodeEventABI.bind(t.event)});e.setRequestManager(this._requestManager);var r=e.buildCall();return e=null,r(t.params,t.callback)},l.prototype._createTxObject=function(){var t=Array.prototype.slice.call(arguments),e={};if("function"===this.method.type&&(e.call=this.parent._executeMethod.bind(e,"call"),e.call.request=this.parent._executeMethod.bind(e,"call",!0)),e.send=this.parent._executeMethod.bind(e,"send"),e.send.request=this.parent._executeMethod.bind(e,"send",!0),e.encodeABI=this.parent._encodeMethodABI.bind(e),e.estimateGas=this.parent._executeMethod.bind(e,"estimate"),e.createAccessList=this.parent._executeMethod.bind(e,"createAccessList"),t&&this.method.inputs&&t.length!==this.method.inputs.length){if(this.nextMethod)return this.nextMethod.apply(null,t);throw u.InvalidNumberOfParams(t.length,this.method.inputs.length,this.method.name)}return e.arguments=t||[],e._method=this.method,e._parent=this.parent,e._ethAccounts=this.parent.constructor._ethAccounts||this._ethAccounts,this.deployData&&(e._deployData=this.deployData),e},l.prototype._processExecuteArguments=function(t,e){var r={};if(r.type=t.shift(),r.callback=this._parent._getCallback(t),"call"!==r.type||!0===t[t.length-1]||"string"!=typeof t[t.length-1]&&!isFinite(t[t.length-1])||(r.defaultBlock=t.pop()),r.options="object"===(!!t[t.length-1]&&typeof t[t.length-1])?t.pop():{},r.generateRequest=!0===t[t.length-1]&&t.pop(),r.options=this._parent._getOrSetDefaultOptions(r.options),r.options.data=this.encodeABI(),!this._deployData&&!o.isAddress(this._parent.options.address))throw u.ContractNoAddressDefinedError();return this._deployData||(r.options.to=this._parent.options.address),r.options.data?r:o._fireError(new Error("Couldn't find a matching contract method, or the number of parameters is wrong."),e.eventEmitter,e.reject,r.callback)},l.prototype._executeMethod=function(){var t=this,e=this._parent._processExecuteArguments.call(this,Array.prototype.slice.call(arguments),r),r=c("send"!==e.type),n=t.constructor._ethAccounts||t._ethAccounts;if(e.generateRequest){var s={params:[a.inputCallFormatter.call(this._parent,e.options)],callback:e.callback};return"call"===e.type?(s.params.push(a.inputDefaultBlockNumberFormatter.call(this._parent,e.defaultBlock)),s.method="eth_call",s.format=this._parent._decodeMethodReturn.bind(null,this._method.outputs)):s.method="eth_sendTransaction",s}switch(e.type){case"createAccessList":if(!o.isAddress(e.options.from))return o._fireError(u.ContractNoFromAddressDefinedError(),r.eventEmitter,r.reject,e.callback);var l=new i({name:"createAccessList",call:"eth_createAccessList",params:2,inputFormatter:[a.inputTransactionFormatter,a.inputDefaultBlockNumberFormatter],requestManager:t._parent._requestManager,accounts:n,defaultAccount:t._parent.defaultAccount,defaultBlock:t._parent.defaultBlock}).createFunction();return l(e.options,e.callback);case"estimate":var f=new i({name:"estimateGas",call:"eth_estimateGas",params:1,inputFormatter:[a.inputCallFormatter],outputFormatter:o.hexToNumber,requestManager:t._parent._requestManager,accounts:n,defaultAccount:t._parent.defaultAccount,defaultBlock:t._parent.defaultBlock}).createFunction();return f(e.options,e.callback);case"call":var d=new i({name:"call",call:"eth_call",params:2,inputFormatter:[a.inputCallFormatter,a.inputDefaultBlockNumberFormatter],outputFormatter:function(e){return t._parent._decodeMethodReturn(t._method.outputs,e)},requestManager:t._parent._requestManager,accounts:n,defaultAccount:t._parent.defaultAccount,defaultBlock:t._parent.defaultBlock,handleRevert:t._parent.handleRevert,abiCoder:h}).createFunction();return d(e.options,e.defaultBlock,e.callback);case"send":if(!o.isAddress(e.options.from))return o._fireError(u.ContractNoFromAddressDefinedError(),r.eventEmitter,r.reject,e.callback);if("boolean"==typeof this._method.payable&&!this._method.payable&&e.options.value&&e.options.value>0)return o._fireError(new Error("Can not send value to non-payable contract method or constructor"),r.eventEmitter,r.reject,e.callback);var p={receiptFormatter:function(e){if(Array.isArray(e.logs)){var r=e.logs.map((e=>t._parent._decodeEventABI.call({name:"ALLEVENTS",jsonInterface:t._parent.options.jsonInterface},e)));e.events={};var n=0;r.forEach((function(t){t.event?e.events[t.event]?Array.isArray(e.events[t.event])?e.events[t.event].push(t):e.events[t.event]=[e.events[t.event],t]:e.events[t.event]=t:(e.events[n]=t,n++)})),delete e.logs}return e},contractDeployFormatter:function(e){var r=t._parent.clone();return r.options.address=e.contractAddress,r}},m=new i({name:"sendTransaction",call:"eth_sendTransaction",params:1,inputFormatter:[a.inputTransactionFormatter],requestManager:t._parent._requestManager,accounts:t.constructor._ethAccounts||t._ethAccounts,defaultAccount:t._parent.defaultAccount,defaultBlock:t._parent.defaultBlock,transactionBlockTimeout:t._parent.transactionBlockTimeout,transactionConfirmationBlocks:t._parent.transactionConfirmationBlocks,transactionPollingTimeout:t._parent.transactionPollingTimeout,defaultCommon:t._parent.defaultCommon,defaultChain:t._parent.defaultChain,defaultHardfork:t._parent.defaultHardfork,handleRevert:t._parent.handleRevert,extraFormatters:p,abiCoder:h}).createFunction();return m(e.options,e.callback);default:throw new Error('Method "'+e.type+'" not implemented.')}},t.exports=l},34751:(t,e,r)=>{"use strict";const n=r(18269),i=r(55565),o=function(t){const e="A".charCodeAt(0),r="Z".charCodeAt(0);return(t=(t=t.toUpperCase()).substr(4)+t.substr(0,4)).split("").map((function(t){const n=t.charCodeAt(0);return n>=e&&n<=r?n-e+10:t})).join("")},s=function(t){let e,r=t;for(;r.length>2;)e=r.slice(0,9),r=parseInt(e,10)%97+r.slice(e.length);return parseInt(r,10)%97};class a{constructor(t){this._iban=t}static toAddress(t){if(!(t=new a(t)).isDirect())throw new Error("IBAN is indirect and can't be converted");return t.toAddress()}static toIban(t){return a.fromAddress(t).toString()}static fromAddress(t){if(!n.isAddress(t))throw new Error("Provided address is not a valid address: "+t);t=t.replace("0x","").replace("0X","");const e=function(t,e){let r=t;for(;r.length<30;)r="0"+r;return r}(new i(t,16).toString(36));return a.fromBban(e.toUpperCase())}static fromBban(t){const e=("0"+(98-s(o("XE00"+t)))).slice(-2);return new a("XE"+e+t)}static createIndirect(t){return a.fromBban("ETH"+t.institution+t.identifier)}static isValid(t){return new a(t).isValid()}isValid(){return/^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban)&&1===s(o(this._iban))}isDirect(){return 34===this._iban.length||35===this._iban.length}isIndirect(){return 20===this._iban.length}checksum(){return this._iban.substr(2,2)}institution(){return this.isIndirect()?this._iban.substr(7,4):""}client(){return this.isIndirect()?this._iban.substr(11):""}toAddress(){if(this.isDirect()){const t=this._iban.substr(4),e=new i(t,36);return n.toChecksumAddress(e.toString(16,20))}return""}toString(){return this._iban}}t.exports=a},55565:function(t,e,r){!function(t,e){"use strict";function n(t,e){if(!t)throw new Error(e||"Assertion failed")}function i(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}function o(t,e,r){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(r=e,e=10),this._init(t||0,e||10,r||"be"))}var s;"object"==typeof t?t.exports=o:e.BN=o,o.BN=o,o.wordSize=26;try{s="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:r(55896).Buffer}catch(t){}function a(t,e){var r=t.charCodeAt(e);return r>=65&&r<=70?r-55:r>=97&&r<=102?r-87:r-48&15}function u(t,e,r){var n=a(t,r);return r-1>=e&&(n|=a(t,r-1)<<4),n}function c(t,e,r,n){for(var i=0,o=Math.min(t.length,r),s=e;s<o;s++){var a=t.charCodeAt(s)-48;i*=n,i+=a>=49?a-49+10:a>=17?a-17+10:a}return i}o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,e){return t.cmp(e)>0?t:e},o.min=function(t,e){return t.cmp(e)<0?t:e},o.prototype._init=function(t,e,r){if("number"==typeof t)return this._initNumber(t,e,r);if("object"==typeof t)return this._initArray(t,e,r);"hex"===e&&(e=16),n(e===(0|e)&&e>=2&&e<=36);var i=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&(i++,this.negative=1),i<t.length&&(16===e?this._parseHex(t,i,r):(this._parseBase(t,e,i),"le"===r&&this._initArray(this.toArray(),e,r)))},o.prototype._initNumber=function(t,e,r){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(n(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===r&&this._initArray(this.toArray(),e,r)},o.prototype._initArray=function(t,e,r){if(n("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var o,s,a=0;if("be"===r)for(i=t.length-1,o=0;i>=0;i-=3)s=t[i]|t[i-1]<<8|t[i-2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);else if("le"===r)for(i=0,o=0;i<t.length;i+=3)s=t[i]|t[i+1]<<8|t[i+2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);return this.strip()},o.prototype._parseHex=function(t,e,r){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var i,o=0,s=0;if("be"===r)for(n=t.length-1;n>=e;n-=2)i=u(t,e,n)<<o,this.words[s]|=67108863&i,o>=18?(o-=18,s+=1,this.words[s]|=i>>>26):o+=8;else for(n=(t.length-e)%2==0?e+1:e;n<t.length;n+=2)i=u(t,e,n)<<o,this.words[s]|=67108863&i,o>=18?(o-=18,s+=1,this.words[s]|=i>>>26):o+=8;this.strip()},o.prototype._parseBase=function(t,e,r){this.words=[0],this.length=1;for(var n=0,i=1;i<=67108863;i*=e)n++;n--,i=i/e|0;for(var o=t.length-r,s=o%n,a=Math.min(o,o-s)+r,u=0,h=r;h<a;h+=n)u=c(t,h,h+n,e),this.imuln(i),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==s){var l=1;for(u=c(t,h,t.length,e),h=0;h<s;h++)l*=e;this.imuln(l),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}this.strip()},o.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},o.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var h=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],l=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],f=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function d(t,e,r){r.negative=e.negative^t.negative;var n=t.length+e.length|0;r.length=n,n=n-1|0;var i=0|t.words[0],o=0|e.words[0],s=i*o,a=67108863&s,u=s/67108864|0;r.words[0]=a;for(var c=1;c<n;c++){for(var h=u>>>26,l=67108863&u,f=Math.min(c,e.length-1),d=Math.max(0,c-t.length+1);d<=f;d++){var p=c-d|0;h+=(s=(i=0|t.words[p])*(o=0|e.words[d])+l)/67108864|0,l=67108863&s}r.words[c]=0|l,u=0|h}return 0!==u?r.words[c]=0|u:r.length--,r.strip()}o.prototype.toString=function(t,e){var r;if(e=0|e||1,16===(t=t||10)||"hex"===t){r="";for(var i=0,o=0,s=0;s<this.length;s++){var a=this.words[s],u=(16777215&(a<<i|o)).toString(16);r=0!=(o=a>>>24-i&16777215)||s!==this.length-1?h[6-u.length]+u+r:u+r,(i+=2)>=26&&(i-=26,s--)}for(0!==o&&(r=o.toString(16)+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}if(t===(0|t)&&t>=2&&t<=36){var c=l[t],d=f[t];r="";var p=this.clone();for(p.negative=0;!p.isZero();){var m=p.modn(d).toString(t);r=(p=p.idivn(d)).isZero()?m+r:h[c-m.length]+m+r}for(this.isZero()&&(r="0"+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}n(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&n(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16)},o.prototype.toBuffer=function(t,e){return n(void 0!==s),this.toArrayLike(s,t,e)},o.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},o.prototype.toArrayLike=function(t,e,r){var i=this.byteLength(),o=r||Math.max(1,i);n(i<=o,"byte array longer than desired length"),n(o>0,"Requested array length <= 0"),this.strip();var s,a,u="le"===e,c=new t(o),h=this.clone();if(u){for(a=0;!h.isZero();a++)s=h.andln(255),h.iushrn(8),c[a]=s;for(;a<o;a++)c[a]=0}else{for(a=0;a<o-i;a++)c[a]=0;for(a=0;!h.isZero();a++)s=h.andln(255),h.iushrn(8),c[o-a-1]=s}return c},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var e=t,r=0;return e>=4096&&(r+=13,e>>>=13),e>=64&&(r+=7,e>>>=7),e>=8&&(r+=4,e>>>=4),e>=2&&(r+=2,e>>>=2),r+e},o.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,r=0;return 0==(8191&e)&&(r+=13,e>>>=13),0==(127&e)&&(r+=7,e>>>=7),0==(15&e)&&(r+=4,e>>>=4),0==(3&e)&&(r+=2,e>>>=2),0==(1&e)&&r++,r},o.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var r=this._zeroBits(this.words[e]);if(t+=r,26!==r)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},o.prototype.ior=function(t){return n(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var r=0;r<e.length;r++)this.words[r]=this.words[r]&t.words[r];return this.length=e.length,this.strip()},o.prototype.iand=function(t){return n(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var e,r;this.length>t.length?(e=this,r=t):(e=t,r=this);for(var n=0;n<r.length;n++)this.words[n]=e.words[n]^r.words[n];if(this!==e)for(;n<e.length;n++)this.words[n]=e.words[n];return this.length=e.length,this.strip()},o.prototype.ixor=function(t){return n(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){n("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),r=t%26;this._expand(e),r>0&&e--;for(var i=0;i<e;i++)this.words[i]=67108863&~this.words[i];return r>0&&(this.words[i]=~this.words[i]&67108863>>26-r),this.strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,e){n("number"==typeof t&&t>=0);var r=t/26|0,i=t%26;return this._expand(r+1),this.words[r]=e?this.words[r]|1<<i:this.words[r]&~(1<<i),this.strip()},o.prototype.iadd=function(t){var e,r,n;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(r=this,n=t):(r=t,n=this);for(var i=0,o=0;o<n.length;o++)e=(0|r.words[o])+(0|n.words[o])+i,this.words[o]=67108863&e,i=e>>>26;for(;0!==i&&o<r.length;o++)e=(0|r.words[o])+i,this.words[o]=67108863&e,i=e>>>26;if(this.length=r.length,0!==i)this.words[this.length]=i,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},o.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r,n,i=this.cmp(t);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(r=this,n=t):(r=t,n=this);for(var o=0,s=0;s<n.length;s++)o=(e=(0|r.words[s])-(0|n.words[s])+o)>>26,this.words[s]=67108863&e;for(;0!==o&&s<r.length;s++)o=(e=(0|r.words[s])+o)>>26,this.words[s]=67108863&e;if(0===o&&s<r.length&&r!==this)for(;s<r.length;s++)this.words[s]=r.words[s];return this.length=Math.max(this.length,s),r!==this&&(this.negative=1),this.strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var p=function(t,e,r){var n,i,o,s=t.words,a=e.words,u=r.words,c=0,h=0|s[0],l=8191&h,f=h>>>13,d=0|s[1],p=8191&d,m=d>>>13,g=0|s[2],v=8191&g,y=g>>>13,b=0|s[3],w=8191&b,M=b>>>13,_=0|s[4],x=8191&_,k=_>>>13,O=0|s[5],S=8191&O,A=O>>>13,E=0|s[6],j=8191&E,T=E>>>13,P=0|s[7],C=8191&P,I=P>>>13,B=0|s[8],N=8191&B,R=B>>>13,L=0|s[9],F=8191&L,D=L>>>13,q=0|a[0],U=8191&q,H=q>>>13,z=0|a[1],V=8191&z,W=z>>>13,$=0|a[2],G=8191&$,K=$>>>13,Z=0|a[3],J=8191&Z,Y=Z>>>13,X=0|a[4],Q=8191&X,tt=X>>>13,et=0|a[5],rt=8191&et,nt=et>>>13,it=0|a[6],ot=8191&it,st=it>>>13,at=0|a[7],ut=8191&at,ct=at>>>13,ht=0|a[8],lt=8191&ht,ft=ht>>>13,dt=0|a[9],pt=8191&dt,mt=dt>>>13;r.negative=t.negative^e.negative,r.length=19;var gt=(c+(n=Math.imul(l,U))|0)+((8191&(i=(i=Math.imul(l,H))+Math.imul(f,U)|0))<<13)|0;c=((o=Math.imul(f,H))+(i>>>13)|0)+(gt>>>26)|0,gt&=67108863,n=Math.imul(p,U),i=(i=Math.imul(p,H))+Math.imul(m,U)|0,o=Math.imul(m,H);var vt=(c+(n=n+Math.imul(l,V)|0)|0)+((8191&(i=(i=i+Math.imul(l,W)|0)+Math.imul(f,V)|0))<<13)|0;c=((o=o+Math.imul(f,W)|0)+(i>>>13)|0)+(vt>>>26)|0,vt&=67108863,n=Math.imul(v,U),i=(i=Math.imul(v,H))+Math.imul(y,U)|0,o=Math.imul(y,H),n=n+Math.imul(p,V)|0,i=(i=i+Math.imul(p,W)|0)+Math.imul(m,V)|0,o=o+Math.imul(m,W)|0;var yt=(c+(n=n+Math.imul(l,G)|0)|0)+((8191&(i=(i=i+Math.imul(l,K)|0)+Math.imul(f,G)|0))<<13)|0;c=((o=o+Math.imul(f,K)|0)+(i>>>13)|0)+(yt>>>26)|0,yt&=67108863,n=Math.imul(w,U),i=(i=Math.imul(w,H))+Math.imul(M,U)|0,o=Math.imul(M,H),n=n+Math.imul(v,V)|0,i=(i=i+Math.imul(v,W)|0)+Math.imul(y,V)|0,o=o+Math.imul(y,W)|0,n=n+Math.imul(p,G)|0,i=(i=i+Math.imul(p,K)|0)+Math.imul(m,G)|0,o=o+Math.imul(m,K)|0;var bt=(c+(n=n+Math.imul(l,J)|0)|0)+((8191&(i=(i=i+Math.imul(l,Y)|0)+Math.imul(f,J)|0))<<13)|0;c=((o=o+Math.imul(f,Y)|0)+(i>>>13)|0)+(bt>>>26)|0,bt&=67108863,n=Math.imul(x,U),i=(i=Math.imul(x,H))+Math.imul(k,U)|0,o=Math.imul(k,H),n=n+Math.imul(w,V)|0,i=(i=i+Math.imul(w,W)|0)+Math.imul(M,V)|0,o=o+Math.imul(M,W)|0,n=n+Math.imul(v,G)|0,i=(i=i+Math.imul(v,K)|0)+Math.imul(y,G)|0,o=o+Math.imul(y,K)|0,n=n+Math.imul(p,J)|0,i=(i=i+Math.imul(p,Y)|0)+Math.imul(m,J)|0,o=o+Math.imul(m,Y)|0;var wt=(c+(n=n+Math.imul(l,Q)|0)|0)+((8191&(i=(i=i+Math.imul(l,tt)|0)+Math.imul(f,Q)|0))<<13)|0;c=((o=o+Math.imul(f,tt)|0)+(i>>>13)|0)+(wt>>>26)|0,wt&=67108863,n=Math.imul(S,U),i=(i=Math.imul(S,H))+Math.imul(A,U)|0,o=Math.imul(A,H),n=n+Math.imul(x,V)|0,i=(i=i+Math.imul(x,W)|0)+Math.imul(k,V)|0,o=o+Math.imul(k,W)|0,n=n+Math.imul(w,G)|0,i=(i=i+Math.imul(w,K)|0)+Math.imul(M,G)|0,o=o+Math.imul(M,K)|0,n=n+Math.imul(v,J)|0,i=(i=i+Math.imul(v,Y)|0)+Math.imul(y,J)|0,o=o+Math.imul(y,Y)|0,n=n+Math.imul(p,Q)|0,i=(i=i+Math.imul(p,tt)|0)+Math.imul(m,Q)|0,o=o+Math.imul(m,tt)|0;var Mt=(c+(n=n+Math.imul(l,rt)|0)|0)+((8191&(i=(i=i+Math.imul(l,nt)|0)+Math.imul(f,rt)|0))<<13)|0;c=((o=o+Math.imul(f,nt)|0)+(i>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,n=Math.imul(j,U),i=(i=Math.imul(j,H))+Math.imul(T,U)|0,o=Math.imul(T,H),n=n+Math.imul(S,V)|0,i=(i=i+Math.imul(S,W)|0)+Math.imul(A,V)|0,o=o+Math.imul(A,W)|0,n=n+Math.imul(x,G)|0,i=(i=i+Math.imul(x,K)|0)+Math.imul(k,G)|0,o=o+Math.imul(k,K)|0,n=n+Math.imul(w,J)|0,i=(i=i+Math.imul(w,Y)|0)+Math.imul(M,J)|0,o=o+Math.imul(M,Y)|0,n=n+Math.imul(v,Q)|0,i=(i=i+Math.imul(v,tt)|0)+Math.imul(y,Q)|0,o=o+Math.imul(y,tt)|0,n=n+Math.imul(p,rt)|0,i=(i=i+Math.imul(p,nt)|0)+Math.imul(m,rt)|0,o=o+Math.imul(m,nt)|0;var _t=(c+(n=n+Math.imul(l,ot)|0)|0)+((8191&(i=(i=i+Math.imul(l,st)|0)+Math.imul(f,ot)|0))<<13)|0;c=((o=o+Math.imul(f,st)|0)+(i>>>13)|0)+(_t>>>26)|0,_t&=67108863,n=Math.imul(C,U),i=(i=Math.imul(C,H))+Math.imul(I,U)|0,o=Math.imul(I,H),n=n+Math.imul(j,V)|0,i=(i=i+Math.imul(j,W)|0)+Math.imul(T,V)|0,o=o+Math.imul(T,W)|0,n=n+Math.imul(S,G)|0,i=(i=i+Math.imul(S,K)|0)+Math.imul(A,G)|0,o=o+Math.imul(A,K)|0,n=n+Math.imul(x,J)|0,i=(i=i+Math.imul(x,Y)|0)+Math.imul(k,J)|0,o=o+Math.imul(k,Y)|0,n=n+Math.imul(w,Q)|0,i=(i=i+Math.imul(w,tt)|0)+Math.imul(M,Q)|0,o=o+Math.imul(M,tt)|0,n=n+Math.imul(v,rt)|0,i=(i=i+Math.imul(v,nt)|0)+Math.imul(y,rt)|0,o=o+Math.imul(y,nt)|0,n=n+Math.imul(p,ot)|0,i=(i=i+Math.imul(p,st)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,st)|0;var xt=(c+(n=n+Math.imul(l,ut)|0)|0)+((8191&(i=(i=i+Math.imul(l,ct)|0)+Math.imul(f,ut)|0))<<13)|0;c=((o=o+Math.imul(f,ct)|0)+(i>>>13)|0)+(xt>>>26)|0,xt&=67108863,n=Math.imul(N,U),i=(i=Math.imul(N,H))+Math.imul(R,U)|0,o=Math.imul(R,H),n=n+Math.imul(C,V)|0,i=(i=i+Math.imul(C,W)|0)+Math.imul(I,V)|0,o=o+Math.imul(I,W)|0,n=n+Math.imul(j,G)|0,i=(i=i+Math.imul(j,K)|0)+Math.imul(T,G)|0,o=o+Math.imul(T,K)|0,n=n+Math.imul(S,J)|0,i=(i=i+Math.imul(S,Y)|0)+Math.imul(A,J)|0,o=o+Math.imul(A,Y)|0,n=n+Math.imul(x,Q)|0,i=(i=i+Math.imul(x,tt)|0)+Math.imul(k,Q)|0,o=o+Math.imul(k,tt)|0,n=n+Math.imul(w,rt)|0,i=(i=i+Math.imul(w,nt)|0)+Math.imul(M,rt)|0,o=o+Math.imul(M,nt)|0,n=n+Math.imul(v,ot)|0,i=(i=i+Math.imul(v,st)|0)+Math.imul(y,ot)|0,o=o+Math.imul(y,st)|0,n=n+Math.imul(p,ut)|0,i=(i=i+Math.imul(p,ct)|0)+Math.imul(m,ut)|0,o=o+Math.imul(m,ct)|0;var kt=(c+(n=n+Math.imul(l,lt)|0)|0)+((8191&(i=(i=i+Math.imul(l,ft)|0)+Math.imul(f,lt)|0))<<13)|0;c=((o=o+Math.imul(f,ft)|0)+(i>>>13)|0)+(kt>>>26)|0,kt&=67108863,n=Math.imul(F,U),i=(i=Math.imul(F,H))+Math.imul(D,U)|0,o=Math.imul(D,H),n=n+Math.imul(N,V)|0,i=(i=i+Math.imul(N,W)|0)+Math.imul(R,V)|0,o=o+Math.imul(R,W)|0,n=n+Math.imul(C,G)|0,i=(i=i+Math.imul(C,K)|0)+Math.imul(I,G)|0,o=o+Math.imul(I,K)|0,n=n+Math.imul(j,J)|0,i=(i=i+Math.imul(j,Y)|0)+Math.imul(T,J)|0,o=o+Math.imul(T,Y)|0,n=n+Math.imul(S,Q)|0,i=(i=i+Math.imul(S,tt)|0)+Math.imul(A,Q)|0,o=o+Math.imul(A,tt)|0,n=n+Math.imul(x,rt)|0,i=(i=i+Math.imul(x,nt)|0)+Math.imul(k,rt)|0,o=o+Math.imul(k,nt)|0,n=n+Math.imul(w,ot)|0,i=(i=i+Math.imul(w,st)|0)+Math.imul(M,ot)|0,o=o+Math.imul(M,st)|0,n=n+Math.imul(v,ut)|0,i=(i=i+Math.imul(v,ct)|0)+Math.imul(y,ut)|0,o=o+Math.imul(y,ct)|0,n=n+Math.imul(p,lt)|0,i=(i=i+Math.imul(p,ft)|0)+Math.imul(m,lt)|0,o=o+Math.imul(m,ft)|0;var Ot=(c+(n=n+Math.imul(l,pt)|0)|0)+((8191&(i=(i=i+Math.imul(l,mt)|0)+Math.imul(f,pt)|0))<<13)|0;c=((o=o+Math.imul(f,mt)|0)+(i>>>13)|0)+(Ot>>>26)|0,Ot&=67108863,n=Math.imul(F,V),i=(i=Math.imul(F,W))+Math.imul(D,V)|0,o=Math.imul(D,W),n=n+Math.imul(N,G)|0,i=(i=i+Math.imul(N,K)|0)+Math.imul(R,G)|0,o=o+Math.imul(R,K)|0,n=n+Math.imul(C,J)|0,i=(i=i+Math.imul(C,Y)|0)+Math.imul(I,J)|0,o=o+Math.imul(I,Y)|0,n=n+Math.imul(j,Q)|0,i=(i=i+Math.imul(j,tt)|0)+Math.imul(T,Q)|0,o=o+Math.imul(T,tt)|0,n=n+Math.imul(S,rt)|0,i=(i=i+Math.imul(S,nt)|0)+Math.imul(A,rt)|0,o=o+Math.imul(A,nt)|0,n=n+Math.imul(x,ot)|0,i=(i=i+Math.imul(x,st)|0)+Math.imul(k,ot)|0,o=o+Math.imul(k,st)|0,n=n+Math.imul(w,ut)|0,i=(i=i+Math.imul(w,ct)|0)+Math.imul(M,ut)|0,o=o+Math.imul(M,ct)|0,n=n+Math.imul(v,lt)|0,i=(i=i+Math.imul(v,ft)|0)+Math.imul(y,lt)|0,o=o+Math.imul(y,ft)|0;var St=(c+(n=n+Math.imul(p,pt)|0)|0)+((8191&(i=(i=i+Math.imul(p,mt)|0)+Math.imul(m,pt)|0))<<13)|0;c=((o=o+Math.imul(m,mt)|0)+(i>>>13)|0)+(St>>>26)|0,St&=67108863,n=Math.imul(F,G),i=(i=Math.imul(F,K))+Math.imul(D,G)|0,o=Math.imul(D,K),n=n+Math.imul(N,J)|0,i=(i=i+Math.imul(N,Y)|0)+Math.imul(R,J)|0,o=o+Math.imul(R,Y)|0,n=n+Math.imul(C,Q)|0,i=(i=i+Math.imul(C,tt)|0)+Math.imul(I,Q)|0,o=o+Math.imul(I,tt)|0,n=n+Math.imul(j,rt)|0,i=(i=i+Math.imul(j,nt)|0)+Math.imul(T,rt)|0,o=o+Math.imul(T,nt)|0,n=n+Math.imul(S,ot)|0,i=(i=i+Math.imul(S,st)|0)+Math.imul(A,ot)|0,o=o+Math.imul(A,st)|0,n=n+Math.imul(x,ut)|0,i=(i=i+Math.imul(x,ct)|0)+Math.imul(k,ut)|0,o=o+Math.imul(k,ct)|0,n=n+Math.imul(w,lt)|0,i=(i=i+Math.imul(w,ft)|0)+Math.imul(M,lt)|0,o=o+Math.imul(M,ft)|0;var At=(c+(n=n+Math.imul(v,pt)|0)|0)+((8191&(i=(i=i+Math.imul(v,mt)|0)+Math.imul(y,pt)|0))<<13)|0;c=((o=o+Math.imul(y,mt)|0)+(i>>>13)|0)+(At>>>26)|0,At&=67108863,n=Math.imul(F,J),i=(i=Math.imul(F,Y))+Math.imul(D,J)|0,o=Math.imul(D,Y),n=n+Math.imul(N,Q)|0,i=(i=i+Math.imul(N,tt)|0)+Math.imul(R,Q)|0,o=o+Math.imul(R,tt)|0,n=n+Math.imul(C,rt)|0,i=(i=i+Math.imul(C,nt)|0)+Math.imul(I,rt)|0,o=o+Math.imul(I,nt)|0,n=n+Math.imul(j,ot)|0,i=(i=i+Math.imul(j,st)|0)+Math.imul(T,ot)|0,o=o+Math.imul(T,st)|0,n=n+Math.imul(S,ut)|0,i=(i=i+Math.imul(S,ct)|0)+Math.imul(A,ut)|0,o=o+Math.imul(A,ct)|0,n=n+Math.imul(x,lt)|0,i=(i=i+Math.imul(x,ft)|0)+Math.imul(k,lt)|0,o=o+Math.imul(k,ft)|0;var Et=(c+(n=n+Math.imul(w,pt)|0)|0)+((8191&(i=(i=i+Math.imul(w,mt)|0)+Math.imul(M,pt)|0))<<13)|0;c=((o=o+Math.imul(M,mt)|0)+(i>>>13)|0)+(Et>>>26)|0,Et&=67108863,n=Math.imul(F,Q),i=(i=Math.imul(F,tt))+Math.imul(D,Q)|0,o=Math.imul(D,tt),n=n+Math.imul(N,rt)|0,i=(i=i+Math.imul(N,nt)|0)+Math.imul(R,rt)|0,o=o+Math.imul(R,nt)|0,n=n+Math.imul(C,ot)|0,i=(i=i+Math.imul(C,st)|0)+Math.imul(I,ot)|0,o=o+Math.imul(I,st)|0,n=n+Math.imul(j,ut)|0,i=(i=i+Math.imul(j,ct)|0)+Math.imul(T,ut)|0,o=o+Math.imul(T,ct)|0,n=n+Math.imul(S,lt)|0,i=(i=i+Math.imul(S,ft)|0)+Math.imul(A,lt)|0,o=o+Math.imul(A,ft)|0;var jt=(c+(n=n+Math.imul(x,pt)|0)|0)+((8191&(i=(i=i+Math.imul(x,mt)|0)+Math.imul(k,pt)|0))<<13)|0;c=((o=o+Math.imul(k,mt)|0)+(i>>>13)|0)+(jt>>>26)|0,jt&=67108863,n=Math.imul(F,rt),i=(i=Math.imul(F,nt))+Math.imul(D,rt)|0,o=Math.imul(D,nt),n=n+Math.imul(N,ot)|0,i=(i=i+Math.imul(N,st)|0)+Math.imul(R,ot)|0,o=o+Math.imul(R,st)|0,n=n+Math.imul(C,ut)|0,i=(i=i+Math.imul(C,ct)|0)+Math.imul(I,ut)|0,o=o+Math.imul(I,ct)|0,n=n+Math.imul(j,lt)|0,i=(i=i+Math.imul(j,ft)|0)+Math.imul(T,lt)|0,o=o+Math.imul(T,ft)|0;var Tt=(c+(n=n+Math.imul(S,pt)|0)|0)+((8191&(i=(i=i+Math.imul(S,mt)|0)+Math.imul(A,pt)|0))<<13)|0;c=((o=o+Math.imul(A,mt)|0)+(i>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,n=Math.imul(F,ot),i=(i=Math.imul(F,st))+Math.imul(D,ot)|0,o=Math.imul(D,st),n=n+Math.imul(N,ut)|0,i=(i=i+Math.imul(N,ct)|0)+Math.imul(R,ut)|0,o=o+Math.imul(R,ct)|0,n=n+Math.imul(C,lt)|0,i=(i=i+Math.imul(C,ft)|0)+Math.imul(I,lt)|0,o=o+Math.imul(I,ft)|0;var Pt=(c+(n=n+Math.imul(j,pt)|0)|0)+((8191&(i=(i=i+Math.imul(j,mt)|0)+Math.imul(T,pt)|0))<<13)|0;c=((o=o+Math.imul(T,mt)|0)+(i>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,n=Math.imul(F,ut),i=(i=Math.imul(F,ct))+Math.imul(D,ut)|0,o=Math.imul(D,ct),n=n+Math.imul(N,lt)|0,i=(i=i+Math.imul(N,ft)|0)+Math.imul(R,lt)|0,o=o+Math.imul(R,ft)|0;var Ct=(c+(n=n+Math.imul(C,pt)|0)|0)+((8191&(i=(i=i+Math.imul(C,mt)|0)+Math.imul(I,pt)|0))<<13)|0;c=((o=o+Math.imul(I,mt)|0)+(i>>>13)|0)+(Ct>>>26)|0,Ct&=67108863,n=Math.imul(F,lt),i=(i=Math.imul(F,ft))+Math.imul(D,lt)|0,o=Math.imul(D,ft);var It=(c+(n=n+Math.imul(N,pt)|0)|0)+((8191&(i=(i=i+Math.imul(N,mt)|0)+Math.imul(R,pt)|0))<<13)|0;c=((o=o+Math.imul(R,mt)|0)+(i>>>13)|0)+(It>>>26)|0,It&=67108863;var Bt=(c+(n=Math.imul(F,pt))|0)+((8191&(i=(i=Math.imul(F,mt))+Math.imul(D,pt)|0))<<13)|0;return c=((o=Math.imul(D,mt))+(i>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,u[0]=gt,u[1]=vt,u[2]=yt,u[3]=bt,u[4]=wt,u[5]=Mt,u[6]=_t,u[7]=xt,u[8]=kt,u[9]=Ot,u[10]=St,u[11]=At,u[12]=Et,u[13]=jt,u[14]=Tt,u[15]=Pt,u[16]=Ct,u[17]=It,u[18]=Bt,0!==c&&(u[19]=c,r.length++),r};function m(t,e,r){return(new g).mulp(t,e,r)}function g(t,e){this.x=t,this.y=e}Math.imul||(p=d),o.prototype.mulTo=function(t,e){var r=this.length+t.length;return 10===this.length&&10===t.length?p(this,t,e):r<63?d(this,t,e):r<1024?function(t,e,r){r.negative=e.negative^t.negative,r.length=t.length+e.length;for(var n=0,i=0,o=0;o<r.length-1;o++){var s=i;i=0;for(var a=67108863&n,u=Math.min(o,e.length-1),c=Math.max(0,o-t.length+1);c<=u;c++){var h=o-c,l=(0|t.words[h])*(0|e.words[c]),f=67108863&l;a=67108863&(f=f+a|0),i+=(s=(s=s+(l/67108864|0)|0)+(f>>>26)|0)>>>26,s&=67108863}r.words[o]=a,n=s,s=i}return 0!==n?r.words[o]=n:r.length--,r.strip()}(this,t,e):m(this,t,e)},g.prototype.makeRBT=function(t){for(var e=new Array(t),r=o.prototype._countBits(t)-1,n=0;n<t;n++)e[n]=this.revBin(n,r,t);return e},g.prototype.revBin=function(t,e,r){if(0===t||t===r-1)return t;for(var n=0,i=0;i<e;i++)n|=(1&t)<<e-i-1,t>>=1;return n},g.prototype.permute=function(t,e,r,n,i,o){for(var s=0;s<o;s++)n[s]=e[t[s]],i[s]=r[t[s]]},g.prototype.transform=function(t,e,r,n,i,o){this.permute(o,t,e,r,n,i);for(var s=1;s<i;s<<=1)for(var a=s<<1,u=Math.cos(2*Math.PI/a),c=Math.sin(2*Math.PI/a),h=0;h<i;h+=a)for(var l=u,f=c,d=0;d<s;d++){var p=r[h+d],m=n[h+d],g=r[h+d+s],v=n[h+d+s],y=l*g-f*v;v=l*v+f*g,g=y,r[h+d]=p+g,n[h+d]=m+v,r[h+d+s]=p-g,n[h+d+s]=m-v,d!==a&&(y=u*l-c*f,f=u*f+c*l,l=y)}},g.prototype.guessLen13b=function(t,e){var r=1|Math.max(e,t),n=1&r,i=0;for(r=r/2|0;r;r>>>=1)i++;return 1<<i+1+n},g.prototype.conjugate=function(t,e,r){if(!(r<=1))for(var n=0;n<r/2;n++){var i=t[n];t[n]=t[r-n-1],t[r-n-1]=i,i=e[n],e[n]=-e[r-n-1],e[r-n-1]=-i}},g.prototype.normalize13b=function(t,e){for(var r=0,n=0;n<e/2;n++){var i=8192*Math.round(t[2*n+1]/e)+Math.round(t[2*n]/e)+r;t[n]=67108863&i,r=i<67108864?0:i/67108864|0}return t},g.prototype.convert13b=function(t,e,r,i){for(var o=0,s=0;s<e;s++)o+=0|t[s],r[2*s]=8191&o,o>>>=13,r[2*s+1]=8191&o,o>>>=13;for(s=2*e;s<i;++s)r[s]=0;n(0===o),n(0==(-8192&o))},g.prototype.stub=function(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=0;return e},g.prototype.mulp=function(t,e,r){var n=2*this.guessLen13b(t.length,e.length),i=this.makeRBT(n),o=this.stub(n),s=new Array(n),a=new Array(n),u=new Array(n),c=new Array(n),h=new Array(n),l=new Array(n),f=r.words;f.length=n,this.convert13b(t.words,t.length,s,n),this.convert13b(e.words,e.length,c,n),this.transform(s,o,a,u,n,i),this.transform(c,o,h,l,n,i);for(var d=0;d<n;d++){var p=a[d]*h[d]-u[d]*l[d];u[d]=a[d]*l[d]+u[d]*h[d],a[d]=p}return this.conjugate(a,u,n),this.transform(a,u,f,o,n,i),this.conjugate(f,o,n),this.normalize13b(f,n),r.negative=t.negative^e.negative,r.length=t.length+e.length,r.strip()},o.prototype.mul=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},o.prototype.mulf=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),m(this,t,e)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){n("number"==typeof t),n(t<67108864);for(var e=0,r=0;r<this.length;r++){var i=(0|this.words[r])*t,o=(67108863&i)+(67108863&e);e>>=26,e+=i/67108864|0,e+=o>>>26,this.words[r]=67108863&o}return 0!==e&&(this.words[r]=e,this.length++),this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),r=0;r<e.length;r++){var n=r/26|0,i=r%26;e[r]=(t.words[n]&1<<i)>>>i}return e}(t);if(0===e.length)return new o(1);for(var r=this,n=0;n<e.length&&0===e[n];n++,r=r.sqr());if(++n<e.length)for(var i=r.sqr();n<e.length;n++,i=i.sqr())0!==e[n]&&(r=r.mul(i));return r},o.prototype.iushln=function(t){n("number"==typeof t&&t>=0);var e,r=t%26,i=(t-r)/26,o=67108863>>>26-r<<26-r;if(0!==r){var s=0;for(e=0;e<this.length;e++){var a=this.words[e]&o,u=(0|this.words[e])-a<<r;this.words[e]=u|s,s=a>>>26-r}s&&(this.words[e]=s,this.length++)}if(0!==i){for(e=this.length-1;e>=0;e--)this.words[e+i]=this.words[e];for(e=0;e<i;e++)this.words[e]=0;this.length+=i}return this.strip()},o.prototype.ishln=function(t){return n(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,e,r){var i;n("number"==typeof t&&t>=0),i=e?(e-e%26)/26:0;var o=t%26,s=Math.min((t-o)/26,this.length),a=67108863^67108863>>>o<<o,u=r;if(i-=s,i=Math.max(0,i),u){for(var c=0;c<s;c++)u.words[c]=this.words[c];u.length=s}if(0===s);else if(this.length>s)for(this.length-=s,c=0;c<this.length;c++)this.words[c]=this.words[c+s];else this.words[0]=0,this.length=1;var h=0;for(c=this.length-1;c>=0&&(0!==h||c>=i);c--){var l=0|this.words[c];this.words[c]=h<<26-o|l>>>o,h=l&a}return u&&0!==h&&(u.words[u.length++]=h),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},o.prototype.ishrn=function(t,e,r){return n(0===this.negative),this.iushrn(t,e,r)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26,i=1<<e;return!(this.length<=r||!(this.words[r]&i))},o.prototype.imaskn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26;if(n(0===this.negative,"imaskn works only with positive numbers"),this.length<=r)return this;if(0!==e&&r++,this.length=Math.min(r,this.length),0!==e){var i=67108863^67108863>>>e<<e;this.words[this.length-1]&=i}return this.strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return n("number"==typeof t),n(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},o.prototype.isubn=function(t){if(n("number"==typeof t),n(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,e,r){var i,o,s=t.length+r;this._expand(s);var a=0;for(i=0;i<t.length;i++){o=(0|this.words[i+r])+a;var u=(0|t.words[i])*e;a=((o-=67108863&u)>>26)-(u/67108864|0),this.words[i+r]=67108863&o}for(;i<this.length-r;i++)a=(o=(0|this.words[i+r])+a)>>26,this.words[i+r]=67108863&o;if(0===a)return this.strip();for(n(-1===a),a=0,i=0;i<this.length;i++)a=(o=-(0|this.words[i])+a)>>26,this.words[i]=67108863&o;return this.negative=1,this.strip()},o.prototype._wordDiv=function(t,e){var r=(this.length,t.length),n=this.clone(),i=t,s=0|i.words[i.length-1];0!=(r=26-this._countBits(s))&&(i=i.ushln(r),n.iushln(r),s=0|i.words[i.length-1]);var a,u=n.length-i.length;if("mod"!==e){(a=new o(null)).length=u+1,a.words=new Array(a.length);for(var c=0;c<a.length;c++)a.words[c]=0}var h=n.clone()._ishlnsubmul(i,1,u);0===h.negative&&(n=h,a&&(a.words[u]=1));for(var l=u-1;l>=0;l--){var f=67108864*(0|n.words[i.length+l])+(0|n.words[i.length+l-1]);for(f=Math.min(f/s|0,67108863),n._ishlnsubmul(i,f,l);0!==n.negative;)f--,n.negative=0,n._ishlnsubmul(i,1,l),n.isZero()||(n.negative^=1);a&&(a.words[l]=f)}return a&&a.strip(),n.strip(),"div"!==e&&0!==r&&n.iushrn(r),{div:a||null,mod:n}},o.prototype.divmod=function(t,e,r){return n(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(a=this.neg().divmod(t,e),"mod"!==e&&(i=a.div.neg()),"div"!==e&&(s=a.mod.neg(),r&&0!==s.negative&&s.iadd(t)),{div:i,mod:s}):0===this.negative&&0!==t.negative?(a=this.divmod(t.neg(),e),"mod"!==e&&(i=a.div.neg()),{div:i,mod:a.mod}):0!=(this.negative&t.negative)?(a=this.neg().divmod(t.neg(),e),"div"!==e&&(s=a.mod.neg(),r&&0!==s.negative&&s.isub(t)),{div:a.div,mod:s}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new o(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modn(t.words[0]))}:this._wordDiv(t,e);var i,s,a},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var r=0!==e.div.negative?e.mod.isub(t):e.mod,n=t.ushrn(1),i=t.andln(1),o=r.cmp(n);return o<0||1===i&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},o.prototype.modn=function(t){n(t<=67108863);for(var e=(1<<26)%t,r=0,i=this.length-1;i>=0;i--)r=(e*r+(0|this.words[i]))%t;return r},o.prototype.idivn=function(t){n(t<=67108863);for(var e=0,r=this.length-1;r>=0;r--){var i=(0|this.words[r])+67108864*e;this.words[r]=i/t|0,e=i%t}return this.strip()},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i=new o(1),s=new o(0),a=new o(0),u=new o(1),c=0;e.isEven()&&r.isEven();)e.iushrn(1),r.iushrn(1),++c;for(var h=r.clone(),l=e.clone();!e.isZero();){for(var f=0,d=1;0==(e.words[0]&d)&&f<26;++f,d<<=1);if(f>0)for(e.iushrn(f);f-- >0;)(i.isOdd()||s.isOdd())&&(i.iadd(h),s.isub(l)),i.iushrn(1),s.iushrn(1);for(var p=0,m=1;0==(r.words[0]&m)&&p<26;++p,m<<=1);if(p>0)for(r.iushrn(p);p-- >0;)(a.isOdd()||u.isOdd())&&(a.iadd(h),u.isub(l)),a.iushrn(1),u.iushrn(1);e.cmp(r)>=0?(e.isub(r),i.isub(a),s.isub(u)):(r.isub(e),a.isub(i),u.isub(s))}return{a,b:u,gcd:r.iushln(c)}},o.prototype._invmp=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i,s=new o(1),a=new o(0),u=r.clone();e.cmpn(1)>0&&r.cmpn(1)>0;){for(var c=0,h=1;0==(e.words[0]&h)&&c<26;++c,h<<=1);if(c>0)for(e.iushrn(c);c-- >0;)s.isOdd()&&s.iadd(u),s.iushrn(1);for(var l=0,f=1;0==(r.words[0]&f)&&l<26;++l,f<<=1);if(l>0)for(r.iushrn(l);l-- >0;)a.isOdd()&&a.iadd(u),a.iushrn(1);e.cmp(r)>=0?(e.isub(r),s.isub(a)):(r.isub(e),a.isub(s))}return(i=0===e.cmpn(1)?s:a).cmpn(0)<0&&i.iadd(t),i},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),r=t.clone();e.negative=0,r.negative=0;for(var n=0;e.isEven()&&r.isEven();n++)e.iushrn(1),r.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;r.isEven();)r.iushrn(1);var i=e.cmp(r);if(i<0){var o=e;e=r,r=o}else if(0===i||0===r.cmpn(1))break;e.isub(r)}return r.iushln(n)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){n("number"==typeof t);var e=t%26,r=(t-e)/26,i=1<<e;if(this.length<=r)return this._expand(r+1),this.words[r]|=i,this;for(var o=i,s=r;0!==o&&s<this.length;s++){var a=0|this.words[s];o=(a+=o)>>>26,a&=67108863,this.words[s]=a}return 0!==o&&(this.words[s]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var e,r=t<0;if(0!==this.negative&&!r)return-1;if(0===this.negative&&r)return 1;if(this.strip(),this.length>1)e=1;else{r&&(t=-t),n(t<=67108863,"Number is too big");var i=0|this.words[0];e=i===t?0:i<t?-1:1}return 0!==this.negative?0|-e:e},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,r=this.length-1;r>=0;r--){var n=0|this.words[r],i=0|t.words[r];if(n!==i){n<i?e=-1:n>i&&(e=1);break}}return e},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new x(t)},o.prototype.toRed=function(t){return n(!this.red,"Already a number in reduction context"),n(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return n(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return n(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return n(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return n(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return n(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return n(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return n(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return n(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return n(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return n(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return n(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return n(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return n(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var v={k256:null,p224:null,p192:null,p25519:null};function y(t,e){this.name=t,this.p=new o(e,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function b(){y.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function w(){y.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function M(){y.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function _(){y.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function x(t){if("string"==typeof t){var e=o._prime(t);this.m=e.p,this.prime=e}else n(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function k(t){x.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}y.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},y.prototype.ireduce=function(t){var e,r=t;do{this.split(r,this.tmp),e=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(e>this.n);var n=e<this.n?-1:r.ucmp(this.p);return 0===n?(r.words[0]=0,r.length=1):n>0?r.isub(this.p):void 0!==r.strip?r.strip():r._strip(),r},y.prototype.split=function(t,e){t.iushrn(this.n,0,e)},y.prototype.imulK=function(t){return t.imul(this.k)},i(b,y),b.prototype.split=function(t,e){for(var r=4194303,n=Math.min(t.length,9),i=0;i<n;i++)e.words[i]=t.words[i];if(e.length=n,t.length<=9)return t.words[0]=0,void(t.length=1);var o=t.words[9];for(e.words[e.length++]=o&r,i=10;i<t.length;i++){var s=0|t.words[i];t.words[i-10]=(s&r)<<4|o>>>22,o=s}o>>>=22,t.words[i-10]=o,0===o&&t.length>10?t.length-=10:t.length-=9},b.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,r=0;r<t.length;r++){var n=0|t.words[r];e+=977*n,t.words[r]=67108863&e,e=64*n+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},i(w,y),i(M,y),i(_,y),_.prototype.imulK=function(t){for(var e=0,r=0;r<t.length;r++){var n=19*(0|t.words[r])+e,i=67108863&n;n>>>=26,t.words[r]=i,e=n}return 0!==e&&(t.words[t.length++]=e),t},o._prime=function(t){if(v[t])return v[t];var e;if("k256"===t)e=new b;else if("p224"===t)e=new w;else if("p192"===t)e=new M;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new _}return v[t]=e,e},x.prototype._verify1=function(t){n(0===t.negative,"red works only with positives"),n(t.red,"red works only with red numbers")},x.prototype._verify2=function(t,e){n(0==(t.negative|e.negative),"red works only with positives"),n(t.red&&t.red===e.red,"red works only with red numbers")},x.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},x.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},x.prototype.add=function(t,e){this._verify2(t,e);var r=t.add(e);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},x.prototype.iadd=function(t,e){this._verify2(t,e);var r=t.iadd(e);return r.cmp(this.m)>=0&&r.isub(this.m),r},x.prototype.sub=function(t,e){this._verify2(t,e);var r=t.sub(e);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},x.prototype.isub=function(t,e){this._verify2(t,e);var r=t.isub(e);return r.cmpn(0)<0&&r.iadd(this.m),r},x.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},x.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},x.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},x.prototype.isqr=function(t){return this.imul(t,t.clone())},x.prototype.sqr=function(t){return this.mul(t,t)},x.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(n(e%2==1),3===e){var r=this.m.add(new o(1)).iushrn(2);return this.pow(t,r)}for(var i=this.m.subn(1),s=0;!i.isZero()&&0===i.andln(1);)s++,i.iushrn(1);n(!i.isZero());var a=new o(1).toRed(this),u=a.redNeg(),c=this.m.subn(1).iushrn(1),h=this.m.bitLength();for(h=new o(2*h*h).toRed(this);0!==this.pow(h,c).cmp(u);)h.redIAdd(u);for(var l=this.pow(h,i),f=this.pow(t,i.addn(1).iushrn(1)),d=this.pow(t,i),p=s;0!==d.cmp(a);){for(var m=d,g=0;0!==m.cmp(a);g++)m=m.redSqr();n(g<p);var v=this.pow(l,new o(1).iushln(p-g-1));f=f.redMul(v),l=v.redSqr(),d=d.redMul(l),p=g}return f},x.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},x.prototype.pow=function(t,e){if(e.isZero())return new o(1).toRed(this);if(0===e.cmpn(1))return t.clone();var r=new Array(16);r[0]=new o(1).toRed(this),r[1]=t;for(var n=2;n<r.length;n++)r[n]=this.mul(r[n-1],t);var i=r[0],s=0,a=0,u=e.bitLength()%26;for(0===u&&(u=26),n=e.length-1;n>=0;n--){for(var c=e.words[n],h=u-1;h>=0;h--){var l=c>>h&1;i!==r[0]&&(i=this.sqr(i)),0!==l||0!==s?(s<<=1,s|=l,(4==++a||0===n&&0===h)&&(i=this.mul(i,r[s]),a=0,s=0)):a=0}u=26}return i},x.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},x.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},o.mont=function(t){return new k(t)},i(k,x),k.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},k.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},k.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},k.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new o(0)._forceRed(this);var r=t.mul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),s=i;return i.cmp(this.m)>=0?s=i.isub(this.m):i.cmpn(0)<0&&(s=i.iadd(this.m)),s._forceRed(this)},k.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t=r.nmd(t),this)},34351:(t,e,r)=>{var n=r(84390).errors,i=r(59536).XMLHttpRequest,o=r(8501),s=r(79267),a=function(t,e){e=e||{},this.withCredentials=e.withCredentials||!1,this.timeout=e.timeout||0,this.headers=e.headers,this.agent=e.agent,this.connected=!1;const r=!1!==e.keepAlive;this.host=t||"http://localhost:8545",this.agent||("https"===this.host.substring(0,5)?this.httpsAgent=new s.Agent({keepAlive:r}):this.httpAgent=new o.Agent({keepAlive:r}))};a.prototype._prepareRequest=function(){var t;if("undefined"!=typeof XMLHttpRequest)t=new XMLHttpRequest;else{t=new i;var e={httpsAgent:this.httpsAgent,httpAgent:this.httpAgent,baseUrl:this.baseUrl};this.agent&&(e.httpsAgent=this.agent.https,e.httpAgent=this.agent.http,e.baseUrl=this.agent.baseUrl),t.nodejsSet(e)}return t.open("POST",this.host,!0),t.setRequestHeader("Content-Type","application/json"),t.timeout=this.timeout,t.withCredentials=this.withCredentials,this.headers&&this.headers.forEach((function(e){t.setRequestHeader(e.name,e.value)})),t},a.prototype.send=function(t,e){var r=this,i=this._prepareRequest();i.onreadystatechange=function(){if(4===i.readyState&&1!==i.timeout){var t=i.responseText,o=null;try{t=JSON.parse(t)}catch(t){o=n.InvalidResponse(i.responseText)}r.connected=!0,e(o,t)}},i.ontimeout=function(){r.connected=!1,e(n.ConnectionTimeout(this.timeout))};try{i.send(JSON.stringify(t))}catch(t){this.connected=!1,e(n.InvalidConnection(this.host))}},a.prototype.disconnect=function(){},a.prototype.supportsSubscriptions=function(){return!1},t.exports=a},73097:(t,e,r)=>{"use strict";var n=r(84390).errors,i=r(43455),o=function(t,e){var r=this;this.responseCallbacks={},this.notificationCallbacks=[],this.path=t,this.connected=!1,this.connection=e.connect({path:this.path}),this.addDefaultEvents();var n=function(t){var e=null;Array.isArray(t)?t.forEach((function(t){r.responseCallbacks[t.id]&&(e=t.id)})):e=t.id,e||-1===t.method.indexOf("_subscription")?r.responseCallbacks[e]&&(r.responseCallbacks[e](null,t),delete r.responseCallbacks[e]):r.notificationCallbacks.forEach((function(e){"function"==typeof e&&e(t)}))};"Socket"===e.constructor.name?i(this.connection).done(n):this.connection.on("data",(function(t){r._parseResponse(t.toString()).forEach(n)}))};o.prototype.addDefaultEvents=function(){var t=this;this.connection.on("connect",(function(){t.connected=!0})),this.connection.on("close",(function(){t.connected=!1})),this.connection.on("error",(function(){t._timeout()})),this.connection.on("end",(function(){t._timeout()})),this.connection.on("timeout",(function(){t._timeout()}))},o.prototype._parseResponse=function(t){var e=this,r=[];return t.replace(/\}[\n\r]?\{/g,"}|--|{").replace(/\}\][\n\r]?\[\{/g,"}]|--|[{").replace(/\}[\n\r]?\[\{/g,"}|--|[{").replace(/\}\][\n\r]?\{/g,"}]|--|{").split("|--|").forEach((function(t){e.lastChunk&&(t=e.lastChunk+t);var i=null;try{i=JSON.parse(t)}catch(r){return e.lastChunk=t,clearTimeout(e.lastChunkTimeout),void(e.lastChunkTimeout=setTimeout((function(){throw e._timeout(),n.InvalidResponse(t)}),15e3))}clearTimeout(e.lastChunkTimeout),e.lastChunk=null,i&&r.push(i)})),r},o.prototype._addResponseCallback=function(t,e){var r=t.id||t[0].id,n=t.method||t[0].method;this.responseCallbacks[r]=e,this.responseCallbacks[r].method=n},o.prototype._timeout=function(){for(var t in this.responseCallbacks)this.responseCallbacks.hasOwnProperty(t)&&(this.responseCallbacks[t](n.InvalidConnection("on IPC")),delete this.responseCallbacks[t])},o.prototype.reconnect=function(){this.connection.connect({path:this.path})},o.prototype.send=function(t,e){this.connection.writable||this.connection.connect({path:this.path}),this.connection.write(JSON.stringify(t)),this._addResponseCallback(t,e)},o.prototype.on=function(t,e){if("function"!=typeof e)throw new Error("The second parameter callback must be a function.");switch(t){case"data":this.notificationCallbacks.push(e);break;default:this.connection.on(t,e)}},o.prototype.once=function(t,e){if("function"!=typeof e)throw new Error("The second parameter callback must be a function.");this.connection.once(t,e)},o.prototype.removeListener=function(t,e){var r=this;switch(t){case"data":this.notificationCallbacks.forEach((function(t,n){t===e&&r.notificationCallbacks.splice(n,1)}));break;default:this.connection.removeListener(t,e)}},o.prototype.removeAllListeners=function(t){switch(t){case"data":this.notificationCallbacks=[];break;default:this.connection.removeAllListeners(t)}},o.prototype.reset=function(){this._timeout(),this.notificationCallbacks=[],this.connection.removeAllListeners("error"),this.connection.removeAllListeners("end"),this.connection.removeAllListeners("timeout"),this.addDefaultEvents()},o.prototype.supportsSubscriptions=function(){return!0},t.exports=o},91057:(t,e,r)=>{var n="[object process]"===Object.prototype.toString.call("undefined"!=typeof process?process:0),i="undefined"!=typeof navigator&&"ReactNative"===navigator.product,o=null,s=null;if(n||i){o=function(t){return Buffer.from(t).toString("base64")};var a=r(8575);if(a.URL){var u=a.URL;s=function(t){return new u(t)}}else s=r(8575).parse}else o=btoa.bind(window),s=function(t){return new URL(t)};t.exports={parseURL:s,btoa:o}},69556:(t,e,r)=>{"use strict";var n=r(82821),i=r(91057),o=r(84390).errors,s=r(45840).w3cwebsocket,a=function(t,e){n.call(this),e=e||{},this.url=t,this._customTimeout=e.timeout||15e3,this.headers=e.headers||{},this.protocol=e.protocol||void 0,this.reconnectOptions=Object.assign({auto:!1,delay:5e3,maxAttempts:!1,onTimeout:!1},e.reconnect),this.clientConfig=e.clientConfig||void 0,this.requestOptions=e.requestOptions||void 0,this.DATA="data",this.CLOSE="close",this.ERROR="error",this.CONNECT="connect",this.RECONNECT="reconnect",this.connection=null,this.requestQueue=new Map,this.responseQueue=new Map,this.reconnectAttempts=0,this.reconnecting=!1;var r=i.parseURL(t);r.username&&r.password&&(this.headers.authorization="Basic "+i.btoa(r.username+":"+r.password)),r.auth&&(this.headers.authorization="Basic "+i.btoa(r.auth)),Object.defineProperty(this,"connected",{get:function(){return this.connection&&this.connection.readyState===this.connection.OPEN},enumerable:!0}),this.connect()};(a.prototype=Object.create(n.prototype)).constructor=a,a.prototype.connect=function(){this.connection=new s(this.url,this.protocol,void 0,this.headers,this.requestOptions,this.clientConfig),this._addSocketListeners()},a.prototype._onMessage=function(t){var e=this;this._parseResponse("string"==typeof t.data?t.data:"").forEach((function(t){if(t.method&&-1!==t.method.indexOf("_subscription"))e.emit(e.DATA,t);else{var r=t.id;Array.isArray(t)&&(r=t[0].id),e.responseQueue.has(r)&&(void 0!==e.responseQueue.get(r).callback&&e.responseQueue.get(r).callback(!1,t),e.responseQueue.delete(r))}}))},a.prototype._onConnect=function(){if(this.emit(this.CONNECT),this.reconnectAttempts=0,this.reconnecting=!1,this.requestQueue.size>0){var t=this;this.requestQueue.forEach((function(e,r){t.send(e.payload,e.callback),t.requestQueue.delete(r)}))}},a.prototype._onClose=function(t){var e=this;!this.reconnectOptions.auto||[1e3,1001].includes(t.code)&&!1!==t.wasClean?(this.emit(this.CLOSE,t),this.requestQueue.size>0&&this.requestQueue.forEach((function(r,n){r.callback(o.ConnectionNotOpenError(t)),e.requestQueue.delete(n)})),this.responseQueue.size>0&&this.responseQueue.forEach((function(r,n){r.callback(o.InvalidConnection("on WS",t)),e.responseQueue.delete(n)})),this._removeSocketListeners(),this.removeAllListeners()):this.reconnect()},a.prototype._addSocketListeners=function(){this.connection.addEventListener("message",this._onMessage.bind(this)),this.connection.addEventListener("open",this._onConnect.bind(this)),this.connection.addEventListener("close",this._onClose.bind(this))},a.prototype._removeSocketListeners=function(){this.connection.removeEventListener("message",this._onMessage),this.connection.removeEventListener("open",this._onConnect),this.connection.removeEventListener("close",this._onClose)},a.prototype._parseResponse=function(t){var e=this,r=[];return t.replace(/\}[\n\r]?\{/g,"}|--|{").replace(/\}\][\n\r]?\[\{/g,"}]|--|[{").replace(/\}[\n\r]?\[\{/g,"}|--|[{").replace(/\}\][\n\r]?\{/g,"}]|--|{").split("|--|").forEach((function(t){e.lastChunk&&(t=e.lastChunk+t);var n=null;try{n=JSON.parse(t)}catch(r){return e.lastChunk=t,clearTimeout(e.lastChunkTimeout),void(e.lastChunkTimeout=setTimeout((function(){e.reconnectOptions.auto&&e.reconnectOptions.onTimeout?e.reconnect():(e.emit(e.ERROR,o.ConnectionTimeout(e._customTimeout)),e.requestQueue.size>0&&e.requestQueue.forEach((function(t,r){t.callback(o.ConnectionTimeout(e._customTimeout)),e.requestQueue.delete(r)})))}),e._customTimeout))}clearTimeout(e.lastChunkTimeout),e.lastChunk=null,n&&r.push(n)})),r},a.prototype.send=function(t,e){var r=t.id,n={payload:t,callback:e};if(Array.isArray(t)&&(r=t[0].id),this.connection.readyState===this.connection.CONNECTING||this.reconnecting)this.requestQueue.set(r,n);else{if(this.connection.readyState!==this.connection.OPEN)return this.requestQueue.delete(r),this.emit(this.ERROR,o.ConnectionNotOpenError()),void n.callback(o.ConnectionNotOpenError());this.responseQueue.set(r,n),this.requestQueue.delete(r);try{this.connection.send(JSON.stringify(n.payload))}catch(t){n.callback(t),this.responseQueue.delete(r)}}},a.prototype.reset=function(){this.responseQueue.clear(),this.requestQueue.clear(),this.removeAllListeners(),this._removeSocketListeners(),this._addSocketListeners()},a.prototype.disconnect=function(t,e){this._removeSocketListeners(),this.connection.close(t||1e3,e)},a.prototype.supportsSubscriptions=function(){return!0},a.prototype.reconnect=function(){var t=this;this.reconnecting=!0,this.responseQueue.size>0&&this.responseQueue.forEach((function(e,r){e.callback(o.PendingRequestsOnReconnectingError()),t.responseQueue.delete(r)})),!this.reconnectOptions.maxAttempts||this.reconnectAttempts<this.reconnectOptions.maxAttempts?setTimeout((function(){t.reconnectAttempts++,t._removeSocketListeners(),t.emit(t.RECONNECT,t.reconnectAttempts),t.connect()}),this.reconnectOptions.delay):(this.emit(this.ERROR,o.MaxAttemptsReachedOnReconnectingError()),this.reconnecting=!1,this.requestQueue.size>0&&this.requestQueue.forEach((function(e,r){e.callback(o.MaxAttemptsReachedOnReconnectingError()),t.requestQueue.delete(r)})))},t.exports=a},82821:t=>{"use strict";var e=Object.prototype.hasOwnProperty,r="~";function n(){}function i(t,e,r){this.fn=t,this.context=e,this.once=r||!1}function o(t,e,n,o,s){if("function"!=typeof n)throw new TypeError("The listener must be a function");var a=new i(n,o||t,s),u=r?r+e:e;return t._events[u]?t._events[u].fn?t._events[u]=[t._events[u],a]:t._events[u].push(a):(t._events[u]=a,t._eventsCount++),t}function s(t,e){0==--t._eventsCount?t._events=new n:delete t._events[e]}function a(){this._events=new n,this._eventsCount=0}Object.create&&(n.prototype=Object.create(null),(new n).__proto__||(r=!1)),a.prototype.eventNames=function(){var t,n,i=[];if(0===this._eventsCount)return i;for(n in t=this._events)e.call(t,n)&&i.push(r?n.slice(1):n);return Object.getOwnPropertySymbols?i.concat(Object.getOwnPropertySymbols(t)):i},a.prototype.listeners=function(t){var e=r?r+t:t,n=this._events[e];if(!n)return[];if(n.fn)return[n.fn];for(var i=0,o=n.length,s=new Array(o);i<o;i++)s[i]=n[i].fn;return s},a.prototype.listenerCount=function(t){var e=r?r+t:t,n=this._events[e];return n?n.fn?1:n.length:0},a.prototype.emit=function(t,e,n,i,o,s){var a=r?r+t:t;if(!this._events[a])return!1;var u,c,h=this._events[a],l=arguments.length;if(h.fn){switch(h.once&&this.removeListener(t,h.fn,void 0,!0),l){case 1:return h.fn.call(h.context),!0;case 2:return h.fn.call(h.context,e),!0;case 3:return h.fn.call(h.context,e,n),!0;case 4:return h.fn.call(h.context,e,n,i),!0;case 5:return h.fn.call(h.context,e,n,i,o),!0;case 6:return h.fn.call(h.context,e,n,i,o,s),!0}for(c=1,u=new Array(l-1);c<l;c++)u[c-1]=arguments[c];h.fn.apply(h.context,u)}else{var f,d=h.length;for(c=0;c<d;c++)switch(h[c].once&&this.removeListener(t,h[c].fn,void 0,!0),l){case 1:h[c].fn.call(h[c].context);break;case 2:h[c].fn.call(h[c].context,e);break;case 3:h[c].fn.call(h[c].context,e,n);break;case 4:h[c].fn.call(h[c].context,e,n,i);break;default:if(!u)for(f=1,u=new Array(l-1);f<l;f++)u[f-1]=arguments[f];h[c].fn.apply(h[c].context,u)}}return!0},a.prototype.on=function(t,e,r){return o(this,t,e,r,!1)},a.prototype.once=function(t,e,r){return o(this,t,e,r,!0)},a.prototype.removeListener=function(t,e,n,i){var o=r?r+t:t;if(!this._events[o])return this;if(!e)return s(this,o),this;var a=this._events[o];if(a.fn)a.fn!==e||i&&!a.once||n&&a.context!==n||s(this,o);else{for(var u=0,c=[],h=a.length;u<h;u++)(a[u].fn!==e||i&&!a[u].once||n&&a[u].context!==n)&&c.push(a[u]);c.length?this._events[o]=1===c.length?c[0]:c:s(this,o)}return this},a.prototype.removeAllListeners=function(t){var e;return t?(e=r?r+t:t,this._events[e]&&s(this,e)):(this._events=new n,this._eventsCount=0),this},a.prototype.off=a.prototype.removeListener,a.prototype.addListener=a.prototype.on,a.prefixed=r,a.EventEmitter=a,t.exports=a},18269:(t,e,r)=>{var n=r(94278),i=r(90329),o=r(28668),s=r(61798),a=r(16383),u=function(t,e){var r=[];return e.forEach((function(e){if("object"==typeof e.components){if("tuple"!==e.type.substring(0,5))throw new Error("components found but type is not tuple; report on GitHub");var n="",i=e.type.indexOf("[");i>=0&&(n=e.type.substring(i));var o=u(t,e.components);Array.isArray(o)&&t?r.push("tuple("+o.join(",")+")"+n):t?r.push("("+o+")"):r.push("("+o.join(",")+")"+n)}else r.push(e.type)})),r},c=function(t){if(!i.isHexStrict(t))throw new Error("The parameter must be a valid HEX string.");var e="",r=0,n=t.length;for("0x"===t.substring(0,2)&&(r=2);r<n;r+=2){var o=parseInt(t.substr(r,2),16);e+=String.fromCharCode(o)}return e},h=function(t){if(!t)return"0x00";for(var e="",r=0;r<t.length;r++){var n=t.charCodeAt(r).toString(16);e+=n.length<2?"0"+n:n}return"0x"+e},l=function(t){if(t=t?t.toLowerCase():"ether",!n.unitMap[t])throw new Error('This unit "'+t+"\" doesn't exist, please use the one of the following units"+JSON.stringify(n.unitMap,null,2));return t};t.exports={_fireError:function(t,e,r,n,i){return!t||"object"!=typeof t||t instanceof Error||!t.data||((t.data&&"object"==typeof t.data||Array.isArray(t.data))&&(t.data=JSON.stringify(t.data,null,2)),t=t.message+"\n"+t.data),"string"==typeof t&&(t=new Error(t)),"function"==typeof n&&n(t,i),"function"==typeof r&&((e&&"function"==typeof e.listeners&&e.listeners("error").length||"function"==typeof n)&&e.catch((function(){})),setTimeout((function(){r(t)}),1)),e&&"function"==typeof e.emit&&setTimeout((function(){e.emit("error",t,i),e.removeAllListeners()}),1),e},_jsonInterfaceMethodToString:function(t){return t&&"object"==typeof t&&t.name&&-1!==t.name.indexOf("(")?t.name:t.name+"("+u(!1,t.inputs).join(",")+")"},_flattenTypes:u,randomHex:function(t){return"0x"+s(t).toString("hex")},BN:i.BN,isBN:i.isBN,isBigNumber:i.isBigNumber,isHex:i.isHex,isHexStrict:i.isHexStrict,sha3:i.sha3,sha3Raw:i.sha3Raw,keccak256:i.sha3,soliditySha3:o.soliditySha3,soliditySha3Raw:o.soliditySha3Raw,encodePacked:o.encodePacked,isAddress:i.isAddress,checkAddressChecksum:i.checkAddressChecksum,toChecksumAddress:function(t){if(void 0===t)return"";if(!/^(0x)?[0-9a-f]{40}$/i.test(t))throw new Error('Given address "'+t+'" is not a valid Ethereum address.');t=t.toLowerCase().replace(/^0x/i,"");for(var e=i.sha3(t).replace(/^0x/i,""),r="0x",n=0;n<t.length;n++)parseInt(e[n],16)>7?r+=t[n].toUpperCase():r+=t[n];return r},toHex:i.toHex,toBN:i.toBN,bytesToHex:i.bytesToHex,hexToBytes:i.hexToBytes,hexToNumberString:i.hexToNumberString,hexToNumber:i.hexToNumber,toDecimal:i.hexToNumber,numberToHex:i.numberToHex,fromDecimal:i.numberToHex,hexToUtf8:i.hexToUtf8,hexToString:i.hexToUtf8,toUtf8:i.hexToUtf8,stripHexPrefix:i.stripHexPrefix,utf8ToHex:i.utf8ToHex,stringToHex:i.utf8ToHex,fromUtf8:i.utf8ToHex,hexToAscii:c,toAscii:c,asciiToHex:h,fromAscii:h,unitMap:n.unitMap,toWei:function(t,e){if(e=l(e),!i.isBN(t)&&"string"!=typeof t)throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");return i.isBN(t)?n.toWei(t,e):n.toWei(t,e).toString(10)},fromWei:function(t,e){if(e=l(e),!i.isBN(t)&&"string"!=typeof t)throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");return i.isBN(t)?n.fromWei(t,e):n.fromWei(t,e).toString(10)},padLeft:i.leftPad,leftPad:i.leftPad,padRight:i.rightPad,rightPad:i.rightPad,toTwosComplement:i.toTwosComplement,isBloom:i.isBloom,isUserEthereumAddressInBloom:i.isUserEthereumAddressInBloom,isContractAddressInBloom:i.isContractAddressInBloom,isTopic:i.isTopic,isTopicInBloom:i.isTopicInBloom,isInBloom:i.isInBloom,compareBlockNumbers:function(t,e){if(t==e)return 0;if("genesis"!=t&&"earliest"!=t&&0!=t||"genesis"!=e&&"earliest"!=e&&0!=e){if("genesis"==t||"earliest"==t)return-1;if("genesis"==e||"earliest"==e)return 1;if("latest"==t)return"pending"==e?-1:1;if("latest"===e)return"pending"==t?1:-1;if("pending"==t)return 1;if("pending"==e)return-1;{let r=new a(t),n=new a(e);return r.lt(n)?-1:r.eq(n)?0:1}}return 0},toNumber:i.toNumber}},28668:(t,e,r)=>{var n=r(16383),i=r(90329),o=function(t){var e=typeof t;if("string"===e)return i.isHexStrict(t)?new n(t.replace(/0x/i,""),16):new n(t,10);if("number"===e)return new n(t);if(i.isBigNumber(t))return new n(t.toString(10));if(i.isBN(t))return t;throw new Error(t+" is not a number")},s=function(t,e,r){var s,a,u;if("bytes"===(t=(u=t).startsWith("int[")?"int256"+u.slice(3):"int"===u?"int256":u.startsWith("uint[")?"uint256"+u.slice(4):"uint"===u?"uint256":u.startsWith("fixed[")?"fixed128x128"+u.slice(5):"fixed"===u?"fixed128x128":u.startsWith("ufixed[")?"ufixed128x128"+u.slice(6):"ufixed"===u?"ufixed128x128":u)){if(e.replace(/^0x/i,"").length%2!=0)throw new Error("Invalid bytes characters "+e.length);return e}if("string"===t)return i.utf8ToHex(e);if("bool"===t)return e?"01":"00";if(t.startsWith("address")){if(s=r?64:40,!i.isAddress(e))throw new Error(e+" is not a valid address, or the checksum is invalid.");return i.leftPad(e.toLowerCase(),s)}if(s=function(t){var e=/^\D+(\d+).*$/.exec(t);return e?parseInt(e[1],10):null}(t),t.startsWith("bytes")){if(!s)throw new Error("bytes[] not yet supported in solidity");if(r&&(s=32),s<1||s>32||s<e.replace(/^0x/i,"").length/2)throw new Error("Invalid bytes"+s+" for "+e);return i.rightPad(e,2*s)}if(t.startsWith("uint")){if(s%8||s<8||s>256)throw new Error("Invalid uint"+s+" size");if((a=o(e)).bitLength()>s)throw new Error("Supplied uint exceeds width: "+s+" vs "+a.bitLength());if(a.lt(new n(0)))throw new Error("Supplied uint "+a.toString()+" is negative");return s?i.leftPad(a.toString("hex"),s/8*2):a}if(t.startsWith("int")){if(s%8||s<8||s>256)throw new Error("Invalid int"+s+" size");if((a=o(e)).bitLength()>s)throw new Error("Supplied int exceeds width: "+s+" vs "+a.bitLength());return a.lt(new n(0))?a.toTwos(s).toString("hex"):s?i.leftPad(a.toString("hex"),s/8*2):a}throw new Error("Unsupported or invalid type: "+t)},a=function(t){if(Array.isArray(t))throw new Error("Autodetection of array types is not supported.");var e,r,o="";if(t&&"object"==typeof t&&(t.hasOwnProperty("v")||t.hasOwnProperty("t")||t.hasOwnProperty("value")||t.hasOwnProperty("type"))?(e=t.hasOwnProperty("t")?t.t:t.type,o=t.hasOwnProperty("v")?t.v:t.value):(e=i.toHex(t,!0),o=i.toHex(t),e.startsWith("int")||e.startsWith("uint")||(e="bytes")),!e.startsWith("int")&&!e.startsWith("uint")||"string"!=typeof o||/^(-)?0x/i.test(o)||(o=new n(o)),Array.isArray(o)){if((r=function(t){var e=/^\D+\d*\[(\d+)\]$/.exec(t);return e?parseInt(e[1],10):null}(e))&&o.length!==r)throw new Error(e+" is not matching the given array "+JSON.stringify(o));r=o.length}return Array.isArray(o)?o.map((function(t){return s(e,t,r).toString("hex").replace("0x","")})).join(""):s(e,o,r).toString("hex").replace("0x","")};t.exports={soliditySha3:function(){var t=Array.prototype.slice.call(arguments),e=t.map(a);return i.sha3("0x"+e.join(""))},soliditySha3Raw:function(){return i.sha3Raw("0x"+Array.prototype.slice.call(arguments).map(a).join(""))},encodePacked:function(){var t=Array.prototype.slice.call(arguments),e=t.map(a);return"0x"+e.join("").toLowerCase()}}},90329:(t,e,r)=>{var n=r(16383),i=r(83206),o=r(57458),s=r(22751),a=r(46877),u=function(t){return n.isBN(t)},c=function(t){return t&&t.constructor&&"BigNumber"===t.constructor.name},h=function(t){try{return i.apply(null,arguments)}catch(e){throw new Error(e+' Given value: "'+t+'"')}},l=function(t){return!!/^(0x)?[0-9a-f]{40}$/i.test(t)&&(!(!/^(0x|0X)?[0-9a-f]{40}$/.test(t)&&!/^(0x|0X)?[0-9A-F]{40}$/.test(t))||f(t))},f=function(t){t=t.replace(/^0x/i,"");for(var e=w(t.toLowerCase()).replace(/^0x/i,""),r=0;r<40;r++)if(parseInt(e[r],16)>7&&t[r].toUpperCase()!==t[r]||parseInt(e[r],16)<=7&&t[r].toLowerCase()!==t[r])return!1;return!0},d=function(t){var e="";t=(t=(t=(t=(t=o.encode(t)).replace(/^(?:\u0000)*/,"")).split("").reverse().join("")).replace(/^(?:\u0000)*/,"")).split("").reverse().join("");for(var r=0;r<t.length;r++){var n=t.charCodeAt(r).toString(16);e+=n.length<2?"0"+n:n}return"0x"+e},p=function(t){if(!t)return t;if("string"==typeof t&&!v(t))throw new Error('Given value "'+t+'" is not a valid hex string.');return h(t).toNumber()},m=function(t){if(null==t)return t;if(!isFinite(t)&&!v(t))throw new Error('Given input "'+t+'" is not a number.');var e=h(t),r=e.toString(16);return e.lt(new n(0))?"-0x"+r.substr(1):"0x"+r},g=function(t,e){if(l(t))return e?"address":"0x"+t.toLowerCase().replace(/^0x/i,"");if("boolean"==typeof t)return e?"bool":t?"0x01":"0x00";if(Buffer.isBuffer(t))return"0x"+t.toString("hex");if("object"==typeof t&&t&&!c(t)&&!u(t))return e?"string":d(JSON.stringify(t));if("string"==typeof t){if(0===t.indexOf("-0x")||0===t.indexOf("-0X"))return e?"int256":m(t);if(0===t.indexOf("0x")||0===t.indexOf("0X"))return e?"bytes":t;if(!isFinite(t))return e?"string":d(t)}return e?t<0?"int256":"uint256":m(t)},v=function(t){return("string"==typeof t||"number"==typeof t)&&/^(-)?0x[0-9a-f]*$/i.test(t)},y=function(t){return("string"==typeof t||"number"==typeof t)&&/^(-0x|0x)?[0-9a-f]*$/i.test(t)},b="0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",w=function(t){u(t)&&(t=t.toString()),v(t)&&/^0x/i.test(t.toString())?t=s.toBuffer(t):"string"==typeof t&&(t=Buffer.from(t,"utf-8"));var e=s.bufferToHex(s.keccak256(t));return e===b?null:e};w._Hash=s.keccak256,t.exports={BN:n,isBN:u,isBigNumber:c,toBN:h,isAddress:l,isBloom:function(t){return a.isBloom(t)},isUserEthereumAddressInBloom:function(t,e){return a.isUserEthereumAddressInBloom(t,e)},isContractAddressInBloom:function(t,e){return a.isContractAddressInBloom(t,e)},isTopic:function(t){return a.isTopic(t)},isTopicInBloom:function(t,e){return a.isTopicInBloom(t,e)},isInBloom:function(t,e){return a.isInBloom(t,e)},checkAddressChecksum:f,utf8ToHex:d,hexToUtf8:function(t){if(!v(t))throw new Error('The parameter "'+t+'" must be a valid HEX string.');for(var e="",r=0,n=(t=(t=(t=(t=(t=t.replace(/^0x/i,"")).replace(/^(?:00)*/,"")).split("").reverse().join("")).replace(/^(?:00)*/,"")).split("").reverse().join("")).length,i=0;i<n;i+=2)r=parseInt(t.substr(i,2),16),e+=String.fromCharCode(r);return o.decode(e)},hexToNumber:p,hexToNumberString:function(t){if(!t)return t;if("string"==typeof t&&!v(t))throw new Error('Given value "'+t+'" is not a valid hex string.');return h(t).toString(10)},numberToHex:m,toHex:g,hexToBytes:function(t){if(t=t.toString(16),!v(t))throw new Error('Given value "'+t+'" is not a valid hex string.');t=t.replace(/^0x/i,"");for(var e=[],r=0;r<t.length;r+=2)e.push(parseInt(t.substr(r,2),16));return e},bytesToHex:function(t){for(var e=[],r=0;r<t.length;r++)e.push((t[r]>>>4).toString(16)),e.push((15&t[r]).toString(16));return"0x"+e.join("")},isHex:y,isHexStrict:v,stripHexPrefix:function(t){return 0!==t&&y(t)?t.replace(/^(-)?0x/i,"$1"):t},leftPad:function(t,e,r){var n=/^0x/i.test(t)||"number"==typeof t,i=e-(t=t.toString(16).replace(/^0x/i,"")).length+1>=0?e-t.length+1:0;return(n?"0x":"")+new Array(i).join(r||"0")+t},rightPad:function(t,e,r){var n=/^0x/i.test(t)||"number"==typeof t,i=e-(t=t.toString(16).replace(/^0x/i,"")).length+1>=0?e-t.length+1:0;return(n?"0x":"")+t+new Array(i).join(r||"0")},toTwosComplement:function(t){return"0x"+h(t).toTwos(256).toString(16,64)},sha3:w,sha3Raw:function(t){return null===(t=w(t))?b:t},toNumber:function(t){return"number"==typeof t?t:p(g(t))}}},16383:function(t,e,r){!function(t,e){"use strict";function n(t,e){if(!t)throw new Error(e||"Assertion failed")}function i(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}function o(t,e,r){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(r=e,e=10),this._init(t||0,e||10,r||"be"))}var s;"object"==typeof t?t.exports=o:e.BN=o,o.BN=o,o.wordSize=26;try{s="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:r(87500).Buffer}catch(t){}function a(t,e){var r=t.charCodeAt(e);return r>=65&&r<=70?r-55:r>=97&&r<=102?r-87:r-48&15}function u(t,e,r){var n=a(t,r);return r-1>=e&&(n|=a(t,r-1)<<4),n}function c(t,e,r,n){for(var i=0,o=Math.min(t.length,r),s=e;s<o;s++){var a=t.charCodeAt(s)-48;i*=n,i+=a>=49?a-49+10:a>=17?a-17+10:a}return i}o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,e){return t.cmp(e)>0?t:e},o.min=function(t,e){return t.cmp(e)<0?t:e},o.prototype._init=function(t,e,r){if("number"==typeof t)return this._initNumber(t,e,r);if("object"==typeof t)return this._initArray(t,e,r);"hex"===e&&(e=16),n(e===(0|e)&&e>=2&&e<=36);var i=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&(i++,this.negative=1),i<t.length&&(16===e?this._parseHex(t,i,r):(this._parseBase(t,e,i),"le"===r&&this._initArray(this.toArray(),e,r)))},o.prototype._initNumber=function(t,e,r){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(n(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===r&&this._initArray(this.toArray(),e,r)},o.prototype._initArray=function(t,e,r){if(n("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var o,s,a=0;if("be"===r)for(i=t.length-1,o=0;i>=0;i-=3)s=t[i]|t[i-1]<<8|t[i-2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);else if("le"===r)for(i=0,o=0;i<t.length;i+=3)s=t[i]|t[i+1]<<8|t[i+2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);return this.strip()},o.prototype._parseHex=function(t,e,r){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var i,o=0,s=0;if("be"===r)for(n=t.length-1;n>=e;n-=2)i=u(t,e,n)<<o,this.words[s]|=67108863&i,o>=18?(o-=18,s+=1,this.words[s]|=i>>>26):o+=8;else for(n=(t.length-e)%2==0?e+1:e;n<t.length;n+=2)i=u(t,e,n)<<o,this.words[s]|=67108863&i,o>=18?(o-=18,s+=1,this.words[s]|=i>>>26):o+=8;this.strip()},o.prototype._parseBase=function(t,e,r){this.words=[0],this.length=1;for(var n=0,i=1;i<=67108863;i*=e)n++;n--,i=i/e|0;for(var o=t.length-r,s=o%n,a=Math.min(o,o-s)+r,u=0,h=r;h<a;h+=n)u=c(t,h,h+n,e),this.imuln(i),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==s){var l=1;for(u=c(t,h,t.length,e),h=0;h<s;h++)l*=e;this.imuln(l),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}this.strip()},o.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},o.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var h=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],l=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],f=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function d(t,e,r){r.negative=e.negative^t.negative;var n=t.length+e.length|0;r.length=n,n=n-1|0;var i=0|t.words[0],o=0|e.words[0],s=i*o,a=67108863&s,u=s/67108864|0;r.words[0]=a;for(var c=1;c<n;c++){for(var h=u>>>26,l=67108863&u,f=Math.min(c,e.length-1),d=Math.max(0,c-t.length+1);d<=f;d++){var p=c-d|0;h+=(s=(i=0|t.words[p])*(o=0|e.words[d])+l)/67108864|0,l=67108863&s}r.words[c]=0|l,u=0|h}return 0!==u?r.words[c]=0|u:r.length--,r.strip()}o.prototype.toString=function(t,e){var r;if(e=0|e||1,16===(t=t||10)||"hex"===t){r="";for(var i=0,o=0,s=0;s<this.length;s++){var a=this.words[s],u=(16777215&(a<<i|o)).toString(16);r=0!=(o=a>>>24-i&16777215)||s!==this.length-1?h[6-u.length]+u+r:u+r,(i+=2)>=26&&(i-=26,s--)}for(0!==o&&(r=o.toString(16)+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}if(t===(0|t)&&t>=2&&t<=36){var c=l[t],d=f[t];r="";var p=this.clone();for(p.negative=0;!p.isZero();){var m=p.modn(d).toString(t);r=(p=p.idivn(d)).isZero()?m+r:h[c-m.length]+m+r}for(this.isZero()&&(r="0"+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}n(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&n(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16)},o.prototype.toBuffer=function(t,e){return n(void 0!==s),this.toArrayLike(s,t,e)},o.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},o.prototype.toArrayLike=function(t,e,r){var i=this.byteLength(),o=r||Math.max(1,i);n(i<=o,"byte array longer than desired length"),n(o>0,"Requested array length <= 0"),this.strip();var s,a,u="le"===e,c=new t(o),h=this.clone();if(u){for(a=0;!h.isZero();a++)s=h.andln(255),h.iushrn(8),c[a]=s;for(;a<o;a++)c[a]=0}else{for(a=0;a<o-i;a++)c[a]=0;for(a=0;!h.isZero();a++)s=h.andln(255),h.iushrn(8),c[o-a-1]=s}return c},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var e=t,r=0;return e>=4096&&(r+=13,e>>>=13),e>=64&&(r+=7,e>>>=7),e>=8&&(r+=4,e>>>=4),e>=2&&(r+=2,e>>>=2),r+e},o.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,r=0;return 0==(8191&e)&&(r+=13,e>>>=13),0==(127&e)&&(r+=7,e>>>=7),0==(15&e)&&(r+=4,e>>>=4),0==(3&e)&&(r+=2,e>>>=2),0==(1&e)&&r++,r},o.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var r=this._zeroBits(this.words[e]);if(t+=r,26!==r)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},o.prototype.ior=function(t){return n(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var r=0;r<e.length;r++)this.words[r]=this.words[r]&t.words[r];return this.length=e.length,this.strip()},o.prototype.iand=function(t){return n(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var e,r;this.length>t.length?(e=this,r=t):(e=t,r=this);for(var n=0;n<r.length;n++)this.words[n]=e.words[n]^r.words[n];if(this!==e)for(;n<e.length;n++)this.words[n]=e.words[n];return this.length=e.length,this.strip()},o.prototype.ixor=function(t){return n(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){n("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),r=t%26;this._expand(e),r>0&&e--;for(var i=0;i<e;i++)this.words[i]=67108863&~this.words[i];return r>0&&(this.words[i]=~this.words[i]&67108863>>26-r),this.strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,e){n("number"==typeof t&&t>=0);var r=t/26|0,i=t%26;return this._expand(r+1),this.words[r]=e?this.words[r]|1<<i:this.words[r]&~(1<<i),this.strip()},o.prototype.iadd=function(t){var e,r,n;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(r=this,n=t):(r=t,n=this);for(var i=0,o=0;o<n.length;o++)e=(0|r.words[o])+(0|n.words[o])+i,this.words[o]=67108863&e,i=e>>>26;for(;0!==i&&o<r.length;o++)e=(0|r.words[o])+i,this.words[o]=67108863&e,i=e>>>26;if(this.length=r.length,0!==i)this.words[this.length]=i,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},o.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r,n,i=this.cmp(t);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(r=this,n=t):(r=t,n=this);for(var o=0,s=0;s<n.length;s++)o=(e=(0|r.words[s])-(0|n.words[s])+o)>>26,this.words[s]=67108863&e;for(;0!==o&&s<r.length;s++)o=(e=(0|r.words[s])+o)>>26,this.words[s]=67108863&e;if(0===o&&s<r.length&&r!==this)for(;s<r.length;s++)this.words[s]=r.words[s];return this.length=Math.max(this.length,s),r!==this&&(this.negative=1),this.strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var p=function(t,e,r){var n,i,o,s=t.words,a=e.words,u=r.words,c=0,h=0|s[0],l=8191&h,f=h>>>13,d=0|s[1],p=8191&d,m=d>>>13,g=0|s[2],v=8191&g,y=g>>>13,b=0|s[3],w=8191&b,M=b>>>13,_=0|s[4],x=8191&_,k=_>>>13,O=0|s[5],S=8191&O,A=O>>>13,E=0|s[6],j=8191&E,T=E>>>13,P=0|s[7],C=8191&P,I=P>>>13,B=0|s[8],N=8191&B,R=B>>>13,L=0|s[9],F=8191&L,D=L>>>13,q=0|a[0],U=8191&q,H=q>>>13,z=0|a[1],V=8191&z,W=z>>>13,$=0|a[2],G=8191&$,K=$>>>13,Z=0|a[3],J=8191&Z,Y=Z>>>13,X=0|a[4],Q=8191&X,tt=X>>>13,et=0|a[5],rt=8191&et,nt=et>>>13,it=0|a[6],ot=8191&it,st=it>>>13,at=0|a[7],ut=8191&at,ct=at>>>13,ht=0|a[8],lt=8191&ht,ft=ht>>>13,dt=0|a[9],pt=8191&dt,mt=dt>>>13;r.negative=t.negative^e.negative,r.length=19;var gt=(c+(n=Math.imul(l,U))|0)+((8191&(i=(i=Math.imul(l,H))+Math.imul(f,U)|0))<<13)|0;c=((o=Math.imul(f,H))+(i>>>13)|0)+(gt>>>26)|0,gt&=67108863,n=Math.imul(p,U),i=(i=Math.imul(p,H))+Math.imul(m,U)|0,o=Math.imul(m,H);var vt=(c+(n=n+Math.imul(l,V)|0)|0)+((8191&(i=(i=i+Math.imul(l,W)|0)+Math.imul(f,V)|0))<<13)|0;c=((o=o+Math.imul(f,W)|0)+(i>>>13)|0)+(vt>>>26)|0,vt&=67108863,n=Math.imul(v,U),i=(i=Math.imul(v,H))+Math.imul(y,U)|0,o=Math.imul(y,H),n=n+Math.imul(p,V)|0,i=(i=i+Math.imul(p,W)|0)+Math.imul(m,V)|0,o=o+Math.imul(m,W)|0;var yt=(c+(n=n+Math.imul(l,G)|0)|0)+((8191&(i=(i=i+Math.imul(l,K)|0)+Math.imul(f,G)|0))<<13)|0;c=((o=o+Math.imul(f,K)|0)+(i>>>13)|0)+(yt>>>26)|0,yt&=67108863,n=Math.imul(w,U),i=(i=Math.imul(w,H))+Math.imul(M,U)|0,o=Math.imul(M,H),n=n+Math.imul(v,V)|0,i=(i=i+Math.imul(v,W)|0)+Math.imul(y,V)|0,o=o+Math.imul(y,W)|0,n=n+Math.imul(p,G)|0,i=(i=i+Math.imul(p,K)|0)+Math.imul(m,G)|0,o=o+Math.imul(m,K)|0;var bt=(c+(n=n+Math.imul(l,J)|0)|0)+((8191&(i=(i=i+Math.imul(l,Y)|0)+Math.imul(f,J)|0))<<13)|0;c=((o=o+Math.imul(f,Y)|0)+(i>>>13)|0)+(bt>>>26)|0,bt&=67108863,n=Math.imul(x,U),i=(i=Math.imul(x,H))+Math.imul(k,U)|0,o=Math.imul(k,H),n=n+Math.imul(w,V)|0,i=(i=i+Math.imul(w,W)|0)+Math.imul(M,V)|0,o=o+Math.imul(M,W)|0,n=n+Math.imul(v,G)|0,i=(i=i+Math.imul(v,K)|0)+Math.imul(y,G)|0,o=o+Math.imul(y,K)|0,n=n+Math.imul(p,J)|0,i=(i=i+Math.imul(p,Y)|0)+Math.imul(m,J)|0,o=o+Math.imul(m,Y)|0;var wt=(c+(n=n+Math.imul(l,Q)|0)|0)+((8191&(i=(i=i+Math.imul(l,tt)|0)+Math.imul(f,Q)|0))<<13)|0;c=((o=o+Math.imul(f,tt)|0)+(i>>>13)|0)+(wt>>>26)|0,wt&=67108863,n=Math.imul(S,U),i=(i=Math.imul(S,H))+Math.imul(A,U)|0,o=Math.imul(A,H),n=n+Math.imul(x,V)|0,i=(i=i+Math.imul(x,W)|0)+Math.imul(k,V)|0,o=o+Math.imul(k,W)|0,n=n+Math.imul(w,G)|0,i=(i=i+Math.imul(w,K)|0)+Math.imul(M,G)|0,o=o+Math.imul(M,K)|0,n=n+Math.imul(v,J)|0,i=(i=i+Math.imul(v,Y)|0)+Math.imul(y,J)|0,o=o+Math.imul(y,Y)|0,n=n+Math.imul(p,Q)|0,i=(i=i+Math.imul(p,tt)|0)+Math.imul(m,Q)|0,o=o+Math.imul(m,tt)|0;var Mt=(c+(n=n+Math.imul(l,rt)|0)|0)+((8191&(i=(i=i+Math.imul(l,nt)|0)+Math.imul(f,rt)|0))<<13)|0;c=((o=o+Math.imul(f,nt)|0)+(i>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,n=Math.imul(j,U),i=(i=Math.imul(j,H))+Math.imul(T,U)|0,o=Math.imul(T,H),n=n+Math.imul(S,V)|0,i=(i=i+Math.imul(S,W)|0)+Math.imul(A,V)|0,o=o+Math.imul(A,W)|0,n=n+Math.imul(x,G)|0,i=(i=i+Math.imul(x,K)|0)+Math.imul(k,G)|0,o=o+Math.imul(k,K)|0,n=n+Math.imul(w,J)|0,i=(i=i+Math.imul(w,Y)|0)+Math.imul(M,J)|0,o=o+Math.imul(M,Y)|0,n=n+Math.imul(v,Q)|0,i=(i=i+Math.imul(v,tt)|0)+Math.imul(y,Q)|0,o=o+Math.imul(y,tt)|0,n=n+Math.imul(p,rt)|0,i=(i=i+Math.imul(p,nt)|0)+Math.imul(m,rt)|0,o=o+Math.imul(m,nt)|0;var _t=(c+(n=n+Math.imul(l,ot)|0)|0)+((8191&(i=(i=i+Math.imul(l,st)|0)+Math.imul(f,ot)|0))<<13)|0;c=((o=o+Math.imul(f,st)|0)+(i>>>13)|0)+(_t>>>26)|0,_t&=67108863,n=Math.imul(C,U),i=(i=Math.imul(C,H))+Math.imul(I,U)|0,o=Math.imul(I,H),n=n+Math.imul(j,V)|0,i=(i=i+Math.imul(j,W)|0)+Math.imul(T,V)|0,o=o+Math.imul(T,W)|0,n=n+Math.imul(S,G)|0,i=(i=i+Math.imul(S,K)|0)+Math.imul(A,G)|0,o=o+Math.imul(A,K)|0,n=n+Math.imul(x,J)|0,i=(i=i+Math.imul(x,Y)|0)+Math.imul(k,J)|0,o=o+Math.imul(k,Y)|0,n=n+Math.imul(w,Q)|0,i=(i=i+Math.imul(w,tt)|0)+Math.imul(M,Q)|0,o=o+Math.imul(M,tt)|0,n=n+Math.imul(v,rt)|0,i=(i=i+Math.imul(v,nt)|0)+Math.imul(y,rt)|0,o=o+Math.imul(y,nt)|0,n=n+Math.imul(p,ot)|0,i=(i=i+Math.imul(p,st)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,st)|0;var xt=(c+(n=n+Math.imul(l,ut)|0)|0)+((8191&(i=(i=i+Math.imul(l,ct)|0)+Math.imul(f,ut)|0))<<13)|0;c=((o=o+Math.imul(f,ct)|0)+(i>>>13)|0)+(xt>>>26)|0,xt&=67108863,n=Math.imul(N,U),i=(i=Math.imul(N,H))+Math.imul(R,U)|0,o=Math.imul(R,H),n=n+Math.imul(C,V)|0,i=(i=i+Math.imul(C,W)|0)+Math.imul(I,V)|0,o=o+Math.imul(I,W)|0,n=n+Math.imul(j,G)|0,i=(i=i+Math.imul(j,K)|0)+Math.imul(T,G)|0,o=o+Math.imul(T,K)|0,n=n+Math.imul(S,J)|0,i=(i=i+Math.imul(S,Y)|0)+Math.imul(A,J)|0,o=o+Math.imul(A,Y)|0,n=n+Math.imul(x,Q)|0,i=(i=i+Math.imul(x,tt)|0)+Math.imul(k,Q)|0,o=o+Math.imul(k,tt)|0,n=n+Math.imul(w,rt)|0,i=(i=i+Math.imul(w,nt)|0)+Math.imul(M,rt)|0,o=o+Math.imul(M,nt)|0,n=n+Math.imul(v,ot)|0,i=(i=i+Math.imul(v,st)|0)+Math.imul(y,ot)|0,o=o+Math.imul(y,st)|0,n=n+Math.imul(p,ut)|0,i=(i=i+Math.imul(p,ct)|0)+Math.imul(m,ut)|0,o=o+Math.imul(m,ct)|0;var kt=(c+(n=n+Math.imul(l,lt)|0)|0)+((8191&(i=(i=i+Math.imul(l,ft)|0)+Math.imul(f,lt)|0))<<13)|0;c=((o=o+Math.imul(f,ft)|0)+(i>>>13)|0)+(kt>>>26)|0,kt&=67108863,n=Math.imul(F,U),i=(i=Math.imul(F,H))+Math.imul(D,U)|0,o=Math.imul(D,H),n=n+Math.imul(N,V)|0,i=(i=i+Math.imul(N,W)|0)+Math.imul(R,V)|0,o=o+Math.imul(R,W)|0,n=n+Math.imul(C,G)|0,i=(i=i+Math.imul(C,K)|0)+Math.imul(I,G)|0,o=o+Math.imul(I,K)|0,n=n+Math.imul(j,J)|0,i=(i=i+Math.imul(j,Y)|0)+Math.imul(T,J)|0,o=o+Math.imul(T,Y)|0,n=n+Math.imul(S,Q)|0,i=(i=i+Math.imul(S,tt)|0)+Math.imul(A,Q)|0,o=o+Math.imul(A,tt)|0,n=n+Math.imul(x,rt)|0,i=(i=i+Math.imul(x,nt)|0)+Math.imul(k,rt)|0,o=o+Math.imul(k,nt)|0,n=n+Math.imul(w,ot)|0,i=(i=i+Math.imul(w,st)|0)+Math.imul(M,ot)|0,o=o+Math.imul(M,st)|0,n=n+Math.imul(v,ut)|0,i=(i=i+Math.imul(v,ct)|0)+Math.imul(y,ut)|0,o=o+Math.imul(y,ct)|0,n=n+Math.imul(p,lt)|0,i=(i=i+Math.imul(p,ft)|0)+Math.imul(m,lt)|0,o=o+Math.imul(m,ft)|0;var Ot=(c+(n=n+Math.imul(l,pt)|0)|0)+((8191&(i=(i=i+Math.imul(l,mt)|0)+Math.imul(f,pt)|0))<<13)|0;c=((o=o+Math.imul(f,mt)|0)+(i>>>13)|0)+(Ot>>>26)|0,Ot&=67108863,n=Math.imul(F,V),i=(i=Math.imul(F,W))+Math.imul(D,V)|0,o=Math.imul(D,W),n=n+Math.imul(N,G)|0,i=(i=i+Math.imul(N,K)|0)+Math.imul(R,G)|0,o=o+Math.imul(R,K)|0,n=n+Math.imul(C,J)|0,i=(i=i+Math.imul(C,Y)|0)+Math.imul(I,J)|0,o=o+Math.imul(I,Y)|0,n=n+Math.imul(j,Q)|0,i=(i=i+Math.imul(j,tt)|0)+Math.imul(T,Q)|0,o=o+Math.imul(T,tt)|0,n=n+Math.imul(S,rt)|0,i=(i=i+Math.imul(S,nt)|0)+Math.imul(A,rt)|0,o=o+Math.imul(A,nt)|0,n=n+Math.imul(x,ot)|0,i=(i=i+Math.imul(x,st)|0)+Math.imul(k,ot)|0,o=o+Math.imul(k,st)|0,n=n+Math.imul(w,ut)|0,i=(i=i+Math.imul(w,ct)|0)+Math.imul(M,ut)|0,o=o+Math.imul(M,ct)|0,n=n+Math.imul(v,lt)|0,i=(i=i+Math.imul(v,ft)|0)+Math.imul(y,lt)|0,o=o+Math.imul(y,ft)|0;var St=(c+(n=n+Math.imul(p,pt)|0)|0)+((8191&(i=(i=i+Math.imul(p,mt)|0)+Math.imul(m,pt)|0))<<13)|0;c=((o=o+Math.imul(m,mt)|0)+(i>>>13)|0)+(St>>>26)|0,St&=67108863,n=Math.imul(F,G),i=(i=Math.imul(F,K))+Math.imul(D,G)|0,o=Math.imul(D,K),n=n+Math.imul(N,J)|0,i=(i=i+Math.imul(N,Y)|0)+Math.imul(R,J)|0,o=o+Math.imul(R,Y)|0,n=n+Math.imul(C,Q)|0,i=(i=i+Math.imul(C,tt)|0)+Math.imul(I,Q)|0,o=o+Math.imul(I,tt)|0,n=n+Math.imul(j,rt)|0,i=(i=i+Math.imul(j,nt)|0)+Math.imul(T,rt)|0,o=o+Math.imul(T,nt)|0,n=n+Math.imul(S,ot)|0,i=(i=i+Math.imul(S,st)|0)+Math.imul(A,ot)|0,o=o+Math.imul(A,st)|0,n=n+Math.imul(x,ut)|0,i=(i=i+Math.imul(x,ct)|0)+Math.imul(k,ut)|0,o=o+Math.imul(k,ct)|0,n=n+Math.imul(w,lt)|0,i=(i=i+Math.imul(w,ft)|0)+Math.imul(M,lt)|0,o=o+Math.imul(M,ft)|0;var At=(c+(n=n+Math.imul(v,pt)|0)|0)+((8191&(i=(i=i+Math.imul(v,mt)|0)+Math.imul(y,pt)|0))<<13)|0;c=((o=o+Math.imul(y,mt)|0)+(i>>>13)|0)+(At>>>26)|0,At&=67108863,n=Math.imul(F,J),i=(i=Math.imul(F,Y))+Math.imul(D,J)|0,o=Math.imul(D,Y),n=n+Math.imul(N,Q)|0,i=(i=i+Math.imul(N,tt)|0)+Math.imul(R,Q)|0,o=o+Math.imul(R,tt)|0,n=n+Math.imul(C,rt)|0,i=(i=i+Math.imul(C,nt)|0)+Math.imul(I,rt)|0,o=o+Math.imul(I,nt)|0,n=n+Math.imul(j,ot)|0,i=(i=i+Math.imul(j,st)|0)+Math.imul(T,ot)|0,o=o+Math.imul(T,st)|0,n=n+Math.imul(S,ut)|0,i=(i=i+Math.imul(S,ct)|0)+Math.imul(A,ut)|0,o=o+Math.imul(A,ct)|0,n=n+Math.imul(x,lt)|0,i=(i=i+Math.imul(x,ft)|0)+Math.imul(k,lt)|0,o=o+Math.imul(k,ft)|0;var Et=(c+(n=n+Math.imul(w,pt)|0)|0)+((8191&(i=(i=i+Math.imul(w,mt)|0)+Math.imul(M,pt)|0))<<13)|0;c=((o=o+Math.imul(M,mt)|0)+(i>>>13)|0)+(Et>>>26)|0,Et&=67108863,n=Math.imul(F,Q),i=(i=Math.imul(F,tt))+Math.imul(D,Q)|0,o=Math.imul(D,tt),n=n+Math.imul(N,rt)|0,i=(i=i+Math.imul(N,nt)|0)+Math.imul(R,rt)|0,o=o+Math.imul(R,nt)|0,n=n+Math.imul(C,ot)|0,i=(i=i+Math.imul(C,st)|0)+Math.imul(I,ot)|0,o=o+Math.imul(I,st)|0,n=n+Math.imul(j,ut)|0,i=(i=i+Math.imul(j,ct)|0)+Math.imul(T,ut)|0,o=o+Math.imul(T,ct)|0,n=n+Math.imul(S,lt)|0,i=(i=i+Math.imul(S,ft)|0)+Math.imul(A,lt)|0,o=o+Math.imul(A,ft)|0;var jt=(c+(n=n+Math.imul(x,pt)|0)|0)+((8191&(i=(i=i+Math.imul(x,mt)|0)+Math.imul(k,pt)|0))<<13)|0;c=((o=o+Math.imul(k,mt)|0)+(i>>>13)|0)+(jt>>>26)|0,jt&=67108863,n=Math.imul(F,rt),i=(i=Math.imul(F,nt))+Math.imul(D,rt)|0,o=Math.imul(D,nt),n=n+Math.imul(N,ot)|0,i=(i=i+Math.imul(N,st)|0)+Math.imul(R,ot)|0,o=o+Math.imul(R,st)|0,n=n+Math.imul(C,ut)|0,i=(i=i+Math.imul(C,ct)|0)+Math.imul(I,ut)|0,o=o+Math.imul(I,ct)|0,n=n+Math.imul(j,lt)|0,i=(i=i+Math.imul(j,ft)|0)+Math.imul(T,lt)|0,o=o+Math.imul(T,ft)|0;var Tt=(c+(n=n+Math.imul(S,pt)|0)|0)+((8191&(i=(i=i+Math.imul(S,mt)|0)+Math.imul(A,pt)|0))<<13)|0;c=((o=o+Math.imul(A,mt)|0)+(i>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,n=Math.imul(F,ot),i=(i=Math.imul(F,st))+Math.imul(D,ot)|0,o=Math.imul(D,st),n=n+Math.imul(N,ut)|0,i=(i=i+Math.imul(N,ct)|0)+Math.imul(R,ut)|0,o=o+Math.imul(R,ct)|0,n=n+Math.imul(C,lt)|0,i=(i=i+Math.imul(C,ft)|0)+Math.imul(I,lt)|0,o=o+Math.imul(I,ft)|0;var Pt=(c+(n=n+Math.imul(j,pt)|0)|0)+((8191&(i=(i=i+Math.imul(j,mt)|0)+Math.imul(T,pt)|0))<<13)|0;c=((o=o+Math.imul(T,mt)|0)+(i>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,n=Math.imul(F,ut),i=(i=Math.imul(F,ct))+Math.imul(D,ut)|0,o=Math.imul(D,ct),n=n+Math.imul(N,lt)|0,i=(i=i+Math.imul(N,ft)|0)+Math.imul(R,lt)|0,o=o+Math.imul(R,ft)|0;var Ct=(c+(n=n+Math.imul(C,pt)|0)|0)+((8191&(i=(i=i+Math.imul(C,mt)|0)+Math.imul(I,pt)|0))<<13)|0;c=((o=o+Math.imul(I,mt)|0)+(i>>>13)|0)+(Ct>>>26)|0,Ct&=67108863,n=Math.imul(F,lt),i=(i=Math.imul(F,ft))+Math.imul(D,lt)|0,o=Math.imul(D,ft);var It=(c+(n=n+Math.imul(N,pt)|0)|0)+((8191&(i=(i=i+Math.imul(N,mt)|0)+Math.imul(R,pt)|0))<<13)|0;c=((o=o+Math.imul(R,mt)|0)+(i>>>13)|0)+(It>>>26)|0,It&=67108863;var Bt=(c+(n=Math.imul(F,pt))|0)+((8191&(i=(i=Math.imul(F,mt))+Math.imul(D,pt)|0))<<13)|0;return c=((o=Math.imul(D,mt))+(i>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,u[0]=gt,u[1]=vt,u[2]=yt,u[3]=bt,u[4]=wt,u[5]=Mt,u[6]=_t,u[7]=xt,u[8]=kt,u[9]=Ot,u[10]=St,u[11]=At,u[12]=Et,u[13]=jt,u[14]=Tt,u[15]=Pt,u[16]=Ct,u[17]=It,u[18]=Bt,0!==c&&(u[19]=c,r.length++),r};function m(t,e,r){return(new g).mulp(t,e,r)}function g(t,e){this.x=t,this.y=e}Math.imul||(p=d),o.prototype.mulTo=function(t,e){var r=this.length+t.length;return 10===this.length&&10===t.length?p(this,t,e):r<63?d(this,t,e):r<1024?function(t,e,r){r.negative=e.negative^t.negative,r.length=t.length+e.length;for(var n=0,i=0,o=0;o<r.length-1;o++){var s=i;i=0;for(var a=67108863&n,u=Math.min(o,e.length-1),c=Math.max(0,o-t.length+1);c<=u;c++){var h=o-c,l=(0|t.words[h])*(0|e.words[c]),f=67108863&l;a=67108863&(f=f+a|0),i+=(s=(s=s+(l/67108864|0)|0)+(f>>>26)|0)>>>26,s&=67108863}r.words[o]=a,n=s,s=i}return 0!==n?r.words[o]=n:r.length--,r.strip()}(this,t,e):m(this,t,e)},g.prototype.makeRBT=function(t){for(var e=new Array(t),r=o.prototype._countBits(t)-1,n=0;n<t;n++)e[n]=this.revBin(n,r,t);return e},g.prototype.revBin=function(t,e,r){if(0===t||t===r-1)return t;for(var n=0,i=0;i<e;i++)n|=(1&t)<<e-i-1,t>>=1;return n},g.prototype.permute=function(t,e,r,n,i,o){for(var s=0;s<o;s++)n[s]=e[t[s]],i[s]=r[t[s]]},g.prototype.transform=function(t,e,r,n,i,o){this.permute(o,t,e,r,n,i);for(var s=1;s<i;s<<=1)for(var a=s<<1,u=Math.cos(2*Math.PI/a),c=Math.sin(2*Math.PI/a),h=0;h<i;h+=a)for(var l=u,f=c,d=0;d<s;d++){var p=r[h+d],m=n[h+d],g=r[h+d+s],v=n[h+d+s],y=l*g-f*v;v=l*v+f*g,g=y,r[h+d]=p+g,n[h+d]=m+v,r[h+d+s]=p-g,n[h+d+s]=m-v,d!==a&&(y=u*l-c*f,f=u*f+c*l,l=y)}},g.prototype.guessLen13b=function(t,e){var r=1|Math.max(e,t),n=1&r,i=0;for(r=r/2|0;r;r>>>=1)i++;return 1<<i+1+n},g.prototype.conjugate=function(t,e,r){if(!(r<=1))for(var n=0;n<r/2;n++){var i=t[n];t[n]=t[r-n-1],t[r-n-1]=i,i=e[n],e[n]=-e[r-n-1],e[r-n-1]=-i}},g.prototype.normalize13b=function(t,e){for(var r=0,n=0;n<e/2;n++){var i=8192*Math.round(t[2*n+1]/e)+Math.round(t[2*n]/e)+r;t[n]=67108863&i,r=i<67108864?0:i/67108864|0}return t},g.prototype.convert13b=function(t,e,r,i){for(var o=0,s=0;s<e;s++)o+=0|t[s],r[2*s]=8191&o,o>>>=13,r[2*s+1]=8191&o,o>>>=13;for(s=2*e;s<i;++s)r[s]=0;n(0===o),n(0==(-8192&o))},g.prototype.stub=function(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=0;return e},g.prototype.mulp=function(t,e,r){var n=2*this.guessLen13b(t.length,e.length),i=this.makeRBT(n),o=this.stub(n),s=new Array(n),a=new Array(n),u=new Array(n),c=new Array(n),h=new Array(n),l=new Array(n),f=r.words;f.length=n,this.convert13b(t.words,t.length,s,n),this.convert13b(e.words,e.length,c,n),this.transform(s,o,a,u,n,i),this.transform(c,o,h,l,n,i);for(var d=0;d<n;d++){var p=a[d]*h[d]-u[d]*l[d];u[d]=a[d]*l[d]+u[d]*h[d],a[d]=p}return this.conjugate(a,u,n),this.transform(a,u,f,o,n,i),this.conjugate(f,o,n),this.normalize13b(f,n),r.negative=t.negative^e.negative,r.length=t.length+e.length,r.strip()},o.prototype.mul=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},o.prototype.mulf=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),m(this,t,e)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){n("number"==typeof t),n(t<67108864);for(var e=0,r=0;r<this.length;r++){var i=(0|this.words[r])*t,o=(67108863&i)+(67108863&e);e>>=26,e+=i/67108864|0,e+=o>>>26,this.words[r]=67108863&o}return 0!==e&&(this.words[r]=e,this.length++),this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),r=0;r<e.length;r++){var n=r/26|0,i=r%26;e[r]=(t.words[n]&1<<i)>>>i}return e}(t);if(0===e.length)return new o(1);for(var r=this,n=0;n<e.length&&0===e[n];n++,r=r.sqr());if(++n<e.length)for(var i=r.sqr();n<e.length;n++,i=i.sqr())0!==e[n]&&(r=r.mul(i));return r},o.prototype.iushln=function(t){n("number"==typeof t&&t>=0);var e,r=t%26,i=(t-r)/26,o=67108863>>>26-r<<26-r;if(0!==r){var s=0;for(e=0;e<this.length;e++){var a=this.words[e]&o,u=(0|this.words[e])-a<<r;this.words[e]=u|s,s=a>>>26-r}s&&(this.words[e]=s,this.length++)}if(0!==i){for(e=this.length-1;e>=0;e--)this.words[e+i]=this.words[e];for(e=0;e<i;e++)this.words[e]=0;this.length+=i}return this.strip()},o.prototype.ishln=function(t){return n(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,e,r){var i;n("number"==typeof t&&t>=0),i=e?(e-e%26)/26:0;var o=t%26,s=Math.min((t-o)/26,this.length),a=67108863^67108863>>>o<<o,u=r;if(i-=s,i=Math.max(0,i),u){for(var c=0;c<s;c++)u.words[c]=this.words[c];u.length=s}if(0===s);else if(this.length>s)for(this.length-=s,c=0;c<this.length;c++)this.words[c]=this.words[c+s];else this.words[0]=0,this.length=1;var h=0;for(c=this.length-1;c>=0&&(0!==h||c>=i);c--){var l=0|this.words[c];this.words[c]=h<<26-o|l>>>o,h=l&a}return u&&0!==h&&(u.words[u.length++]=h),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},o.prototype.ishrn=function(t,e,r){return n(0===this.negative),this.iushrn(t,e,r)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26,i=1<<e;return!(this.length<=r||!(this.words[r]&i))},o.prototype.imaskn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26;if(n(0===this.negative,"imaskn works only with positive numbers"),this.length<=r)return this;if(0!==e&&r++,this.length=Math.min(r,this.length),0!==e){var i=67108863^67108863>>>e<<e;this.words[this.length-1]&=i}return this.strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return n("number"==typeof t),n(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},o.prototype.isubn=function(t){if(n("number"==typeof t),n(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,e,r){var i,o,s=t.length+r;this._expand(s);var a=0;for(i=0;i<t.length;i++){o=(0|this.words[i+r])+a;var u=(0|t.words[i])*e;a=((o-=67108863&u)>>26)-(u/67108864|0),this.words[i+r]=67108863&o}for(;i<this.length-r;i++)a=(o=(0|this.words[i+r])+a)>>26,this.words[i+r]=67108863&o;if(0===a)return this.strip();for(n(-1===a),a=0,i=0;i<this.length;i++)a=(o=-(0|this.words[i])+a)>>26,this.words[i]=67108863&o;return this.negative=1,this.strip()},o.prototype._wordDiv=function(t,e){var r=(this.length,t.length),n=this.clone(),i=t,s=0|i.words[i.length-1];0!=(r=26-this._countBits(s))&&(i=i.ushln(r),n.iushln(r),s=0|i.words[i.length-1]);var a,u=n.length-i.length;if("mod"!==e){(a=new o(null)).length=u+1,a.words=new Array(a.length);for(var c=0;c<a.length;c++)a.words[c]=0}var h=n.clone()._ishlnsubmul(i,1,u);0===h.negative&&(n=h,a&&(a.words[u]=1));for(var l=u-1;l>=0;l--){var f=67108864*(0|n.words[i.length+l])+(0|n.words[i.length+l-1]);for(f=Math.min(f/s|0,67108863),n._ishlnsubmul(i,f,l);0!==n.negative;)f--,n.negative=0,n._ishlnsubmul(i,1,l),n.isZero()||(n.negative^=1);a&&(a.words[l]=f)}return a&&a.strip(),n.strip(),"div"!==e&&0!==r&&n.iushrn(r),{div:a||null,mod:n}},o.prototype.divmod=function(t,e,r){return n(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(a=this.neg().divmod(t,e),"mod"!==e&&(i=a.div.neg()),"div"!==e&&(s=a.mod.neg(),r&&0!==s.negative&&s.iadd(t)),{div:i,mod:s}):0===this.negative&&0!==t.negative?(a=this.divmod(t.neg(),e),"mod"!==e&&(i=a.div.neg()),{div:i,mod:a.mod}):0!=(this.negative&t.negative)?(a=this.neg().divmod(t.neg(),e),"div"!==e&&(s=a.mod.neg(),r&&0!==s.negative&&s.isub(t)),{div:a.div,mod:s}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new o(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modn(t.words[0]))}:this._wordDiv(t,e);var i,s,a},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var r=0!==e.div.negative?e.mod.isub(t):e.mod,n=t.ushrn(1),i=t.andln(1),o=r.cmp(n);return o<0||1===i&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},o.prototype.modn=function(t){n(t<=67108863);for(var e=(1<<26)%t,r=0,i=this.length-1;i>=0;i--)r=(e*r+(0|this.words[i]))%t;return r},o.prototype.idivn=function(t){n(t<=67108863);for(var e=0,r=this.length-1;r>=0;r--){var i=(0|this.words[r])+67108864*e;this.words[r]=i/t|0,e=i%t}return this.strip()},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i=new o(1),s=new o(0),a=new o(0),u=new o(1),c=0;e.isEven()&&r.isEven();)e.iushrn(1),r.iushrn(1),++c;for(var h=r.clone(),l=e.clone();!e.isZero();){for(var f=0,d=1;0==(e.words[0]&d)&&f<26;++f,d<<=1);if(f>0)for(e.iushrn(f);f-- >0;)(i.isOdd()||s.isOdd())&&(i.iadd(h),s.isub(l)),i.iushrn(1),s.iushrn(1);for(var p=0,m=1;0==(r.words[0]&m)&&p<26;++p,m<<=1);if(p>0)for(r.iushrn(p);p-- >0;)(a.isOdd()||u.isOdd())&&(a.iadd(h),u.isub(l)),a.iushrn(1),u.iushrn(1);e.cmp(r)>=0?(e.isub(r),i.isub(a),s.isub(u)):(r.isub(e),a.isub(i),u.isub(s))}return{a,b:u,gcd:r.iushln(c)}},o.prototype._invmp=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i,s=new o(1),a=new o(0),u=r.clone();e.cmpn(1)>0&&r.cmpn(1)>0;){for(var c=0,h=1;0==(e.words[0]&h)&&c<26;++c,h<<=1);if(c>0)for(e.iushrn(c);c-- >0;)s.isOdd()&&s.iadd(u),s.iushrn(1);for(var l=0,f=1;0==(r.words[0]&f)&&l<26;++l,f<<=1);if(l>0)for(r.iushrn(l);l-- >0;)a.isOdd()&&a.iadd(u),a.iushrn(1);e.cmp(r)>=0?(e.isub(r),s.isub(a)):(r.isub(e),a.isub(s))}return(i=0===e.cmpn(1)?s:a).cmpn(0)<0&&i.iadd(t),i},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),r=t.clone();e.negative=0,r.negative=0;for(var n=0;e.isEven()&&r.isEven();n++)e.iushrn(1),r.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;r.isEven();)r.iushrn(1);var i=e.cmp(r);if(i<0){var o=e;e=r,r=o}else if(0===i||0===r.cmpn(1))break;e.isub(r)}return r.iushln(n)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){n("number"==typeof t);var e=t%26,r=(t-e)/26,i=1<<e;if(this.length<=r)return this._expand(r+1),this.words[r]|=i,this;for(var o=i,s=r;0!==o&&s<this.length;s++){var a=0|this.words[s];o=(a+=o)>>>26,a&=67108863,this.words[s]=a}return 0!==o&&(this.words[s]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var e,r=t<0;if(0!==this.negative&&!r)return-1;if(0===this.negative&&r)return 1;if(this.strip(),this.length>1)e=1;else{r&&(t=-t),n(t<=67108863,"Number is too big");var i=0|this.words[0];e=i===t?0:i<t?-1:1}return 0!==this.negative?0|-e:e},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,r=this.length-1;r>=0;r--){var n=0|this.words[r],i=0|t.words[r];if(n!==i){n<i?e=-1:n>i&&(e=1);break}}return e},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new x(t)},o.prototype.toRed=function(t){return n(!this.red,"Already a number in reduction context"),n(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return n(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return n(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return n(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return n(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return n(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return n(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return n(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return n(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return n(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return n(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return n(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return n(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return n(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var v={k256:null,p224:null,p192:null,p25519:null};function y(t,e){this.name=t,this.p=new o(e,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function b(){y.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function w(){y.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function M(){y.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function _(){y.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function x(t){if("string"==typeof t){var e=o._prime(t);this.m=e.p,this.prime=e}else n(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function k(t){x.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}y.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},y.prototype.ireduce=function(t){var e,r=t;do{this.split(r,this.tmp),e=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(e>this.n);var n=e<this.n?-1:r.ucmp(this.p);return 0===n?(r.words[0]=0,r.length=1):n>0?r.isub(this.p):void 0!==r.strip?r.strip():r._strip(),r},y.prototype.split=function(t,e){t.iushrn(this.n,0,e)},y.prototype.imulK=function(t){return t.imul(this.k)},i(b,y),b.prototype.split=function(t,e){for(var r=4194303,n=Math.min(t.length,9),i=0;i<n;i++)e.words[i]=t.words[i];if(e.length=n,t.length<=9)return t.words[0]=0,void(t.length=1);var o=t.words[9];for(e.words[e.length++]=o&r,i=10;i<t.length;i++){var s=0|t.words[i];t.words[i-10]=(s&r)<<4|o>>>22,o=s}o>>>=22,t.words[i-10]=o,0===o&&t.length>10?t.length-=10:t.length-=9},b.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,r=0;r<t.length;r++){var n=0|t.words[r];e+=977*n,t.words[r]=67108863&e,e=64*n+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},i(w,y),i(M,y),i(_,y),_.prototype.imulK=function(t){for(var e=0,r=0;r<t.length;r++){var n=19*(0|t.words[r])+e,i=67108863&n;n>>>=26,t.words[r]=i,e=n}return 0!==e&&(t.words[t.length++]=e),t},o._prime=function(t){if(v[t])return v[t];var e;if("k256"===t)e=new b;else if("p224"===t)e=new w;else if("p192"===t)e=new M;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new _}return v[t]=e,e},x.prototype._verify1=function(t){n(0===t.negative,"red works only with positives"),n(t.red,"red works only with red numbers")},x.prototype._verify2=function(t,e){n(0==(t.negative|e.negative),"red works only with positives"),n(t.red&&t.red===e.red,"red works only with red numbers")},x.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},x.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},x.prototype.add=function(t,e){this._verify2(t,e);var r=t.add(e);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},x.prototype.iadd=function(t,e){this._verify2(t,e);var r=t.iadd(e);return r.cmp(this.m)>=0&&r.isub(this.m),r},x.prototype.sub=function(t,e){this._verify2(t,e);var r=t.sub(e);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},x.prototype.isub=function(t,e){this._verify2(t,e);var r=t.isub(e);return r.cmpn(0)<0&&r.iadd(this.m),r},x.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},x.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},x.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},x.prototype.isqr=function(t){return this.imul(t,t.clone())},x.prototype.sqr=function(t){return this.mul(t,t)},x.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(n(e%2==1),3===e){var r=this.m.add(new o(1)).iushrn(2);return this.pow(t,r)}for(var i=this.m.subn(1),s=0;!i.isZero()&&0===i.andln(1);)s++,i.iushrn(1);n(!i.isZero());var a=new o(1).toRed(this),u=a.redNeg(),c=this.m.subn(1).iushrn(1),h=this.m.bitLength();for(h=new o(2*h*h).toRed(this);0!==this.pow(h,c).cmp(u);)h.redIAdd(u);for(var l=this.pow(h,i),f=this.pow(t,i.addn(1).iushrn(1)),d=this.pow(t,i),p=s;0!==d.cmp(a);){for(var m=d,g=0;0!==m.cmp(a);g++)m=m.redSqr();n(g<p);var v=this.pow(l,new o(1).iushln(p-g-1));f=f.redMul(v),l=v.redSqr(),d=d.redMul(l),p=g}return f},x.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},x.prototype.pow=function(t,e){if(e.isZero())return new o(1).toRed(this);if(0===e.cmpn(1))return t.clone();var r=new Array(16);r[0]=new o(1).toRed(this),r[1]=t;for(var n=2;n<r.length;n++)r[n]=this.mul(r[n-1],t);var i=r[0],s=0,a=0,u=e.bitLength()%26;for(0===u&&(u=26),n=e.length-1;n>=0;n--){for(var c=e.words[n],h=u-1;h>=0;h--){var l=c>>h&1;i!==r[0]&&(i=this.sqr(i)),0!==l||0!==s?(s<<=1,s|=l,(4==++a||0===n&&0===h)&&(i=this.mul(i,r[s]),a=0,s=0)):a=0}u=26}return i},x.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},x.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},o.mont=function(t){return new k(t)},i(k,x),k.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},k.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},k.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},k.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new o(0)._forceRed(this);var r=t.mul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),s=i;return i.cmp(this.m)>=0?s=i.isub(this.m):i.cmpn(0)<0&&(s=i.iadd(this.m)),s._forceRed(this)},k.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t=r.nmd(t),this)},45840:(t,e,r)=>{var n;if("object"==typeof globalThis)n=globalThis;else try{n=r(284)}catch(t){}finally{if(n||"undefined"==typeof window||(n=window),!n)throw new Error("Could not determine global this")}var i=n.WebSocket||n.MozWebSocket,o=r(79387);function s(t,e){return e?new i(t,e):new i(t)}i&&["CONNECTING","OPEN","CLOSING","CLOSED"].forEach((function(t){Object.defineProperty(s,t,{get:function(){return i[t]}})})),t.exports={w3cwebsocket:i?s:null,version:o}},79387:(t,e,r)=>{t.exports=r(12847).version},12847:t=>{"use strict";t.exports={version:"1.0.34"}},86430:(t,e,r)=>{"use strict";var n=r(43101),i=r(16314),o=r(21924),s=o("Object.prototype.toString"),a=r(96410)(),u="undefined"==typeof globalThis?r.g:globalThis,c=i(),h=o("String.prototype.slice"),l={},f=r(94079),d=Object.getPrototypeOf;a&&f&&d&&n(c,(function(t){if("function"==typeof u[t]){var e=new u[t];if(Symbol.toStringTag in e){var r=d(e),n=f(r,Symbol.toStringTag);if(!n){var i=d(r);n=f(i,Symbol.toStringTag)}l[t]=n.get}}}));var p=r(85692);t.exports=function(t){return!!p(t)&&(a&&Symbol.toStringTag in t?function(t){var e=!1;return n(l,(function(r,n){if(!e)try{var i=r.call(t);i===n&&(e=i)}catch(t){}})),e}(t):h(s(t),8,-1))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay9vYnMtc3RvcmUvZGlzdC9Db21wb3NlZFN0b3JlLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL29icy1zdG9yZS9kaXN0L01lcmdlZFN0b3JlLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL29icy1zdG9yZS9kaXN0L09ic2VydmFibGVTdG9yZS5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay9vYnMtc3RvcmUvZGlzdC9hc1N0cmVhbS5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay9vYnMtc3RvcmUvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay9vYnMtc3RvcmUvZGlzdC90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2VjY3J5cHRvL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2ZldGNoLW5vZGUtZGV0YWlscy9kaXN0L2ZldGNoTm9kZURldGFpbHMuZXNtLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9odHRwLWhlbHBlcnMvZGlzdC9odHRwSGVscGVycy5lc20uanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL29wZW5sb2dpbi11dGlscy9kaXN0L29wZW5sb2dpblV0aWxzLmVzbS5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvb3BlbmxvZ2luLWpycGMvZGlzdC9vcGVubG9naW5KcnBjLmVzbS5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZ2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS93cmFwTmF0aXZlU3VwZXIuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pc05hdGl2ZUZ1bmN0aW9uLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlMaWtlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy90b3J1cy5qcy9kaXN0L3RvcnVzVXRpbHMuZXNtLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy90b3J1cy1lbWJlZC9ub2RlX21vZHVsZXMvaXMtc3RyZWFtL2luZGV4LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy90b3J1cy1lbWJlZC9kaXN0L3RvcnVzLmVzbS5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL2F2YWlsYWJsZS10eXBlZC1hcnJheXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9iYXNlNjR1cmwvZGlzdC9iYXNlNjR1cmwuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9iYXNlNjR1cmwvZGlzdC9wYWQtc3RyaW5nLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvYmFzZTY0dXJsL2luZGV4LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9lczUtZXh0L2dsb2JhbC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL2V0aGVyZXVtLWJsb29tLWZpbHRlcnMvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL2V0aGVyZXVtLWJsb29tLWZpbHRlcnMvZGlzdC91dGlscy5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL2Zhc3QtZGVlcC1lcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL2ZvcmVhY2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9oYXMtdG9zdHJpbmd0YWcvc2hhbXMuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9pcy1hcmd1bWVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9pcy1nZW5lcmF0b3ItZnVuY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9pcy1oZXgtcHJlZml4ZWQvc3JjL2luZGV4LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvaXMtdHlwZWQtYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9qc29uLXN0YWJsZS1zdHJpbmdpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9qc29uaWZ5L2luZGV4LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvanNvbmlmeS9saWIvcGFyc2UuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9qc29uaWZ5L2xpYi9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gubWVyZ2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9sb2dsZXZlbC9saWIvbG9nbGV2ZWwuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy9vYm9lL2Rpc3Qvb2JvZS1icm93c2VyLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvc3RyaXAtaGV4LXByZWZpeC9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy93ZWIzLWNvcmUtaGVscGVycy9saWIvZXJyb3JzLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvd2ViMy1jb3JlLWhlbHBlcnMvbGliL2Zvcm1hdHRlcnMuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy93ZWIzLWNvcmUtaGVscGVycy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy93ZWIzLWNvcmUtbWV0aG9kL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3dlYjMtY29yZS1wcm9taWV2ZW50L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3dlYjMtY29yZS1wcm9taWV2ZW50L25vZGVfbW9kdWxlcy9ldmVudGVtaXR0ZXIzL2luZGV4LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvd2ViMy1jb3JlLXJlcXVlc3RtYW5hZ2VyL2xpYi9iYXRjaC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3dlYjMtY29yZS1yZXF1ZXN0bWFuYWdlci9saWIvZ2l2ZW5Qcm92aWRlci5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3dlYjMtY29yZS1yZXF1ZXN0bWFuYWdlci9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy93ZWIzLWNvcmUtcmVxdWVzdG1hbmFnZXIvbGliL2pzb25ycGMuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy93ZWIzLWNvcmUtcmVxdWVzdG1hbmFnZXIvbm9kZV9tb2R1bGVzL3V0aWwvc3VwcG9ydC9pc0J1ZmZlckJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy93ZWIzLWNvcmUtcmVxdWVzdG1hbmFnZXIvbm9kZV9tb2R1bGVzL3V0aWwvc3VwcG9ydC90eXBlcy5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3dlYjMtY29yZS1yZXF1ZXN0bWFuYWdlci9ub2RlX21vZHVsZXMvdXRpbC91dGlsLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvd2ViMy1jb3JlLXN1YnNjcmlwdGlvbnMvbGliL2luZGV4LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvd2ViMy1jb3JlLXN1YnNjcmlwdGlvbnMvbGliL3N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3dlYjMtY29yZS1zdWJzY3JpcHRpb25zL25vZGVfbW9kdWxlcy9ldmVudGVtaXR0ZXIzL2luZGV4LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvd2ViMy1jb3JlL2xpYi9leHRlbmQuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy93ZWIzLWNvcmUvbGliL2luZGV4LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWJpL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFiaS9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL2xpYi5lc20vX3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1hYmkvbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9saWIuZXNtL2ZyYWdtZW50cy5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFiaS9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL2xpYi5lc20vY29kZXJzL2Fic3RyYWN0LWNvZGVyLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWJpL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYmkvbGliLmVzbS9jb2RlcnMvYWRkcmVzcy5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFiaS9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL2xpYi5lc20vY29kZXJzL2Fub255bW91cy5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFiaS9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL2xpYi5lc20vY29kZXJzL2FycmF5LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWJpL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYmkvbGliLmVzbS9jb2RlcnMvYm9vbGVhbi5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFiaS9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL2xpYi5lc20vY29kZXJzL2J5dGVzLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWJpL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYmkvbGliLmVzbS9jb2RlcnMvZml4ZWQtYnl0ZXMuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1hYmkvbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9saWIuZXNtL2NvZGVycy9udWxsLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWJpL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYmkvbGliLmVzbS9jb2RlcnMvbnVtYmVyLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWJpL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYmkvbGliLmVzbS9jb2RlcnMvc3RyaW5nLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWJpL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYmkvbGliLmVzbS9jb2RlcnMvdHVwbGUuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1hYmkvbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9saWIuZXNtL2FiaS1jb2Rlci5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFiaS9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL2xpYi5lc20vaW50ZXJmYWNlLmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtY29udHJhY3QvbGliL2luZGV4LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtaWJhbi9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1pYmFuL25vZGVfbW9kdWxlcy9ibi5qcy9saWIvYm4uanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy93ZWIzLXByb3ZpZGVycy1odHRwL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3dlYjMtcHJvdmlkZXJzLWlwYy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy93ZWIzLXByb3ZpZGVycy13cy9saWIvaGVscGVycy5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3dlYjMtcHJvdmlkZXJzLXdzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3dlYjMtcHJvdmlkZXJzLXdzL25vZGVfbW9kdWxlcy9ldmVudGVtaXR0ZXIzL2luZGV4LmpzIiwid2VicGFjazovL215LXN3YXAvLi9ub2RlX21vZHVsZXMvd2ViMy11dGlscy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy93ZWIzLXV0aWxzL2xpYi9zb2xpZGl0eVNoYTMuanMiLCJ3ZWJwYWNrOi8vbXktc3dhcC8uL25vZGVfbW9kdWxlcy93ZWIzLXV0aWxzL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3dlYjMtdXRpbHMvbm9kZV9tb2R1bGVzL2JuLmpzL2xpYi9ibi5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3dlYnNvY2tldC9saWIvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3dlYnNvY2tldC9saWIvdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL3doaWNoLXR5cGVkLWFycmF5L2luZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ29tcG9zZWRTdG9yZSIsIk9ic2VydmFibGVTdG9yZV8xIiwiT2JzZXJ2YWJsZVN0b3JlIiwiY2hpbGRyZW4iLCJzdXBlciIsInRoaXMiLCJfY2hpbGRyZW4iLCJrZXlzIiwiZm9yRWFjaCIsImNoaWxkS2V5IiwiY2hpbGQiLCJfYWRkQ2hpbGQiLCJ1cGRhdGVGcm9tQ2hpbGQiLCJjaGlsZFZhbHVlIiwic3RhdGUiLCJnZXRTdGF0ZSIsInB1dFN0YXRlIiwic3Vic2NyaWJlIiwiTWVyZ2VkU3RvcmUiLCJfdXBkYXRlV2hvbGVTdGF0ZSIsImNoaWxkU3RhdGVzIiwibWFwIiwiYXNzaWduIiwiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsInNhZmVfZXZlbnRfZW1pdHRlcl8xIiwiZGVmYXVsdCIsImluaXRTdGF0ZSIsIl9zdGF0ZSIsIl9nZXRTdGF0ZSIsIm5ld1N0YXRlIiwiX3B1dFN0YXRlIiwiZW1pdCIsInBhcnRpYWxTdGF0ZSIsImhhbmRsZXIiLCJvbiIsInJlbW92ZUxpc3RlbmVyIiwic3RvcmVBc1N0cmVhbSIsInN0cmVhbV8xIiwiT2JzZXJ2YWJsZVN0b3JlU3RyZWFtIiwiRHVwbGV4Iiwib2JzU3RvcmUiLCJvYmplY3RNb2RlIiwicmVzdW1lIiwicHVzaCIsImRlc3QiLCJvcHRpb25zIiwicmVzdWx0IiwicGlwZSIsIndyaXRlIiwiY2h1bmsiLCJfZW5jb2RpbmciLCJjYWxsYmFjayIsIl9zaXplIiwiZXJyIiwidW5zdWJzY3JpYmUiLCJfZGVzdHJveSIsIl9fY3JlYXRlQmluZGluZyIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZW51bWVyYWJsZSIsImdldCIsIl9fZXhwb3J0U3RhciIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJzdG9yZVRyYW5zZm9ybVN0cmVhbSIsInRocm91Z2gyXzEiLCJzeW5jVHJhbnNmb3JtRm4iLCJvYmoiLCJjYiIsImVjIiwiRUMiLCJicm93c2VyQ3J5cHRvIiwiZyIsImNyeXB0byIsIm1zQ3J5cHRvIiwic3VidGxlIiwid2Via2l0U3VidGxlIiwibm9kZUNyeXB0byIsIkVDX0dST1VQX09SREVSIiwiQnVmZmVyIiwiZnJvbSIsIlpFUk8zMiIsImFsbG9jIiwiYXNzZXJ0IiwiY29uZGl0aW9uIiwibWVzc2FnZSIsIkVycm9yIiwiaXNWYWxpZFByaXZhdGVLZXkiLCJwcml2YXRlS2V5IiwieCIsImlzQnVmZmVyIiwibGVuZ3RoIiwiY29tcGFyZSIsInJhbmRvbUJ5dGVzIiwic2l6ZSIsImFyciIsIlVpbnQ4QXJyYXkiLCJnZXRSYW5kb21WYWx1ZXMiLCJnZXRBZXMiLCJvcCIsIml2Iiwia2V5IiwiZGF0YSIsIlByb21pc2UiLCJyZXNvbHZlIiwiaW1wb3J0S2V5IiwibmFtZSIsInRoZW4iLCJjcnlwdG9LZXkiLCJlbmNBbGdvcml0aG0iLCJjaXBoZXIiLCJjcmVhdGVDaXBoZXJpdiIsImZpcnN0Q2h1bmsiLCJ1cGRhdGUiLCJzZWNvbmRDaHVuayIsImZpbmFsIiwiY29uY2F0IiwiZGVjaXBoZXIiLCJjcmVhdGVEZWNpcGhlcml2IiwiYWVzQ2JjRGVjcnlwdCIsImtleUZyb21Qcml2YXRlIiwiZ2V0UHVibGljIiwib3B0cyIsImVuY3J5cHRpb25LZXkiLCJwcml2YXRlS2V5QSIsInB1YmxpY0tleUIiLCJlcGhlbVB1YmxpY0tleSIsImtleUEiLCJrZXlCIiwia2V5RnJvbVB1YmxpYyIsIlB4IiwiZGVyaXZlIiwidG9BcnJheSIsIm1zZyIsImNyZWF0ZUhhc2giLCJkaWdlc3QiLCJoYXNoIiwic2xpY2UiLCJzaWciLCJtYWNLZXkiLCJkYXRhVG9NYWMiLCJjaXBoZXJ0ZXh0IiwibWFjIiwiaG1hYyIsImNyZWF0ZUhtYWMiLCJiMSIsImIyIiwicmVzIiwiaSIsImVxdWFsQ29uc3RUaW1lIiwibWFjR29vZCIsIkVUSEVSRVVNX05FVFdPUksiLCJhYmkiLCJjb25zdGFudCIsImlucHV0cyIsIm91dHB1dHMiLCJpbnRlcm5hbFR5cGUiLCJ0eXBlIiwicGF5YWJsZSIsInN0YXRlTXV0YWJpbGl0eSIsIk5vZGVEZXRhaWxNYW5hZ2VyIiwibmV0d29yayIsInByb3h5QWRkcmVzcyIsInVybCIsIl9jdXJyZW50RXBvY2giLCJfdG9ydXNOb2RlRW5kcG9pbnRzIiwiX3RvcnVzTm9kZVB1YiIsIlgiLCJZIiwiX3RvcnVzSW5kZXhlcyIsIl9uZXR3b3JrIiwiVVJMIiwiaHJlZiIsIl8iLCJub2RlTGlzdENvbnRyYWN0Iiwibm9kZUxpc3RBZGRyZXNzIiwidXBkYXRlZCIsImN1cnJlbnRFcG9jaCIsInRvcnVzTm9kZUVuZHBvaW50cyIsInRvcnVzTm9kZVB1YiIsInRvcnVzSW5kZXhlcyIsIm1ldGhvZHMiLCJlcG9jaCIsImdldEVwb2NoSW5mbyIsIm5vZGVFdGhBZGRyZXNzIiwiZ2V0Tm9kZURldGFpbHMiLCJza2lwIiwic2tpcFBvc3RFcG9jaENoZWNrIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJnZW5lcmF0b3IiLCJfbm9kZURldGFpbHMiLCJsYXRlc3RFcG9jaCIsImdldEN1cnJlbnRFcG9jaCIsImxhdGVzdEVwb2NoSW5mbyIsImluZGV4ZXMiLCJub2RlTGlzdCIsInBvcyIsIm5vZGVFbmRwb2ludFJlcXVlc3RzIiwiZ2V0Tm9kZUVuZHBvaW50Iiwibm9kZUVuZFBvaW50cyIsImFsbCIsInVwZGF0ZWRFbmRwb2ludHMiLCJ1cGRhdGVkTm9kZVB1YiIsImluZGV4IiwiZW5kUG9pbnRFbGVtZW50IiwiZW5kcG9pbnQiLCJkZWNsYXJlZElwIiwic3BsaXQiLCJ0b0hleCIsInB1Ykt4IiwicmVwbGFjZSIsInB1Ykt5IiwiUCIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwiZG9uZSIsImFwcGx5IiwiYXBpS2V5IiwiZW1iZWRIb3N0Iiwic2V0RW1iZWRIb3N0IiwiZW1iZWRIb3N0XyIsInNldEFQSUtleSIsImFwaUtleV8iLCJnZXRBcGlLZXlIZWFkZXJzIiwiaGVhZGVycyIsIm9wdGlvbnNfIiwiY3VzdG9tT3B0aW9ucyIsImRlZmF1bHRPcHRpb25zIiwibW9kZSIsInVzZUFQSUtleSIsIm1ldGhvZCIsInJlc3BvbnNlIiwiZmV0Y2giLCJvayIsImpzb24iLCJwb3N0IiwiaXNVcmxFbmNvZGVkRGF0YSIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwibXMiLCJwcm9taXNlIiwidGltZW91dCIsImlkIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsInJhY2UiLCJwcm9taXNlVGltZW91dCIsImdlbmVyYXRlSnNvblJQQ09iamVjdCIsInBhcmFtZXRlcnMiLCJqc29ucnBjIiwicGFyYW1zIiwibm9vcCIsIkFDSyIsIkJhc2VQb3N0TWVzc2FnZVN0cmVhbSIsInRhcmdldCIsInRhcmdldFdpbmRvdyIsIndpbmRvdyIsInRhcmdldE9yaWdpbiIsIl9pbml0IiwiX2hhdmVTeW4iLCJfbmFtZSIsIl90YXJnZXQiLCJfdGFyZ2V0V2luZG93IiwiX3RhcmdldE9yaWdpbiIsIl9vbk1lc3NhZ2UiLCJvbk1lc3NhZ2UiLCJiaW5kIiwiX3N5bkludGVydmFsSWQiLCJhZGRFdmVudExpc3RlbmVyIiwiX2hhbmRTaGFrZSIsImNvcmsiLCJfd3JpdGUiLCJfYnJlYWsiLCJ1bmNvcmsiLCJvcmlnaW5Db25zdHJhaW50IiwicG9zdE1lc3NhZ2UiLCJldmVudCIsIm9yaWdpbiIsInNvdXJjZSIsIl9vbkRhdGEiLCJfcG9zdE1lc3NhZ2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2FmZUFwcGx5IiwiY29udGV4dCIsImFyZ3MiLCJSZWZsZWN0IiwiU2FmZUV2ZW50RW1pdHRlciIsIkV2ZW50RW1pdHRlciIsImRvRXJyb3IiLCJldmVudHMiLCJfZXZlbnRzIiwiZXJyb3IiLCJlciIsImxlbiIsImxpc3RlbmVycyIsIm4iLCJjb3B5IiwiQXJyYXkiLCJhcnJheUNsb25lIiwiU2VyaWFsaXphYmxlRXJyb3IiLCJjb2RlIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwic3RhY2siLCJzZXJpYWxpemVFcnJvciIsInRvU3RyaW5nIiwiSlJQQ0VuZ2luZSIsIl9taWRkbGV3YXJlIiwicmVxIiwibWlkZGxld2FyZVN0YWNrIiwicmV0dXJuSGFuZGxlcnMiLCJpc0NvbXBsZXRlIiwibWlkZGxld2FyZSIsIl9ydW5NaWRkbGV3YXJlIiwicmV2ZXJzZSIsImVuZCIsInJldHVybkhhbmRsZXIiLCJoYW5kbGVycyIsImlzQXJyYXkiLCJfaGFuZGxlQmF0Y2giLCJfaGFuZGxlIiwiX3Byb21pc2VIYW5kbGUiLCJtaWRkbGV3YXJlRXJyb3IiLCJfcnVuQWxsTWlkZGxld2FyZSIsIl9ydW5SZXR1cm5IYW5kbGVycyIsImhhbmRsZXJDYWxsYmFjayIsInJlcXMiLCJyZXNwb25zZXMiLCJfZXJyIiwiY2FsbGVyUmVxIiwiX3Byb2Nlc3NSZXF1ZXN0IiwiX2Vycm9yIiwiX2NoZWNrRm9yQ29tcGxldGlvbiIsIlN1YnN0cmVhbSIsInBhcmVudCIsIl9wYXJlbnQiLCJJR05PUkVfU1VCU1RSRUFNIiwiU3ltYm9sIiwiT2JqZWN0TXVsdGlwbGV4IiwiX3N1YnN0cmVhbXMiLCJzdWJzdHJlYW0iLCJzdHJlYW0iLCJfY2IiLCJkZXN0cm95IiwicmVhZGFibGUiLCJ3cml0YWJsZSIsImFueVN0cmVhbUVuZCIsImNvbnNvbGUiLCJ3YXJuIiwiX3R5cGVvZiIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJfbmV4dCIsIl90aHJvdyIsImFyZyIsImluZm8iLCJfYXN5bmNUb0dlbmVyYXRvciIsImZuIiwic2VsZiIsImFyZ3VtZW50cyIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiZGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInNldFByb3RvdHlwZU9mIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJhc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJfZ2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJjb25zdHJ1Y3QiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwidmFsdWVPZiIsIl9jb25zdHJ1Y3QiLCJQYXJlbnQiLCJDbGFzcyIsImEiLCJGdW5jdGlvbiIsIl93cmFwTmF0aXZlU3VwZXIiLCJfY2FjaGUiLCJNYXAiLCJpbmRleE9mIiwiaGFzIiwic2V0IiwiV3JhcHBlciIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyMiIsIl90b0NvbnN1bWFibGVBcnJheSIsIml0ZXIiLCJtaW5MZW4iLCJ0ZXN0IiwibG9nIiwiZGlzYWJsZUFsbCIsIlNvbWVFcnJvciIsIl9FcnJvciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX3N1cGVyIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCQxIiwiU3VwZXIiLCJOZXdUYXJnZXQiLCJfcmVmIiwiX3RoaXMiLCJlcnJvcnMiLCJwcmVkaWNhdGUiLCJTb21lIiwicHJvbWlzZXMiLCJwcmVkaWNhdGVFcnJvciIsImZpbmlzaGVkQ291bnQiLCJzaGFyZWRTdGF0ZSIsInJlc29sdmVkIiwiZXJyb3JBcnIiLCJmaWxsIiwicmVzdWx0QXJyIiwicmVzcCIsImNhdGNoIiwiZmluYWxseSIsInZhbHVlcyIsInJlZHVjZSIsImFjYyIsInoiLCJfZXJyb3IkZGF0YSIsInN0ciIsIl9yZWYyIiwic3RhcnRzV2l0aCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwiaXQiLCJqb2luIiwiX3ByZWRpY2F0ZUVycm9yIiwib3duS2V5cyQxIiwib2JqZWN0IiwiZW51bWVyYWJsZU9ubHkiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX29iamVjdFNwcmVhZCQxIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJHZXRPclNldE5vbmNlRXJyb3IiLCJrQ29tYmluYXRpb25zIiwicyIsImN1ciIsImNvbWJzIiwidGFpbENvbWJzIiwiaiIsInRocmVzaG9sZFNhbWUiLCJ0IiwiaGFzaE1hcCIsImtleUxvb2t1cCIsIl9jYWxsZWUiLCJlbmRwb2ludHMiLCJ2ZXJpZmllciIsInZlcmlmaWVySWQiLCJsb29rdXBQcm9taXNlcyIsIl9jb250ZXh0IiwicHJldiIsInZlcmlmaWVyX2lkIiwiYWJydXB0IiwibG9va3VwUmVzdWx0cyIsImxvb2t1cFNoYXJlcyIsIngxIiwiZXJyb3JSZXN1bHQiLCJ4MiIsImtleVJlc3VsdCIsIngzIiwic3RvcCIsIl94IiwiX3gyIiwiX3gzIiwid2FpdEtleUxvb2t1cCIsImtleUFzc2lnbiIsIl9jYWxsZWUyIiwidG9ydXNOb2RlUHVicyIsImxhc3RQb2ludCIsImZpcnN0UG9pbnQiLCJub2RlTnVtIiwiaW5pdGlhbFBvaW50Iiwic2lnbmVkRGF0YSIsIl9jb250ZXh0MiIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInB1YktleVgiLCJwdWJLZXlZIiwic2VudCIsInQwIiwiX3g0IiwiX3g1IiwiX3g2IiwiX3g3IiwiX3g4IiwiX3g5Iiwib3duS2V5cyIsIl9vYmplY3RTcHJlYWQiLCJUb3J1cyIsIl9yZWYkZW5hYmxlT25lS2V5IiwiZW5hYmxlT25lS2V5IiwiX3JlZiRtZXRhZGF0YUhvc3QiLCJtZXRhZGF0YUhvc3QiLCJfcmVmJGFsbG93SG9zdCIsImFsbG93SG9zdCIsIl9yZWYkc2VydmVyVGltZU9mZnNldCIsInNlcnZlclRpbWVPZmZzZXQiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfZ2V0Tm9uY2UiLCJfZ2V0T3JTZXROb25jZSIsIl9nZXRQdWJsaWNBZGRyZXNzIiwiX3NldE1ldGFkYXRhIiwiX2dldE1ldGFkYXRhIiwiX3JldHJpZXZlU2hhcmVzIiwiX3NldEN1c3RvbUtleSIsIl9nZXRVc2VyVHlwZUFuZEFkZHJlc3MiLCJ2IiwiZW5hYmxlQWxsIiwiZG9lc0tleUFzc2lnbiIsIl9yZWYzIiwiaXNOZXdLZXkiLCJmaW5hbEtleVJlc3VsdCIsImFzc2lnblJlc3VsdCIsIl9maW5hbEtleVJlc3VsdCRrZXlzJCIsInR5cGVPZlVzZXIiLCJub25jZSIsInB1Yk5vbmNlIiwibW9kaWZpZWRQdWJLZXkiLCJ1cGdyYWRlZCIsIl95aWVsZCR0aGlzJGdldE9yU2V0TiIsImZpbmFsWCIsImZpbmFsWSIsImFkZHJlc3MiLCJfYXJncyIsImluY2x1ZGVzIiwidDEiLCJwdWJfa2V5X1giLCJwdWJfa2V5X1kiLCJnZXRPclNldE5vbmNlIiwidDIiLCJ5IiwiYWRkIiwiZ2V0WCIsImdldFkiLCJnZW5lcmF0ZUFkZHJlc3NGcm9tUHViS2V5IiwiX3JlZjQiLCJwcml2S2V5SGV4IiwibWV0YWRhdGFOb25jZSIsInRvcnVzS2V5SGV4IiwiY3VzdG9tS2V5SGV4IiwidG9ydXNLZXkiLCJwcml2S2V5IiwiY3VzdG9tS2V5IiwibmV3TWV0YWRhdGFOb25jZSIsInN1YiIsInVtb2QiLCJjdXJ2ZSIsImdlbmVyYXRlTWV0YWRhdGFQYXJhbXMiLCJzZXRNZXRhZGF0YSIsIl9jYWxsZWU1IiwidmVyaWZpZXJQYXJhbXMiLCJpZFRva2VuIiwiZXh0cmFQYXJhbXMiLCJwcm9taXNlQXJyIiwidG1wS2V5IiwicHViS2V5IiwidG9rZW5Db21taXRtZW50IiwiX2FyZ3M1IiwiX2NvbnRleHQ1Iiwia2VjY2FrMjU2IiwibWVzc2FnZXByZWZpeCIsInRva2VuY29tbWl0bWVudCIsInRlbXBwdWJ4IiwidGVtcHB1YnkiLCJ2ZXJpZmllcmlkZW50aWZpZXIiLCJwcm9taXNlQXJyUmVxdWVzdCIsIm5vZGVTaWdzIiwiX2kiLCJfaTIiLCJfcCIsImVuY3J5cHRlZCIsIml0ZW0iLCJpZHRva2VuIiwibm9kZXNpZ25hdHVyZXMiLCJfcmVmNSIsIl9jYWxsZWUzIiwic2hhcmVSZXNwb25zZXMiLCJjb21wbGV0ZWRSZXF1ZXN0cyIsInRocmVzaG9sZFB1YmxpY0tleSIsInNoYXJlUHJvbWlzZXMiLCJub2RlSW5kZXgiLCJfaTMiLCJtZXRhZGF0YSIsInNoYXJlc1Jlc29sdmVkIiwiZGVjcnlwdGVkU2hhcmVzIiwiYWxsQ29tYmlzIiwiX2xvb3AiLCJfY29udGV4dDMiLCJQdWJsaWNLZXkiLCJzb3J0IiwiYiIsIkluZGV4IiwiY21wIiwiTWV0YWRhdGEiLCJhdG9iIiwiU2hhcmUiLCJwYWRTdGFydCIsImRlYnVnIiwiY3VyciIsImN1cnJlbnRDb21iaSIsImN1cnJlbnRDb21iaVNoYXJlcyIsInNoYXJlcyIsImluZGljZXMiLCJkZXJpdmVkUHJpdmF0ZUtleSIsImxhZ3JhbmdlSW50ZXJwb2xhdGlvbiIsImRlY3J5cHRlZFB1YktleSIsImRlY3J5cHRlZFB1YktleVgiLCJkZWNyeXB0ZWRQdWJLZXlZIiwiX3gxMCIsIl94MTEiLCJfcmVmNiIsIl9jYWxsZWU0IiwicmV0dXJuZWRLZXkiLCJfeWllbGQkX3RoaXMkZ2V0Tm9uY2UiLCJldGhBZGRyZXNzIiwiX2NvbnRleHQ0IiwiZ2V0Tm9uY2UiLCJnZXRNZXRhZGF0YSIsImdlbmVyYXRlQWRkcmVzc0Zyb21Qcml2S2V5IiwiX3gxMiIsIl9jYWxsZWU2IiwibWV0YWRhdGFSZXNwb25zZSIsIl9jb250ZXh0NiIsIl94MTMiLCJfeDE0Iiwic2V0RGF0YSIsInRpbWVzdGFtcCIsIkRhdGUiLCJub3ciLCJzaWduIiwic2V0X2RhdGEiLCJzaWduYXR1cmUiLCJyIiwiX2NhbGxlZTciLCJfY29udGV4dDciLCJfeDE1IiwiX3gxNiIsInNlY3JldCIsInVwcGVyIiwibG93ZXIiLCJtdWwiLCJuZWciLCJ0ZW1wIiwiZGVsdGEiLCJpbnZtIiwicHVibGljS2V5IiwiZW5jb2RlIiwiZXRoQWRkcmVzc0xvd2VyIiwidG9DaGVja3N1bUFkZHJlc3MiLCJwdWJsaWNLZXlYIiwicHVibGljS2V5WSIsIl9jYWxsZWU4IiwiX3JlZjciLCJpc0V4dGVuZGVkIiwiX3JlZjgiLCJfbm9uY2UiLCJfZmluYWxLZXlSZXN1bHQka2V5cyQyIiwiX3lpZWxkJHRoaXMkZ2V0T3JTZXROMiIsIl9hcmdzOCIsIl9jb250ZXh0OCIsIl94MTciLCJfeDE4IiwiX3gxOSIsIl9jYWxsZWU5IiwiZ2V0T25seSIsIl9hcmdzOSIsIl9jb250ZXh0OSIsIl94MjAiLCJfeDIxIiwiX3gyMiIsIl9jYWxsZWUxMCIsIl9jb250ZXh0MTAiLCJfeDIzIiwiX3gyNCIsIl94MjUiLCJwcml2S2V5Qk4iLCJub25jZUJOIiwiaXNTdHJlYW0iLCJMT0dJTl9QUk9WSURFUiIsIkdPT0dMRSIsIkZBQ0VCT09LIiwiVFdJVENIIiwiUkVERElUIiwiRElTQ09SRCIsIldBTExFVF9PUEVOTE9HSU5fVkVSSUZJRVJfTUFQIiwiUEFZTUVOVF9QUk9WSURFUiIsIk1PT05QQVkiLCJXWVJFIiwiUkFNUE5FVFdPUksiLCJYQU5QT09MIiwiTUVSQ1VSWU8iLCJUUkFOU0FLIiwiVE9SVVNfQlVJTERfRU5WIiwiUFJPRFVDVElPTiIsIkRFVkVMT1BNRU5UIiwiQklOQU5DRSIsIlRFU1RJTkciLCJMUkMiLCJCRVRBIiwiQlVUVE9OX1BPU0lUSU9OIiwiQk9UVE9NX0xFRlQiLCJUT1BfTEVGVCIsIkJPVFRPTV9SSUdIVCIsIlRPUF9SSUdIVCIsInBheW1lbnRQcm92aWRlcnMkMSIsImxpbmUxIiwibGluZTIiLCJsaW5lMyIsInN1cHBvcnRQYWdlIiwibWluT3JkZXJWYWx1ZSIsIm1heE9yZGVyVmFsdWUiLCJ2YWxpZEN1cnJlbmNpZXMiLCJ2YWxpZENyeXB0b0N1cnJlbmNpZXMiLCJpbmNsdWRlRmVlcyIsImVuZm9yY2VNYXgiLCJzZWxsIiwiY29uZmlndXJhdGlvbiIsInN1cHBvcnRlZFZlcmlmaWVyTGlzdCIsInBheW1lbnRQcm92aWRlcnMiLCJhcGkiLCJ0cmFuc2xhdGlvbnMiLCJlbiIsImVtYmVkIiwiY29udGludWUiLCJhY3Rpb25SZXF1aXJlZCIsInBlbmRpbmdBY3Rpb24iLCJjb29raWVzUmVxdWlyZWQiLCJlbmFibGVDb29raWVzIiwiY2xpY2tIZXJlIiwiZGUiLCJqYSIsImtvIiwiemgiLCJwcm9kVG9ydXNVcmwiLCJsb2NhbFN0b3JhZ2VLZXkiLCJsb2NhdGlvbiIsImhvc3RuYW1lIiwicnVuT25Mb2FkIiwiZG9jdW1lbnQiLCJodG1sVG9FbGVtZW50IiwiaHRtbCIsInRlbXBsYXRlIiwiY3JlYXRlRWxlbWVudCIsInRyaW1tZWRIdG1sIiwidHJpbSIsImlubmVySFRNTCIsImNvbnRlbnQiLCJmaXJzdENoaWxkIiwiaGFuZGxlU3RyZWFtIiwiaGFuZGxlIiwiZXZlbnROYW1lIiwiaGFuZGxlcldyYXBwZXIiLCJtZXNzYWdlcyIsImRpc2Nvbm5lY3RlZCIsInBlcm1hbmVudGx5RGlzY29ubmVjdGVkIiwic2VuZFNpdGVNZXRhZGF0YSIsInVuc3VwcG9ydGVkU3luYyIsImludmFsaWREdXBsZXhTdHJlYW0iLCJpbnZhbGlkT3B0aW9ucyIsIm1heEV2ZW50TGlzdGVuZXJzIiwic2hvdWxkU2VuZE1ldGFkYXRhIiwiaW52YWxpZFJlcXVlc3RBcmdzIiwiaW52YWxpZFJlcXVlc3RNZXRob2QiLCJpbnZhbGlkUmVxdWVzdFBhcmFtcyIsImludmFsaWRMb2dnZXJPYmplY3QiLCJpbnZhbGlkTG9nZ2VyTWV0aG9kIiwiY29ubmVjdGVkIiwiY2hhaW5JZCIsIndhcm5pbmdzIiwiZW5hYmxlRGVwcmVjYXRpb24iLCJzZW5kRGVwcmVjYXRpb24iLCJjbG9zZSIsIm5ldHdvcmtDaGFuZ2VkIiwibm90aWZpY2F0aW9uIiwicHVibGljQ29uZmlnU3RvcmUiLCJsb2dTdHJlYW1EaXNjb25uZWN0V2FybmluZyIsInJlbW90ZUxhYmVsIiwiZW1pdHRlciIsIndhcm5pbmdNc2ciLCJsaXN0ZW5lckNvdW50IiwiZ2V0UHJlb3Blbkluc3RhbmNlSWQiLCJnZXRUb3J1c1VybCIsImJ1aWxkRW52IiwiaW50ZWdyaXR5IiwidG9ydXNVcmwiLCJsb2dMZXZlbCIsInZlcnNpb25Vc2VkIiwidmVyc2lvbiIsImdldFVzZXJMYW5ndWFnZSIsInVzZXJMYW5ndWFnZSIsIm5hdmlnYXRvciIsImxhbmd1YWdlIiwidXNlckxhbmd1YWdlcyIsIkVNSVRURURfTk9USUZJQ0FUSU9OUyIsIk5PT1AiLCJGRUFUVVJFU19QUk9WSURFUl9DSEFOR0VfV0lORE9XIiwiRkVBVFVSRVNfQ09ORklSTV9XSU5ET1ciLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwidW53cmFwUmVzdWx0IiwiVG9ydXNJbnBhZ2VQcm92aWRlciIsImNvbm5lY3Rpb25TdHJlYW0iLCJqc29uUnBjU3RyZWFtTmFtZSIsIl9zZW50V2FybmluZ3MiLCJlbmFibGUiLCJleHBlcmltZW50YWxNZXRob2RzIiwic2VuZCIsIl93cml0YWJsZVN0YXRlIiwiaXNXcml0YWJsZVN0cmVhbSIsIl9yZWFkIiwiX3JlYWRhYmxlU3RhdGUiLCJpc1JlYWRhYmxlU3RyZWFtIiwiaXNUb3J1cyIsInNldE1heExpc3RlbmVycyIsIl9kZWZhdWx0U3RhdGUiLCJzZWxlY3RlZEFkZHJlc3MiLCJuZXR3b3JrVmVyc2lvbiIsIl9oYW5kbGVBY2NvdW50c0NoYW5nZWQiLCJfaGFuZGxlQ2hhaW5DaGFuZ2VkIiwiX2hhbmRsZVVubG9ja1N0YXRlQ2hhbmdlZCIsIl9oYW5kbGVDb25uZWN0IiwiX2hhbmRsZURpc2Nvbm5lY3QiLCJfaGFuZGxlU3RyZWFtRGlzY29ubmVjdCIsIl9zZW5kU3luYyIsIl9ycGNSZXF1ZXN0IiwiX3dhcm5PZkRlcHJlY2F0aW9uIiwiX2luaXRpYWxpemVTdGF0ZSIsInJlcXVlc3QiLCJzZW5kQXN5bmMiLCJtdXgiLCJfcHVibGljQ29uZmlnU3RvcmUiLCJzdG9yYWdlS2V5IiwiY3JlYXRlU3RyZWFtIiwiaWdub3JlU3RyZWFtIiwiaXNDb25uZWN0ZWQiLCJqc29uUnBjQ29ubmVjdGlvbiIsImlkTWFwIiwicmVhZCIsInByb2Nlc3NSZXNwb25zZSIsInByb2Nlc3NOb3RpZmljYXRpb24iLCJjcmVhdGVTdHJlYW1NaWRkbGV3YXJlIiwicnBjRW5naW5lIiwiX2VuZCIsIm9yaWdpbmFsSWQiLCJuZXdJZCIsImV0aEVycm9ycyIsIl9ycGNFbmdpbmUiLCJwYXlsb2FkIiwibGlzdGVuZXIiLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwiYWNjb3VudHMiLCJpc1VubG9ja2VkIiwiaW5pdGlhbGl6ZWQiLCJpc0ludGVybmFsIiwiX3BheWxvYWQiLCJ0cnlQcmVvcGVuSGFuZGxlIiwibWV0aG9kT3JQYXlsb2FkIiwiY2FsbGJhY2tPckFyZ3MiLCJpc1JlY292ZXJhYmxlIiwiZXJyb3JNZXNzYWdlIiwiaXNQZXJtYW5lbnRseURpc2Nvbm5lY3RlZCIsIkV0aGVyZXVtUnBjRXJyb3IiLCJzdHJlYW1OYW1lIiwiaXNFdGhBY2NvdW50cyIsImZpbmFsQWNjb3VudHMiLCJhY2NvdW50IiwiaGFzRW1pdHRlZENvbm5lY3Rpb24iLCJoYXNoZXMiLCJpbnRlcm5hbEhhc2hlcyIsImFsZ29yaXRobXMiLCJhbGdvcml0aG0iLCJQb3B1cEhhbmRsZXIiLCJmZWF0dXJlcyIsImR1YWxTY3JlZW5MZWZ0Iiwic2NyZWVuTGVmdCIsInNjcmVlblgiLCJkdWFsU2NyZWVuVG9wIiwic2NyZWVuVG9wIiwic2NyZWVuWSIsIndpZHRoIiwiaW5uZXJXaWR0aCIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudFdpZHRoIiwic2NyZWVuIiwiaGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJsZWZ0IiwiYWJzIiwiZ2V0UG9wdXBGZWF0dXJlcyIsIndpbmRvd1RpbWVyIiwiaUNsb3NlZFdpbmRvdyIsIl9zZXR1cFRpbWVyIiwic2V0SW50ZXJ2YWwiLCJjbG9zZWQiLCJjbGVhckludGVydmFsIiwiX2EiLCJvcGVuIiwiZm9jdXMiLCJsb2NhdGlvblJlcGxhY2VPblJlZGlyZWN0IiwiaW1nRXhpc3RzIiwiaW1nIiwib25sb2FkIiwib25lcnJvciIsInNyYyIsImdldFNpdGVOYW1lIiwic2l0ZU5hbWUiLCJxdWVyeVNlbGVjdG9yIiwibWV0YVRpdGxlIiwidGl0bGUiLCJnZXRTaXRlSWNvbiIsImljb24iLCJxdWVyeVNlbGVjdG9yQWxsIiwiZmluZCIsIl9pY29uIiwiZGVmYXVsdFZlcmlmaWVycyIsImlmcmFtZUludGVncml0eSIsIlVOU0FGRV9NRVRIT0RTIiwiaXNMb2NhbFN0b3JhZ2VBdmFpbGFibGUiLCJzdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJzdG9yYWdlQXZhaWxhYmxlIiwidG9ydXNJZnJhbWVIdG1sIiwiY2hlY2siLCJjcm9zc09yaWdpbiIsInJlbCIsInJlbExpc3QiLCJzdXBwb3J0cyIsImhlYWQiLCJhcHBlbmRDaGlsZCIsImJ1dHRvblBvc2l0aW9uIiwibW9kYWxaSW5kZXgiLCJpc0xvZ2dlZEluIiwiaXNJbml0aWFsaXplZCIsInRvcnVzV2lkZ2V0VmlzaWJpbGl0eSIsInJlcXVlc3RlZFZlcmlmaWVyIiwiY3VycmVudFZlcmlmaWVyIiwibm9kZURldGFpbE1hbmFnZXIiLCJ0b3J1c0pzIiwiYWxlcnRaSW5kZXgiLCJpc0lmcmFtZUZ1bGxTY3JlZW4iLCJkYXBwU3RvcmFnZUtleSIsImVuYWJsZUxvZ2dpbmciLCJlbmFibGVkVmVyaWZpZXJzIiwiaG9zdCIsIm5ldHdvcmtOYW1lIiwiYmxvY2tFeHBsb3JlciIsInRpY2tlciIsInRpY2tlck5hbWUiLCJsb2dpbkNvbmZpZyIsInNob3dUb3J1c0J1dHRvbiIsIndoaXRlTGFiZWwiLCJza2lwVEtleSIsInVzZUxvY2FsU3RvcmFnZSIsInNldERlZmF1bHRMZXZlbCIsInN0b3JlZEtleSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJnZW5lcmF0ZWRLZXkiLCJ0b3J1c0lmcmFtZVVybCIsInBhdGhuYW1lIiwiZW5kc1dpdGgiLCJ0b3J1c0lmcmFtZSIsInRvcnVzQWxlcnRDb250YWluZXIiLCJzdHlsZSIsImRpc3BsYXkiLCJzZXRQcm9wZXJ0eSIsImxpbmsiLCJzZXRBdHRyaWJ1dGUiLCJzdHlsZUxpbmsiLCJkZWZhdWx0TGFuZ3VhZ2UiLCJjdXN0b21UcmFuc2xhdGlvbnMiLCJsYW5ndWFnZVRyYW5zbGF0aW9ucyIsImVtYmVkVHJhbnNsYXRpb25zIiwiaGFuZGxlU2V0dXAiLCJyZWFkeVN0YXRlIiwiaGFuZGxlckFyZ3MiLCJoYW5kbGVFdmVudCIsImRvY3VtZW50UmVhZHkiLCJfc2V0dXBXZWIzIiwiaW5pdFN0cmVhbSIsImNvbW11bmljYXRpb25NdXgiLCJnZXRTdHJlYW0iLCJzdWNjZXNzIiwiX2Rpc3BsYXlJZnJhbWUiLCJmZXRjaFVybCIsImNhY2hlIiwiY2FsY3VsYXRlZEludGVncml0eSIsImZpbmFsT3B0aW9ucyIsImRlbGltaXRlciIsImZ1bGwiLCJkZWZhdWx0cyIsInNyaSIsIm91dHB1dCIsIm1haW4iLCJ0ZXh0IiwiY2xlYXJJbml0IiwiZXRoZXJldW0iLCJzdGF0dXNTdHJlYW0iLCJzdGF0dXMiLCJsb2dnZWRJbiIsImxvZ291dCIsImlzRWxlbWVudCIsImVsZW1lbnQiLCJFbGVtZW50IiwiSFRNTERvY3VtZW50IiwiY29udGFpbnMiLCJyZW1vdmUiLCJ0b3J1c0FsZXJ0IiwiX3NlbmRXaWRnZXRWaXNpYmlsaXR5U3RhdHVzIiwicmVzdCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiX19yZXN0IiwicHJvdmlkZXJDaGFuZ2VTdHJlYW0iLCJwcmVvcGVuSW5zdGFuY2VJZCIsIl9oYW5kbGVXaW5kb3ciLCJvdmVycmlkZSIsInBhdGgiLCJzaG93V2FsbGV0U3RyZWFtIiwiZmluYWxQYXRoIiwiaW5zdGFuY2VJZCIsImZpbmFsVXJsIiwic2VhcmNoUGFyYW1zIiwiYXBwZW5kIiwibm9kZURldGFpbHMiLCJ3YWxsZXRWZXJpZmllciIsIm9wZW5sb2dpblZlcmlmaWVyIiwiZXhpc3RpbmdWMVVzZXIiLCJnZXRVc2VyVHlwZUFuZEFkZHJlc3MiLCJ2MlVzZXIiLCJuZXdWMlVzZXIiLCJ1c2VySW5mb0FjY2Vzc1N0cmVhbSIsInVzZXJJbmZvQWNjZXNzSGFuZGxlciIsImFwcHJvdmVkIiwibmV3UmVxdWVzdCIsInVzZXJJbmZvU3RyZWFtIiwiaGFuZGxlckNodW5rIiwicHJvdmlkZXIiLCJpc1ZhbGlkIiwic2VsZWN0ZWRQcm92aWRlciIsInNlbGVjdGVkUGFyYW1zIiwiZmlhdFZhbHVlIiwicmVxdWVzdGVkT3JkZXJBbW91bnQiLCJwYXJzZUZsb2F0Iiwic2VsZWN0ZWRDdXJyZW5jeSIsInNlbGVjdGVkQ3J5cHRvQ3VycmVuY3kiLCJ2YWxpZGF0ZVBheW1lbnRQcm92aWRlciIsInRvcHVwU3RyZWFtIiwid2luZG93U3RyZWFtIiwiaGFuZGxlZFdpbmRvdyIsIl9jcmVhdGVQb3B1cEJsb2NrQWxlcnQiLCJjbG9zZUhhbmRsZXIiLCJyZWNlaXZlZElkIiwidGhlbWUiLCJpc0RhcmsiLCJjb2xvcnMiLCJjbGFzc0xpc3QiLCJ0b3J1c0JyYW5kMSIsInRvcnVzR3JheTIiLCJfYiIsIl9jIiwiX2QiLCJsb2dvVXJsIiwibG9nb0xpZ2h0IiwibG9nb0RhcmsiLCJpc0Z1bGwiLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsIm1ldGFtYXNrU3RyZWFtIiwiY29udGVudFdpbmRvdyIsImNvbW11bmljYXRpb25TdHJlYW0iLCJpbnBhZ2VQcm92aWRlciIsImRldGVjdEFjY291bnRSZXF1ZXN0UHJvdG90eXBlTW9kaWZpZXIiLCJvcmlnaW5hbE1ldGhvZCIsImhhbmRsZUxvZ2luQ2IiLCJfc2hvd0xvZ2luUG9wdXAiLCJpc0xvZ2luQ2FsbGJhY2siLCJwcm94aWVkSW5wYWdlUHJvdmlkZXIiLCJkZWxldGVQcm9wZXJ0eSIsInNldHVwTXVsdGlwbGV4IiwiZW5naW5lIiwiZG9tYWluTWV0YWRhdGEiLCJvcmlnaW5hbEVycm9yIiwiY2FsbGVkRnJvbUVtYmVkIiwibG9naW5IYW5kbGVyIiwib2F1dGhTdHJlYW0iLCJfZ2V0TG9nb1VybCIsInN1Y2Nlc3NBbGVydCIsImJ0bkNvbnRhaW5lciIsIl9zZXRFbWJlZFdoaXRlTGFiZWwiLCJwb3NzaWJsZU5hbWVzIiwiZ2xvYmFsVGhpcyIsIm1vZHVsZSIsIm91dCIsInBhZF9zdHJpbmdfMSIsImlucHV0IiwiZW5jb2RpbmciLCJmcm9tQmFzZTY0IiwidG9CYXNlNjQiLCJiYXNlNjR1cmwiLCJiYXNlNjQiLCJkZWNvZGUiLCJ0b0J1ZmZlciIsInN0cmluZ0xlbmd0aCIsImRpZmYiLCJwb3NpdGlvbiIsInBhZExlbmd0aCIsInBhZGRlZFN0cmluZ0xlbmd0aCIsImJ1ZmZlciIsIiRnT1BEIiwiR2V0SW50cmluc2ljIiwibmFpdmVGYWxsYmFjayIsIl9fZ2xvYmFsX18iLCJ1dGlsc18xIiwiaXNCbG9vbSIsImJsb29tIiwiaXNJbkJsb29tIiwiYnl0ZXNUb0hleCIsImJpdHBvcyIsInBhcnNlSW50Iiwic3Vic3RyIiwib2Zmc2V0IiwiY29kZVBvaW50VG9JbnQiLCJjaGFyQ29kZUF0IiwiY29kZVBvaW50IiwiaXNUb3BpYyIsInRvcGljIiwiaXNBZGRyZXNzIiwibWF0Y2giLCJpc1VzZXJFdGhlcmV1bUFkZHJlc3NJbkJsb29tIiwiZXRoZXJldW1BZGRyZXNzIiwicGFkTGVmdCIsImlzQ29udHJhY3RBZGRyZXNzSW5CbG9vbSIsImNvbnRyYWN0QWRkcmVzcyIsImlzVG9waWNJbkJsb29tIiwic2hhMyIsInRvQnl0ZUFycmF5Iiwic3Vic3RyaW5nIiwiYWRkU2xpY2UiLCJTdHJpbmciLCJpc0J5dGVBcnJheSIsImFycmF5Iiwia2VjY2FrXzI1NiIsImNoYXJzIiwiaGFzUHJlZml4IiwicGFkZGluZyIsImJ5dGVzIiwiaGV4IiwiZXF1YWwiLCJSZWdFeHAiLCJmbGFncyIsImhhc093biIsImN0eCIsImwiLCJoYXNTeW1ib2xzIiwidG9TdHJpbmdUYWciLCJoYXNUb1N0cmluZ1RhZyIsIiR0b1N0cmluZyIsImNhbGxCb3VuZCIsImlzU3RhbmRhcmRBcmd1bWVudHMiLCJpc0xlZ2FjeUFyZ3VtZW50cyIsImNhbGxlZSIsInN1cHBvcnRzU3RhbmRhcmRBcmd1bWVudHMiLCJHZW5lcmF0b3JGdW5jdGlvbiIsInRvU3RyIiwiZm5Ub1N0ciIsImlzRm5SZWdleCIsImdldFByb3RvIiwiZ2VuZXJhdG9yRnVuYyIsImdldEdlbmVyYXRvckZ1bmMiLCJhdmFpbGFibGVUeXBlZEFycmF5cyIsInR5cGVkQXJyYXlzIiwiJGluZGV4T2YiLCIkc2xpY2UiLCJ0b1N0clRhZ3MiLCJnT1BEIiwidHlwZWRBcnJheSIsInByb3RvIiwic3VwZXJQcm90byIsInRhZyIsImFueVRydWUiLCJnZXR0ZXIiLCJ0cnlUeXBlZEFycmF5cyIsInNwYWNlIiwiZiIsImN5Y2xlcyIsInJlcGxhY2VyIiwibm9kZSIsImFvYmoiLCJib2JqIiwic2VlbiIsImxldmVsIiwiaW5kZW50IiwiY29sb25TZXBhcmF0b3IiLCJ0b0pTT04iLCJvYmplY3RLZXlzIiwia2V5VmFsdWUiLCJzcGxpY2UiLCJwYXJzZSIsImF0IiwiY2giLCJlc2NhcGVlIiwiYyIsIm51bWJlciIsInN0cmluZyIsImlzRmluaXRlIiwidWZmZmYiLCJmcm9tQ2hhckNvZGUiLCJ3aGl0ZSIsIndvcmQiLCJyZXZpdmVyIiwid2FsayIsImhvbGRlciIsImdhcCIsInJlcCIsImVzY2FwYWJsZSIsIm1ldGEiLCJxdW90ZSIsImxhc3RJbmRleCIsInBhcnRpYWwiLCJtaW5kIiwiSEFTSF9VTkRFRklORUQiLCJNQVhfU0FGRV9JTlRFR0VSIiwiYXJnc1RhZyIsImZ1bmNUYWciLCJvYmplY3RUYWciLCJyZUlzSG9zdEN0b3IiLCJyZUlzVWludCIsInR5cGVkQXJyYXlUYWdzIiwiZnJlZUdsb2JhbCIsImZyZWVTZWxmIiwicm9vdCIsImZyZWVFeHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwibW9kdWxlRXhwb3J0cyIsImZyZWVQcm9jZXNzIiwicHJvY2VzcyIsIm5vZGVVdGlsIiwicmVxdWlyZSIsInR5cGVzIiwiYmluZGluZyIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJmdW5jIiwidWlkIiwidHJhbnNmb3JtIiwiYXJyYXlQcm90byIsImZ1bmNQcm90byIsIm9iamVjdFByb3RvIiwiY29yZUpzRGF0YSIsImZ1bmNUb1N0cmluZyIsIm1hc2tTcmNLZXkiLCJleGVjIiwiSUVfUFJPVE8iLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsIm9iamVjdEN0b3JTdHJpbmciLCJyZUlzTmF0aXZlIiwiZ2V0UHJvdG90eXBlIiwiYWxsb2NVbnNhZmUiLCJvYmplY3RDcmVhdGUiLCJzeW1Ub1N0cmluZ1RhZyIsImdldE5hdGl2ZSIsIm5hdGl2ZUlzQnVmZmVyIiwibmF0aXZlTWF4IiwibWF4IiwibmF0aXZlTm93IiwibmF0aXZlQ3JlYXRlIiwiYmFzZUNyZWF0ZSIsImlzT2JqZWN0IiwiSGFzaCIsImVudHJpZXMiLCJjbGVhciIsImVudHJ5IiwiTGlzdENhY2hlIiwiTWFwQ2FjaGUiLCJTdGFjayIsIl9fZGF0YV9fIiwiYXNzaWduTWVyZ2VWYWx1ZSIsImVxIiwiYmFzZUFzc2lnblZhbHVlIiwiYXNzaWduVmFsdWUiLCJvYmpWYWx1ZSIsImFzc29jSW5kZXhPZiIsInBvcCIsImdldE1hcERhdGEiLCJwYWlycyIsIkxBUkdFX0FSUkFZX1NJWkUiLCJiYXNlR2V0VGFnIiwiaXNPd24iLCJ1bm1hc2tlZCIsImdldFJhd1RhZyIsIm9iamVjdFRvU3RyaW5nIiwiYmFzZUlzQXJndW1lbnRzIiwiaXNPYmplY3RMaWtlIiwiYmFzZU1lcmdlIiwic3JjSW5kZXgiLCJjdXN0b21pemVyIiwiaXRlcmF0ZWUiLCJrZXlzRnVuYyIsIml0ZXJhYmxlIiwiYmFzZUZvciIsInNyY1ZhbHVlIiwibWVyZ2VGdW5jIiwic2FmZUdldCIsInN0YWNrZWQiLCJhcnJheUJ1ZmZlciIsIm5ld1ZhbHVlIiwiaXNDb21tb24iLCJpc0FyciIsImlzQnVmZiIsImlzVHlwZWQiLCJpc0FycmF5TGlrZSIsImNvcHlBcnJheSIsImlzRGVlcCIsImNsb25lQnVmZmVyIiwiYnl0ZUxlbmd0aCIsImJ5dGVPZmZzZXQiLCJDdG9yIiwiaXNQbGFpbk9iamVjdCIsImlzQXJndW1lbnRzIiwiaXNOZXciLCJjb3B5T2JqZWN0Iiwia2V5c0luIiwidG9QbGFpbk9iamVjdCIsImlzRnVuY3Rpb24iLCJpc1Byb3RvdHlwZSIsImluaXRDbG9uZU9iamVjdCIsImJhc2VNZXJnZURlZXAiLCJnZXRWYWx1ZSIsImlzTWFza2VkIiwidG9Tb3VyY2UiLCJiYXNlSXNOYXRpdmUiLCJpc0luZGV4Iiwic2V0VG9TdHJpbmciLCJjb3VudCIsImxhc3RDYWxsZWQiLCJzdGFtcCIsInJlbWFpbmluZyIsInNob3J0T3V0IiwiaWRlbnRpdHkiLCJvdGhlciIsImlzTGVuZ3RoIiwiYmFzZVVuYXJ5IiwiaW5oZXJpdGVkIiwiaXNBcmciLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsImJhc2VUaW1lcyIsImFycmF5TGlrZUtleXMiLCJuYXRpdmVLZXlzSW4iLCJpc1Byb3RvIiwiYmFzZUtleXNJbiIsImFzc2lnbmVyIiwibWVyZ2UiLCJzdGFydCIsIm90aGVyQXJncyIsIm92ZXJSZXN0IiwiYmFzZVJlc3QiLCJzb3VyY2VzIiwiZ3VhcmQiLCJpc0l0ZXJhdGVlQ2FsbCIsImRlZmluaXRpb24iLCJ1bmRlZmluZWRUeXBlIiwiaXNJRSIsInVzZXJBZ2VudCIsImxvZ01ldGhvZHMiLCJiaW5kTWV0aG9kIiwibWV0aG9kTmFtZSIsInRyYWNlRm9ySUUiLCJ0cmFjZSIsInJlYWxNZXRob2QiLCJyZXBsYWNlTG9nZ2luZ01ldGhvZHMiLCJsb2dnZXJOYW1lIiwibWV0aG9kRmFjdG9yeSIsImVuYWJsZUxvZ2dpbmdXaGVuQ29uc29sZUFycml2ZXMiLCJkZWZhdWx0TWV0aG9kRmFjdG9yeSIsIkxvZ2dlciIsImRlZmF1bHRMZXZlbCIsImZhY3RvcnkiLCJjdXJyZW50TGV2ZWwiLCJnZXRQZXJzaXN0ZWRMZXZlbCIsInN0b3JlZExldmVsIiwiaWdub3JlIiwiY29va2llIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwibGV2ZWxzIiwiZ2V0TGV2ZWwiLCJzZXRMZXZlbCIsInBlcnNpc3QiLCJTSUxFTlQiLCJsZXZlbE51bSIsImxldmVsTmFtZSIsInBlcnNpc3RMZXZlbElmUG9zc2libGUiLCJyZXNldExldmVsIiwiY2xlYXJQZXJzaXN0ZWRMZXZlbCIsIlRSQUNFIiwiaW5pdGlhbExldmVsIiwiZGVmYXVsdExvZ2dlciIsIl9sb2dnZXJzQnlOYW1lIiwiZ2V0TG9nZ2VyIiwibG9nZ2VyIiwiX2xvZyIsIm5vQ29uZmxpY3QiLCJnZXRMb2dnZXJzIiwibW9kdWxlcyIsImluc3RhbGxlZE1vZHVsZXMiLCJtb2R1bGVJZCIsImQiLCJwcm9wZXJ0eSIsIl9fd2VicGFja19leHBvcnRzX18iLCJwYXJ0aWFsQ29tcGxldGUiLCJjb21wb3NlMiIsImF0dHIiLCJsYXp5VW5pb24iLCJ2YXJBcmdzIiwiZmxpcCIsImxhenlJbnRlcnNlY3Rpb24iLCJhbHdheXMiLCJmdW5jdG9yIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19saXN0c19fIiwibnVtQm91bmRBcmdzIiwiY2FsbEFyZ3MiLCJmMSIsImYyIiwiZm5zIiwiZm5zTGlzdCIsImN1ckZuIiwic3RhcnRQYXJhbXMiLCJtYXliZVZhbHVlIiwibnVtYmVyT2ZGaXhlZEFyZ3VtZW50cyIsImFyZ3NIb2xkZXIiLCJmbjEiLCJmbjIiLCJwYXJhbSIsInZhbCIsImNvbnMiLCJ0YWlsIiwiYXJyYXlBc0xpc3QiLCJsaXN0IiwibGlzdEFzQXJyYXkiLCJmb2xkUiIsIndpdGhvdXQiLCJhcHBseUVhY2giLCJyZXZlcnNlTGlzdCIsImZpcnN0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mdW5jdGlvbmFsX18iLCJ4cyIsImVtcHR5TGlzdCIsImlucHV0QXJyYXkiLCJhcnJheVNvRmFyIiwibGlzdEl0ZW0iLCJ1bnNoaWZ0Iiwic3RhcnRWYWx1ZSIsInJlbW92ZWRGbiIsIndpdGhvdXRJbm5lciIsInN1Ykxpc3QiLCJmbkxpc3QiLCJyZXZlcnNlSW5uZXIiLCJyZXZlcnNlZEFscmVhZHkiLCJpc09mVHlwZSIsImlzU3RyaW5nIiwiZGVmaW5lZCIsImhhc0FsbFByb3BlcnRpZXMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2Z1bmN0aW9uYWxfXyIsIlQiLCJtYXliZVNvbWV0aGluZyIsImZpZWxkTGlzdCIsImZpZWxkIiwiTk9ERV9PUEVORUQiLCJOT0RFX0NMT1NFRCIsIk5PREVfU1dBUCIsIk5PREVfRFJPUCIsIkZBSUxfRVZFTlQiLCJST09UX05PREVfRk9VTkQiLCJST09UX1BBVEhfRk9VTkQiLCJIVFRQX1NUQVJUIiwiU1RSRUFNX0RBVEEiLCJTVFJFQU1fRU5EIiwiQUJPUlRJTkciLCJTQVhfS0VZIiwiU0FYX1ZBTFVFX09QRU4iLCJTQVhfVkFMVUVfQ0xPU0UiLCJlcnJvclJlcG9ydCIsIl9TIiwic3RhdHVzQ29kZSIsImpzb25Cb2R5IiwidGhyb3duIiwibmFtZWROb2RlIiwia2V5T2YiLCJub2RlT2YiLCJvYm9lIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX191dGlsX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2RlZmF1bHRzX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX3dpcmVfXyIsImFyZzEiLCJub2RlU3RyZWFtTWV0aG9kTmFtZXMiLCJ3aXRoQ3JlZGVudGlhbHMiLCJjYWNoZWQiLCJkcm9wIiwiaW5jcmVtZW50YWxDb250ZW50QnVpbGRlciIsIlJPT1RfUEFUSCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZXZlbnRzX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2FzY2VudF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19saXN0c19fIiwib2JvZUJ1cyIsImVtaXROb2RlT3BlbmVkIiwiZW1pdE5vZGVDbG9zZWQiLCJlbWl0Um9vdE9wZW5lZCIsImVtaXRSb290Q2xvc2VkIiwiYXBwZW5kQnVpbHRDb250ZW50IiwiYW5jZXN0b3JCcmFuY2hlcyIsImtleUZvdW5kIiwiYXNjZW50IiwibmV3RGVlcGVzdE5hbWUiLCJtYXliZU5ld0RlZXBlc3ROb2RlIiwiYXNjZW50V2l0aE5ld1BhdGgiLCJjb250ZW50QnVpbGRlckhhbmRsZXJzIiwibmV3RGVlcGVzdE5vZGUiLCJhcnJheUNvbnNpc3RlbnRBc2NlbnQiLCJwb3NzaWJseUluY29uc2lzdGVudEFzY2VudCIsInBhcmVudE5vZGUiLCJhcnJheUluZGljZXNBcmVLZXlzIiwicHJldmlvdXNseVVubWFwcGVkTmFtZSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fcHVibGljQXBpX18iLCJhcHBseURlZmF1bHRzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX191dGlsX18iLCJwYXNzdGhyb3VnaCIsImh0dHBNZXRob2ROYW1lIiwiYmFzZVVybCIsImdldFRpbWUiLCJtb2RpZmllZFVybCIsIndpcmUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX3B1YlN1Yl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19hc2NlbnRNYW5hZ2VyX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2luY3JlbWVudGFsQ29udGVudEJ1aWxkZXJfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fcGF0dGVybkFkYXB0ZXJfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fanNvblBhdGhfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9faW5zdGFuY2VBcGlfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fbGlic19jbGFyaW5ldF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X19zdHJlYW1pbmdIdHRwX25vZGVfXyIsImNvbnRlbnRTb3VyY2UiLCJwdWJTdWIiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX3NpbmdsZUV2ZW50UHViU3ViX18iLCJzaW5nbGVzIiwibmV3TGlzdGVuZXIiLCJuZXdTaW5nbGUiLCJwdWJTdWJJbnN0YW5jZSIsInNpbmdsZUV2ZW50UHViU3ViIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX191dGlsX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2Z1bmN0aW9uYWxfXyIsImV2ZW50VHlwZSIsImxpc3RlbmVyVHVwbGVMaXN0IiwibGlzdGVuZXJMaXN0IiwiaGFzSWQiLCJ0dXBsZSIsImxpc3RlbmVySWQiLCJ1biIsInJlbW92ZWQiLCJoYXNMaXN0ZW5lciIsImFzY2VudE1hbmFnZXIiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2FzY2VudF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19ldmVudHNfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fbGlzdHNfXyIsInN0YXRlQWZ0ZXIiLCJuZXdOb2RlIiwib2xkSGVhZCIsImFuY2VzdG9ycyIsInBhdHRlcm5BZGFwdGVyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19saXN0c19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19hc2NlbnRfXyIsImpzb25QYXRoQ29tcGlsZXIiLCJwcmVkaWNhdGVFdmVudE1hcCIsImZ1bGxFdmVudE5hbWUiLCJwcmVkaWNhdGVFdmVudCIsImNvbXBpbGVkSnNvblBhdGgiLCJlbWl0TWF0Y2giLCJtYXliZU1hdGNoaW5nTWFwcGluZyIsImRlc2NlbnQiLCJlbWl0TWF0Y2hpbmdOb2RlIiwicmVtb3ZlZEV2ZW50TmFtZSIsImFkZFVuZGVybHlpbmdMaXN0ZW5lciIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fdXRpbF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19pbmNyZW1lbnRhbENvbnRlbnRCdWlsZGVyX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2pzb25QYXRoU3ludGF4X18iLCJwYXRoTm9kZVN5bnRheCIsImRvdWJsZURvdFN5bnRheCIsImRvdFN5bnRheCIsImJhbmdTeW50YXgiLCJlbXB0eVN5bnRheCIsImhlYWRLZXkiLCJoZWFkTm9kZSIsImNhcHR1cmUiLCJwcmV2aW91c0V4cHIiLCJkZXRlY3Rpb24iLCJza2lwMSIsInJvb3RFeHByIiwiZ2VuZXJhdGVDbGF1c2VSZWFkZXJJZlRva2VuRm91bmQiLCJ0b2tlbkRldGVjdG9yIiwiY2xhdXNlRXZhbHVhdG9yR2VuZXJhdG9ycyIsImpzb25QYXRoIiwicGFyc2VyR2VuZXJhdGVkU29GYXIiLCJvblN1Y2Nlc3MiLCJkZXRlY3RlZCIsImNvbXBpbGVkUGFyc2VyIiwiZXhwcnMiLCJleHByIiwiZXhwcmVzc2lvbnNSZWFkZXIiLCJjbGF1c2VNYXRjaGVyIiwiY2xhdXNlRm9ySnNvblBhdGgiLCJmaWVsZExpc3RTdHIiLCJoYXNBbGxyZXF1aXJlZEZpZWxkcyIsImlzTWF0Y2giLCJtYXRjaGVzTmFtZSIsInRlcm1pbmFsQ2FzZVdoZW5BcnJpdmluZ0F0Um9vdCIsInRlcm1pbmFsQ2FzZVdoZW5QcmV2aW91c0V4cHJlc3Npb25Jc1NhdGlzZmllZCIsInJlY3Vyc2l2ZUNhc2UiLCJjYXNlcyIsImxhc3RDbGF1c2UiLCJleHByTWF0Y2giLCJyZXR1cm5Gb3VuZFBhcnNlciIsIl9yZW1haW5pbmdKc29uUGF0aCIsImNvbXBpbGVKc29uUGF0aFRvRnVuY3Rpb24iLCJ1bmNvbXBpbGVkSnNvblBhdGgiLCJqc29uUGF0aFN5bnRheCIsImpzb25QYXRoQ2xhdXNlIiwicG9zc2libHlDYXB0dXJpbmciLCJvcHRpb25hbEZpZWxkTGlzdCIsImpzb25QYXRoTmFtZWROb2RlSW5PYmplY3ROb3RhdGlvbiIsImpzb25QYXRoTmFtZWROb2RlSW5BcnJheU5vdGF0aW9uIiwianNvblBhdGhOdW1iZXJlZE5vZGVJbkFycmF5Tm90YXRpb24iLCJqc29uUGF0aFB1cmVEdWNrVHlwaW5nIiwianNvblBhdGhEb3VibGVEb3QiLCJqc29uUGF0aERvdCIsImpzb25QYXRoQmFuZyIsImVtcHR5U3RyaW5nIiwiY29tcG9uZW50UmVnZXhlcyIsInJlZ2V4IiwiaW5zdGFuY2VBcGkiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX3B1YmxpY0FwaV9fIiwib2JvZUFwaSIsImZ1bGx5UXVhbGlmaWVkTmFtZVBhdHRlcm4iLCJyb290Tm9kZUZpbmlzaGVkRXZlbnQiLCJlbWl0Tm9kZURyb3AiLCJlbWl0Tm9kZVN3YXAiLCJldmVudElkIiwiYWRkRm9yZ2V0dGFibGVDYWxsYmFjayIsIndyYXBDYWxsYmFja1RvU3dhcE5vZGVJZlNvbWV0aGluZ1JldHVybmVkIiwic2FmZUNhbGxiYWNrIiwicHJvdGVjdGVkQ2FsbGJhY2siLCJkaXNjYXJkIiwiZm9yZ2V0IiwicmV0dXJuVmFsdWVGcm9tQ2FsbGJhY2siLCJhZGRTaW5nbGVOb2RlT3JQYXRoTGlzdGVuZXIiLCJwYXR0ZXJuIiwiZWZmZWN0aXZlQ2FsbGJhY2siLCJmdWxseVF1YWxpZmllZFBhdHRlcm5NYXRjaEV2ZW50IiwiYWRkTm9kZU9yUGF0aExpc3RlbmVyQXBpIiwianNvblBhdGhPckxpc3RlbmVyTWFwIiwibGlzdGVuZXJNYXAiLCJhZGRNdWx0aXBsZU5vZGVPclBhdGhMaXN0ZW5lcnMiLCJyb290Tm9kZSIsIl9zdGF0dXNDb2RlIiwiaGVhZGVyIiwicDIiLCJwMyIsImZhaWwiLCJhYm9ydCIsImNsYXJpbmV0IiwiZXZlbnRCdXMiLCJsYXRlc3RFcnJvciIsInRleHROb2RlIiwiZW1pdFNheEtleSIsImVtaXRWYWx1ZU9wZW4iLCJlbWl0VmFsdWVDbG9zZSIsImVtaXRGYWlsIiwiTUFYX0JVRkZFUl9MRU5HVEgiLCJzdHJpbmdUb2tlblBhdHRlcm4iLCJfbiIsIkJFR0lOIiwiVkFMVUUiLCJPUEVOX09CSkVDVCIsIkNMT1NFX09CSkVDVCIsIk9QRU5fQVJSQVkiLCJDTE9TRV9BUlJBWSIsIlNUUklORyIsIk9QRU5fS0VZIiwiQ0xPU0VfS0VZIiwiVFJVRSIsIlRSVUUyIiwiVFJVRTMiLCJGQUxTRSIsIkZBTFNFMiIsIkZBTFNFMyIsIkZBTFNFNCIsIk5VTEwiLCJOVUxMMiIsIk5VTEwzIiwiTlVNQkVSX0RFQ0lNQUxfUE9JTlQiLCJidWZmZXJDaGVja1Bvc2l0aW9uIiwibnVtYmVyTm9kZSIsInNsYXNoZWQiLCJ1bmljb2RlUyIsInVuaWNvZGVJIiwiZGVwdGgiLCJjb2x1bW4iLCJsaW5lIiwiZW1pdEVycm9yIiwiZXJyb3JTdHJpbmciLCJ3aGl0ZXNwYWNlIiwibWF4QWN0dWFsIiwic3RhcnRpIiwiU1RSSU5HX0JJR0xPT1AiLCJyZVJlc3VsdCIsImh0dHBUcmFuc3BvcnQiLCJzdHJlYW1pbmdIdHRwIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19kZXRlY3RDcm9zc09yaWdpbl9icm93c2VyX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX3BhcnNlUmVzcG9uc2VIZWFkZXJzX2Jyb3dzZXJfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZnVuY3Rpb25hbF9fIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHIiLCJlbWl0U3RyZWFtRGF0YSIsIm51bWJlck9mQ2hhcnNBbHJlYWR5R2l2ZW5Ub0NhbGxiYWNrIiwic3RpbGxUb1NlbmRTdGFydEV2ZW50IiwiaGFuZGxlUHJvZ3Jlc3MiLCJ0ZXh0U29GYXIiLCJyZXNwb25zZVRleHQiLCJuZXdUZXh0Iiwic2VuZFN0YXJ0SWZOb3RBbHJlYWR5IiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwib25yZWFkeXN0YXRlY2hhbmdlIiwib25wcm9ncmVzcyIsImhlYWRlck5hbWUiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiaXNDcm9zc09yaWdpbiIsInBhZ2VMb2NhdGlvbiIsImFqYXhIb3N0IiwicG9ydE9mIiwicG9ydCIsInByb3RvY29sIiwicGFyc2VVcmxPcmlnaW4iLCJ1cmxIb3N0TWF0Y2giLCJwYXJzZVJlc3BvbnNlSGVhZGVycyIsImhlYWRlclN0ciIsImhlYWRlclBhaXIiLCJpc0hleFByZWZpeGVkIiwiRXJyb3JSZXNwb25zZSIsIkludmFsaWROdW1iZXJPZlBhcmFtcyIsImdvdCIsImV4cGVjdGVkIiwiSW52YWxpZENvbm5lY3Rpb24iLCJDb25uZWN0aW9uRXJyb3IiLCJJbnZhbGlkUHJvdmlkZXIiLCJJbnZhbGlkUmVzcG9uc2UiLCJDb25uZWN0aW9uVGltZW91dCIsIkNvbm5lY3Rpb25Ob3RPcGVuRXJyb3IiLCJDb25uZWN0aW9uQ2xvc2VFcnJvciIsInJlYXNvbiIsIk1heEF0dGVtcHRzUmVhY2hlZE9uUmVjb25uZWN0aW5nRXJyb3IiLCJQZW5kaW5nUmVxdWVzdHNPblJlY29ubmVjdGluZ0Vycm9yIiwiUmV2ZXJ0SW5zdHJ1Y3Rpb25FcnJvciIsIlRyYW5zYWN0aW9uUmV2ZXJ0SW5zdHJ1Y3Rpb25FcnJvciIsInJlY2VpcHQiLCJUcmFuc2FjdGlvbkVycm9yIiwiTm9Db250cmFjdEFkZHJlc3NGb3VuZEVycm9yIiwiQ29udHJhY3RDb2RlTm90U3RvcmVkRXJyb3IiLCJUcmFuc2FjdGlvblJldmVydGVkV2l0aG91dFJlYXNvbkVycm9yIiwiVHJhbnNhY3Rpb25PdXRPZkdhc0Vycm9yIiwiUmVzb2x2ZXJNZXRob2RNaXNzaW5nRXJyb3IiLCJDb250cmFjdE1pc3NpbmdBQklFcnJvciIsIkNvbnRyYWN0T25jZVJlcXVpcmVzQ2FsbGJhY2tFcnJvciIsIkNvbnRyYWN0RXZlbnREb2VzTm90RXhpc3RFcnJvciIsIkNvbnRyYWN0UmVzZXJ2ZWRFdmVudEVycm9yIiwiQ29udHJhY3RNaXNzaW5nRGVwbG95RGF0YUVycm9yIiwiQ29udHJhY3ROb0FkZHJlc3NEZWZpbmVkRXJyb3IiLCJDb250cmFjdE5vRnJvbUFkZHJlc3NEZWZpbmVkRXJyb3IiLCJ1dGlscyIsIkliYW4iLCJvdXRwdXRCaWdOdW1iZXJGb3JtYXR0ZXIiLCJ0b0JOIiwiaW5wdXRCbG9ja051bWJlckZvcm1hdHRlciIsImJsb2NrTnVtYmVyIiwiaXNQcmVkZWZpbmVkQmxvY2tOdW1iZXIiLCJpc0hleFN0cmljdCIsInRvTG93ZXJDYXNlIiwibnVtYmVyVG9IZXgiLCJfdHhJbnB1dEZvcm1hdHRlciIsInRvIiwiaW5wdXRBZGRyZXNzRm9ybWF0dGVyIiwiaXNIZXgiLCJnYXMiLCJnYXNMaW1pdCIsIm1heFByaW9yaXR5RmVlUGVyR2FzIiwibWF4RmVlUGVyR2FzIiwiZ2FzUHJpY2UiLCJvdXRwdXRUcmFuc2FjdGlvbkZvcm1hdHRlciIsInR4IiwiaGV4VG9OdW1iZXIiLCJ0cmFuc2FjdGlvbkluZGV4Iiwib3V0cHV0TG9nRm9ybWF0dGVyIiwiYmxvY2tIYXNoIiwidHJhbnNhY3Rpb25IYXNoIiwibG9nSW5kZXgiLCJzaGFJZCIsImliYW4iLCJpc0RpcmVjdCIsInRvQWRkcmVzcyIsImlucHV0RGVmYXVsdEJsb2NrTnVtYmVyRm9ybWF0dGVyIiwiZGVmYXVsdEJsb2NrIiwiaW5wdXRDYWxsRm9ybWF0dGVyIiwiZGVmYXVsdEFjY291bnQiLCJpbnB1dFRyYW5zYWN0aW9uRm9ybWF0dGVyIiwiaW5wdXRQb3N0Rm9ybWF0dGVyIiwidHRsIiwid29ya1RvUHJvdmUiLCJwcmlvcml0eSIsInRvcGljcyIsImZyb21VdGY4IiwiaW5wdXRMb2dGb3JtYXR0ZXIiLCJ0b1RvcGljIiwiZnJvbUJsb2NrIiwidG9CbG9jayIsImFkZHIiLCJpbnB1dFNpZ25Gb3JtYXR0ZXIiLCJ1dGY4VG9IZXgiLCJpbnB1dFN0b3JhZ2VLZXlzRm9ybWF0dGVyIiwib3V0cHV0UHJvb2ZGb3JtYXR0ZXIiLCJwcm9vZiIsImhleFRvTnVtYmVyU3RyaW5nIiwiYmFsYW5jZSIsIm91dHB1dFRyYW5zYWN0aW9uUmVjZWlwdEZvcm1hdHRlciIsImN1bXVsYXRpdmVHYXNVc2VkIiwiZ2FzVXNlZCIsImxvZ3MiLCJvdXRwdXRCbG9ja0Zvcm1hdHRlciIsImJsb2NrIiwiZGlmZmljdWx0eSIsInRvdGFsRGlmZmljdWx0eSIsInRyYW5zYWN0aW9ucyIsIm1pbmVyIiwiYmFzZUZlZVBlckdhcyIsIm91dHB1dFBvc3RGb3JtYXR0ZXIiLCJleHBpcnkiLCJ3b3JrUHJvdmVkIiwidG9VdGY4Iiwib3V0cHV0U3luY2luZ0Zvcm1hdHRlciIsInN0YXJ0aW5nQmxvY2siLCJjdXJyZW50QmxvY2siLCJoaWdoZXN0QmxvY2siLCJrbm93blN0YXRlcyIsInB1bGxlZFN0YXRlcyIsImZvcm1hdHRlcnMiLCJwcm9taUV2ZW50IiwiU3Vic2NyaXB0aW9ucyIsIkV0aGVyc1RyYW5zYWN0aW9uVXRpbHMiLCJNZXRob2QiLCJpbnB1dEZvcm1hdHRlciIsIm91dHB1dEZvcm1hdHRlciIsInRyYW5zZm9ybVBheWxvYWQiLCJleHRyYUZvcm1hdHRlcnMiLCJhYmlDb2RlciIsInJlcXVlc3RNYW5hZ2VyIiwidHJhbnNhY3Rpb25CbG9ja1RpbWVvdXQiLCJ0cmFuc2FjdGlvbkNvbmZpcm1hdGlvbkJsb2NrcyIsInRyYW5zYWN0aW9uUG9sbGluZ1RpbWVvdXQiLCJibG9ja0hlYWRlclRpbWVvdXQiLCJkZWZhdWx0Q29tbW9uIiwiZGVmYXVsdENoYWluIiwiZGVmYXVsdEhhcmRmb3JrIiwiaGFuZGxlUmV2ZXJ0Iiwic2V0UmVxdWVzdE1hbmFnZXIiLCJjcmVhdGVGdW5jdGlvbiIsImJ1aWxkQ2FsbCIsImF0dGFjaFRvT2JqZWN0IiwiZ2V0Q2FsbCIsImV4dHJhY3RDYWxsYmFjayIsInZhbGlkYXRlQXJncyIsImZvcm1hdElucHV0IiwiZm9ybWF0dGVyIiwiZm9ybWF0T3V0cHV0IiwidG9QYXlsb2FkIiwiX2NvbmZpcm1UcmFuc2FjdGlvbiIsImRlZmVyIiwicHJvbWlzZVJlc29sdmVkIiwiY2FuVW5zdWJzY3JpYmUiLCJ0aW1lb3V0Q291bnQiLCJjb25maXJtYXRpb25Db3VudCIsImludGVydmFsSWQiLCJibG9ja0hlYWRlclRpbWVvdXRJZCIsImxhc3RCbG9jayIsImdhc1Byb3ZpZGVkIiwiaXNDb250cmFjdERlcGxveW1lbnQiLCJoYXNCeXRlY29kZSIsIl9ldGhlcmV1bUNhbGxzIiwic3Vic2NyaXB0aW9ucyIsInN1YnNjcmlwdGlvbk5hbWUiLCJfZXRoZXJldW1DYWxsIiwibXRoZCIsImNoZWNrQ29uZmlybWF0aW9uIiwiZXhpc3RpbmdSZWNlaXB0IiwiaXNQb2xsaW5nIiwiYmxvY2tIZWFkZXIiLCJnZXRUcmFuc2FjdGlvblJlY2VpcHQiLCJfZmlyZUVycm9yIiwiZXZlbnRFbWl0dGVyIiwiYXN5bmMiLCJyZWNlaXB0Rm9ybWF0dGVyIiwibGF0ZXN0QmxvY2siLCJnZXRCbG9ja0J5TnVtYmVyIiwibGF0ZXN0QmxvY2tIYXNoIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZ2V0Q29kZSIsImNvbnRyYWN0RGVwbG95Rm9ybWF0dGVyIiwib3V0T2ZHYXMiLCJyZXZlcnRNZXNzYWdlIiwidHhSZXBsYXlPcHRpb25zIiwicmF3VHJhbnNhY3Rpb25IZXgiLCJwYXJzZWRUeCIsInRvSGV4U3RyaW5nIiwiZ2V0UmV2ZXJ0UmVhc29uIiwic3RhcnRXYXRjaGluZyIsImJsb2NrSGVhZGVyQXJyaXZlZCIsInN0YXJ0SW50ZXJ2YWwiLCJnZXRXYWxsZXQiLCJ3YWxsZXQiLCJfaGFuZGxlVHhQcmljaW5nIiwiZ2V0R2FzUHJpY2UiLCJpc1NlbmRUeCIsImlzQ2FsbCIsInNlbmRUeENhbGxiYWNrIiwicmVhc29uRGF0YSIsImlzUmV2ZXJ0UmVhc29uU3RyaW5nIiwiZGVjb2RlUGFyYW1ldGVyIiwic2VuZFNpZ25lZFR4Iiwic2lnbmVkUGF5bG9hZCIsInJhd1RyYW5zYWN0aW9uIiwic2VuZFJlcXVlc3QiLCJjaGFpbiIsImhhcmRmb3JrIiwiY29tbW9uIiwic2lnblRyYW5zYWN0aW9uIiwidHhQcmljaW5nIiwidHhPcHRpb25zIiwiZm9ybWF0IiwiUHJvbWlFdmVudCIsImp1c3RQcm9taXNlIiwib2ZmIiwicHJlZml4IiwiRXZlbnRzIiwiRUUiLCJldnQiLCJfZXZlbnRzQ291bnQiLCJjbGVhckV2ZW50IiwiZXZlbnROYW1lcyIsIm5hbWVzIiwiZWUiLCJhMSIsImEyIiwiYTMiLCJhNCIsImE1IiwicHJlZml4ZWQiLCJKc29ucnBjIiwiQmF0Y2giLCJyZXF1ZXN0cyIsImV4ZWN1dGUiLCJzZW5kQmF0Y2giLCJyZXN1bHRzIiwiaXNWYWxpZFJlc3BvbnNlIiwiZ2xvYmFsIiwiZ2l2ZW5Qcm92aWRlciIsIndlYjMiLCJjdXJyZW50UHJvdmlkZXIiLCJjb25uZWN0aW9uIiwiY2FsbGJhY2tpZnkiLCJCYXRjaE1hbmFnZXIiLCJSZXF1ZXN0TWFuYWdlciIsIm5ldCIsInByb3ZpZGVycyIsInNldFByb3ZpZGVyIiwiV2Vic29ja2V0UHJvdmlkZXIiLCJIdHRwUHJvdmlkZXIiLCJJcGNQcm92aWRlciIsImNvbm5lY3QiLCJjbGVhclN1YnNjcmlwdGlvbnMiLCJzdWJzY3JpcHRpb24iLCJkZXByZWNhdGVkUmVzdWx0IiwicmVzdWJzY3JpYmUiLCJkaXNjb25uZWN0IiwiX2lzQ2xlYW5DbG9zZUV2ZW50IiwiX2lzSXBjQ2xvc2VFcnJvciIsImRlbGV0ZSIsImpzb25ycGNQYXlsb2FkIiwianNvbnJwY1Jlc3VsdENhbGxiYWNrIiwiX2pzb25ycGNSZXN1bHRDYWxsYmFjayIsImNhbGxiYWNrUmVxdWVzdCIsInRvQmF0Y2hQYXlsb2FkIiwiYWRkU3Vic2NyaXB0aW9uIiwicmVtb3ZlU3Vic2NyaXB0aW9uIiwia2VlcElzU3luY2luZyIsInJlc2V0Iiwid2FzQ2xlYW4iLCJNYW5hZ2VyIiwibWVzc2FnZUlkIiwiZXZlcnkiLCJ2YWxpZGF0ZVNpbmdsZU1lc3NhZ2UiLCJyZWFkVUludDgiLCJpc0FyZ3VtZW50c09iamVjdCIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJ3aGljaFR5cGVkQXJyYXkiLCJ1bmN1cnJ5VGhpcyIsIkJpZ0ludFN1cHBvcnRlZCIsIkJpZ0ludCIsIlN5bWJvbFN1cHBvcnRlZCIsIk9iamVjdFRvU3RyaW5nIiwibnVtYmVyVmFsdWUiLCJzdHJpbmdWYWx1ZSIsImJvb2xlYW5WYWx1ZSIsImJpZ0ludFZhbHVlIiwic3ltYm9sVmFsdWUiLCJjaGVja0JveGVkUHJpbWl0aXZlIiwicHJvdG90eXBlVmFsdWVPZiIsImlzTWFwVG9TdHJpbmciLCJpc1NldFRvU3RyaW5nIiwiaXNXZWFrTWFwVG9TdHJpbmciLCJpc1dlYWtTZXRUb1N0cmluZyIsImlzQXJyYXlCdWZmZXJUb1N0cmluZyIsImlzQXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsIndvcmtpbmciLCJpc0RhdGFWaWV3VG9TdHJpbmciLCJpc0RhdGFWaWV3IiwiRGF0YVZpZXciLCJpc1Byb21pc2UiLCJpc0FycmF5QnVmZmVyVmlldyIsImlzVmlldyIsImlzVWludDhBcnJheSIsImlzVWludDhDbGFtcGVkQXJyYXkiLCJpc1VpbnQxNkFycmF5IiwiaXNVaW50MzJBcnJheSIsImlzSW50OEFycmF5IiwiaXNJbnQxNkFycmF5IiwiaXNJbnQzMkFycmF5IiwiaXNGbG9hdDMyQXJyYXkiLCJpc0Zsb2F0NjRBcnJheSIsImlzQmlnSW50NjRBcnJheSIsImlzQmlnVWludDY0QXJyYXkiLCJpc01hcCIsIlNldCIsImlzU2V0IiwiV2Vha01hcCIsImlzV2Vha01hcCIsIldlYWtTZXQiLCJpc1dlYWtTZXQiLCJTaGFyZWRBcnJheUJ1ZmZlckNvcHkiLCJTaGFyZWRBcnJheUJ1ZmZlciIsImlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZyIsImlzU2hhcmVkQXJyYXlCdWZmZXIiLCJpc051bWJlck9iamVjdCIsImlzU3RyaW5nT2JqZWN0IiwiaXNCb29sZWFuT2JqZWN0IiwiaXNCaWdJbnRPYmplY3QiLCJpc1N5bWJvbE9iamVjdCIsImlzQXN5bmNGdW5jdGlvbiIsImlzTWFwSXRlcmF0b3IiLCJpc1NldEl0ZXJhdG9yIiwiaXNHZW5lcmF0b3JPYmplY3QiLCJpc1dlYkFzc2VtYmx5Q29tcGlsZWRNb2R1bGUiLCJpc0JveGVkUHJpbWl0aXZlIiwiaXNBbnlBcnJheUJ1ZmZlciIsImRlc2NyaXB0b3JzIiwiZm9ybWF0UmVnRXhwIiwib2JqZWN0cyIsImluc3BlY3QiLCJpc051bGwiLCJkZXByZWNhdGUiLCJub0RlcHJlY2F0aW9uIiwid2FybmVkIiwidGhyb3dEZXByZWNhdGlvbiIsInRyYWNlRGVwcmVjYXRpb24iLCJkZWJ1Z3MiLCJkZWJ1Z0VudlJlZ2V4IiwiTk9ERV9ERUJVRyIsImRlYnVnRW52Iiwic3R5bGl6ZSIsInN0eWxpemVOb0NvbG9yIiwiaXNCb29sZWFuIiwic2hvd0hpZGRlbiIsIl9leHRlbmQiLCJpc1VuZGVmaW5lZCIsImN1c3RvbUluc3BlY3QiLCJzdHlsaXplV2l0aENvbG9yIiwiZm9ybWF0VmFsdWUiLCJzdHlsZVR5cGUiLCJzdHlsZXMiLCJyZWN1cnNlVGltZXMiLCJyZXQiLCJwcmltaXRpdmUiLCJzaW1wbGUiLCJpc051bWJlciIsImZvcm1hdFByaW1pdGl2ZSIsInZpc2libGVLZXlzIiwiaWR4IiwiYXJyYXlUb0hhc2giLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiaXNFcnJvciIsImZvcm1hdEVycm9yIiwiaXNSZWdFeHAiLCJpc0RhdGUiLCJiYXNlIiwiYnJhY2VzIiwidG9VVENTdHJpbmciLCJmb3JtYXRQcm9wZXJ0eSIsImZvcm1hdEFycmF5IiwicmVkdWNlVG9TaW5nbGVTdHJpbmciLCJkZXNjIiwiYXIiLCJyZSIsInBhZCIsImRlYnVnbG9nIiwicGlkIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJpc1N5bWJvbCIsImlzTmF0aXZlRXJyb3IiLCJpc1ByaW1pdGl2ZSIsIm1vbnRocyIsInRpbWUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0RGF0ZSIsImdldE1vbnRoIiwicHJvcCIsImluaGVyaXRzIiwia0N1c3RvbVByb21pc2lmaWVkU3ltYm9sIiwiY2FsbGJhY2tpZnlPblJlamVjdGVkIiwibmV3UmVhc29uIiwicHJvbWlzaWZ5Iiwib3JpZ2luYWwiLCJwcm9taXNlUmVzb2x2ZSIsInByb21pc2VSZWplY3QiLCJjdXN0b20iLCJjYWxsYmFja2lmaWVkIiwibWF5YmVDYiIsIm5leHRUaWNrIiwicmVqIiwiU3Vic2NyaXB0aW9uIiwicm0iLCJfZXh0cmFjdENhbGxiYWNrIiwiX3ZhbGlkYXRlQXJncyIsIl9mb3JtYXRJbnB1dCIsIl9mb3JtYXRPdXRwdXQiLCJfdG9QYXlsb2FkIiwic3Vic2NyaXB0aW9uTWV0aG9kIiwic2hpZnQiLCJlcnIxIiwiZXJyMiIsImJsb2NrUGFyYW1zIiwicmVzdWx0SXRlbSIsInN1YnNjcmlwdGlvbkhhbmRsZXIiLCJwY2tnIiwiZXgiLCJleHRlbnNpb24iLCJleHRlbmRlZE9iamVjdCIsIl9yZXF1ZXN0TWFuYWdlciIsImV4dGVuZCIsInBhY2thZ2VJbml0IiwicGtnIiwiX3Byb3ZpZGVyIiwibWFuYWdlciIsIkJhdGNoUmVxdWVzdCIsImFkZFByb3ZpZGVycyIsIkV0aGVyc0FiaUNvZGVyIiwiUGFyYW1UeXBlIiwiZXRoZXJzQWJpQ29kZXIiLCJSZXN1bHQiLCJBQklDb2RlciIsImVuY29kZUZ1bmN0aW9uU2lnbmF0dXJlIiwiZnVuY3Rpb25OYW1lIiwiX2pzb25JbnRlcmZhY2VNZXRob2RUb1N0cmluZyIsImVuY29kZUV2ZW50U2lnbmF0dXJlIiwiZW5jb2RlUGFyYW1ldGVyIiwiZW5jb2RlUGFyYW1ldGVycyIsIm1hcFR5cGVzIiwiZm9ybWF0UGFyYW0iLCJjb2RlciIsIl9nZXRDb2RlciIsIm1vZGlmeVBhcmFtcyIsImNvZGVycyIsIm1hcHBlZFR5cGVzIiwiaXNTaW1wbGlmaWVkU3RydWN0Rm9ybWF0Iiwic3RydWN0TmFtZSIsIm1hcFN0cnVjdE5hbWVBbmRUeXBlIiwiY29tcG9uZW50cyIsIm1hcFN0cnVjdFRvQ29kZXJGb3JtYXQiLCJzdHJ1Y3QiLCJwYXJhbVR5cGVCeXRlcyIsInBhcmFtVHlwZUJ5dGVzQXJyYXkiLCJwYXJhbVR5cGVOdW1iZXIiLCJwYXJhbVR5cGVOdW1iZXJBcnJheSIsImlzQk4iLCJpc0JpZ051bWJlciIsImxlZnRQYWQiLCJtYXhTaXplIiwicmlnaHRQYWQiLCJlbmNvZGVGdW5jdGlvbkNhbGwiLCJqc29uSW50ZXJmYWNlIiwiZGVjb2RlUGFyYW1ldGVycyIsImRlY29kZVBhcmFtZXRlcnNXaXRoIiwibG9vc2UiLCJyZXR1cm5WYWx1ZSIsIl9fbGVuZ3RoX18iLCJkZWNvZGVkVmFsdWUiLCJkZWNvZGVMb2ciLCJub3RJbmRleGVkSW5wdXRzIiwiaW5kZXhlZFBhcmFtcyIsInRvcGljQ291bnQiLCJpbmRleGVkIiwic3RhdGljVHlwZSIsIm5vbkluZGV4ZWREYXRhIiwibm90SW5kZXhlZFBhcmFtcyIsIl9jb25zdHJ1Y3Rvckd1YXJkIiwiTW9kaWZpZXJzQnl0ZXMiLCJjYWxsZGF0YSIsIm1lbW9yeSIsIk1vZGlmaWVyc05lc3QiLCJjaGVja01vZGlmaWVyIiwidGhyb3dBcmd1bWVudEVycm9yIiwicG9wdWxhdGUiLCJmcmVlemUiLCJzaWdoYXNoIiwibWluaW1hbCIsInBhcmFtVHlwZUFycmF5IiwiY29uc3RydWN0b3JHdWFyZCIsInRocm93RXJyb3IiLCJvcGVyYXRpb24iLCJhcnJheUxlbmd0aCIsImFycmF5Q2hpbGRyZW4iLCJmcm9tT2JqZWN0IiwiYmFzZVR5cGUiLCJfaXNQYXJhbVR5cGUiLCJjb21wIiwiYWxsb3dJbmRleGVkIiwiZnJvbVN0cmluZyIsImlzUGFyYW1UeXBlIiwidmVyaWZ5VHlwZSIsIm9yaWdpbmFsUGFyYW0iLCJhbGxvd1R5cGUiLCJhbGxvd1BhcmFtcyIsImFsbG93TmFtZSIsImFsbG93QXJyYXkiLCJzaWJsaW5nIiwicmVhZEFycmF5IiwicGFyc2VQYXJhbVR5cGUiLCJDb2RlciIsImxvY2FsTmFtZSIsImR5bmFtaWMiLCJXcml0ZXIiLCJ3b3JkU2l6ZSIsIl9kYXRhIiwiX2RhdGFMZW5ndGgiLCJfcGFkZGluZyIsIndyaXRlciIsIl93cml0ZURhdGEiLCJwYWRkaW5nT2Zmc2V0IiwiX2dldFZhbHVlIiwiUmVhZGVyIiwiY29lcmNlRnVuYyIsImFsbG93TG9vc2UiLCJfb2Zmc2V0IiwidG9OdW1iZXIiLCJfY29lcmNlRnVuYyIsImNvZXJjZSIsImFsaWduZWRMZW5ndGgiLCJjZWlsIiwiX3BlZWtCeXRlcyIsInJlYWRCeXRlcyIsIkFkZHJlc3NDb2RlciIsIl90aHJvd0Vycm9yIiwid3JpdGVWYWx1ZSIsInJlYWRlciIsInJlYWRWYWx1ZSIsIkFub255bW91c0NvZGVyIiwicGFjayIsImFycmF5VmFsdWVzIiwidW5pcXVlIiwiYXJndW1lbnQiLCJzdGF0aWNXcml0ZXIiLCJkeW5hbWljV3JpdGVyIiwidXBkYXRlRnVuY3MiLCJkeW5hbWljT2Zmc2V0IiwidXBkYXRlRnVuYyIsIndyaXRlVXBkYXRhYmxlVmFsdWUiLCJiYXNlT2Zmc2V0IiwiYXBwZW5kV3JpdGVyIiwidW5wYWNrIiwiYmFzZVJlYWRlciIsInN1YlJlYWRlciIsIm9mZnNldFJlYWRlciIsInVuaXF1ZU5hbWVzIiwiYWNjdW0iLCJBcnJheUNvZGVyIiwiY2hlY2tBcmd1bWVudENvdW50IiwiQm9vbGVhbkNvZGVyIiwiaXNaZXJvIiwiRHluYW1pY0J5dGVzQ29kZXIiLCJ3cml0ZUJ5dGVzIiwiQnl0ZXNDb2RlciIsIkZpeGVkQnl0ZXNDb2RlciIsIk51bGxDb2RlciIsIk51bWJlckNvZGVyIiwic2lnbmVkIiwibWF4VWludFZhbHVlIiwiYm91bmRzIiwibWFzayIsImd0IiwibHQiLCJ0b1R3b3MiLCJmcm9tVHdvcyIsIlN0cmluZ0NvZGVyIiwiVHVwbGVDb2RlciIsIkFiaUNvZGVyIiwiY2hlY2tOZXciLCJjb21wb25lbnQiLCJfZ2V0V29yZFNpemUiLCJfZ2V0V3JpdGVyIiwiX2dldFJlYWRlciIsImNvcmUiLCJDb250cmFjdCIsImxhc3RBcmciLCJfZ2V0T3JTZXREZWZhdWx0T3B0aW9ucyIsIl9hZGRyZXNzIiwiX2pzb25JbnRlcmZhY2UiLCJmdW5jTmFtZSIsIl9jcmVhdGVUeE9iamVjdCIsImNhc2NhZGVGdW5jIiwibmV4dE1ldGhvZCIsIl9vbiIsImFsbEV2ZW50cyIsIl9ldGhBY2NvdW50cyIsIl9nZXRDYWxsYmFjayIsIl9jaGVja0xpc3RlbmVyIiwiX2VuY29kZUV2ZW50QUJJIiwiYW5vbnltb3VzIiwiaW5kZXhlZFRvcGljcyIsIl9kZWNvZGVFdmVudEFCSSIsImludGYiLCJpbmRleGVkSW5wdXRzIiwiYXJnVG9waWNzIiwicmV0dXJuVmFsdWVzIiwicmF3IiwiX2VuY29kZU1ldGhvZEFCSSIsIm1ldGhvZFNpZ25hdHVyZSIsIl9tZXRob2QiLCJwYXJhbXNBQkkiLCJpbnB1dExlbmd0aCIsIl9kZXBsb3lEYXRhIiwiX2RlY29kZU1ldGhvZFJldHVybiIsImRlcGxveSIsImRlcGxveURhdGEiLCJfZ2VuZXJhdGVFdmVudE9wdGlvbnMiLCJjbG9uZSIsInN1Yk9wdGlvbnMiLCJnZXRQYXN0RXZlbnRzIiwiZ2V0UGFzdExvZ3MiLCJ0eE9iamVjdCIsIl9leGVjdXRlTWV0aG9kIiwiZW5jb2RlQUJJIiwiZXN0aW1hdGVHYXMiLCJjcmVhdGVBY2Nlc3NMaXN0IiwiX3Byb2Nlc3NFeGVjdXRlQXJndW1lbnRzIiwicHJvY2Vzc2VkQXJncyIsImdlbmVyYXRlUmVxdWVzdCIsImV0aEFjY291bnRzIiwiZXYiLCJuZXdDb250cmFjdCIsInNlbmRUcmFuc2FjdGlvbiIsIkJpZ051bWJlciIsImlzbzEzNjE2UHJlcGFyZSIsIkEiLCJaIiwibW9kOTcxMCIsInJlbWFpbmRlciIsIl9pYmFuIiwiaWIiLCJmcm9tQWRkcmVzcyIsInBhZGRlZCIsImZyb21CYmFuIiwiYmJhbiIsImNoZWNrRGlnaXQiLCJjb3VudHJ5Q29kZSIsImluc3RpdHV0aW9uIiwiaWRlbnRpZmllciIsImlzSW5kaXJlY3QiLCJiYXNlMzYiLCJhc0JuIiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsIlRlbXBDdG9yIiwiQk4iLCJlbmRpYW4iLCJuZWdhdGl2ZSIsIndvcmRzIiwicmVkIiwicGFyc2VIZXg0Qml0cyIsInBhcnNlSGV4Qnl0ZSIsImxvd2VyQm91bmQiLCJwYXJzZUJhc2UiLCJtaW4iLCJudW0iLCJfaW5pdE51bWJlciIsIl9pbml0QXJyYXkiLCJfcGFyc2VIZXgiLCJfcGFyc2VCYXNlIiwidyIsInN0cmlwIiwibGltYkxlbiIsImxpbWJQb3ciLCJ0b3RhbCIsImltdWxuIiwiX2lhZGRuIiwicG93IiwiX2V4cGFuZCIsIl9ub3JtU2lnbiIsInplcm9zIiwiZ3JvdXBTaXplcyIsImdyb3VwQmFzZXMiLCJzbWFsbE11bFRvIiwibG8iLCJjYXJyeSIsIm5jYXJyeSIsInJ3b3JkIiwibWF4SiIsImdyb3VwU2l6ZSIsImdyb3VwQmFzZSIsIm1vZG4iLCJpZGl2biIsInRvQXJyYXlMaWtlIiwiQXJyYXlUeXBlIiwicmVxTGVuZ3RoIiwibGl0dGxlRW5kaWFuIiwicSIsImFuZGxuIiwiaXVzaHJuIiwiY2x6MzIiLCJfY291bnRCaXRzIiwiX3plcm9CaXRzIiwiYml0TGVuZ3RoIiwiaGkiLCJ6ZXJvQml0cyIsImlub3RuIiwiaWFkZG4iLCJ0ZXN0biIsIm5vdG4iLCJpbmVnIiwiaXNOZWciLCJpdW9yIiwiaW9yIiwib3IiLCJ1b3IiLCJpdWFuZCIsImlhbmQiLCJhbmQiLCJ1YW5kIiwiaXV4b3IiLCJpeG9yIiwieG9yIiwidXhvciIsImJ5dGVzTmVlZGVkIiwiYml0c0xlZnQiLCJzZXRuIiwiYml0Iiwid2JpdCIsImlhZGQiLCJpc3ViIiwiY29tYjEwTXVsVG8iLCJtaWQiLCJhMCIsImFsMCIsImFoMCIsImFsMSIsImFoMSIsImFsMiIsImFoMiIsImFsMyIsImFoMyIsImFsNCIsImFoNCIsImFsNSIsImFoNSIsImE2IiwiYWw2IiwiYWg2IiwiYTciLCJhbDciLCJhaDciLCJhOCIsImFsOCIsImFoOCIsImE5IiwiYWw5IiwiYWg5IiwiYjAiLCJibDAiLCJiaDAiLCJibDEiLCJiaDEiLCJibDIiLCJiaDIiLCJiMyIsImJsMyIsImJoMyIsImI0IiwiYmw0IiwiYmg0IiwiYjUiLCJibDUiLCJiaDUiLCJiNiIsImJsNiIsImJoNiIsImI3IiwiYmw3IiwiYmg3IiwiYjgiLCJibDgiLCJiaDgiLCJiOSIsImJsOSIsImJoOSIsIncwIiwiaW11bCIsIncxIiwidzIiLCJ3MyIsInc0IiwidzUiLCJ3NiIsInc3IiwidzgiLCJ3OSIsIncxMCIsIncxMSIsIncxMiIsIncxMyIsIncxNCIsIncxNSIsIncxNiIsIncxNyIsIncxOCIsImp1bWJvTXVsVG8iLCJGRlRNIiwibXVscCIsIm11bFRvIiwiaG5jYXJyeSIsImJpZ011bFRvIiwibWFrZVJCVCIsIk4iLCJyZXZCaW4iLCJyYiIsInBlcm11dGUiLCJyYnQiLCJyd3MiLCJpd3MiLCJydHdzIiwiaXR3cyIsInJ0d2RmIiwiY29zIiwiUEkiLCJpdHdkZiIsInNpbiIsInJ0d2RmXyIsIml0d2RmXyIsImllIiwicm8iLCJpbyIsInJ4IiwiZ3Vlc3NMZW4xM2IiLCJvZGQiLCJjb25qdWdhdGUiLCJub3JtYWxpemUxM2IiLCJ3cyIsInJvdW5kIiwiY29udmVydDEzYiIsInN0dWIiLCJwaCIsInJ3c3QiLCJpd3N0IiwibnJ3cyIsIm5yd3N0Iiwibml3c3QiLCJybXdzIiwibXVsZiIsIm11bG4iLCJzcXIiLCJpc3FyIiwidG9CaXRBcnJheSIsIml1c2hsbiIsImJpdHMiLCJjYXJyeU1hc2siLCJuZXdDYXJyeSIsImlzaGxuIiwiaGludCIsImV4dGVuZGVkIiwiaCIsIm1hc2tlZFdvcmRzIiwiaXNocm4iLCJzaGxuIiwidXNobG4iLCJzaHJuIiwidXNocm4iLCJpbWFza24iLCJtYXNrbiIsImlzdWJuIiwiYWRkbiIsInN1Ym4iLCJpYWJzIiwiX2lzaGxuc3VibXVsIiwiX3dvcmREaXYiLCJiaGkiLCJxaiIsImRpdiIsImRpdm1vZCIsInBvc2l0aXZlIiwiZGl2biIsImRpdlJvdW5kIiwiZG0iLCJoYWxmIiwicjIiLCJlZ2NkIiwiQiIsIkMiLCJEIiwiaXNFdmVuIiwieXAiLCJ4cCIsImltIiwiaXNPZGQiLCJqbSIsImdjZCIsIl9pbnZtcCIsImNtcG4iLCJiaW5jbiIsInVjbXAiLCJndG4iLCJndGVuIiwiZ3RlIiwibHRuIiwibHRlbiIsImx0ZSIsImVxbiIsIlJlZCIsInRvUmVkIiwiY29udmVydFRvIiwiX2ZvcmNlUmVkIiwiZnJvbVJlZCIsImNvbnZlcnRGcm9tIiwiZm9yY2VSZWQiLCJyZWRBZGQiLCJyZWRJQWRkIiwicmVkU3ViIiwicmVkSVN1YiIsInJlZFNobCIsInNobCIsInJlZE11bCIsIl92ZXJpZnkyIiwicmVkSU11bCIsInJlZFNxciIsIl92ZXJpZnkxIiwicmVkSVNxciIsInJlZFNxcnQiLCJzcXJ0IiwicmVkSW52bSIsInJlZE5lZyIsInJlZFBvdyIsInByaW1lcyIsImsyNTYiLCJwMjI0IiwicDE5MiIsInAyNTUxOSIsIk1QcmltZSIsInRtcCIsIl90bXAiLCJLMjU2IiwiUDIyNCIsIlAxOTIiLCJQMjU1MTkiLCJwcmltZSIsIl9wcmltZSIsIk1vbnQiLCJpbW9kIiwicmludiIsIm1pbnYiLCJpcmVkdWNlIiwicmxlbiIsImltdWxLIiwiX3N0cmlwIiwib3V0TGVuIiwibW9kMyIsIm9uZSIsIm5PbmUiLCJscG93IiwiaW52Iiwid25kIiwiY3VycmVudCIsImN1cnJlbnRMZW4iLCJtb250IiwidSIsIlhIUjIiLCJodHRwIiwiaHR0cHMiLCJhZ2VudCIsImtlZXBBbGl2ZSIsImh0dHBzQWdlbnQiLCJBZ2VudCIsImh0dHBBZ2VudCIsIl9wcmVwYXJlUmVxdWVzdCIsImFnZW50cyIsIm5vZGVqc1NldCIsIm9udGltZW91dCIsInN1cHBvcnRzU3Vic2NyaXB0aW9ucyIsInJlc3BvbnNlQ2FsbGJhY2tzIiwibm90aWZpY2F0aW9uQ2FsbGJhY2tzIiwiYWRkRGVmYXVsdEV2ZW50cyIsImxvYWQiLCJfcGFyc2VSZXNwb25zZSIsIl90aW1lb3V0IiwibGFzdENodW5rIiwibGFzdENodW5rVGltZW91dCIsIl9hZGRSZXNwb25zZUNhbGxiYWNrIiwicmVjb25uZWN0IiwiaXNOb2RlIiwiaXNSTiIsInByb2R1Y3QiLCJfYnRvYSIsImhlbHBlcnMiLCJuZXdVUkwiLCJidG9hIiwicGFyc2VVUkwiLCJXcyIsIl9jdXN0b21UaW1lb3V0IiwicmVjb25uZWN0T3B0aW9ucyIsImF1dG8iLCJkZWxheSIsIm1heEF0dGVtcHRzIiwib25UaW1lb3V0IiwiY2xpZW50Q29uZmlnIiwicmVxdWVzdE9wdGlvbnMiLCJEQVRBIiwiQ0xPU0UiLCJFUlJPUiIsIkNPTk5FQ1QiLCJSRUNPTk5FQ1QiLCJyZXF1ZXN0UXVldWUiLCJyZXNwb25zZVF1ZXVlIiwicmVjb25uZWN0QXR0ZW1wdHMiLCJyZWNvbm5lY3RpbmciLCJwYXJzZWRVUkwiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiYXV0aG9yaXphdGlvbiIsImF1dGgiLCJPUEVOIiwiX2FkZFNvY2tldExpc3RlbmVycyIsIl9vbkNvbm5lY3QiLCJfb25DbG9zZSIsIl9yZW1vdmVTb2NrZXRMaXN0ZW5lcnMiLCJDT05ORUNUSU5HIiwiZXRoanNVbml0Iiwic29saWRpdHlTaGEzIiwicmFuZG9tYnl0ZXMiLCJfZmxhdHRlblR5cGVzIiwiaW5jbHVkZVR1cGxlIiwicHV0cyIsInN1ZmZpeCIsImFycmF5QnJhY2tldCIsImhleFRvQXNjaWkiLCJhc2NpaVRvSGV4IiwiZ2V0VW5pdFZhbHVlIiwidW5pdCIsInVuaXRNYXAiLCJvcHRpb25hbERhdGEiLCJyYW5kb21IZXgiLCJzaGEzUmF3Iiwic29saWRpdHlTaGEzUmF3IiwiZW5jb2RlUGFja2VkIiwiY2hlY2tBZGRyZXNzQ2hlY2tzdW0iLCJhZGRyZXNzSGFzaCIsImNoZWNrc3VtQWRkcmVzcyIsImhleFRvQnl0ZXMiLCJ0b0RlY2ltYWwiLCJmcm9tRGVjaW1hbCIsImhleFRvVXRmOCIsImhleFRvU3RyaW5nIiwic3RyaXBIZXhQcmVmaXgiLCJzdHJpbmdUb0hleCIsInRvQXNjaWkiLCJmcm9tQXNjaWkiLCJ0b1dlaSIsImZyb21XZWkiLCJwYWRSaWdodCIsInRvVHdvc0NvbXBsZW1lbnQiLCJjb21wYXJlQmxvY2tOdW1iZXJzIiwiYm5BIiwiYm5CIiwiX3BhcnNlTnVtYmVyIiwiX3NvbGlkaXR5UGFjayIsImFycmF5U2l6ZSIsInR5cGVzaXplIiwiX3BhcnNlVHlwZU4iLCJfcHJvY2Vzc1NvbGlkaXR5RW5jb2RlUGFja2VkQXJncyIsIl9wYXJzZVR5cGVOQXJyYXkiLCJoZXhBcmdzIiwibnVtYmVyVG9CTiIsInV0ZjgiLCJldGhlcmV1bWpzVXRpbCIsImV0aGVyZXVtQmxvb21GaWx0ZXJzIiwicmV0dXJuVHlwZSIsIlNIQTNfTlVMTF9TIiwiYnVmZmVyVG9IZXgiLCJfSGFzaCIsIl9nbG9iYWxUaGlzIiwiTmF0aXZlV2ViU29ja2V0IiwiV2ViU29ja2V0IiwiTW96V2ViU29ja2V0Iiwid2Vic29ja2V0X3ZlcnNpb24iLCJXM0NXZWJTb2NrZXQiLCJ1cmkiLCJwcm90b2NvbHMiLCJmb3VuZE5hbWUiXSwibWFwcGluZ3MiOiI7bUdBQ0FBLE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLElBQ3RERCxFQUFRRSxtQkFBZ0IsRUFDeEIsTUFBTUMsRUFBb0IsRUFBUSxPQUNsQyxNQUFNRCxVQUFzQkMsRUFBa0JDLGdCQUMxQyxZQUFZQyxHQUVSQyxNQUFNLElBRU5DLEtBQUtDLFVBQVlILEdBQVksR0FDN0JQLE9BQU9XLEtBQUtGLEtBQUtDLFdBQVdFLFNBQVNDLElBQ2pDLE1BQU1DLEVBQVFMLEtBQUtDLFVBQVVHLEdBQzdCSixLQUFLTSxVQUFVRixFQUFVQyxNQUdqQyxVQUFVRCxFQUFVQyxHQUNoQixNQUFNRSxFQUFtQkMsSUFDckIsTUFBTUMsRUFBUVQsS0FBS1UsV0FDbkJELEVBQU1MLEdBQVlJLEVBQ2xCUixLQUFLVyxTQUFTRixJQUVsQkosRUFB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LENBQ3hDLElBQUl6bEMsRUFBTSxJQUFJdkIsRUFBRWduQyxHQUNoQixHQUFJajJCLE9BQU80MEIsZUFBZXBrQyxFQUFLLENBQzlCLElBQUkwbEMsRUFBUTF6QixFQUFlaFMsR0FDdkJ1UixFQUFhaTBCLEVBQUtFLEVBQU9sMkIsT0FBTzQwQixhQUNwQyxJQUFLN3lCLEVBQVksQ0FDaEIsSUFBSW8wQixFQUFhM3pCLEVBQWUwekIsR0FDaENuMEIsRUFBYWkwQixFQUFLRyxFQUFZbjJCLE9BQU80MEIsYUFFdENtQixFQUFVRSxHQUFjbDBCLEVBQVc1VCxTQU12QyxJQWVJaXNDLEVBQWUsRUFBUSxPQUUzQnZKLEVBQU85bUMsUUFBVSxTQUF5QkMsR0FDekMsUUFBS293QyxFQUFhcHdDLEtBQ2I2cUMsR0FBb0I3MEIsT0FBTzQwQixlQUFlNXFDLEVBbkIzQixTQUEyQkEsR0FDL0MsSUFBSXV6RixHQUFZLEVBV2hCLE9BVkE5eUYsRUFBUXNyQyxHQUFXLFNBQVVPLEVBQVFMLEdBQ3BDLElBQUtzbkQsRUFDSixJQUNDLElBQUlwc0YsRUFBT21sQyxFQUFPOW5DLEtBQUt4RSxHQUNuQm1ILElBQVM4a0MsSUFDWnNuRCxFQUFZcHNGLEdBRVosTUFBT2dILFFBR0pvbEYsRUFRQWhuRCxDQUFldnNDLEdBRDBDOHJDLEVBQU9oQixFQUFVOXFDLEdBQVEsR0FBSSIsImZpbGUiOiI4OTM0Lm1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29tcG9zZWRTdG9yZSA9IHZvaWQgMDtcbmNvbnN0IE9ic2VydmFibGVTdG9yZV8xID0gcmVxdWlyZShcIi4vT2JzZXJ2YWJsZVN0b3JlXCIpO1xuY2xhc3MgQ29tcG9zZWRTdG9yZSBleHRlbmRzIE9ic2VydmFibGVTdG9yZV8xLk9ic2VydmFibGVTdG9yZSB7XG4gICAgY29uc3RydWN0b3IoY2hpbGRyZW4pIHtcbiAgICAgICAgLy8gVHlwZWNhc3Q6IFByZXNlcnZlIGV4aXN0aW5nIGJlaGF2aW9yXG4gICAgICAgIHN1cGVyKHt9KTtcbiAgICAgICAgLy8gc3Vic2NyaWJlIHRvIGNoaWxkcmVuXG4gICAgICAgIHRoaXMuX2NoaWxkcmVuID0gY2hpbGRyZW4gfHwge307XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuX2NoaWxkcmVuKS5mb3JFYWNoKChjaGlsZEtleSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSB0aGlzLl9jaGlsZHJlbltjaGlsZEtleV07XG4gICAgICAgICAgICB0aGlzLl9hZGRDaGlsZChjaGlsZEtleSwgY2hpbGQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2FkZENoaWxkKGNoaWxkS2V5LCBjaGlsZCkge1xuICAgICAgICBjb25zdCB1cGRhdGVGcm9tQ2hpbGQgPSAoY2hpbGRWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLmdldFN0YXRlKCk7XG4gICAgICAgICAgICBzdGF0ZVtjaGlsZEtleV0gPSBjaGlsZFZhbHVlO1xuICAgICAgICAgICAgdGhpcy5wdXRTdGF0ZShzdGF0ZSk7XG4gICAgICAgIH07XG4gICAgICAgIGNoaWxkLnN1YnNjcmliZSh1cGRhdGVGcm9tQ2hpbGQpO1xuICAgICAgICB1cGRhdGVGcm9tQ2hpbGQoY2hpbGQuZ2V0U3RhdGUoKSk7XG4gICAgfVxufVxuZXhwb3J0cy5Db21wb3NlZFN0b3JlID0gQ29tcG9zZWRTdG9yZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbXBvc2VkU3RvcmUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1lcmdlZFN0b3JlID0gdm9pZCAwO1xuY29uc3QgT2JzZXJ2YWJsZVN0b3JlXzEgPSByZXF1aXJlKFwiLi9PYnNlcnZhYmxlU3RvcmVcIik7XG5jbGFzcyBNZXJnZWRTdG9yZSBleHRlbmRzIE9ic2VydmFibGVTdG9yZV8xLk9ic2VydmFibGVTdG9yZSB7XG4gICAgY29uc3RydWN0b3IoY2hpbGRyZW4gPSBbXSkge1xuICAgICAgICAvLyBUeXBlY2FzdDogUHJlc2VydmUgZXhpc3RpbmcgYmVoYXZpb3JcbiAgICAgICAgc3VwZXIoe30pO1xuICAgICAgICB0aGlzLl9jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgICAgICAvLyBzdWJzY3JpYmUgdG8gY2hpbGRyZW5cbiAgICAgICAgY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHRoaXMuX2FkZENoaWxkKGNoaWxkKSk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVdob2xlU3RhdGUoKTtcbiAgICB9XG4gICAgX2FkZENoaWxkKGNoaWxkKSB7XG4gICAgICAgIGNoaWxkLnN1YnNjcmliZSgoKSA9PiB0aGlzLl91cGRhdGVXaG9sZVN0YXRlKCkpO1xuICAgIH1cbiAgICBfdXBkYXRlV2hvbGVTdGF0ZSgpIHtcbiAgICAgICAgY29uc3QgY2hpbGRTdGF0ZXMgPSB0aGlzLl9jaGlsZHJlbi5tYXAoKGNoaWxkKSA9PiBjaGlsZC5nZXRTdGF0ZSgpKTtcbiAgICAgICAgLy8gYXBwbHkgc2hhbGxvdyBtZXJnZSBvdmVyIHN0YXRlc1xuICAgICAgICBjb25zdCBzdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIC4uLmNoaWxkU3RhdGVzKTtcbiAgICAgICAgdGhpcy5wdXRTdGF0ZShzdGF0ZSk7XG4gICAgfVxufVxuZXhwb3J0cy5NZXJnZWRTdG9yZSA9IE1lcmdlZFN0b3JlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWVyZ2VkU3RvcmUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk9ic2VydmFibGVTdG9yZSA9IHZvaWQgMDtcbmNvbnN0IHNhZmVfZXZlbnRfZW1pdHRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJAbWV0YW1hc2svc2FmZS1ldmVudC1lbWl0dGVyXCIpKTtcbmNsYXNzIE9ic2VydmFibGVTdG9yZSBleHRlbmRzIHNhZmVfZXZlbnRfZW1pdHRlcl8xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKGluaXRTdGF0ZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBpZiAoaW5pdFN0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IGluaXRTdGF0ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFR5cGVjYXN0L2RlZmF1bHQgc3RhdGU6IFByZXNlcnZlIGV4aXN0aW5nIGJlaGF2aW9yXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IHt9O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIHdyYXBwZXIgYXJvdW5kIGludGVybmFsIGdldFN0YXRlXG4gICAgZ2V0U3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRTdGF0ZSgpO1xuICAgIH1cbiAgICAvLyB3cmFwcGVyIGFyb3VuZCBpbnRlcm5hbCBwdXRTdGF0ZVxuICAgIHB1dFN0YXRlKG5ld1N0YXRlKSB7XG4gICAgICAgIHRoaXMuX3B1dFN0YXRlKG5ld1N0YXRlKTtcbiAgICAgICAgdGhpcy5lbWl0KCd1cGRhdGUnLCBuZXdTdGF0ZSk7XG4gICAgfVxuICAgIHVwZGF0ZVN0YXRlKHBhcnRpYWxTdGF0ZSkge1xuICAgICAgICAvLyBpZiBub24tbnVsbCBvYmplY3QsIG1lcmdlXG4gICAgICAgIGlmIChwYXJ0aWFsU3RhdGUgJiYgdHlwZW9mIHBhcnRpYWxTdGF0ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5nZXRTdGF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5wdXRTdGF0ZShPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHN0YXRlKSwgcGFydGlhbFN0YXRlKSk7XG4gICAgICAgICAgICAvLyBpZiBub3Qgb2JqZWN0LCB1c2UgbmV3IHZhbHVlXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnB1dFN0YXRlKHBhcnRpYWxTdGF0ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gc3Vic2NyaWJlIHRvIGNoYW5nZXNcbiAgICBzdWJzY3JpYmUoaGFuZGxlcikge1xuICAgICAgICB0aGlzLm9uKCd1cGRhdGUnLCBoYW5kbGVyKTtcbiAgICB9XG4gICAgLy8gdW5zdWJzY3JpYmUgdG8gY2hhbmdlc1xuICAgIHVuc3Vic2NyaWJlKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcigndXBkYXRlJywgaGFuZGxlcik7XG4gICAgfVxuICAgIC8vXG4gICAgLy8gcHJpdmF0ZVxuICAgIC8vXG4gICAgLy8gcmVhZCBmcm9tIHBlcnNpc3RlbmNlXG4gICAgX2dldFN0YXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGU7XG4gICAgfVxuICAgIC8vIHdyaXRlIHRvIHBlcnNpc3RlbmNlXG4gICAgX3B1dFN0YXRlKG5ld1N0YXRlKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gbmV3U3RhdGU7XG4gICAgfVxufVxuZXhwb3J0cy5PYnNlcnZhYmxlU3RvcmUgPSBPYnNlcnZhYmxlU3RvcmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYnNlcnZhYmxlU3RvcmUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN0b3JlQXNTdHJlYW0gPSB2b2lkIDA7XG5jb25zdCBzdHJlYW1fMSA9IHJlcXVpcmUoXCJzdHJlYW1cIik7XG5jbGFzcyBPYnNlcnZhYmxlU3RvcmVTdHJlYW0gZXh0ZW5kcyBzdHJlYW1fMS5EdXBsZXgge1xuICAgIGNvbnN0cnVjdG9yKG9ic1N0b3JlKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIC8vIHBhc3MgdmFsdWVzLCBub3Qgc2VyaWFsaXphdGlvbnNcbiAgICAgICAgICAgIG9iamVjdE1vZGU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBkb250IGJ1ZmZlciBvdXRnb2luZyB1cGRhdGVzXG4gICAgICAgIHRoaXMucmVzdW1lKCk7XG4gICAgICAgIC8vIHNhdmUgaGFuZGxlciBzbyB3ZSBjYW4gdW5zdWJzY3JpYmUgbGF0ZXJcbiAgICAgICAgdGhpcy5oYW5kbGVyID0gKHN0YXRlKSA9PiB0aGlzLnB1c2goc3RhdGUpO1xuICAgICAgICAvLyBzdWJzY3JpYmUgdG8gb2JzU3RvcmUgY2hhbmdlc1xuICAgICAgICB0aGlzLm9ic1N0b3JlID0gb2JzU3RvcmU7XG4gICAgICAgIHRoaXMub2JzU3RvcmUuc3Vic2NyaWJlKHRoaXMuaGFuZGxlcik7XG4gICAgfVxuICAgIC8vIGVtaXQgY3VycmVudCBzdGF0ZSBvbiBuZXcgZGVzdGluYXRpb25cbiAgICBwaXBlKGRlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIucGlwZShkZXN0LCBvcHRpb25zKTtcbiAgICAgICAgZGVzdC53cml0ZSh0aGlzLm9ic1N0b3JlLmdldFN0YXRlKCkpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvLyB3cml0ZSBmcm9tIGluY29taW5nIHN0cmVhbSB0byBzdGF0ZVxuICAgIF93cml0ZShjaHVuaywgX2VuY29kaW5nLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLm9ic1N0b3JlLnB1dFN0YXRlKGNodW5rKTtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gICAgLy8gbm9vcCAtIG91dGdvaW5nIHN0cmVhbSBpcyBhc2tpbmcgdXMgaWYgd2UgaGF2ZSBkYXRhIHdlIGFyZW50IGdpdmluZyBpdFxuICAgIF9yZWFkKF9zaXplKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8vIHVuc3Vic2NyaWJlIGZyb20gZXZlbnQgZW1pdHRlclxuICAgIF9kZXN0cm95KGVyciwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5vYnNTdG9yZS51bnN1YnNjcmliZSh0aGlzLmhhbmRsZXIpO1xuICAgICAgICBzdXBlci5fZGVzdHJveShlcnIsIGNhbGxiYWNrKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzdG9yZUFzU3RyZWFtKG9ic1N0b3JlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlU3RvcmVTdHJlYW0ob2JzU3RvcmUpO1xufVxuZXhwb3J0cy5zdG9yZUFzU3RyZWFtID0gc3RvcmVBc1N0cmVhbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzU3RyZWFtLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYXNTdHJlYW1cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0NvbXBvc2VkU3RvcmVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL01lcmdlZFN0b3JlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9PYnNlcnZhYmxlU3RvcmVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3RyYW5zZm9ybVwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3RvcmVUcmFuc2Zvcm1TdHJlYW0gPSB2b2lkIDA7XG5jb25zdCB0aHJvdWdoMl8xID0gcmVxdWlyZShcInRocm91Z2gyXCIpO1xuZnVuY3Rpb24gc3RvcmVUcmFuc2Zvcm1TdHJlYW0oc3luY1RyYW5zZm9ybUZuKSB7XG4gICAgcmV0dXJuIHRocm91Z2gyXzEub2JqKChzdGF0ZSwgX2VuY29kaW5nLCBjYikgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgbmV3U3RhdGUgPSBzeW5jVHJhbnNmb3JtRm4oc3RhdGUpO1xuICAgICAgICAgICAgY2IobnVsbCwgbmV3U3RhdGUpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjYihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5zdG9yZVRyYW5zZm9ybVN0cmVhbSA9IHN0b3JlVHJhbnNmb3JtU3RyZWFtO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNmb3JtLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgRUMgPSByZXF1aXJlKFwiZWxsaXB0aWNcIikuZWM7XG5cbnZhciBlYyA9IG5ldyBFQyhcInNlY3AyNTZrMVwiKTtcbnZhciBicm93c2VyQ3J5cHRvID0gZ2xvYmFsLmNyeXB0byB8fCBnbG9iYWwubXNDcnlwdG8gfHwge307XG52YXIgc3VidGxlID0gYnJvd3NlckNyeXB0by5zdWJ0bGUgfHwgYnJvd3NlckNyeXB0by53ZWJraXRTdWJ0bGU7XG5cbnZhciBub2RlQ3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG5cbmNvbnN0IEVDX0dST1VQX09SREVSID0gQnVmZmVyLmZyb20oJ2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlYmFhZWRjZTZhZjQ4YTAzYmJmZDI1ZThjZDAzNjQxNDEnLCAnaGV4Jyk7XG5jb25zdCBaRVJPMzIgPSBCdWZmZXIuYWxsb2MoMzIsIDApO1xuXG5mdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UgfHwgXCJBc3NlcnRpb24gZmFpbGVkXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzU2NhbGFyICh4KSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIoeCkgJiYgeC5sZW5ndGggPT09IDMyO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkUHJpdmF0ZUtleShwcml2YXRlS2V5KSB7XG4gIGlmICghaXNTY2FsYXIocHJpdmF0ZUtleSkpXG4gIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHByaXZhdGVLZXkuY29tcGFyZShaRVJPMzIpID4gMCAmJiAvLyA+IDBcbiAgcHJpdmF0ZUtleS5jb21wYXJlKEVDX0dST1VQX09SREVSKSA8IDA7IC8vIDwgR1xufVxuXG4vLyBDb21wYXJlIHR3byBidWZmZXJzIGluIGNvbnN0YW50IHRpbWUgdG8gcHJldmVudCB0aW1pbmcgYXR0YWNrcy5cbmZ1bmN0aW9uIGVxdWFsQ29uc3RUaW1lKGIxLCBiMikge1xuICBpZiAoYjEubGVuZ3RoICE9PSBiMi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHJlcyA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYjEubGVuZ3RoOyBpKyspIHtcbiAgICByZXMgfD0gYjFbaV0gXiBiMltpXTsgIC8vIGpzaGludCBpZ25vcmU6bGluZVxuICB9XG4gIHJldHVybiByZXMgPT09IDA7XG59XG5cbi8qIFRoaXMgbXVzdCBjaGVjayBpZiB3ZSdyZSBpbiB0aGUgYnJvd3NlciBvclxubm90LCBzaW5jZSB0aGUgZnVuY3Rpb25zIGFyZSBkaWZmZXJlbnQgYW5kIGRvZXNcbm5vdCBjb252ZXJ0IHVzaW5nIGJyb3dzZXJpZnkgKi9cbmZ1bmN0aW9uIHJhbmRvbUJ5dGVzKHNpemUpIHtcbiAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KHNpemUpO1xuICBpZiAodHlwZW9mIGJyb3dzZXJDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShub2RlQ3J5cHRvLnJhbmRvbUJ5dGVzKHNpemUpKTtcbiAgfSBlbHNlIHtcbiAgICBicm93c2VyQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnIpO1xuICB9XG4gIHJldHVybiBCdWZmZXIuZnJvbShhcnIpO1xufVxuXG5mdW5jdGlvbiBzaGE1MTIobXNnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgdmFyIGhhc2ggPSBub2RlQ3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTUxMicpO1xuICAgIHZhciByZXN1bHQgPSBoYXNoLnVwZGF0ZShtc2cpLmRpZ2VzdCgpO1xuICAgIHJlc29sdmUobmV3IFVpbnQ4QXJyYXkocmVzdWx0KSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRBZXMob3ApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGl2LCBrZXksIGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgaWYgKHN1YnRsZSkge1xuICAgICAgICB2YXIgaW1wb3J0QWxnb3JpdGhtID0ge25hbWU6IFwiQUVTLUNCQ1wifTtcbiAgICAgICAgdmFyIGtleXAgPSBzdWJ0bGUuaW1wb3J0S2V5KFwicmF3XCIsIGtleSwgaW1wb3J0QWxnb3JpdGhtLCBmYWxzZSwgW29wXSk7XG4gICAgICAgIHJldHVybiBrZXlwLnRoZW4oZnVuY3Rpb24oY3J5cHRvS2V5KSB7XG4gICAgICAgICAgdmFyIGVuY0FsZ29yaXRobSA9IHtuYW1lOiBcIkFFUy1DQkNcIiwgaXY6IGl2fTtcbiAgICAgICAgICByZXR1cm4gc3VidGxlW29wXShlbmNBbGdvcml0aG0sIGNyeXB0b0tleSwgZGF0YSk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmVzb2x2ZShCdWZmZXIuZnJvbShuZXcgVWludDhBcnJheShyZXN1bHQpKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG9wID09PSAnZW5jcnlwdCcpIHtcbiAgICAgICAgICB2YXIgY2lwaGVyID0gbm9kZUNyeXB0by5jcmVhdGVDaXBoZXJpdignYWVzLTI1Ni1jYmMnLCBrZXksIGl2KTtcbiAgICAgICAgICBsZXQgZmlyc3RDaHVuayA9IGNpcGhlci51cGRhdGUoZGF0YSk7XG4gICAgICAgICAgbGV0IHNlY29uZENodW5rID0gY2lwaGVyLmZpbmFsKCk7XG4gICAgICAgICAgcmVzb2x2ZShCdWZmZXIuY29uY2F0KFtmaXJzdENodW5rLCBzZWNvbmRDaHVua10pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcCA9PT0gJ2RlY3J5cHQnKSB7XG4gICAgICAgICAgdmFyIGRlY2lwaGVyID0gbm9kZUNyeXB0by5jcmVhdGVEZWNpcGhlcml2KCdhZXMtMjU2LWNiYycsIGtleSwgaXYpO1xuICAgICAgICAgIGxldCBmaXJzdENodW5rID0gZGVjaXBoZXIudXBkYXRlKGRhdGEpO1xuICAgICAgICAgIGxldCBzZWNvbmRDaHVuayA9IGRlY2lwaGVyLmZpbmFsKCk7XG4gICAgICAgICAgcmVzb2x2ZShCdWZmZXIuY29uY2F0KFtmaXJzdENodW5rLCBzZWNvbmRDaHVua10pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufVxuXG52YXIgYWVzQ2JjRW5jcnlwdCA9IGdldEFlcyhcImVuY3J5cHRcIik7XG52YXIgYWVzQ2JjRGVjcnlwdCA9IGdldEFlcyhcImRlY3J5cHRcIik7XG5cbmZ1bmN0aW9uIGhtYWNTaGEyNTZTaWduKGtleSwgbXNnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgdmFyIGhtYWMgPSBub2RlQ3J5cHRvLmNyZWF0ZUhtYWMoJ3NoYTI1NicsIEJ1ZmZlci5mcm9tKGtleSkpO1xuICAgIGhtYWMudXBkYXRlKG1zZyk7XG4gICAgdmFyIHJlc3VsdCA9IGhtYWMuZGlnZXN0KCk7XG4gICAgcmVzb2x2ZShyZXN1bHQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaG1hY1NoYTI1NlZlcmlmeShrZXksIG1zZywgc2lnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgdmFyIGhtYWMgPSBub2RlQ3J5cHRvLmNyZWF0ZUhtYWMoJ3NoYTI1NicsIEJ1ZmZlci5mcm9tKGtleSkpO1xuICAgIGhtYWMudXBkYXRlKG1zZyk7XG4gICAgdmFyIGV4cGVjdGVkU2lnID0gaG1hYy5kaWdlc3QoKTtcbiAgICByZXNvbHZlKGVxdWFsQ29uc3RUaW1lKGV4cGVjdGVkU2lnLCBzaWcpKTtcbiAgfSk7XG59XG5cbi8qKlxuICAqIEdlbmVyYXRlIGEgbmV3IHZhbGlkIHByaXZhdGUga2V5LiBXaWxsIHVzZSB0aGUgd2luZG93LmNyeXB0byBvciB3aW5kb3cubXNDcnlwdG8gYXMgc291cmNlXG4gICogZGVwZW5kaW5nIG9uIHlvdXIgYnJvd3Nlci5cbiAgKiBAcmV0dXJuIHtCdWZmZXJ9IEEgMzItYnl0ZSBwcml2YXRlIGtleS5cbiAgKiBAZnVuY3Rpb25cbiAgKi9cbmV4cG9ydHMuZ2VuZXJhdGVQcml2YXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcHJpdmF0ZUtleSA9IHJhbmRvbUJ5dGVzKDMyKTtcbiAgd2hpbGUgKCFpc1ZhbGlkUHJpdmF0ZUtleShwcml2YXRlS2V5KSkge1xuICAgIHByaXZhdGVLZXkgPSByYW5kb21CeXRlcygzMik7XG4gIH1cbiAgcmV0dXJuIHByaXZhdGVLZXk7XG59O1xuXG52YXIgZ2V0UHVibGljID0gZXhwb3J0cy5nZXRQdWJsaWMgPSBmdW5jdGlvbihwcml2YXRlS2V5KSB7XG4gIC8vIFRoaXMgZnVuY3Rpb24gaGFzIHN5bmMgQVBJIHNvIHdlIHRocm93IGFuIGVycm9yIGltbWVkaWF0ZWx5LlxuICBhc3NlcnQocHJpdmF0ZUtleS5sZW5ndGggPT09IDMyLCBcIkJhZCBwcml2YXRlIGtleVwiKTtcbiAgYXNzZXJ0KGlzVmFsaWRQcml2YXRlS2V5KHByaXZhdGVLZXkpLCBcIkJhZCBwcml2YXRlIGtleVwiKTtcbiAgLy8gWFhYKEthZ2FtaSk6IGBlbGxpcHRpYy51dGlscy5lbmNvZGVgIHJldHVybnMgYXJyYXkgZm9yIGV2ZXJ5XG4gIC8vIGVuY29kaW5nIGV4Y2VwdCBgaGV4YC5cbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGVjLmtleUZyb21Qcml2YXRlKHByaXZhdGVLZXkpLmdldFB1YmxpYyhcImFyclwiKSk7XG59O1xuXG4vKipcbiAqIEdldCBjb21wcmVzc2VkIHZlcnNpb24gb2YgcHVibGljIGtleS5cbiAqL1xudmFyIGdldFB1YmxpY0NvbXByZXNzZWQgPSBleHBvcnRzLmdldFB1YmxpY0NvbXByZXNzZWQgPSBmdW5jdGlvbihwcml2YXRlS2V5KSB7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuICBhc3NlcnQocHJpdmF0ZUtleS5sZW5ndGggPT09IDMyLCBcIkJhZCBwcml2YXRlIGtleVwiKTtcbiAgYXNzZXJ0KGlzVmFsaWRQcml2YXRlS2V5KHByaXZhdGVLZXkpLCBcIkJhZCBwcml2YXRlIGtleVwiKTtcbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93YW5kZXJlci9zZWNwMjU2azEtbm9kZS9pc3N1ZXMvNDZcbiAgbGV0IGNvbXByZXNzZWQgPSB0cnVlO1xuICByZXR1cm4gQnVmZmVyLmZyb20oZWMua2V5RnJvbVByaXZhdGUocHJpdmF0ZUtleSkuZ2V0UHVibGljKGNvbXByZXNzZWQsIFwiYXJyXCIpKTtcbn07XG5cbi8vIE5PVEUoS2FnYW1pKTogV2UgZG9uJ3QgdXNlIHByb21pc2Ugc2hpbSBpbiBCcm93c2VyIGltcGxlbWVudGF0aW9uXG4vLyBiZWNhdXNlIGl0J3Mgc3VwcG9ydGVkIG5hdGl2ZWx5IGluIG5ldyBicm93c2VycyAoc2VlXG4vLyA8aHR0cDovL2Nhbml1c2UuY29tLyNmZWF0PXByb21pc2VzPikgYW5kIHdlIGNhbiB1c2Ugb25seSBuZXcgYnJvd3NlcnNcbi8vIGJlY2F1c2Ugb2YgdGhlIFdlYkNyeXB0b0FQSSAoc2VlXG4vLyA8aHR0cDovL2Nhbml1c2UuY29tLyNmZWF0PWNyeXB0b2dyYXBoeT4pLlxuZXhwb3J0cy5zaWduID0gZnVuY3Rpb24ocHJpdmF0ZUtleSwgbXNnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgYXNzZXJ0KHByaXZhdGVLZXkubGVuZ3RoID09PSAzMiwgXCJCYWQgcHJpdmF0ZSBrZXlcIik7XG4gICAgYXNzZXJ0KGlzVmFsaWRQcml2YXRlS2V5KHByaXZhdGVLZXkpLCBcIkJhZCBwcml2YXRlIGtleVwiKTtcbiAgICBhc3NlcnQobXNnLmxlbmd0aCA+IDAsIFwiTWVzc2FnZSBzaG91bGQgbm90IGJlIGVtcHR5XCIpO1xuICAgIGFzc2VydChtc2cubGVuZ3RoIDw9IDMyLCBcIk1lc3NhZ2UgaXMgdG9vIGxvbmdcIik7XG4gICAgcmVzb2x2ZShCdWZmZXIuZnJvbShlYy5zaWduKG1zZywgcHJpdmF0ZUtleSwge2Nhbm9uaWNhbDogdHJ1ZX0pLnRvREVSKCkpKTtcbiAgfSk7XG59O1xuXG5leHBvcnRzLnZlcmlmeSA9IGZ1bmN0aW9uKHB1YmxpY0tleSwgbXNnLCBzaWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGFzc2VydChwdWJsaWNLZXkubGVuZ3RoID09PSA2NSB8fCBwdWJsaWNLZXkubGVuZ3RoID09PSAzMywgXCJCYWQgcHVibGljIGtleVwiKTtcbiAgICBpZiAocHVibGljS2V5Lmxlbmd0aCA9PT0gNjUpXG4gICAge1xuICAgICAgYXNzZXJ0KHB1YmxpY0tleVswXSA9PT0gNCwgXCJCYWQgcHVibGljIGtleVwiKTtcbiAgICB9XG4gICAgaWYgKHB1YmxpY0tleS5sZW5ndGggPT09IDMzKVxuICAgIHtcbiAgICAgIGFzc2VydChwdWJsaWNLZXlbMF0gPT09IDIgfHwgcHVibGljS2V5WzBdID09PSAzLCBcIkJhZCBwdWJsaWMga2V5XCIpO1xuICAgIH1cbiAgICBhc3NlcnQobXNnLmxlbmd0aCA+IDAsIFwiTWVzc2FnZSBzaG91bGQgbm90IGJlIGVtcHR5XCIpO1xuICAgIGFzc2VydChtc2cubGVuZ3RoIDw9IDMyLCBcIk1lc3NhZ2UgaXMgdG9vIGxvbmdcIik7XG4gICAgaWYgKGVjLnZlcmlmeShtc2csIHNpZywgcHVibGljS2V5KSkge1xuICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIkJhZCBzaWduYXR1cmVcIikpO1xuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgZGVyaXZlID0gZXhwb3J0cy5kZXJpdmUgPSBmdW5jdGlvbihwcml2YXRlS2V5QSwgcHVibGljS2V5Qikge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgIGFzc2VydChCdWZmZXIuaXNCdWZmZXIocHJpdmF0ZUtleUEpLCBcIkJhZCBwcml2YXRlIGtleVwiKTtcbiAgICBhc3NlcnQoQnVmZmVyLmlzQnVmZmVyKHB1YmxpY0tleUIpLCBcIkJhZCBwdWJsaWMga2V5XCIpO1xuICAgIGFzc2VydChwcml2YXRlS2V5QS5sZW5ndGggPT09IDMyLCBcIkJhZCBwcml2YXRlIGtleVwiKTtcbiAgICBhc3NlcnQoaXNWYWxpZFByaXZhdGVLZXkocHJpdmF0ZUtleUEpLCBcIkJhZCBwcml2YXRlIGtleVwiKTtcbiAgICBhc3NlcnQocHVibGljS2V5Qi5sZW5ndGggPT09IDY1IHx8IHB1YmxpY0tleUIubGVuZ3RoID09PSAzMywgXCJCYWQgcHVibGljIGtleVwiKTtcbiAgICBpZiAocHVibGljS2V5Qi5sZW5ndGggPT09IDY1KVxuICAgIHtcbiAgICAgIGFzc2VydChwdWJsaWNLZXlCWzBdID09PSA0LCBcIkJhZCBwdWJsaWMga2V5XCIpO1xuICAgIH1cbiAgICBpZiAocHVibGljS2V5Qi5sZW5ndGggPT09IDMzKVxuICAgIHtcbiAgICAgIGFzc2VydChwdWJsaWNLZXlCWzBdID09PSAyIHx8IHB1YmxpY0tleUJbMF0gPT09IDMsIFwiQmFkIHB1YmxpYyBrZXlcIik7XG4gICAgfVxuICAgIHZhciBrZXlBID0gZWMua2V5RnJvbVByaXZhdGUocHJpdmF0ZUtleUEpO1xuICAgIHZhciBrZXlCID0gZWMua2V5RnJvbVB1YmxpYyhwdWJsaWNLZXlCKTtcbiAgICB2YXIgUHggPSBrZXlBLmRlcml2ZShrZXlCLmdldFB1YmxpYygpKTsgIC8vIEJOIGluc3RhbmNlXG4gICAgcmVzb2x2ZShCdWZmZXIuZnJvbShQeC50b0FycmF5KCkpKTtcbiAgfSk7XG59O1xuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbihwdWJsaWNLZXlUbywgbXNnLCBvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAvLyBUbXAgdmFyaWFibGVzIHRvIHNhdmUgY29udGV4dCBmcm9tIGZsYXQgcHJvbWlzZXM7XG4gIHZhciBpdiwgZXBoZW1QdWJsaWNLZXksIGNpcGhlcnRleHQsIG1hY0tleTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICB2YXIgZXBoZW1Qcml2YXRlS2V5ID0gb3B0cy5lcGhlbVByaXZhdGVLZXkgfHwgcmFuZG9tQnl0ZXMoMzIpO1xuICAgIC8vIFRoZXJlIGlzIGEgdmVyeSB1bmxpa2VseSBwb3NzaWJpbGl0eSB0aGF0IGl0IGlzIG5vdCBhIHZhbGlkIGtleVxuICAgIHdoaWxlKCFpc1ZhbGlkUHJpdmF0ZUtleShlcGhlbVByaXZhdGVLZXkpKVxuICAgIHtcbiAgICAgIGVwaGVtUHJpdmF0ZUtleSA9IG9wdHMuZXBoZW1Qcml2YXRlS2V5IHx8IHJhbmRvbUJ5dGVzKDMyKTtcbiAgICB9XG4gICAgZXBoZW1QdWJsaWNLZXkgPSBnZXRQdWJsaWMoZXBoZW1Qcml2YXRlS2V5KTtcbiAgICByZXNvbHZlKGRlcml2ZShlcGhlbVByaXZhdGVLZXksIHB1YmxpY0tleVRvKSk7XG4gIH0pLnRoZW4oZnVuY3Rpb24oUHgpIHtcbiAgICByZXR1cm4gc2hhNTEyKFB4KTtcbiAgfSkudGhlbihmdW5jdGlvbihoYXNoKSB7XG4gICAgaXYgPSBvcHRzLml2IHx8IHJhbmRvbUJ5dGVzKDE2KTtcbiAgICB2YXIgZW5jcnlwdGlvbktleSA9IGhhc2guc2xpY2UoMCwgMzIpO1xuICAgIG1hY0tleSA9IGhhc2guc2xpY2UoMzIpO1xuICAgIHJldHVybiBhZXNDYmNFbmNyeXB0KGl2LCBlbmNyeXB0aW9uS2V5LCBtc2cpO1xuICB9KS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBjaXBoZXJ0ZXh0ID0gZGF0YTtcbiAgICB2YXIgZGF0YVRvTWFjID0gQnVmZmVyLmNvbmNhdChbaXYsIGVwaGVtUHVibGljS2V5LCBjaXBoZXJ0ZXh0XSk7XG4gICAgcmV0dXJuIGhtYWNTaGEyNTZTaWduKG1hY0tleSwgZGF0YVRvTWFjKTtcbiAgfSkudGhlbihmdW5jdGlvbihtYWMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXY6IGl2LFxuICAgICAgZXBoZW1QdWJsaWNLZXk6IGVwaGVtUHVibGljS2V5LFxuICAgICAgY2lwaGVydGV4dDogY2lwaGVydGV4dCxcbiAgICAgIG1hYzogbWFjLFxuICAgIH07XG4gIH0pO1xufTtcblxuZXhwb3J0cy5kZWNyeXB0ID0gZnVuY3Rpb24ocHJpdmF0ZUtleSwgb3B0cykge1xuICAvLyBUbXAgdmFyaWFibGUgdG8gc2F2ZSBjb250ZXh0IGZyb20gZmxhdCBwcm9taXNlcztcbiAgdmFyIGVuY3J5cHRpb25LZXk7XG4gIHJldHVybiBkZXJpdmUocHJpdmF0ZUtleSwgb3B0cy5lcGhlbVB1YmxpY0tleSkudGhlbihmdW5jdGlvbihQeCkge1xuICAgIHJldHVybiBzaGE1MTIoUHgpO1xuICB9KS50aGVuKGZ1bmN0aW9uKGhhc2gpIHtcbiAgICBlbmNyeXB0aW9uS2V5ID0gaGFzaC5zbGljZSgwLCAzMik7XG4gICAgdmFyIG1hY0tleSA9IGhhc2guc2xpY2UoMzIpO1xuICAgIHZhciBkYXRhVG9NYWMgPSBCdWZmZXIuY29uY2F0KFtcbiAgICAgIG9wdHMuaXYsXG4gICAgICBvcHRzLmVwaGVtUHVibGljS2V5LFxuICAgICAgb3B0cy5jaXBoZXJ0ZXh0XG4gICAgXSk7XG4gICAgcmV0dXJuIGhtYWNTaGEyNTZWZXJpZnkobWFjS2V5LCBkYXRhVG9NYWMsIG9wdHMubWFjKTtcbiAgfSkudGhlbihmdW5jdGlvbihtYWNHb29kKSB7XG4gICAgYXNzZXJ0KG1hY0dvb2QsIFwiQmFkIE1BQ1wiKTtcbiAgICByZXR1cm4gYWVzQ2JjRGVjcnlwdChvcHRzLml2LCBlbmNyeXB0aW9uS2V5LCBvcHRzLmNpcGhlcnRleHQpO1xuICB9KS50aGVuKGZ1bmN0aW9uKG1zZykge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShuZXcgVWludDhBcnJheShtc2cpKTtcbiAgfSk7XG59O1xuXG4iLCJpbXBvcnQgV2ViM0V0aENvbnRyYWN0IGZyb20gJ3dlYjMtZXRoLWNvbnRyYWN0JztcbmltcG9ydCB7IHRvSGV4IH0gZnJvbSAnd2ViMy11dGlscyc7XG5cbmNvbnN0IEVUSEVSRVVNX05FVFdPUksgPSB7XG4gICAgUk9QU1RFTjogXCJyb3BzdGVuXCIsXG4gICAgTUFJTk5FVDogXCJtYWlubmV0XCIsXG59O1xuY29uc3QgYWJpID0gW1xuICAgIHtcbiAgICAgICAgY29uc3RhbnQ6IHRydWUsXG4gICAgICAgIGlucHV0czogW10sXG4gICAgICAgIG5hbWU6IFwiY3VycmVudEVwb2NoXCIsXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBwYXlhYmxlOiBmYWxzZSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgIH0sXG4gICAge1xuICAgICAgICBjb25zdGFudDogdHJ1ZSxcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImVwb2NoXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBuYW1lOiBcImdldEVwb2NoSW5mb1wiLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJuXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJrXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJ0XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm5vZGVMaXN0XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInByZXZFcG9jaFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwibmV4dEVwb2NoXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBwYXlhYmxlOiBmYWxzZSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgIH0sXG4gICAge1xuICAgICAgICBjb25zdGFudDogdHJ1ZSxcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm5vZGVBZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBuYW1lOiBcImdldE5vZGVEZXRhaWxzXCIsXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJkZWNsYXJlZElwXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInBvc2l0aW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJwdWJLeFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwicHViS3lcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwidG1QMlBMaXN0ZW5BZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwicDJwTGlzdGVuQWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBwYXlhYmxlOiBmYWxzZSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgIH0sXG5dO1xuXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG5cclxuZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxuXG5jbGFzcyBOb2RlRGV0YWlsTWFuYWdlciB7XG4gICAgY29uc3RydWN0b3IoeyBuZXR3b3JrID0gRVRIRVJFVU1fTkVUV09SSy5NQUlOTkVULCBwcm94eUFkZHJlc3MgPSBcIjB4NjM4NjQ2NTAzNzQ2ZDU0NTYyMDllMzNhMmZmNWUzMjI2ZDY5OGJlYVwiIH0gPSB7fSkge1xuICAgICAgICB0aGlzLl9jdXJyZW50RXBvY2ggPSBcIjE5XCI7XG4gICAgICAgIHRoaXMuX3RvcnVzTm9kZUVuZHBvaW50cyA9IFtcbiAgICAgICAgICAgIFwiaHR0cHM6Ly90b3J1cy0xOS50b3J1c25vZGUuY29tL2pycGNcIixcbiAgICAgICAgICAgIFwiaHR0cHM6Ly90b3J1cy1ub2RlLmVucy5kb21haW5zL2pycGNcIixcbiAgICAgICAgICAgIFwiaHR0cHM6Ly90b3J1cy1ub2RlLm1hdGljLm5ldHdvcmsvanJwY1wiLFxuICAgICAgICAgICAgXCJodHRwczovL3RvcnVzLnppbGxpcWEubmV0d29yay9qcnBjXCIsXG4gICAgICAgICAgICBcImh0dHBzOi8vdG9ydXMtbWFpbm5ldC5jb3Ntb3MubmV0d29yay9qcnBjXCIsXG4gICAgICAgICAgICBcImh0dHBzOi8vdG9ydXMyLmV0aGVyc2Nhbi5jb20vanJwY1wiLFxuICAgICAgICAgICAgXCJodHRwczovL3RvcnVzLW5vZGUtdjIuc2thbGVsYWJzLmNvbS9qcnBjXCIsXG4gICAgICAgICAgICBcImh0dHBzOi8vdG9ydXMtbm9kZS5iaW5hbmNleC5kZXYvanJwY1wiLFxuICAgICAgICAgICAgXCJodHRwczovL3RvcnVzbm9kZS5vbnQuaW8vanJwY1wiLFxuICAgICAgICBdO1xuICAgICAgICB0aGlzLl90b3J1c05vZGVQdWIgPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgWDogXCJiYmU4M2M2NDE3N2MzNzc1NTUwZTZiYTZhYzJiYzA1OWY2ODQ3ZDY0NGM5ZTQ4OTRlNDJjNjBkNzk3NGQ4YzJiXCIsXG4gICAgICAgICAgICAgICAgWTogXCI4MmI0OWE3Y2FmNzBkZWYzOGNkYWQyNzQwYWY0NWMxZTRmOTY5NjUwMTA1YzUwMTlhMjliYjE4YjIxYTlhY2I1XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFg6IFwiYzIwOGNhYzRlZjlhNDdkMzg2MDk3YTljOTE1YjI4ZTljYjg5MjEzYWJlZThkMjZhMTcxOThlZTI2MTIwMWIwZFwiLFxuICAgICAgICAgICAgICAgIFk6IFwiYzdkYjJmZTQ2MzExMDlmNDA4MzNkZTlkYzc4ZDA3ZTM1NzA2NTQ5ZWU0OGZhNTU3YjMzZTRlNzVlMTA0Nzg3M1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBYOiBcImNhMTc2NmJiNDI2ZDRjYTU1ODI4MThhMGM1NDM5ZDU2MGVhNjRmNWJhYTA2MDc5M2FiMjlkZDNkMGNlYWNmZVwiLFxuICAgICAgICAgICAgICAgIFk6IFwiZDQ2YzFkMDhjNDBlMTMwNmUxYmNhMzI4YzIyODdiODI2ODE2NmIxMWExYmE0Yjg0NDJlYTJhZDBjNWUzMjE1MlwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBYOiBcImMzOTM0ZGQyZjZmNGIzZDJlMWUzOThjYzUwMWUxNDNjMWUxYTM4MWI1MmZlYjZkMTUyNWFmMzRkMTYyNTM3NjhcIixcbiAgICAgICAgICAgICAgICBZOiBcIjcxZjUxNDFhNTAzNTc5OTA5OWY1ZWEzZTI0MWU2Njk0NmJjNTVkYzg1N2FjM2JkN2Q2ZmNkYjhkY2QzZWVlZWZcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgWDogXCIyMmU2NmYxOTI5NjMxZDAwYmYwMjYyMjc1ODE1OTdmMDg1ZmQ5NGZkOTUyZmMwZGNhOWYwODMzMzk4YjVjMDY0XCIsXG4gICAgICAgICAgICAgICAgWTogXCI2MDg4YjM5MTJlMTBhMWU5ZDUwMzU1YTYwOWMxMGRiN2QxODhmMTZhMmUyZmQ3MzU3ZTUxYmY0ZjZhNzRmMGExXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFg6IFwiOWRjOWZhNDEwZjNjZTllYjcwZGY3MGNkZWEwMGE0OWYyYzRjYzdhMzFjMDhjMGRhYjVmODYzZWQzNWZmNTEzOVwiLFxuICAgICAgICAgICAgICAgIFk6IFwiNjI3YTI5MWNiODdhNzVjNjFkYTNmNjVkNjgxOGUxZTA1ZTM2MDIxNzE3OTgxN2VkMjdlOGM3M2JjYTdlYzEyMlwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBYOiBcIjExOGI5ZmMwN2U5N2IwOTZkODk5YjlmNjY1ODQ2M2NlNmE4Y2FhNjQwMzhlMzdmYzk2OWRmNGU2MDIzZGQ4YzZcIixcbiAgICAgICAgICAgICAgICBZOiBcImJhZjlmYTRlNTE3NzBmNDc5NmVhMTY1ZGQwM2E3NjliODYwNjY4MWEzODk1NGEwYTkyYzRjYmZmZDY2MDljZTlcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgWDogXCI4YTZkOGI5MjVkYTE1YTI3M2RlYzNkOGY4Mzk1ZWMzNWNkNjg3OGYyNzRiMmIxODBlNGUxMDY5OTlkYjY0MDQzXCIsXG4gICAgICAgICAgICAgICAgWTogXCI5NmY2N2Y4NzBjMTU3NzQzZGEwYjFlYjg0ZDg5YmYzMDUwMGQ3NGRjODRjMTFmNTAxZWUxY2IwMTNhY2M4YzQ2XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFg6IFwiMzljZWNiNjJlODYzNzI5ZjU3MmY3ZGZjNDZjMjQ4Njc5ODFiZjA0YmI0MDVmZWQwZGYzOWUzMzk4NGJmYWRlNVwiLFxuICAgICAgICAgICAgICAgIFk6IFwiNjFjMjM2NDQzNDAxMmU2OGEyYmUyZTk5NTI4MDUwMzdlNTI2MjlkNzc2MmZhZmM4ZTEwZTlmYjViYWQ4Zjc5MFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXTtcbiAgICAgICAgdGhpcy5fdG9ydXNJbmRleGVzID0gWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDldO1xuICAgICAgICB0aGlzLl9uZXR3b3JrID0gRVRIRVJFVU1fTkVUV09SSy5NQUlOTkVUO1xuICAgICAgICBsZXQgdXJsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxVcmwgPSBuZXcgVVJMKG5ldHdvcmspO1xuICAgICAgICAgICAgdXJsID0gbG9jYWxVcmwuaHJlZjtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoXykge1xuICAgICAgICAgICAgY29uc3QgcHJvamVjdElkID0gXCJiOGNkYjBlNGNmZjI0NTk5YTI4NmJmOGU4N2ZmMWM5NlwiO1xuICAgICAgICAgICAgdXJsID0gYGh0dHBzOi8vJHtuZXR3b3JrfS5pbmZ1cmEuaW8vdjMvJHtwcm9qZWN0SWR9YDtcbiAgICAgICAgfVxuICAgICAgICBXZWIzRXRoQ29udHJhY3Quc2V0UHJvdmlkZXIodXJsKTtcbiAgICAgICAgdGhpcy5ub2RlTGlzdENvbnRyYWN0ID0gbmV3IFdlYjNFdGhDb250cmFjdChhYmksIHByb3h5QWRkcmVzcyk7XG4gICAgICAgIHRoaXMubm9kZUxpc3RBZGRyZXNzID0gcHJveHlBZGRyZXNzO1xuICAgICAgICB0aGlzLnVwZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fbmV0d29yayA9IG5ldHdvcms7XG4gICAgfVxuICAgIGdldCBfbm9kZURldGFpbHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjdXJyZW50RXBvY2g6IHRoaXMuX2N1cnJlbnRFcG9jaCxcbiAgICAgICAgICAgIG5vZGVMaXN0QWRkcmVzczogdGhpcy5ub2RlTGlzdEFkZHJlc3MsXG4gICAgICAgICAgICB0b3J1c05vZGVFbmRwb2ludHM6IHRoaXMuX3RvcnVzTm9kZUVuZHBvaW50cyxcbiAgICAgICAgICAgIHRvcnVzTm9kZVB1YjogdGhpcy5fdG9ydXNOb2RlUHViLFxuICAgICAgICAgICAgdG9ydXNJbmRleGVzOiB0aGlzLl90b3J1c0luZGV4ZXMsXG4gICAgICAgICAgICB1cGRhdGVkOiB0aGlzLnVwZGF0ZWQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldEN1cnJlbnRFcG9jaCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZUxpc3RDb250cmFjdC5tZXRob2RzLmN1cnJlbnRFcG9jaCgpLmNhbGwoKTtcbiAgICB9XG4gICAgZ2V0RXBvY2hJbmZvKGVwb2NoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVMaXN0Q29udHJhY3QubWV0aG9kcy5nZXRFcG9jaEluZm8oZXBvY2gpLmNhbGwoKTtcbiAgICB9XG4gICAgZ2V0Tm9kZUVuZHBvaW50KG5vZGVFdGhBZGRyZXNzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVMaXN0Q29udHJhY3QubWV0aG9kcy5nZXROb2RlRGV0YWlscyhub2RlRXRoQWRkcmVzcykuY2FsbCgpO1xuICAgIH1cbiAgICBnZXROb2RlRGV0YWlscyhza2lwID0gZmFsc2UsIHNraXBQb3N0RXBvY2hDaGVjayA9IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChza2lwICYmIHRoaXMuX25ldHdvcmsgPT09IEVUSEVSRVVNX05FVFdPUksuTUFJTk5FVClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25vZGVEZXRhaWxzO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnVwZGF0ZWQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ub2RlRGV0YWlscztcbiAgICAgICAgICAgICAgICBjb25zdCBsYXRlc3RFcG9jaCA9IHlpZWxkIHRoaXMuZ2V0Q3VycmVudEVwb2NoKCk7XG4gICAgICAgICAgICAgICAgaWYgKHNraXBQb3N0RXBvY2hDaGVjayAmJiB0aGlzLl9uZXR3b3JrID09PSBFVEhFUkVVTV9ORVRXT1JLLk1BSU5ORVQgJiYgbGF0ZXN0RXBvY2ggPT09IHRoaXMuX2N1cnJlbnRFcG9jaClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25vZGVEZXRhaWxzO1xuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRFcG9jaCA9IGxhdGVzdEVwb2NoO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhdGVzdEVwb2NoSW5mbyA9IHlpZWxkIHRoaXMuZ2V0RXBvY2hJbmZvKGxhdGVzdEVwb2NoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleGVzID0gbGF0ZXN0RXBvY2hJbmZvLm5vZGVMaXN0Lm1hcCgoXywgcG9zKSA9PiBwb3MgKyAxKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90b3J1c0luZGV4ZXMgPSBpbmRleGVzO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGVFbmRwb2ludFJlcXVlc3RzID0gbGF0ZXN0RXBvY2hJbmZvLm5vZGVMaXN0Lm1hcCgobm9kZUV0aEFkZHJlc3MpID0+IHRoaXMuZ2V0Tm9kZUVuZHBvaW50KG5vZGVFdGhBZGRyZXNzKSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZUVuZFBvaW50cyA9IHlpZWxkIFByb21pc2UuYWxsKG5vZGVFbmRwb2ludFJlcXVlc3RzKTtcbiAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGVkRW5kcG9pbnRzID0gW107XG4gICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZE5vZGVQdWIgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbm9kZUVuZFBvaW50cy5sZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kUG9pbnRFbGVtZW50ID0gbm9kZUVuZFBvaW50c1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZHBvaW50ID0gYGh0dHBzOi8vJHtlbmRQb2ludEVsZW1lbnQuZGVjbGFyZWRJcC5zcGxpdChcIjpcIilbMF19L2pycGNgO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVkRW5kcG9pbnRzLnB1c2goZW5kcG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVkTm9kZVB1Yi5wdXNoKHsgWDogdG9IZXgoZW5kUG9pbnRFbGVtZW50LnB1Ykt4KS5yZXBsYWNlKFwiMHhcIiwgXCJcIiksIFk6IHRvSGV4KGVuZFBvaW50RWxlbWVudC5wdWJLeSkucmVwbGFjZShcIjB4XCIsIFwiXCIpIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl90b3J1c05vZGVFbmRwb2ludHMgPSB1cGRhdGVkRW5kcG9pbnRzO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RvcnVzTm9kZVB1YiA9IHVwZGF0ZWROb2RlUHViO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25vZGVEZXRhaWxzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKF8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbm9kZURldGFpbHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgRVRIRVJFVU1fTkVUV09SSywgYWJpLCBOb2RlRGV0YWlsTWFuYWdlciBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mZXRjaE5vZGVEZXRhaWxzLmVzbS5qcy5tYXBcbiIsImltcG9ydCBtZXJnZSBmcm9tICdsb2Rhc2gubWVyZ2UnO1xuXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG5cclxuZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxuXG5sZXQgYXBpS2V5ID0gXCJ0b3J1cy1kZWZhdWx0XCI7XG5sZXQgZW1iZWRIb3N0ID0gXCJcIjtcbi8vICNyZWdpb24gQVBJIEtleXNcbmNvbnN0IGdhdGV3YXlBdXRoSGVhZGVyID0gXCJ4LWFwaS1rZXlcIjtcbmNvbnN0IGdhdGV3YXlFbWJlZEhvc3RIZWFkZXIgPSBcIngtZW1iZWQtaG9zdFwiO1xuZnVuY3Rpb24gc2V0RW1iZWRIb3N0KGVtYmVkSG9zdF8pIHtcbiAgICBlbWJlZEhvc3QgPSBlbWJlZEhvc3RfO1xufVxuZnVuY3Rpb24gY2xlYXJFbWJlZEhvc3QoKSB7XG4gICAgZW1iZWRIb3N0ID0gXCJcIjtcbn1cbmZ1bmN0aW9uIGdldEVtYmVkSG9zdCgpIHtcbiAgICByZXR1cm4gZW1iZWRIb3N0O1xufVxuZnVuY3Rpb24gc2V0QVBJS2V5KGFwaUtleV8pIHtcbiAgICBhcGlLZXkgPSBhcGlLZXlfO1xufVxuZnVuY3Rpb24gY2xlYXJBUElLZXkoKSB7XG4gICAgYXBpS2V5ID0gXCJ0b3J1cy1kZWZhdWx0XCI7XG59XG5mdW5jdGlvbiBnZXRBUElLZXkoKSB7XG4gICAgcmV0dXJuIGFwaUtleTtcbn1cbi8vICNlbmRyZWdpb25cbmZ1bmN0aW9uIGdldEFwaUtleUhlYWRlcnMoKSB7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGlmIChhcGlLZXkpXG4gICAgICAgIGhlYWRlcnNbZ2F0ZXdheUF1dGhIZWFkZXJdID0gYXBpS2V5O1xuICAgIGlmIChlbWJlZEhvc3QpXG4gICAgICAgIGhlYWRlcnNbZ2F0ZXdheUVtYmVkSG9zdEhlYWRlcl0gPSBlbWJlZEhvc3Q7XG4gICAgcmV0dXJuIGhlYWRlcnM7XG59XG5jb25zdCBwcm9taXNlVGltZW91dCA9IChtcywgcHJvbWlzZSkgPT4ge1xuICAgIGNvbnN0IHRpbWVvdXQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IGlkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoaWQpO1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgVGltZWQgb3V0IGluICR7bXN9bXNgKSk7XG4gICAgICAgIH0sIG1zKTtcbiAgICB9KTtcbiAgICByZXR1cm4gUHJvbWlzZS5yYWNlKFtwcm9taXNlLCB0aW1lb3V0XSk7XG59O1xuY29uc3QgZ2V0ID0gKHVybCwgb3B0aW9uc18gPSB7fSwgY3VzdG9tT3B0aW9ucyA9IHt9KSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgICAgbW9kZTogXCJjb3JzXCIsXG4gICAgICAgIGhlYWRlcnM6IHt9LFxuICAgIH07XG4gICAgaWYgKGN1c3RvbU9wdGlvbnMudXNlQVBJS2V5KSB7XG4gICAgICAgIGRlZmF1bHRPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLmhlYWRlcnMpLCBnZXRBcGlLZXlIZWFkZXJzKCkpO1xuICAgIH1cbiAgICBjb25zdCBvcHRpb25zID0gbWVyZ2UoZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnNfLCB7IG1ldGhvZDogXCJHRVRcIiB9KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIGZldGNoKHVybCwgb3B0aW9ucyk7XG4gICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgfVxuICAgIHRocm93IHJlc3BvbnNlO1xufSk7XG5jb25zdCBwb3N0ID0gKHVybCwgZGF0YSA9IHt9LCBvcHRpb25zXyA9IHt9LCBjdXN0b21PcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgICAgbW9kZTogXCJjb3JzXCIsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiLFxuICAgICAgICB9LFxuICAgIH07XG4gICAgaWYgKGN1c3RvbU9wdGlvbnMudXNlQVBJS2V5KSB7XG4gICAgICAgIGRlZmF1bHRPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLmhlYWRlcnMpLCBnZXRBcGlLZXlIZWFkZXJzKCkpO1xuICAgIH1cbiAgICBjb25zdCBvcHRpb25zID0gbWVyZ2UoZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnNfLCB7IG1ldGhvZDogXCJQT1NUXCIgfSk7XG4gICAgLy8gZGVlcCBtZXJnZSBjaGFuZ2VzIHRoZSBzdHJ1Y3R1cmUgb2YgZm9ybSBkYXRhIGFuZCB1cmwgZW5jb2RlZCBkYXRhICxcbiAgICAvLyBzbyB3ZSBzaG91bGQgbm90IGRlZXBtZXJnZSBib2R5IGRhdGFcbiAgICBpZiAoY3VzdG9tT3B0aW9ucy5pc1VybEVuY29kZWREYXRhKSB7XG4gICAgICAgIC8vIGZvciBtdWx0aXBhcnQgcmVxdWVzdCBicm93c2VyL2NsaWVudCB3aWxsIGFkZCBtdWx0aXBhcnQgY29udGVudCB0eXBlXG4gICAgICAgIC8vIGFsb25nIHdpdGggbXVsdGlwYXJ0IGJvdW5kYXJ5ICwgc28gZm9yIG11bHRpcGFydCByZXF1ZXN0IHNlbmRcbiAgICAgICAgLy8gY29udGVudC10eXBlOiB1bmRlZmluZWQgb3Igc2VuZCB3aXRoIG11bHRpcGFydCBib3VuZGFyeSBpZiBhbHJlYWR5IGtub3duXG4gICAgICAgIG9wdGlvbnMuYm9keSA9IGRhdGE7XG4gICAgICAgIC8vIElmIHVybCBlbmNvZGVkIGRhdGEsIHRoaXMgbXVzdCBub3QgYmUgdGhlIGNvbnRlbnQgdHlwZVxuICAgICAgICBpZiAob3B0aW9ucy5oZWFkZXJzW1wiQ29udGVudC1UeXBlXCJdID09PSBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIilcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmhlYWRlcnNbXCJDb250ZW50LVR5cGVcIl07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBvcHRpb25zLmJvZHkgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2VUaW1lb3V0KGN1c3RvbU9wdGlvbnMudGltZW91dCB8fCA2MDAwMCwgZmV0Y2godXJsLCBvcHRpb25zKS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgcmVzcG9uc2U7XG4gICAgfSkpO1xufTtcbmNvbnN0IHBhdGNoID0gKHVybCwgZGF0YSA9IHt9LCBvcHRpb25zXyA9IHt9LCBjdXN0b21PcHRpb25zID0ge30pID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgICBtb2RlOiBcImNvcnNcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCIsXG4gICAgICAgIH0sXG4gICAgfTtcbiAgICAvLyBmb3IgbXVsdGlwYXJ0IHJlcXVlc3QgYnJvd3Nlci9jbGllbnQgd2lsbCBhZGQgbXVsdGlwYXJ0IGNvbnRlbnQgdHlwZVxuICAgIC8vIGFsb25nIHdpdGggbXVsdGlwYXJ0IGJvdW5kYXJ5ICwgc28gZm9yIG11bHRpcGFydCByZXF1ZXN0IHNlbmRcbiAgICAvLyBjb250ZW50LXR5cGU6IHVuZGVmaW5lZCBvciBzZW5kIHdpdGggbXVsdGlwYXJ0IGJvdW5kYXJ5IGlmIGFscmVhZHkga25vd25cbiAgICBpZiAoY3VzdG9tT3B0aW9ucy51c2VBUElLZXkpIHtcbiAgICAgICAgZGVmYXVsdE9wdGlvbnMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMuaGVhZGVycyksIGdldEFwaUtleUhlYWRlcnMoKSk7XG4gICAgfVxuICAgIGNvbnN0IG9wdGlvbnMgPSBtZXJnZShkZWZhdWx0T3B0aW9ucywgb3B0aW9uc18sIHsgbWV0aG9kOiBcIlBBVENIXCIgfSk7XG4gICAgLy8gZGVlcCBtZXJnZSBjaGFuZ2VzIHRoZSBzdHJ1Y3R1cmUgb2YgZm9ybSBkYXRhIGFuZCB1cmwgZW5jb2RlZCBkYXRhICxcbiAgICAvLyBzbyB3ZSBzaG91bGQgbm90IGRlZXBtZXJnZSBib2R5IGRhdGFcbiAgICBpZiAoY3VzdG9tT3B0aW9ucy5pc1VybEVuY29kZWREYXRhKSB7XG4gICAgICAgIC8vIGZvciBtdWx0aXBhcnQgcmVxdWVzdCBicm93c2VyL2NsaWVudCB3aWxsIGFkZCBtdWx0aXBhcnQgY29udGVudCB0eXBlXG4gICAgICAgIC8vIGFsb25nIHdpdGggbXVsdGlwYXJ0IGJvdW5kYXJ5ICwgc28gZm9yIG11bHRpcGFydCByZXF1ZXN0IHNlbmRcbiAgICAgICAgLy8gY29udGVudC10eXBlOiB1bmRlZmluZWQgb3Igc2VuZCB3aXRoIG11bHRpcGFydCBib3VuZGFyeSBpZiBhbHJlYWR5IGtub3duXG4gICAgICAgIG9wdGlvbnMuYm9keSA9IGRhdGE7XG4gICAgICAgIC8vIElmIHVybCBlbmNvZGVkIGRhdGEsIHRoaXMgbXVzdCBub3QgYmUgdGhlIGNvbnRlbnQgdHlwZVxuICAgICAgICBpZiAob3B0aW9ucy5oZWFkZXJzW1wiQ29udGVudC1UeXBlXCJdID09PSBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIilcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmhlYWRlcnNbXCJDb250ZW50LVR5cGVcIl07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBvcHRpb25zLmJvZHkgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCBmZXRjaCh1cmwsIG9wdGlvbnMpO1xuICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgIH1cbiAgICB0aHJvdyByZXNwb25zZTtcbn0pO1xuY29uc3QgcmVtb3ZlID0gKHVybCwgZGF0YSA9IHt9LCBvcHRpb25zXyA9IHt9LCBjdXN0b21PcHRpb25zID0ge30pID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgICBtb2RlOiBcImNvcnNcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCIsXG4gICAgICAgIH0sXG4gICAgfTtcbiAgICAvLyBmb3IgbXVsdGlwYXJ0IHJlcXVlc3QgYnJvd3Nlci9jbGllbnQgd2lsbCBhZGQgbXVsdGlwYXJ0IGNvbnRlbnQgdHlwZVxuICAgIC8vIGFsb25nIHdpdGggbXVsdGlwYXJ0IGJvdW5kYXJ5ICwgc28gZm9yIG11bHRpcGFydCByZXF1ZXN0IHNlbmRcbiAgICAvLyBjb250ZW50LXR5cGU6IHVuZGVmaW5lZCBvciBzZW5kIHdpdGggbXVsdGlwYXJ0IGJvdW5kYXJ5IGlmIGFscmVhZHkga25vd25cbiAgICBpZiAoY3VzdG9tT3B0aW9ucy51c2VBUElLZXkpIHtcbiAgICAgICAgZGVmYXVsdE9wdGlvbnMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMuaGVhZGVycyksIGdldEFwaUtleUhlYWRlcnMoKSk7XG4gICAgfVxuICAgIGNvbnN0IG9wdGlvbnMgPSBtZXJnZShkZWZhdWx0T3B0aW9ucywgb3B0aW9uc18sIHsgbWV0aG9kOiBcIkRFTEVURVwiIH0pO1xuICAgIGlmIChjdXN0b21PcHRpb25zLmlzVXJsRW5jb2RlZERhdGEpIHtcbiAgICAgICAgLy8gZm9yIG11bHRpcGFydCByZXF1ZXN0IGJyb3dzZXIvY2xpZW50IHdpbGwgYWRkIG11bHRpcGFydCBjb250ZW50IHR5cGVcbiAgICAgICAgLy8gYWxvbmcgd2l0aCBtdWx0aXBhcnQgYm91bmRhcnkgLCBzbyBmb3IgbXVsdGlwYXJ0IHJlcXVlc3Qgc2VuZFxuICAgICAgICAvLyBjb250ZW50LXR5cGU6IHVuZGVmaW5lZCBvciBzZW5kIHdpdGggbXVsdGlwYXJ0IGJvdW5kYXJ5IGlmIGFscmVhZHkga25vd25cbiAgICAgICAgb3B0aW9ucy5ib2R5ID0gZGF0YTtcbiAgICAgICAgLy8gSWYgdXJsIGVuY29kZWQgZGF0YSwgdGhpcyBtdXN0IG5vdCBiZSB0aGUgY29udGVudCB0eXBlXG4gICAgICAgIGlmIChvcHRpb25zLmhlYWRlcnNbXCJDb250ZW50LVR5cGVcIl0gPT09IFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiKVxuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuaGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG9wdGlvbnMuYm9keSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIGZldGNoKHVybCwgb3B0aW9ucyk7XG4gICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgfVxuICAgIHRocm93IHJlc3BvbnNlO1xufSk7XG5jb25zdCBnZW5lcmF0ZUpzb25SUENPYmplY3QgPSAobWV0aG9kLCBwYXJhbWV0ZXJzKSA9PiAoe1xuICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgbWV0aG9kLFxuICAgIGlkOiAxMCxcbiAgICBwYXJhbXM6IHBhcmFtZXRlcnMsXG59KTtcbmNvbnN0IHByb21pc2VSYWNlID0gKHVybCwgb3B0aW9ucywgdGltZW91dCA9IDYwMDAwKSA9PiBQcm9taXNlLnJhY2UoW1xuICAgIGdldCh1cmwsIG9wdGlvbnMpLFxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwidGltZWQgb3V0XCIpKTtcbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgfSksXG5dKTtcblxuZXhwb3J0IHsgY2xlYXJBUElLZXksIGNsZWFyRW1iZWRIb3N0LCBnYXRld2F5QXV0aEhlYWRlciwgZ2F0ZXdheUVtYmVkSG9zdEhlYWRlciwgZ2VuZXJhdGVKc29uUlBDT2JqZWN0LCBnZXQsIGdldEFQSUtleSwgZ2V0RW1iZWRIb3N0LCBwYXRjaCwgcG9zdCwgcHJvbWlzZVJhY2UsIHByb21pc2VUaW1lb3V0LCByZW1vdmUsIHNldEFQSUtleSwgc2V0RW1iZWRIb3N0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1odHRwSGVscGVycy5lc20uanMubWFwXG4iLCJpbXBvcnQgcmFuZG9tYnl0ZXMgZnJvbSAncmFuZG9tYnl0ZXMnO1xuaW1wb3J0IGJhc2U2NHVybExpYiBmcm9tICdiYXNlNjR1cmwnO1xuaW1wb3J0IGtlY2Nha0xpYiBmcm9tICdrZWNjYWsnO1xuXG4vLyBUT0RPOiBzaG91bGQgYmUgY3J5cHRvIHNhZmVcbmNvbnN0IHJhbmRvbUlkID0gKCkgPT4gcmFuZG9tYnl0ZXMoMzIpLnRvU3RyaW5nKFwiaGV4XCIpO1xuXG5jbGFzcyBVUkxXaXRoSGFzaFBhcmFtcyBleHRlbmRzIFVSTCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuaGFzaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHRoaXMuaGFzaCA9IHRoaXMuaGFzaFBhcmFtcy50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gc3VwZXIudG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgICB9XG59XG5cbmNvbnN0IGJhc2U2NHVybCA9IGJhc2U2NHVybExpYjtcbmZ1bmN0aW9uIHNhZmVidG9hKHN0cikge1xuICAgIHJldHVybiBiYXNlNjR1cmwuZW5jb2RlKHN0cik7XG59XG5mdW5jdGlvbiBzYWZlYXRvYihzdHIpIHtcbiAgICAvLyBHb2luZyBiYWNrd2FyZHM6IGZyb20gYnl0ZXN0cmVhbSwgdG8gcGVyY2VudC1lbmNvZGluZywgdG8gb3JpZ2luYWwgc3RyaW5nLlxuICAgIHJldHVybiBiYXNlNjR1cmwuZGVjb2RlKHN0cik7XG59XG5jb25zdCBrZWNjYWsgPSBrZWNjYWtMaWI7XG5mdW5jdGlvbiBiYXNlNjR0b0pTT04oYjY0c3RyKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoYmFzZTY0dXJsLmRlY29kZShiNjRzdHIpKTtcbn1cbmZ1bmN0aW9uIGpzb25Ub0Jhc2U2NChqc29uKSB7XG4gICAgcmV0dXJuIGJhc2U2NHVybC5lbmNvZGUoSlNPTi5zdHJpbmdpZnkoanNvbikpO1xufVxuZnVuY3Rpb24ga2VjY2FrMjU2KHN0cikge1xuICAgIGxldCBpbnB1dCA9IHN0cjtcbiAgICBpZiAodHlwZW9mIHN0ciA9PT0gXCJzdHJpbmdcIiAmJiBzdHIuc2xpY2UoMCwgMikgPT09IFwiMHhcIiAmJiBzdHIubGVuZ3RoID09PSA2Nikge1xuICAgICAgICBpbnB1dCA9IEJ1ZmZlci5mcm9tKHN0ci5zbGljZSgyKSwgXCJoZXhcIik7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBgMHgke2tlY2NhayhcImtlY2NhazI1NlwiKS51cGRhdGUoaW5wdXQpLmRpZ2VzdChcImhleFwiKS5wYWRTdGFydCg2NCwgXCIwXCIpfWA7XG4gICAgcmV0dXJuIGRhdGE7XG59XG5cbmV4cG9ydCB7IFVSTFdpdGhIYXNoUGFyYW1zLCBiYXNlNjR0b0pTT04sIGJhc2U2NHVybCwganNvblRvQmFzZTY0LCBrZWNjYWssIGtlY2NhazI1NiwgcmFuZG9tSWQsIHNhZmVhdG9iLCBzYWZlYnRvYSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3BlbmxvZ2luVXRpbHMuZXNtLmpzLm1hcFxuIiwiaW1wb3J0IHsgRHVwbGV4IH0gZnJvbSAncmVhZGFibGUtc3RyZWFtJztcbmltcG9ydCB7IHJhbmRvbUlkIH0gZnJvbSAnQHRvcnVzbGFicy9vcGVubG9naW4tdXRpbHMnO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJztcbmltcG9ydCBzdHJpbmdpZnkgZnJvbSAnZmFzdC1zYWZlLXN0cmluZ2lmeSc7XG5pbXBvcnQgZW9zIGZyb20gJ2VuZC1vZi1zdHJlYW0nO1xuaW1wb3J0IG9uY2UgZnJvbSAnb25jZSc7XG5pbXBvcnQgcHVtcCBmcm9tICdwdW1wJztcblxuZnVuY3Rpb24gbm9vcCgpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuY29uc3QgU1lOID0gXCJTWU5cIjtcbmNvbnN0IEFDSyA9IFwiQUNLXCI7XG5jb25zdCBCUksgPSBcIkJSS1wiO1xuY2xhc3MgQmFzZVBvc3RNZXNzYWdlU3RyZWFtIGV4dGVuZHMgRHVwbGV4IHtcbiAgICBjb25zdHJ1Y3Rvcih7IG5hbWUsIHRhcmdldCwgdGFyZ2V0V2luZG93ID0gd2luZG93LCB0YXJnZXRPcmlnaW4gPSBcIipcIiwgfSkge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBvYmplY3RNb2RlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFuYW1lIHx8ICF0YXJnZXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaW5wdXQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2luaXQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faGF2ZVN5biA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0OyAvLyB0YXJnZXQgb3JpZ2luXG4gICAgICAgIHRoaXMuX3RhcmdldFdpbmRvdyA9IHRhcmdldFdpbmRvdztcbiAgICAgICAgdGhpcy5fdGFyZ2V0T3JpZ2luID0gdGFyZ2V0T3JpZ2luO1xuICAgICAgICB0aGlzLl9vbk1lc3NhZ2UgPSB0aGlzLm9uTWVzc2FnZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9zeW5JbnRlcnZhbElkID0gbnVsbDtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuX29uTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB0aGlzLl9oYW5kU2hha2UoKTtcbiAgICB9XG4gICAgX2JyZWFrKCkge1xuICAgICAgICB0aGlzLmNvcmsoKTtcbiAgICAgICAgdGhpcy5fd3JpdGUoQlJLLCBudWxsLCBub29wKTtcbiAgICAgICAgdGhpcy5faGF2ZVN5biA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pbml0ID0gZmFsc2U7XG4gICAgfVxuICAgIF9oYW5kU2hha2UoKSB7XG4gICAgICAgIHRoaXMuX3dyaXRlKFNZTiwgbnVsbCwgbm9vcCk7XG4gICAgICAgIHRoaXMuY29yaygpO1xuICAgIH1cbiAgICBfb25EYXRhKGRhdGEpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pbml0KSB7XG4gICAgICAgICAgICAvLyBsaXN0ZW4gZm9yIGhhbmRzaGFrZVxuICAgICAgICAgICAgaWYgKGRhdGEgPT09IFNZTikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhdmVTeW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dyaXRlKEFDSywgbnVsbCwgbm9vcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChkYXRhID09PSBBQ0spIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbml0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2hhdmVTeW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fd3JpdGUoQUNLLCBudWxsLCBub29wKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy51bmNvcmsoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkYXRhID09PSBCUkspIHtcbiAgICAgICAgICAgIHRoaXMuX2JyZWFrKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBmb3J3YXJkIG1lc3NhZ2VcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wdXNoKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImVycm9yXCIsIGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3Bvc3RNZXNzYWdlKGRhdGEpIHtcbiAgICAgICAgY29uc3Qgb3JpZ2luQ29uc3RyYWludCA9IHRoaXMuX3RhcmdldE9yaWdpbjtcbiAgICAgICAgdGhpcy5fdGFyZ2V0V2luZG93LnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIHRhcmdldDogdGhpcy5fdGFyZ2V0LFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgfSwgb3JpZ2luQ29uc3RyYWludCk7XG4gICAgfVxuICAgIG9uTWVzc2FnZShldmVudCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZXZlbnQuZGF0YTtcbiAgICAgICAgLy8gdmFsaWRhdGUgbWVzc2FnZVxuICAgICAgICBpZiAoKHRoaXMuX3RhcmdldE9yaWdpbiAhPT0gXCIqXCIgJiYgZXZlbnQub3JpZ2luICE9PSB0aGlzLl90YXJnZXRPcmlnaW4pIHx8XG4gICAgICAgICAgICBldmVudC5zb3VyY2UgIT09IHRoaXMuX3RhcmdldFdpbmRvdyB8fFxuICAgICAgICAgICAgdHlwZW9mIG1lc3NhZ2UgIT09IFwib2JqZWN0XCIgfHxcbiAgICAgICAgICAgIG1lc3NhZ2UudGFyZ2V0ICE9PSB0aGlzLl9uYW1lIHx8XG4gICAgICAgICAgICAhbWVzc2FnZS5kYXRhKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb25EYXRhKG1lc3NhZ2UuZGF0YSk7XG4gICAgfVxuICAgIF9yZWFkKCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBfd3JpdGUoZGF0YSwgXywgY2IpIHtcbiAgICAgICAgdGhpcy5fcG9zdE1lc3NhZ2UoZGF0YSk7XG4gICAgICAgIGNiKCk7XG4gICAgfVxuICAgIF9kZXN0cm95KCkge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgdGhpcy5fb25NZXNzYWdlLCBmYWxzZSk7XG4gICAgfVxufVxuXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG5cclxuZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxuXG5mdW5jdGlvbiBzYWZlQXBwbHkoaGFuZGxlciwgY29udGV4dCwgYXJncykge1xuICAgIHRyeSB7XG4gICAgICAgIFJlZmxlY3QuYXBwbHkoaGFuZGxlciwgY29udGV4dCwgYXJncyk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gVGhyb3cgZXJyb3IgYWZ0ZXIgdGltZW91dCBzbyBhcyBub3QgdG8gaW50ZXJydXB0IHRoZSBzdGFja1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIpIHtcbiAgICBjb25zdCBuID0gYXJyLmxlbmd0aDtcbiAgICBjb25zdCBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSArPSAxKSB7XG4gICAgICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gICAgfVxuICAgIHJldHVybiBjb3B5O1xufVxuY2xhc3MgU2FmZUV2ZW50RW1pdHRlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgZW1pdCh0eXBlLCAuLi5hcmdzKSB7XG4gICAgICAgIGxldCBkb0Vycm9yID0gdHlwZSA9PT0gXCJlcnJvclwiO1xuICAgICAgICBjb25zdCBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICAgIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZG9FcnJvciA9IGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWRvRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gICAgICAgIGlmIChkb0Vycm9yKSB7XG4gICAgICAgICAgICBsZXQgZXI7XG4gICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgW2VyXSA9IGFyZ3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgICAgICAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICAgICAgICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoYFVuaGFuZGxlZCBlcnJvci4ke2VyID8gYCAoJHtlci5tZXNzYWdlfSlgIDogXCJcIn1gKTtcbiAgICAgICAgICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgICAgICAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcbiAgICAgICAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBzYWZlQXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlcik7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgc2FmZUFwcGx5KGxpc3RlbmVyc1tpXSwgdGhpcywgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuXG5jbGFzcyBTZXJpYWxpemFibGVFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGNvZGUsIG1lc3NhZ2UsIGRhdGEgfSkge1xuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoY29kZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImNvZGUgbXVzdCBiZSBhbiBpbnRlZ2VyXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbWVzc2FnZSB8fCB0eXBlb2YgbWVzc2FnZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibWVzc2FnZSBtdXN0IGJlIHN0cmluZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICAgICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeSh7XG4gICAgICAgICAgICBjb2RlOiB0aGlzLmNvZGUsXG4gICAgICAgICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICAgICAgICBkYXRhOiB0aGlzLmRhdGEsXG4gICAgICAgICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVFcnJvcihlcnJvcikge1xuICAgIHJldHVybiBlcnJvci50b1N0cmluZygpO1xufVxuY29uc3QgZ2V0UnBjUHJvbWlzZUNhbGxiYWNrID0gKHJlc29sdmUsIHJlamVjdCwgdW53cmFwUmVzdWx0ID0gdHJ1ZSkgPT4gKGVycm9yLCByZXNwb25zZSkgPT4ge1xuICAgIGlmIChlcnJvciB8fCByZXNwb25zZS5lcnJvcikge1xuICAgICAgICByZWplY3QoZXJyb3IgfHwgcmVzcG9uc2UuZXJyb3IpO1xuICAgIH1cbiAgICBlbHNlIGlmICghdW53cmFwUmVzdWx0IHx8IEFycmF5LmlzQXJyYXkocmVzcG9uc2UpKSB7XG4gICAgICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZShyZXNwb25zZS5yZXN1bHQpO1xuICAgIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVFcnJvck1pZGRsZXdhcmUobG9nKSB7XG4gICAgcmV0dXJuIChyZXEsIHJlcywgbmV4dCwgZW5kKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBqc29uLXJwYy1lbmdpbmUgd2lsbCB0ZXJtaW5hdGUgdGhlIHJlcXVlc3Qgd2hlbiBpdCBub3RpY2VzIHRoaXMgZXJyb3JcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVxLm1ldGhvZCAhPT0gXCJzdHJpbmdcIiB8fCAhcmVxLm1ldGhvZCkge1xuICAgICAgICAgICAgICAgIHJlcy5lcnJvciA9IG5ldyBTZXJpYWxpemFibGVFcnJvcih7IGNvZGU6IC0zMjYwMywgbWVzc2FnZTogXCJpbnZhbGlkIG1ldGhvZFwiIH0pO1xuICAgICAgICAgICAgICAgIGVuZCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5leHQoKGRvbmUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGVycm9yIH0gPSByZXM7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9uZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsb2cuZXJyb3IoYE9wZW5Mb2dpbiAtIFJQQyBFcnJvcjogJHtlcnJvci5tZXNzYWdlfWAsIGVycm9yKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9uZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBsb2cuZXJyb3IoYE9wZW5Mb2dpbiAtIFJQQyBFcnJvciB0aHJvd246ICR7ZXJyb3IubWVzc2FnZX1gLCBlcnJvcik7XG4gICAgICAgICAgICByZXMuZXJyb3IgPSBuZXcgU2VyaWFsaXphYmxlRXJyb3IoeyBjb2RlOiAtMzI2MDMsIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfSk7XG4gICAgICAgICAgICBlbmQoKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVTdHJlYW1NaWRkbGV3YXJlKCkge1xuICAgIGNvbnN0IGlkTWFwID0ge307XG4gICAgZnVuY3Rpb24gcmVhZE5vb3AoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgZXZlbnRzID0gbmV3IFNhZmVFdmVudEVtaXR0ZXIoKTtcbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVzcG9uc2UocmVzKSB7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBpZE1hcFtyZXMuaWRdO1xuICAgICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgU3RyZWFtTWlkZGxld2FyZSAtIFVua25vd24gcmVzcG9uc2UgaWQgXCIke3Jlcy5pZH1cImApO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBpZE1hcFtyZXMuaWRdO1xuICAgICAgICAvLyBjb3B5IHdob2xlIHJlcyBvbnRvIG9yaWdpbmFsIHJlc1xuICAgICAgICBPYmplY3QuYXNzaWduKGNvbnRleHQucmVzLCByZXMpO1xuICAgICAgICAvLyBydW4gY2FsbGJhY2sgb24gZW1wdHkgc3RhY2ssXG4gICAgICAgIC8vIHByZXZlbnQgaW50ZXJuYWwgc3RyZWFtLWhhbmRsZXIgZnJvbSBjYXRjaGluZyBlcnJvcnNcbiAgICAgICAgc2V0VGltZW91dChjb250ZXh0LmVuZCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByb2Nlc3NOb3RpZmljYXRpb24ocmVzKSB7XG4gICAgICAgIGV2ZW50cy5lbWl0KFwibm90aWZpY2F0aW9uXCIsIHJlcyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByb2Nlc3NNZXNzYWdlKHJlcywgX2VuY29kaW5nLCBjYikge1xuICAgICAgICBsZXQgZXJyO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgaXNOb3RpZmljYXRpb24gPSAhcmVzLmlkO1xuICAgICAgICAgICAgaWYgKGlzTm90aWZpY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc05vdGlmaWNhdGlvbihyZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc1Jlc3BvbnNlKHJlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKF9lcnIpIHtcbiAgICAgICAgICAgIGVyciA9IF9lcnI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29udGludWUgcHJvY2Vzc2luZyBzdHJlYW1cbiAgICAgICAgY2IoZXJyKTtcbiAgICB9XG4gICAgY29uc3Qgc3RyZWFtID0gbmV3IER1cGxleCh7XG4gICAgICAgIG9iamVjdE1vZGU6IHRydWUsXG4gICAgICAgIHJlYWQ6IHJlYWROb29wLFxuICAgICAgICB3cml0ZTogcHJvY2Vzc01lc3NhZ2UsXG4gICAgfSk7XG4gICAgY29uc3QgbWlkZGxld2FyZSA9IChyZXEsIHJlcywgbmV4dCwgZW5kKSA9PiB7XG4gICAgICAgIC8vIHdyaXRlIHJlcSB0byBzdHJlYW1cbiAgICAgICAgc3RyZWFtLnB1c2gocmVxKTtcbiAgICAgICAgLy8gcmVnaXN0ZXIgcmVxdWVzdCBvbiBpZCBtYXBcbiAgICAgICAgaWRNYXBbcmVxLmlkXSA9IHsgcmVxLCByZXMsIG5leHQsIGVuZCB9O1xuICAgIH07XG4gICAgcmV0dXJuIHsgZXZlbnRzLCBtaWRkbGV3YXJlLCBzdHJlYW0gfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVNjYWZmb2xkTWlkZGxld2FyZShoYW5kbGVycykge1xuICAgIHJldHVybiAocmVxLCByZXMsIG5leHQsIGVuZCkgPT4ge1xuICAgICAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnNbcmVxLm1ldGhvZF07XG4gICAgICAgIC8vIGlmIG5vIGhhbmRsZXIsIHJldHVyblxuICAgICAgICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIGhhbmRsZXIgaXMgZm4sIGNhbGwgYXMgbWlkZGxld2FyZVxuICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXIocmVxLCByZXMsIG5leHQsIGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgaGFuZGxlciBpcyBzb21lIG90aGVyIHZhbHVlLCB1c2UgYXMgcmVzdWx0XG4gICAgICAgIHJlcy5yZXN1bHQgPSBoYW5kbGVyO1xuICAgICAgICByZXR1cm4gZW5kKCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUlkUmVtYXBNaWRkbGV3YXJlKCkge1xuICAgIHJldHVybiAocmVxLCByZXMsIG5leHQsIF9lbmQpID0+IHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxJZCA9IHJlcS5pZDtcbiAgICAgICAgY29uc3QgbmV3SWQgPSByYW5kb21JZCgpO1xuICAgICAgICByZXEuaWQgPSBuZXdJZDtcbiAgICAgICAgcmVzLmlkID0gbmV3SWQ7XG4gICAgICAgIG5leHQoKGRvbmUpID0+IHtcbiAgICAgICAgICAgIHJlcS5pZCA9IG9yaWdpbmFsSWQ7XG4gICAgICAgICAgICByZXMuaWQgPSBvcmlnaW5hbElkO1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlTG9nZ2VyTWlkZGxld2FyZShsb2dnZXIpIHtcbiAgICByZXR1cm4gKHJlcSwgcmVzLCBuZXh0LCBfKSA9PiB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhcIlJFUVwiLCByZXEsIFwiUkVTXCIsIHJlcyk7XG4gICAgICAgIG5leHQoKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlQXN5bmNNaWRkbGV3YXJlKGFzeW5jTWlkZGxld2FyZSkge1xuICAgIHJldHVybiAocmVxLCByZXMsIG5leHQsIGVuZCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAvLyBuZXh0UHJvbWlzZSBpcyB0aGUga2V5IHRvIHRoZSBpbXBsZW1lbnRhdGlvblxuICAgICAgICAvLyBpdCBpcyByZXNvbHZlZCBieSB0aGUgcmV0dXJuIGhhbmRsZXIgcGFzc2VkIHRvIHRoZVxuICAgICAgICAvLyBcIm5leHRcIiBmdW5jdGlvblxuICAgICAgICBsZXQgcmVzb2x2ZU5leHRQcm9taXNlO1xuICAgICAgICBjb25zdCBuZXh0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlTmV4dFByb21pc2UgPSByZXNvbHZlO1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHJldHVybkhhbmRsZXJDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIGxldCBuZXh0V2FzQ2FsbGVkID0gZmFsc2U7XG4gICAgICAgIC8vIFRoaXMgd2lsbCBiZSBjYWxsZWQgYnkgdGhlIGNvbnN1bWVyJ3MgYXN5bmMgbWlkZGxld2FyZS5cbiAgICAgICAgY29uc3QgYXN5bmNOZXh0ID0gKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgbmV4dFdhc0NhbGxlZCA9IHRydWU7XG4gICAgICAgICAgICAvLyBXZSBwYXNzIGEgcmV0dXJuIGhhbmRsZXIgdG8gbmV4dCgpLiBXaGVuIGl0IGlzIGNhbGxlZCBieSB0aGUgZW5naW5lLFxuICAgICAgICAgICAgLy8gdGhlIGNvbnN1bWVyJ3MgYXN5bmMgbWlkZGxld2FyZSB3aWxsIHJlc3VtZSBleGVjdXRpbmcuXG4gICAgICAgICAgICBuZXh0KChydW5SZXR1cm5IYW5kbGVyc0NhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBjYWxsYmFjayBjb21lcyBmcm9tIEpSUENFbmdpbmUuX3J1blJldHVybkhhbmRsZXJzXG4gICAgICAgICAgICAgICAgcmV0dXJuSGFuZGxlckNhbGxiYWNrID0gcnVuUmV0dXJuSGFuZGxlcnNDYWxsYmFjaztcbiAgICAgICAgICAgICAgICByZXNvbHZlTmV4dFByb21pc2UoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgeWllbGQgbmV4dFByb21pc2U7XG4gICAgICAgIH0pO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgeWllbGQgYXN5bmNNaWRkbGV3YXJlKHJlcSwgcmVzLCBhc3luY05leHQpO1xuICAgICAgICAgICAgaWYgKG5leHRXYXNDYWxsZWQpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCBuZXh0UHJvbWlzZTsgLy8gd2UgbXVzdCB3YWl0IHVudGlsIHRoZSByZXR1cm4gaGFuZGxlciBpcyBjYWxsZWRcbiAgICAgICAgICAgICAgICByZXR1cm5IYW5kbGVyQ2FsbGJhY2sobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbmQobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAocmV0dXJuSGFuZGxlckNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuSGFuZGxlckNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVuZChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuLyoqXG4gKiBBIEpTT04tUlBDIHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2Nlc3Nvci5cbiAqIEdpdmUgaXQgYSBzdGFjayBvZiBtaWRkbGV3YXJlLCBwYXNzIGl0IHJlcXVlc3RzLCBhbmQgZ2V0IGJhY2sgcmVzcG9uc2VzLlxuICovXG5jbGFzcyBKUlBDRW5naW5lIGV4dGVuZHMgU2FmZUV2ZW50RW1pdHRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX21pZGRsZXdhcmUgPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VyaWFsbHkgZXhlY3V0ZXMgdGhlIGdpdmVuIHN0YWNrIG9mIG1pZGRsZXdhcmUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBbiBhcnJheSBvZiBhbnkgZXJyb3IgZW5jb3VudGVyZWQgZHVyaW5nIG1pZGRsZXdhcmUgZXhlY3V0aW9uLFxuICAgICAqIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIHJlcXVlc3Qgd2FzIGNvbXBsZXRlZCwgYW5kIGFuIGFycmF5IG9mXG4gICAgICogbWlkZGxld2FyZS1kZWZpbmVkIHJldHVybiBoYW5kbGVycy5cbiAgICAgKi9cbiAgICBzdGF0aWMgX3J1bkFsbE1pZGRsZXdhcmUocmVxLCByZXMsIG1pZGRsZXdhcmVTdGFjaykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgcmV0dXJuSGFuZGxlcnMgPSBbXTtcbiAgICAgICAgICAgIGxldCBlcnJvciA9IG51bGw7XG4gICAgICAgICAgICBsZXQgaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gR28gZG93biBzdGFjayBvZiBtaWRkbGV3YXJlLCBjYWxsIGFuZCBjb2xsZWN0IG9wdGlvbmFsIHJldHVybkhhbmRsZXJzXG4gICAgICAgICAgICBmb3IgKGNvbnN0IG1pZGRsZXdhcmUgb2YgbWlkZGxld2FyZVN0YWNrKSB7XG4gICAgICAgICAgICAgICAgW2Vycm9yLCBpc0NvbXBsZXRlXSA9IHlpZWxkIEpSUENFbmdpbmUuX3J1bk1pZGRsZXdhcmUocmVxLCByZXMsIG1pZGRsZXdhcmUsIHJldHVybkhhbmRsZXJzKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW2Vycm9yLCBpc0NvbXBsZXRlLCByZXR1cm5IYW5kbGVycy5yZXZlcnNlKCldO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUnVucyBhbiBpbmRpdmlkdWFsIG1pZGRsZXdhcmUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBbiBhcnJheSBvZiBhbnkgZXJyb3IgZW5jb3VudGVyZWQgZHVyaW5nIG1pZGRsZXdhcmUgZXhlY3Rpb24sXG4gICAgICogYW5kIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIHJlcXVlc3Qgc2hvdWxkIGVuZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgX3J1bk1pZGRsZXdhcmUocmVxLCByZXMsIG1pZGRsZXdhcmUsIHJldHVybkhhbmRsZXJzKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZW5kID0gKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gZXJyIHx8IHJlcy5lcnJvcjtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLmVycm9yID0gc2VyaWFsaXplRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBUcnVlIGluZGljYXRlcyB0aGF0IHRoZSByZXF1ZXN0IHNob3VsZCBlbmRcbiAgICAgICAgICAgICAgICByZXNvbHZlKFtlcnJvciwgdHJ1ZV0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IG5leHQgPSAocmV0dXJuSGFuZGxlcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXMuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5kKHJlcy5lcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmV0dXJuSGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXR1cm5IYW5kbGVyICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQobmV3IFNlcmlhbGl6YWJsZUVycm9yKHsgY29kZTogLTMyNjAzLCBtZXNzYWdlOiBcIkpSUENFbmdpbmU6ICduZXh0JyByZXR1cm4gaGFuZGxlcnMgbXVzdCBiZSBmdW5jdGlvbnNcIiB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5IYW5kbGVycy5wdXNoKHJldHVybkhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEZhbHNlIGluZGljYXRlcyB0aGF0IHRoZSByZXF1ZXN0IHNob3VsZCBub3QgZW5kXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoW251bGwsIGZhbHNlXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbWlkZGxld2FyZShyZXEsIHJlcywgbmV4dCwgZW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGVuZChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXJpYWxseSBleGVjdXRlcyBhcnJheSBvZiByZXR1cm4gaGFuZGxlcnMuIFRoZSByZXF1ZXN0IGFuZCByZXNwb25zZSBhcmVcbiAgICAgKiBhc3N1bWVkIHRvIGJlIGluIHRoZWlyIHNjb3BlLlxuICAgICAqL1xuICAgIHN0YXRpYyBfcnVuUmV0dXJuSGFuZGxlcnMoaGFuZGxlcnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaGFuZGxlciBvZiBoYW5kbGVycykge1xuICAgICAgICAgICAgICAgIHlpZWxkIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcigoZXJyKSA9PiAoZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKCkpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRocm93cyBhbiBlcnJvciBpZiB0aGUgcmVzcG9uc2UgaGFzIG5laXRoZXIgYSByZXN1bHQgbm9yIGFuIGVycm9yLCBvciBpZlxuICAgICAqIHRoZSBcImlzQ29tcGxldGVcIiBmbGFnIGlzIGZhbHN5LlxuICAgICAqL1xuICAgIHN0YXRpYyBfY2hlY2tGb3JDb21wbGV0aW9uKHJlcSwgcmVzLCBpc0NvbXBsZXRlKSB7XG4gICAgICAgIGlmICghKFwicmVzdWx0XCIgaW4gcmVzKSAmJiAhKFwiZXJyb3JcIiBpbiByZXMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgU2VyaWFsaXphYmxlRXJyb3IoeyBjb2RlOiAtMzI2MDMsIG1lc3NhZ2U6IFwiUmVzcG9uc2UgaGFzIG5vIGVycm9yIG9yIHJlc3VsdCBmb3IgcmVxdWVzdFwiIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFNlcmlhbGl6YWJsZUVycm9yKHsgY29kZTogLTMyNjAzLCBtZXNzYWdlOiBcIk5vdGhpbmcgZW5kZWQgcmVxdWVzdFwiIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIG1pZGRsZXdhcmUgZnVuY3Rpb24gdG8gdGhlIGVuZ2luZSdzIG1pZGRsZXdhcmUgc3RhY2suXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWlkZGxld2FyZSAtIFRoZSBtaWRkbGV3YXJlIGZ1bmN0aW9uIHRvIGFkZC5cbiAgICAgKi9cbiAgICBwdXNoKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgdGhpcy5fbWlkZGxld2FyZS5wdXNoKG1pZGRsZXdhcmUpO1xuICAgIH1cbiAgICBoYW5kbGUocmVxLCBjYikge1xuICAgICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignXCJjYWxsYmFja1wiIG11c3QgYmUgYSBmdW5jdGlvbiBpZiBwcm92aWRlZC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXEpKSB7XG4gICAgICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faGFuZGxlQmF0Y2gocmVxLCBjYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faGFuZGxlQmF0Y2gocmVxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9oYW5kbGUocmVxLCBjYik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb21pc2VIYW5kbGUocmVxKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGlzIGVuZ2luZSBhcyBhIG1pZGRsZXdhcmUgZnVuY3Rpb24gdGhhdCBjYW4gYmUgcHVzaGVkIHRvIG90aGVyXG4gICAgICogZW5naW5lcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoaXMgZW5naW5lIGFzIGEgbWlkZGxld2FyZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBhc01pZGRsZXdhcmUoKSB7XG4gICAgICAgIHJldHVybiAocmVxLCByZXMsIG5leHQsIGVuZCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBbbWlkZGxld2FyZUVycm9yLCBpc0NvbXBsZXRlLCByZXR1cm5IYW5kbGVyc10gPSB5aWVsZCBKUlBDRW5naW5lLl9ydW5BbGxNaWRkbGV3YXJlKHJlcSwgcmVzLCB0aGlzLl9taWRkbGV3YXJlKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgICAgICB5aWVsZCBKUlBDRW5naW5lLl9ydW5SZXR1cm5IYW5kbGVycyhyZXR1cm5IYW5kbGVycyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbmQobWlkZGxld2FyZUVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHQoKGhhbmRsZXJDYWxsYmFjaykgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgSlJQQ0VuZ2luZS5fcnVuUmV0dXJuSGFuZGxlcnMocmV0dXJuSGFuZGxlcnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXJDYWxsYmFjayhlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXJDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbmQoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2hhbmRsZUJhdGNoKHJlcXMsIGNiKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyBUaGUgb3JkZXIgaGVyZSBpcyBpbXBvcnRhbnRcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gMi4gV2FpdCBmb3IgYWxsIHJlcXVlc3RzIHRvIGZpbmlzaCwgb3IgdGhyb3cgb24gc29tZSBraW5kIG9mIGZhdGFsXG4gICAgICAgICAgICAgICAgLy8gZXJyb3JcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZXMgPSB5aWVsZCBQcm9taXNlLmFsbChcbiAgICAgICAgICAgICAgICAvLyAxLiBCZWdpbiBleGVjdXRpbmcgZWFjaCByZXF1ZXN0IGluIHRoZSBvcmRlciByZWNlaXZlZFxuICAgICAgICAgICAgICAgIHJlcXMubWFwKHRoaXMuX3Byb21pc2VIYW5kbGUuYmluZCh0aGlzKSkpO1xuICAgICAgICAgICAgICAgIC8vIDMuIFJldHVybiBiYXRjaCByZXNwb25zZVxuICAgICAgICAgICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2IobnVsbCwgcmVzcG9uc2VzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZS13cmFwcGVkIF9oYW5kbGUuXG4gICAgICovXG4gICAgX3Byb21pc2VIYW5kbGUocmVxKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlKHJlcSwgKF9lcnIsIHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIC8vIFRoZXJlIHdpbGwgYWx3YXlzIGJlIGEgcmVzcG9uc2UsIGFuZCBpdCB3aWxsIGFsd2F5cyBoYXZlIGFueSBlcnJvclxuICAgICAgICAgICAgICAgIC8vIHRoYXQgaXMgY2F1Z2h0IGFuZCBwcm9wYWdhdGVkLlxuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW5zdXJlcyB0aGF0IHRoZSByZXF1ZXN0IG9iamVjdCBpcyB2YWxpZCwgcHJvY2Vzc2VzIGl0LCBhbmQgcGFzc2VzIGFueVxuICAgICAqIGVycm9yIGFuZCB0aGUgcmVzcG9uc2Ugb2JqZWN0IHRvIHRoZSBnaXZlbiBjYWxsYmFjay5cbiAgICAgKlxuICAgICAqIERvZXMgbm90IHJlamVjdC5cbiAgICAgKi9cbiAgICBfaGFuZGxlKGNhbGxlclJlcSwgY2IpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmICghY2FsbGVyUmVxIHx8IEFycmF5LmlzQXJyYXkoY2FsbGVyUmVxKSB8fCB0eXBlb2YgY2FsbGVyUmVxICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgU2VyaWFsaXphYmxlRXJyb3IoeyBjb2RlOiAtMzI2MDMsIG1lc3NhZ2U6IFwicmVxdWVzdCBtdXN0IGJlIHBsYWluIG9iamVjdFwiIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBjYihlcnJvciwgeyBpZDogdW5kZWZpbmVkLCBqc29ucnBjOiBcIjIuMFwiLCBlcnJvciB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGVyUmVxLm1ldGhvZCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IFNlcmlhbGl6YWJsZUVycm9yKHsgY29kZTogLTMyNjAzLCBtZXNzYWdlOiBcIm1ldGhvZCBtdXN0IGJlIHN0cmluZ1wiIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBjYihlcnJvciwgeyBpZDogY2FsbGVyUmVxLmlkLCBqc29ucnBjOiBcIjIuMFwiLCBlcnJvciB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlcSA9IE9iamVjdC5hc3NpZ24oe30sIGNhbGxlclJlcSk7XG4gICAgICAgICAgICBjb25zdCByZXMgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IHJlcS5pZCxcbiAgICAgICAgICAgICAgICBqc29ucnBjOiByZXEuanNvbnJwYyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsZXQgZXJyb3IgPSBudWxsO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLl9wcm9jZXNzUmVxdWVzdChyZXEsIHJlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoX2Vycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gQSByZXF1ZXN0IGhhbmRsZXIgZXJyb3IsIGEgcmUtdGhyb3duIG1pZGRsZXdhcmUgZXJyb3IsIG9yIHNvbWV0aGluZ1xuICAgICAgICAgICAgICAgIC8vIHVuZXhwZWN0ZWQuXG4gICAgICAgICAgICAgICAgZXJyb3IgPSBfZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBFbnN1cmUgbm8gcmVzdWx0IGlzIHByZXNlbnQgb24gYW4gZXJyb3JlZCByZXNwb25zZVxuICAgICAgICAgICAgICAgIGRlbGV0ZSByZXMucmVzdWx0O1xuICAgICAgICAgICAgICAgIGlmICghcmVzLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5lcnJvciA9IHNlcmlhbGl6ZUVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2IoZXJyb3IsIHJlcyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGb3IgdGhlIGdpdmVuIHJlcXVlc3QgYW5kIHJlc3BvbnNlLCBydW5zIGFsbCBtaWRkbGV3YXJlIGFuZCB0aGVpciByZXR1cm5cbiAgICAgKiBoYW5kbGVycywgaWYgYW55LCBhbmQgZW5zdXJlcyB0aGF0IGludGVybmFsIHJlcXVlc3QgcHJvY2Vzc2luZyBzZW1hbnRpY3NcbiAgICAgKiBhcmUgc2F0aXNmaWVkLlxuICAgICAqL1xuICAgIF9wcm9jZXNzUmVxdWVzdChyZXEsIHJlcykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgW2Vycm9yLCBpc0NvbXBsZXRlLCByZXR1cm5IYW5kbGVyc10gPSB5aWVsZCBKUlBDRW5naW5lLl9ydW5BbGxNaWRkbGV3YXJlKHJlcSwgcmVzLCB0aGlzLl9taWRkbGV3YXJlKTtcbiAgICAgICAgICAgIC8vIFRocm93IGlmIFwiZW5kXCIgd2FzIG5vdCBjYWxsZWQsIG9yIGlmIHRoZSByZXNwb25zZSBoYXMgbmVpdGhlciBhIHJlc3VsdFxuICAgICAgICAgICAgLy8gbm9yIGFuIGVycm9yLlxuICAgICAgICAgICAgSlJQQ0VuZ2luZS5fY2hlY2tGb3JDb21wbGV0aW9uKHJlcSwgcmVzLCBpc0NvbXBsZXRlKTtcbiAgICAgICAgICAgIC8vIFRoZSByZXR1cm4gaGFuZGxlcnMgc2hvdWxkIHJ1biBldmVuIGlmIGFuIGVycm9yIHdhcyBlbmNvdW50ZXJlZCBkdXJpbmdcbiAgICAgICAgICAgIC8vIG1pZGRsZXdhcmUgcHJvY2Vzc2luZy5cbiAgICAgICAgICAgIHlpZWxkIEpSUENFbmdpbmUuX3J1blJldHVybkhhbmRsZXJzKHJldHVybkhhbmRsZXJzKTtcbiAgICAgICAgICAgIC8vIE5vdyB3ZSByZS10aHJvdyB0aGUgbWlkZGxld2FyZSBwcm9jZXNzaW5nIGVycm9yLCBpZiBhbnksIHRvIGNhdGNoIGl0XG4gICAgICAgICAgICAvLyBmdXJ0aGVyIHVwIHRoZSBjYWxsIGNoYWluLlxuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1lcmdlTWlkZGxld2FyZShtaWRkbGV3YXJlU3RhY2spIHtcbiAgICBjb25zdCBlbmdpbmUgPSBuZXcgSlJQQ0VuZ2luZSgpO1xuICAgIG1pZGRsZXdhcmVTdGFjay5mb3JFYWNoKChtaWRkbGV3YXJlKSA9PiBlbmdpbmUucHVzaChtaWRkbGV3YXJlKSk7XG4gICAgcmV0dXJuIGVuZ2luZS5hc01pZGRsZXdhcmUoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVuZ2luZVN0cmVhbShvcHRzKSB7XG4gICAgaWYgKCFvcHRzIHx8ICFvcHRzLmVuZ2luZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGVuZ2luZSBwYXJhbWV0ZXIhXCIpO1xuICAgIH1cbiAgICBjb25zdCB7IGVuZ2luZSB9ID0gb3B0cztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWNvbnN0XG4gICAgbGV0IHN0cmVhbTtcbiAgICBmdW5jdGlvbiByZWFkKCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBmdW5jdGlvbiB3cml0ZShyZXEsIF9lbmNvZGluZywgY2IpIHtcbiAgICAgICAgZW5naW5lLmhhbmRsZShyZXEsIChfZXJyLCByZXMpID0+IHtcbiAgICAgICAgICAgIHN0cmVhbS5wdXNoKHJlcyk7XG4gICAgICAgIH0pO1xuICAgICAgICBjYigpO1xuICAgIH1cbiAgICBzdHJlYW0gPSBuZXcgRHVwbGV4KHsgb2JqZWN0TW9kZTogdHJ1ZSwgcmVhZCwgd3JpdGUgfSk7XG4gICAgLy8gZm9yd2FyZCBub3RpZmljYXRpb25zXG4gICAgaWYgKGVuZ2luZS5vbikge1xuICAgICAgICBlbmdpbmUub24oXCJub3RpZmljYXRpb25cIiwgKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgIHN0cmVhbS5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cmVhbTtcbn1cblxuY2xhc3MgU3Vic3RyZWFtIGV4dGVuZHMgRHVwbGV4IHtcbiAgICBjb25zdHJ1Y3Rvcih7IHBhcmVudCwgbmFtZSB9KSB7XG4gICAgICAgIHN1cGVyKHsgb2JqZWN0TW9kZTogdHJ1ZSB9KTtcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICAgICAgICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhwbGljaXRseSBzZXRzIHJlYWQgb3BlcmF0aW9ucyB0byBhIG5vLW9wLlxuICAgICAqL1xuICAgIF9yZWFkKCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiBkYXRhIHNob3VsZCBiZSB3cml0dGVuIHRvIHRoaXMgd3JpdGFibGUgc3RyZWFtLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNodW5rIC0gQXJiaXRyYXJ5IG9iamVjdCB0byB3cml0ZVxuICAgICAqIEBwYXJhbSBlbmNvZGluZyAtIEVuY29kaW5nIHRvIHVzZSB3aGVuIHdyaXRpbmcgcGF5bG9hZFxuICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIENhbGxlZCB3aGVuIHdyaXRpbmcgaXMgY29tcGxldGUgb3IgYW4gZXJyb3Igb2NjdXJzXG4gICAgICovXG4gICAgX3dyaXRlKGNodW5rLCBfZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX3BhcmVudC5wdXNoKHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuX25hbWUsXG4gICAgICAgICAgICBkYXRhOiBjaHVuayxcbiAgICAgICAgfSk7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxufVxuXG5jb25zdCBJR05PUkVfU1VCU1RSRUFNID0gU3ltYm9sKFwiSUdOT1JFX1NVQlNUUkVBTVwiKTtcbmNsYXNzIE9iamVjdE11bHRpcGxleCBleHRlbmRzIER1cGxleCB7XG4gICAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0cyksIHsgb2JqZWN0TW9kZTogdHJ1ZSB9KSk7XG4gICAgICAgIHRoaXMuX3N1YnN0cmVhbXMgPSB7fTtcbiAgICB9XG4gICAgY3JlYXRlU3RyZWFtKG5hbWUpIHtcbiAgICAgICAgLy8gdmFsaWRhdGUgbmFtZVxuICAgICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9iamVjdE11bHRpcGxleCAtIG5hbWUgbXVzdCBub3QgYmUgZW1wdHlcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3N1YnN0cmVhbXNbbmFtZV0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgT2JqZWN0TXVsdGlwbGV4IC0gU3Vic3RyZWFtIGZvciBuYW1lIFwiJHtuYW1lfVwiIGFscmVhZHkgZXhpc3RzYCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY3JlYXRlIHN1YnN0cmVhbVxuICAgICAgICBjb25zdCBzdWJzdHJlYW0gPSBuZXcgU3Vic3RyZWFtKHsgcGFyZW50OiB0aGlzLCBuYW1lIH0pO1xuICAgICAgICB0aGlzLl9zdWJzdHJlYW1zW25hbWVdID0gc3Vic3RyZWFtO1xuICAgICAgICAvLyBsaXN0ZW4gZm9yIHBhcmVudCBzdHJlYW0gdG8gZW5kXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICAgICAgYW55U3RyZWFtRW5kKHRoaXMsIChfZXJyb3IpID0+IHN1YnN0cmVhbS5kZXN0cm95KF9lcnJvciB8fCB1bmRlZmluZWQpKTtcbiAgICAgICAgcmV0dXJuIHN1YnN0cmVhbTtcbiAgICB9XG4gICAgLy8gaWdub3JlIHN0cmVhbXMgKGRvbnQgZGlzcGxheSBvcnBoYW5lZCBkYXRhIHdhcm5pbmcpXG4gICAgaWdub3JlU3RyZWFtKG5hbWUpIHtcbiAgICAgICAgLy8gdmFsaWRhdGUgbmFtZVxuICAgICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9iamVjdE11bHRpcGxleCAtIG5hbWUgbXVzdCBub3QgYmUgZW1wdHlcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3N1YnN0cmVhbXNbbmFtZV0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgT2JqZWN0TXVsdGlwbGV4IC0gU3Vic3RyZWFtIGZvciBuYW1lIFwiJHtuYW1lfVwiIGFscmVhZHkgZXhpc3RzYCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2V0XG4gICAgICAgIHRoaXMuX3N1YnN0cmVhbXNbbmFtZV0gPSBJR05PUkVfU1VCU1RSRUFNO1xuICAgIH1cbiAgICBfcmVhZCgpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgX3dyaXRlKGNodW5rLCBfZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IHsgbmFtZSwgZGF0YSB9ID0gY2h1bms7XG4gICAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAgICAgd2luZG93LmNvbnNvbGUud2FybihgT2JqZWN0TXVsdGlwbGV4IC0gbWFsZm9ybWVkIGNodW5rIHdpdGhvdXQgbmFtZSBcIiR7Y2h1bmt9XCJgKTtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGdldCBjb3JyZXNwb25kaW5nIHN1YnN0cmVhbVxuICAgICAgICBjb25zdCBzdWJzdHJlYW0gPSB0aGlzLl9zdWJzdHJlYW1zW25hbWVdO1xuICAgICAgICBpZiAoIXN1YnN0cmVhbSkge1xuICAgICAgICAgICAgd2luZG93LmNvbnNvbGUud2FybihgT2JqZWN0TXVsdGlwbGV4IC0gb3JwaGFuZWQgZGF0YSBmb3Igc3RyZWFtIFwiJHtuYW1lfVwiYCk7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBwdXNoIGRhdGEgaW50byBzdWJzdHJlYW1cbiAgICAgICAgaWYgKHN1YnN0cmVhbSAhPT0gSUdOT1JFX1NVQlNUUkVBTSkge1xuICAgICAgICAgICAgc3Vic3RyZWFtLnB1c2goZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxufVxuLy8gdXRpbFxuZnVuY3Rpb24gYW55U3RyZWFtRW5kKHN0cmVhbSwgX2NiKSB7XG4gICAgY29uc3QgY2IgPSBvbmNlKF9jYik7XG4gICAgZW9zKHN0cmVhbSwgeyByZWFkYWJsZTogZmFsc2UgfSwgY2IpO1xuICAgIGVvcyhzdHJlYW0sIHsgd3JpdGFibGU6IGZhbHNlIH0sIGNiKTtcbn1cbmZ1bmN0aW9uIHNldHVwTXVsdGlwbGV4KHN0cmVhbSkge1xuICAgIGNvbnN0IG11eCA9IG5ldyBPYmplY3RNdWx0aXBsZXgoKTtcbiAgICBtdXguZ2V0U3RyZWFtID0gZnVuY3Rpb24gc3RyZWFtSGVscGVyKG5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N1YnN0cmVhbXNbbmFtZV0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdWJzdHJlYW1zW25hbWVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVN0cmVhbShuYW1lKTtcbiAgICB9O1xuICAgIHB1bXAoc3RyZWFtLCBtdXgsIHN0cmVhbSwgKGVycikgPT4ge1xuICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgd2luZG93LmNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbXV4O1xufVxuXG5jbGFzcyBQb3N0TWVzc2FnZVN0cmVhbSBleHRlbmRzIEJhc2VQb3N0TWVzc2FnZVN0cmVhbSB7XG4gICAgX3Bvc3RNZXNzYWdlKGRhdGEpIHtcbiAgICAgICAgbGV0IG9yaWdpbkNvbnN0cmFpbnQgPSB0aGlzLl90YXJnZXRPcmlnaW47XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgY29uc3QgZGF0YU9iaiA9IGRhdGE7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGFPYmouZGF0YSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFPYmpEYXRhID0gZGF0YU9iai5kYXRhO1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGFPYmpEYXRhLnBhcmFtcykgJiYgZGF0YU9iakRhdGEucGFyYW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YU9iakRhdGFQYXJhbSA9IGRhdGFPYmpEYXRhLnBhcmFtc1swXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFPYmpEYXRhUGFyYW0uX29yaWdpbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luQ29uc3RyYWludCA9IGRhdGFPYmpEYXRhUGFyYW0uX29yaWdpbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBhZGQgYSBjb25zdHJhaW50IGZvciB0aGUgcmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgZGF0YU9iakRhdGFQYXJhbS5fb3JpZ2luID0gd2luZG93LmxvY2F0aW9uLm9yaWdpbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGFyZ2V0V2luZG93LnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIHRhcmdldDogdGhpcy5fdGFyZ2V0LFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgfSwgb3JpZ2luQ29uc3RyYWludCk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBCYXNlUG9zdE1lc3NhZ2VTdHJlYW0sIElHTk9SRV9TVUJTVFJFQU0sIEpSUENFbmdpbmUsIE9iamVjdE11bHRpcGxleCwgUG9zdE1lc3NhZ2VTdHJlYW0sIFNhZmVFdmVudEVtaXR0ZXIsIFNlcmlhbGl6YWJsZUVycm9yLCBTdWJzdHJlYW0sIGNyZWF0ZUFzeW5jTWlkZGxld2FyZSwgY3JlYXRlRW5naW5lU3RyZWFtLCBjcmVhdGVFcnJvck1pZGRsZXdhcmUsIGNyZWF0ZUlkUmVtYXBNaWRkbGV3YXJlLCBjcmVhdGVMb2dnZXJNaWRkbGV3YXJlLCBjcmVhdGVTY2FmZm9sZE1pZGRsZXdhcmUsIGNyZWF0ZVN0cmVhbU1pZGRsZXdhcmUsIGdldFJwY1Byb21pc2VDYWxsYmFjaywgbWVyZ2VNaWRkbGV3YXJlLCBzZXJpYWxpemVFcnJvciwgc2V0dXBNdWx0aXBsZXggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZW5sb2dpbkpycGMuZXNtLmpzLm1hcFxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufSIsImZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHtcbiAgdHJ5IHtcbiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7XG4gICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZWplY3QoZXJyb3IpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTtcblxuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpO1xuICAgICAgfVxuXG4gICAgICBfbmV4dCh1bmRlZmluZWQpO1xuICAgIH0pO1xuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufSIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufSIsImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiO1xuaW1wb3J0IGFzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiLi9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7XG4gIH1cblxuICByZXR1cm4gYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7XG4gIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7XG5cbiAgdHJ5IHtcbiAgICBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0iLCJpbXBvcnQgc2V0UHJvdG90eXBlT2YgZnJvbSBcIi4vc2V0UHJvdG90eXBlT2YuanNcIjtcbmltcG9ydCBpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgZnJvbSBcIi4vaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgaWYgKGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7XG4gICAgX2NvbnN0cnVjdCA9IFJlZmxlY3QuY29uc3RydWN0O1xuICB9IGVsc2Uge1xuICAgIF9jb25zdHJ1Y3QgPSBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgICAgIHZhciBhID0gW251bGxdO1xuICAgICAgYS5wdXNoLmFwcGx5KGEsIGFyZ3MpO1xuICAgICAgdmFyIENvbnN0cnVjdG9yID0gRnVuY3Rpb24uYmluZC5hcHBseShQYXJlbnQsIGEpO1xuICAgICAgdmFyIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgICBpZiAoQ2xhc3MpIHNldFByb3RvdHlwZU9mKGluc3RhbmNlLCBDbGFzcy5wcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufSIsImltcG9ydCBnZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9nZXRQcm90b3R5cGVPZi5qc1wiO1xuaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCIuL3NldFByb3RvdHlwZU9mLmpzXCI7XG5pbXBvcnQgaXNOYXRpdmVGdW5jdGlvbiBmcm9tIFwiLi9pc05hdGl2ZUZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgY29uc3RydWN0IGZyb20gXCIuL2NvbnN0cnVjdC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICB2YXIgX2NhY2hlID0gdHlwZW9mIE1hcCA9PT0gXCJmdW5jdGlvblwiID8gbmV3IE1hcCgpIDogdW5kZWZpbmVkO1xuXG4gIF93cmFwTmF0aXZlU3VwZXIgPSBmdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gICAgaWYgKENsYXNzID09PSBudWxsIHx8ICFpc05hdGl2ZUZ1bmN0aW9uKENsYXNzKSkgcmV0dXJuIENsYXNzO1xuXG4gICAgaWYgKHR5cGVvZiBDbGFzcyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBfY2FjaGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlmIChfY2FjaGUuaGFzKENsYXNzKSkgcmV0dXJuIF9jYWNoZS5nZXQoQ2xhc3MpO1xuXG4gICAgICBfY2FjaGUuc2V0KENsYXNzLCBXcmFwcGVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBXcmFwcGVyKCkge1xuICAgICAgcmV0dXJuIGNvbnN0cnVjdChDbGFzcywgYXJndW1lbnRzLCBnZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7XG4gICAgfVxuXG4gICAgV3JhcHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IFdyYXBwZXIsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNldFByb3RvdHlwZU9mKFdyYXBwZXIsIENsYXNzKTtcbiAgfTtcblxuICByZXR1cm4gX3dyYXBOYXRpdmVTdXBlcihDbGFzcyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2lzTmF0aXZlRnVuY3Rpb24oZm4pIHtcbiAgcmV0dXJuIEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwoZm4pLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpICE9PSAtMTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnIyW2ldID0gYXJyW2ldO1xuICB9XG5cbiAgcmV0dXJuIGFycjI7XG59IiwiaW1wb3J0IGFycmF5V2l0aG91dEhvbGVzIGZyb20gXCIuL2FycmF5V2l0aG91dEhvbGVzLmpzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgbm9uSXRlcmFibGVTcHJlYWQgZnJvbSBcIi4vbm9uSXRlcmFibGVTcHJlYWQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufSIsImltcG9ydCBhcnJheUxpa2VUb0FycmF5IGZyb20gXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufSIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eSc7XG5pbXBvcnQgX3R5cGVvZiBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZic7XG5pbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAnQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3InO1xuaW1wb3J0IHsgZ2VuZXJhdGVQcml2YXRlLCBnZXRQdWJsaWMsIGRlY3J5cHQgfSBmcm9tICdAdG9ydXNsYWJzL2VjY3J5cHRvJztcbmltcG9ydCB7IHBvc3QsIGdlbmVyYXRlSnNvblJQQ09iamVjdCwgZ2V0LCBzZXRBUElLZXksIHNldEVtYmVkSG9zdCB9IGZyb20gJ0B0b3J1c2xhYnMvaHR0cC1oZWxwZXJzJztcbmltcG9ydCBCTiBmcm9tICdibi5qcyc7XG5pbXBvcnQgeyBlYyB9IGZyb20gJ2VsbGlwdGljJztcbmltcG9ydCBKc29uU3RyaW5naWZ5IGZyb20gJ2pzb24tc3RhYmxlLXN0cmluZ2lmeSc7XG5pbXBvcnQgeyBrZWNjYWsyNTYsIHRvQ2hlY2tzdW1BZGRyZXNzIH0gZnJvbSAnd2ViMy11dGlscyc7XG5pbXBvcnQgbG9nbGV2ZWwgZnJvbSAnbG9nbGV2ZWwnO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mJztcbmltcG9ydCBfd3JhcE5hdGl2ZVN1cGVyIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvd3JhcE5hdGl2ZVN1cGVyJztcbmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheSc7XG5cbnZhciBsb2cgPSBsb2dsZXZlbC5nZXRMb2dnZXIoJ3RvcnVzLmpzJyk7XG5sb2cuZGlzYWJsZUFsbCgpO1xuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIkMShEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCQxKCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCQxKCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xufVxuXG52YXIgU29tZUVycm9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfRXJyb3IpIHtcbiAgX2luaGVyaXRzKFNvbWVFcnJvciwgX0Vycm9yKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyJDEoU29tZUVycm9yKTtcblxuICBmdW5jdGlvbiBTb21lRXJyb3IoX3JlZikge1xuICAgIHZhciBfdGhpcztcblxuICAgIHZhciBlcnJvcnMgPSBfcmVmLmVycm9ycyxcbiAgICAgICAgcmVzcG9uc2VzID0gX3JlZi5yZXNwb25zZXMsXG4gICAgICAgIHByZWRpY2F0ZSA9IF9yZWYucHJlZGljYXRlO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNvbWVFcnJvcik7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsICdVbmFibGUgdG8gcmVzb2x2ZSBlbm91Z2ggcHJvbWlzZXMuJyk7XG4gICAgX3RoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgIF90aGlzLnJlc3BvbnNlcyA9IHJlc3BvbnNlcztcbiAgICBfdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgcmV0dXJuIFNvbWVFcnJvcjtcbn0oIC8qI19fUFVSRV9fKi9fd3JhcE5hdGl2ZVN1cGVyKEVycm9yKSk7XG52YXIgU29tZSA9IGZ1bmN0aW9uIFNvbWUocHJvbWlzZXMsIHByZWRpY2F0ZSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBmaW5pc2hlZENvdW50ID0gMDtcbiAgICB2YXIgc2hhcmVkU3RhdGUgPSB7XG4gICAgICByZXNvbHZlZDogZmFsc2VcbiAgICB9O1xuICAgIHZhciBlcnJvckFyciA9IG5ldyBBcnJheShwcm9taXNlcy5sZW5ndGgpLmZpbGwodW5kZWZpbmVkKTtcbiAgICB2YXIgcmVzdWx0QXJyID0gbmV3IEFycmF5KHByb21pc2VzLmxlbmd0aCkuZmlsbCh1bmRlZmluZWQpO1xuICAgIHZhciBwcmVkaWNhdGVFcnJvcjtcbiAgICBwcm9taXNlcy5mb3JFYWNoKGZ1bmN0aW9uICh4LCBpbmRleCkge1xuICAgICAgeC50aGVuKGZ1bmN0aW9uIChyZXNwKSB7XG4gICAgICAgIHJlc3VsdEFycltpbmRleF0gPSByZXNwO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGVycm9yQXJyW2luZGV4XSA9IGVycm9yO1xuICAgICAgfSkuZmluYWxseShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChzaGFyZWRTdGF0ZS5yZXNvbHZlZCkgcmV0dXJuO1xuICAgICAgICBwcmVkaWNhdGUocmVzdWx0QXJyLnNsaWNlKDApLCBzaGFyZWRTdGF0ZSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIHNoYXJlZFN0YXRlLnJlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIC8vIGxvZyBvbmx5IHRoZSBsYXN0IHByZWRpY2F0ZSBlcnJvclxuICAgICAgICAgIHByZWRpY2F0ZUVycm9yID0gZXJyb3I7XG4gICAgICAgIH0pLmZpbmFsbHkoZnVuY3Rpb24gKF8pIHtcbiAgICAgICAgICBmaW5pc2hlZENvdW50ICs9IDE7XG5cbiAgICAgICAgICBpZiAoZmluaXNoZWRDb3VudCA9PT0gcHJvbWlzZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3JzID0gT2JqZWN0LnZhbHVlcyhyZXN1bHRBcnIucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHopIHtcbiAgICAgICAgICAgICAgdmFyIF9lcnJvciRkYXRhO1xuXG4gICAgICAgICAgICAgIHZhciBfcmVmMiA9IHogfHwge30sXG4gICAgICAgICAgICAgICAgICBpZCA9IF9yZWYyLmlkLFxuICAgICAgICAgICAgICAgICAgZXJyb3IgPSBfcmVmMi5lcnJvcjtcblxuICAgICAgICAgICAgICBpZiAoKGVycm9yID09PSBudWxsIHx8IGVycm9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2Vycm9yJGRhdGEgPSBlcnJvci5kYXRhKSA9PT0gbnVsbCB8fCBfZXJyb3IkZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Vycm9yJGRhdGEubGVuZ3RoKSA+IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IuZGF0YS5zdGFydHNXaXRoKCdFcnJvciBvY2N1cnJlZCB3aGlsZSB2ZXJpZnlpbmcgcGFyYW1zJykpIGFjY1tpZF0gPSBjYXBpdGFsaXplRmlyc3RMZXR0ZXIoZXJyb3IuZGF0YSk7ZWxzZSBhY2NbaWRdID0gZXJyb3IuZGF0YTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICB9LCB7fSkpO1xuXG4gICAgICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgLy8gRm9ybWF0LWFibGUgZXJyb3JzXG4gICAgICAgICAgICAgIHZhciBtc2cgPSBlcnJvcnMubGVuZ3RoID4gMSA/IFwiXFxuXCIuY29uY2F0KGVycm9ycy5tYXAoZnVuY3Rpb24gKGl0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXFx1MjAyMiBcIi5jb25jYXQoaXQpO1xuICAgICAgICAgICAgICB9KS5qb2luKCdcXG4nKSkgOiBlcnJvcnNbMF07XG4gICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IobXNnKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgX3ByZWRpY2F0ZUVycm9yO1xuXG4gICAgICAgICAgICAgIHJlamVjdChuZXcgU29tZUVycm9yKHtcbiAgICAgICAgICAgICAgICBlcnJvcnM6IGVycm9yQXJyLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlczogcmVzdWx0QXJyLFxuICAgICAgICAgICAgICAgIHByZWRpY2F0ZTogKChfcHJlZGljYXRlRXJyb3IgPSBwcmVkaWNhdGVFcnJvcikgPT09IG51bGwgfHwgX3ByZWRpY2F0ZUVycm9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcHJlZGljYXRlRXJyb3IubWVzc2FnZSkgfHwgcHJlZGljYXRlRXJyb3JcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBvd25LZXlzJDEob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHsgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyB9IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkJDEodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyQxKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMkMShPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG52YXIgR2V0T3JTZXROb25jZUVycm9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfRXJyb3IpIHtcbiAgX2luaGVyaXRzKEdldE9yU2V0Tm9uY2VFcnJvciwgX0Vycm9yKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEdldE9yU2V0Tm9uY2VFcnJvcik7XG5cbiAgZnVuY3Rpb24gR2V0T3JTZXROb25jZUVycm9yKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHZXRPclNldE5vbmNlRXJyb3IpO1xuXG4gICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIEdldE9yU2V0Tm9uY2VFcnJvcjtcbn0oIC8qI19fUFVSRV9fKi9fd3JhcE5hdGl2ZVN1cGVyKEVycm9yKSk7XG52YXIga0NvbWJpbmF0aW9ucyA9IGZ1bmN0aW9uIGtDb21iaW5hdGlvbnMocywgaykge1xuICB2YXIgc2V0ID0gcztcblxuICBpZiAodHlwZW9mIHNldCA9PT0gJ251bWJlcicpIHtcbiAgICBzZXQgPSBBcnJheS5mcm9tKHtcbiAgICAgIGxlbmd0aDogc2V0XG4gICAgfSwgZnVuY3Rpb24gKF8sIGkpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKGsgPiBzZXQubGVuZ3RoIHx8IGsgPD0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGlmIChrID09PSBzZXQubGVuZ3RoKSB7XG4gICAgcmV0dXJuIFtzZXRdO1xuICB9XG5cbiAgaWYgKGsgPT09IDEpIHtcbiAgICByZXR1cm4gc2V0LnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjdXIpIHtcbiAgICAgIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGFjYyksIFtbY3VyXV0pO1xuICAgIH0sIFtdKTtcbiAgfVxuXG4gIHZhciBjb21icyA9IFtdO1xuICB2YXIgdGFpbENvbWJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPD0gc2V0Lmxlbmd0aCAtIGsgKyAxOyBpICs9IDEpIHtcbiAgICB0YWlsQ29tYnMgPSBrQ29tYmluYXRpb25zKHNldC5zbGljZShpICsgMSksIGsgLSAxKTtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGFpbENvbWJzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBjb21icy5wdXNoKFtzZXRbaV1dLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGFpbENvbWJzW2pdKSkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb21icztcbn07XG52YXIgdGhyZXNob2xkU2FtZSA9IGZ1bmN0aW9uIHRocmVzaG9sZFNhbWUoYXJyLCB0KSB7XG4gIHZhciBoYXNoTWFwID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgc3RyID0gSnNvblN0cmluZ2lmeShhcnJbaV0pO1xuICAgIGhhc2hNYXBbc3RyXSA9IGhhc2hNYXBbc3RyXSA/IGhhc2hNYXBbc3RyXSArIDEgOiAxO1xuXG4gICAgaWYgKGhhc2hNYXBbc3RyXSA9PT0gdCkge1xuICAgICAgcmV0dXJuIGFycltpXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbnZhciBrZXlMb29rdXAgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoZW5kcG9pbnRzLCB2ZXJpZmllciwgdmVyaWZpZXJJZCkge1xuICAgIHZhciBsb29rdXBQcm9taXNlcztcbiAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XG4gICAgICB3aGlsZSAoMSkge1xuICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgbG9va3VwUHJvbWlzZXMgPSBlbmRwb2ludHMubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgIHJldHVybiBwb3N0KHgsIGdlbmVyYXRlSnNvblJQQ09iamVjdCgnVmVyaWZpZXJMb29rdXBSZXF1ZXN0Jywge1xuICAgICAgICAgICAgICAgIHZlcmlmaWVyOiB2ZXJpZmllcixcbiAgICAgICAgICAgICAgICB2ZXJpZmllcl9pZDogdmVyaWZpZXJJZC50b1N0cmluZygpXG4gICAgICAgICAgICAgIH0pKS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvZy5lcnJvcignbG9va3VwIHJlcXVlc3QgZmFpbGVkJywgZXJyKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgU29tZShsb29rdXBQcm9taXNlcywgZnVuY3Rpb24gKGxvb2t1cFJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgdmFyIGxvb2t1cFNoYXJlcyA9IGxvb2t1cFJlc3VsdHMuZmlsdGVyKGZ1bmN0aW9uICh4MSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB4MTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHZhciBlcnJvclJlc3VsdCA9IHRocmVzaG9sZFNhbWUobG9va3VwU2hhcmVzLm1hcChmdW5jdGlvbiAoeDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geDIgJiYgeDIuZXJyb3I7XG4gICAgICAgICAgICAgIH0pLCB+fihlbmRwb2ludHMubGVuZ3RoIC8gMikgKyAxKTtcbiAgICAgICAgICAgICAgdmFyIGtleVJlc3VsdCA9IHRocmVzaG9sZFNhbWUobG9va3VwU2hhcmVzLm1hcChmdW5jdGlvbiAoeDMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geDMgJiYgeDMucmVzdWx0O1xuICAgICAgICAgICAgICB9KSwgfn4oZW5kcG9pbnRzLmxlbmd0aCAvIDIpICsgMSk7XG5cbiAgICAgICAgICAgICAgaWYgKGtleVJlc3VsdCB8fCBlcnJvclJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgICAgICAgICAga2V5UmVzdWx0OiBrZXlSZXN1bHQsXG4gICAgICAgICAgICAgICAgICBlcnJvclJlc3VsdDogZXJyb3JSZXN1bHRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJpbnZhbGlkIHJlc3VsdHMgXCIuY29uY2F0KEpTT04uc3RyaW5naWZ5KGxvb2t1cFJlc3VsdHMpKSkpO1xuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBfY2FsbGVlKTtcbiAgfSkpO1xuXG4gIHJldHVybiBmdW5jdGlvbiBrZXlMb29rdXAoX3gsIF94MiwgX3gzKSB7XG4gICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn0oKTtcbnZhciB3YWl0S2V5TG9va3VwID0gZnVuY3Rpb24gd2FpdEtleUxvb2t1cChlbmRwb2ludHMsIHZlcmlmaWVyLCB2ZXJpZmllcklkLCB0aW1lb3V0KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBrZXlMb29rdXAoZW5kcG9pbnRzLCB2ZXJpZmllciwgdmVyaWZpZXJJZCkudGhlbihyZXNvbHZlKS5jYXRjaChyZWplY3QpO1xuICAgIH0sIHRpbWVvdXQpO1xuICB9KTtcbn07XG52YXIga2V5QXNzaWduID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgdmFyIF9yZWYyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoZW5kcG9pbnRzLCB0b3J1c05vZGVQdWJzLCBsYXN0UG9pbnQsIGZpcnN0UG9pbnQsIHZlcmlmaWVyLCB2ZXJpZmllcklkKSB7XG4gICAgdmFyIG5vZGVOdW0sIGluaXRpYWxQb2ludCwgZGF0YSwgc2lnbmVkRGF0YTtcbiAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGlmIChsYXN0UG9pbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBub2RlTnVtID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZW5kcG9pbnRzLmxlbmd0aCk7XG4gICAgICAgICAgICAgIGluaXRpYWxQb2ludCA9IG5vZGVOdW07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBub2RlTnVtID0gbGFzdFBvaW50ICUgZW5kcG9pbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEobm9kZU51bSA9PT0gZmlyc3RQb2ludCkpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdMb29wZWQgdGhyb3VnaCBhbGwnKTtcblxuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGlmIChmaXJzdFBvaW50ICE9PSB1bmRlZmluZWQpIGluaXRpYWxQb2ludCA9IGZpcnN0UG9pbnQ7XG4gICAgICAgICAgICBkYXRhID0gZ2VuZXJhdGVKc29uUlBDT2JqZWN0KCdLZXlBc3NpZ24nLCB7XG4gICAgICAgICAgICAgIHZlcmlmaWVyOiB2ZXJpZmllcixcbiAgICAgICAgICAgICAgdmVyaWZpZXJfaWQ6IHZlcmlmaWVySWQudG9TdHJpbmcoKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDU7XG4gICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDg7XG4gICAgICAgICAgICByZXR1cm4gcG9zdCgnaHR0cHM6Ly9zaWduZXIudG9yLnVzL2FwaS9zaWduJywgZGF0YSwge1xuICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgcHViS2V5WDogdG9ydXNOb2RlUHVic1tub2RlTnVtXS5YLFxuICAgICAgICAgICAgICAgIHB1YktleVk6IHRvcnVzTm9kZVB1YnNbbm9kZU51bV0uWVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIHVzZUFQSUtleTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICBzaWduZWREYXRhID0gX2NvbnRleHQyLnNlbnQ7XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdChcInJldHVyblwiLCBwb3N0KGVuZHBvaW50c1tub2RlTnVtXSwgX29iamVjdFNwcmVhZCQxKF9vYmplY3RTcHJlYWQkMSh7fSwgZGF0YSksIHNpZ25lZERhdGEpLCB7XG4gICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDEyO1xuICAgICAgICAgICAgX2NvbnRleHQyLnQwID0gX2NvbnRleHQyW1wiY2F0Y2hcIl0oNSk7XG4gICAgICAgICAgICBsb2cuZXJyb3IoX2NvbnRleHQyLnQwKTtcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KFwicmV0dXJuXCIsIGtleUFzc2lnbihlbmRwb2ludHMsIHRvcnVzTm9kZVB1YnMsIG5vZGVOdW0gKyAxLCBpbml0aWFsUG9pbnQsIHZlcmlmaWVyLCB2ZXJpZmllcklkKSk7XG5cbiAgICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgX2NhbGxlZTIsIG51bGwsIFtbNSwgMTJdXSk7XG4gIH0pKTtcblxuICByZXR1cm4gZnVuY3Rpb24ga2V5QXNzaWduKF94NCwgX3g1LCBfeDYsIF94NywgX3g4LCBfeDkpIHtcbiAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgeyBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IH0ga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuLy8gb2YgVG9ydXMgbm9kZXMgdG8gaGFuZGxlIG1hbGljaW91cyBub2RlIHJlc3BvbnNlc1xuXG52YXIgVG9ydXMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBUb3J1cygpIHtcbiAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICAgIF9yZWYkZW5hYmxlT25lS2V5ID0gX3JlZi5lbmFibGVPbmVLZXksXG4gICAgICAgIGVuYWJsZU9uZUtleSA9IF9yZWYkZW5hYmxlT25lS2V5ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkZW5hYmxlT25lS2V5LFxuICAgICAgICBfcmVmJG1ldGFkYXRhSG9zdCA9IF9yZWYubWV0YWRhdGFIb3N0LFxuICAgICAgICBtZXRhZGF0YUhvc3QgPSBfcmVmJG1ldGFkYXRhSG9zdCA9PT0gdm9pZCAwID8gJ2h0dHBzOi8vbWV0YWRhdGEudG9yLnVzJyA6IF9yZWYkbWV0YWRhdGFIb3N0LFxuICAgICAgICBfcmVmJGFsbG93SG9zdCA9IF9yZWYuYWxsb3dIb3N0LFxuICAgICAgICBhbGxvd0hvc3QgPSBfcmVmJGFsbG93SG9zdCA9PT0gdm9pZCAwID8gJ2h0dHBzOi8vc2lnbmVyLnRvci51cy9hcGkvYWxsb3cnIDogX3JlZiRhbGxvd0hvc3QsXG4gICAgICAgIF9yZWYkc2VydmVyVGltZU9mZnNldCA9IF9yZWYuc2VydmVyVGltZU9mZnNldCxcbiAgICAgICAgc2VydmVyVGltZU9mZnNldCA9IF9yZWYkc2VydmVyVGltZU9mZnNldCA9PT0gdm9pZCAwID8gMCA6IF9yZWYkc2VydmVyVGltZU9mZnNldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUb3J1cyk7XG5cbiAgICB0aGlzLmVjID0gbmV3IGVjKCdzZWNwMjU2azEnKTtcbiAgICB0aGlzLm1ldGFkYXRhSG9zdCA9IG1ldGFkYXRhSG9zdDtcbiAgICB0aGlzLmFsbG93SG9zdCA9IGFsbG93SG9zdDtcbiAgICB0aGlzLmVuYWJsZU9uZUtleSA9IGVuYWJsZU9uZUtleTtcbiAgICB0aGlzLnNlcnZlclRpbWVPZmZzZXQgPSBzZXJ2ZXJUaW1lT2Zmc2V0IHx8IDA7IC8vIG1zXG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVG9ydXMsIFt7XG4gICAga2V5OiBcImdldFVzZXJUeXBlQW5kQWRkcmVzc1wiLFxuICAgIHZhbHVlOlxuICAgIC8qKlxuICAgICAqIE5vdGU6IHVzZSB0aGlzIGZ1bmN0aW9uIG9ubHkgZm9yIG9wZW5sb2dpbiB0a2V5IGFjY291bnQgbG9va3Vwcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX2dldFVzZXJUeXBlQW5kQWRkcmVzcyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoZW5kcG9pbnRzLCB0b3J1c05vZGVQdWJzLCBfcmVmMikge1xuICAgICAgICB2YXIgdmVyaWZpZXIsXG4gICAgICAgICAgICB2ZXJpZmllcklkLFxuICAgICAgICAgICAgZG9lc0tleUFzc2lnbixcbiAgICAgICAgICAgIF9yZWYzLFxuICAgICAgICAgICAga2V5UmVzdWx0LFxuICAgICAgICAgICAgZXJyb3JSZXN1bHQsXG4gICAgICAgICAgICBpc05ld0tleSxcbiAgICAgICAgICAgIGZpbmFsS2V5UmVzdWx0LFxuICAgICAgICAgICAgYXNzaWduUmVzdWx0LFxuICAgICAgICAgICAgX2ZpbmFsS2V5UmVzdWx0JGtleXMkLFxuICAgICAgICAgICAgWCxcbiAgICAgICAgICAgIFksXG4gICAgICAgICAgICB0eXBlT2ZVc2VyLFxuICAgICAgICAgICAgbm9uY2UsXG4gICAgICAgICAgICBwdWJOb25jZSxcbiAgICAgICAgICAgIG1vZGlmaWVkUHViS2V5LFxuICAgICAgICAgICAgdXBncmFkZWQsXG4gICAgICAgICAgICBfeWllbGQkdGhpcyRnZXRPclNldE4sXG4gICAgICAgICAgICBmaW5hbFgsXG4gICAgICAgICAgICBmaW5hbFksXG4gICAgICAgICAgICBhZGRyZXNzLFxuICAgICAgICAgICAgX2FyZ3MgPSBhcmd1bWVudHM7XG5cbiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICB2ZXJpZmllciA9IF9yZWYyLnZlcmlmaWVyLCB2ZXJpZmllcklkID0gX3JlZjIudmVyaWZpZXJJZDtcbiAgICAgICAgICAgICAgICBkb2VzS2V5QXNzaWduID0gX2FyZ3MubGVuZ3RoID4gMyAmJiBfYXJnc1szXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3NbM10gOiBmYWxzZTtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDtcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5TG9va3VwKGVuZHBvaW50cywgdmVyaWZpZXIsIHZlcmlmaWVySWQpO1xuXG4gICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0LnNlbnQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoX2NvbnRleHQudDApIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA3O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSB7fTtcblxuICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgX3JlZjMgPSBfY29udGV4dC50MDtcbiAgICAgICAgICAgICAgICBrZXlSZXN1bHQgPSBfcmVmMy5rZXlSZXN1bHQ7XG4gICAgICAgICAgICAgICAgZXJyb3JSZXN1bHQgPSBfcmVmMy5lcnJvclJlc3VsdDtcbiAgICAgICAgICAgICAgICBpc05ld0tleSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgaWYgKCEoZXJyb3JSZXN1bHQgJiYgSlNPTi5zdHJpbmdpZnkoZXJyb3JSZXN1bHQpLmluY2x1ZGVzKCdWZXJpZmllciArIFZlcmlmaWVySUQgaGFzIG5vdCB5ZXQgYmVlbiBhc3NpZ25lZCcpKSkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI2O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGRvZXNLZXlBc3NpZ24pIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVmVyaWZpZXIgKyBWZXJpZmllcklEIGhhcyBub3QgeWV0IGJlZW4gYXNzaWduZWQnKTtcblxuICAgICAgICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNjtcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5QXNzaWduKGVuZHBvaW50cywgdG9ydXNOb2RlUHVicywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHZlcmlmaWVyLCB2ZXJpZmllcklkKTtcblxuICAgICAgICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxODtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2FpdEtleUxvb2t1cChlbmRwb2ludHMsIHZlcmlmaWVyLCB2ZXJpZmllcklkLCAxMDAwKTtcblxuICAgICAgICAgICAgICBjYXNlIDE4OlxuICAgICAgICAgICAgICAgIF9jb250ZXh0LnQxID0gX2NvbnRleHQuc2VudDtcblxuICAgICAgICAgICAgICAgIGlmIChfY29udGV4dC50MSkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDIxO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgX2NvbnRleHQudDEgPSB7fTtcblxuICAgICAgICAgICAgICBjYXNlIDIxOlxuICAgICAgICAgICAgICAgIGFzc2lnblJlc3VsdCA9IF9jb250ZXh0LnQxO1xuICAgICAgICAgICAgICAgIGZpbmFsS2V5UmVzdWx0ID0gYXNzaWduUmVzdWx0LmtleVJlc3VsdDtcbiAgICAgICAgICAgICAgICBpc05ld0tleSA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDMxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjY6XG4gICAgICAgICAgICAgICAgaWYgKCFrZXlSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzMDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZpbmFsS2V5UmVzdWx0ID0ga2V5UmVzdWx0O1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzMTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDMwOlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vZGUgcmVzdWx0cyBkbyBub3QgbWF0Y2ggYXQgZmlyc3QgbG9va3VwIFwiLmNvbmNhdChKU09OLnN0cmluZ2lmeShrZXlSZXN1bHQgfHwge30pLCBcIiwgXCIpLmNvbmNhdChKU09OLnN0cmluZ2lmeShlcnJvclJlc3VsdCB8fCB7fSkpKTtcblxuICAgICAgICAgICAgICBjYXNlIDMxOlxuICAgICAgICAgICAgICAgIGlmICghZmluYWxLZXlSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2MTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF9maW5hbEtleVJlc3VsdCRrZXlzJCA9IGZpbmFsS2V5UmVzdWx0LmtleXNbMF0sIFggPSBfZmluYWxLZXlSZXN1bHQka2V5cyQucHViX2tleV9YLCBZID0gX2ZpbmFsS2V5UmVzdWx0JGtleXMkLnB1Yl9rZXlfWTtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMzM7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM3O1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE9yU2V0Tm9uY2UoWCwgWSwgdW5kZWZpbmVkLCAhaXNOZXdLZXkpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMzc6XG4gICAgICAgICAgICAgICAgX3lpZWxkJHRoaXMkZ2V0T3JTZXROID0gX2NvbnRleHQuc2VudDtcbiAgICAgICAgICAgICAgICB0eXBlT2ZVc2VyID0gX3lpZWxkJHRoaXMkZ2V0T3JTZXROLnR5cGVPZlVzZXI7XG4gICAgICAgICAgICAgICAgbm9uY2UgPSBfeWllbGQkdGhpcyRnZXRPclNldE4ubm9uY2U7XG4gICAgICAgICAgICAgICAgcHViTm9uY2UgPSBfeWllbGQkdGhpcyRnZXRPclNldE4ucHViTm9uY2U7XG4gICAgICAgICAgICAgICAgdXBncmFkZWQgPSBfeWllbGQkdGhpcyRnZXRPclNldE4udXBncmFkZWQ7XG4gICAgICAgICAgICAgICAgbm9uY2UgPSBuZXcgQk4obm9uY2UgfHwgJzAnLCAxNik7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ4O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDQ1O1xuICAgICAgICAgICAgICAgIF9jb250ZXh0LnQyID0gX2NvbnRleHRbXCJjYXRjaFwiXSgzMyk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEdldE9yU2V0Tm9uY2VFcnJvcigpO1xuXG4gICAgICAgICAgICAgIGNhc2UgNDg6XG4gICAgICAgICAgICAgICAgaWYgKCEodHlwZU9mVXNlciA9PT0gJ3YxJykpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1MjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG1vZGlmaWVkUHViS2V5ID0gdGhpcy5lYy5rZXlGcm9tUHVibGljKHtcbiAgICAgICAgICAgICAgICAgIHg6IFgudG9TdHJpbmcoMTYpLFxuICAgICAgICAgICAgICAgICAgeTogWS50b1N0cmluZygxNilcbiAgICAgICAgICAgICAgICB9KS5nZXRQdWJsaWMoKS5hZGQodGhpcy5lYy5rZXlGcm9tUHJpdmF0ZShub25jZS50b1N0cmluZygxNikpLmdldFB1YmxpYygpKTtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSA1MjpcbiAgICAgICAgICAgICAgICBpZiAoISh0eXBlT2ZVc2VyID09PSAndjInKSkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU2O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbW9kaWZpZWRQdWJLZXkgPSB0aGlzLmVjLmtleUZyb21QdWJsaWMoe1xuICAgICAgICAgICAgICAgICAgeDogWC50b1N0cmluZygxNiksXG4gICAgICAgICAgICAgICAgICB5OiBZLnRvU3RyaW5nKDE2KVxuICAgICAgICAgICAgICAgIH0pLmdldFB1YmxpYygpLmFkZCh0aGlzLmVjLmtleUZyb21QdWJsaWMoe1xuICAgICAgICAgICAgICAgICAgeDogcHViTm9uY2UueCxcbiAgICAgICAgICAgICAgICAgIHk6IHB1Yk5vbmNlLnlcbiAgICAgICAgICAgICAgICB9KS5nZXRQdWJsaWMoKSk7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU3O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgNTY6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdnZXRPclNldE5vbmNlIHNob3VsZCBhbHdheXMgcmV0dXJuIHR5cGVPZlVzZXIuJyk7XG5cbiAgICAgICAgICAgICAgY2FzZSA1NzpcbiAgICAgICAgICAgICAgICBmaW5hbFggPSBtb2RpZmllZFB1YktleS5nZXRYKCkudG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgICAgIGZpbmFsWSA9IG1vZGlmaWVkUHViS2V5LmdldFkoKS50b1N0cmluZygxNik7XG4gICAgICAgICAgICAgICAgYWRkcmVzcyA9IHRoaXMuZ2VuZXJhdGVBZGRyZXNzRnJvbVB1YktleShtb2RpZmllZFB1YktleS5nZXRYKCksIG1vZGlmaWVkUHViS2V5LmdldFkoKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcInJldHVyblwiLCB7XG4gICAgICAgICAgICAgICAgICB0eXBlT2ZVc2VyOiB0eXBlT2ZVc2VyLFxuICAgICAgICAgICAgICAgICAgbm9uY2U6IG5vbmNlLFxuICAgICAgICAgICAgICAgICAgcHViTm9uY2U6IHB1Yk5vbmNlLFxuICAgICAgICAgICAgICAgICAgdXBncmFkZWQ6IHVwZ3JhZGVkLFxuICAgICAgICAgICAgICAgICAgWDogZmluYWxYLFxuICAgICAgICAgICAgICAgICAgWTogZmluYWxZLFxuICAgICAgICAgICAgICAgICAgYWRkcmVzczogYWRkcmVzc1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjE6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9kZSByZXN1bHRzIGRvIG5vdCBtYXRjaCBhdCBmaW5hbCBsb29rdXAgXCIuY29uY2F0KEpTT04uc3RyaW5naWZ5KGtleVJlc3VsdCB8fCB7fSksIFwiLCBcIikuY29uY2F0KEpTT04uc3RyaW5naWZ5KGVycm9yUmVzdWx0IHx8IHt9KSkpO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjI6XG4gICAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcywgW1szMywgNDVdXSk7XG4gICAgICB9KSk7XG5cbiAgICAgIGZ1bmN0aW9uIGdldFVzZXJUeXBlQW5kQWRkcmVzcyhfeCwgX3gyLCBfeDMpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRVc2VyVHlwZUFuZEFkZHJlc3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldFVzZXJUeXBlQW5kQWRkcmVzcztcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogXCJzZXRDdXN0b21LZXlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9zZXRDdXN0b21LZXkgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMihfcmVmNCkge1xuICAgICAgICB2YXIgcHJpdktleUhleCwgbWV0YWRhdGFOb25jZSwgdG9ydXNLZXlIZXgsIGN1c3RvbUtleUhleCwgdG9ydXNLZXksIHByaXZLZXksIGN1c3RvbUtleSwgbmV3TWV0YWRhdGFOb25jZSwgZGF0YTtcbiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcHJpdktleUhleCA9IF9yZWY0LnByaXZLZXlIZXgsIG1ldGFkYXRhTm9uY2UgPSBfcmVmNC5tZXRhZGF0YU5vbmNlLCB0b3J1c0tleUhleCA9IF9yZWY0LnRvcnVzS2V5SGV4LCBjdXN0b21LZXlIZXggPSBfcmVmNC5jdXN0b21LZXlIZXg7XG5cbiAgICAgICAgICAgICAgICBpZiAodG9ydXNLZXlIZXgpIHtcbiAgICAgICAgICAgICAgICAgIHRvcnVzS2V5ID0gbmV3IEJOKHRvcnVzS2V5SGV4LCAxNik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHByaXZLZXkgPSBuZXcgQk4ocHJpdktleUhleCwgMTYpO1xuICAgICAgICAgICAgICAgICAgdG9ydXNLZXkgPSBwcml2S2V5LnN1YihtZXRhZGF0YU5vbmNlKS51bW9kKHRoaXMuZWMuY3VydmUubik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY3VzdG9tS2V5ID0gbmV3IEJOKGN1c3RvbUtleUhleCwgMTYpO1xuICAgICAgICAgICAgICAgIG5ld01ldGFkYXRhTm9uY2UgPSBjdXN0b21LZXkuc3ViKHRvcnVzS2V5KS51bW9kKHRoaXMuZWMuY3VydmUubik7XG4gICAgICAgICAgICAgICAgZGF0YSA9IHRoaXMuZ2VuZXJhdGVNZXRhZGF0YVBhcmFtcyhuZXdNZXRhZGF0YU5vbmNlLnRvU3RyaW5nKDE2KSwgdG9ydXNLZXkudG9TdHJpbmcoMTYpKTtcbiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDc7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TWV0YWRhdGEoZGF0YSk7XG5cbiAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlMiwgdGhpcyk7XG4gICAgICB9KSk7XG5cbiAgICAgIGZ1bmN0aW9uIHNldEN1c3RvbUtleShfeDQpIHtcbiAgICAgICAgcmV0dXJuIF9zZXRDdXN0b21LZXkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNldEN1c3RvbUtleTtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogXCJyZXRyaWV2ZVNoYXJlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3JldHJpZXZlU2hhcmVzID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUoZW5kcG9pbnRzLCBpbmRleGVzLCB2ZXJpZmllciwgdmVyaWZpZXJQYXJhbXMsIGlkVG9rZW4pIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB2YXIgZXh0cmFQYXJhbXMsXG4gICAgICAgICAgICBwcm9taXNlQXJyLFxuICAgICAgICAgICAgdG1wS2V5LFxuICAgICAgICAgICAgcHViS2V5LFxuICAgICAgICAgICAgcHViS2V5WCxcbiAgICAgICAgICAgIHB1YktleVksXG4gICAgICAgICAgICB0b2tlbkNvbW1pdG1lbnQsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgcCxcbiAgICAgICAgICAgIF9hcmdzNSA9IGFyZ3VtZW50cztcbiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgZXh0cmFQYXJhbXMgPSBfYXJnczUubGVuZ3RoID4gNSAmJiBfYXJnczVbNV0gIT09IHVuZGVmaW5lZCA/IF9hcmdzNVs1XSA6IHt9O1xuICAgICAgICAgICAgICAgIHByb21pc2VBcnIgPSBbXTtcbiAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldCh0aGlzLmFsbG93SG9zdCwge1xuICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICB2ZXJpZmllcjogdmVyaWZpZXIsXG4gICAgICAgICAgICAgICAgICAgIHZlcmlmaWVyX2lkOiB2ZXJpZmllclBhcmFtcy52ZXJpZmllcl9pZFxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgIHVzZUFQSUtleTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgQ29tbWl0bWVudFJlcXVlc3RQYXJhbXMgc3RydWN0IHtcbiAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVByZWZpeCAgICAgIHN0cmluZyBganNvbjpcIm1lc3NhZ2VwcmVmaXhcImBcbiAgICAgICAgICAgICAgICAgICAgVG9rZW5Db21taXRtZW50ICAgIHN0cmluZyBganNvbjpcInRva2VuY29tbWl0bWVudFwiYFxuICAgICAgICAgICAgICAgICAgICBUZW1wUHViWCAgICAgICAgICAgc3RyaW5nIGBqc29uOlwidGVtcHB1YnhcImBcbiAgICAgICAgICAgICAgICAgICAgVGVtcFB1YlkgICAgICAgICAgIHN0cmluZyBganNvbjpcInRlbXBwdWJ5XCJgXG4gICAgICAgICAgICAgICAgICAgIFZlcmlmaWVySWRlbnRpZmllciBzdHJpbmcgYGpzb246XCJ2ZXJpZmllcmlkZW50aWZpZXJcImBcbiAgICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIC8vIGdlbmVyYXRlIHRlbXBvcmFyeSBwcml2YXRlIGFuZCBwdWJsaWMga2V5IHRoYXQgaXMgdXNlZCB0byBzZWN1cmUgcmVjZWl2ZSBzaGFyZXNcbiAgICAgICAgICAgICAgICB0bXBLZXkgPSBnZW5lcmF0ZVByaXZhdGUoKTtcbiAgICAgICAgICAgICAgICBwdWJLZXkgPSBnZXRQdWJsaWModG1wS2V5KS50b1N0cmluZygnaGV4Jyk7XG4gICAgICAgICAgICAgICAgcHViS2V5WCA9IHB1YktleS5zbGljZSgyLCA2Nik7XG4gICAgICAgICAgICAgICAgcHViS2V5WSA9IHB1YktleS5zbGljZSg2Nik7XG4gICAgICAgICAgICAgICAgdG9rZW5Db21taXRtZW50ID0ga2VjY2FrMjU2KGlkVG9rZW4pOyAvLyBtYWtlIGNvbW1pdG1lbnQgcmVxdWVzdHMgdG8gZW5kcG9pbnRzXG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZW5kcG9pbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICBwID0gcG9zdChlbmRwb2ludHNbaV0sIGdlbmVyYXRlSnNvblJQQ09iamVjdCgnQ29tbWl0bWVudFJlcXVlc3QnLCB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VwcmVmaXg6ICdtdWcwMCcsXG4gICAgICAgICAgICAgICAgICAgIHRva2VuY29tbWl0bWVudDogdG9rZW5Db21taXRtZW50LnNsaWNlKDIpLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wcHVieDogcHViS2V5WCxcbiAgICAgICAgICAgICAgICAgICAgdGVtcHB1Ynk6IHB1YktleVksXG4gICAgICAgICAgICAgICAgICAgIHZlcmlmaWVyaWRlbnRpZmllcjogdmVyaWZpZXJcbiAgICAgICAgICAgICAgICAgIH0pKS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2cuZXJyb3IoJ2NvbW1pdG1lbnQnLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBwcm9taXNlQXJyLnB1c2gocCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICBTaGFyZVJlcXVlc3RQYXJhbXMgc3RydWN0IHtcbiAgICAgICAgICAgICAgICAgICAgSXRlbSBbXWJpanNvbi5SYXdNZXNzYWdlIGBqc29uOlwiaXRlbVwiYFxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgU2hhcmVSZXF1ZXN0SXRlbSBzdHJ1Y3Qge1xuICAgICAgICAgICAgICAgICAgICBJRFRva2VuICAgICAgICAgICAgc3RyaW5nICAgICAgICAgIGBqc29uOlwiaWR0b2tlblwiYFxuICAgICAgICAgICAgICAgICAgICBOb2RlU2lnbmF0dXJlcyAgICAgW11Ob2RlU2lnbmF0dXJlIGBqc29uOlwibm9kZXNpZ25hdHVyZXNcImBcbiAgICAgICAgICAgICAgICAgICAgVmVyaWZpZXJJZGVudGlmaWVyIHN0cmluZyAgICAgICAgICBganNvbjpcInZlcmlmaWVyaWRlbnRpZmllclwiYFxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgTm9kZVNpZ25hdHVyZSBzdHJ1Y3Qge1xuICAgICAgICAgICAgICAgICAgICBTaWduYXR1cmUgICBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgRGF0YSAgICAgICAgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgIE5vZGVQdWJLZXlYIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICBOb2RlUHViS2V5WSBzdHJpbmdcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIENvbW1pdG1lbnRSZXF1ZXN0UmVzdWx0IHN0cnVjdCB7XG4gICAgICAgICAgICAgICAgICAgIFNpZ25hdHVyZSBzdHJpbmcgYGpzb246XCJzaWduYXR1cmVcImBcbiAgICAgICAgICAgICAgICAgICAgRGF0YSAgICAgIHN0cmluZyBganNvbjpcImRhdGFcImBcbiAgICAgICAgICAgICAgICAgICAgTm9kZVB1YlggIHN0cmluZyBganNvbjpcIm5vZGVwdWJ4XCJgXG4gICAgICAgICAgICAgICAgICAgIE5vZGVQdWJZICBzdHJpbmcgYGpzb246XCJub2RlcHVieVwiYFxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAvLyBzZW5kIHNoYXJlIHJlcXVlc3Qgb25jZSBrICsgdCBudW1iZXIgb2YgY29tbWl0bWVudCByZXF1ZXN0cyBoYXZlIGNvbXBsZXRlZFxuXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LmFicnVwdChcInJldHVyblwiLCBTb21lKHByb21pc2VBcnIsIGZ1bmN0aW9uIChyZXN1bHRBcnIpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBjb21wbGV0ZWRSZXF1ZXN0cyA9IHJlc3VsdEFyci5maWx0ZXIoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF4IHx8IF90eXBlb2YoeCkgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHguZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoY29tcGxldGVkUmVxdWVzdHMubGVuZ3RoID49IH5+KGVuZHBvaW50cy5sZW5ndGggLyA0KSAqIDMgKyAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0QXJyKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImludmFsaWQgXCIuY29uY2F0KEpTT04uc3RyaW5naWZ5KHJlc3VsdEFycikpKSk7XG4gICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2VzKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZUFyclJlcXVlc3QgPSBbXTtcbiAgICAgICAgICAgICAgICAgIHZhciBub2RlU2lncyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgcmVzcG9uc2VzLmxlbmd0aDsgX2kgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2VzW19pXSkgbm9kZVNpZ3MucHVzaChyZXNwb25zZXNbX2ldLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IGVuZHBvaW50cy5sZW5ndGg7IF9pMiArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcm9taXNlL25vLW5lc3RpbmdcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9wID0gcG9zdChlbmRwb2ludHNbX2kyXSwgZ2VuZXJhdGVKc29uUlBDT2JqZWN0KCdTaGFyZVJlcXVlc3QnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgZW5jcnlwdGVkOiAneWVzJyxcbiAgICAgICAgICAgICAgICAgICAgICBpdGVtOiBbX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB2ZXJpZmllclBhcmFtcyksIHt9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZHRva2VuOiBpZFRva2VuLFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNpZ25hdHVyZXM6IG5vZGVTaWdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmVyaWZpZXJpZGVudGlmaWVyOiB2ZXJpZmllclxuICAgICAgICAgICAgICAgICAgICAgIH0sIGV4dHJhUGFyYW1zKV1cbiAgICAgICAgICAgICAgICAgICAgfSkpLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9nLmVycm9yKCdzaGFyZSByZXEnLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBwcm9taXNlQXJyUmVxdWVzdC5wdXNoKF9wKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIFNvbWUocHJvbWlzZUFyclJlcXVlc3QsIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfcmVmNSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKHNoYXJlUmVzcG9uc2VzLCBzaGFyZWRTdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBjb21wbGV0ZWRSZXF1ZXN0cywgdGhyZXNob2xkUHVibGljS2V5LCBzaGFyZVByb21pc2VzLCBub2RlSW5kZXgsIF9pMywgbWV0YWRhdGEsIHNoYXJlc1Jlc29sdmVkLCBkZWNyeXB0ZWRTaGFyZXMsIGFsbENvbWJpcywgcHJpdmF0ZUtleSwgX2xvb3AsIGosIF9yZXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2hhcmVSZXF1ZXN0UmVzdWx0IHN0cnVjdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBLZXlzIFtdS2V5QXNzaWdubWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8gS2V5QXNzaWdubWVudFB1YmxpYyAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSBLZXlBc3NpZ25tZW50UHVibGljIHN0cnVjdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbmRleCAgICAgYmlnLkludFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHVibGljS2V5IGNvbW1vbi5Qb2ludFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhyZXNob2xkIGludFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmVyaWZpZXJzIG1hcFtzdHJpbmddW11zdHJpbmcgLy8gVmVyaWZpZXIgPT4gVmVyaWZpZXJJRFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gS2V5QXNzaWdubWVudCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSBLZXlBc3NpZ25tZW50IHN0cnVjdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBLZXlBc3NpZ25tZW50UHVibGljXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaGFyZSBiaWcuSW50IC8vIE9yIFNpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhyZXNob2xkIG51bWJlciBvZiBub2RlcyBoYXZlIHJldHVybmVkIHRoZSBzYW1lIHVzZXIgcHVibGljIGtleVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkUmVxdWVzdHMgPSBzaGFyZVJlc3BvbnNlcy5maWx0ZXIoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocmVzaG9sZFB1YmxpY0tleSA9IHRocmVzaG9sZFNhbWUoc2hhcmVSZXNwb25zZXMubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB4ICYmIHgucmVzdWx0ICYmIHgucmVzdWx0LmtleXNbMF0uUHVibGljS2V5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIH5+KGVuZHBvaW50cy5sZW5ndGggLyAyKSArIDEpOyAvLyBvcHRpbWlzdGljYWxseSBydW4gbGFncmFuZ2UgaW50ZXJwb2xhdGlvbiBvbmNlIHRocmVzaG9sZCBudW1iZXIgb2Ygc2hhcmVzIGhhdmUgYmVlbiByZWNlaXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIHVzZXIgcHVibGljIGtleSB0byBlbnN1cmUgdGhhdCBzaGFyZXMgYXJlIGNvbnNpc3RlbnRcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoY29tcGxldGVkUmVxdWVzdHMubGVuZ3RoID49IH5+KGVuZHBvaW50cy5sZW5ndGggLyAyKSArIDEgJiYgdGhyZXNob2xkUHVibGljS2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDI1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVQcm9taXNlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZUluZGV4ID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoX2kzID0gMDsgX2kzIDwgc2hhcmVSZXNwb25zZXMubGVuZ3RoOyBfaTMgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hhcmVSZXNwb25zZXNbX2kzXSAmJiBzaGFyZVJlc3BvbnNlc1tfaTNdLnJlc3VsdCAmJiBzaGFyZVJlc3BvbnNlc1tfaTNdLnJlc3VsdC5rZXlzICYmIHNoYXJlUmVzcG9uc2VzW19pM10ucmVzdWx0LmtleXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlUmVzcG9uc2VzW19pM10ucmVzdWx0LmtleXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBCTihhLkluZGV4LCAxNikuY21wKG5ldyBCTihiLkluZGV4LCAxNikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNoYXJlUmVzcG9uc2VzW19pM10ucmVzdWx0LmtleXNbMF0uTWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcGhlbVB1YmxpY0tleTogQnVmZmVyLmZyb20oc2hhcmVSZXNwb25zZXNbX2kzXS5yZXN1bHQua2V5c1swXS5NZXRhZGF0YS5lcGhlbVB1YmxpY0tleSwgJ2hleCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdjogQnVmZmVyLmZyb20oc2hhcmVSZXNwb25zZXNbX2kzXS5yZXN1bHQua2V5c1swXS5NZXRhZGF0YS5pdiwgJ2hleCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWM6IEJ1ZmZlci5mcm9tKHNoYXJlUmVzcG9uc2VzW19pM10ucmVzdWx0LmtleXNbMF0uTWV0YWRhdGEubWFjLCAnaGV4JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6IEJ1ZmZlci5mcm9tKHNoYXJlUmVzcG9uc2VzW19pM10ucmVzdWx0LmtleXNbMF0uTWV0YWRhdGEubW9kZSwgJ2hleCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVQcm9taXNlcy5wdXNoKCAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJvbWlzZS9uby1uZXN0aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNyeXB0KHRtcEtleSwgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBtZXRhZGF0YSksIHt9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpcGhlcnRleHQ6IEJ1ZmZlci5mcm9tKGF0b2Ioc2hhcmVSZXNwb25zZXNbX2kzXS5yZXN1bHQua2V5c1swXS5TaGFyZSkucGFkU3RhcnQoNjQsICcwJyksICdoZXgnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvZy5kZWJ1Zygnc2hhcmUgZGVjcnlwdGlvbicsIGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlUHJvbWlzZXMucHVzaChQcm9taXNlLnJlc29sdmUoQnVmZmVyLmZyb20oc2hhcmVSZXNwb25zZXNbX2kzXS5yZXN1bHQua2V5c1swXS5TaGFyZS5wYWRTdGFydCg2NCwgJzAnKSwgJ2hleCcpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlUHJvbWlzZXMucHVzaChQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlSW5kZXgucHVzaChuZXcgQk4oaW5kZXhlc1tfaTNdLCAxNikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoc2hhcmVQcm9taXNlcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFyZXNSZXNvbHZlZCA9IF9jb250ZXh0My5zZW50O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNoYXJlZFN0YXRlLnJlc29sdmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdChcInJldHVyblwiLCB1bmRlZmluZWQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY3J5cHRlZFNoYXJlcyA9IHNoYXJlc1Jlc29sdmVkLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjdXJyLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycikgYWNjLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBub2RlSW5kZXhbaW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuZXcgQk4oY3VycilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBbXSk7IC8vIHJ1biBsYWdyYW5nZSBpbnRlcnBvbGF0aW9uIG9uIGFsbCBzdWJzZXRzLCBmYXN0ZXIgaW4gdGhlIG9wdGltaXN0aWMgc2NlbmFyaW8gdGhhbiBiZXJsZWthbXAtd2VsY2ggZHVlIHRvIGVhcmx5IGV4aXRcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcnVuIGxhZ3JhbmdlIGludGVycG9sYXRpb24gb24gYWxsIHN1YnNldHMsIGZhc3RlciBpbiB0aGUgb3B0aW1pc3RpYyBzY2VuYXJpbyB0aGFuIGJlcmxla2FtcC13ZWxjaCBkdWUgdG8gZWFybHkgZXhpdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsQ29tYmlzID0ga0NvbWJpbmF0aW9ucyhkZWNyeXB0ZWRTaGFyZXMubGVuZ3RoLCB+fihlbmRwb2ludHMubGVuZ3RoIC8gMikgKyAxKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Q29tYmkgPSBhbGxDb21iaXNbal07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Q29tYmlTaGFyZXMgPSBkZWNyeXB0ZWRTaGFyZXMuZmlsdGVyKGZ1bmN0aW9uICh2LCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50Q29tYmkuaW5jbHVkZXMoaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNoYXJlcyA9IGN1cnJlbnRDb21iaVNoYXJlcy5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRpY2VzID0gY3VycmVudENvbWJpU2hhcmVzLm1hcChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB4LmluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVyaXZlZFByaXZhdGVLZXkgPSBfdGhpcy5sYWdyYW5nZUludGVycG9sYXRpb24oc2hhcmVzLCBpbmRpY2VzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVjcnlwdGVkUHViS2V5ID0gZ2V0UHVibGljKEJ1ZmZlci5mcm9tKGRlcml2ZWRQcml2YXRlS2V5LnRvU3RyaW5nKDE2LCA2NCksICdoZXgnKSkudG9TdHJpbmcoJ2hleCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVjcnlwdGVkUHViS2V5WCA9IGRlY3J5cHRlZFB1YktleS5zbGljZSgyLCA2Nik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWNyeXB0ZWRQdWJLZXlZID0gZGVjcnlwdGVkUHViS2V5LnNsaWNlKDY2KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3IEJOKGRlY3J5cHRlZFB1YktleVgsIDE2KS5jbXAobmV3IEJOKHRocmVzaG9sZFB1YmxpY0tleS5YLCAxNikpID09PSAwICYmIG5ldyBCTihkZWNyeXB0ZWRQdWJLZXlZLCAxNikuY21wKG5ldyBCTih0aHJlc2hvbGRQdWJsaWNLZXkuWSwgMTYpKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaXZhdGVLZXkgPSBkZXJpdmVkUHJpdmF0ZUtleTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJicmVha1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShqIDwgYWxsQ29tYmlzLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZXQgPSBfbG9vcChqKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoX3JldCA9PT0gXCJicmVha1wiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDE5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoXCJicmVha1wiLCAyMik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE5OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaiArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAxNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHByaXZhdGVLZXkgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyNDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IGRlcml2ZSBwcml2YXRlIGtleScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KFwicmV0dXJuXCIsIHByaXZhdGVLZXkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyNTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyNjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUzKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gxMCwgX3gxMSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVmNS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgfSgpKTtcbiAgICAgICAgICAgICAgICB9KS50aGVuKCAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIF9yZWY2ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQocmV0dXJuZWRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByaXZhdGVLZXksIGRlY3J5cHRlZFB1YktleSwgZGVjcnlwdGVkUHViS2V5WCwgZGVjcnlwdGVkUHViS2V5WSwgbWV0YWRhdGFOb25jZSwgX3lpZWxkJF90aGlzJGdldE5vbmNlLCBub25jZSwgZXRoQWRkcmVzcztcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcml2YXRlS2V5ID0gcmV0dXJuZWRLZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjcnlwdGVkUHViS2V5ID0gZ2V0UHVibGljKEJ1ZmZlci5mcm9tKHByaXZhdGVLZXkudG9TdHJpbmcoMTYsIDY0KSwgJ2hleCcpKS50b1N0cmluZygnaGV4Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjcnlwdGVkUHViS2V5WCA9IGRlY3J5cHRlZFB1YktleS5zbGljZSgyLCA2Nik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjcnlwdGVkUHViS2V5WSA9IGRlY3J5cHRlZFB1YktleS5zbGljZSg2Nik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmVuYWJsZU9uZUtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gNztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZ2V0Tm9uY2UoZGVjcnlwdGVkUHViS2V5WCwgZGVjcnlwdGVkUHViS2V5WSwgcHJpdmF0ZUtleSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF95aWVsZCRfdGhpcyRnZXROb25jZSA9IF9jb250ZXh0NC5zZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vbmNlID0gX3lpZWxkJF90aGlzJGdldE5vbmNlLm5vbmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhTm9uY2UgPSBuZXcgQk4obm9uY2UgfHwgJzAnLCAxNik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMTQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmdldE1ldGFkYXRhKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1Yl9rZXlfWDogZGVjcnlwdGVkUHViS2V5WCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1Yl9rZXlfWTogZGVjcnlwdGVkUHViS2V5WVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGFOb25jZSA9IF9jb250ZXh0NC5zZW50O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnKCc+IHRvcnVzLmpzL3JldHJpZXZlU2hhcmVzJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpdktleTogcHJpdmF0ZUtleS50b1N0cmluZygxNiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YU5vbmNlOiBtZXRhZGF0YU5vbmNlLnRvU3RyaW5nKDE2KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaXZhdGVLZXkgPSBwcml2YXRlS2V5LmFkZChtZXRhZGF0YU5vbmNlKS51bW9kKF90aGlzLmVjLmN1cnZlLm4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV0aEFkZHJlc3MgPSBfdGhpcy5nZW5lcmF0ZUFkZHJlc3NGcm9tUHJpdktleShwcml2YXRlS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2cuZGVidWcoJz4gdG9ydXMuanMvcmV0cmlldmVTaGFyZXMnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldGhBZGRyZXNzOiBldGhBZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpdktleTogcHJpdmF0ZUtleS50b1N0cmluZygxNilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgLy8gcmV0dXJuIHJlY29uc3RydWN0ZWQgcHJpdmF0ZSBrZXkgYW5kIGV0aGVyZXVtIGFkZHJlc3NcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KFwicmV0dXJuXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV0aEFkZHJlc3M6IGV0aEFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcml2S2V5OiBwcml2YXRlS2V5LnRvU3RyaW5nKCdoZXgnLCA2NCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YU5vbmNlOiBtZXRhZGF0YU5vbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZTQpO1xuICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94MTIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWY2LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0oKSkpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9jYWxsZWU1LCB0aGlzKTtcbiAgICAgIH0pKTtcblxuICAgICAgZnVuY3Rpb24gcmV0cmlldmVTaGFyZXMoX3g1LCBfeDYsIF94NywgX3g4LCBfeDkpIHtcbiAgICAgICAgcmV0dXJuIF9yZXRyaWV2ZVNoYXJlcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0cmlldmVTaGFyZXM7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0TWV0YWRhdGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9nZXRNZXRhZGF0YSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU2KGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIG1ldGFkYXRhUmVzcG9uc2U7XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTYkKF9jb250ZXh0Nikge1xuICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ni5wcmV2ID0gX2NvbnRleHQ2Lm5leHQpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5wcmV2ID0gMDtcbiAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvc3QoXCJcIi5jb25jYXQodGhpcy5tZXRhZGF0YUhvc3QsIFwiL2dldFwiKSwgZGF0YSwgb3B0aW9ucywge1xuICAgICAgICAgICAgICAgICAgdXNlQVBJS2V5OiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIG1ldGFkYXRhUmVzcG9uc2UgPSBfY29udGV4dDYuc2VudDtcblxuICAgICAgICAgICAgICAgIGlmICghKCFtZXRhZGF0YVJlc3BvbnNlIHx8ICFtZXRhZGF0YVJlc3BvbnNlLm1lc3NhZ2UpKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDY7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LmFicnVwdChcInJldHVyblwiLCBuZXcgQk4oMCkpO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LmFicnVwdChcInJldHVyblwiLCBuZXcgQk4obWV0YWRhdGFSZXNwb25zZS5tZXNzYWdlLCAxNikpO1xuXG4gICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICBfY29udGV4dDYucHJldiA9IDk7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQ2LnQwID0gX2NvbnRleHQ2W1wiY2F0Y2hcIl0oMCk7XG4gICAgICAgICAgICAgICAgbG9nLmVycm9yKCdnZXQgbWV0YWRhdGEgZXJyb3InLCBfY29udGV4dDYudDApO1xuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KFwicmV0dXJuXCIsIG5ldyBCTigwKSk7XG5cbiAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgX2NhbGxlZTYsIHRoaXMsIFtbMCwgOV1dKTtcbiAgICAgIH0pKTtcblxuICAgICAgZnVuY3Rpb24gZ2V0TWV0YWRhdGEoX3gxMywgX3gxNCkge1xuICAgICAgICByZXR1cm4gX2dldE1ldGFkYXRhLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXRNZXRhZGF0YTtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogXCJnZW5lcmF0ZU1ldGFkYXRhUGFyYW1zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdlbmVyYXRlTWV0YWRhdGFQYXJhbXMobWVzc2FnZSwgcHJpdmF0ZUtleSkge1xuICAgICAgdmFyIGtleSA9IHRoaXMuZWMua2V5RnJvbVByaXZhdGUocHJpdmF0ZUtleS50b1N0cmluZygnaGV4JywgNjQpKTtcbiAgICAgIHZhciBzZXREYXRhID0ge1xuICAgICAgICBkYXRhOiBtZXNzYWdlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBCTih+fih0aGlzLnNlcnZlclRpbWVPZmZzZXQgKyBEYXRlLm5vdygpIC8gMTAwMCkpLnRvU3RyaW5nKDE2KVxuICAgICAgfTtcbiAgICAgIHZhciBzaWcgPSBrZXkuc2lnbihrZWNjYWsyNTYoSnNvblN0cmluZ2lmeShzZXREYXRhKSkuc2xpY2UoMikpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcHViX2tleV9YOiBrZXkuZ2V0UHVibGljKCkuZ2V0WCgpLnRvU3RyaW5nKCdoZXgnKSxcbiAgICAgICAgcHViX2tleV9ZOiBrZXkuZ2V0UHVibGljKCkuZ2V0WSgpLnRvU3RyaW5nKCdoZXgnKSxcbiAgICAgICAgc2V0X2RhdGE6IHNldERhdGEsXG4gICAgICAgIHNpZ25hdHVyZTogQnVmZmVyLmZyb20oc2lnLnIudG9TdHJpbmcoMTYsIDY0KSArIHNpZy5zLnRvU3RyaW5nKDE2LCA2NCkgKyBuZXcgQk4oc2lnLnYpLnRvU3RyaW5nKDE2LCAyKSwgJ2hleCcpLnRvU3RyaW5nKCdiYXNlNjQnKVxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0TWV0YWRhdGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9zZXRNZXRhZGF0YSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU3KGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIG1ldGFkYXRhUmVzcG9uc2U7XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTckKF9jb250ZXh0Nykge1xuICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ny5wcmV2ID0gX2NvbnRleHQ3Lm5leHQpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5wcmV2ID0gMDtcbiAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvc3QoXCJcIi5jb25jYXQodGhpcy5tZXRhZGF0YUhvc3QsIFwiL3NldFwiKSwgZGF0YSwgb3B0aW9ucywge1xuICAgICAgICAgICAgICAgICAgdXNlQVBJS2V5OiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIG1ldGFkYXRhUmVzcG9uc2UgPSBfY29udGV4dDcuc2VudDtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LmFicnVwdChcInJldHVyblwiLCBtZXRhZGF0YVJlc3BvbnNlLm1lc3NhZ2UpO1xuXG4gICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICBfY29udGV4dDcucHJldiA9IDc7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQ3LnQwID0gX2NvbnRleHQ3W1wiY2F0Y2hcIl0oMCk7XG4gICAgICAgICAgICAgICAgbG9nLmVycm9yKCdzZXQgbWV0YWRhdGEgZXJyb3InLCBfY29udGV4dDcudDApO1xuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuYWJydXB0KFwicmV0dXJuXCIsICcnKTtcblxuICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlNywgdGhpcywgW1swLCA3XV0pO1xuICAgICAgfSkpO1xuXG4gICAgICBmdW5jdGlvbiBzZXRNZXRhZGF0YShfeDE1LCBfeDE2KSB7XG4gICAgICAgIHJldHVybiBfc2V0TWV0YWRhdGEuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNldE1ldGFkYXRhO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiBcImxhZ3JhbmdlSW50ZXJwb2xhdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsYWdyYW5nZUludGVycG9sYXRpb24oc2hhcmVzLCBub2RlSW5kZXgpIHtcbiAgICAgIGlmIChzaGFyZXMubGVuZ3RoICE9PSBub2RlSW5kZXgubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2VjcmV0ID0gbmV3IEJOKDApO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNoYXJlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgdXBwZXIgPSBuZXcgQk4oMSk7XG4gICAgICAgIHZhciBsb3dlciA9IG5ldyBCTigxKTtcblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNoYXJlcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIGlmIChpICE9PSBqKSB7XG4gICAgICAgICAgICB1cHBlciA9IHVwcGVyLm11bChub2RlSW5kZXhbal0ubmVnKCkpO1xuICAgICAgICAgICAgdXBwZXIgPSB1cHBlci51bW9kKHRoaXMuZWMuY3VydmUubik7XG4gICAgICAgICAgICB2YXIgdGVtcCA9IG5vZGVJbmRleFtpXS5zdWIobm9kZUluZGV4W2pdKTtcbiAgICAgICAgICAgIHRlbXAgPSB0ZW1wLnVtb2QodGhpcy5lYy5jdXJ2ZS5uKTtcbiAgICAgICAgICAgIGxvd2VyID0gbG93ZXIubXVsKHRlbXApLnVtb2QodGhpcy5lYy5jdXJ2ZS5uKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGVsdGEgPSB1cHBlci5tdWwobG93ZXIuaW52bSh0aGlzLmVjLmN1cnZlLm4pKS51bW9kKHRoaXMuZWMuY3VydmUubik7XG4gICAgICAgIGRlbHRhID0gZGVsdGEubXVsKHNoYXJlc1tpXSkudW1vZCh0aGlzLmVjLmN1cnZlLm4pO1xuICAgICAgICBzZWNyZXQgPSBzZWNyZXQuYWRkKGRlbHRhKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlY3JldC51bW9kKHRoaXMuZWMuY3VydmUubik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdlbmVyYXRlQWRkcmVzc0Zyb21Qcml2S2V5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdlbmVyYXRlQWRkcmVzc0Zyb21Qcml2S2V5KHByaXZhdGVLZXkpIHtcbiAgICAgIHZhciBrZXkgPSB0aGlzLmVjLmtleUZyb21Qcml2YXRlKHByaXZhdGVLZXkudG9TdHJpbmcoJ2hleCcsIDY0KSwgJ2hleCcpO1xuICAgICAgdmFyIHB1YmxpY0tleSA9IGtleS5nZXRQdWJsaWMoKS5lbmNvZGUoJ2hleCcpLnNsaWNlKDIpO1xuICAgICAgdmFyIGV0aEFkZHJlc3NMb3dlciA9IFwiMHhcIi5jb25jYXQoa2VjY2FrMjU2KEJ1ZmZlci5mcm9tKHB1YmxpY0tleSwgJ2hleCcpKS5zbGljZSg2NCAtIDM4KSk7XG4gICAgICByZXR1cm4gdG9DaGVja3N1bUFkZHJlc3MoZXRoQWRkcmVzc0xvd2VyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2VuZXJhdGVBZGRyZXNzRnJvbVB1YktleVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZUFkZHJlc3NGcm9tUHViS2V5KHB1YmxpY0tleVgsIHB1YmxpY0tleVkpIHtcbiAgICAgIHZhciBrZXkgPSB0aGlzLmVjLmtleUZyb21QdWJsaWMoe1xuICAgICAgICB4OiBwdWJsaWNLZXlYLnRvU3RyaW5nKCdoZXgnLCA2NCksXG4gICAgICAgIHk6IHB1YmxpY0tleVkudG9TdHJpbmcoJ2hleCcsIDY0KVxuICAgICAgfSk7XG4gICAgICB2YXIgcHVibGljS2V5ID0ga2V5LmdldFB1YmxpYygpLmVuY29kZSgnaGV4Jykuc2xpY2UoMik7XG4gICAgICB2YXIgZXRoQWRkcmVzc0xvd2VyID0gXCIweFwiLmNvbmNhdChrZWNjYWsyNTYoQnVmZmVyLmZyb20ocHVibGljS2V5LCAnaGV4JykpLnNsaWNlKDY0IC0gMzgpKTtcbiAgICAgIHJldHVybiB0b0NoZWNrc3VtQWRkcmVzcyhldGhBZGRyZXNzTG93ZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBOb3RlOiB1c2UgdGhpcyBmdW5jdGlvbiBvbmx5IHdpdGggY3VzdG9tIGF1dGgsIGRvbid0IHVzZSB0byBsb29rdXAgb3BlbmxvZ2luIGFjY291bnRzLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UHVibGljQWRkcmVzc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX2dldFB1YmxpY0FkZHJlc3MgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlOChlbmRwb2ludHMsIHRvcnVzTm9kZVB1YnMsIF9yZWY3KSB7XG4gICAgICAgIHZhciB2ZXJpZmllcixcbiAgICAgICAgICAgIHZlcmlmaWVySWQsXG4gICAgICAgICAgICBpc0V4dGVuZGVkLFxuICAgICAgICAgICAgZmluYWxLZXlSZXN1bHQsXG4gICAgICAgICAgICBpc05ld0tleSxcbiAgICAgICAgICAgIF9yZWY4LFxuICAgICAgICAgICAga2V5UmVzdWx0LFxuICAgICAgICAgICAgZXJyb3JSZXN1bHQsXG4gICAgICAgICAgICBhc3NpZ25SZXN1bHQsXG4gICAgICAgICAgICBfbm9uY2UsXG4gICAgICAgICAgICBfZmluYWxLZXlSZXN1bHQka2V5cyQyLFxuICAgICAgICAgICAgWCxcbiAgICAgICAgICAgIFksXG4gICAgICAgICAgICB0eXBlT2ZVc2VyLFxuICAgICAgICAgICAgbm9uY2UsXG4gICAgICAgICAgICBwdWJOb25jZSxcbiAgICAgICAgICAgIG1vZGlmaWVkUHViS2V5LFxuICAgICAgICAgICAgdXBncmFkZWQsXG4gICAgICAgICAgICBfeWllbGQkdGhpcyRnZXRPclNldE4yLFxuICAgICAgICAgICAgYWRkcmVzcyxcbiAgICAgICAgICAgIF9hcmdzOCA9IGFyZ3VtZW50cztcblxuICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU4JChfY29udGV4dDgpIHtcbiAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDgucHJldiA9IF9jb250ZXh0OC5uZXh0KSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICB2ZXJpZmllciA9IF9yZWY3LnZlcmlmaWVyLCB2ZXJpZmllcklkID0gX3JlZjcudmVyaWZpZXJJZDtcbiAgICAgICAgICAgICAgICBpc0V4dGVuZGVkID0gX2FyZ3M4Lmxlbmd0aCA+IDMgJiYgX2FyZ3M4WzNdICE9PSB1bmRlZmluZWQgPyBfYXJnczhbM10gOiBmYWxzZTtcbiAgICAgICAgICAgICAgICBsb2cuZGVidWcoJz4gdG9ydXMuanMvZ2V0UHVibGljQWRkcmVzcycsIHtcbiAgICAgICAgICAgICAgICAgIGVuZHBvaW50czogZW5kcG9pbnRzLFxuICAgICAgICAgICAgICAgICAgdG9ydXNOb2RlUHViczogdG9ydXNOb2RlUHVicyxcbiAgICAgICAgICAgICAgICAgIHZlcmlmaWVyOiB2ZXJpZmllcixcbiAgICAgICAgICAgICAgICAgIHZlcmlmaWVySWQ6IHZlcmlmaWVySWQsXG4gICAgICAgICAgICAgICAgICBpc0V4dGVuZGVkOiBpc0V4dGVuZGVkXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaXNOZXdLZXkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDY7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleUxvb2t1cChlbmRwb2ludHMsIHZlcmlmaWVyLCB2ZXJpZmllcklkKTtcblxuICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQ4LnQwID0gX2NvbnRleHQ4LnNlbnQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoX2NvbnRleHQ4LnQwKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfY29udGV4dDgudDAgPSB7fTtcblxuICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgX3JlZjggPSBfY29udGV4dDgudDA7XG4gICAgICAgICAgICAgICAga2V5UmVzdWx0ID0gX3JlZjgua2V5UmVzdWx0O1xuICAgICAgICAgICAgICAgIGVycm9yUmVzdWx0ID0gX3JlZjguZXJyb3JSZXN1bHQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoIShlcnJvclJlc3VsdCAmJiBKU09OLnN0cmluZ2lmeShlcnJvclJlc3VsdCkuaW5jbHVkZXMoJ1ZlcmlmaWVyICsgVmVyaWZpZXJJRCBoYXMgbm90IHlldCBiZWVuIGFzc2lnbmVkJykpKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDI1O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSAxNTtcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5QXNzaWduKGVuZHBvaW50cywgdG9ydXNOb2RlUHVicywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHZlcmlmaWVyLCB2ZXJpZmllcklkKTtcblxuICAgICAgICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gMTc7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdhaXRLZXlMb29rdXAoZW5kcG9pbnRzLCB2ZXJpZmllciwgdmVyaWZpZXJJZCwgMTAwMCk7XG5cbiAgICAgICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICAgICAgICBfY29udGV4dDgudDEgPSBfY29udGV4dDguc2VudDtcblxuICAgICAgICAgICAgICAgIGlmIChfY29udGV4dDgudDEpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gMjA7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfY29udGV4dDgudDEgPSB7fTtcblxuICAgICAgICAgICAgICBjYXNlIDIwOlxuICAgICAgICAgICAgICAgIGFzc2lnblJlc3VsdCA9IF9jb250ZXh0OC50MTtcbiAgICAgICAgICAgICAgICBmaW5hbEtleVJlc3VsdCA9IGFzc2lnblJlc3VsdC5rZXlSZXN1bHQ7XG4gICAgICAgICAgICAgICAgaXNOZXdLZXkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gMzA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAyNTpcbiAgICAgICAgICAgICAgICBpZiAoIWtleVJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSAyOTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZpbmFsS2V5UmVzdWx0ID0ga2V5UmVzdWx0O1xuICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gMzA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAyOTpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub2RlIHJlc3VsdHMgZG8gbm90IG1hdGNoIGF0IGZpcnN0IGxvb2t1cCBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoa2V5UmVzdWx0IHx8IHt9KSwgXCIsIFwiKS5jb25jYXQoSlNPTi5zdHJpbmdpZnkoZXJyb3JSZXN1bHQgfHwge30pKSk7XG5cbiAgICAgICAgICAgICAgY2FzZSAzMDpcbiAgICAgICAgICAgICAgICBsb2cuZGVidWcoJz4gdG9ydXMuanMvZ2V0UHVibGljQWRkcmVzcycsIHtcbiAgICAgICAgICAgICAgICAgIGZpbmFsS2V5UmVzdWx0OiBmaW5hbEtleVJlc3VsdCxcbiAgICAgICAgICAgICAgICAgIGlzTmV3S2V5OiBpc05ld0tleVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFmaW5hbEtleVJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSA3MjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF9maW5hbEtleVJlc3VsdCRrZXlzJDIgPSBmaW5hbEtleVJlc3VsdC5rZXlzWzBdLCBYID0gX2ZpbmFsS2V5UmVzdWx0JGtleXMkMi5wdWJfa2V5X1gsIFkgPSBfZmluYWxLZXlSZXN1bHQka2V5cyQyLnB1Yl9rZXlfWTtcblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5lbmFibGVPbmVLZXkpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gNjA7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfY29udGV4dDgucHJldiA9IDM0O1xuICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gMzg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T3JTZXROb25jZShYLCBZLCB1bmRlZmluZWQsICFpc05ld0tleSk7XG5cbiAgICAgICAgICAgICAgY2FzZSAzODpcbiAgICAgICAgICAgICAgICBfeWllbGQkdGhpcyRnZXRPclNldE4yID0gX2NvbnRleHQ4LnNlbnQ7XG4gICAgICAgICAgICAgICAgdHlwZU9mVXNlciA9IF95aWVsZCR0aGlzJGdldE9yU2V0TjIudHlwZU9mVXNlcjtcbiAgICAgICAgICAgICAgICBub25jZSA9IF95aWVsZCR0aGlzJGdldE9yU2V0TjIubm9uY2U7XG4gICAgICAgICAgICAgICAgcHViTm9uY2UgPSBfeWllbGQkdGhpcyRnZXRPclNldE4yLnB1Yk5vbmNlO1xuICAgICAgICAgICAgICAgIHVwZ3JhZGVkID0gX3lpZWxkJHRoaXMkZ2V0T3JTZXROMi51cGdyYWRlZDtcbiAgICAgICAgICAgICAgICBub25jZSA9IG5ldyBCTihub25jZSB8fCAnMCcsIDE2KTtcbiAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDQ5O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgNDY6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQ4LnByZXYgPSA0NjtcbiAgICAgICAgICAgICAgICBfY29udGV4dDgudDIgPSBfY29udGV4dDhbXCJjYXRjaFwiXSgzNCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEdldE9yU2V0Tm9uY2VFcnJvcigpO1xuXG4gICAgICAgICAgICAgIGNhc2UgNDk6XG4gICAgICAgICAgICAgICAgaWYgKCEodHlwZU9mVXNlciA9PT0gJ3YxJykpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gNTM7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBtb2RpZmllZFB1YktleSA9IHRoaXMuZWMua2V5RnJvbVB1YmxpYyh7XG4gICAgICAgICAgICAgICAgICB4OiBYLnRvU3RyaW5nKDE2KSxcbiAgICAgICAgICAgICAgICAgIHk6IFkudG9TdHJpbmcoMTYpXG4gICAgICAgICAgICAgICAgfSkuZ2V0UHVibGljKCkuYWRkKHRoaXMuZWMua2V5RnJvbVByaXZhdGUobm9uY2UudG9TdHJpbmcoMTYpKS5nZXRQdWJsaWMoKSk7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSA1ODtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDUzOlxuICAgICAgICAgICAgICAgIGlmICghKHR5cGVPZlVzZXIgPT09ICd2MicpKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDU3O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHVwZ3JhZGVkKSB7XG4gICAgICAgICAgICAgICAgICAvLyBPbmVLZXkgaXMgdXBncmFkZWQgdG8gMi9uLCByZXR1cm5lZCBhZGRyZXNzIGlzIGFkZHJlc3Mgb2YgVG9ydXMga2V5IChwb3N0Ym94IGtleSksIG5vdCB0S2V5XG4gICAgICAgICAgICAgICAgICBtb2RpZmllZFB1YktleSA9IHRoaXMuZWMua2V5RnJvbVB1YmxpYyh7XG4gICAgICAgICAgICAgICAgICAgIHg6IFgudG9TdHJpbmcoMTYpLFxuICAgICAgICAgICAgICAgICAgICB5OiBZLnRvU3RyaW5nKDE2KVxuICAgICAgICAgICAgICAgICAgfSkuZ2V0UHVibGljKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIG1vZGlmaWVkUHViS2V5ID0gdGhpcy5lYy5rZXlGcm9tUHVibGljKHtcbiAgICAgICAgICAgICAgICAgICAgeDogWC50b1N0cmluZygxNiksXG4gICAgICAgICAgICAgICAgICAgIHk6IFkudG9TdHJpbmcoMTYpXG4gICAgICAgICAgICAgICAgICB9KS5nZXRQdWJsaWMoKS5hZGQodGhpcy5lYy5rZXlGcm9tUHVibGljKHtcbiAgICAgICAgICAgICAgICAgICAgeDogcHViTm9uY2UueCxcbiAgICAgICAgICAgICAgICAgICAgeTogcHViTm9uY2UueVxuICAgICAgICAgICAgICAgICAgfSkuZ2V0UHVibGljKCkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gNTg7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSA1NzpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2dldE9yU2V0Tm9uY2Ugc2hvdWxkIGFsd2F5cyByZXR1cm4gdHlwZU9mVXNlci4nKTtcblxuICAgICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gNjU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSA2MDpcbiAgICAgICAgICAgICAgICB0eXBlT2ZVc2VyID0gJ3YxJztcbiAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDYzO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE1ldGFkYXRhKHtcbiAgICAgICAgICAgICAgICAgIHB1Yl9rZXlfWDogWCxcbiAgICAgICAgICAgICAgICAgIHB1Yl9rZXlfWTogWVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjM6XG4gICAgICAgICAgICAgICAgbm9uY2UgPSBfY29udGV4dDguc2VudDtcbiAgICAgICAgICAgICAgICBtb2RpZmllZFB1YktleSA9IHRoaXMuZWMua2V5RnJvbVB1YmxpYyh7XG4gICAgICAgICAgICAgICAgICB4OiBYLnRvU3RyaW5nKDE2KSxcbiAgICAgICAgICAgICAgICAgIHk6IFkudG9TdHJpbmcoMTYpXG4gICAgICAgICAgICAgICAgfSkuZ2V0UHVibGljKCkuYWRkKHRoaXMuZWMua2V5RnJvbVByaXZhdGUobm9uY2UudG9TdHJpbmcoMTYpKS5nZXRQdWJsaWMoKSk7XG5cbiAgICAgICAgICAgICAgY2FzZSA2NTpcbiAgICAgICAgICAgICAgICBYID0gbW9kaWZpZWRQdWJLZXkuZ2V0WCgpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgICAgICAgICBZID0gbW9kaWZpZWRQdWJLZXkuZ2V0WSgpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgICAgICAgICBhZGRyZXNzID0gdGhpcy5nZW5lcmF0ZUFkZHJlc3NGcm9tUHViS2V5KG1vZGlmaWVkUHViS2V5LmdldFgoKSwgbW9kaWZpZWRQdWJLZXkuZ2V0WSgpKTtcbiAgICAgICAgICAgICAgICBsb2cuZGVidWcoJz4gdG9ydXMuanMvZ2V0UHVibGljQWRkcmVzcycsIHtcbiAgICAgICAgICAgICAgICAgIFg6IFgsXG4gICAgICAgICAgICAgICAgICBZOiBZLFxuICAgICAgICAgICAgICAgICAgYWRkcmVzczogYWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgIHR5cGVPZlVzZXI6IHR5cGVPZlVzZXIsXG4gICAgICAgICAgICAgICAgICBub25jZTogKF9ub25jZSA9IG5vbmNlKSA9PT0gbnVsbCB8fCBfbm9uY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ub25jZS50b1N0cmluZygxNiksXG4gICAgICAgICAgICAgICAgICBwdWJOb25jZTogcHViTm9uY2VcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChpc0V4dGVuZGVkKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDcxO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OC5hYnJ1cHQoXCJyZXR1cm5cIiwgYWRkcmVzcyk7XG5cbiAgICAgICAgICAgICAgY2FzZSA3MTpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LmFicnVwdChcInJldHVyblwiLCB7XG4gICAgICAgICAgICAgICAgICB0eXBlT2ZVc2VyOiB0eXBlT2ZVc2VyLFxuICAgICAgICAgICAgICAgICAgYWRkcmVzczogYWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgIFg6IFgsXG4gICAgICAgICAgICAgICAgICBZOiBZLFxuICAgICAgICAgICAgICAgICAgbWV0YWRhdGFOb25jZTogbm9uY2UsXG4gICAgICAgICAgICAgICAgICBwdWJOb25jZTogcHViTm9uY2VcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBjYXNlIDcyOlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vZGUgcmVzdWx0cyBkbyBub3QgbWF0Y2ggYXQgZmluYWwgbG9va3VwIFwiLmNvbmNhdChKU09OLnN0cmluZ2lmeShrZXlSZXN1bHQgfHwge30pLCBcIiwgXCIpLmNvbmNhdChKU09OLnN0cmluZ2lmeShlcnJvclJlc3VsdCB8fCB7fSkpKTtcblxuICAgICAgICAgICAgICBjYXNlIDczOlxuICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OC5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlOCwgdGhpcywgW1szNCwgNDZdXSk7XG4gICAgICB9KSk7XG5cbiAgICAgIGZ1bmN0aW9uIGdldFB1YmxpY0FkZHJlc3MoX3gxNywgX3gxOCwgX3gxOSkge1xuICAgICAgICByZXR1cm4gX2dldFB1YmxpY0FkZHJlc3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldFB1YmxpY0FkZHJlc3M7XG4gICAgfSgpXG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgZnVuY3Rpb25zIGZvciBPbmVLZXkgKE9wZW5Mb2dpbiB2MiksIG9ubHkgY2FsbCB0aGVzZSBmdW5jdGlvbnMgaWYgeW91IGtub3cgd2hhdCB5b3UncmUgZG9pbmdcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldE9yU2V0Tm9uY2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9nZXRPclNldE5vbmNlID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTkoWCwgWSwgcHJpdktleSkge1xuICAgICAgICB2YXIgZ2V0T25seSxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBtc2csXG4gICAgICAgICAgICBfYXJnczkgPSBhcmd1bWVudHM7XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTkkKF9jb250ZXh0OSkge1xuICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0OS5wcmV2ID0gX2NvbnRleHQ5Lm5leHQpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGdldE9ubHkgPSBfYXJnczkubGVuZ3RoID4gMyAmJiBfYXJnczlbM10gIT09IHVuZGVmaW5lZCA/IF9hcmdzOVszXSA6IGZhbHNlO1xuICAgICAgICAgICAgICAgIG1zZyA9IGdldE9ubHkgPyAnZ2V0Tm9uY2UnIDogJ2dldE9yU2V0Tm9uY2UnO1xuXG4gICAgICAgICAgICAgICAgaWYgKHByaXZLZXkpIHtcbiAgICAgICAgICAgICAgICAgIGRhdGEgPSB0aGlzLmdlbmVyYXRlTWV0YWRhdGFQYXJhbXMobXNnLCBwcml2S2V5KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgcHViX2tleV9YOiBYLFxuICAgICAgICAgICAgICAgICAgICBwdWJfa2V5X1k6IFksXG4gICAgICAgICAgICAgICAgICAgIHNldF9kYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgZGF0YTogbXNnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OS5hYnJ1cHQoXCJyZXR1cm5cIiwgcG9zdChcIlwiLmNvbmNhdCh0aGlzLm1ldGFkYXRhSG9zdCwgXCIvZ2V0X29yX3NldF9ub25jZVwiKSwgZGF0YSwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICAgICAgICB1c2VBUElLZXk6IHRydWVcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OS5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlOSwgdGhpcyk7XG4gICAgICB9KSk7XG5cbiAgICAgIGZ1bmN0aW9uIGdldE9yU2V0Tm9uY2UoX3gyMCwgX3gyMSwgX3gyMikge1xuICAgICAgICByZXR1cm4gX2dldE9yU2V0Tm9uY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldE9yU2V0Tm9uY2U7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Tm9uY2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9nZXROb25jZSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMChYLCBZLCBwcml2S2V5KSB7XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTEwJChfY29udGV4dDEwKSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMC5wcmV2ID0gX2NvbnRleHQxMC5uZXh0KSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5hYnJ1cHQoXCJyZXR1cm5cIiwgdGhpcy5nZXRPclNldE5vbmNlKFgsIFksIHByaXZLZXksIHRydWUpKTtcblxuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlMTAsIHRoaXMpO1xuICAgICAgfSkpO1xuXG4gICAgICBmdW5jdGlvbiBnZXROb25jZShfeDIzLCBfeDI0LCBfeDI1KSB7XG4gICAgICAgIHJldHVybiBfZ2V0Tm9uY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldE5vbmNlO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiBcImdldFBvc3Rib3hLZXlGcm9tMU91dE9mMVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQb3N0Ym94S2V5RnJvbTFPdXRPZjEocHJpdktleSwgbm9uY2UpIHtcbiAgICAgIHZhciBwcml2S2V5Qk4gPSBuZXcgQk4ocHJpdktleSwgMTYpO1xuICAgICAgdmFyIG5vbmNlQk4gPSBuZXcgQk4obm9uY2UsIDE2KTtcbiAgICAgIHJldHVybiBwcml2S2V5Qk4uc3ViKG5vbmNlQk4pLnVtb2QodGhpcy5lYy5jdXJ2ZS5uKS50b1N0cmluZygnaGV4Jyk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiZW5hYmxlTG9nZ2luZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbmFibGVMb2dnaW5nKCkge1xuICAgICAgdmFyIHYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRydWU7XG4gICAgICBpZiAodikgbG9nLmVuYWJsZUFsbCgpO2Vsc2UgbG9nLmRpc2FibGVBbGwoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0QVBJS2V5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEFQSUtleSQxKGFwaUtleSkge1xuICAgICAgc2V0QVBJS2V5KGFwaUtleSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldEVtYmVkSG9zdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRFbWJlZEhvc3QkMShlbWJlZEhvc3QpIHtcbiAgICAgIHNldEVtYmVkSG9zdChlbWJlZEhvc3QpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc0dldE9yU2V0Tm9uY2VFcnJvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc0dldE9yU2V0Tm9uY2VFcnJvcihlcnIpIHtcbiAgICAgIHJldHVybiBlcnIgaW5zdGFuY2VvZiBHZXRPclNldE5vbmNlRXJyb3I7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRvcnVzO1xufSgpO1xuXG5leHBvcnQgeyBUb3J1cyBhcyBkZWZhdWx0LCBrZXlBc3NpZ24sIGtleUxvb2t1cCwgd2FpdEtleUxvb2t1cCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9ydXNVdGlscy5lc20uanMubWFwXG4iLCJleHBvcnQgZnVuY3Rpb24gaXNTdHJlYW0oc3RyZWFtKSB7XG5cdHJldHVybiBzdHJlYW0gIT09IG51bGxcblx0XHQmJiB0eXBlb2Ygc3RyZWFtID09PSAnb2JqZWN0J1xuXHRcdCYmIHR5cGVvZiBzdHJlYW0ucGlwZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzV3JpdGFibGVTdHJlYW0oc3RyZWFtKSB7XG5cdHJldHVybiBpc1N0cmVhbShzdHJlYW0pXG5cdFx0JiYgc3RyZWFtLndyaXRhYmxlICE9PSBmYWxzZVxuXHRcdCYmIHR5cGVvZiBzdHJlYW0uX3dyaXRlID09PSAnZnVuY3Rpb24nXG5cdFx0JiYgdHlwZW9mIHN0cmVhbS5fd3JpdGFibGVTdGF0ZSA9PT0gJ29iamVjdCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1JlYWRhYmxlU3RyZWFtKHN0cmVhbSkge1xuXHRyZXR1cm4gaXNTdHJlYW0oc3RyZWFtKVxuXHRcdCYmIHN0cmVhbS5yZWFkYWJsZSAhPT0gZmFsc2Vcblx0XHQmJiB0eXBlb2Ygc3RyZWFtLl9yZWFkID09PSAnZnVuY3Rpb24nXG5cdFx0JiYgdHlwZW9mIHN0cmVhbS5fcmVhZGFibGVTdGF0ZSA9PT0gJ29iamVjdCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0R1cGxleFN0cmVhbShzdHJlYW0pIHtcblx0cmV0dXJuIGlzV3JpdGFibGVTdHJlYW0oc3RyZWFtKVxuXHRcdCYmIGlzUmVhZGFibGVTdHJlYW0oc3RyZWFtKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVHJhbnNmb3JtU3RyZWFtKHN0cmVhbSkge1xuXHRyZXR1cm4gaXNEdXBsZXhTdHJlYW0oc3RyZWFtKVxuXHRcdCYmIHR5cGVvZiBzdHJlYW0uX3RyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJztcbn1cbiIsImltcG9ydCBOb2RlRGV0YWlsTWFuYWdlciBmcm9tICdAdG9ydXNsYWJzL2ZldGNoLW5vZGUtZGV0YWlscyc7XG5pbXBvcnQgeyBnZXQsIHNldEFQSUtleSB9IGZyb20gJ0B0b3J1c2xhYnMvaHR0cC1oZWxwZXJzJztcbmltcG9ydCB7IFNhZmVFdmVudEVtaXR0ZXIsIE9iamVjdE11bHRpcGxleCwgY3JlYXRlU3RyZWFtTWlkZGxld2FyZSwgSlJQQ0VuZ2luZSwgY3JlYXRlSWRSZW1hcE1pZGRsZXdhcmUsIEJhc2VQb3N0TWVzc2FnZVN0cmVhbSwgc2V0dXBNdWx0aXBsZXggfSBmcm9tICdAdG9ydXNsYWJzL29wZW5sb2dpbi1qcnBjJztcbmltcG9ydCBUb3J1c0pzIGZyb20gJ0B0b3J1c2xhYnMvdG9ydXMuanMnO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdsb2Rhc2gubWVyZ2UnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZVN0b3JlLCBzdG9yZUFzU3RyZWFtIH0gZnJvbSAnQG1ldGFtYXNrL29icy1zdG9yZSc7XG5pbXBvcnQgeyBldGhFcnJvcnMsIEV0aGVyZXVtUnBjRXJyb3IgfSBmcm9tICdldGgtcnBjLWVycm9ycyc7XG5pbXBvcnQgZGVxdWFsIGZyb20gJ2Zhc3QtZGVlcC1lcXVhbCc7XG5pbXBvcnQgeyBpc0R1cGxleFN0cmVhbSB9IGZyb20gJ2lzLXN0cmVhbSc7XG5pbXBvcnQgcHVtcCBmcm9tICdwdW1wJztcbmltcG9ydCBsb2dsZXZlbCBmcm9tICdsb2dsZXZlbCc7XG5pbXBvcnQgY3JlYXRlSGFzaCBmcm9tICdjcmVhdGUtaGFzaCc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnO1xuXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG5cclxuZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XG5cbmNvbnN0IExPR0lOX1BST1ZJREVSID0ge1xuICAgIEdPT0dMRTogXCJnb29nbGVcIixcbiAgICBGQUNFQk9PSzogXCJmYWNlYm9va1wiLFxuICAgIFRXSVRDSDogXCJ0d2l0Y2hcIixcbiAgICBSRURESVQ6IFwicmVkZGl0XCIsXG4gICAgRElTQ09SRDogXCJkaXNjb3JkXCIsXG59O1xuY29uc3QgV0FMTEVUX09QRU5MT0dJTl9WRVJJRklFUl9NQVAgPSB7XG4gICAgW0xPR0lOX1BST1ZJREVSLkdPT0dMRV06IFwidGtleS1nb29nbGVcIixcbiAgICBbTE9HSU5fUFJPVklERVIuRkFDRUJPT0tdOiBcInRrZXktZmFjZWJvb2tcIixcbiAgICBbTE9HSU5fUFJPVklERVIuVFdJVENIXTogXCJ0a2V5LXR3aXRjaFwiLFxuICAgIFtMT0dJTl9QUk9WSURFUi5SRURESVRdOiBcInRrZXktcmVkZGl0XCIsXG4gICAgW0xPR0lOX1BST1ZJREVSLkRJU0NPUkRdOiBcInRrZXktZGlzY29yZFwiLFxufTtcbmNvbnN0IFBBWU1FTlRfUFJPVklERVIgPSB7XG4gICAgTU9PTlBBWTogXCJtb29ucGF5XCIsXG4gICAgV1lSRTogXCJ3eXJlXCIsXG4gICAgUkFNUE5FVFdPUks6IFwicmFtcG5ldHdvcmtcIixcbiAgICBYQU5QT09MOiBcInhhbnBvb2xcIixcbiAgICBNRVJDVVJZTzogXCJtZXJjdXJ5b1wiLFxuICAgIFRSQU5TQUs6IFwidHJhbnNha1wiLFxufTtcbmNvbnN0IFRPUlVTX0JVSUxEX0VOViA9IHtcbiAgICBQUk9EVUNUSU9OOiBcInByb2R1Y3Rpb25cIixcbiAgICBERVZFTE9QTUVOVDogXCJkZXZlbG9wbWVudFwiLFxuICAgIEJJTkFOQ0U6IFwiYmluYW5jZVwiLFxuICAgIFRFU1RJTkc6IFwidGVzdGluZ1wiLFxuICAgIExSQzogXCJscmNcIixcbiAgICBCRVRBOiBcImJldGFcIixcbn07XG5jb25zdCBCVVRUT05fUE9TSVRJT04gPSB7XG4gICAgQk9UVE9NX0xFRlQ6IFwiYm90dG9tLWxlZnRcIixcbiAgICBUT1BfTEVGVDogXCJ0b3AtbGVmdFwiLFxuICAgIEJPVFRPTV9SSUdIVDogXCJib3R0b20tcmlnaHRcIixcbiAgICBUT1BfUklHSFQ6IFwidG9wLXJpZ2h0XCIsXG59O1xuXG5jb25zdCBwYXltZW50UHJvdmlkZXJzJDEgPSB7XG4gICAgW1BBWU1FTlRfUFJPVklERVIuUkFNUE5FVFdPUktdOiB7XG4gICAgICAgIGxpbmUxOiBcIkRlYml0IENhcmQvIEFwcGxlIFBheS8gQmFuayB0cmFuc2ZlclwiLFxuICAgICAgICBsaW5lMjogXCIwLjQ5JSAtIDIuOSVcIixcbiAgICAgICAgbGluZTM6IFwiNSwwMDDigqwvcHVyY2hhc2UsIDIwLDAwMOKCrC9tb1wiLFxuICAgICAgICBzdXBwb3J0UGFnZTogXCJodHRwczovL2luc3RhbnQucmFtcC5uZXR3b3JrL1wiLFxuICAgICAgICBtaW5PcmRlclZhbHVlOiA1MCxcbiAgICAgICAgbWF4T3JkZXJWYWx1ZTogMjAwMDAsXG4gICAgICAgIHZhbGlkQ3VycmVuY2llczogW1wiR0JQXCIsIFwiRVVSXCIsIFwiVVNEXCJdLFxuICAgICAgICB2YWxpZENyeXB0b0N1cnJlbmNpZXM6IFtcIkVUSFwiLCBcIkRBSVwiLCBcIlVTRENcIiwgXCJCU0NfQk5CXCJdLFxuICAgICAgICBpbmNsdWRlRmVlczogdHJ1ZSxcbiAgICAgICAgZW5mb3JjZU1heDogZmFsc2UsXG4gICAgfSxcbiAgICBbUEFZTUVOVF9QUk9WSURFUi5NT09OUEFZXToge1xuICAgICAgICBsaW5lMTogXCJDcmVkaXQgLyBEZWJpdCBDYXJkIC8gQXBwbGUgUGF5XCIsXG4gICAgICAgIGxpbmUyOiBcIjQuNSUgb3IgNSBVU0RcIixcbiAgICAgICAgbGluZTM6IFwiMiwwMDDigqwvZGF5LCAxMCwwMDDigqwvbW9cIixcbiAgICAgICAgc3VwcG9ydFBhZ2U6IFwiaHR0cHM6Ly9oZWxwLm1vb25wYXkuaW8vZW4vXCIsXG4gICAgICAgIG1pbk9yZGVyVmFsdWU6IDI0Ljk5LFxuICAgICAgICBtYXhPcmRlclZhbHVlOiA1MDAwMCxcbiAgICAgICAgdmFsaWRDdXJyZW5jaWVzOiBbXCJVU0RcIiwgXCJFVVJcIiwgXCJHQlBcIiwgXCJBVURcIiwgXCJDQURcIiwgXCJTR0RcIiwgXCJSVUJcIl0sXG4gICAgICAgIHZhbGlkQ3J5cHRvQ3VycmVuY2llczogW1wiRVRIXCIsIFwiREFJXCIsIFwiVFVTRFwiLCBcIlVTRENcIiwgXCJVU0RUXCIsIFwiQk5CX0JTQ1wiLCBcIkJVU0RfQlNDXCJdLFxuICAgICAgICBpbmNsdWRlRmVlczogdHJ1ZSxcbiAgICAgICAgZW5mb3JjZU1heDogZmFsc2UsXG4gICAgfSxcbiAgICBbUEFZTUVOVF9QUk9WSURFUi5XWVJFXToge1xuICAgICAgICBsaW5lMTogXCJBcHBsZSBQYXkvIERlYml0LyBDcmVkaXQgQ2FyZFwiLFxuICAgICAgICBsaW5lMjogXCI0LjklICsgMzDCoiBvciA1IFVTRFwiLFxuICAgICAgICBsaW5lMzogXCIkMjUwL2RheVwiLFxuICAgICAgICBzdXBwb3J0UGFnZTogXCJodHRwczovL3N1cHBvcnQuc2VuZHd5cmUuY29tL2VuL1wiLFxuICAgICAgICBtaW5PcmRlclZhbHVlOiA1LFxuICAgICAgICBtYXhPcmRlclZhbHVlOiA1MDAsXG4gICAgICAgIHZhbGlkQ3VycmVuY2llczogW1wiVVNEXCIsIFwiQVVEXCIsIFwiQ0FEXCIsIFwiR0JQXCIsIFwiRVVSXCJdLFxuICAgICAgICB2YWxpZENyeXB0b0N1cnJlbmNpZXM6IFtcIkVUSFwiLCBcIkRBSVwiLCBcIlVTRENcIiwgXCJVU0RUXCJdLFxuICAgICAgICBpbmNsdWRlRmVlczogZmFsc2UsXG4gICAgICAgIGVuZm9yY2VNYXg6IGZhbHNlLFxuICAgIH0sXG4gICAgW1BBWU1FTlRfUFJPVklERVIuWEFOUE9PTF06IHtcbiAgICAgICAgbGluZTE6IFwiUGF5Tm93LyBJbnN0YVBheS8gRlBTLyBHb0pla1BheS8gVVBJLyBQcm9tcHRQYXkvIFZpZXRlbFBheS8gRHVpdE5vd1wiLFxuICAgICAgICBsaW5lMjogXCIyLjUlIGJ1eWluZywgMyUgc2VsbGluZ1wiLFxuICAgICAgICBsaW5lMzogXCIkMiw1MDAgLyBkYXlcIixcbiAgICAgICAgc3VwcG9ydFBhZ2U6IFwibWFpbHRvOnN1cHBvcnRAeGFucG9vbC5jb21cIixcbiAgICAgICAgbWluT3JkZXJWYWx1ZTogMTAwLFxuICAgICAgICBtYXhPcmRlclZhbHVlOiAyNTAwLFxuICAgICAgICB2YWxpZEN1cnJlbmNpZXM6IFtcIlNHRFwiLCBcIkhLRFwiLCBcIk1ZUlwiLCBcIlBIUFwiLCBcIklOUlwiLCBcIlZORFwiLCBcIlRIQlwiLCBcIklEUlwiXSxcbiAgICAgICAgdmFsaWRDcnlwdG9DdXJyZW5jaWVzOiBbXCJFVEhcIiwgXCJVU0RUXCJdLFxuICAgICAgICBpbmNsdWRlRmVlczogdHJ1ZSxcbiAgICAgICAgc2VsbDogdHJ1ZSxcbiAgICAgICAgZW5mb3JjZU1heDogZmFsc2UsXG4gICAgfSxcbiAgICBbUEFZTUVOVF9QUk9WSURFUi5NRVJDVVJZT106IHtcbiAgICAgICAgbGluZTE6IFwiQ3JlZGl0LyBEZWJpdCBDYXJkLyBBcHBsZSBQYXlcIixcbiAgICAgICAgbGluZTI6IFwiMy45NSUgb3IgNCBVU0RcIixcbiAgICAgICAgbGluZTM6IFwiMTAsMDAw4oKsL2RheSwgMjUsMDAw4oKsL21vXCIsXG4gICAgICAgIHN1cHBvcnRQYWdlOiBcIm1haWx0bzpzdXBwb3J0QG1lcmN1cnlvLmlvXCIsXG4gICAgICAgIG1pbk9yZGVyVmFsdWU6IDMwLFxuICAgICAgICBtYXhPcmRlclZhbHVlOiA1MDAwLFxuICAgICAgICB2YWxpZEN1cnJlbmNpZXM6IFtcIlVTRFwiLCBcIkVVUlwiLCBcIlJVQlwiLCBcIlRSWVwiLCBcIkdCUFwiLCBcIlVBSFwiXSxcbiAgICAgICAgdmFsaWRDcnlwdG9DdXJyZW5jaWVzOiBbXCJFVEhcIiwgXCJEQUlcIiwgXCJCQVRcIiwgXCJVU0RUXCIsIFwiT0tCXCJdLFxuICAgICAgICBpbmNsdWRlRmVlczogdHJ1ZSxcbiAgICAgICAgZW5mb3JjZU1heDogZmFsc2UsXG4gICAgfSxcbiAgICBbUEFZTUVOVF9QUk9WSURFUi5UUkFOU0FLXToge1xuICAgICAgICBsaW5lMTogXCJDcmVkaXQvIERlYml0IENhcmQvIDxici8+QmFuayBUcmFuc2ZlciAoc2VwYS9nYnApXCIsXG4gICAgICAgIGxpbmUyOiBcIjAuOTklIC0gNS41JSBvciA1IFVTRFwiLFxuICAgICAgICBsaW5lMzogXCI1MDDigqwvZGF5XCIsXG4gICAgICAgIHN1cHBvcnRQYWdlOiBcImh0dHBzOi8vc3VwcG9ydC50cmFuc2FrLmNvbS9oYy9lbi1VU1wiLFxuICAgICAgICBtaW5PcmRlclZhbHVlOiAyMCxcbiAgICAgICAgbWF4T3JkZXJWYWx1ZTogNTAwLFxuICAgICAgICB2YWxpZEN1cnJlbmNpZXM6IFtcIlVTRFwiLCBcIkVVUlwiLCBcIkdCUFwiLCBcIkFVRFwiLCBcIkNBRFwiLCBcIlNHRFwiXSxcbiAgICAgICAgdmFsaWRDcnlwdG9DdXJyZW5jaWVzOiBbXCJFVEhcIiwgXCJEQUlcIiwgXCJVU0RDXCIsIFwiVVNEVFwiXSxcbiAgICAgICAgaW5jbHVkZUZlZXM6IHRydWUsXG4gICAgICAgIGVuZm9yY2VNYXg6IGZhbHNlLFxuICAgIH0sXG59O1xuY29uc3QgdHJhbnNsYXRpb25zID0ge1xuICAgIGVuOiB7XG4gICAgICAgIGVtYmVkOiB7XG4gICAgICAgICAgICBjb250aW51ZTogXCJDb250aW51ZVwiLFxuICAgICAgICAgICAgYWN0aW9uUmVxdWlyZWQ6IFwiQXV0aG9yaXphdGlvbiByZXF1aXJlZFwiLFxuICAgICAgICAgICAgcGVuZGluZ0FjdGlvbjogXCJDbGljayBjb250aW51ZSB0byBwcm9jZWVkIHdpdGggeW91ciByZXF1ZXN0IGluIGEgcG9wdXBcIixcbiAgICAgICAgICAgIGNvb2tpZXNSZXF1aXJlZDogXCJDb29raWVzIFJlcXVpcmVkXCIsXG4gICAgICAgICAgICBlbmFibGVDb29raWVzOiBcIlBsZWFzZSBlbmFibGUgY29va2llcyBpbiB5b3VyIGJyb3dzZXIgcHJlZmVyZW5jZXMgdG8gYWNjZXNzIFRvcnVzXCIsXG4gICAgICAgICAgICBjbGlja0hlcmU6IFwiTW9yZSBJbmZvXCIsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBkZToge1xuICAgICAgICBlbWJlZDoge1xuICAgICAgICAgICAgY29udGludWU6IFwiRm9ydHNldHplblwiLFxuICAgICAgICAgICAgYWN0aW9uUmVxdWlyZWQ6IFwiQXV0b3Jpc2llcnVuZyBlcmZvcmRlcmxpY2hcIixcbiAgICAgICAgICAgIHBlbmRpbmdBY3Rpb246IFwiS2xpY2tlbiBTaWUgaW4gZWluZW0gUG9wdXAgYXVmIFdlaXRlciwgdW0gbWl0IElocmVyIEFuZnJhZ2UgZm9ydHp1ZmFocmVuXCIsXG4gICAgICAgICAgICBjb29raWVzUmVxdWlyZWQ6IFwiQ29va2llcyBiZW7DtnRpZ3RcIixcbiAgICAgICAgICAgIGVuYWJsZUNvb2tpZXM6IFwiQml0dGUgYWt0aXZpZXJlbiBTaWUgQ29va2llcyBpbiBJaHJlbiBCcm93c2VyZWluc3RlbGx1bmdlbiwgdW0gYXVmIFRvcnVzIHp1enVncmVpZmVuXCIsXG4gICAgICAgICAgICBjbGlja0hlcmU6IFwiTWVociBJbmZvXCIsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBqYToge1xuICAgICAgICBlbWJlZDoge1xuICAgICAgICAgICAgY29udGludWU6IFwi57aZ57aa44GZ44KLXCIsXG4gICAgICAgICAgICBhY3Rpb25SZXF1aXJlZDogXCLoqo3oqLzjgYzlv4XopoHjgafjgZlcIixcbiAgICAgICAgICAgIHBlbmRpbmdBY3Rpb246IFwi57aa6KGM44KS44Kv44Oq44OD44Kv44GX44Gm44CB44Od44OD44OX44Ki44OD44OX44Gn44Oq44Kv44Ko44K544OI44KS57aa6KGM44GX44G+44GZXCIsXG4gICAgICAgICAgICBjb29raWVzUmVxdWlyZWQ6IFwi5b+F6KaB44Gq44Kv44OD44Kt44O8XCIsXG4gICAgICAgICAgICBlbmFibGVDb29raWVzOiBcIlRvcnVz44Gr44Ki44Kv44K744K544GZ44KL44Gr44Gv44CB44OW44Op44Km44K244Gu6Kit5a6a44GnQ29va2ll44KS5pyJ5Yq544Gr44GX44Gm44GP44Gg44GV44GE44CCXCIsXG4gICAgICAgICAgICBjbGlja0hlcmU6IFwi6Kmz44GX44GP44GvXCIsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBrbzoge1xuICAgICAgICBlbWJlZDoge1xuICAgICAgICAgICAgY29udGludWU6IFwi6rOE7IaN7ZWY64ukXCIsXG4gICAgICAgICAgICBhY3Rpb25SZXF1aXJlZDogXCLsirnsnbgg7ZWE7JqUXCIsXG4gICAgICAgICAgICBwZW5kaW5nQWN0aW9uOiBcIu2MneyXheyXkOyEnCDsmpTssq3snYQg7KeE7ZaJ7ZWY66Ck66m0IOqzhOyGjeydhCDtgbTrpq3tlZjsi63si5zsmKQuXCIsXG4gICAgICAgICAgICBjb29raWVzUmVxdWlyZWQ6IFwi7L+g7YKkIO2VhOyalFwiLFxuICAgICAgICAgICAgZW5hYmxlQ29va2llczogXCLruIzrnbzsmrDsoIAg7ZmY6rK9IOyEpOygleyXkOyEnCDsv6DtgqTrpbwg7Zmc7ISx7ZmU7ZWY7JesIFRvcnVz7JeQIOyVoeyEuOyKpO2VmOyLreyLnOyYpC5cIixcbiAgICAgICAgICAgIGNsaWNrSGVyZTogXCLrjZQg66eO7J2AIOygleuztFwiLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgemg6IHtcbiAgICAgICAgZW1iZWQ6IHtcbiAgICAgICAgICAgIGNvbnRpbnVlOiBcIue7p+e7rVwiLFxuICAgICAgICAgICAgYWN0aW9uUmVxdWlyZWQ6IFwi6ZyA6KaB5o6I5p2DXCIsXG4gICAgICAgICAgICBwZW5kaW5nQWN0aW9uOiBcIuWNleWHu+e7p+e7reS7peWcqOW8ueWHuueql+WPo+S4ree7p+e7reaCqOeahOivt+axglwiLFxuICAgICAgICAgICAgY29va2llc1JlcXVpcmVkOiBcIuW/heWhq0Nvb2tpZVwiLFxuICAgICAgICAgICAgZW5hYmxlQ29va2llczogXCLor7flnKjmgqjnmoTmtY/op4jlmajpppbpgInpobnkuK3lkK/nlKhjb29raWXku6Xorr/pl65Ub3J1c+OAglwiLFxuICAgICAgICAgICAgY2xpY2tIZXJlOiBcIuabtOWkmuS/oeaBr1wiLFxuICAgICAgICB9LFxuICAgIH0sXG59O1xudmFyIGNvbmZpZ3VyYXRpb24gPSB7XG4gICAgc3VwcG9ydGVkVmVyaWZpZXJMaXN0OiBbTE9HSU5fUFJPVklERVIuR09PR0xFLCBMT0dJTl9QUk9WSURFUi5SRURESVQsIExPR0lOX1BST1ZJREVSLkRJU0NPUkRdLFxuICAgIHBheW1lbnRQcm92aWRlcnM6IHBheW1lbnRQcm92aWRlcnMkMSxcbiAgICBhcGk6IFwiaHR0cHM6Ly9hcGkudG9yLnVzXCIsXG4gICAgdHJhbnNsYXRpb25zLFxuICAgIHByb2RUb3J1c1VybDogXCJcIixcbiAgICBsb2NhbFN0b3JhZ2VLZXk6IGB0b3J1cy0ke3dpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZX1gLFxufTtcblxuY29uc3QgcnVuT25Mb2FkID0gKGZuKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgaWYgKHdpbmRvdy5kb2N1bWVudC5ib2R5ICE9IG51bGwpIHtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKGZuKCkpLnRoZW4ocmVzb2x2ZSkuY2F0Y2gocmVqZWN0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBQcm9taXNlLnJlc29sdmUoZm4oKSkudGhlbihyZXNvbHZlKS5jYXRjaChyZWplY3QpO1xuICAgICAgICB9KTtcbiAgICB9XG59KTtcbmNvbnN0IGh0bWxUb0VsZW1lbnQgPSAoaHRtbCkgPT4ge1xuICAgIGNvbnN0IHRlbXBsYXRlID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtcbiAgICBjb25zdCB0cmltbWVkSHRtbCA9IGh0bWwudHJpbSgpOyAvLyBOZXZlciByZXR1cm4gYSB0ZXh0IG5vZGUgb2Ygd2hpdGVzcGFjZSBhcyB0aGUgcmVzdWx0XG4gICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gdHJpbW1lZEh0bWw7XG4gICAgcmV0dXJuIHRlbXBsYXRlLmNvbnRlbnQuZmlyc3RDaGlsZDtcbn07XG5jb25zdCBoYW5kbGVFdmVudCA9IChoYW5kbGUsIGV2ZW50TmFtZSwgaGFuZGxlciwgLi4uaGFuZGxlckFyZ3MpID0+IHtcbiAgICBjb25zdCBoYW5kbGVyV3JhcHBlciA9ICgpID0+IHtcbiAgICAgICAgaGFuZGxlciguLi5oYW5kbGVyQXJncyk7XG4gICAgICAgIGhhbmRsZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlcldyYXBwZXIpO1xuICAgIH07XG4gICAgaGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyV3JhcHBlcik7XG59O1xuY29uc3QgaGFuZGxlU3RyZWFtID0gKGhhbmRsZSwgZXZlbnROYW1lLCBoYW5kbGVyKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlcldyYXBwZXIgPSAoY2h1bmspID0+IHtcbiAgICAgICAgaGFuZGxlcihjaHVuayk7XG4gICAgICAgIGhhbmRsZS5yZW1vdmVMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXJXcmFwcGVyKTtcbiAgICB9O1xuICAgIGhhbmRsZS5vbihldmVudE5hbWUsIGhhbmRsZXJXcmFwcGVyKTtcbn07XG5mdW5jdGlvbiBkb2N1bWVudFJlYWR5KCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlRXZlbnQoZG9jdW1lbnQsIFwiRE9NQ29udGVudExvYWRlZFwiLCByZXNvbHZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbnZhciBsb2cgPSBsb2dsZXZlbC5nZXRMb2dnZXIoXCJ0b3J1cy1lbWJlZFwiKTtcblxudmFyIG1lc3NhZ2VzID0ge1xuICAgIGVycm9yczoge1xuICAgICAgICBkaXNjb25uZWN0ZWQ6ICgpID0+IFwiVG9ydXM6IExvc3QgY29ubmVjdGlvbiB0byBUb3J1cy5cIixcbiAgICAgICAgcGVybWFuZW50bHlEaXNjb25uZWN0ZWQ6ICgpID0+IFwiVG9ydXM6IERpc2Nvbm5lY3RlZCBmcm9tIGlmcmFtZS4gUGFnZSByZWxvYWQgcmVxdWlyZWQuXCIsXG4gICAgICAgIHNlbmRTaXRlTWV0YWRhdGE6ICgpID0+IFwiVG9ydXM6IEZhaWxlZCB0byBzZW5kIHNpdGUgbWV0YWRhdGEuIFRoaXMgaXMgYW4gaW50ZXJuYWwgZXJyb3IsIHBsZWFzZSByZXBvcnQgdGhpcyBidWcuXCIsXG4gICAgICAgIHVuc3VwcG9ydGVkU3luYzogKG1ldGhvZCkgPT4gYFRvcnVzOiBUaGUgVG9ydXMgRXRoZXJldW0gcHJvdmlkZXIgZG9lcyBub3Qgc3VwcG9ydCBzeW5jaHJvbm91cyBtZXRob2RzIGxpa2UgJHttZXRob2R9IHdpdGhvdXQgYSBjYWxsYmFjayBwYXJhbWV0ZXIuYCxcbiAgICAgICAgaW52YWxpZER1cGxleFN0cmVhbTogKCkgPT4gXCJNdXN0IHByb3ZpZGUgYSBOb2RlLmpzLXN0eWxlIGR1cGxleCBzdHJlYW0uXCIsXG4gICAgICAgIGludmFsaWRPcHRpb25zOiAobWF4RXZlbnRMaXN0ZW5lcnMsIHNob3VsZFNlbmRNZXRhZGF0YSkgPT4gYEludmFsaWQgb3B0aW9ucy4gUmVjZWl2ZWQ6IHsgbWF4RXZlbnRMaXN0ZW5lcnM6ICR7bWF4RXZlbnRMaXN0ZW5lcnN9LCBzaG91bGRTZW5kTWV0YWRhdGE6ICR7c2hvdWxkU2VuZE1ldGFkYXRhfSB9YCxcbiAgICAgICAgaW52YWxpZFJlcXVlc3RBcmdzOiAoKSA9PiBgRXhwZWN0ZWQgYSBzaW5nbGUsIG5vbi1hcnJheSwgb2JqZWN0IGFyZ3VtZW50LmAsXG4gICAgICAgIGludmFsaWRSZXF1ZXN0TWV0aG9kOiAoKSA9PiBgJ2FyZ3MubWV0aG9kJyBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZy5gLFxuICAgICAgICBpbnZhbGlkUmVxdWVzdFBhcmFtczogKCkgPT4gYCdhcmdzLnBhcmFtcycgbXVzdCBiZSBhbiBvYmplY3Qgb3IgYXJyYXkgaWYgcHJvdmlkZWQuYCxcbiAgICAgICAgaW52YWxpZExvZ2dlck9iamVjdDogKCkgPT4gYCdhcmdzLmxvZ2dlcicgbXVzdCBiZSBhbiBvYmplY3QgaWYgcHJvdmlkZWQuYCxcbiAgICAgICAgaW52YWxpZExvZ2dlck1ldGhvZDogKG1ldGhvZCkgPT4gYCdhcmdzLmxvZ2dlcicgbXVzdCBpbmNsdWRlIHJlcXVpcmVkIG1ldGhvZCAnJHttZXRob2R9Jy5gLFxuICAgIH0sXG4gICAgaW5mbzoge1xuICAgICAgICBjb25uZWN0ZWQ6IChjaGFpbklkKSA9PiBgVG9ydXM6IENvbm5lY3RlZCB0byBjaGFpbiB3aXRoIElEIFwiJHtjaGFpbklkfVwiLmAsXG4gICAgfSxcbiAgICB3YXJuaW5nczoge1xuICAgICAgICAvLyBkZXByZWNhdGVkIG1ldGhvZHNcbiAgICAgICAgZW5hYmxlRGVwcmVjYXRpb246ICdUb3J1czogXCJcImV0aGVyZXVtLmVuYWJsZSgpXCIgaXMgZGVwcmVjYXRlZCBhbmQgbWF5IGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS4gJyArXG4gICAgICAgICAgICAnUGxlYXNlIHVzZSBcImV0aGVyZXVtLnNlbmQoXCJldGhfcmVxdWVzdEFjY291bnRzXCIpXCIgaW5zdGVhZC4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZTogaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0xMTAyJyxcbiAgICAgICAgc2VuZERlcHJlY2F0aW9uOiAnVG9ydXM6IFwiZXRoZXJldW0uc2VuZCguLi4pXCIgaXMgZGVwcmVjYXRlZCBhbmQgbWF5IGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS4nICtcbiAgICAgICAgICAgICcgUGxlYXNlIHVzZSBcImV0aGVyZXVtLnNlbmRBc3luYyguLi4pXCIgb3IgXCJldGhlcmV1bS5yZXF1ZXN0KC4uLilcIiBpbnN0ZWFkLlxcbkZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWU6IGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMTE5MycsXG4gICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgY2xvc2U6ICdUb3J1czogVGhlIGV2ZW50IFwiY2xvc2VcIiBpcyBkZXByZWNhdGVkIGFuZCBtYXkgYmUgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlLiBQbGVhc2UgdXNlIFwiZGlzY29ubmVjdFwiIGluc3RlYWQuJyArXG4gICAgICAgICAgICAgICAgXCJcXG5Gb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlOiBodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTExOTNcIixcbiAgICAgICAgICAgIGRhdGE6ICdUb3J1czogVGhlIGV2ZW50IFwiZGF0YVwiIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlLicgK1xuICAgICAgICAgICAgICAgICdVc2UgXCJtZXNzYWdlXCIgaW5zdGVhZC5cXG5Gb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlOiBodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTExOTMjbWVzc2FnZScsXG4gICAgICAgICAgICBuZXR3b3JrQ2hhbmdlZDogJ1RvcnVzOiBUaGUgZXZlbnQgXCJuZXR3b3JrQ2hhbmdlZFwiIGlzIGRlcHJlY2F0ZWQgYW5kIG1heSBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuJyArXG4gICAgICAgICAgICAgICAgJyBQbGVhc2UgdXNlIFwiY2hhaW5DaGFuZ2VkXCIgaW5zdGVhZC5cXG5Gb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlOiBodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTExOTMnLFxuICAgICAgICAgICAgbm90aWZpY2F0aW9uOiAnVG9ydXM6IFRoZSBldmVudCBcIm5vdGlmaWNhdGlvblwiIGlzIGRlcHJlY2F0ZWQgYW5kIG1heSBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuICcgK1xuICAgICAgICAgICAgICAgICdQbGVhc2UgdXNlIFwibWVzc2FnZVwiIGluc3RlYWQuXFxuRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZTogaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0xMTkzJyxcbiAgICAgICAgfSxcbiAgICAgICAgcHVibGljQ29uZmlnU3RvcmU6ICdUb3J1czogVGhlIHByb3BlcnR5IFwicHVibGljQ29uZmlnU3RvcmVcIiBpcyBkZXByZWNhdGVkIGFuZCBXSUxMIGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS4nLFxuICAgIH0sXG59O1xuXG5jb25zdCB7IHBheW1lbnRQcm92aWRlcnMgfSA9IGNvbmZpZ3VyYXRpb247XG5jb25zdCB2YWxpZGF0ZVBheW1lbnRQcm92aWRlciA9IChwcm92aWRlciwgcGFyYW1zKSA9PiB7XG4gICAgY29uc3QgZXJyb3JzID0ge307XG4gICAgaWYgKCFwcm92aWRlcikge1xuICAgICAgICByZXR1cm4geyBlcnJvcnMsIGlzVmFsaWQ6IHRydWUgfTtcbiAgICB9XG4gICAgaWYgKHByb3ZpZGVyICYmICFwYXltZW50UHJvdmlkZXJzW3Byb3ZpZGVyXSkge1xuICAgICAgICBlcnJvcnMucHJvdmlkZXIgPSBcIkludmFsaWQgUHJvdmlkZXJcIjtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3JzLCBpc1ZhbGlkOiBPYmplY3Qua2V5cyhlcnJvcnMpLmxlbmd0aCA9PT0gMCB9O1xuICAgIH1cbiAgICBjb25zdCBzZWxlY3RlZFByb3ZpZGVyID0gcGF5bWVudFByb3ZpZGVyc1twcm92aWRlcl07XG4gICAgY29uc3Qgc2VsZWN0ZWRQYXJhbXMgPSBwYXJhbXMgfHwge307XG4gICAgLy8gc2V0IGRlZmF1bHQgdmFsdWVzXG4gICAgLy8gaWYgKCFzZWxlY3RlZFBhcmFtcy5zZWxlY3RlZEN1cnJlbmN5KSBbc2VsZWN0ZWRQYXJhbXMuc2VsZWN0ZWRDdXJyZW5jeV0gPSBzZWxlY3RlZFByb3ZpZGVyLnZhbGlkQ3VycmVuY2llc1xuICAgIC8vIGlmICghc2VsZWN0ZWRQYXJhbXMuZmlhdFZhbHVlKSBzZWxlY3RlZFBhcmFtcy5maWF0VmFsdWUgPSBzZWxlY3RlZFByb3ZpZGVyLm1pbk9yZGVyVmFsdWVcbiAgICAvLyBpZiAoIXNlbGVjdGVkUGFyYW1zLnNlbGVjdGVkQ3J5cHRvQ3VycmVuY3kpIFtzZWxlY3RlZFBhcmFtcy5zZWxlY3RlZENyeXB0b0N1cnJlbmN5XSA9IHNlbGVjdGVkUHJvdmlkZXIudmFsaWRDcnlwdG9DdXJyZW5jaWVzXG4gICAgLy8gdmFsaWRhdGlvbnNcbiAgICBpZiAoc2VsZWN0ZWRQYXJhbXMuZmlhdFZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3RlZE9yZGVyQW1vdW50ID0gK3BhcnNlRmxvYXQoc2VsZWN0ZWRQYXJhbXMuZmlhdFZhbHVlLnRvU3RyaW5nKCkpIHx8IDA7XG4gICAgICAgIGlmIChyZXF1ZXN0ZWRPcmRlckFtb3VudCA8IHNlbGVjdGVkUHJvdmlkZXIubWluT3JkZXJWYWx1ZSlcbiAgICAgICAgICAgIGVycm9ycy5maWF0VmFsdWUgPSBcIlJlcXVlc3RlZCBhbW91bnQgaXMgbG93ZXIgdGhhbiBzdXBwb3J0ZWRcIjtcbiAgICAgICAgaWYgKHJlcXVlc3RlZE9yZGVyQW1vdW50ID4gc2VsZWN0ZWRQcm92aWRlci5tYXhPcmRlclZhbHVlICYmIHNlbGVjdGVkUHJvdmlkZXIuZW5mb3JjZU1heClcbiAgICAgICAgICAgIGVycm9ycy5maWF0VmFsdWUgPSBcIlJlcXVlc3RlZCBhbW91bnQgaXMgaGlnaGVyIHRoYW4gc3VwcG9ydGVkXCI7XG4gICAgfVxuICAgIGlmIChzZWxlY3RlZFBhcmFtcy5zZWxlY3RlZEN1cnJlbmN5ICYmICFzZWxlY3RlZFByb3ZpZGVyLnZhbGlkQ3VycmVuY2llcy5pbmNsdWRlcyhzZWxlY3RlZFBhcmFtcy5zZWxlY3RlZEN1cnJlbmN5KSkge1xuICAgICAgICBlcnJvcnMuc2VsZWN0ZWRDdXJyZW5jeSA9IFwiVW5zdXBwb3J0ZWQgY3VycmVuY3lcIjtcbiAgICB9XG4gICAgaWYgKHNlbGVjdGVkUGFyYW1zLnNlbGVjdGVkQ3J5cHRvQ3VycmVuY3kgJiYgIXNlbGVjdGVkUHJvdmlkZXIudmFsaWRDcnlwdG9DdXJyZW5jaWVzLmluY2x1ZGVzKHNlbGVjdGVkUGFyYW1zLnNlbGVjdGVkQ3J5cHRvQ3VycmVuY3kpKSB7XG4gICAgICAgIGVycm9ycy5zZWxlY3RlZENyeXB0b0N1cnJlbmN5ID0gXCJVbnN1cHBvcnRlZCBjcnlwdG9DdXJyZW5jeVwiO1xuICAgIH1cbiAgICByZXR1cm4geyBlcnJvcnMsIGlzVmFsaWQ6IE9iamVjdC5rZXlzKGVycm9ycykubGVuZ3RoID09PSAwIH07XG59O1xuLy8gdXRpbGl0eSBmdW5jdGlvbnNcbi8qKlxuICoganNvbi1ycGMtZW5naW5lIG1pZGRsZXdhcmUgdGhhdCBsb2dzIFJQQyBlcnJvcnMgYW5kIGFuZCB2YWxpZGF0ZXMgcmVxLm1ldGhvZC5cbiAqXG4gKiBAcGFyYW0gbG9nIC0gVGhlIGxvZ2dpbmcgQVBJIHRvIHVzZS5cbiAqIEByZXR1cm5zICBqc29uLXJwYy1lbmdpbmUgbWlkZGxld2FyZSBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBjcmVhdGVFcnJvck1pZGRsZXdhcmUoKSB7XG4gICAgcmV0dXJuIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgICAvLyBqc29uLXJwYy1lbmdpbmUgd2lsbCB0ZXJtaW5hdGUgdGhlIHJlcXVlc3Qgd2hlbiBpdCBub3RpY2VzIHRoaXMgZXJyb3JcbiAgICAgICAgaWYgKHR5cGVvZiByZXEubWV0aG9kICE9PSBcInN0cmluZ1wiIHx8ICFyZXEubWV0aG9kKSB7XG4gICAgICAgICAgICByZXMuZXJyb3IgPSBldGhFcnJvcnMucnBjLmludmFsaWRSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBgVGhlIHJlcXVlc3QgJ21ldGhvZCcgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcuYCxcbiAgICAgICAgICAgICAgICBkYXRhOiByZXEsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBuZXh0KChkb25lKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGVycm9yIH0gPSByZXM7XG4gICAgICAgICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvZy5lcnJvcihgTWV0YU1hc2sgLSBSUEMgRXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gZG9uZSgpO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuLyoqXG4gKiBMb2dzIGEgc3RyZWFtIGRpc2Nvbm5lY3Rpb24gZXJyb3IuIEVtaXRzIGFuICdlcnJvcicgaWYgZ2l2ZW4gYW5cbiAqIEV2ZW50RW1pdHRlciB0aGF0IGhhcyBsaXN0ZW5lcnMgZm9yIHRoZSAnZXJyb3InIGV2ZW50LlxuICpcbiAqIEBwYXJhbSBsb2cgLSBUaGUgbG9nZ2luZyBBUEkgdG8gdXNlLlxuICogQHBhcmFtIHJlbW90ZUxhYmVsIC0gVGhlIGxhYmVsIG9mIHRoZSBkaXNjb25uZWN0ZWQgc3RyZWFtLlxuICogQHBhcmFtIGVycm9yIC0gVGhlIGFzc29jaWF0ZWQgZXJyb3IgdG8gbG9nLlxuICogQHBhcmFtIGVtaXR0ZXIgLSBUaGUgbG9nZ2luZyBBUEkgdG8gdXNlLlxuICovXG5mdW5jdGlvbiBsb2dTdHJlYW1EaXNjb25uZWN0V2FybmluZyhyZW1vdGVMYWJlbCwgZXJyb3IsIGVtaXR0ZXIpIHtcbiAgICBsZXQgd2FybmluZ01zZyA9IGBNZXRhTWFzazogTG9zdCBjb25uZWN0aW9uIHRvIFwiJHtyZW1vdGVMYWJlbH1cIi5gO1xuICAgIGlmIChlcnJvciA9PT0gbnVsbCB8fCBlcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3Iuc3RhY2spIHtcbiAgICAgICAgd2FybmluZ01zZyArPSBgXFxuJHtlcnJvci5zdGFja31gO1xuICAgIH1cbiAgICBsb2cud2Fybih3YXJuaW5nTXNnKTtcbiAgICBpZiAoZW1pdHRlciAmJiBlbWl0dGVyLmxpc3RlbmVyQ291bnQoXCJlcnJvclwiKSA+IDApIHtcbiAgICAgICAgZW1pdHRlci5lbWl0KFwiZXJyb3JcIiwgd2FybmluZ01zZyk7XG4gICAgfVxufVxuY29uc3QgZ2V0UHJlb3Blbkluc3RhbmNlSWQgPSAoKSA9PiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtcbmNvbnN0IGdldFRvcnVzVXJsID0gKGJ1aWxkRW52LCBpbnRlZ3JpdHkpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIGxldCB0b3J1c1VybDtcbiAgICBsZXQgbG9nTGV2ZWw7XG4gICAgLy8gRG8gbm90IGNoYW5nZSB0aGlzIGxpbmVcbiAgICBjb25zdCB2ZXJzaW9uID0gXCIxLjE4LjZcIjtcbiAgICBsZXQgdmVyc2lvblVzZWQgPSBpbnRlZ3JpdHkudmVyc2lvbiB8fCB2ZXJzaW9uO1xuICAgIHRyeSB7XG4gICAgICAgIGlmICgoYnVpbGRFbnYgPT09IFwiYmluYW5jZVwiIHx8IGJ1aWxkRW52ID09PSBcInByb2R1Y3Rpb25cIikgJiYgIWludGVncml0eS52ZXJzaW9uKSB7XG4gICAgICAgICAgICBsZXQgcmVzcG9uc2U7XG4gICAgICAgICAgICBpZiAoIWNvbmZpZ3VyYXRpb24ucHJvZFRvcnVzVXJsKVxuICAgICAgICAgICAgICAgIHJlc3BvbnNlID0geWllbGQgZ2V0KGAke2NvbmZpZ3VyYXRpb24uYXBpfS9sYXRlc3R2ZXJzaW9uP25hbWU9QHRvcnVzbGFicy90b3J1cy1lbWJlZCZ2ZXJzaW9uPSR7dmVyc2lvbn1gLCB7fSwgeyB1c2VBUElLZXk6IHRydWUgfSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UgPSB7IGRhdGE6IGNvbmZpZ3VyYXRpb24ucHJvZFRvcnVzVXJsIH07XG4gICAgICAgICAgICB2ZXJzaW9uVXNlZCA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1hdG9taWMtdXBkYXRlc1xuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wcm9kVG9ydXNVcmwgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBsb2cuZXJyb3IoZXJyb3IsIFwidW5hYmxlIHRvIGZldGNoIGxhdGVzdCB2ZXJzaW9uXCIpO1xuICAgIH1cbiAgICBsb2cuaW5mbyhcInZlcnNpb24gdXNlZDogXCIsIHZlcnNpb25Vc2VkKTtcbiAgICBzd2l0Y2ggKGJ1aWxkRW52KSB7XG4gICAgICAgIGNhc2UgXCJiaW5hbmNlXCI6XG4gICAgICAgICAgICB0b3J1c1VybCA9IGBodHRwczovL2JpbmFuY2UudG9yLnVzL3Yke3ZlcnNpb25Vc2VkfWA7XG4gICAgICAgICAgICBsb2dMZXZlbCA9IFwiaW5mb1wiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJ0ZXN0aW5nXCI6XG4gICAgICAgICAgICB0b3J1c1VybCA9IFwiaHR0cHM6Ly90ZXN0aW5nLnRvci51c1wiO1xuICAgICAgICAgICAgbG9nTGV2ZWwgPSBcImRlYnVnXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImxyY1wiOlxuICAgICAgICAgICAgdG9ydXNVcmwgPSBcImh0dHBzOi8vbHJjLnRvci51c1wiO1xuICAgICAgICAgICAgbG9nTGV2ZWwgPSBcImRlYnVnXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImJldGFcIjpcbiAgICAgICAgICAgIHRvcnVzVXJsID0gXCJodHRwczovL2JldGEudG9yLnVzXCI7XG4gICAgICAgICAgICBsb2dMZXZlbCA9IFwiZGVidWdcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZGV2ZWxvcG1lbnRcIjpcbiAgICAgICAgICAgIHRvcnVzVXJsID0gXCJodHRwOi8vbG9jYWxob3N0OjQwNTBcIjtcbiAgICAgICAgICAgIGxvZ0xldmVsID0gXCJkZWJ1Z1wiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0b3J1c1VybCA9IGBodHRwczovL2FwcC50b3IudXMvdiR7dmVyc2lvblVzZWR9YDtcbiAgICAgICAgICAgIGxvZ0xldmVsID0gXCJlcnJvclwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiB7IHRvcnVzVXJsLCBsb2dMZXZlbCB9O1xufSk7XG5jb25zdCBnZXRVc2VyTGFuZ3VhZ2UgPSAoKSA9PiB7XG4gICAgbGV0IHVzZXJMYW5ndWFnZSA9IHdpbmRvdy5uYXZpZ2F0b3IubGFuZ3VhZ2UgfHwgXCJlbi1VU1wiO1xuICAgIGNvbnN0IHVzZXJMYW5ndWFnZXMgPSB1c2VyTGFuZ3VhZ2Uuc3BsaXQoXCItXCIpO1xuICAgIHVzZXJMYW5ndWFnZSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjb25maWd1cmF0aW9uLnRyYW5zbGF0aW9ucywgdXNlckxhbmd1YWdlc1swXSkgPyB1c2VyTGFuZ3VhZ2VzWzBdIDogXCJlblwiO1xuICAgIHJldHVybiB1c2VyTGFuZ3VhZ2U7XG59O1xuY29uc3QgRU1JVFRFRF9OT1RJRklDQVRJT05TID0gW1xuICAgIFwiZXRoX3N1YnNjcmlwdGlvblwiLCAvLyBwZXIgZXRoLWpzb24tcnBjLWZpbHRlcnMvc3Vic2NyaXB0aW9uTWFuYWdlclxuXTtcbmNvbnN0IE5PT1AgPSAoKSA9PiB7XG4gICAgLy8gZW1wdHkgZnVuY3Rpb25cbn07XG5jb25zdCBGRUFUVVJFU19QUk9WSURFUl9DSEFOR0VfV0lORE9XID0gXCJkaXJlY3Rvcmllcz0wLHRpdGxlYmFyPTAsdG9vbGJhcj0wLHN0YXR1cz0wLGxvY2F0aW9uPTAsbWVudWJhcj0wLGhlaWdodD02NjAsd2lkdGg9Mzc1XCI7XG5jb25zdCBGRUFUVVJFU19ERUZBVUxUX1dBTExFVF9XSU5ET1cgPSBcImRpcmVjdG9yaWVzPTAsdGl0bGViYXI9MCx0b29sYmFyPTAsc3RhdHVzPTAsbG9jYXRpb249MCxtZW51YmFyPTAsaGVpZ2h0PTc0MCx3aWR0aD0xMzE1XCI7XG5jb25zdCBGRUFUVVJFU19DT05GSVJNX1dJTkRPVyA9IFwiZGlyZWN0b3JpZXM9MCx0aXRsZWJhcj0wLHRvb2xiYXI9MCxzdGF0dXM9MCxsb2NhdGlvbj0wLG1lbnViYXI9MCxoZWlnaHQ9NzAwLHdpZHRoPTQ1MFwiO1xuZnVuY3Rpb24gc3RvcmFnZUF2YWlsYWJsZSh0eXBlKSB7XG4gICAgbGV0IHN0b3JhZ2U7XG4gICAgdHJ5IHtcbiAgICAgICAgc3RvcmFnZSA9IHdpbmRvd1t0eXBlXTtcbiAgICAgICAgY29uc3QgeCA9IFwiX19zdG9yYWdlX3Rlc3RfX1wiO1xuICAgICAgICBzdG9yYWdlLnNldEl0ZW0oeCwgeCk7XG4gICAgICAgIHN0b3JhZ2UucmVtb3ZlSXRlbSh4KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiAoZSAmJlxuICAgICAgICAgICAgLy8gZXZlcnl0aGluZyBleGNlcHQgRmlyZWZveFxuICAgICAgICAgICAgKGUuY29kZSA9PT0gMjIgfHxcbiAgICAgICAgICAgICAgICAvLyBGaXJlZm94XG4gICAgICAgICAgICAgICAgZS5jb2RlID09PSAxMDE0IHx8XG4gICAgICAgICAgICAgICAgLy8gdGVzdCBuYW1lIGZpZWxkIHRvbywgYmVjYXVzZSBjb2RlIG1pZ2h0IG5vdCBiZSBwcmVzZW50XG4gICAgICAgICAgICAgICAgLy8gZXZlcnl0aGluZyBleGNlcHQgRmlyZWZveFxuICAgICAgICAgICAgICAgIGUubmFtZSA9PT0gXCJRdW90YUV4Y2VlZGVkRXJyb3JcIiB8fFxuICAgICAgICAgICAgICAgIC8vIEZpcmVmb3hcbiAgICAgICAgICAgICAgICBlLm5hbWUgPT09IFwiTlNfRVJST1JfRE9NX1FVT1RBX1JFQUNIRURcIikgJiZcbiAgICAgICAgICAgIC8vIGFja25vd2xlZGdlIFF1b3RhRXhjZWVkZWRFcnJvciBvbmx5IGlmIHRoZXJlJ3Mgc29tZXRoaW5nIGFscmVhZHkgc3RvcmVkXG4gICAgICAgICAgICBzdG9yYWdlICYmXG4gICAgICAgICAgICBzdG9yYWdlLmxlbmd0aCAhPT0gMCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0UG9wdXBGZWF0dXJlcygpIHtcbiAgICAvLyBGaXhlcyBkdWFsLXNjcmVlbiBwb3NpdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTW9zdCBicm93c2VycyAgICAgIEZpcmVmb3hcbiAgICBjb25zdCBkdWFsU2NyZWVuTGVmdCA9IHdpbmRvdy5zY3JlZW5MZWZ0ICE9PSB1bmRlZmluZWQgPyB3aW5kb3cuc2NyZWVuTGVmdCA6IHdpbmRvdy5zY3JlZW5YO1xuICAgIGNvbnN0IGR1YWxTY3JlZW5Ub3AgPSB3aW5kb3cuc2NyZWVuVG9wICE9PSB1bmRlZmluZWQgPyB3aW5kb3cuc2NyZWVuVG9wIDogd2luZG93LnNjcmVlblk7XG4gICAgY29uc3QgdyA9IDEyMDA7XG4gICAgY29uc3QgaCA9IDcwMDtcbiAgICBjb25zdCB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoXG4gICAgICAgID8gd2luZG93LmlubmVyV2lkdGhcbiAgICAgICAgOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGhcbiAgICAgICAgICAgID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoXG4gICAgICAgICAgICA6IHdpbmRvdy5zY3JlZW4ud2lkdGg7XG4gICAgY29uc3QgaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0XG4gICAgICAgID8gd2luZG93LmlubmVySGVpZ2h0XG4gICAgICAgIDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxuICAgICAgICAgICAgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gICAgICAgICAgICA6IHdpbmRvdy5zY3JlZW4uaGVpZ2h0O1xuICAgIGNvbnN0IHN5c3RlbVpvb20gPSAxOyAvLyBObyByZWxpYWJsZSBlc3RpbWF0ZVxuICAgIGNvbnN0IGxlZnQgPSBNYXRoLmFicygod2lkdGggLSB3KSAvIDIgLyBzeXN0ZW1ab29tICsgZHVhbFNjcmVlbkxlZnQpO1xuICAgIGNvbnN0IHRvcCA9IE1hdGguYWJzKChoZWlnaHQgLSBoKSAvIDIgLyBzeXN0ZW1ab29tICsgZHVhbFNjcmVlblRvcCk7XG4gICAgY29uc3QgZmVhdHVyZXMgPSBgdGl0bGViYXI9MCx0b29sYmFyPTAsc3RhdHVzPTAsbG9jYXRpb249MCxtZW51YmFyPTAsaGVpZ2h0PSR7aCAvIHN5c3RlbVpvb219LHdpZHRoPSR7dyAvIHN5c3RlbVpvb219LHRvcD0ke3RvcH0sbGVmdD0ke2xlZnR9YDtcbiAgICByZXR1cm4gZmVhdHVyZXM7XG59XG5cblNhZmVFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IDEwMDtcbi8vIHJlc29sdmUgcmVzcG9uc2UucmVzdWx0LCByZWplY3QgZXJyb3JzXG5jb25zdCBnZXRScGNQcm9taXNlQ2FsbGJhY2sgPSAocmVzb2x2ZSwgcmVqZWN0LCB1bndyYXBSZXN1bHQgPSB0cnVlKSA9PiAoZXJyb3IsIHJlc3BvbnNlKSA9PiB7XG4gICAgaWYgKGVycm9yIHx8IHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgIHJldHVybiByZWplY3QoZXJyb3IgfHwgcmVzcG9uc2UuZXJyb3IpO1xuICAgIH1cbiAgICByZXR1cm4gIXVud3JhcFJlc3VsdCB8fCBBcnJheS5pc0FycmF5KHJlc3BvbnNlKSA/IHJlc29sdmUocmVzcG9uc2UpIDogcmVzb2x2ZShyZXNwb25zZS5yZXN1bHQpO1xufTtcbmNsYXNzIFRvcnVzSW5wYWdlUHJvdmlkZXIgZXh0ZW5kcyBTYWZlRXZlbnRFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uU3RyZWFtLCB7IG1heEV2ZW50TGlzdGVuZXJzID0gMTAwLCBzaG91bGRTZW5kTWV0YWRhdGEgPSB0cnVlLCBqc29uUnBjU3RyZWFtTmFtZSA9IFwicHJvdmlkZXJcIiB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fc2VudFdhcm5pbmdzID0ge1xuICAgICAgICAgICAgLy8gbWV0aG9kc1xuICAgICAgICAgICAgZW5hYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGV4cGVyaW1lbnRhbE1ldGhvZHM6IGZhbHNlLFxuICAgICAgICAgICAgc2VuZDogZmFsc2UsXG4gICAgICAgICAgICBwdWJsaWNDb25maWdTdG9yZTogZmFsc2UsXG4gICAgICAgICAgICAvLyBldmVudHNcbiAgICAgICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgICAgIGNsb3NlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkYXRhOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBuZXR3b3JrQ2hhbmdlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIGlmICghaXNEdXBsZXhTdHJlYW0oY29ubmVjdGlvblN0cmVhbSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlcy5lcnJvcnMuaW52YWxpZER1cGxleFN0cmVhbSgpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzVG9ydXMgPSB0cnVlO1xuICAgICAgICB0aGlzLnNldE1heExpc3RlbmVycyhtYXhFdmVudExpc3RlbmVycyk7XG4gICAgICAgIC8vIHByaXZhdGUgc3RhdGVcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBUb3J1c0lucGFnZVByb3ZpZGVyLl9kZWZhdWx0U3RhdGUpO1xuICAgICAgICAvLyBwdWJsaWMgc3RhdGVcbiAgICAgICAgdGhpcy5zZWxlY3RlZEFkZHJlc3MgPSBudWxsO1xuICAgICAgICB0aGlzLm5ldHdvcmtWZXJzaW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5jaGFpbklkID0gbnVsbDtcbiAgICAgICAgdGhpcy5zaG91bGRTZW5kTWV0YWRhdGEgPSBzaG91bGRTZW5kTWV0YWRhdGE7XG4gICAgICAgIC8vIGJpbmQgZnVuY3Rpb25zICh0byBwcmV2ZW50IGUuZy4gd2ViM0AxLnggZnJvbSBtYWtpbmcgdW5ib3VuZCBjYWxscylcbiAgICAgICAgdGhpcy5faGFuZGxlQWNjb3VudHNDaGFuZ2VkID0gdGhpcy5faGFuZGxlQWNjb3VudHNDaGFuZ2VkLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX2hhbmRsZUNoYWluQ2hhbmdlZCA9IHRoaXMuX2hhbmRsZUNoYWluQ2hhbmdlZC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9oYW5kbGVVbmxvY2tTdGF0ZUNoYW5nZWQgPSB0aGlzLl9oYW5kbGVVbmxvY2tTdGF0ZUNoYW5nZWQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5faGFuZGxlQ29ubmVjdCA9IHRoaXMuX2hhbmRsZUNvbm5lY3QuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5faGFuZGxlRGlzY29ubmVjdCA9IHRoaXMuX2hhbmRsZURpc2Nvbm5lY3QuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5faGFuZGxlU3RyZWFtRGlzY29ubmVjdCA9IHRoaXMuX2hhbmRsZVN0cmVhbURpc2Nvbm5lY3QuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fc2VuZFN5bmMgPSB0aGlzLl9zZW5kU3luYy5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9ycGNSZXF1ZXN0ID0gdGhpcy5fcnBjUmVxdWVzdC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl93YXJuT2ZEZXByZWNhdGlvbiA9IHRoaXMuX3dhcm5PZkRlcHJlY2F0aW9uLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVTdGF0ZSA9IHRoaXMuX2luaXRpYWxpemVTdGF0ZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnJlcXVlc3QgPSB0aGlzLnJlcXVlc3QuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zZW5kID0gdGhpcy5zZW5kLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc2VuZEFzeW5jID0gdGhpcy5zZW5kQXN5bmMuYmluZCh0aGlzKTtcbiAgICAgICAgLy8gdGhpcy5lbmFibGUgPSB0aGlzLmVuYWJsZS5iaW5kKHRoaXMpO1xuICAgICAgICAvLyBzZXR1cCBjb25uZWN0aW9uU3RyZWFtIG11bHRpcGxleGluZ1xuICAgICAgICBjb25zdCBtdXggPSBuZXcgT2JqZWN0TXVsdGlwbGV4KCk7XG4gICAgICAgIHB1bXAoY29ubmVjdGlvblN0cmVhbSwgbXV4LCBjb25uZWN0aW9uU3RyZWFtLCB0aGlzLl9oYW5kbGVTdHJlYW1EaXNjb25uZWN0LmJpbmQodGhpcywgXCJNZXRhTWFza1wiKSk7XG4gICAgICAgIC8vIHN1YnNjcmliZSB0byBtZXRhbWFzayBwdWJsaWMgY29uZmlnIChvbmUtd2F5KVxuICAgICAgICB0aGlzLl9wdWJsaWNDb25maWdTdG9yZSA9IG5ldyBPYnNlcnZhYmxlU3RvcmUoeyBzdG9yYWdlS2V5OiBcIk1ldGFtYXNrLUNvbmZpZ1wiIH0pO1xuICAgICAgICAvLyBoYW5kbGUgaXNVbmxvY2tlZCBjaGFuZ2VzLCBhbmQgY2hhaW5DaGFuZ2VkIGFuZCBuZXR3b3JrQ2hhbmdlZCBldmVudHNcbiAgICAgICAgLy8gdGhpcy5fcHVibGljQ29uZmlnU3RvcmUuc3Vic2NyaWJlKChzdHJpbmdpZmllZFN0YXRlKSA9PiB7XG4gICAgICAgIC8vICAgLy8gVGhpcyBpcyBiZWNhdXNlIHdlIGFyZSB1c2luZyBzdG9yZSBhcyBzdHJpbmdcbiAgICAgICAgLy8gICBjb25zdCBzdGF0ZSA9IEpTT04ucGFyc2Uoc3RyaW5naWZpZWRTdGF0ZSBhcyB1bmtub3duIGFzIHN0cmluZyk7XG4gICAgICAgIC8vICAgaWYgKFwiaXNVbmxvY2tlZFwiIGluIHN0YXRlICYmIHN0YXRlLmlzVW5sb2NrZWQgIT09IHRoaXMuX3N0YXRlLmlzVW5sb2NrZWQpIHtcbiAgICAgICAgLy8gICAgIHRoaXMuX3N0YXRlLmlzVW5sb2NrZWQgPSBzdGF0ZS5pc1VubG9ja2VkO1xuICAgICAgICAvLyAgICAgaWYgKCF0aGlzLl9zdGF0ZS5pc1VubG9ja2VkKSB7XG4gICAgICAgIC8vICAgICAgIC8vIGFjY291bnRzIGFyZSBuZXZlciBleHBvc2VkIHdoZW4gdGhlIGV4dGVuc2lvbiBpcyBsb2NrZWRcbiAgICAgICAgLy8gICAgICAgdGhpcy5faGFuZGxlQWNjb3VudHNDaGFuZ2VkKFtdKTtcbiAgICAgICAgLy8gICAgIH0gZWxzZSB7XG4gICAgICAgIC8vICAgICAgIC8vIHRoaXMgd2lsbCBnZXQgdGhlIGV4cG9zZWQgYWNjb3VudHMsIGlmIGFueVxuICAgICAgICAvLyAgICAgICB0cnkge1xuICAgICAgICAvLyAgICAgICAgIHRoaXMuX3JwY1JlcXVlc3QoXG4gICAgICAgIC8vICAgICAgICAgICB7IG1ldGhvZDogXCJldGhfYWNjb3VudHNcIiwgcGFyYW1zOiBbXSB9LFxuICAgICAgICAvLyAgICAgICAgICAgTk9PUCxcbiAgICAgICAgLy8gICAgICAgICAgIHRydWUgLy8gaW5kaWNhdGluZyB0aGF0IGV0aF9hY2NvdW50cyBfc2hvdWxkXyB1cGRhdGUgYWNjb3VudHNcbiAgICAgICAgLy8gICAgICAgICApO1xuICAgICAgICAvLyAgICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgIC8vICAgICAgICAgLy8gU3dhbGxvdyBlcnJvclxuICAgICAgICAvLyAgICAgICB9XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vICAgfVxuICAgICAgICAvLyAgIGlmIChcInNlbGVjdGVkQWRkcmVzc1wiIGluIHN0YXRlICYmIHRoaXMuc2VsZWN0ZWRBZGRyZXNzICE9PSBzdGF0ZS5zZWxlY3RlZEFkZHJlc3MpIHtcbiAgICAgICAgLy8gICAgIHRyeSB7XG4gICAgICAgIC8vICAgICAgIHRoaXMuX3JwY1JlcXVlc3QoXG4gICAgICAgIC8vICAgICAgICAgeyBtZXRob2Q6IFwiZXRoX2FjY291bnRzXCIsIHBhcmFtczogW10gfSxcbiAgICAgICAgLy8gICAgICAgICBOT09QLFxuICAgICAgICAvLyAgICAgICAgIHRydWUgLy8gaW5kaWNhdGluZyB0aGF0IGV0aF9hY2NvdW50cyBfc2hvdWxkXyB1cGRhdGUgYWNjb3VudHNcbiAgICAgICAgLy8gICAgICAgKTtcbiAgICAgICAgLy8gICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgLy8gICAgICAgLy8gU3dhbGxvdyBlcnJvclxuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyAgIH1cbiAgICAgICAgLy8gICAvLyBFbWl0IGNoYWluQ2hhbmdlZCBldmVudCBvbiBjaGFpbiBjaGFuZ2VcbiAgICAgICAgLy8gICBpZiAoXCJjaGFpbklkXCIgaW4gc3RhdGUgJiYgc3RhdGUuY2hhaW5JZCAhPT0gdGhpcy5jaGFpbklkKSB7XG4gICAgICAgIC8vICAgICB0aGlzLmNoYWluSWQgPSBzdGF0ZS5jaGFpbklkIHx8IG51bGw7XG4gICAgICAgIC8vICAgICB0aGlzLmVtaXQoXCJjaGFpbkNoYW5nZWRcIiwgdGhpcy5jaGFpbklkKTtcbiAgICAgICAgLy8gICAgIC8vIGluZGljYXRlIHRoYXQgd2UndmUgY29ubmVjdGVkLCBmb3IgRUlQLTExOTMgY29tcGxpYW5jZVxuICAgICAgICAvLyAgICAgLy8gd2UgZG8gdGhpcyBoZXJlIHNvIHRoYXQgaWZyYW1lIGNhbiBpbml0aWFsaXplXG4gICAgICAgIC8vICAgICBpZiAoIXRoaXMuX3N0YXRlLmhhc0VtaXR0ZWRDb25uZWN0aW9uKSB7XG4gICAgICAgIC8vICAgICAgIHRoaXMuX2hhbmRsZUNvbm5lY3QodGhpcy5jaGFpbklkKTtcbiAgICAgICAgLy8gICAgICAgdGhpcy5fc3RhdGUuaGFzRW1pdHRlZENvbm5lY3Rpb24gPSB0cnVlO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyAgIH1cbiAgICAgICAgLy8gICAvLyBFbWl0IG5ldHdvcmtDaGFuZ2VkIGV2ZW50IG9uIG5ldHdvcmsgY2hhbmdlXG4gICAgICAgIC8vICAgaWYgKFwibmV0d29ya1ZlcnNpb25cIiBpbiBzdGF0ZSAmJiBzdGF0ZS5uZXR3b3JrVmVyc2lvbiAhPT0gdGhpcy5uZXR3b3JrVmVyc2lvbikge1xuICAgICAgICAvLyAgICAgdGhpcy5uZXR3b3JrVmVyc2lvbiA9IHN0YXRlLm5ldHdvcmtWZXJzaW9uIHx8IG51bGw7XG4gICAgICAgIC8vICAgICB0aGlzLmVtaXQoXCJuZXR3b3JrQ2hhbmdlZFwiLCB0aGlzLm5ldHdvcmtWZXJzaW9uKTtcbiAgICAgICAgLy8gICB9XG4gICAgICAgIC8vIH0pO1xuICAgICAgICBwdW1wKG11eC5jcmVhdGVTdHJlYW0oXCJwdWJsaWNDb25maWdcIiksIHN0b3JlQXNTdHJlYW0odGhpcy5fcHVibGljQ29uZmlnU3RvcmUpLCBcbiAgICAgICAgLy8gUlBDIHJlcXVlc3RzIHNob3VsZCBzdGlsbCB3b3JrIGlmIG9ubHkgdGhpcyBzdHJlYW0gZmFpbHNcbiAgICAgICAgbG9nU3RyZWFtRGlzY29ubmVjdFdhcm5pbmcuYmluZCh0aGlzLCBcIk1ldGFNYXNrIFB1YmxpY0NvbmZpZ1N0b3JlXCIpKTtcbiAgICAgICAgLy8gaWdub3JlIHBoaXNoaW5nIHdhcm5pbmcgbWVzc2FnZSAoaGFuZGxlZCBlbHNld2hlcmUpXG4gICAgICAgIG11eC5pZ25vcmVTdHJlYW0oXCJwaGlzaGluZ1wiKTtcbiAgICAgICAgLy8gc2V0dXAgb3duIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICAvLyBFSVAtMTE5MyBjb25uZWN0XG4gICAgICAgIHRoaXMub24oXCJjb25uZWN0XCIsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlLmlzQ29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGNvbm5lY3QgdG8gYXN5bmMgcHJvdmlkZXJcbiAgICAgICAgY29uc3QganNvblJwY0Nvbm5lY3Rpb24gPSBjcmVhdGVTdHJlYW1NaWRkbGV3YXJlKCk7XG4gICAgICAgIHB1bXAoanNvblJwY0Nvbm5lY3Rpb24uc3RyZWFtLCBtdXguY3JlYXRlU3RyZWFtKGpzb25ScGNTdHJlYW1OYW1lKSwganNvblJwY0Nvbm5lY3Rpb24uc3RyZWFtLCB0aGlzLl9oYW5kbGVTdHJlYW1EaXNjb25uZWN0LmJpbmQodGhpcywgXCJNZXRhTWFzayBScGNQcm92aWRlclwiKSk7XG4gICAgICAgIC8vIGhhbmRsZSBSUEMgcmVxdWVzdHMgdmlhIGRhcHAtc2lkZSBycGMgZW5naW5lXG4gICAgICAgIGNvbnN0IHJwY0VuZ2luZSA9IG5ldyBKUlBDRW5naW5lKCk7XG4gICAgICAgIHJwY0VuZ2luZS5wdXNoKGNyZWF0ZUlkUmVtYXBNaWRkbGV3YXJlKCkpO1xuICAgICAgICBycGNFbmdpbmUucHVzaChjcmVhdGVFcnJvck1pZGRsZXdhcmUoKSk7XG4gICAgICAgIHJwY0VuZ2luZS5wdXNoKGpzb25ScGNDb25uZWN0aW9uLm1pZGRsZXdhcmUpO1xuICAgICAgICB0aGlzLl9ycGNFbmdpbmUgPSBycGNFbmdpbmU7XG4gICAgICAgIC8vIGpzb24gcnBjIG5vdGlmaWNhdGlvbiBsaXN0ZW5lclxuICAgICAgICBqc29uUnBjQ29ubmVjdGlvbi5ldmVudHMub24oXCJub3RpZmljYXRpb25cIiwgKHBheWxvYWQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgbWV0aG9kLCBwYXJhbXMgfSA9IHBheWxvYWQ7XG4gICAgICAgICAgICBpZiAobWV0aG9kID09PSBcIndhbGxldF9hY2NvdW50c0NoYW5nZWRcIikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUFjY291bnRzQ2hhbmdlZChwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWV0aG9kID09PSBcIndhbGxldF91bmxvY2tTdGF0ZUNoYW5nZWRcIikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZVVubG9ja1N0YXRlQ2hhbmdlZChwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWV0aG9kID09PSBcIndhbGxldF9jaGFpbkNoYW5nZWRcIikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUNoYWluQ2hhbmdlZChwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoRU1JVFRFRF9OT1RJRklDQVRJT05TLmluY2x1ZGVzKHBheWxvYWQubWV0aG9kKSkge1xuICAgICAgICAgICAgICAgIC8vIEVJUCAxMTkzIHN1YnNjcmlwdGlvbnMsIHBlciBldGgtanNvbi1ycGMtZmlsdGVycy9zdWJzY3JpcHRpb25NYW5hZ2VyXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZGF0YVwiLCBwYXlsb2FkKTsgLy8gZGVwcmVjYXRlZFxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcIm5vdGlmaWNhdGlvblwiLCBwYXJhbXMucmVzdWx0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJtZXNzYWdlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBwYXJhbXMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBCYWNrd2FyZCBjb21wYXRpYmlsaXR5IGZvciBvbGRlciBub24gRUlQIDExOTMgc3Vic2NyaXB0aW9uc1xuICAgICAgICAgICAgLy8gdGhpcy5lbWl0KCdkYXRhJywgbnVsbCwgcGF5bG9hZClcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCBwdWJsaWNDb25maWdTdG9yZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9zZW50V2FybmluZ3MucHVibGljQ29uZmlnU3RvcmUpIHtcbiAgICAgICAgICAgIGxvZy53YXJuKG1lc3NhZ2VzLndhcm5pbmdzLnB1YmxpY0NvbmZpZ1N0b3JlKTtcbiAgICAgICAgICAgIHRoaXMuX3NlbnRXYXJuaW5ncy5wdWJsaWNDb25maWdTdG9yZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3B1YmxpY0NvbmZpZ1N0b3JlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGlucGFnZSBwcm92aWRlciBpcyBjb25uZWN0ZWQgdG8gVG9ydXMuXG4gICAgICovXG4gICAgaXNDb25uZWN0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZS5pc0Nvbm5lY3RlZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3VibWl0cyBhbiBSUEMgcmVxdWVzdCBmb3IgdGhlIGdpdmVuIG1ldGhvZCwgd2l0aCB0aGUgZ2l2ZW4gcGFyYW1zLlxuICAgICAqIFJlc29sdmVzIHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgbWV0aG9kIGNhbGwsIG9yIHJlamVjdHMgb24gZXJyb3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXJncyAtIFRoZSBSUEMgcmVxdWVzdCBhcmd1bWVudHMuXG4gICAgICogQHJldHVybnMgQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBSUEMgbWV0aG9kLFxuICAgICAqIG9yIHJlamVjdHMgaWYgYW4gZXJyb3IgaXMgZW5jb3VudGVyZWQuXG4gICAgICovXG4gICAgcmVxdWVzdChhcmdzKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBpZiAoIWFyZ3MgfHwgdHlwZW9mIGFyZ3MgIT09IFwib2JqZWN0XCIgfHwgQXJyYXkuaXNBcnJheShhcmdzKSkge1xuICAgICAgICAgICAgICAgIHRocm93IGV0aEVycm9ycy5ycGMuaW52YWxpZFJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlcy5lcnJvcnMuaW52YWxpZFJlcXVlc3RBcmdzKCksXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGFyZ3MsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IG1ldGhvZCwgcGFyYW1zIH0gPSBhcmdzO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXRob2QgIT09IFwic3RyaW5nXCIgfHwgbWV0aG9kLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRocm93IGV0aEVycm9ycy5ycGMuaW52YWxpZFJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlcy5lcnJvcnMuaW52YWxpZFJlcXVlc3RNZXRob2QoKSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogYXJncyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJhbXMgIT09IHVuZGVmaW5lZCAmJiAhQXJyYXkuaXNBcnJheShwYXJhbXMpICYmICh0eXBlb2YgcGFyYW1zICE9PSBcIm9iamVjdFwiIHx8IHBhcmFtcyA9PT0gbnVsbCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBldGhFcnJvcnMucnBjLmludmFsaWRSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZXMuZXJyb3JzLmludmFsaWRSZXF1ZXN0UGFyYW1zKCksXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGFyZ3MsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JwY1JlcXVlc3QoeyBtZXRob2QsIHBhcmFtcyB9LCBnZXRScGNQcm9taXNlQ2FsbGJhY2socmVzb2x2ZSwgcmVqZWN0KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1Ym1pdHMgYW4gUlBDIHJlcXVlc3QgcGVyIHRoZSBnaXZlbiBKU09OLVJQQyByZXF1ZXN0IG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXlsb2FkIC0gVGhlIFJQQyByZXF1ZXN0IG9iamVjdC5cbiAgICAgKiBAcGFyYW0gY2IgLSBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICovXG4gICAgc2VuZEFzeW5jKHBheWxvYWQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX3JwY1JlcXVlc3QocGF5bG9hZCwgY2FsbGJhY2spO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXZSBvdmVycmlkZSB0aGUgZm9sbG93aW5nIGV2ZW50IG1ldGhvZHMgc28gdGhhdCB3ZSBjYW4gd2FybiBjb25zdW1lcnNcbiAgICAgKiBhYm91dCBkZXByZWNhdGVkIGV2ZW50czpcbiAgICAgKiAgIGFkZExpc3RlbmVyLCBvbiwgb25jZSwgcHJlcGVuZExpc3RlbmVyLCBwcmVwZW5kT25jZUxpc3RlbmVyXG4gICAgICovXG4gICAgYWRkTGlzdGVuZXIoZXZlbnROYW1lLCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl93YXJuT2ZEZXByZWNhdGlvbihldmVudE5hbWUpO1xuICAgICAgICByZXR1cm4gc3VwZXIuYWRkTGlzdGVuZXIoZXZlbnROYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuICAgIG9uKGV2ZW50TmFtZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fd2Fybk9mRGVwcmVjYXRpb24oZXZlbnROYW1lKTtcbiAgICAgICAgcmV0dXJuIHN1cGVyLm9uKGV2ZW50TmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgICBvbmNlKGV2ZW50TmFtZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fd2Fybk9mRGVwcmVjYXRpb24oZXZlbnROYW1lKTtcbiAgICAgICAgcmV0dXJuIHN1cGVyLm9uY2UoZXZlbnROYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuICAgIHByZXBlbmRMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX3dhcm5PZkRlcHJlY2F0aW9uKGV2ZW50TmFtZSk7XG4gICAgICAgIHJldHVybiBzdXBlci5wcmVwZW5kTGlzdGVuZXIoZXZlbnROYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuICAgIHByZXBlbmRPbmNlTGlzdGVuZXIoZXZlbnROYW1lLCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl93YXJuT2ZEZXByZWNhdGlvbihldmVudE5hbWUpO1xuICAgICAgICByZXR1cm4gc3VwZXIucHJlcGVuZE9uY2VMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICB9XG4gICAgLy8gUHJpdmF0ZSBNZXRob2RzXG4gICAgLy89ID09PT09PT09PT09PT09PT09PT1cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvciBoZWxwZXIuXG4gICAgICogUG9wdWxhdGVzIGluaXRpYWwgc3RhdGUgYnkgY2FsbGluZyAnd2FsbGV0X2dldFByb3ZpZGVyU3RhdGUnIGFuZCBlbWl0c1xuICAgICAqIG5lY2Vzc2FyeSBldmVudHMuXG4gICAgICovXG4gICAgX2luaXRpYWxpemVTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBhY2NvdW50cywgY2hhaW5JZCwgaXNVbmxvY2tlZCwgbmV0d29ya1ZlcnNpb24gfSA9ICh5aWVsZCB0aGlzLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwid2FsbGV0X2dldFByb3ZpZGVyU3RhdGVcIixcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgLy8gaW5kaWNhdGUgdGhhdCB3ZSd2ZSBjb25uZWN0ZWQsIGZvciBFSVAtMTE5MyBjb21wbGlhbmNlXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiY29ubmVjdFwiLCB7IGNoYWluSWQgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlQ2hhaW5DaGFuZ2VkKHsgY2hhaW5JZCwgbmV0d29ya1ZlcnNpb24gfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlVW5sb2NrU3RhdGVDaGFuZ2VkKHsgYWNjb3VudHMsIGlzVW5sb2NrZWQgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlQWNjb3VudHNDaGFuZ2VkKGFjY291bnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGxvZy5lcnJvcihcIk1ldGFNYXNrOiBGYWlsZWQgdG8gZ2V0IGluaXRpYWwgc3RhdGUuIFBsZWFzZSByZXBvcnQgdGhpcyBidWcuXCIsIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIGxvZy5pbmZvKFwiaW5pdGlhbGl6ZWQgc3RhdGVcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcIl9pbml0aWFsaXplZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludGVybmFsIFJQQyBtZXRob2QuIEZvcndhcmRzIHJlcXVlc3RzIHRvIGJhY2tncm91bmQgdmlhIHRoZSBSUEMgZW5naW5lLlxuICAgICAqIEFsc28gcmVtYXAgaWRzIGluYm91bmQgYW5kIG91dGJvdW5kLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBheWxvYWQgLSBUaGUgUlBDIHJlcXVlc3Qgb2JqZWN0LlxuICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIFRoZSBjb25zdW1lcidzIGNhbGxiYWNrLlxuICAgICAqIEBwYXJhbSBpc0ludGVybmFsIC0gZmFsc2UgLSBXaGV0aGVyIHRoZSByZXF1ZXN0IGlzIGludGVybmFsLlxuICAgICAqL1xuICAgIF9ycGNSZXF1ZXN0KHBheWxvYWQsIGNhbGxiYWNrLCBpc0ludGVybmFsID0gZmFsc2UpIHtcbiAgICAgICAgbGV0IGNiID0gY2FsbGJhY2s7XG4gICAgICAgIGNvbnN0IF9wYXlsb2FkID0gcGF5bG9hZDtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KF9wYXlsb2FkKSkge1xuICAgICAgICAgICAgaWYgKCFfcGF5bG9hZC5qc29ucnBjKSB7XG4gICAgICAgICAgICAgICAgX3BheWxvYWQuanNvbnJwYyA9IFwiMi4wXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX3BheWxvYWQubWV0aG9kID09PSBcImV0aF9hY2NvdW50c1wiIHx8IF9wYXlsb2FkLm1ldGhvZCA9PT0gXCJldGhfcmVxdWVzdEFjY291bnRzXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBoYW5kbGUgYWNjb3VudHMgY2hhbmdpbmdcbiAgICAgICAgICAgICAgICBjYiA9IChlcnIsIHJlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVBY2NvdW50c0NoYW5nZWQocmVzLnJlc3VsdCB8fCBbXSwgX3BheWxvYWQubWV0aG9kID09PSBcImV0aF9hY2NvdW50c1wiLCBpc0ludGVybmFsKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLCByZXMpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChfcGF5bG9hZC5tZXRob2QgPT09IFwid2FsbGV0X2dldFByb3ZpZGVyU3RhdGVcIikge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JwY0VuZ2luZS5oYW5kbGUocGF5bG9hZCwgY2IpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRyeVByZW9wZW5IYW5kbGUoX3BheWxvYWQsIGNiKTtcbiAgICB9XG4gICAgc2VuZChtZXRob2RPclBheWxvYWQsIGNhbGxiYWNrT3JBcmdzKSB7XG4gICAgICAgIGlmICghdGhpcy5fc2VudFdhcm5pbmdzLnNlbmQpIHtcbiAgICAgICAgICAgIGxvZy53YXJuKG1lc3NhZ2VzLndhcm5pbmdzLnNlbmREZXByZWNhdGlvbik7XG4gICAgICAgICAgICB0aGlzLl9zZW50V2FybmluZ3Muc2VuZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBtZXRob2RPclBheWxvYWQgPT09IFwic3RyaW5nXCIgJiYgKCFjYWxsYmFja09yQXJncyB8fCBBcnJheS5pc0FycmF5KGNhbGxiYWNrT3JBcmdzKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcnBjUmVxdWVzdCh7IG1ldGhvZDogbWV0aG9kT3JQYXlsb2FkLCBwYXJhbXM6IGNhbGxiYWNrT3JBcmdzIH0sIGdldFJwY1Byb21pc2VDYWxsYmFjayhyZXNvbHZlLCByZWplY3QsIGZhbHNlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXRob2RPclBheWxvYWQgJiYgdHlwZW9mIG1ldGhvZE9yUGF5bG9hZCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgY2FsbGJhY2tPckFyZ3MgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JwY1JlcXVlc3QobWV0aG9kT3JQYXlsb2FkLCBjYWxsYmFja09yQXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbmRTeW5jKG1ldGhvZE9yUGF5bG9hZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERFUFJFQ0FURUQuXG4gICAgICogSW50ZXJuYWwgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgbWV0aG9kLCB1c2VkIGluIHNlbmQuXG4gICAgICovXG4gICAgX3NlbmRTeW5jKHBheWxvYWQpIHtcbiAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgc3dpdGNoIChwYXlsb2FkLm1ldGhvZCkge1xuICAgICAgICAgICAgY2FzZSBcImV0aF9hY2NvdW50c1wiOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuc2VsZWN0ZWRBZGRyZXNzID8gW3RoaXMuc2VsZWN0ZWRBZGRyZXNzXSA6IFtdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImV0aF9jb2luYmFzZVwiOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuc2VsZWN0ZWRBZGRyZXNzIHx8IG51bGw7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZXRoX3VuaW5zdGFsbEZpbHRlclwiOlxuICAgICAgICAgICAgICAgIHRoaXMuX3JwY1JlcXVlc3QocGF5bG9hZCwgTk9PUCk7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJuZXRfdmVyc2lvblwiOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubmV0d29ya1ZlcnNpb24gfHwgbnVsbDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2VzLmVycm9ycy51bnN1cHBvcnRlZFN5bmMocGF5bG9hZC5tZXRob2QpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHBheWxvYWQuaWQsXG4gICAgICAgICAgICBqc29ucnBjOiBwYXlsb2FkLmpzb25ycGMsXG4gICAgICAgICAgICByZXN1bHQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIHByb3ZpZGVyIGJlY29tZXMgY29ubmVjdGVkLCB1cGRhdGVzIGludGVybmFsIHN0YXRlIGFuZCBlbWl0c1xuICAgICAqIHJlcXVpcmVkIGV2ZW50cy4gSWRlbXBvdGVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjaGFpbklkIC0gVGhlIElEIG9mIHRoZSBuZXdseSBjb25uZWN0ZWQgY2hhaW4uXG4gICAgICogZW1pdHMgTWV0YU1hc2tJbnBhZ2VQcm92aWRlciNjb25uZWN0XG4gICAgICovXG4gICAgX2hhbmRsZUNvbm5lY3QoY2hhaW5JZCkge1xuICAgICAgICBpZiAoIXRoaXMuX3N0YXRlLmlzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZS5pc0Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJjb25uZWN0XCIsIHsgY2hhaW5JZCB9KTtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyhtZXNzYWdlcy5pbmZvLmNvbm5lY3RlZChjaGFpbklkKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUgcHJvdmlkZXIgYmVjb21lcyBkaXNjb25uZWN0ZWQsIHVwZGF0ZXMgaW50ZXJuYWwgc3RhdGUgYW5kIGVtaXRzXG4gICAgICogcmVxdWlyZWQgZXZlbnRzLiBJZGVtcG90ZW50IHdpdGggcmVzcGVjdCB0byB0aGUgaXNSZWNvdmVyYWJsZSBwYXJhbWV0ZXIuXG4gICAgICpcbiAgICAgKiBFcnJvciBjb2RlcyBwZXIgdGhlIENsb3NlRXZlbnQgc3RhdHVzIGNvZGVzIGFzIHJlcXVpcmVkIGJ5IEVJUC0xMTkzOlxuICAgICAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DbG9zZUV2ZW50I1N0YXR1c19jb2Rlc1xuICAgICAqXG4gICAgICogQHBhcmFtIGlzUmVjb3ZlcmFibGUgLSBXaGV0aGVyIHRoZSBkaXNjb25uZWN0aW9uIGlzIHJlY292ZXJhYmxlLlxuICAgICAqIEBwYXJhbSBlcnJvck1lc3NhZ2UgLSBBIGN1c3RvbSBlcnJvciBtZXNzYWdlLlxuICAgICAqIGVtaXRzIE1ldGFNYXNrSW5wYWdlUHJvdmlkZXIjZGlzY29ubmVjdFxuICAgICAqL1xuICAgIF9oYW5kbGVEaXNjb25uZWN0KGlzUmVjb3ZlcmFibGUsIGVycm9yTWVzc2FnZSkge1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUuaXNDb25uZWN0ZWQgfHwgKCF0aGlzLl9zdGF0ZS5pc1Blcm1hbmVudGx5RGlzY29ubmVjdGVkICYmICFpc1JlY292ZXJhYmxlKSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUuaXNDb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCBlcnJvcjtcbiAgICAgICAgICAgIGlmIChpc1JlY292ZXJhYmxlKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IgPSBuZXcgRXRoZXJldW1ScGNFcnJvcigxMDEzLCAvLyBUcnkgYWdhaW4gbGF0ZXJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgfHwgbWVzc2FnZXMuZXJyb3JzLmRpc2Nvbm5lY3RlZCgpKTtcbiAgICAgICAgICAgICAgICBsb2cuZGVidWcoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZXJyb3IgPSBuZXcgRXRoZXJldW1ScGNFcnJvcigxMDExLCAvLyBJbnRlcm5hbCBlcnJvclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSB8fCBtZXNzYWdlcy5lcnJvcnMucGVybWFuZW50bHlEaXNjb25uZWN0ZWQoKSk7XG4gICAgICAgICAgICAgICAgbG9nLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYWluSWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlLmFjY291bnRzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkQWRkcmVzcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUuaXNVbmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlLmlzUGVybWFuZW50bHlEaXNjb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lbWl0KFwiZGlzY29ubmVjdFwiLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gY29ubmVjdGlvbiBpcyBsb3N0IHRvIGNyaXRpY2FsIHN0cmVhbXMuXG4gICAgICpcbiAgICAgKiBlbWl0cyBNZXRhbWFza0lucGFnZVByb3ZpZGVyI2Rpc2Nvbm5lY3RcbiAgICAgKi9cbiAgICBfaGFuZGxlU3RyZWFtRGlzY29ubmVjdChzdHJlYW1OYW1lLCBlcnJvcikge1xuICAgICAgICBsb2dTdHJlYW1EaXNjb25uZWN0V2FybmluZyhzdHJlYW1OYW1lLCBlcnJvciwgdGhpcyk7XG4gICAgICAgIHRoaXMuX2hhbmRsZURpc2Nvbm5lY3QoZmFsc2UsIGVycm9yID8gZXJyb3IubWVzc2FnZSA6IHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIGFjY291bnRzIG1heSBoYXZlIGNoYW5nZWQuXG4gICAgICovXG4gICAgX2hhbmRsZUFjY291bnRzQ2hhbmdlZChhY2NvdW50cywgaXNFdGhBY2NvdW50cyA9IGZhbHNlLCBpc0ludGVybmFsID0gZmFsc2UpIHtcbiAgICAgICAgLy8gZGVmZW5zaXZlIHByb2dyYW1taW5nXG4gICAgICAgIGxldCBmaW5hbEFjY291bnRzID0gYWNjb3VudHM7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShmaW5hbEFjY291bnRzKSkge1xuICAgICAgICAgICAgbG9nLmVycm9yKFwiTWV0YU1hc2s6IFJlY2VpdmVkIG5vbi1hcnJheSBhY2NvdW50cyBwYXJhbWV0ZXIuIFBsZWFzZSByZXBvcnQgdGhpcyBidWcuXCIsIGZpbmFsQWNjb3VudHMpO1xuICAgICAgICAgICAgZmluYWxBY2NvdW50cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgYWNjb3VudCBvZiBhY2NvdW50cykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhY2NvdW50ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgbG9nLmVycm9yKFwiTWV0YU1hc2s6IFJlY2VpdmVkIG5vbi1zdHJpbmcgYWNjb3VudC4gUGxlYXNlIHJlcG9ydCB0aGlzIGJ1Zy5cIiwgYWNjb3VudHMpO1xuICAgICAgICAgICAgICAgIGZpbmFsQWNjb3VudHMgPSBbXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBlbWl0IGFjY291bnRzQ2hhbmdlZCBpZiBhbnl0aGluZyBhYm91dCB0aGUgYWNjb3VudHMgYXJyYXkgaGFzIGNoYW5nZWRcbiAgICAgICAgaWYgKCFkZXF1YWwodGhpcy5fc3RhdGUuYWNjb3VudHMsIGZpbmFsQWNjb3VudHMpKSB7XG4gICAgICAgICAgICAvLyB3ZSBzaG91bGQgYWx3YXlzIGhhdmUgdGhlIGNvcnJlY3QgYWNjb3VudHMgZXZlbiBiZWZvcmUgZXRoX2FjY291bnRzXG4gICAgICAgICAgICAvLyByZXR1cm5zLCBleGNlcHQgaW4gY2FzZXMgd2hlcmUgaXNJbnRlcm5hbCBpcyB0cnVlXG4gICAgICAgICAgICBpZiAoaXNFdGhBY2NvdW50cyAmJiBBcnJheS5pc0FycmF5KHRoaXMuX3N0YXRlLmFjY291bnRzKSAmJiB0aGlzLl9zdGF0ZS5hY2NvdW50cy5sZW5ndGggPiAwICYmICFpc0ludGVybmFsKSB7XG4gICAgICAgICAgICAgICAgbG9nLmVycm9yKCdNZXRhTWFzazogXCJldGhfYWNjb3VudHNcIiB1bmV4cGVjdGVkbHkgdXBkYXRlZCBhY2NvdW50cy4gUGxlYXNlIHJlcG9ydCB0aGlzIGJ1Zy4nLCBmaW5hbEFjY291bnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3N0YXRlLmFjY291bnRzID0gZmluYWxBY2NvdW50cztcbiAgICAgICAgICAgIHRoaXMuZW1pdChcImFjY291bnRzQ2hhbmdlZFwiLCBmaW5hbEFjY291bnRzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBoYW5kbGUgc2VsZWN0ZWRBZGRyZXNzXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkQWRkcmVzcyAhPT0gZmluYWxBY2NvdW50c1swXSkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEFkZHJlc3MgPSBmaW5hbEFjY291bnRzWzBdIHx8IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBvbiByZWNlaXB0IG9mIGEgbmV3IGNoYWluSWQgYW5kIG5ldHdvcmtWZXJzaW9uLCBlbWl0cyBjb3JyZXNwb25kaW5nXG4gICAgICogZXZlbnRzIGFuZCBzZXRzIHJlbGV2YW50IHB1YmxpYyBzdGF0ZS5cbiAgICAgKiBEb2VzIG5vdGhpbmcgaWYgbmVpdGhlciB0aGUgY2hhaW5JZCBub3IgdGhlIG5ldHdvcmtWZXJzaW9uIGFyZSBkaWZmZXJlbnRcbiAgICAgKiBmcm9tIGV4aXN0aW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIGVtaXRzIE1ldGFtYXNrSW5wYWdlUHJvdmlkZXIjY2hhaW5DaGFuZ2VkXG4gICAgICogQHBhcmFtIG5ldHdvcmtJbmZvIC0gQW4gb2JqZWN0IHdpdGggbmV0d29yayBpbmZvLlxuICAgICAqL1xuICAgIF9oYW5kbGVDaGFpbkNoYW5nZWQoeyBjaGFpbklkLCBuZXR3b3JrVmVyc2lvbiB9ID0ge30pIHtcbiAgICAgICAgaWYgKCFjaGFpbklkIHx8ICFuZXR3b3JrVmVyc2lvbikge1xuICAgICAgICAgICAgbG9nLmVycm9yKFwiTWV0YU1hc2s6IFJlY2VpdmVkIGludmFsaWQgbmV0d29yayBwYXJhbWV0ZXJzLiBQbGVhc2UgcmVwb3J0IHRoaXMgYnVnLlwiLCB7IGNoYWluSWQsIG5ldHdvcmtWZXJzaW9uIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXR3b3JrVmVyc2lvbiA9PT0gXCJsb2FkaW5nXCIpIHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZURpc2Nvbm5lY3QodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVDb25uZWN0KGNoYWluSWQpO1xuICAgICAgICAgICAgaWYgKGNoYWluSWQgIT09IHRoaXMuY2hhaW5JZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhaW5JZCA9IGNoYWluSWQ7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXRlLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImNoYWluQ2hhbmdlZFwiLCB0aGlzLmNoYWluSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcG9uIHJlY2VpcHQgb2YgYSBuZXcgaXNVbmxvY2tlZCBzdGF0ZSwgc2V0cyByZWxldmFudCBwdWJsaWMgc3RhdGUuXG4gICAgICogQ2FsbHMgdGhlIGFjY291bnRzIGNoYW5nZWQgaGFuZGxlciB3aXRoIHRoZSByZWNlaXZlZCBhY2NvdW50cywgb3IgYW4gZW1wdHlcbiAgICAgKiBhcnJheS5cbiAgICAgKlxuICAgICAqIERvZXMgbm90aGluZyBpZiB0aGUgcmVjZWl2ZWQgdmFsdWUgaXMgZXF1YWwgdG8gdGhlIGV4aXN0aW5nIHZhbHVlLlxuICAgICAqIFRoZXJlIGFyZSBubyBsb2NrL3VubG9jayBldmVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0cyAtIE9wdGlvbnMgYmFnLlxuICAgICAqL1xuICAgIF9oYW5kbGVVbmxvY2tTdGF0ZUNoYW5nZWQoeyBhY2NvdW50cywgaXNVbmxvY2tlZCB9ID0ge30pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpc1VubG9ja2VkICE9PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgbG9nLmVycm9yKFwiTWV0YU1hc2s6IFJlY2VpdmVkIGludmFsaWQgaXNVbmxvY2tlZCBwYXJhbWV0ZXIuIFBsZWFzZSByZXBvcnQgdGhpcyBidWcuXCIsIHsgaXNVbmxvY2tlZCB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNVbmxvY2tlZCAhPT0gdGhpcy5fc3RhdGUuaXNVbmxvY2tlZCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUuaXNVbmxvY2tlZCA9IGlzVW5sb2NrZWQ7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVBY2NvdW50c0NoYW5nZWQoYWNjb3VudHMgfHwgW10pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdhcm5zIG9mIGRlcHJlY2F0aW9uIGZvciB0aGUgZ2l2ZW4gZXZlbnQsIGlmIGFwcGxpY2FibGUuXG4gICAgICovXG4gICAgX3dhcm5PZkRlcHJlY2F0aW9uKGV2ZW50TmFtZSkge1xuICAgICAgICBpZiAodGhpcy5fc2VudFdhcm5pbmdzLmV2ZW50c1tldmVudE5hbWVdID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbG9nLndhcm4obWVzc2FnZXMud2FybmluZ3MuZXZlbnRzW2V2ZW50TmFtZV0pO1xuICAgICAgICAgICAgdGhpcy5fc2VudFdhcm5pbmdzLmV2ZW50c1tldmVudE5hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblRvcnVzSW5wYWdlUHJvdmlkZXIuX2RlZmF1bHRTdGF0ZSA9IHtcbiAgICBhY2NvdW50czogbnVsbCxcbiAgICBpc0Nvbm5lY3RlZDogZmFsc2UsXG4gICAgaXNVbmxvY2tlZDogZmFsc2UsXG4gICAgaW5pdGlhbGl6ZWQ6IGZhbHNlLFxuICAgIGlzUGVybWFuZW50bHlEaXNjb25uZWN0ZWQ6IGZhbHNlLFxuICAgIGhhc0VtaXR0ZWRDb25uZWN0aW9uOiBmYWxzZSxcbn07XG5cbmNvbnN0IGRlZmF1bHRzID0gKG9wdGlvbnMpID0+ICh7XG4gICAgYWxnb3JpdGhtczogb3B0aW9ucy5hbGdvcml0aG1zIHx8IFtcInNoYTI1NlwiXSxcbiAgICBkZWxpbWl0ZXI6IG9wdGlvbnMuZGVsaW1pdGVyIHx8IFwiIFwiLFxuICAgIGZ1bGw6IG9wdGlvbnMuZnVsbCB8fCBmYWxzZSxcbn0pO1xuLy8gR2VuZXJhdGUgbGlzdCBvZiBoYXNoZXNcbmNvbnN0IGhhc2hlcyA9IChvcHRpb25zLCBkYXRhKSA9PiB7XG4gICAgY29uc3QgaW50ZXJuYWxIYXNoZXMgPSB7fTtcbiAgICBvcHRpb25zLmFsZ29yaXRobXMuZm9yRWFjaCgoYWxnb3JpdGhtKSA9PiB7XG4gICAgICAgIGludGVybmFsSGFzaGVzW2FsZ29yaXRobV0gPSBjcmVhdGVIYXNoKGFsZ29yaXRobSkudXBkYXRlKGRhdGEsIFwidXRmOFwiKS5kaWdlc3QoXCJiYXNlNjRcIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIGludGVybmFsSGFzaGVzO1xufTtcbi8vIEJ1aWxkIGFuIGludGVncml0eSBzdHJpbmdcbmNvbnN0IGludGVncml0eSA9IChvcHRpb25zLCBzcmkpID0+IHtcbiAgICBsZXQgb3V0cHV0ID0gXCJcIjtcbiAgICAvLyBIYXNoIGxpc3RcbiAgICBvdXRwdXQgKz0gT2JqZWN0LmtleXMoc3JpLmhhc2hlcylcbiAgICAgICAgLm1hcCgoYWxnb3JpdGhtKSA9PiBgJHthbGdvcml0aG19LSR7c3JpLmhhc2hlc1thbGdvcml0aG1dfWApXG4gICAgICAgIC5qb2luKG9wdGlvbnMuZGVsaW1pdGVyKTtcbiAgICByZXR1cm4gb3V0cHV0O1xufTtcbmNvbnN0IG1haW4gPSAob3B0aW9ucywgZGF0YSkgPT4ge1xuICAgIC8vIERlZmF1bHRzXG4gICAgY29uc3QgZmluYWxPcHRpb25zID0gZGVmYXVsdHMob3B0aW9ucyk7XG4gICAgY29uc3Qgc3JpID0ge1xuICAgICAgICBoYXNoZXM6IGhhc2hlcyhmaW5hbE9wdGlvbnMsIGRhdGEpLFxuICAgICAgICBpbnRlZ3JpdHk6IHVuZGVmaW5lZCxcbiAgICB9O1xuICAgIHNyaS5pbnRlZ3JpdHkgPSBpbnRlZ3JpdHkoZmluYWxPcHRpb25zLCBzcmkpO1xuICAgIHJldHVybiBmaW5hbE9wdGlvbnMuZnVsbCA/IHNyaSA6IHNyaS5pbnRlZ3JpdHk7XG59O1xuXG5jbGFzcyBQb3B1cEhhbmRsZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKHsgdXJsLCB0YXJnZXQsIGZlYXR1cmVzIH0pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0IHx8IFwiX2JsYW5rXCI7XG4gICAgICAgIHRoaXMuZmVhdHVyZXMgPSBmZWF0dXJlcyB8fCBnZXRQb3B1cEZlYXR1cmVzKCk7XG4gICAgICAgIHRoaXMud2luZG93ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLndpbmRvd1RpbWVyID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmlDbG9zZWRXaW5kb3cgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fc2V0dXBUaW1lcigpO1xuICAgIH1cbiAgICBfc2V0dXBUaW1lcigpIHtcbiAgICAgICAgdGhpcy53aW5kb3dUaW1lciA9IE51bWJlcihzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy53aW5kb3cgJiYgdGhpcy53aW5kb3cuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLndpbmRvd1RpbWVyKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaUNsb3NlZFdpbmRvdykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJjbG9zZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5pQ2xvc2VkV2luZG93ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy53aW5kb3cgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy53aW5kb3cgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMud2luZG93VGltZXIpO1xuICAgICAgICB9LCA1MDApKTtcbiAgICB9XG4gICAgb3BlbigpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLndpbmRvdyA9IHdpbmRvdy5vcGVuKHRoaXMudXJsLmhyZWYsIHRoaXMudGFyZ2V0LCB0aGlzLmZlYXR1cmVzKTtcbiAgICAgICAgaWYgKChfYSA9IHRoaXMud2luZG93KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZm9jdXMpXG4gICAgICAgICAgICB0aGlzLndpbmRvdy5mb2N1cygpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLmlDbG9zZWRXaW5kb3cgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy53aW5kb3cpXG4gICAgICAgICAgICB0aGlzLndpbmRvdy5jbG9zZSgpO1xuICAgIH1cbiAgICByZWRpcmVjdChsb2NhdGlvblJlcGxhY2VPblJlZGlyZWN0KSB7XG4gICAgICAgIGlmIChsb2NhdGlvblJlcGxhY2VPblJlZGlyZWN0KSB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSh0aGlzLnVybC5ocmVmKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGhpcy51cmwuaHJlZjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGdpdmVuIGltYWdlIFVSTCBleGlzdHNcbiAqIEBwYXJhbSB1cmwgLSB0aGUgdXJsIG9mIHRoZSBpbWFnZVxuICogQHJldHVybnMgLSB3aGV0aGVyIHRoZSBpbWFnZSBleGlzdHNcbiAqL1xuZnVuY3Rpb24gaW1nRXhpc3RzKHVybCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgICAgICAgICAgaW1nLm9ubG9hZCA9ICgpID0+IHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICBpbWcub25lcnJvciA9ICgpID0+IHJlc29sdmUoZmFsc2UpO1xuICAgICAgICAgICAgaW1nLnNyYyA9IHVybDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vKipcbiAqIEV4dHJhY3RzIGEgbmFtZSBmb3IgdGhlIHNpdGUgZnJvbSB0aGUgRE9NXG4gKi9cbmNvbnN0IGdldFNpdGVOYW1lID0gKHdpbmRvdykgPT4ge1xuICAgIGNvbnN0IHsgZG9jdW1lbnQgfSA9IHdpbmRvdztcbiAgICBjb25zdCBzaXRlTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQgPiBtZXRhW3Byb3BlcnR5PVwib2c6c2l0ZV9uYW1lXCJdJyk7XG4gICAgaWYgKHNpdGVOYW1lKSB7XG4gICAgICAgIHJldHVybiBzaXRlTmFtZS5jb250ZW50O1xuICAgIH1cbiAgICBjb25zdCBtZXRhVGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkID4gbWV0YVtuYW1lPVwidGl0bGVcIl0nKTtcbiAgICBpZiAobWV0YVRpdGxlKSB7XG4gICAgICAgIHJldHVybiBtZXRhVGl0bGUuY29udGVudDtcbiAgICB9XG4gICAgaWYgKGRvY3VtZW50LnRpdGxlICYmIGRvY3VtZW50LnRpdGxlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LnRpdGxlO1xuICAgIH1cbiAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lO1xufTtcbi8qKlxuICogRXh0cmFjdHMgYW4gaWNvbiBmb3IgdGhlIHNpdGUgZnJvbSB0aGUgRE9NXG4gKi9cbmZ1bmN0aW9uIGdldFNpdGVJY29uKHdpbmRvdykge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IHsgZG9jdW1lbnQgfSA9IHdpbmRvdztcbiAgICAgICAgLy8gVXNlIHRoZSBzaXRlJ3MgZmF2aWNvbiBpZiBpdCBleGlzdHNcbiAgICAgICAgbGV0IGljb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkID4gbGlua1tyZWw9XCJzaG9ydGN1dCBpY29uXCJdJyk7XG4gICAgICAgIGlmIChpY29uICYmICh5aWVsZCBpbWdFeGlzdHMoaWNvbi5ocmVmKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpY29uLmhyZWY7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2VhcmNoIHRocm91Z2ggYXZhaWxhYmxlIGljb25zIGluIG5vIHBhcnRpY3VsYXIgb3JkZXJcbiAgICAgICAgaWNvbiA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaGVhZCA+IGxpbmtbcmVsPVwiaWNvblwiXScpKS5maW5kKChfaWNvbikgPT4gQm9vbGVhbihfaWNvbi5ocmVmKSk7XG4gICAgICAgIGlmIChpY29uICYmICh5aWVsZCBpbWdFeGlzdHMoaWNvbi5ocmVmKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpY29uLmhyZWY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSk7XG59XG4vKipcbiAqIEdldHMgc2l0ZSBtZXRhZGF0YSBhbmQgcmV0dXJucyBpdFxuICpcbiAqL1xuY29uc3QgZ2V0U2l0ZU1ldGFkYXRhID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgcmV0dXJuICh7XG4gICAgICAgIG5hbWU6IGdldFNpdGVOYW1lKHdpbmRvdyksXG4gICAgICAgIGljb246IHlpZWxkIGdldFNpdGVJY29uKHdpbmRvdyksXG4gICAgfSk7XG59KTtcbi8qKlxuICogU2VuZHMgc2l0ZSBtZXRhZGF0YSBvdmVyIGFuIFJQQyByZXF1ZXN0LlxuICovXG5mdW5jdGlvbiBzZW5kU2l0ZU1ldGFkYXRhKGVuZ2luZSkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBkb21haW5NZXRhZGF0YSA9IHlpZWxkIGdldFNpdGVNZXRhZGF0YSgpO1xuICAgICAgICAgICAgLy8gY2FsbCBlbmdpbmUuaGFuZGxlIGRpcmVjdGx5IHRvIGF2b2lkIG5vcm1hbCBSUEMgcmVxdWVzdCBoYW5kbGluZ1xuICAgICAgICAgICAgZW5naW5lLmhhbmRsZSh7XG4gICAgICAgICAgICAgICAganNvbnJwYzogXCIyLjBcIixcbiAgICAgICAgICAgICAgICBpZDogZ2V0UHJlb3Blbkluc3RhbmNlSWQoKSxcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFwid2FsbGV0X3NlbmREb21haW5NZXRhZGF0YVwiLFxuICAgICAgICAgICAgICAgIHBhcmFtczogZG9tYWluTWV0YWRhdGEsXG4gICAgICAgICAgICB9LCBOT09QKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGxvZy5lcnJvcih7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZXMuZXJyb3JzLnNlbmRTaXRlTWV0YWRhdGEoKSxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEVycm9yOiBlcnJvcixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmNvbnN0IGRlZmF1bHRWZXJpZmllcnMgPSB7XG4gICAgW0xPR0lOX1BST1ZJREVSLkdPT0dMRV06IHRydWUsXG4gICAgW0xPR0lOX1BST1ZJREVSLkZBQ0VCT09LXTogdHJ1ZSxcbiAgICBbTE9HSU5fUFJPVklERVIuUkVERElUXTogdHJ1ZSxcbiAgICBbTE9HSU5fUFJPVklERVIuVFdJVENIXTogdHJ1ZSxcbiAgICBbTE9HSU5fUFJPVklERVIuRElTQ09SRF06IHRydWUsXG59O1xuY29uc3QgaWZyYW1lSW50ZWdyaXR5ID0gXCJzaGEzODQtUzBUWGFTQ1g1UndvWG5mY2N0YTRwaG91d04xTk5SdElGTklJNURHb0s0YXBrVDVYWEo0RkhQTi9lRlpnRHh1V1wiO1xuY29uc3QgZXhwZWN0ZWRDYWNoZUNvbnRyb2xIZWFkZXIgPSBcIm1heC1hZ2U9MzYwMFwiO1xuY29uc3QgVU5TQUZFX01FVEhPRFMgPSBbXG4gICAgXCJldGhfc2VuZFRyYW5zYWN0aW9uXCIsXG4gICAgXCJldGhfc2lnblR5cGVkRGF0YVwiLFxuICAgIFwiZXRoX3NpZ25UeXBlZERhdGFfdjNcIixcbiAgICBcImV0aF9zaWduVHlwZWREYXRhX3Y0XCIsXG4gICAgXCJwZXJzb25hbF9zaWduXCIsXG4gICAgXCJldGhfZ2V0RW5jcnlwdGlvblB1YmxpY0tleVwiLFxuICAgIFwiZXRoX2RlY3J5cHRcIixcbl07XG5jb25zdCBpc0xvY2FsU3RvcmFnZUF2YWlsYWJsZSA9IHN0b3JhZ2VBdmFpbGFibGUoXCJsb2NhbFN0b3JhZ2VcIik7XG4vLyBwcmVsb2FkIGZvciBpZnJhbWUgZG9lc24ndCB3b3JrIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU5MzI2N1xuKGZ1bmN0aW9uIHByZUxvYWRJZnJhbWUoKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgdG9ydXNJZnJhbWVIdG1sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG4gICAgICAgICAgICBjb25zdCB7IHRvcnVzVXJsIH0gPSB5aWVsZCBnZXRUb3J1c1VybChcInByb2R1Y3Rpb25cIiwgeyBjaGVjazogZmFsc2UsIGhhc2g6IGlmcmFtZUludGVncml0eSwgdmVyc2lvbjogXCJcIiB9KTtcbiAgICAgICAgICAgIHRvcnVzSWZyYW1lSHRtbC5ocmVmID0gYCR7dG9ydXNVcmx9L3BvcHVwYDtcbiAgICAgICAgICAgIHRvcnVzSWZyYW1lSHRtbC5jcm9zc09yaWdpbiA9IFwiYW5vbnltb3VzXCI7XG4gICAgICAgICAgICB0b3J1c0lmcmFtZUh0bWwudHlwZSA9IFwidGV4dC9odG1sXCI7XG4gICAgICAgICAgICB0b3J1c0lmcmFtZUh0bWwucmVsID0gXCJwcmVmZXRjaFwiO1xuICAgICAgICAgICAgaWYgKHRvcnVzSWZyYW1lSHRtbC5yZWxMaXN0ICYmIHRvcnVzSWZyYW1lSHRtbC5yZWxMaXN0LnN1cHBvcnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRvcnVzSWZyYW1lSHRtbC5yZWxMaXN0LnN1cHBvcnRzKFwicHJlZmV0Y2hcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0b3J1c0lmcmFtZUh0bWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGxvZy53YXJuKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH0pO1xufSkoKTtcbmNsYXNzIFRvcnVzIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGJ1dHRvblBvc2l0aW9uID0gQlVUVE9OX1BPU0lUSU9OLkJPVFRPTV9MRUZULCBtb2RhbFpJbmRleCA9IDk5OTk5LCBhcGlLZXkgPSBcInRvcnVzLWRlZmF1bHRcIiB9ID0ge30pIHtcbiAgICAgICAgdGhpcy5idXR0b25Qb3NpdGlvbiA9IEJVVFRPTl9QT1NJVElPTi5CT1RUT01fTEVGVDtcbiAgICAgICAgdGhpcy5wYXltZW50UHJvdmlkZXJzID0gY29uZmlndXJhdGlvbi5wYXltZW50UHJvdmlkZXJzO1xuICAgICAgICB0aGlzLmJ1dHRvblBvc2l0aW9uID0gYnV0dG9uUG9zaXRpb247XG4gICAgICAgIHRoaXMudG9ydXNVcmwgPSBcIlwiO1xuICAgICAgICB0aGlzLmlzTG9nZ2VkSW4gPSBmYWxzZTsgLy8gZXRoZXJldW0uZW5hYmxlIHdvcmtpbmdcbiAgICAgICAgdGhpcy5pc0luaXRpYWxpemVkID0gZmFsc2U7IC8vIGluaXQgZG9uZVxuICAgICAgICB0aGlzLnRvcnVzV2lkZ2V0VmlzaWJpbGl0eSA9IHRydWU7XG4gICAgICAgIHRoaXMucmVxdWVzdGVkVmVyaWZpZXIgPSBcIlwiO1xuICAgICAgICB0aGlzLmN1cnJlbnRWZXJpZmllciA9IFwiXCI7XG4gICAgICAgIHRoaXMubm9kZURldGFpbE1hbmFnZXIgPSBuZXcgTm9kZURldGFpbE1hbmFnZXIoKTtcbiAgICAgICAgdGhpcy50b3J1c0pzID0gbmV3IFRvcnVzSnMoe1xuICAgICAgICAgICAgbWV0YWRhdGFIb3N0OiBcImh0dHBzOi8vbWV0YWRhdGEudG9yLnVzXCIsXG4gICAgICAgICAgICBhbGxvd0hvc3Q6IFwiaHR0cHM6Ly9zaWduZXIudG9yLnVzL2FwaS9hbGxvd1wiLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hcGlLZXkgPSBhcGlLZXk7XG4gICAgICAgIFRvcnVzSnMuc2V0QVBJS2V5KGFwaUtleSk7XG4gICAgICAgIHNldEFQSUtleShhcGlLZXkpO1xuICAgICAgICB0aGlzLm1vZGFsWkluZGV4ID0gbW9kYWxaSW5kZXg7XG4gICAgICAgIHRoaXMuYWxlcnRaSW5kZXggPSBtb2RhbFpJbmRleCArIDEwMDA7XG4gICAgICAgIHRoaXMuaXNJZnJhbWVGdWxsU2NyZWVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGFwcFN0b3JhZ2VLZXkgPSBcIlwiO1xuICAgIH1cbiAgICBpbml0KHsgYnVpbGRFbnYgPSBUT1JVU19CVUlMRF9FTlYuUFJPRFVDVElPTiwgZW5hYmxlTG9nZ2luZyA9IGZhbHNlLCBcbiAgICAvLyBkZXByZWNhdGVkOiB1c2UgbG9naW5Db25maWcgaW5zdGVhZFxuICAgIGVuYWJsZWRWZXJpZmllcnMgPSBkZWZhdWx0VmVyaWZpZXJzLCBuZXR3b3JrID0ge1xuICAgICAgICBob3N0OiBcIm1haW5uZXRcIixcbiAgICAgICAgY2hhaW5JZDogbnVsbCxcbiAgICAgICAgbmV0d29ya05hbWU6IFwiXCIsXG4gICAgICAgIGJsb2NrRXhwbG9yZXI6IFwiXCIsXG4gICAgICAgIHRpY2tlcjogXCJcIixcbiAgICAgICAgdGlja2VyTmFtZTogXCJcIixcbiAgICB9LCBsb2dpbkNvbmZpZyA9IHt9LCBzaG93VG9ydXNCdXR0b24gPSB0cnVlLCBpbnRlZ3JpdHkgPSB7XG4gICAgICAgIGNoZWNrOiBmYWxzZSxcbiAgICAgICAgaGFzaDogaWZyYW1lSW50ZWdyaXR5LFxuICAgICAgICB2ZXJzaW9uOiBcIlwiLFxuICAgIH0sIHdoaXRlTGFiZWwsIHNraXBUS2V5ID0gZmFsc2UsIHVzZUxvY2FsU3RvcmFnZSA9IGZhbHNlLCB9ID0ge30pIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzSW5pdGlhbGl6ZWQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQWxyZWFkeSBpbml0aWFsaXplZFwiKTtcbiAgICAgICAgICAgIGNvbnN0IHsgdG9ydXNVcmwsIGxvZ0xldmVsIH0gPSB5aWVsZCBnZXRUb3J1c1VybChidWlsZEVudiwgaW50ZWdyaXR5KTtcbiAgICAgICAgICAgIGxvZy5pbmZvKHRvcnVzVXJsLCBcInVybCBsb2FkZWRcIik7XG4gICAgICAgICAgICB0aGlzLnRvcnVzVXJsID0gdG9ydXNVcmw7XG4gICAgICAgICAgICB0aGlzLndoaXRlTGFiZWwgPSB3aGl0ZUxhYmVsO1xuICAgICAgICAgICAgbG9nLnNldERlZmF1bHRMZXZlbChsb2dMZXZlbCk7XG4gICAgICAgICAgICBpZiAoZW5hYmxlTG9nZ2luZylcbiAgICAgICAgICAgICAgICBsb2cuZW5hYmxlQWxsKCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgbG9nLmRpc2FibGVBbGwoKTtcbiAgICAgICAgICAgIHRoaXMudG9ydXNXaWRnZXRWaXNpYmlsaXR5ID0gc2hvd1RvcnVzQnV0dG9uO1xuICAgICAgICAgICAgbGV0IGRhcHBTdG9yYWdlS2V5ID0gXCJcIjtcbiAgICAgICAgICAgIGlmIChpc0xvY2FsU3RvcmFnZUF2YWlsYWJsZSAmJiB1c2VMb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdG9yZWRLZXkgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oY29uZmlndXJhdGlvbi5sb2NhbFN0b3JhZ2VLZXkpO1xuICAgICAgICAgICAgICAgIGlmIChzdG9yZWRLZXkpXG4gICAgICAgICAgICAgICAgICAgIGRhcHBTdG9yYWdlS2V5ID0gc3RvcmVkS2V5O1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBnZW5lcmF0ZWRLZXkgPSBgdG9ydXMtYXBwLSR7Z2V0UHJlb3Blbkluc3RhbmNlSWQoKX1gO1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oY29uZmlndXJhdGlvbi5sb2NhbFN0b3JhZ2VLZXksIGdlbmVyYXRlZEtleSk7XG4gICAgICAgICAgICAgICAgICAgIGRhcHBTdG9yYWdlS2V5ID0gZ2VuZXJhdGVkS2V5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGFwcFN0b3JhZ2VLZXkgPSBkYXBwU3RvcmFnZUtleTtcbiAgICAgICAgICAgIGNvbnN0IHRvcnVzSWZyYW1lVXJsID0gbmV3IFVSTCh0b3J1c1VybCk7XG4gICAgICAgICAgICBpZiAodG9ydXNJZnJhbWVVcmwucGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpKVxuICAgICAgICAgICAgICAgIHRvcnVzSWZyYW1lVXJsLnBhdGhuYW1lICs9IFwicG9wdXBcIjtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0b3J1c0lmcmFtZVVybC5wYXRobmFtZSArPSBcIi9wb3B1cFwiO1xuICAgICAgICAgICAgaWYgKGRhcHBTdG9yYWdlS2V5KSB7XG4gICAgICAgICAgICAgICAgdG9ydXNJZnJhbWVVcmwuaGFzaCA9IGAjZGFwcFN0b3JhZ2VLZXk9JHtkYXBwU3RvcmFnZUtleX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWZyYW1lIGNvZGVcbiAgICAgICAgICAgIHRoaXMudG9ydXNJZnJhbWUgPSBodG1sVG9FbGVtZW50KGA8aWZyYW1lXG4gICAgICAgIGlkPVwidG9ydXNJZnJhbWVcIlxuICAgICAgICBjbGFzcz1cInRvcnVzSWZyYW1lXCJcbiAgICAgICAgc3JjPVwiJHt0b3J1c0lmcmFtZVVybC5ocmVmfVwiXG4gICAgICAgIHN0eWxlPVwiZGlzcGxheTogbm9uZTsgcG9zaXRpb246IGZpeGVkOyB0b3A6IDA7IHJpZ2h0OiAwOyB3aWR0aDogMTAwJTtcbiAgICAgICAgaGVpZ2h0OiAxMDAlOyBib3JkZXI6IG5vbmU7IGJvcmRlci1yYWRpdXM6IDA7IHotaW5kZXg6ICR7dGhpcy5tb2RhbFpJbmRleH1cIlxuICAgICAgPjwvaWZyYW1lPmApO1xuICAgICAgICAgICAgdGhpcy50b3J1c0FsZXJ0Q29udGFpbmVyID0gaHRtbFRvRWxlbWVudCgnPGRpdiBpZD1cInRvcnVzQWxlcnRDb250YWluZXJcIj48L2Rpdj4nKTtcbiAgICAgICAgICAgIHRoaXMudG9ydXNBbGVydENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICB0aGlzLnRvcnVzQWxlcnRDb250YWluZXIuc3R5bGUuc2V0UHJvcGVydHkoXCJ6LWluZGV4XCIsIHRoaXMuYWxlcnRaSW5kZXgudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICBjb25zdCBsaW5rID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuICAgICAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoXCJyZWxcIiwgXCJzdHlsZXNoZWV0XCIpO1xuICAgICAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dC9jc3NcIik7XG4gICAgICAgICAgICBsaW5rLnNldEF0dHJpYnV0ZShcImhyZWZcIiwgYCR7dG9ydXNVcmx9L2Nzcy93aWRnZXQuY3NzYCk7XG4gICAgICAgICAgICB0aGlzLnN0eWxlTGluayA9IGxpbms7XG4gICAgICAgICAgICBjb25zdCB7IGRlZmF1bHRMYW5ndWFnZSA9IGdldFVzZXJMYW5ndWFnZSgpLCBjdXN0b21UcmFuc2xhdGlvbnMgPSB7fSB9ID0gdGhpcy53aGl0ZUxhYmVsIHx8IHt9O1xuICAgICAgICAgICAgY29uc3QgbWVyZ2VkVHJhbnNsYXRpb25zID0gZGVlcG1lcmdlKGNvbmZpZ3VyYXRpb24udHJhbnNsYXRpb25zLCBjdXN0b21UcmFuc2xhdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbGFuZ3VhZ2VUcmFuc2xhdGlvbnMgPSBtZXJnZWRUcmFuc2xhdGlvbnNbZGVmYXVsdExhbmd1YWdlXSB8fCBjb25maWd1cmF0aW9uLnRyYW5zbGF0aW9uc1tnZXRVc2VyTGFuZ3VhZ2UoKV07XG4gICAgICAgICAgICB0aGlzLmVtYmVkVHJhbnNsYXRpb25zID0gbGFuZ3VhZ2VUcmFuc2xhdGlvbnMuZW1iZWQ7XG4gICAgICAgICAgICBjb25zdCBoYW5kbGVTZXR1cCA9ICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCBkb2N1bWVudFJlYWR5KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b3J1c0lmcmFtZS5vbmxvYWQgPSAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvbmx5IGRvIHRoaXMgaWYgaWZyYW1lIGlzIG5vdCBmdWxsIHNjcmVlblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0dXBXZWIzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbml0U3RyZWFtID0gdGhpcy5jb21tdW5pY2F0aW9uTXV4LmdldFN0cmVhbShcImluaXRfc3RyZWFtXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdFN0cmVhbS5vbihcImRhdGFcIiwgKGNodW5rKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBuYW1lLCBkYXRhLCBlcnJvciB9ID0gY2h1bms7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09IFwiaW5pdF9jb21wbGV0ZVwiICYmIGRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXNvbHZlIHByb21pc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlzcGxheUlmcmFtZSh0aGlzLmlzSWZyYW1lRnVsbFNjcmVlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihlcnJvcikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdFN0cmVhbS53cml0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJpbml0X3N0cmVhbVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlZFZlcmlmaWVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9naW5Db25maWcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlTGFiZWw6IHRoaXMud2hpdGVMYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uUG9zaXRpb246IHRoaXMuYnV0dG9uUG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcnVzV2lkZ2V0VmlzaWJpbGl0eTogdGhpcy50b3J1c1dpZGdldFZpc2liaWxpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaUtleTogdGhpcy5hcGlLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBUS2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXR3b3JrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHRoaXMuc3R5bGVMaW5rKTtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy50b3J1c0lmcmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMudG9ydXNBbGVydENvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChidWlsZEVudiA9PT0gXCJwcm9kdWN0aW9uXCIgJiYgaW50ZWdyaXR5LmNoZWNrKSB7XG4gICAgICAgICAgICAgICAgLy8gaGFja3kgc29sdXRpb24gdG8gY2hlY2sgZm9yIGlmcmFtZSBpbnRlZ3JpdHlcbiAgICAgICAgICAgICAgICBjb25zdCBmZXRjaFVybCA9IGAke3RvcnVzVXJsfS9wb3B1cGA7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcCA9IHlpZWxkIGZldGNoKGZldGNoVXJsLCB7IGNhY2hlOiBcInJlbG9hZFwiIH0pO1xuICAgICAgICAgICAgICAgIGlmIChyZXNwLmhlYWRlcnMuZ2V0KFwiQ2FjaGUtQ29udHJvbFwiKSAhPT0gZXhwZWN0ZWRDYWNoZUNvbnRyb2xIZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIENhY2hlLUNvbnRyb2wgaGVhZGVycywgZ290ICR7cmVzcC5oZWFkZXJzLmdldChcIkNhY2hlLUNvbnRyb2xcIil9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgcmVzcC50ZXh0KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgY2FsY3VsYXRlZEludGVncml0eSA9IG1haW4oe1xuICAgICAgICAgICAgICAgICAgICBhbGdvcml0aG1zOiBbXCJzaGEzODRcIl0sXG4gICAgICAgICAgICAgICAgfSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIGxvZy5pbmZvKGNhbGN1bGF0ZWRJbnRlZ3JpdHksIFwiaW50ZWdyaXR5XCIpO1xuICAgICAgICAgICAgICAgIGlmIChjYWxjdWxhdGVkSW50ZWdyaXR5ID09PSBpbnRlZ3JpdHkuaGFzaCkge1xuICAgICAgICAgICAgICAgICAgICB5aWVsZCBoYW5kbGVTZXR1cCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckluaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW50ZWdyaXR5IGNoZWNrIGZhaWxlZFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB5aWVsZCBoYW5kbGVTZXR1cCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxvZ2luKHsgdmVyaWZpZXIgPSBcIlwiIH0gPSB7fSkge1xuICAgICAgICBpZiAoIXRoaXMuaXNJbml0aWFsaXplZClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbGwgaW5pdCgpIGZpcnN0XCIpO1xuICAgICAgICB0aGlzLnJlcXVlc3RlZFZlcmlmaWVyID0gdmVyaWZpZXI7XG4gICAgICAgIHJldHVybiB0aGlzLmV0aGVyZXVtLmVuYWJsZSgpO1xuICAgIH1cbiAgICBsb2dvdXQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNMb2dnZWRJbikge1xuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJVc2VyIGhhcyBub3QgbG9nZ2VkIGluIHlldFwiKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9nT3V0U3RyZWFtID0gdGhpcy5jb21tdW5pY2F0aW9uTXV4LmdldFN0cmVhbShcImxvZ291dFwiKTtcbiAgICAgICAgICAgIGxvZ091dFN0cmVhbS53cml0ZSh7IG5hbWU6IFwibG9nT3V0XCIgfSk7XG4gICAgICAgICAgICBjb25zdCBzdGF0dXNTdHJlYW0gPSB0aGlzLmNvbW11bmljYXRpb25NdXguZ2V0U3RyZWFtKFwic3RhdHVzXCIpO1xuICAgICAgICAgICAgY29uc3Qgc3RhdHVzU3RyZWFtSGFuZGxlciA9IChzdGF0dXMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXN0YXR1cy5sb2dnZWRJbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTG9nZ2VkSW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50VmVyaWZpZXIgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcXVlc3RlZFZlcmlmaWVyID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJTb21lIEVycm9yIE9jY3VyZWRcIikpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGhhbmRsZVN0cmVhbShzdGF0dXNTdHJlYW0sIFwiZGF0YVwiLCBzdGF0dXNTdHJlYW1IYW5kbGVyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNsZWFuVXAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0xvZ2dlZEluKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgdGhpcy5sb2dvdXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2xlYXJJbml0KCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjbGVhckluaXQoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGlzRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudCBpbnN0YW5jZW9mIEVsZW1lbnQgfHwgZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxEb2N1bWVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNFbGVtZW50KHRoaXMuc3R5bGVMaW5rKSAmJiB3aW5kb3cuZG9jdW1lbnQuYm9keS5jb250YWlucyh0aGlzLnN0eWxlTGluaykpIHtcbiAgICAgICAgICAgIHRoaXMuc3R5bGVMaW5rLnJlbW92ZSgpO1xuICAgICAgICAgICAgdGhpcy5zdHlsZUxpbmsgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRWxlbWVudCh0aGlzLnRvcnVzSWZyYW1lKSAmJiB3aW5kb3cuZG9jdW1lbnQuYm9keS5jb250YWlucyh0aGlzLnRvcnVzSWZyYW1lKSkge1xuICAgICAgICAgICAgdGhpcy50b3J1c0lmcmFtZS5yZW1vdmUoKTtcbiAgICAgICAgICAgIHRoaXMudG9ydXNJZnJhbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRWxlbWVudCh0aGlzLnRvcnVzQWxlcnRDb250YWluZXIpICYmIHdpbmRvdy5kb2N1bWVudC5ib2R5LmNvbnRhaW5zKHRoaXMudG9ydXNBbGVydENvbnRhaW5lcikpIHtcbiAgICAgICAgICAgIHRoaXMudG9ydXNBbGVydCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMudG9ydXNBbGVydENvbnRhaW5lci5yZW1vdmUoKTtcbiAgICAgICAgICAgIHRoaXMudG9ydXNBbGVydENvbnRhaW5lciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgaGlkZVRvcnVzQnV0dG9uKCkge1xuICAgICAgICB0aGlzLnRvcnVzV2lkZ2V0VmlzaWJpbGl0eSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9zZW5kV2lkZ2V0VmlzaWJpbGl0eVN0YXR1cyhmYWxzZSk7XG4gICAgICAgIHRoaXMuX2Rpc3BsYXlJZnJhbWUoKTtcbiAgICB9XG4gICAgc2hvd1RvcnVzQnV0dG9uKCkge1xuICAgICAgICB0aGlzLnRvcnVzV2lkZ2V0VmlzaWJpbGl0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuX3NlbmRXaWRnZXRWaXNpYmlsaXR5U3RhdHVzKHRydWUpO1xuICAgICAgICB0aGlzLl9kaXNwbGF5SWZyYW1lKCk7XG4gICAgfVxuICAgIHNldFByb3ZpZGVyKF9hID0ge30pIHtcbiAgICAgICAgdmFyIHsgaG9zdCA9IFwibWFpbm5ldFwiLCBjaGFpbklkID0gbnVsbCwgbmV0d29ya05hbWUgPSBcIlwiIH0gPSBfYSwgcmVzdCA9IF9fcmVzdChfYSwgW1wiaG9zdFwiLCBcImNoYWluSWRcIiwgXCJuZXR3b3JrTmFtZVwiXSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwcm92aWRlckNoYW5nZVN0cmVhbSA9IHRoaXMuY29tbXVuaWNhdGlvbk11eC5nZXRTdHJlYW0oXCJwcm92aWRlcl9jaGFuZ2VcIik7XG4gICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gKGNodW5rKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBlcnIsIHN1Y2Nlc3MgfSA9IGNodW5rLmRhdGE7XG4gICAgICAgICAgICAgICAgbG9nLmluZm8oY2h1bmspO1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJzb21lIGVycm9yIG9jY3VyZWRcIikpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGhhbmRsZVN0cmVhbShwcm92aWRlckNoYW5nZVN0cmVhbSwgXCJkYXRhXCIsIGhhbmRsZXIpO1xuICAgICAgICAgICAgY29uc3QgcHJlb3Blbkluc3RhbmNlSWQgPSBnZXRQcmVvcGVuSW5zdGFuY2VJZCgpO1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlV2luZG93KHByZW9wZW5JbnN0YW5jZUlkLCB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiLFxuICAgICAgICAgICAgICAgIGZlYXR1cmVzOiBGRUFUVVJFU19QUk9WSURFUl9DSEFOR0VfV0lORE9XLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwcm92aWRlckNoYW5nZVN0cmVhbS53cml0ZSh7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJzaG93X3Byb3ZpZGVyX2NoYW5nZVwiLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbmV0d29yazogT2JqZWN0LmFzc2lnbih7IGhvc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFpbklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV0d29ya05hbWUgfSwgcmVzdCksXG4gICAgICAgICAgICAgICAgICAgIHByZW9wZW5JbnN0YW5jZUlkLFxuICAgICAgICAgICAgICAgICAgICBvdmVycmlkZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2hvd1dhbGxldChwYXRoLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBjb25zdCBzaG93V2FsbGV0U3RyZWFtID0gdGhpcy5jb21tdW5pY2F0aW9uTXV4LmdldFN0cmVhbShcInNob3dfd2FsbGV0XCIpO1xuICAgICAgICBjb25zdCBmaW5hbFBhdGggPSBwYXRoID8gYC8ke3BhdGh9YCA6IFwiXCI7XG4gICAgICAgIHNob3dXYWxsZXRTdHJlYW0ud3JpdGUoeyBuYW1lOiBcInNob3dfd2FsbGV0XCIsIGRhdGE6IHsgcGF0aDogZmluYWxQYXRoIH0gfSk7XG4gICAgICAgIGNvbnN0IHNob3dXYWxsZXRIYW5kbGVyID0gKGNodW5rKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2h1bmsubmFtZSA9PT0gXCJzaG93X3dhbGxldF9pbnN0YW5jZVwiKSB7XG4gICAgICAgICAgICAgICAgLy8gTGV0IHRoZSBlcnJvciBwcm9wb2dhdGUgdXAgKGhlbmNlLCBubyB0cnkgY2F0Y2gpXG4gICAgICAgICAgICAgICAgY29uc3QgeyBpbnN0YW5jZUlkIH0gPSBjaHVuay5kYXRhO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpbmFsVXJsID0gbmV3IFVSTChgJHt0aGlzLnRvcnVzVXJsfS93YWxsZXQke2ZpbmFsUGF0aH1gKTtcbiAgICAgICAgICAgICAgICAvLyBVc2luZyBVUkwgY29uc3RydWN0b3IgdG8gcHJldmVudCBqcyBpbmplY3Rpb24gYW5kIGFsbG93IHBhcmFtZXRlciB2YWxpZGF0aW9uLiFcbiAgICAgICAgICAgICAgICBmaW5hbFVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwiaW50ZWdyaXR5XCIsIFwidHJ1ZVwiKTtcbiAgICAgICAgICAgICAgICBmaW5hbFVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwiaW5zdGFuY2VJZFwiLCBpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhwYXJhbXMpLmZvckVhY2goKHgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZmluYWxVcmwuc2VhcmNoUGFyYW1zLmFwcGVuZCh4LCBwYXJhbXNbeF0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRhcHBTdG9yYWdlS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsVXJsLmhhc2ggPSBgI2RhcHBTdG9yYWdlS2V5PSR7dGhpcy5kYXBwU3RvcmFnZUtleX1gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB3YWxsZXRXaW5kb3cgPSBuZXcgUG9wdXBIYW5kbGVyKHsgdXJsOiBmaW5hbFVybCwgZmVhdHVyZXM6IEZFQVRVUkVTX0RFRkFVTFRfV0FMTEVUX1dJTkRPVyB9KTtcbiAgICAgICAgICAgICAgICB3YWxsZXRXaW5kb3cub3BlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBoYW5kbGVTdHJlYW0oc2hvd1dhbGxldFN0cmVhbSwgXCJkYXRhXCIsIHNob3dXYWxsZXRIYW5kbGVyKTtcbiAgICB9XG4gICAgZ2V0UHVibGljQWRkcmVzcyh7IHZlcmlmaWVyLCB2ZXJpZmllcklkLCBpc0V4dGVuZGVkID0gZmFsc2UgfSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKCFjb25maWd1cmF0aW9uLnN1cHBvcnRlZFZlcmlmaWVyTGlzdC5pbmNsdWRlcyh2ZXJpZmllcikgfHwgIVdBTExFVF9PUEVOTE9HSU5fVkVSSUZJRVJfTUFQW3ZlcmlmaWVyXSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCB2ZXJpZmllclwiKTtcbiAgICAgICAgICAgIGNvbnN0IG5vZGVEZXRhaWxzID0geWllbGQgdGhpcy5ub2RlRGV0YWlsTWFuYWdlci5nZXROb2RlRGV0YWlscyhmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICBjb25zdCBlbmRwb2ludHMgPSBub2RlRGV0YWlscy50b3J1c05vZGVFbmRwb2ludHM7XG4gICAgICAgICAgICBjb25zdCB0b3J1c05vZGVQdWJzID0gbm9kZURldGFpbHMudG9ydXNOb2RlUHViO1xuICAgICAgICAgICAgY29uc3Qgd2FsbGV0VmVyaWZpZXIgPSB2ZXJpZmllcjtcbiAgICAgICAgICAgIGNvbnN0IG9wZW5sb2dpblZlcmlmaWVyID0gV0FMTEVUX09QRU5MT0dJTl9WRVJJRklFUl9NQVBbdmVyaWZpZXJdO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBleGlzdGluZ1YxVXNlciA9IHlpZWxkIHRoaXMudG9ydXNKcy5nZXRVc2VyVHlwZUFuZEFkZHJlc3MoZW5kcG9pbnRzLCB0b3J1c05vZGVQdWJzLCB7IHZlcmlmaWVyOiB3YWxsZXRWZXJpZmllciwgdmVyaWZpZXJJZCB9KTtcbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdWMVVzZXIudHlwZU9mVXNlciA9PT0gXCJ2MVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNFeHRlbmRlZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBleGlzdGluZ1YxVXNlci5hZGRyZXNzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdWMVVzZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHdlIGRvbid0IHN1cHBvcnQgdjIgdXNlcnMgd2l0aCB2MSB2ZXJpZmllcnMgc28gZ2V0IG9yIGFzc2lnbiB0aGUga2V5IGZvciB2MiB1c2VyIG9uIHYyIGB2ZXJpZmllcmBcbiAgICAgICAgICAgICAgICBjb25zdCB2MlVzZXIgPSB5aWVsZCB0aGlzLnRvcnVzSnMuZ2V0VXNlclR5cGVBbmRBZGRyZXNzKGVuZHBvaW50cywgdG9ydXNOb2RlUHVicywgeyB2ZXJpZmllcjogb3BlbmxvZ2luVmVyaWZpZXIsIHZlcmlmaWVySWQgfSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFpc0V4dGVuZGVkKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdjJVc2VyLmFkZHJlc3M7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYyVXNlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvciA9PT0gbnVsbCB8fCBlcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3IubWVzc2FnZS5pbmNsdWRlcyhcIlZlcmlmaWVyICsgVmVyaWZpZXJJRCBoYXMgbm90IHlldCBiZWVuIGFzc2lnbmVkXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHVzZXIgZG9lc24ndCBoYXZlIGtleSB0aGVuIGFzc2lnbiBpdCB3aXRoIHYyIHZlcmlmaWVyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1YyVXNlciA9IHlpZWxkIHRoaXMudG9ydXNKcy5nZXRVc2VyVHlwZUFuZEFkZHJlc3MoZW5kcG9pbnRzLCB0b3J1c05vZGVQdWJzLCB7IHZlcmlmaWVyOiBvcGVubG9naW5WZXJpZmllciwgdmVyaWZpZXJJZCB9LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0V4dGVuZGVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld1YyVXNlci5hZGRyZXNzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3VjJVc2VyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldFVzZXJJbmZvKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzTG9nZ2VkSW4pIHtcbiAgICAgICAgICAgICAgICBjb25zdCB1c2VySW5mb0FjY2Vzc1N0cmVhbSA9IHRoaXMuY29tbXVuaWNhdGlvbk11eC5nZXRTdHJlYW0oXCJ1c2VyX2luZm9fYWNjZXNzXCIpO1xuICAgICAgICAgICAgICAgIHVzZXJJbmZvQWNjZXNzU3RyZWFtLndyaXRlKHsgbmFtZTogXCJ1c2VyX2luZm9fYWNjZXNzX3JlcXVlc3RcIiB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCB1c2VySW5mb0FjY2Vzc0hhbmRsZXIgPSAoY2h1bmspID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBuYW1lLCBkYXRhOiB7IGFwcHJvdmVkLCBwYXlsb2FkLCByZWplY3RlZCwgbmV3UmVxdWVzdCB9LCB9ID0gY2h1bms7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSBcInVzZXJfaW5mb19hY2Nlc3NfcmVzcG9uc2VcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFwcHJvdmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShwYXlsb2FkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIlVzZXIgcmVqZWN0ZWQgdGhlIHJlcXVlc3RcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobmV3UmVxdWVzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJJbmZvU3RyZWFtID0gdGhpcy5jb21tdW5pY2F0aW9uTXV4LmdldFN0cmVhbShcInVzZXJfaW5mb1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1c2VySW5mb0hhbmRsZXIgPSAoaGFuZGxlckNodW5rKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYW5kbGVyQ2h1bmsubmFtZSA9PT0gXCJ1c2VyX2luZm9fcmVzcG9uc2VcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhbmRsZXJDaHVuay5kYXRhLmFwcHJvdmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShoYW5kbGVyQ2h1bmsuZGF0YS5wYXlsb2FkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJVc2VyIHJlamVjdGVkIHRoZSByZXF1ZXN0XCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlU3RyZWFtKHVzZXJJbmZvU3RyZWFtLCBcImRhdGFcIiwgdXNlckluZm9IYW5kbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmVvcGVuSW5zdGFuY2VJZCA9IGdldFByZW9wZW5JbnN0YW5jZUlkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlV2luZG93KHByZW9wZW5JbnN0YW5jZUlkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogXCJfYmxhbmtcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZXM6IEZFQVRVUkVTX1BST1ZJREVSX0NIQU5HRV9XSU5ET1csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlckluZm9TdHJlYW0ud3JpdGUoeyBuYW1lOiBcInVzZXJfaW5mb19yZXF1ZXN0XCIsIGRhdGE6IHsgbWVzc2FnZSwgcHJlb3Blbkluc3RhbmNlSWQgfSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaGFuZGxlU3RyZWFtKHVzZXJJbmZvQWNjZXNzU3RyZWFtLCBcImRhdGFcIiwgdXNlckluZm9BY2Nlc3NIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiVXNlciBoYXMgbm90IGxvZ2dlZCBpbiB5ZXRcIikpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaW5pdGlhdGVUb3B1cChwcm92aWRlciwgcGFyYW1zKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBlcnJvcnMsIGlzVmFsaWQgfSA9IHZhbGlkYXRlUGF5bWVudFByb3ZpZGVyKHByb3ZpZGVyLCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KGVycm9ycykpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB0b3B1cFN0cmVhbSA9IHRoaXMuY29tbXVuaWNhdGlvbk11eC5nZXRTdHJlYW0oXCJ0b3B1cFwiKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0b3B1cEhhbmRsZXIgPSAoY2h1bmspID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNodW5rLm5hbWUgPT09IFwidG9wdXBfcmVzcG9uc2VcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNodW5rLmRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoY2h1bmsuZGF0YS5zdWNjZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoY2h1bmsuZGF0YS5lcnJvcikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBoYW5kbGVTdHJlYW0odG9wdXBTdHJlYW0sIFwiZGF0YVwiLCB0b3B1cEhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZW9wZW5JbnN0YW5jZUlkID0gZ2V0UHJlb3Blbkluc3RhbmNlSWQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVXaW5kb3cocHJlb3Blbkluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgIHRvcHVwU3RyZWFtLndyaXRlKHsgbmFtZTogXCJ0b3B1cF9yZXF1ZXN0XCIsIGRhdGE6IHsgcHJvdmlkZXIsIHBhcmFtcywgcHJlb3Blbkluc3RhbmNlSWQgfSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiVG9ydXMgaXMgbm90IGluaXRpYWxpemVkIHlldFwiKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfaGFuZGxlV2luZG93KHByZW9wZW5JbnN0YW5jZUlkLCB7IHVybCwgdGFyZ2V0LCBmZWF0dXJlcyB9ID0ge30pIHtcbiAgICAgICAgaWYgKHByZW9wZW5JbnN0YW5jZUlkKSB7XG4gICAgICAgICAgICBjb25zdCB3aW5kb3dTdHJlYW0gPSB0aGlzLmNvbW11bmljYXRpb25NdXguZ2V0U3RyZWFtKFwid2luZG93XCIpO1xuICAgICAgICAgICAgY29uc3QgZmluYWxVcmwgPSBuZXcgVVJMKHVybCB8fCBgJHt0aGlzLnRvcnVzVXJsfS9yZWRpcmVjdD9wcmVvcGVuSW5zdGFuY2VJZD0ke3ByZW9wZW5JbnN0YW5jZUlkfWApO1xuICAgICAgICAgICAgaWYgKHRoaXMuZGFwcFN0b3JhZ2VLZXkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBtdWx0aXBsZSBpbnN0YW5jZXMsIGl0IHJldHVybnMgdGhlIGZpcnN0IG9uZVxuICAgICAgICAgICAgICAgIGlmIChmaW5hbFVybC5oYXNoKVxuICAgICAgICAgICAgICAgICAgICBmaW5hbFVybC5oYXNoICs9IGAmZGFwcFN0b3JhZ2VLZXk9JHt0aGlzLmRhcHBTdG9yYWdlS2V5fWA7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBmaW5hbFVybC5oYXNoID0gYCNkYXBwU3RvcmFnZUtleT0ke3RoaXMuZGFwcFN0b3JhZ2VLZXl9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZWRXaW5kb3cgPSBuZXcgUG9wdXBIYW5kbGVyKHsgdXJsOiBmaW5hbFVybCwgdGFyZ2V0LCBmZWF0dXJlcyB9KTtcbiAgICAgICAgICAgIGhhbmRsZWRXaW5kb3cub3BlbigpO1xuICAgICAgICAgICAgaWYgKCFoYW5kbGVkV2luZG93LndpbmRvdykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NyZWF0ZVBvcHVwQmxvY2tBbGVydChwcmVvcGVuSW5zdGFuY2VJZCwgZmluYWxVcmwuaHJlZik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2luZG93U3RyZWFtLndyaXRlKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm9wZW5lZF93aW5kb3dcIixcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIHByZW9wZW5JbnN0YW5jZUlkLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IGNsb3NlSGFuZGxlciA9ICh7IHByZW9wZW5JbnN0YW5jZUlkOiByZWNlaXZlZElkLCBjbG9zZSB9KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlY2VpdmVkSWQgPT09IHByZW9wZW5JbnN0YW5jZUlkICYmIGNsb3NlKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZWRXaW5kb3cuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93U3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiZGF0YVwiLCBjbG9zZUhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3dTdHJlYW0ub24oXCJkYXRhXCIsIGNsb3NlSGFuZGxlcik7XG4gICAgICAgICAgICBoYW5kbGVkV2luZG93Lm9uY2UoXCJjbG9zZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgd2luZG93U3RyZWFtLndyaXRlKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJlb3Blbkluc3RhbmNlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgd2luZG93U3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiZGF0YVwiLCBjbG9zZUhhbmRsZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3NldEVtYmVkV2hpdGVMYWJlbChlbGVtZW50KSB7XG4gICAgICAgIC8vIFNldCB3aGl0ZWxhYmVsXG4gICAgICAgIGNvbnN0IHsgdGhlbWUgfSA9IHRoaXMud2hpdGVMYWJlbCB8fCB7fTtcbiAgICAgICAgaWYgKHRoZW1lKSB7XG4gICAgICAgICAgICBjb25zdCB7IGlzRGFyayA9IGZhbHNlLCBjb2xvcnMgPSB7fSB9ID0gdGhlbWU7XG4gICAgICAgICAgICBpZiAoaXNEYXJrKVxuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRvcnVzLWRhcmtcIik7XG4gICAgICAgICAgICBpZiAoY29sb3JzLnRvcnVzQnJhbmQxKVxuICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoXCItLXRvcnVzLWJyYW5kLTFcIiwgY29sb3JzLnRvcnVzQnJhbmQxKTtcbiAgICAgICAgICAgIGlmIChjb2xvcnMudG9ydXNHcmF5MilcbiAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KFwiLS10b3J1cy1ncmF5LTJcIiwgY29sb3JzLnRvcnVzR3JheTIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9nZXRMb2dvVXJsKCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgIGxldCBsb2dvVXJsID0gYCR7dGhpcy50b3J1c1VybH0vaW1hZ2VzL3RvcnVzX2ljb24tYmx1ZS5zdmdgO1xuICAgICAgICBpZiAoKF9iID0gKF9hID0gdGhpcy53aGl0ZUxhYmVsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGhlbWUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5pc0RhcmspIHtcbiAgICAgICAgICAgIGxvZ29VcmwgPSAoKF9jID0gdGhpcy53aGl0ZUxhYmVsKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MubG9nb0xpZ2h0KSB8fCBsb2dvVXJsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG9nb1VybCA9ICgoX2QgPSB0aGlzLndoaXRlTGFiZWwpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5sb2dvRGFyaykgfHwgbG9nb1VybDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9nb1VybDtcbiAgICB9XG4gICAgX3NlbmRXaWRnZXRWaXNpYmlsaXR5U3RhdHVzKHN0YXR1cykge1xuICAgICAgICBjb25zdCB0b3J1c1dpZGdldFZpc2liaWxpdHlTdHJlYW0gPSB0aGlzLmNvbW11bmljYXRpb25NdXguZ2V0U3RyZWFtKFwidG9ydXMtd2lkZ2V0LXZpc2liaWxpdHlcIik7XG4gICAgICAgIHRvcnVzV2lkZ2V0VmlzaWJpbGl0eVN0cmVhbS53cml0ZSh7XG4gICAgICAgICAgICBkYXRhOiBzdGF0dXMsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfZGlzcGxheUlmcmFtZShpc0Z1bGwgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBzdHlsZSA9IHt9O1xuICAgICAgICAvLyBzZXQgcGhhc2VcbiAgICAgICAgaWYgKCFpc0Z1bGwpIHtcbiAgICAgICAgICAgIHN0eWxlLmRpc3BsYXkgPSB0aGlzLnRvcnVzV2lkZ2V0VmlzaWJpbGl0eSA/IFwiYmxvY2tcIiA6IFwibm9uZVwiO1xuICAgICAgICAgICAgc3R5bGUuaGVpZ2h0ID0gXCI3MHB4XCI7XG4gICAgICAgICAgICBzdHlsZS53aWR0aCA9IFwiNzBweFwiO1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmJ1dHRvblBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBCVVRUT05fUE9TSVRJT04uVE9QX0xFRlQ6XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLnRvcCA9IFwiMHB4XCI7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLmxlZnQgPSBcIjBweFwiO1xuICAgICAgICAgICAgICAgICAgICBzdHlsZS5yaWdodCA9IFwiYXV0b1wiO1xuICAgICAgICAgICAgICAgICAgICBzdHlsZS5ib3R0b20gPSBcImF1dG9cIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBCVVRUT05fUE9TSVRJT04uVE9QX1JJR0hUOlxuICAgICAgICAgICAgICAgICAgICBzdHlsZS50b3AgPSBcIjBweFwiO1xuICAgICAgICAgICAgICAgICAgICBzdHlsZS5yaWdodCA9IFwiMHB4XCI7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLmxlZnQgPSBcImF1dG9cIjtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUuYm90dG9tID0gXCJhdXRvXCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgQlVUVE9OX1BPU0lUSU9OLkJPVFRPTV9SSUdIVDpcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUuYm90dG9tID0gXCIwcHhcIjtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUucmlnaHQgPSBcIjBweFwiO1xuICAgICAgICAgICAgICAgICAgICBzdHlsZS50b3AgPSBcImF1dG9cIjtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUubGVmdCA9IFwiYXV0b1wiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEJVVFRPTl9QT1NJVElPTi5CT1RUT01fTEVGVDpcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBzdHlsZS5ib3R0b20gPSBcIjBweFwiO1xuICAgICAgICAgICAgICAgICAgICBzdHlsZS5sZWZ0ID0gXCIwcHhcIjtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUudG9wID0gXCJhdXRvXCI7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLnJpZ2h0ID0gXCJhdXRvXCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgIHN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG4gICAgICAgICAgICBzdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcbiAgICAgICAgICAgIHN0eWxlLnRvcCA9IFwiMHB4XCI7XG4gICAgICAgICAgICBzdHlsZS5yaWdodCA9IFwiMHB4XCI7XG4gICAgICAgICAgICBzdHlsZS5sZWZ0ID0gXCIwcHhcIjtcbiAgICAgICAgICAgIHN0eWxlLmJvdHRvbSA9IFwiMHB4XCI7XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLnRvcnVzSWZyYW1lLnN0eWxlLCBzdHlsZSk7XG4gICAgICAgIHRoaXMuaXNJZnJhbWVGdWxsU2NyZWVuID0gaXNGdWxsO1xuICAgIH1cbiAgICBfc2V0dXBXZWIzKCkge1xuICAgICAgICBsb2cuaW5mbyhcInNldHVwV2ViMyBydW5uaW5nXCIpO1xuICAgICAgICAvLyBzZXR1cCBiYWNrZ3JvdW5kIGNvbm5lY3Rpb25cbiAgICAgICAgY29uc3QgbWV0YW1hc2tTdHJlYW0gPSBuZXcgQmFzZVBvc3RNZXNzYWdlU3RyZWFtKHtcbiAgICAgICAgICAgIG5hbWU6IFwiZW1iZWRfbWV0YW1hc2tcIixcbiAgICAgICAgICAgIHRhcmdldDogXCJpZnJhbWVfbWV0YW1hc2tcIixcbiAgICAgICAgICAgIHRhcmdldFdpbmRvdzogdGhpcy50b3J1c0lmcmFtZS5jb250ZW50V2luZG93LFxuICAgICAgICAgICAgdGFyZ2V0T3JpZ2luOiBuZXcgVVJMKHRoaXMudG9ydXNVcmwpLm9yaWdpbixcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIER1ZSB0byBjb21wYXRpYmlsaXR5IHJlYXNvbnMsIHdlIHNob3VsZCBub3Qgc2V0IHVwIG11bHRpcGxleGluZyBvbiB3aW5kb3cubWV0YW1hc2tzdHJlYW1cbiAgICAgICAgLy8gYmVjYXVzZSB0aGUgTWV0YW1hc2tJbnBhZ2VQcm92aWRlciBhbHNvIGF0dGVtcHRzIHRvIGRvIHNvLlxuICAgICAgICAvLyBXZSBjcmVhdGUgYW5vdGhlciBMb2NhbE1lc3NhZ2VEdXBsZXhTdHJlYW0gZm9yIGNvbW11bmljYXRpb24gYmV0d2VlbiBkYXBwIDw+IGlmcmFtZVxuICAgICAgICBjb25zdCBjb21tdW5pY2F0aW9uU3RyZWFtID0gbmV3IEJhc2VQb3N0TWVzc2FnZVN0cmVhbSh7XG4gICAgICAgICAgICBuYW1lOiBcImVtYmVkX2NvbW1cIixcbiAgICAgICAgICAgIHRhcmdldDogXCJpZnJhbWVfY29tbVwiLFxuICAgICAgICAgICAgdGFyZ2V0V2luZG93OiB0aGlzLnRvcnVzSWZyYW1lLmNvbnRlbnRXaW5kb3csXG4gICAgICAgICAgICB0YXJnZXRPcmlnaW46IG5ldyBVUkwodGhpcy50b3J1c1VybCkub3JpZ2luLFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gQmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIEdvdGNoaSA6KVxuICAgICAgICAvLyB3aW5kb3cubWV0YW1hc2tTdHJlYW0gPSB0aGlzLmNvbW11bmljYXRpb25TdHJlYW1cbiAgICAgICAgLy8gY29tcG9zZSB0aGUgaW5wYWdlIHByb3ZpZGVyXG4gICAgICAgIGNvbnN0IGlucGFnZVByb3ZpZGVyID0gbmV3IFRvcnVzSW5wYWdlUHJvdmlkZXIobWV0YW1hc2tTdHJlYW0pO1xuICAgICAgICAvLyBkZXRlY3QgZXRoX3JlcXVlc3RBY2NvdW50cyBhbmQgcGlwZSB0byBlbmFibGUgZm9yIG5vd1xuICAgICAgICBjb25zdCBkZXRlY3RBY2NvdW50UmVxdWVzdFByb3RvdHlwZU1vZGlmaWVyID0gKG0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsTWV0aG9kID0gaW5wYWdlUHJvdmlkZXJbbV07XG4gICAgICAgICAgICBpbnBhZ2VQcm92aWRlclttXSA9IGZ1bmN0aW9uIHByb3ZpZGVyRnVuYyhtZXRob2QsIC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgICBpZiAobWV0aG9kICYmIG1ldGhvZCA9PT0gXCJldGhfcmVxdWVzdEFjY291bnRzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucGFnZVByb3ZpZGVyLmVuYWJsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxNZXRob2QuYXBwbHkodGhpcywgW21ldGhvZCwgLi4uYXJnc10pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgZGV0ZWN0QWNjb3VudFJlcXVlc3RQcm90b3R5cGVNb2RpZmllcihcInNlbmRcIik7XG4gICAgICAgIGRldGVjdEFjY291bnRSZXF1ZXN0UHJvdG90eXBlTW9kaWZpZXIoXCJzZW5kQXN5bmNcIik7XG4gICAgICAgIGlucGFnZVByb3ZpZGVyLmVuYWJsZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdXNlciBpcyBhbHJlYWR5IGxvZ2dlZCBpbiwgd2UgYXNzdW1lIHRoZXkgaGF2ZSBnaXZlbiBhY2Nlc3MgdG8gdGhlIHdlYnNpdGVcbiAgICAgICAgICAgICAgICBpbnBhZ2VQcm92aWRlci5zZW5kQXN5bmMoeyBqc29ucnBjOiBcIjIuMFwiLCBpZDogZ2V0UHJlb3Blbkluc3RhbmNlSWQoKSwgbWV0aG9kOiBcImV0aF9yZXF1ZXN0QWNjb3VudHNcIiwgcGFyYW1zOiBbXSB9LCAoZXJyLCByZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHJlc3VsdDogcmVzIH0gPSByZXNwb25zZSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCA1MCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXMpICYmIHJlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB1c2VyIGlzIGFscmVhZHkgcmVoeWRyYXRlZCwgcmVzb2x2ZSB0aGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlbHNlIHdhaXQgZm9yIHNvbWV0aGluZyB0byBiZSB3cml0dGVuIHRvIHN0YXR1cyBzdHJlYW1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZUxvZ2luQ2IgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVxdWVzdGVkVmVyaWZpZXIgIT09IFwiXCIgJiYgdGhpcy5jdXJyZW50VmVyaWZpZXIgIT09IHRoaXMucmVxdWVzdGVkVmVyaWZpZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyByZXF1ZXN0ZWRWZXJpZmllciB9ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByb21pc2Uvbm8tcHJvbWlzZS1pbi1jYWxsYmFja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ291dCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJvbWlzZS9hbHdheXMtcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoXykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0ZWRWZXJpZmllciA9IHJlcXVlc3RlZFZlcmlmaWVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2hvd0xvZ2luUG9wdXAodHJ1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHJlamVjdChlcnJvcikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0xvZ2dlZEluKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlTG9naW5DYigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xvZ2luQ2FsbGJhY2sgPSBoYW5kbGVMb2dpbkNiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHVwIGxpc3RlbmVyIGZvciBsb2dpblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2hvd0xvZ2luUG9wdXAodHJ1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGlucGFnZVByb3ZpZGVyLnRyeVByZW9wZW5IYW5kbGUgPSAocGF5bG9hZCwgY2IpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IF9wYXlsb2FkID0gcGF5bG9hZDtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShfcGF5bG9hZCkgJiYgVU5TQUZFX01FVEhPRFMuaW5jbHVkZXMoX3BheWxvYWQubWV0aG9kKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZW9wZW5JbnN0YW5jZUlkID0gZ2V0UHJlb3Blbkluc3RhbmNlSWQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVXaW5kb3cocHJlb3Blbkluc3RhbmNlSWQsIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiLFxuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlczogRkVBVFVSRVNfQ09ORklSTV9XSU5ET1csXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgX3BheWxvYWQucHJlb3Blbkluc3RhbmNlSWQgPSBwcmVvcGVuSW5zdGFuY2VJZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlucGFnZVByb3ZpZGVyLl9ycGNFbmdpbmUuaGFuZGxlKF9wYXlsb2FkLCBjYik7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFdvcmsgYXJvdW5kIGZvciB3ZWIzQDEuMCBkZWxldGluZyB0aGUgYm91bmQgYHNlbmRBc3luY2AgYnV0IG5vdCB0aGUgdW5ib3VuZFxuICAgICAgICAvLyBgc2VuZEFzeW5jYCBtZXRob2Qgb24gdGhlIHByb3RvdHlwZSwgY2F1c2luZyBgdGhpc2AgcmVmZXJlbmNlIGlzc3VlcyB3aXRoIGRyaXp6bGVcbiAgICAgICAgY29uc3QgcHJveGllZElucGFnZVByb3ZpZGVyID0gbmV3IFByb3h5KGlucGFnZVByb3ZpZGVyLCB7XG4gICAgICAgICAgICAvLyBzdHJhaWdodCB1cCBsaWUgdGhhdCB3ZSBkZWxldGVkIHRoZSBwcm9wZXJ0eSBzbyB0aGF0IGl0IGRvZXNudFxuICAgICAgICAgICAgLy8gdGhyb3cgYW4gZXJyb3IgaW4gc3RyaWN0IG1vZGVcbiAgICAgICAgICAgIGRlbGV0ZVByb3BlcnR5OiAoKSA9PiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5ldGhlcmV1bSA9IHByb3hpZWRJbnBhZ2VQcm92aWRlcjtcbiAgICAgICAgY29uc3QgY29tbXVuaWNhdGlvbk11eCA9IHNldHVwTXVsdGlwbGV4KGNvbW11bmljYXRpb25TdHJlYW0pO1xuICAgICAgICB0aGlzLmNvbW11bmljYXRpb25NdXggPSBjb21tdW5pY2F0aW9uTXV4O1xuICAgICAgICBjb25zdCB3aW5kb3dTdHJlYW0gPSBjb21tdW5pY2F0aW9uTXV4LmdldFN0cmVhbShcIndpbmRvd1wiKTtcbiAgICAgICAgd2luZG93U3RyZWFtLm9uKFwiZGF0YVwiLCAoY2h1bmspID0+IHtcbiAgICAgICAgICAgIGlmIChjaHVuay5uYW1lID09PSBcImNyZWF0ZV93aW5kb3dcIikge1xuICAgICAgICAgICAgICAgIC8vIHVybCBpcyB0aGUgdXJsIHdlIG5lZWQgdG8gb3BlblxuICAgICAgICAgICAgICAgIC8vIHdlIGNhbiBwYXNzIHRoZSBmaW5hbCB1cmwgdXBmcm9udCBzbyB0aGF0IGl0IHJlbW92ZXMgdGhlIHN0ZXAgb2YgcmVkaXJlY3RpbmcgdG8gL3JlZGlyZWN0IGFuZCB3YWl0aW5nIGZvciBmaW5hbFVybFxuICAgICAgICAgICAgICAgIHRoaXMuX2NyZWF0ZVBvcHVwQmxvY2tBbGVydChjaHVuay5kYXRhLnByZW9wZW5JbnN0YW5jZUlkLCBjaHVuay5kYXRhLnVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBzaG93IHRvcnVzIHdpZGdldCBpZiBidXR0b24gY2xpY2tlZFxuICAgICAgICBjb25zdCB3aWRnZXRTdHJlYW0gPSBjb21tdW5pY2F0aW9uTXV4LmdldFN0cmVhbShcIndpZGdldFwiKTtcbiAgICAgICAgd2lkZ2V0U3RyZWFtLm9uKFwiZGF0YVwiLCAoY2h1bmspID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gY2h1bms7XG4gICAgICAgICAgICB0aGlzLl9kaXNwbGF5SWZyYW1lKGRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gU2hvdyB0b3J1cyBidXR0b24gaWYgd2FsbGV0IGhhcyBiZWVuIGh5ZHJhdGVkL2RldGVjdGVkXG4gICAgICAgIGNvbnN0IHN0YXR1c1N0cmVhbSA9IGNvbW11bmljYXRpb25NdXguZ2V0U3RyZWFtKFwic3RhdHVzXCIpO1xuICAgICAgICBzdGF0dXNTdHJlYW0ub24oXCJkYXRhXCIsIChzdGF0dXMpID0+IHtcbiAgICAgICAgICAgIC8vIGxvZ2luXG4gICAgICAgICAgICBpZiAoc3RhdHVzLmxvZ2dlZEluKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0xvZ2dlZEluID0gc3RhdHVzLmxvZ2dlZEluO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFZlcmlmaWVyID0gc3RhdHVzLnZlcmlmaWVyO1xuICAgICAgICAgICAgfSAvLyBsb2dvdXRcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aGlzLl9kaXNwbGF5SWZyYW1lKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0xvZ2luQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzTG9naW5DYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmlzTG9naW5DYWxsYmFjaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucHJvdmlkZXIgPSBwcm94aWVkSW5wYWdlUHJvdmlkZXI7XG4gICAgICAgIGlmICh0aGlzLnByb3ZpZGVyLnNob3VsZFNlbmRNZXRhZGF0YSlcbiAgICAgICAgICAgIHNlbmRTaXRlTWV0YWRhdGEodGhpcy5wcm92aWRlci5fcnBjRW5naW5lKTtcbiAgICAgICAgaW5wYWdlUHJvdmlkZXIuX2luaXRpYWxpemVTdGF0ZSgpO1xuICAgICAgICBsb2cuZGVidWcoXCJUb3J1cyAtIGluamVjdGVkIHByb3ZpZGVyXCIpO1xuICAgIH1cbiAgICBfc2hvd0xvZ2luUG9wdXAoY2FsbGVkRnJvbUVtYmVkLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgY29uc3QgbG9naW5IYW5kbGVyID0gKGRhdGEpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZXJyLCBzZWxlY3RlZEFkZHJlc3MgfSA9IGRhdGE7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgbG9nLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgaWYgKHJlamVjdClcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByZXR1cm5zIGFuIGFycmF5IChjYXVzZSBhY2NvdW50cyBleHBlY3RzIGl0KVxuICAgICAgICAgICAgZWxzZSBpZiAocmVzb2x2ZSlcbiAgICAgICAgICAgICAgICByZXNvbHZlKFtzZWxlY3RlZEFkZHJlc3NdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzSWZyYW1lRnVsbFNjcmVlbilcbiAgICAgICAgICAgICAgICB0aGlzLl9kaXNwbGF5SWZyYW1lKCk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IG9hdXRoU3RyZWFtID0gdGhpcy5jb21tdW5pY2F0aW9uTXV4LmdldFN0cmVhbShcIm9hdXRoXCIpO1xuICAgICAgICBpZiAoIXRoaXMucmVxdWVzdGVkVmVyaWZpZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2Rpc3BsYXlJZnJhbWUodHJ1ZSk7XG4gICAgICAgICAgICBoYW5kbGVTdHJlYW0ob2F1dGhTdHJlYW0sIFwiZGF0YVwiLCBsb2dpbkhhbmRsZXIpO1xuICAgICAgICAgICAgb2F1dGhTdHJlYW0ud3JpdGUoeyBuYW1lOiBcIm9hdXRoX21vZGFsXCIsIGRhdGE6IHsgY2FsbGVkRnJvbUVtYmVkIH0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBoYW5kbGVTdHJlYW0ob2F1dGhTdHJlYW0sIFwiZGF0YVwiLCBsb2dpbkhhbmRsZXIpO1xuICAgICAgICAgICAgY29uc3QgcHJlb3Blbkluc3RhbmNlSWQgPSBnZXRQcmVvcGVuSW5zdGFuY2VJZCgpO1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlV2luZG93KHByZW9wZW5JbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIG9hdXRoU3RyZWFtLndyaXRlKHsgbmFtZTogXCJvYXV0aFwiLCBkYXRhOiB7IGNhbGxlZEZyb21FbWJlZCwgdmVyaWZpZXI6IHRoaXMucmVxdWVzdGVkVmVyaWZpZXIsIHByZW9wZW5JbnN0YW5jZUlkIH0gfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2NyZWF0ZVBvcHVwQmxvY2tBbGVydChwcmVvcGVuSW5zdGFuY2VJZCwgdXJsKSB7XG4gICAgICAgIGNvbnN0IGxvZ29VcmwgPSB0aGlzLl9nZXRMb2dvVXJsKCk7XG4gICAgICAgIGNvbnN0IHRvcnVzQWxlcnQgPSBodG1sVG9FbGVtZW50KCc8ZGl2IGlkPVwidG9ydXNBbGVydFwiIGNsYXNzPVwidG9ydXMtYWxlcnQtLXYyXCI+JyArXG4gICAgICAgICAgICBgPGRpdiBpZD1cInRvcnVzQWxlcnRfX2xvZ29cIj48aW1nIHNyYz1cIiR7bG9nb1VybH1cIiAvPjwvZGl2PmAgK1xuICAgICAgICAgICAgXCI8ZGl2PlwiICtcbiAgICAgICAgICAgIGA8aDEgaWQ9XCJ0b3J1c0FsZXJ0X190aXRsZVwiPiR7dGhpcy5lbWJlZFRyYW5zbGF0aW9ucy5hY3Rpb25SZXF1aXJlZH08L2gxPmAgK1xuICAgICAgICAgICAgYDxwIGlkPVwidG9ydXNBbGVydF9fZGVzY1wiPiR7dGhpcy5lbWJlZFRyYW5zbGF0aW9ucy5wZW5kaW5nQWN0aW9ufTwvcD5gICtcbiAgICAgICAgICAgIFwiPC9kaXY+XCIgK1xuICAgICAgICAgICAgXCI8L2Rpdj5cIik7XG4gICAgICAgIGNvbnN0IHN1Y2Nlc3NBbGVydCA9IGh0bWxUb0VsZW1lbnQoYDxkaXY+PGEgaWQ9XCJ0b3J1c0FsZXJ0X19idG5cIj4ke3RoaXMuZW1iZWRUcmFuc2xhdGlvbnMuY29udGludWV9PC9hPjwvZGl2PmApO1xuICAgICAgICBjb25zdCBidG5Db250YWluZXIgPSBodG1sVG9FbGVtZW50KCc8ZGl2IGlkPVwidG9ydXNBbGVydF9fYnRuLWNvbnRhaW5lclwiPjwvZGl2PicpO1xuICAgICAgICBidG5Db250YWluZXIuYXBwZW5kQ2hpbGQoc3VjY2Vzc0FsZXJ0KTtcbiAgICAgICAgdG9ydXNBbGVydC5hcHBlbmRDaGlsZChidG5Db250YWluZXIpO1xuICAgICAgICBjb25zdCBiaW5kT25Mb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgc3VjY2Vzc0FsZXJ0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlV2luZG93KHByZW9wZW5JbnN0YW5jZUlkLCB7XG4gICAgICAgICAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiLFxuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlczogRkVBVFVSRVNfQ09ORklSTV9XSU5ET1csXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdG9ydXNBbGVydC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50b3J1c0FsZXJ0Q29udGFpbmVyLmNoaWxkcmVuLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b3J1c0FsZXJ0Q29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9zZXRFbWJlZFdoaXRlTGFiZWwodG9ydXNBbGVydCk7XG4gICAgICAgIGNvbnN0IGF0dGFjaE9uTG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudG9ydXNBbGVydENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICAgICAgdGhpcy50b3J1c0FsZXJ0Q29udGFpbmVyLmFwcGVuZENoaWxkKHRvcnVzQWxlcnQpO1xuICAgICAgICB9O1xuICAgICAgICBydW5PbkxvYWQoYXR0YWNoT25Mb2FkKTtcbiAgICAgICAgcnVuT25Mb2FkKGJpbmRPbkxvYWQpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgQlVUVE9OX1BPU0lUSU9OLCBMT0dJTl9QUk9WSURFUiwgUEFZTUVOVF9QUk9WSURFUiwgVE9SVVNfQlVJTERfRU5WLCBUb3J1c0lucGFnZVByb3ZpZGVyLCBXQUxMRVRfT1BFTkxPR0lOX1ZFUklGSUVSX01BUCwgVG9ydXMgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9ydXMuZXNtLmpzLm1hcFxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcG9zc2libGVOYW1lcyA9IFtcblx0J0JpZ0ludDY0QXJyYXknLFxuXHQnQmlnVWludDY0QXJyYXknLFxuXHQnRmxvYXQzMkFycmF5Jyxcblx0J0Zsb2F0NjRBcnJheScsXG5cdCdJbnQxNkFycmF5Jyxcblx0J0ludDMyQXJyYXknLFxuXHQnSW50OEFycmF5Jyxcblx0J1VpbnQxNkFycmF5Jyxcblx0J1VpbnQzMkFycmF5Jyxcblx0J1VpbnQ4QXJyYXknLFxuXHQnVWludDhDbGFtcGVkQXJyYXknXG5dO1xuXG52YXIgZyA9IHR5cGVvZiBnbG9iYWxUaGlzID09PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IGdsb2JhbFRoaXM7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYXZhaWxhYmxlVHlwZWRBcnJheXMoKSB7XG5cdHZhciBvdXQgPSBbXTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwb3NzaWJsZU5hbWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0aWYgKHR5cGVvZiBnW3Bvc3NpYmxlTmFtZXNbaV1dID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRvdXRbb3V0Lmxlbmd0aF0gPSBwb3NzaWJsZU5hbWVzW2ldO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gb3V0O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHBhZF9zdHJpbmdfMSA9IHJlcXVpcmUoXCIuL3BhZC1zdHJpbmdcIik7XG5mdW5jdGlvbiBlbmNvZGUoaW5wdXQsIGVuY29kaW5nKSB7XG4gICAgaWYgKGVuY29kaW5nID09PSB2b2lkIDApIHsgZW5jb2RpbmcgPSBcInV0ZjhcIjsgfVxuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoaW5wdXQpKSB7XG4gICAgICAgIHJldHVybiBmcm9tQmFzZTY0KGlucHV0LnRvU3RyaW5nKFwiYmFzZTY0XCIpKTtcbiAgICB9XG4gICAgcmV0dXJuIGZyb21CYXNlNjQoQnVmZmVyLmZyb20oaW5wdXQsIGVuY29kaW5nKS50b1N0cmluZyhcImJhc2U2NFwiKSk7XG59XG47XG5mdW5jdGlvbiBkZWNvZGUoYmFzZTY0dXJsLCBlbmNvZGluZykge1xuICAgIGlmIChlbmNvZGluZyA9PT0gdm9pZCAwKSB7IGVuY29kaW5nID0gXCJ1dGY4XCI7IH1cbiAgICByZXR1cm4gQnVmZmVyLmZyb20odG9CYXNlNjQoYmFzZTY0dXJsKSwgXCJiYXNlNjRcIikudG9TdHJpbmcoZW5jb2RpbmcpO1xufVxuZnVuY3Rpb24gdG9CYXNlNjQoYmFzZTY0dXJsKSB7XG4gICAgYmFzZTY0dXJsID0gYmFzZTY0dXJsLnRvU3RyaW5nKCk7XG4gICAgcmV0dXJuIHBhZF9zdHJpbmdfMS5kZWZhdWx0KGJhc2U2NHVybClcbiAgICAgICAgLnJlcGxhY2UoL1xcLS9nLCBcIitcIilcbiAgICAgICAgLnJlcGxhY2UoL18vZywgXCIvXCIpO1xufVxuZnVuY3Rpb24gZnJvbUJhc2U2NChiYXNlNjQpIHtcbiAgICByZXR1cm4gYmFzZTY0XG4gICAgICAgIC5yZXBsYWNlKC89L2csIFwiXCIpXG4gICAgICAgIC5yZXBsYWNlKC9cXCsvZywgXCItXCIpXG4gICAgICAgIC5yZXBsYWNlKC9cXC8vZywgXCJfXCIpO1xufVxuZnVuY3Rpb24gdG9CdWZmZXIoYmFzZTY0dXJsKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRvQmFzZTY0KGJhc2U2NHVybCksIFwiYmFzZTY0XCIpO1xufVxudmFyIGJhc2U2NHVybCA9IGVuY29kZTtcbmJhc2U2NHVybC5lbmNvZGUgPSBlbmNvZGU7XG5iYXNlNjR1cmwuZGVjb2RlID0gZGVjb2RlO1xuYmFzZTY0dXJsLnRvQmFzZTY0ID0gdG9CYXNlNjQ7XG5iYXNlNjR1cmwuZnJvbUJhc2U2NCA9IGZyb21CYXNlNjQ7XG5iYXNlNjR1cmwudG9CdWZmZXIgPSB0b0J1ZmZlcjtcbmV4cG9ydHMuZGVmYXVsdCA9IGJhc2U2NHVybDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gcGFkU3RyaW5nKGlucHV0KSB7XG4gICAgdmFyIHNlZ21lbnRMZW5ndGggPSA0O1xuICAgIHZhciBzdHJpbmdMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG4gICAgdmFyIGRpZmYgPSBzdHJpbmdMZW5ndGggJSBzZWdtZW50TGVuZ3RoO1xuICAgIGlmICghZGlmZikge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICAgIHZhciBwb3NpdGlvbiA9IHN0cmluZ0xlbmd0aDtcbiAgICB2YXIgcGFkTGVuZ3RoID0gc2VnbWVudExlbmd0aCAtIGRpZmY7XG4gICAgdmFyIHBhZGRlZFN0cmluZ0xlbmd0aCA9IHN0cmluZ0xlbmd0aCArIHBhZExlbmd0aDtcbiAgICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jKHBhZGRlZFN0cmluZ0xlbmd0aCk7XG4gICAgYnVmZmVyLndyaXRlKGlucHV0KTtcbiAgICB3aGlsZSAocGFkTGVuZ3RoLS0pIHtcbiAgICAgICAgYnVmZmVyLndyaXRlKFwiPVwiLCBwb3NpdGlvbisrKTtcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZmZlci50b1N0cmluZygpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gcGFkU3RyaW5nO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvYmFzZTY0dXJsJykuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBtb2R1bGUuZXhwb3J0cztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICRnT1BEID0gR2V0SW50cmluc2ljKCclT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciUnLCB0cnVlKTtcbmlmICgkZ09QRCkge1xuXHR0cnkge1xuXHRcdCRnT1BEKFtdLCAnbGVuZ3RoJyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBnT1BEXG5cdFx0JGdPUEQgPSBudWxsO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gJGdPUEQ7XG4iLCJ2YXIgbmFpdmVGYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcblx0aWYgKHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiICYmIHNlbGYpIHJldHVybiBzZWxmO1xuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiAmJiB3aW5kb3cpIHJldHVybiB3aW5kb3c7XG5cdHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byByZXNvbHZlIGdsb2JhbCBgdGhpc2BcIik7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiAoKSB7XG5cdGlmICh0aGlzKSByZXR1cm4gdGhpcztcblxuXHQvLyBVbmV4cGVjdGVkIHN0cmljdCBtb2RlIChtYXkgaGFwcGVuIGlmIGUuZy4gYnVuZGxlZCBpbnRvIEVTTSBtb2R1bGUpXG5cblx0Ly8gRmFsbGJhY2sgdG8gc3RhbmRhcmQgZ2xvYmFsVGhpcyBpZiBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSBcIm9iamVjdFwiICYmIGdsb2JhbFRoaXMpIHJldHVybiBnbG9iYWxUaGlzO1xuXG5cdC8vIFRoYW5rcyBAbWF0aGlhc2J5bmVucyAtPiBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvZ2xvYmFsdGhpc1xuXHQvLyBJbiBhbGwgRVM1KyBlbmdpbmVzIGdsb2JhbCBvYmplY3QgaW5oZXJpdHMgZnJvbSBPYmplY3QucHJvdG90eXBlXG5cdC8vIChpZiB5b3UgYXBwcm9hY2hlZCBvbmUgdGhhdCBkb2Vzbid0IHBsZWFzZSByZXBvcnQpXG5cdHRyeSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdC5wcm90b3R5cGUsIFwiX19nbG9iYWxfX1wiLCB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHR9KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBVbmZvcnR1bmF0ZSBjYXNlIG9mIHVwZGF0ZXMgdG8gT2JqZWN0LnByb3RvdHlwZSBiZWluZyByZXN0cmljdGVkXG5cdFx0Ly8gdmlhIHByZXZlbnRFeHRlbnNpb25zLCBzZWFsIG9yIGZyZWV6ZVxuXHRcdHJldHVybiBuYWl2ZUZhbGxiYWNrKCk7XG5cdH1cblx0dHJ5IHtcblx0XHQvLyBTYWZhcmkgY2FzZSAod2luZG93Ll9fZ2xvYmFsX18gd29ya3MsIGJ1dCBfX2dsb2JhbF9fIGRvZXMgbm90KVxuXHRcdGlmICghX19nbG9iYWxfXykgcmV0dXJuIG5haXZlRmFsbGJhY2soKTtcblx0XHRyZXR1cm4gX19nbG9iYWxfXztcblx0fSBmaW5hbGx5IHtcblx0XHRkZWxldGUgT2JqZWN0LnByb3RvdHlwZS5fX2dsb2JhbF9fO1xuXHR9XG59KSgpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xyXG4vKipcclxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBibG9vbSBpcyBhIHZhbGlkIGJsb29tXHJcbiAqIEBwYXJhbSBibG9vbSBUaGUgYmxvb21cclxuICovXHJcbmZ1bmN0aW9uIGlzQmxvb20oYmxvb20pIHtcclxuICAgIGlmICh0eXBlb2YgYmxvb20gIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKCEvXigweCk/WzAtOWEtZl17NTEyfSQvaS50ZXN0KGJsb29tKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICgvXigweCk/WzAtOWEtZl17NTEyfSQvLnRlc3QoYmxvb20pIHx8XHJcbiAgICAgICAgL14oMHgpP1swLTlBLUZdezUxMn0kLy50ZXN0KGJsb29tKSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbmV4cG9ydHMuaXNCbG9vbSA9IGlzQmxvb207XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHZhbHVlIGlzIHBhcnQgb2YgdGhlIGdpdmVuIGJsb29tXHJcbiAqIG5vdGU6IGZhbHNlIHBvc2l0aXZlcyBhcmUgcG9zc2libGUuXHJcbiAqIEBwYXJhbSBibG9vbSBlbmNvZGVkIGJsb29tXHJcbiAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWVcclxuICovXHJcbmZ1bmN0aW9uIGlzSW5CbG9vbShibG9vbSwgdmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlLmNvbnN0cnVjdG9yID09PSBVaW50OEFycmF5KSB7XHJcbiAgICAgICAgdmFsdWUgPSB1dGlsc18xLmJ5dGVzVG9IZXgodmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaGFzaCA9IHV0aWxzXzEua2VjY2FrMjU2KHZhbHVlKS5yZXBsYWNlKCcweCcsICcnKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTI7IGkgKz0gNCkge1xyXG4gICAgICAgIC8vIGNhbGN1bGF0ZSBiaXQgcG9zaXRpb24gaW4gYmxvb20gZmlsdGVyIHRoYXQgbXVzdCBiZSBhY3RpdmVcclxuICAgICAgICBjb25zdCBiaXRwb3MgPSAoKHBhcnNlSW50KGhhc2guc3Vic3RyKGksIDIpLCAxNikgPDwgOCkgK1xyXG4gICAgICAgICAgICBwYXJzZUludChoYXNoLnN1YnN0cihpICsgMiwgMiksIDE2KSkgJlxyXG4gICAgICAgICAgICAyMDQ3O1xyXG4gICAgICAgIC8vIHRlc3QgaWYgYml0cG9zIGluIGJsb29tIGlzIGFjdGl2ZVxyXG4gICAgICAgIGNvbnN0IGNvZGUgPSBjb2RlUG9pbnRUb0ludChibG9vbS5jaGFyQ29kZUF0KGJsb29tLmxlbmd0aCAtIDEgLSBNYXRoLmZsb29yKGJpdHBvcyAvIDQpKSk7XHJcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gMSA8PCBiaXRwb3MgJSA0O1xyXG4gICAgICAgIGlmICgoY29kZSAmIG9mZnNldCkgIT09IG9mZnNldCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZXhwb3J0cy5pc0luQmxvb20gPSBpc0luQmxvb207XHJcbi8qKlxyXG4gKiBDb2RlIHBvaW50cyB0byBpbnRcclxuICogQHBhcmFtIGNvZGVQb2ludCBUaGUgY29kZSBwb2ludFxyXG4gKi9cclxuZnVuY3Rpb24gY29kZVBvaW50VG9JbnQoY29kZVBvaW50KSB7XHJcbiAgICBpZiAoY29kZVBvaW50ID49IDQ4ICYmIGNvZGVQb2ludCA8PSA1Nykge1xyXG4gICAgICAgIC8qIFsnMCcuLic5J10gLT4gWzAuLjldICovXHJcbiAgICAgICAgcmV0dXJuIGNvZGVQb2ludCAtIDQ4O1xyXG4gICAgfVxyXG4gICAgaWYgKGNvZGVQb2ludCA+PSA2NSAmJiBjb2RlUG9pbnQgPD0gNzApIHtcclxuICAgICAgICAvKiBbJ0EnLi4nRiddIC0+IFsxMC4uMTVdICovXHJcbiAgICAgICAgcmV0dXJuIGNvZGVQb2ludCAtIDU1O1xyXG4gICAgfVxyXG4gICAgaWYgKGNvZGVQb2ludCA+PSA5NyAmJiBjb2RlUG9pbnQgPD0gMTAyKSB7XHJcbiAgICAgICAgLyogWydhJy4uJ2YnXSAtPiBbMTAuLjE1XSAqL1xyXG4gICAgICAgIHJldHVybiBjb2RlUG9pbnQgLSA4NztcclxuICAgIH1cclxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBibG9vbScpO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGV0aGVyZXVtIHVzZXJzIGFkZHJlc3MgaXMgcGFydCBvZiB0aGUgZ2l2ZW4gYmxvb20uXHJcbiAqIG5vdGU6IGZhbHNlIHBvc2l0aXZlcyBhcmUgcG9zc2libGUuXHJcbiAqIEBwYXJhbSBibG9vbSBlbmNvZGVkIGJsb29tXHJcbiAqIEBwYXJhbSBhZGRyZXNzIHRoZSBhZGRyZXNzIHRvIHRlc3RcclxuICovXHJcbmZ1bmN0aW9uIGlzVXNlckV0aGVyZXVtQWRkcmVzc0luQmxvb20oYmxvb20sIGV0aGVyZXVtQWRkcmVzcykge1xyXG4gICAgaWYgKCFpc0Jsb29tKGJsb29tKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBibG9vbSBnaXZlbicpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FkZHJlc3MoZXRoZXJldW1BZGRyZXNzKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBldGhlcmV1bSBhZGRyZXNzIGdpdmVuOiBcIiR7ZXRoZXJldW1BZGRyZXNzfVwiYCk7XHJcbiAgICB9XHJcbiAgICAvLyB5b3UgaGF2ZSB0byBwYWQgdGhlIGV0aGVyZXVtIGFkZHJlc3MgdG8gMzIgYnl0ZXNcclxuICAgIC8vIGVsc2UgdGhlIGJsb29tIGZpbHRlciBkb2VzIG5vdCB3b3JrXHJcbiAgICAvLyB0aGlzIGlzIG9ubHkgaWYgeW91ciBtYXRjaGluZyB0aGUgVVNFUlNcclxuICAgIC8vIGV0aGVyZXVtIGFkZHJlc3MuIENvbnRyYWN0IGFkZHJlc3MgZG8gbm90IG5lZWQgdGhpc1xyXG4gICAgLy8gaGVuY2Ugd2h5IHdlIGhhdmUgMiBtZXRob2RzXHJcbiAgICAvLyAoMHggaXMgbm90IGluIHRoZSAybmQgcGFyYW1ldGVyIG9mIHBhZGxlZnQgc28gNjQgY2hhcnMgaXMgZmluZSlcclxuICAgIGNvbnN0IGFkZHJlc3MgPSB1dGlsc18xLnBhZExlZnQoZXRoZXJldW1BZGRyZXNzLCA2NCk7XHJcbiAgICByZXR1cm4gaXNJbkJsb29tKGJsb29tLCBhZGRyZXNzKTtcclxufVxyXG5leHBvcnRzLmlzVXNlckV0aGVyZXVtQWRkcmVzc0luQmxvb20gPSBpc1VzZXJFdGhlcmV1bUFkZHJlc3NJbkJsb29tO1xyXG4vKipcclxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBjb250cmFjdCBhZGRyZXNzIGlzIHBhcnQgb2YgdGhlIGdpdmVuIGJsb29tLlxyXG4gKiBub3RlOiBmYWxzZSBwb3NpdGl2ZXMgYXJlIHBvc3NpYmxlLlxyXG4gKiBAcGFyYW0gYmxvb20gZW5jb2RlZCBibG9vbVxyXG4gKiBAcGFyYW0gY29udHJhY3RBZGRyZXNzIHRoZSBjb250cmFjdCBhZGRyZXNzIHRvIHRlc3RcclxuICovXHJcbmZ1bmN0aW9uIGlzQ29udHJhY3RBZGRyZXNzSW5CbG9vbShibG9vbSwgY29udHJhY3RBZGRyZXNzKSB7XHJcbiAgICBpZiAoIWlzQmxvb20oYmxvb20pKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGJsb29tIGdpdmVuJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzQWRkcmVzcyhjb250cmFjdEFkZHJlc3MpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGNvbnRyYWN0IGFkZHJlc3MgZ2l2ZW46IFwiJHtjb250cmFjdEFkZHJlc3N9XCJgKTtcclxuICAgIH1cclxuICAgIHJldHVybiBpc0luQmxvb20oYmxvb20sIGNvbnRyYWN0QWRkcmVzcyk7XHJcbn1cclxuZXhwb3J0cy5pc0NvbnRyYWN0QWRkcmVzc0luQmxvb20gPSBpc0NvbnRyYWN0QWRkcmVzc0luQmxvb207XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHRvcGljIGlzIHBhcnQgb2YgdGhlIGdpdmVuIGJsb29tLlxyXG4gKiBub3RlOiBmYWxzZSBwb3NpdGl2ZXMgYXJlIHBvc3NpYmxlLlxyXG4gKiBAcGFyYW0gYmxvb20gZW5jb2RlZCBibG9vbVxyXG4gKiBAcGFyYW0gdG9waWMgdGhlIHRvcGljIGVuY29kZWQgaGV4XHJcbiAqL1xyXG5mdW5jdGlvbiBpc1RvcGljSW5CbG9vbShibG9vbSwgdG9waWMpIHtcclxuICAgIGlmICghaXNCbG9vbShibG9vbSkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYmxvb20gZ2l2ZW4nKTtcclxuICAgIH1cclxuICAgIGlmICghaXNUb3BpYyh0b3BpYykpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdG9waWMnKTtcclxuICAgIH1cclxuICAgIHJldHVybiBpc0luQmxvb20oYmxvb20sIHRvcGljKTtcclxufVxyXG5leHBvcnRzLmlzVG9waWNJbkJsb29tID0gaXNUb3BpY0luQmxvb207XHJcbi8qKlxyXG4gKiBDaGVja3MgaWYgaXRzIGEgdmFsaWQgdG9waWNcclxuICogQHBhcmFtIHRvcGljIGVuY29kZWQgaGV4IHRvcGljXHJcbiAqL1xyXG5mdW5jdGlvbiBpc1RvcGljKHRvcGljKSB7XHJcbiAgICBpZiAodHlwZW9mIHRvcGljICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICghL14oMHgpP1swLTlhLWZdezY0fSQvaS50ZXN0KHRvcGljKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKC9eKDB4KT9bMC05YS1mXXs2NH0kLy50ZXN0KHRvcGljKSB8fFxyXG4gICAgICAgIC9eKDB4KT9bMC05QS1GXXs2NH0kLy50ZXN0KHRvcGljKSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbmV4cG9ydHMuaXNUb3BpYyA9IGlzVG9waWM7XHJcbi8qKlxyXG4gKiBJcyB2YWxpZCBhZGRyZXNzXHJcbiAqIEBwYXJhbSBhZGRyZXNzIFRoZSBhZGRyZXNzXHJcbiAqL1xyXG5mdW5jdGlvbiBpc0FkZHJlc3MoYWRkcmVzcykge1xyXG4gICAgaWYgKHR5cGVvZiBhZGRyZXNzICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChhZGRyZXNzLm1hdGNoKC9eKDB4KT9bMC05YS1mQS1GXXs0MH0kLykpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChhZGRyZXNzLm1hdGNoKC9eWEVbMC05XXsyfVswLTlBLVphLXpdezMwLDMxfSQvKSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbmV4cG9ydHMuaXNBZGRyZXNzID0gaXNBZGRyZXNzO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBzaGEzID0gcmVxdWlyZShcImpzLXNoYTNcIik7XHJcbi8qKlxyXG4gKiBLZWNjYWsyNTYgaGFzaFxyXG4gKiBAcGFyYW0gZGF0YSBUaGUgZGF0YVxyXG4gKi9cclxuZnVuY3Rpb24ga2VjY2FrMjU2KGRhdGEpIHtcclxuICAgIHJldHVybiAnMHgnICsgc2hhMy5rZWNjYWtfMjU2KHRvQnl0ZUFycmF5KGRhdGEpKTtcclxufVxyXG5leHBvcnRzLmtlY2NhazI1NiA9IGtlY2NhazI1NjtcclxuLyoqXHJcbiAqIEFkZGluZyBwYWRkaW5nIHRvIHN0cmluZyBvbiB0aGUgbGVmdFxyXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlXHJcbiAqIEBwYXJhbSBjaGFycyBUaGUgY2hhcnNcclxuICovXHJcbmV4cG9ydHMucGFkTGVmdCA9ICh2YWx1ZSwgY2hhcnMpID0+IHtcclxuICAgIGNvbnN0IGhhc1ByZWZpeCA9IC9eMHgvaS50ZXN0KHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xyXG4gICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpLnJlcGxhY2UoL14weC9pLCAnJyk7XHJcbiAgICBjb25zdCBwYWRkaW5nID0gY2hhcnMgLSB2YWx1ZS5sZW5ndGggKyAxID49IDAgPyBjaGFycyAtIHZhbHVlLmxlbmd0aCArIDEgOiAwO1xyXG4gICAgcmV0dXJuIChoYXNQcmVmaXggPyAnMHgnIDogJycpICsgbmV3IEFycmF5KHBhZGRpbmcpLmpvaW4oJzAnKSArIHZhbHVlO1xyXG59O1xyXG4vKipcclxuICogQ29udmVydCBieXRlcyB0byBoZXhcclxuICogQHBhcmFtIGJ5dGVzIFRoZSBieXRlc1xyXG4gKi9cclxuZnVuY3Rpb24gYnl0ZXNUb0hleChieXRlcykge1xyXG4gICAgY29uc3QgaGV4ID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaGV4LnB1c2goKGJ5dGVzW2ldID4+PiA0KS50b1N0cmluZygxNikpO1xyXG4gICAgICAgIGhleC5wdXNoKChieXRlc1tpXSAmIDB4ZikudG9TdHJpbmcoMTYpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBgMHgke2hleC5qb2luKCcnKS5yZXBsYWNlKC9eMCsvLCAnJyl9YDtcclxufVxyXG5leHBvcnRzLmJ5dGVzVG9IZXggPSBieXRlc1RvSGV4O1xyXG4vKipcclxuICogVG8gYnl0ZSBhcnJheVxyXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlXHJcbiAqL1xyXG5mdW5jdGlvbiB0b0J5dGVBcnJheSh2YWx1ZSkge1xyXG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Nhbm5vdCBjb252ZXJ0IG51bGwgdmFsdWUgdG8gYXJyYXknKTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB2YWx1ZS5tYXRjaCgvXigweCk/WzAtOWEtZkEtRl0qJC8pO1xyXG4gICAgICAgIGlmICghbWF0Y2gpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGhleGlkZWNpbWFsIHN0cmluZycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobWF0Y2hbMV0gIT09ICcweCcpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoZXggc3RyaW5nIG11c3QgaGF2ZSAweCBwcmVmaXgnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHJpbmcoMik7XHJcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCAlIDIpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSAnMCcgKyB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkgKz0gMikge1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaChwYXJzZUludCh2YWx1ZS5zdWJzdHIoaSwgMiksIDE2KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhZGRTbGljZShuZXcgVWludDhBcnJheShyZXN1bHQpKTtcclxuICAgIH1cclxuICAgIGlmIChpc0J5dGVBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gYWRkU2xpY2UobmV3IFVpbnQ4QXJyYXkodmFsdWUpKTtcclxuICAgIH1cclxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBhcnJheWlmeSB2YWx1ZScpO1xyXG59XHJcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheTtcclxuLyoqXHJcbiAqIElzIGJ5dGUgYXJyYXlcclxuICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZVxyXG4gKi9cclxuZnVuY3Rpb24gaXNCeXRlQXJyYXkodmFsdWUpIHtcclxuICAgIGlmICghdmFsdWUgfHxcclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IHJhZGl4XHJcbiAgICAgICAgcGFyc2VJbnQoU3RyaW5nKHZhbHVlLmxlbmd0aCkpICE9IHZhbHVlLmxlbmd0aCB8fFxyXG4gICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgdiA9IHZhbHVlW2ldO1xyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogcmFkaXhcclxuICAgICAgICBpZiAodiA8IDAgfHwgdiA+PSAyNTYgfHwgcGFyc2VJbnQoU3RyaW5nKHYpKSAhPSB2KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG4vKipcclxuICogQWRkIHNsaWNlIHRvIGFycmF5XHJcbiAqIEBwYXJhbSBhcnJheSBUaGUgYXJyYXlcclxuICovXHJcbmZ1bmN0aW9uIGFkZFNsaWNlKGFycmF5KSB7XHJcbiAgICBpZiAoYXJyYXkuc2xpY2UgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiBhcnJheTtcclxuICAgIH1cclxuICAgIGFycmF5LnNsaWNlID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xyXG4gICAgICAgIHJldHVybiBhZGRTbGljZShuZXcgVWludDhBcnJheShBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYXJyYXksIGFyZ3MpKSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGFycmF5O1xyXG59XHJcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gZG8gbm90IGVkaXQgLmpzIGZpbGVzIGRpcmVjdGx5IC0gZWRpdCBzcmMvaW5kZXguanN0XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVxdWFsKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIGlmIChhICYmIGIgJiYgdHlwZW9mIGEgPT0gJ29iamVjdCcgJiYgdHlwZW9mIGIgPT0gJ29iamVjdCcpIHtcbiAgICBpZiAoYS5jb25zdHJ1Y3RvciAhPT0gYi5jb25zdHJ1Y3RvcikgcmV0dXJuIGZhbHNlO1xuXG4gICAgdmFyIGxlbmd0aCwgaSwga2V5cztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgICAgbGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoICE9IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXG4gICAgICAgIGlmICghZXF1YWwoYVtpXSwgYltpXSkpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuXG5cbiAgICBpZiAoYS5jb25zdHJ1Y3RvciA9PT0gUmVnRXhwKSByZXR1cm4gYS5zb3VyY2UgPT09IGIuc291cmNlICYmIGEuZmxhZ3MgPT09IGIuZmxhZ3M7XG4gICAgaWYgKGEudmFsdWVPZiAhPT0gT2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mKSByZXR1cm4gYS52YWx1ZU9mKCkgPT09IGIudmFsdWVPZigpO1xuICAgIGlmIChhLnRvU3RyaW5nICE9PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKSByZXR1cm4gYS50b1N0cmluZygpID09PSBiLnRvU3RyaW5nKCk7XG5cbiAgICBrZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgaWYgKGxlbmd0aCAhPT0gT2JqZWN0LmtleXMoYikubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBrZXlzW2ldKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFlcXVhbChhW2tleV0sIGJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIHRydWUgaWYgYm90aCBOYU4sIGZhbHNlIG90aGVyd2lzZVxuICByZXR1cm4gYSE9PWEgJiYgYiE9PWI7XG59O1xuIiwiXG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZm9yRWFjaCAob2JqLCBmbiwgY3R4KSB7XG4gICAgaWYgKHRvU3RyaW5nLmNhbGwoZm4pICE9PSAnW29iamVjdCBGdW5jdGlvbl0nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2l0ZXJhdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgIH1cbiAgICB2YXIgbCA9IG9iai5sZW5ndGg7XG4gICAgaWYgKGwgPT09ICtsKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBmbi5jYWxsKGN0eCwgb2JqW2ldLCBpLCBvYmopO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIgayBpbiBvYmopIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChvYmosIGspKSB7XG4gICAgICAgICAgICAgICAgZm4uY2FsbChjdHgsIG9ialtrXSwgaywgb2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scy9zaGFtcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc1RvU3RyaW5nVGFnU2hhbXMoKSB7XG5cdHJldHVybiBoYXNTeW1ib2xzKCkgJiYgISFTeW1ib2wudG9TdHJpbmdUYWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzVG9TdHJpbmdUYWcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcblxudmFyICR0b1N0cmluZyA9IGNhbGxCb3VuZCgnT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZycpO1xuXG52YXIgaXNTdGFuZGFyZEFyZ3VtZW50cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG5cdGlmIChoYXNUb1N0cmluZ1RhZyAmJiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWx1ZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gJHRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG59O1xuXG52YXIgaXNMZWdhY3lBcmd1bWVudHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuXHRpZiAoaXNTdGFuZGFyZEFyZ3VtZW50cyh2YWx1ZSkpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRyZXR1cm4gdmFsdWUgIT09IG51bGwgJiZcblx0XHR0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG5cdFx0dHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcicgJiZcblx0XHR2YWx1ZS5sZW5ndGggPj0gMCAmJlxuXHRcdCR0b1N0cmluZyh2YWx1ZSkgIT09ICdbb2JqZWN0IEFycmF5XScgJiZcblx0XHQkdG9TdHJpbmcodmFsdWUuY2FsbGVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG5cbnZhciBzdXBwb3J0c1N0YW5kYXJkQXJndW1lbnRzID0gKGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIGlzU3RhbmRhcmRBcmd1bWVudHMoYXJndW1lbnRzKTtcbn0oKSk7XG5cbmlzU3RhbmRhcmRBcmd1bWVudHMuaXNMZWdhY3lBcmd1bWVudHMgPSBpc0xlZ2FjeUFyZ3VtZW50czsgLy8gZm9yIHRlc3RzXG5cbm1vZHVsZS5leHBvcnRzID0gc3VwcG9ydHNTdGFuZGFyZEFyZ3VtZW50cyA/IGlzU3RhbmRhcmRBcmd1bWVudHMgOiBpc0xlZ2FjeUFyZ3VtZW50cztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBmblRvU3RyID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGlzRm5SZWdleCA9IC9eXFxzKig/OmZ1bmN0aW9uKT9cXCovO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gcmVxdWlyZSgnaGFzLXRvc3RyaW5ndGFnL3NoYW1zJykoKTtcbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBnZXRHZW5lcmF0b3JGdW5jID0gZnVuY3Rpb24gKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5cdGlmICghaGFzVG9TdHJpbmdUYWcpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0dHJ5IHtcblx0XHRyZXR1cm4gRnVuY3Rpb24oJ3JldHVybiBmdW5jdGlvbiooKSB7fScpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0fVxufTtcbnZhciBHZW5lcmF0b3JGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0dlbmVyYXRvckZ1bmN0aW9uKGZuKSB7XG5cdGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKGlzRm5SZWdleC50ZXN0KGZuVG9TdHIuY2FsbChmbikpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0aWYgKCFoYXNUb1N0cmluZ1RhZykge1xuXHRcdHZhciBzdHIgPSB0b1N0ci5jYWxsKGZuKTtcblx0XHRyZXR1cm4gc3RyID09PSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nO1xuXHR9XG5cdGlmICghZ2V0UHJvdG8pIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKHR5cGVvZiBHZW5lcmF0b3JGdW5jdGlvbiA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHR2YXIgZ2VuZXJhdG9yRnVuYyA9IGdldEdlbmVyYXRvckZ1bmMoKTtcblx0XHRHZW5lcmF0b3JGdW5jdGlvbiA9IGdlbmVyYXRvckZ1bmMgPyBnZXRQcm90byhnZW5lcmF0b3JGdW5jKSA6IGZhbHNlO1xuXHR9XG5cdHJldHVybiBnZXRQcm90byhmbikgPT09IEdlbmVyYXRvckZ1bmN0aW9uO1xufTtcbiIsIi8qKlxuICogUmV0dXJucyBhIGBCb29sZWFuYCBvbiB3aGV0aGVyIG9yIG5vdCB0aGUgYSBgU3RyaW5nYCBzdGFydHMgd2l0aCAnMHgnXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIHRoZSBzdHJpbmcgaW5wdXQgdmFsdWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59IGEgYm9vbGVhbiBpZiBpdCBpcyBvciBpcyBub3QgaGV4IHByZWZpeGVkXG4gKiBAdGhyb3dzIGlmIHRoZSBzdHIgaW5wdXQgaXMgbm90IGEgc3RyaW5nXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNIZXhQcmVmaXhlZChzdHIpIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiW2lzLWhleC1wcmVmaXhlZF0gdmFsdWUgbXVzdCBiZSB0eXBlICdzdHJpbmcnLCBpcyBjdXJyZW50bHkgdHlwZSBcIiArICh0eXBlb2Ygc3RyKSArIFwiLCB3aGlsZSBjaGVja2luZyBpc0hleFByZWZpeGVkLlwiKTtcbiAgfVxuXG4gIHJldHVybiBzdHIuc2xpY2UoMCwgMikgPT09ICcweCc7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnZm9yZWFjaCcpO1xudmFyIGF2YWlsYWJsZVR5cGVkQXJyYXlzID0gcmVxdWlyZSgnYXZhaWxhYmxlLXR5cGVkLWFycmF5cycpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcblxudmFyICR0b1N0cmluZyA9IGNhbGxCb3VuZCgnT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZycpO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gcmVxdWlyZSgnaGFzLXRvc3RyaW5ndGFnL3NoYW1zJykoKTtcblxudmFyIGcgPSB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiBnbG9iYWxUaGlzO1xudmFyIHR5cGVkQXJyYXlzID0gYXZhaWxhYmxlVHlwZWRBcnJheXMoKTtcblxudmFyICRpbmRleE9mID0gY2FsbEJvdW5kKCdBcnJheS5wcm90b3R5cGUuaW5kZXhPZicsIHRydWUpIHx8IGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRpZiAoYXJyYXlbaV0gPT09IHZhbHVlKSB7XG5cdFx0XHRyZXR1cm4gaTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIC0xO1xufTtcbnZhciAkc2xpY2UgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuc2xpY2UnKTtcbnZhciB0b1N0clRhZ3MgPSB7fTtcbnZhciBnT1BEID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvaGVscGVycy9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjsgLy8gcmVxdWlyZSgnZ2V0cHJvdG90eXBlb2YnKTtcbmlmIChoYXNUb1N0cmluZ1RhZyAmJiBnT1BEICYmIGdldFByb3RvdHlwZU9mKSB7XG5cdGZvckVhY2godHlwZWRBcnJheXMsIGZ1bmN0aW9uICh0eXBlZEFycmF5KSB7XG5cdFx0dmFyIGFyciA9IG5ldyBnW3R5cGVkQXJyYXldKCk7XG5cdFx0aWYgKFN5bWJvbC50b1N0cmluZ1RhZyBpbiBhcnIpIHtcblx0XHRcdHZhciBwcm90byA9IGdldFByb3RvdHlwZU9mKGFycik7XG5cdFx0XHR2YXIgZGVzY3JpcHRvciA9IGdPUEQocHJvdG8sIFN5bWJvbC50b1N0cmluZ1RhZyk7XG5cdFx0XHRpZiAoIWRlc2NyaXB0b3IpIHtcblx0XHRcdFx0dmFyIHN1cGVyUHJvdG8gPSBnZXRQcm90b3R5cGVPZihwcm90byk7XG5cdFx0XHRcdGRlc2NyaXB0b3IgPSBnT1BEKHN1cGVyUHJvdG8sIFN5bWJvbC50b1N0cmluZ1RhZyk7XG5cdFx0XHR9XG5cdFx0XHR0b1N0clRhZ3NbdHlwZWRBcnJheV0gPSBkZXNjcmlwdG9yLmdldDtcblx0XHR9XG5cdH0pO1xufVxuXG52YXIgdHJ5VHlwZWRBcnJheXMgPSBmdW5jdGlvbiB0cnlBbGxUeXBlZEFycmF5cyh2YWx1ZSkge1xuXHR2YXIgYW55VHJ1ZSA9IGZhbHNlO1xuXHRmb3JFYWNoKHRvU3RyVGFncywgZnVuY3Rpb24gKGdldHRlciwgdHlwZWRBcnJheSkge1xuXHRcdGlmICghYW55VHJ1ZSkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0YW55VHJ1ZSA9IGdldHRlci5jYWxsKHZhbHVlKSA9PT0gdHlwZWRBcnJheTtcblx0XHRcdH0gY2F0Y2ggKGUpIHsgLyoqLyB9XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGFueVRydWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzVHlwZWRBcnJheSh2YWx1ZSkge1xuXHRpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICghaGFzVG9TdHJpbmdUYWcgfHwgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsdWUpKSB7XG5cdFx0dmFyIHRhZyA9ICRzbGljZSgkdG9TdHJpbmcodmFsdWUpLCA4LCAtMSk7XG5cdFx0cmV0dXJuICRpbmRleE9mKHR5cGVkQXJyYXlzLCB0YWcpID4gLTE7XG5cdH1cblx0aWYgKCFnT1BEKSB7IHJldHVybiBmYWxzZTsgfVxuXHRyZXR1cm4gdHJ5VHlwZWRBcnJheXModmFsdWUpO1xufTtcbiIsInZhciBqc29uID0gdHlwZW9mIEpTT04gIT09ICd1bmRlZmluZWQnID8gSlNPTiA6IHJlcXVpcmUoJ2pzb25pZnknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgaWYgKCFvcHRzKSBvcHRzID0ge307XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSBvcHRzID0geyBjbXA6IG9wdHMgfTtcbiAgICB2YXIgc3BhY2UgPSBvcHRzLnNwYWNlIHx8ICcnO1xuICAgIGlmICh0eXBlb2Ygc3BhY2UgPT09ICdudW1iZXInKSBzcGFjZSA9IEFycmF5KHNwYWNlKzEpLmpvaW4oJyAnKTtcbiAgICB2YXIgY3ljbGVzID0gKHR5cGVvZiBvcHRzLmN5Y2xlcyA9PT0gJ2Jvb2xlYW4nKSA/IG9wdHMuY3ljbGVzIDogZmFsc2U7XG4gICAgdmFyIHJlcGxhY2VyID0gb3B0cy5yZXBsYWNlciB8fCBmdW5jdGlvbihrZXksIHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcblxuICAgIHZhciBjbXAgPSBvcHRzLmNtcCAmJiAoZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICB2YXIgYW9iaiA9IHsga2V5OiBhLCB2YWx1ZTogbm9kZVthXSB9O1xuICAgICAgICAgICAgICAgIHZhciBib2JqID0geyBrZXk6IGIsIHZhbHVlOiBub2RlW2JdIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGYoYW9iaiwgYm9iaik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH0pKG9wdHMuY21wKTtcblxuICAgIHZhciBzZWVuID0gW107XG4gICAgcmV0dXJuIChmdW5jdGlvbiBzdHJpbmdpZnkgKHBhcmVudCwga2V5LCBub2RlLCBsZXZlbCkge1xuICAgICAgICB2YXIgaW5kZW50ID0gc3BhY2UgPyAoJ1xcbicgKyBuZXcgQXJyYXkobGV2ZWwgKyAxKS5qb2luKHNwYWNlKSkgOiAnJztcbiAgICAgICAgdmFyIGNvbG9uU2VwYXJhdG9yID0gc3BhY2UgPyAnOiAnIDogJzonO1xuXG4gICAgICAgIGlmIChub2RlICYmIG5vZGUudG9KU09OICYmIHR5cGVvZiBub2RlLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUudG9KU09OKCk7XG4gICAgICAgIH1cblxuICAgICAgICBub2RlID0gcmVwbGFjZXIuY2FsbChwYXJlbnQsIGtleSwgbm9kZSk7XG5cbiAgICAgICAgaWYgKG5vZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygbm9kZSAhPT0gJ29iamVjdCcgfHwgbm9kZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGpzb24uc3RyaW5naWZ5KG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5KG5vZGUpKSB7XG4gICAgICAgICAgICB2YXIgb3V0ID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHN0cmluZ2lmeShub2RlLCBpLCBub2RlW2ldLCBsZXZlbCsxKSB8fCBqc29uLnN0cmluZ2lmeShudWxsKTtcbiAgICAgICAgICAgICAgICBvdXQucHVzaChpbmRlbnQgKyBzcGFjZSArIGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICdbJyArIG91dC5qb2luKCcsJykgKyBpbmRlbnQgKyAnXSc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2Vlbi5pbmRleE9mKG5vZGUpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGlmIChjeWNsZXMpIHJldHVybiBqc29uLnN0cmluZ2lmeSgnX19jeWNsZV9fJyk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ29udmVydGluZyBjaXJjdWxhciBzdHJ1Y3R1cmUgdG8gSlNPTicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBzZWVuLnB1c2gobm9kZSk7XG5cbiAgICAgICAgICAgIHZhciBrZXlzID0gb2JqZWN0S2V5cyhub2RlKS5zb3J0KGNtcCAmJiBjbXAobm9kZSkpO1xuICAgICAgICAgICAgdmFyIG91dCA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gc3RyaW5naWZ5KG5vZGUsIGtleSwgbm9kZVtrZXldLCBsZXZlbCsxKTtcblxuICAgICAgICAgICAgICAgIGlmKCF2YWx1ZSkgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICB2YXIga2V5VmFsdWUgPSBqc29uLnN0cmluZ2lmeShrZXkpXG4gICAgICAgICAgICAgICAgICAgICsgY29sb25TZXBhcmF0b3JcbiAgICAgICAgICAgICAgICAgICAgKyB2YWx1ZTtcbiAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgb3V0LnB1c2goaW5kZW50ICsgc3BhY2UgKyBrZXlWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWVuLnNwbGljZShzZWVuLmluZGV4T2Yobm9kZSksIDEpO1xuICAgICAgICAgICAgcmV0dXJuICd7JyArIG91dC5qb2luKCcsJykgKyBpbmRlbnQgKyAnfSc7XG4gICAgICAgIH1cbiAgICB9KSh7ICcnOiBvYmogfSwgJycsIG9iaiwgMCk7XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4ge30udG9TdHJpbmcuY2FsbCh4KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5IHx8IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWUgfTtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKGhhcy5jYWxsKG9iaiwga2V5KSkga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xufTtcbiIsImV4cG9ydHMucGFyc2UgPSByZXF1aXJlKCcuL2xpYi9wYXJzZScpO1xuZXhwb3J0cy5zdHJpbmdpZnkgPSByZXF1aXJlKCcuL2xpYi9zdHJpbmdpZnknKTtcbiIsInZhciBhdCwgLy8gVGhlIGluZGV4IG9mIHRoZSBjdXJyZW50IGNoYXJhY3RlclxuICAgIGNoLCAvLyBUaGUgY3VycmVudCBjaGFyYWN0ZXJcbiAgICBlc2NhcGVlID0ge1xuICAgICAgICAnXCInOiAgJ1wiJyxcbiAgICAgICAgJ1xcXFwnOiAnXFxcXCcsXG4gICAgICAgICcvJzogICcvJyxcbiAgICAgICAgYjogICAgJ1xcYicsXG4gICAgICAgIGY6ICAgICdcXGYnLFxuICAgICAgICBuOiAgICAnXFxuJyxcbiAgICAgICAgcjogICAgJ1xccicsXG4gICAgICAgIHQ6ICAgICdcXHQnXG4gICAgfSxcbiAgICB0ZXh0LFxuXG4gICAgZXJyb3IgPSBmdW5jdGlvbiAobSkge1xuICAgICAgICAvLyBDYWxsIGVycm9yIHdoZW4gc29tZXRoaW5nIGlzIHdyb25nLlxuICAgICAgICB0aHJvdyB7XG4gICAgICAgICAgICBuYW1lOiAgICAnU3ludGF4RXJyb3InLFxuICAgICAgICAgICAgbWVzc2FnZTogbSxcbiAgICAgICAgICAgIGF0OiAgICAgIGF0LFxuICAgICAgICAgICAgdGV4dDogICAgdGV4dFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgXG4gICAgbmV4dCA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIC8vIElmIGEgYyBwYXJhbWV0ZXIgaXMgcHJvdmlkZWQsIHZlcmlmeSB0aGF0IGl0IG1hdGNoZXMgdGhlIGN1cnJlbnQgY2hhcmFjdGVyLlxuICAgICAgICBpZiAoYyAmJiBjICE9PSBjaCkge1xuICAgICAgICAgICAgZXJyb3IoXCJFeHBlY3RlZCAnXCIgKyBjICsgXCInIGluc3RlYWQgb2YgJ1wiICsgY2ggKyBcIidcIik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEdldCB0aGUgbmV4dCBjaGFyYWN0ZXIuIFdoZW4gdGhlcmUgYXJlIG5vIG1vcmUgY2hhcmFjdGVycyxcbiAgICAgICAgLy8gcmV0dXJuIHRoZSBlbXB0eSBzdHJpbmcuXG4gICAgICAgIFxuICAgICAgICBjaCA9IHRleHQuY2hhckF0KGF0KTtcbiAgICAgICAgYXQgKz0gMTtcbiAgICAgICAgcmV0dXJuIGNoO1xuICAgIH0sXG4gICAgXG4gICAgbnVtYmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBQYXJzZSBhIG51bWJlciB2YWx1ZS5cbiAgICAgICAgdmFyIG51bWJlcixcbiAgICAgICAgICAgIHN0cmluZyA9ICcnO1xuICAgICAgICBcbiAgICAgICAgaWYgKGNoID09PSAnLScpIHtcbiAgICAgICAgICAgIHN0cmluZyA9ICctJztcbiAgICAgICAgICAgIG5leHQoJy0nKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoY2ggPj0gJzAnICYmIGNoIDw9ICc5Jykge1xuICAgICAgICAgICAgc3RyaW5nICs9IGNoO1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaCA9PT0gJy4nKSB7XG4gICAgICAgICAgICBzdHJpbmcgKz0gJy4nO1xuICAgICAgICAgICAgd2hpbGUgKG5leHQoKSAmJiBjaCA+PSAnMCcgJiYgY2ggPD0gJzknKSB7XG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IGNoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjaCA9PT0gJ2UnIHx8IGNoID09PSAnRScpIHtcbiAgICAgICAgICAgIHN0cmluZyArPSBjaDtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gJy0nIHx8IGNoID09PSAnKycpIHtcbiAgICAgICAgICAgICAgICBzdHJpbmcgKz0gY2g7XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKGNoID49ICcwJyAmJiBjaCA8PSAnOScpIHtcbiAgICAgICAgICAgICAgICBzdHJpbmcgKz0gY2g7XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG51bWJlciA9ICtzdHJpbmc7XG4gICAgICAgIGlmICghaXNGaW5pdGUobnVtYmVyKSkge1xuICAgICAgICAgICAgZXJyb3IoXCJCYWQgbnVtYmVyXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXG4gICAgc3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBQYXJzZSBhIHN0cmluZyB2YWx1ZS5cbiAgICAgICAgdmFyIGhleCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBzdHJpbmcgPSAnJyxcbiAgICAgICAgICAgIHVmZmZmO1xuICAgICAgICBcbiAgICAgICAgLy8gV2hlbiBwYXJzaW5nIGZvciBzdHJpbmcgdmFsdWVzLCB3ZSBtdXN0IGxvb2sgZm9yIFwiIGFuZCBcXCBjaGFyYWN0ZXJzLlxuICAgICAgICBpZiAoY2ggPT09ICdcIicpIHtcbiAgICAgICAgICAgIHdoaWxlIChuZXh0KCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICdcIicpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2ggPT09ICdcXFxcJykge1xuICAgICAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ3UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1ZmZmZiA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGV4ID0gcGFyc2VJbnQobmV4dCgpLCAxNik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0Zpbml0ZShoZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1ZmZmZiA9IHVmZmZmICogMTYgKyBoZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmcgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh1ZmZmZik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGVzY2FwZWVbY2hdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nICs9IGVzY2FwZWVbY2hdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgKz0gY2g7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVycm9yKFwiQmFkIHN0cmluZ1wiKTtcbiAgICB9LFxuXG4gICAgd2hpdGUgPSBmdW5jdGlvbiAoKSB7XG5cbi8vIFNraXAgd2hpdGVzcGFjZS5cblxuICAgICAgICB3aGlsZSAoY2ggJiYgY2ggPD0gJyAnKSB7XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgd29yZCA9IGZ1bmN0aW9uICgpIHtcblxuLy8gdHJ1ZSwgZmFsc2UsIG9yIG51bGwuXG5cbiAgICAgICAgc3dpdGNoIChjaCkge1xuICAgICAgICBjYXNlICd0JzpcbiAgICAgICAgICAgIG5leHQoJ3QnKTtcbiAgICAgICAgICAgIG5leHQoJ3InKTtcbiAgICAgICAgICAgIG5leHQoJ3UnKTtcbiAgICAgICAgICAgIG5leHQoJ2UnKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBjYXNlICdmJzpcbiAgICAgICAgICAgIG5leHQoJ2YnKTtcbiAgICAgICAgICAgIG5leHQoJ2EnKTtcbiAgICAgICAgICAgIG5leHQoJ2wnKTtcbiAgICAgICAgICAgIG5leHQoJ3MnKTtcbiAgICAgICAgICAgIG5leHQoJ2UnKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY2FzZSAnbic6XG4gICAgICAgICAgICBuZXh0KCduJyk7XG4gICAgICAgICAgICBuZXh0KCd1Jyk7XG4gICAgICAgICAgICBuZXh0KCdsJyk7XG4gICAgICAgICAgICBuZXh0KCdsJyk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlcnJvcihcIlVuZXhwZWN0ZWQgJ1wiICsgY2ggKyBcIidcIik7XG4gICAgfSxcblxuICAgIHZhbHVlLCAgLy8gUGxhY2UgaG9sZGVyIGZvciB0aGUgdmFsdWUgZnVuY3Rpb24uXG5cbiAgICBhcnJheSA9IGZ1bmN0aW9uICgpIHtcblxuLy8gUGFyc2UgYW4gYXJyYXkgdmFsdWUuXG5cbiAgICAgICAgdmFyIGFycmF5ID0gW107XG5cbiAgICAgICAgaWYgKGNoID09PSAnWycpIHtcbiAgICAgICAgICAgIG5leHQoJ1snKTtcbiAgICAgICAgICAgIHdoaXRlKCk7XG4gICAgICAgICAgICBpZiAoY2ggPT09ICddJykge1xuICAgICAgICAgICAgICAgIG5leHQoJ10nKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXk7ICAgLy8gZW1wdHkgYXJyYXlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChjaCkge1xuICAgICAgICAgICAgICAgIGFycmF5LnB1c2godmFsdWUoKSk7XG4gICAgICAgICAgICAgICAgd2hpdGUoKTtcbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICddJykge1xuICAgICAgICAgICAgICAgICAgICBuZXh0KCddJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV4dCgnLCcpO1xuICAgICAgICAgICAgICAgIHdoaXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZXJyb3IoXCJCYWQgYXJyYXlcIik7XG4gICAgfSxcblxuICAgIG9iamVjdCA9IGZ1bmN0aW9uICgpIHtcblxuLy8gUGFyc2UgYW4gb2JqZWN0IHZhbHVlLlxuXG4gICAgICAgIHZhciBrZXksXG4gICAgICAgICAgICBvYmplY3QgPSB7fTtcblxuICAgICAgICBpZiAoY2ggPT09ICd7Jykge1xuICAgICAgICAgICAgbmV4dCgneycpO1xuICAgICAgICAgICAgd2hpdGUoKTtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gJ30nKSB7XG4gICAgICAgICAgICAgICAgbmV4dCgnfScpO1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3Q7ICAgLy8gZW1wdHkgb2JqZWN0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoY2gpIHtcbiAgICAgICAgICAgICAgICBrZXkgPSBzdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB3aGl0ZSgpO1xuICAgICAgICAgICAgICAgIG5leHQoJzonKTtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yKCdEdXBsaWNhdGUga2V5IFwiJyArIGtleSArICdcIicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlKCk7XG4gICAgICAgICAgICAgICAgd2hpdGUoKTtcbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICd9Jykge1xuICAgICAgICAgICAgICAgICAgICBuZXh0KCd9Jyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5leHQoJywnKTtcbiAgICAgICAgICAgICAgICB3aGl0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVycm9yKFwiQmFkIG9iamVjdFwiKTtcbiAgICB9O1xuXG52YWx1ZSA9IGZ1bmN0aW9uICgpIHtcblxuLy8gUGFyc2UgYSBKU09OIHZhbHVlLiBJdCBjb3VsZCBiZSBhbiBvYmplY3QsIGFuIGFycmF5LCBhIHN0cmluZywgYSBudW1iZXIsXG4vLyBvciBhIHdvcmQuXG5cbiAgICB3aGl0ZSgpO1xuICAgIHN3aXRjaCAoY2gpIHtcbiAgICBjYXNlICd7JzpcbiAgICAgICAgcmV0dXJuIG9iamVjdCgpO1xuICAgIGNhc2UgJ1snOlxuICAgICAgICByZXR1cm4gYXJyYXkoKTtcbiAgICBjYXNlICdcIic6XG4gICAgICAgIHJldHVybiBzdHJpbmcoKTtcbiAgICBjYXNlICctJzpcbiAgICAgICAgcmV0dXJuIG51bWJlcigpO1xuICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBjaCA+PSAnMCcgJiYgY2ggPD0gJzknID8gbnVtYmVyKCkgOiB3b3JkKCk7XG4gICAgfVxufTtcblxuLy8gUmV0dXJuIHRoZSBqc29uX3BhcnNlIGZ1bmN0aW9uLiBJdCB3aWxsIGhhdmUgYWNjZXNzIHRvIGFsbCBvZiB0aGUgYWJvdmVcbi8vIGZ1bmN0aW9ucyBhbmQgdmFyaWFibGVzLlxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzb3VyY2UsIHJldml2ZXIpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIFxuICAgIHRleHQgPSBzb3VyY2U7XG4gICAgYXQgPSAwO1xuICAgIGNoID0gJyAnO1xuICAgIHJlc3VsdCA9IHZhbHVlKCk7XG4gICAgd2hpdGUoKTtcbiAgICBpZiAoY2gpIHtcbiAgICAgICAgZXJyb3IoXCJTeW50YXggZXJyb3JcIik7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUgaXMgYSByZXZpdmVyIGZ1bmN0aW9uLCB3ZSByZWN1cnNpdmVseSB3YWxrIHRoZSBuZXcgc3RydWN0dXJlLFxuICAgIC8vIHBhc3NpbmcgZWFjaCBuYW1lL3ZhbHVlIHBhaXIgdG8gdGhlIHJldml2ZXIgZnVuY3Rpb24gZm9yIHBvc3NpYmxlXG4gICAgLy8gdHJhbnNmb3JtYXRpb24sIHN0YXJ0aW5nIHdpdGggYSB0ZW1wb3Jhcnkgcm9vdCBvYmplY3QgdGhhdCBob2xkcyB0aGUgcmVzdWx0XG4gICAgLy8gaW4gYW4gZW1wdHkga2V5LiBJZiB0aGVyZSBpcyBub3QgYSByZXZpdmVyIGZ1bmN0aW9uLCB3ZSBzaW1wbHkgcmV0dXJuIHRoZVxuICAgIC8vIHJlc3VsdC5cblxuICAgIHJldHVybiB0eXBlb2YgcmV2aXZlciA9PT0gJ2Z1bmN0aW9uJyA/IChmdW5jdGlvbiB3YWxrKGhvbGRlciwga2V5KSB7XG4gICAgICAgIHZhciBrLCB2LCB2YWx1ZSA9IGhvbGRlcltrZXldO1xuICAgICAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgZm9yIChrIGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgaykpIHtcbiAgICAgICAgICAgICAgICAgICAgdiA9IHdhbGsodmFsdWUsIGspO1xuICAgICAgICAgICAgICAgICAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVtrXSA9IHY7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdmFsdWVba107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldml2ZXIuY2FsbChob2xkZXIsIGtleSwgdmFsdWUpO1xuICAgIH0oeycnOiByZXN1bHR9LCAnJykpIDogcmVzdWx0O1xufTtcbiIsInZhciBjeCA9IC9bXFx1MDAwMFxcdTAwYWRcXHUwNjAwLVxcdTA2MDRcXHUwNzBmXFx1MTdiNFxcdTE3YjVcXHUyMDBjLVxcdTIwMGZcXHUyMDI4LVxcdTIwMmZcXHUyMDYwLVxcdTIwNmZcXHVmZWZmXFx1ZmZmMC1cXHVmZmZmXS9nLFxuICAgIGVzY2FwYWJsZSA9IC9bXFxcXFxcXCJcXHgwMC1cXHgxZlxceDdmLVxceDlmXFx1MDBhZFxcdTA2MDAtXFx1MDYwNFxcdTA3MGZcXHUxN2I0XFx1MTdiNVxcdTIwMGMtXFx1MjAwZlxcdTIwMjgtXFx1MjAyZlxcdTIwNjAtXFx1MjA2ZlxcdWZlZmZcXHVmZmYwLVxcdWZmZmZdL2csXG4gICAgZ2FwLFxuICAgIGluZGVudCxcbiAgICBtZXRhID0geyAgICAvLyB0YWJsZSBvZiBjaGFyYWN0ZXIgc3Vic3RpdHV0aW9uc1xuICAgICAgICAnXFxiJzogJ1xcXFxiJyxcbiAgICAgICAgJ1xcdCc6ICdcXFxcdCcsXG4gICAgICAgICdcXG4nOiAnXFxcXG4nLFxuICAgICAgICAnXFxmJzogJ1xcXFxmJyxcbiAgICAgICAgJ1xccic6ICdcXFxccicsXG4gICAgICAgICdcIicgOiAnXFxcXFwiJyxcbiAgICAgICAgJ1xcXFwnOiAnXFxcXFxcXFwnXG4gICAgfSxcbiAgICByZXA7XG5cbmZ1bmN0aW9uIHF1b3RlKHN0cmluZykge1xuICAgIC8vIElmIHRoZSBzdHJpbmcgY29udGFpbnMgbm8gY29udHJvbCBjaGFyYWN0ZXJzLCBubyBxdW90ZSBjaGFyYWN0ZXJzLCBhbmQgbm9cbiAgICAvLyBiYWNrc2xhc2ggY2hhcmFjdGVycywgdGhlbiB3ZSBjYW4gc2FmZWx5IHNsYXAgc29tZSBxdW90ZXMgYXJvdW5kIGl0LlxuICAgIC8vIE90aGVyd2lzZSB3ZSBtdXN0IGFsc28gcmVwbGFjZSB0aGUgb2ZmZW5kaW5nIGNoYXJhY3RlcnMgd2l0aCBzYWZlIGVzY2FwZVxuICAgIC8vIHNlcXVlbmNlcy5cbiAgICBcbiAgICBlc2NhcGFibGUubGFzdEluZGV4ID0gMDtcbiAgICByZXR1cm4gZXNjYXBhYmxlLnRlc3Qoc3RyaW5nKSA/ICdcIicgKyBzdHJpbmcucmVwbGFjZShlc2NhcGFibGUsIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHZhciBjID0gbWV0YVthXTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBjID09PSAnc3RyaW5nJyA/IGMgOlxuICAgICAgICAgICAgJ1xcXFx1JyArICgnMDAwMCcgKyBhLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtNCk7XG4gICAgfSkgKyAnXCInIDogJ1wiJyArIHN0cmluZyArICdcIic7XG59XG5cbmZ1bmN0aW9uIHN0cihrZXksIGhvbGRlcikge1xuICAgIC8vIFByb2R1Y2UgYSBzdHJpbmcgZnJvbSBob2xkZXJba2V5XS5cbiAgICB2YXIgaSwgICAgICAgICAgLy8gVGhlIGxvb3AgY291bnRlci5cbiAgICAgICAgaywgICAgICAgICAgLy8gVGhlIG1lbWJlciBrZXkuXG4gICAgICAgIHYsICAgICAgICAgIC8vIFRoZSBtZW1iZXIgdmFsdWUuXG4gICAgICAgIGxlbmd0aCxcbiAgICAgICAgbWluZCA9IGdhcCxcbiAgICAgICAgcGFydGlhbCxcbiAgICAgICAgdmFsdWUgPSBob2xkZXJba2V5XTtcbiAgICBcbiAgICAvLyBJZiB0aGUgdmFsdWUgaGFzIGEgdG9KU09OIG1ldGhvZCwgY2FsbCBpdCB0byBvYnRhaW4gYSByZXBsYWNlbWVudCB2YWx1ZS5cbiAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvSlNPTihrZXkpO1xuICAgIH1cbiAgICBcbiAgICAvLyBJZiB3ZSB3ZXJlIGNhbGxlZCB3aXRoIGEgcmVwbGFjZXIgZnVuY3Rpb24sIHRoZW4gY2FsbCB0aGUgcmVwbGFjZXIgdG9cbiAgICAvLyBvYnRhaW4gYSByZXBsYWNlbWVudCB2YWx1ZS5cbiAgICBpZiAodHlwZW9mIHJlcCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IHJlcC5jYWxsKGhvbGRlciwga2V5LCB2YWx1ZSk7XG4gICAgfVxuICAgIFxuICAgIC8vIFdoYXQgaGFwcGVucyBuZXh0IGRlcGVuZHMgb24gdGhlIHZhbHVlJ3MgdHlwZS5cbiAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgcmV0dXJuIHF1b3RlKHZhbHVlKTtcbiAgICAgICAgXG4gICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgICAgICAvLyBKU09OIG51bWJlcnMgbXVzdCBiZSBmaW5pdGUuIEVuY29kZSBub24tZmluaXRlIG51bWJlcnMgYXMgbnVsbC5cbiAgICAgICAgICAgIHJldHVybiBpc0Zpbml0ZSh2YWx1ZSkgPyBTdHJpbmcodmFsdWUpIDogJ251bGwnO1xuICAgICAgICBcbiAgICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIGNhc2UgJ251bGwnOlxuICAgICAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGlzIGEgYm9vbGVhbiBvciBudWxsLCBjb252ZXJ0IGl0IHRvIGEgc3RyaW5nLiBOb3RlOlxuICAgICAgICAgICAgLy8gdHlwZW9mIG51bGwgZG9lcyBub3QgcHJvZHVjZSAnbnVsbCcuIFRoZSBjYXNlIGlzIGluY2x1ZGVkIGhlcmUgaW5cbiAgICAgICAgICAgIC8vIHRoZSByZW1vdGUgY2hhbmNlIHRoYXQgdGhpcyBnZXRzIGZpeGVkIHNvbWVkYXkuXG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIFxuICAgICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuICdudWxsJztcbiAgICAgICAgICAgIGdhcCArPSBpbmRlbnQ7XG4gICAgICAgICAgICBwYXJ0aWFsID0gW107XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFycmF5LmlzQXJyYXlcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmFwcGx5KHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgICAgICAgICAgIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFydGlhbFtpXSA9IHN0cihpLCB2YWx1ZSkgfHwgJ251bGwnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBKb2luIGFsbCBvZiB0aGUgZWxlbWVudHMgdG9nZXRoZXIsIHNlcGFyYXRlZCB3aXRoIGNvbW1hcywgYW5kXG4gICAgICAgICAgICAgICAgLy8gd3JhcCB0aGVtIGluIGJyYWNrZXRzLlxuICAgICAgICAgICAgICAgIHYgPSBwYXJ0aWFsLmxlbmd0aCA9PT0gMCA/ICdbXScgOiBnYXAgP1xuICAgICAgICAgICAgICAgICAgICAnW1xcbicgKyBnYXAgKyBwYXJ0aWFsLmpvaW4oJyxcXG4nICsgZ2FwKSArICdcXG4nICsgbWluZCArICddJyA6XG4gICAgICAgICAgICAgICAgICAgICdbJyArIHBhcnRpYWwuam9pbignLCcpICsgJ10nO1xuICAgICAgICAgICAgICAgIGdhcCA9IG1pbmQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIElmIHRoZSByZXBsYWNlciBpcyBhbiBhcnJheSwgdXNlIGl0IHRvIHNlbGVjdCB0aGUgbWVtYmVycyB0byBiZVxuICAgICAgICAgICAgLy8gc3RyaW5naWZpZWQuXG4gICAgICAgICAgICBpZiAocmVwICYmIHR5cGVvZiByZXAgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgbGVuZ3RoID0gcmVwLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgayA9IHJlcFtpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBrID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdiA9IHN0cihrLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRpYWwucHVzaChxdW90ZShrKSArIChnYXAgPyAnOiAnIDogJzonKSArIHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBpdGVyYXRlIHRocm91Z2ggYWxsIG9mIHRoZSBrZXlzIGluIHRoZSBvYmplY3QuXG4gICAgICAgICAgICAgICAgZm9yIChrIGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGspKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ID0gc3RyKGssIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydGlhbC5wdXNoKHF1b3RlKGspICsgKGdhcCA/ICc6ICcgOiAnOicpICsgdik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgLy8gSm9pbiBhbGwgb2YgdGhlIG1lbWJlciB0ZXh0cyB0b2dldGhlciwgc2VwYXJhdGVkIHdpdGggY29tbWFzLFxuICAgICAgICAvLyBhbmQgd3JhcCB0aGVtIGluIGJyYWNlcy5cblxuICAgICAgICB2ID0gcGFydGlhbC5sZW5ndGggPT09IDAgPyAne30nIDogZ2FwID9cbiAgICAgICAgICAgICd7XFxuJyArIGdhcCArIHBhcnRpYWwuam9pbignLFxcbicgKyBnYXApICsgJ1xcbicgKyBtaW5kICsgJ30nIDpcbiAgICAgICAgICAgICd7JyArIHBhcnRpYWwuam9pbignLCcpICsgJ30nO1xuICAgICAgICBnYXAgPSBtaW5kO1xuICAgICAgICByZXR1cm4gdjtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlLCByZXBsYWNlciwgc3BhY2UpIHtcbiAgICB2YXIgaTtcbiAgICBnYXAgPSAnJztcbiAgICBpbmRlbnQgPSAnJztcbiAgICBcbiAgICAvLyBJZiB0aGUgc3BhY2UgcGFyYW1ldGVyIGlzIGEgbnVtYmVyLCBtYWtlIGFuIGluZGVudCBzdHJpbmcgY29udGFpbmluZyB0aGF0XG4gICAgLy8gbWFueSBzcGFjZXMuXG4gICAgaWYgKHR5cGVvZiBzcGFjZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHNwYWNlOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGluZGVudCArPSAnICc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gSWYgdGhlIHNwYWNlIHBhcmFtZXRlciBpcyBhIHN0cmluZywgaXQgd2lsbCBiZSB1c2VkIGFzIHRoZSBpbmRlbnQgc3RyaW5nLlxuICAgIGVsc2UgaWYgKHR5cGVvZiBzcGFjZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaW5kZW50ID0gc3BhY2U7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUgaXMgYSByZXBsYWNlciwgaXQgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIGFuIGFycmF5LlxuICAgIC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3IuXG4gICAgcmVwID0gcmVwbGFjZXI7XG4gICAgaWYgKHJlcGxhY2VyICYmIHR5cGVvZiByZXBsYWNlciAhPT0gJ2Z1bmN0aW9uJ1xuICAgICYmICh0eXBlb2YgcmVwbGFjZXIgIT09ICdvYmplY3QnIHx8IHR5cGVvZiByZXBsYWNlci5sZW5ndGggIT09ICdudW1iZXInKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0pTT04uc3RyaW5naWZ5Jyk7XG4gICAgfVxuICAgIFxuICAgIC8vIE1ha2UgYSBmYWtlIHJvb3Qgb2JqZWN0IGNvbnRhaW5pbmcgb3VyIHZhbHVlIHVuZGVyIHRoZSBrZXkgb2YgJycuXG4gICAgLy8gUmV0dXJuIHRoZSByZXN1bHQgb2Ygc3RyaW5naWZ5aW5nIHRoZSB2YWx1ZS5cbiAgICByZXR1cm4gc3RyKCcnLCB7Jyc6IHZhbHVlfSk7XG59O1xuIiwiLyoqXG4gKiBMb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBPcGVuSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL29wZW5qc2Yub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3QgZnVuY3Rpb25zIGJ5IG51bWJlciBvZiBjYWxscyB3aXRoaW4gYSBzcGFuIG9mIG1pbGxpc2Vjb25kcy4gKi9cbnZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgSE9UX1NQQU4gPSAxNjtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbnZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xudHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG50eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG50eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG50eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG50eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG50eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG50eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG50eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG50eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgdmFyIHR5cGVzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlKCd1dGlsJykudHlwZXM7XG5cbiAgICBpZiAodHlwZXMpIHtcbiAgICAgIHJldHVybiB0eXBlcztcbiAgICB9XG5cbiAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAqL1xuZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICB9XG4gIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsXG4gICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xudmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgU3ltYm9sID0gcm9vdC5TeW1ib2wsXG4gICAgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheSxcbiAgICBhbGxvY1Vuc2FmZSA9IEJ1ZmZlciA/IEJ1ZmZlci5hbGxvY1Vuc2FmZSA6IHVuZGVmaW5lZCxcbiAgICBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KSxcbiAgICBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlLFxuICAgIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGUsXG4gICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2UsXG4gICAgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgbmF0aXZlTm93ID0gRGF0ZS5ub3c7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpLFxuICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqL1xudmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgIHJldHVybiBvYmplY3RDcmVhdGUocHJvdG8pO1xuICAgIH1cbiAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBvYmplY3Q7XG4gICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufSgpKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqL1xuZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgfVxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgIGlzQXJnID0gIWlzQXJyICYmIGlzQXJndW1lbnRzKHZhbHVlKSxcbiAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICBza2lwSW5kZXhlcyA9IGlzQXJyIHx8IGlzQXJnIHx8IGlzQnVmZiB8fCBpc1R5cGUsXG4gICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAoaXNCdWZmICYmIChrZXkgPT0gJ29mZnNldCcgfHwga2V5ID09ICdwYXJlbnQnKSkgfHxcbiAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICApKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFzc2lnblZhbHVlYCBleGNlcHQgdGhhdCBpdCBkb2Vzbid0IGFzc2lnblxuICogYHVuZGVmaW5lZGAgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmICgodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZXEob2JqZWN0W2tleV0sIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICogdmFsdWUgY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbnZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICB9XG4gIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICogIGNvdW50ZXJwYXJ0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKG9iamVjdCA9PT0gc291cmNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGJhc2VGb3Ioc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICBpZiAoaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBiYXNlTWVyZ2UsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICB9XG4gICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9LCBrZXlzSW4pO1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZU1lcmdlYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIG1lcmdlcyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIG1lcmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1lcmdlRnVuYyBUaGUgZnVuY3Rpb24gdG8gbWVyZ2UgdmFsdWVzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAqICBjb3VudGVycGFydHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgdmFyIG9ialZhbHVlID0gc2FmZUdldChvYmplY3QsIGtleSksXG4gICAgICBzcmNWYWx1ZSA9IHNhZmVHZXQoc291cmNlLCBrZXkpLFxuICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgaWYgKHN0YWNrZWQpIHtcbiAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBzdGFja2VkKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICA6IHVuZGVmaW5lZDtcblxuICB2YXIgaXNDb21tb24gPSBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gIGlmIChpc0NvbW1vbikge1xuICAgIHZhciBpc0FyciA9IGlzQXJyYXkoc3JjVmFsdWUpLFxuICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgaXNCdWZmZXIoc3JjVmFsdWUpLFxuICAgICAgICBpc1R5cGVkID0gIWlzQXJyICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKTtcblxuICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgaWYgKGlzQXJyIHx8IGlzQnVmZiB8fCBpc1R5cGVkKSB7XG4gICAgICBpZiAoaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IGNvcHlBcnJheShvYmpWYWx1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpc0J1ZmYpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgbmV3VmFsdWUgPSBjbG9uZUJ1ZmZlcihzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpc1R5cGVkKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5KHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBuZXdWYWx1ZSA9IFtdO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICBpZiAoaXNBcmd1bWVudHMob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gdG9QbGFpbk9iamVjdChvYmpWYWx1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICghaXNPYmplY3Qob2JqVmFsdWUpIHx8IGlzRnVuY3Rpb24ob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gaW5pdENsb25lT2JqZWN0KHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBpZiAoaXNDb21tb24pIHtcbiAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICBtZXJnZUZ1bmMobmV3VmFsdWUsIHNyY1ZhbHVlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spO1xuICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gIH1cbiAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgc3RhcnQsIGlkZW50aXR5KSwgZnVuYyArICcnKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICB9KTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gIGlmIChpc0RlZXApIHtcbiAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gIH1cbiAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgYnVmZmVyLmNvcHkocmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGFycmF5QnVmZmVyYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXJyYXlCdWZmZXIgVGhlIGFycmF5IGJ1ZmZlciB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5IGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gY2xvbmVBcnJheUJ1ZmZlcihhcnJheUJ1ZmZlcikge1xuICB2YXIgcmVzdWx0ID0gbmV3IGFycmF5QnVmZmVyLmNvbnN0cnVjdG9yKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICBuZXcgVWludDhBcnJheShyZXN1bHQpLnNldChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xufVxuXG4vKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgfVxuICAgIGlmIChpc05ldykge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uYXNzaWduYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduZXIgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXNzaWduZXIoYXNzaWduZXIpIHtcbiAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aCxcbiAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkLFxuICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgY3VzdG9taXplciA9IChhc3NpZ25lci5sZW5ndGggPiAzICYmIHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicpXG4gICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgbGVuZ3RoID0gMTtcbiAgICB9XG4gICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIG1ldGhvZHMgbGlrZSBgXy5mb3JJbmAgYW5kIGBfLmZvck93bmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KG9iamVjdCksXG4gICAgICAgIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSxcbiAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0O1xuICB9O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpXG4gICAgOiB7fTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIHZhbHVlIGFyZ3VtZW50LlxuICogQHBhcmFtIHsqfSBpbmRleCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIGluZGV4IG9yIGtleSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgb2JqZWN0IGFyZ3VtZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiBpbmRleDtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcidcbiAgICAgICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpXG4gICAgICApIHtcbiAgICByZXR1cm4gZXEob2JqZWN0W2luZGV4XSwgdmFsdWUpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtKSB7XG4gIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgIH1cbiAgICBpbmRleCA9IC0xO1xuICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheShzdGFydCArIDEpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICB9XG4gICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gIH07XG59XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAsIHVubGVzcyBga2V5YCBpcyBcIl9fcHJvdG9fX1wiIG9yIFwiY29uc3RydWN0b3JcIi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHNhZmVHZXQob2JqZWN0LCBrZXkpIHtcbiAgaWYgKGtleSA9PT0gJ2NvbnN0cnVjdG9yJyAmJiB0eXBlb2Ygb2JqZWN0W2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoa2V5ID09ICdfX3Byb3RvX18nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmV0dXJuIG9iamVjdFtrZXldO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGBmdW5jYCB0byByZXR1cm4gYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gKiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBzaG9ydE91dChmdW5jKSB7XG4gIHZhciBjb3VudCA9IDAsXG4gICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb3VudCA9IDA7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gKiBpcyBhbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuOC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiB9XG4gKlxuICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHBsYWluIG9iamVjdCBmbGF0dGVuaW5nIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZ1xuICoga2V5ZWQgcHJvcGVydGllcyBvZiBgdmFsdWVgIHRvIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBwbGFpbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICpcbiAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICovXG5mdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlLCBrZXlzSW4odmFsdWUpKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5c0luKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbmZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IG1lcmdlcyBvd24gYW5kXG4gKiBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyBpbnRvIHRoZVxuICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2UgcHJvcGVydGllcyB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAgYXJlXG4gKiBza2lwcGVkIGlmIGEgZGVzdGluYXRpb24gdmFsdWUgZXhpc3RzLiBBcnJheSBhbmQgcGxhaW4gb2JqZWN0IHByb3BlcnRpZXNcbiAqIGFyZSBtZXJnZWQgcmVjdXJzaXZlbHkuIE90aGVyIG9iamVjdHMgYW5kIHZhbHVlIHR5cGVzIGFyZSBvdmVycmlkZGVuIGJ5XG4gKiBhc3NpZ25tZW50LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuIFN1YnNlcXVlbnRcbiAqIHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjUuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0ge1xuICogICAnYSc6IFt7ICdiJzogMiB9LCB7ICdkJzogNCB9XVxuICogfTtcbiAqXG4gKiB2YXIgb3RoZXIgPSB7XG4gKiAgICdhJzogW3sgJ2MnOiAzIH0sIHsgJ2UnOiA1IH1dXG4gKiB9O1xuICpcbiAqIF8ubWVyZ2Uob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiB7ICdhJzogW3sgJ2InOiAyLCAnYyc6IDMgfSwgeyAnZCc6IDQsICdlJzogNSB9XSB9XG4gKi9cbnZhciBtZXJnZSA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCkge1xuICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KTtcbn0pO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbnN0YW50IGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5jb25zdGFudCh7ICdhJzogMSB9KSk7XG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gKiAvLyA9PiBbeyAnYSc6IDEgfSwgeyAnYSc6IDEgfV1cbiAqXG4gKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqXG4gKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gKi9cbmZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lcmdlO1xuIiwiLypcbiogbG9nbGV2ZWwgLSBodHRwczovL2dpdGh1Yi5jb20vcGltdGVycnkvbG9nbGV2ZWxcbipcbiogQ29weXJpZ2h0IChjKSAyMDEzIFRpbSBQZXJyeVxuKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4qL1xuKGZ1bmN0aW9uIChyb290LCBkZWZpbml0aW9uKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoZGVmaW5pdGlvbik7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGRlZmluaXRpb24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByb290LmxvZyA9IGRlZmluaXRpb24oKTtcbiAgICB9XG59KHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIC8vIFNsaWdodGx5IGR1YmlvdXMgdHJpY2tzIHRvIGN1dCBkb3duIG1pbmltaXplZCBmaWxlIHNpemVcbiAgICB2YXIgbm9vcCA9IGZ1bmN0aW9uKCkge307XG4gICAgdmFyIHVuZGVmaW5lZFR5cGUgPSBcInVuZGVmaW5lZFwiO1xuICAgIHZhciBpc0lFID0gKHR5cGVvZiB3aW5kb3cgIT09IHVuZGVmaW5lZFR5cGUpICYmICh0eXBlb2Ygd2luZG93Lm5hdmlnYXRvciAhPT0gdW5kZWZpbmVkVHlwZSkgJiYgKFxuICAgICAgICAvVHJpZGVudFxcL3xNU0lFIC8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudClcbiAgICApO1xuXG4gICAgdmFyIGxvZ01ldGhvZHMgPSBbXG4gICAgICAgIFwidHJhY2VcIixcbiAgICAgICAgXCJkZWJ1Z1wiLFxuICAgICAgICBcImluZm9cIixcbiAgICAgICAgXCJ3YXJuXCIsXG4gICAgICAgIFwiZXJyb3JcIlxuICAgIF07XG5cbiAgICAvLyBDcm9zcy1icm93c2VyIGJpbmQgZXF1aXZhbGVudCB0aGF0IHdvcmtzIGF0IGxlYXN0IGJhY2sgdG8gSUU2XG4gICAgZnVuY3Rpb24gYmluZE1ldGhvZChvYmosIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgdmFyIG1ldGhvZCA9IG9ialttZXRob2ROYW1lXTtcbiAgICAgICAgaWYgKHR5cGVvZiBtZXRob2QuYmluZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG1ldGhvZC5iaW5kKG9iaik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5jYWxsKG1ldGhvZCwgb2JqKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBNaXNzaW5nIGJpbmQgc2hpbSBvciBJRTggKyBNb2Rlcm5penIsIGZhbGxiYWNrIHRvIHdyYXBwaW5nXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmFwcGx5KG1ldGhvZCwgW29iaiwgYXJndW1lbnRzXSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRyYWNlKCkgZG9lc24ndCBwcmludCB0aGUgbWVzc2FnZSBpbiBJRSwgc28gZm9yIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIHdyYXAgaXRcbiAgICBmdW5jdGlvbiB0cmFjZUZvcklFKCkge1xuICAgICAgICBpZiAoY29uc29sZS5sb2cpIHtcbiAgICAgICAgICAgIGlmIChjb25zb2xlLmxvZy5hcHBseSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEluIG9sZCBJRSwgbmF0aXZlIGNvbnNvbGUgbWV0aG9kcyB0aGVtc2VsdmVzIGRvbid0IGhhdmUgYXBwbHkoKS5cbiAgICAgICAgICAgICAgICBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuYXBwbHkoY29uc29sZS5sb2csIFtjb25zb2xlLCBhcmd1bWVudHNdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uc29sZS50cmFjZSkgY29uc29sZS50cmFjZSgpO1xuICAgIH1cblxuICAgIC8vIEJ1aWxkIHRoZSBiZXN0IGxvZ2dpbmcgbWV0aG9kIHBvc3NpYmxlIGZvciB0aGlzIGVudlxuICAgIC8vIFdoZXJldmVyIHBvc3NpYmxlIHdlIHdhbnQgdG8gYmluZCwgbm90IHdyYXAsIHRvIHByZXNlcnZlIHN0YWNrIHRyYWNlc1xuICAgIGZ1bmN0aW9uIHJlYWxNZXRob2QobWV0aG9kTmFtZSkge1xuICAgICAgICBpZiAobWV0aG9kTmFtZSA9PT0gJ2RlYnVnJykge1xuICAgICAgICAgICAgbWV0aG9kTmFtZSA9ICdsb2cnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlID09PSB1bmRlZmluZWRUeXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIE5vIG1ldGhvZCBwb3NzaWJsZSwgZm9yIG5vdyAtIGZpeGVkIGxhdGVyIGJ5IGVuYWJsZUxvZ2dpbmdXaGVuQ29uc29sZUFycml2ZXNcbiAgICAgICAgfSBlbHNlIGlmIChtZXRob2ROYW1lID09PSAndHJhY2UnICYmIGlzSUUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cmFjZUZvcklFO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbnNvbGVbbWV0aG9kTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGJpbmRNZXRob2QoY29uc29sZSwgbWV0aG9kTmFtZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29uc29sZS5sb2cgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGJpbmRNZXRob2QoY29uc29sZSwgJ2xvZycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGVzZSBwcml2YXRlIGZ1bmN0aW9ucyBhbHdheXMgbmVlZCBgdGhpc2AgdG8gYmUgc2V0IHByb3Blcmx5XG5cbiAgICBmdW5jdGlvbiByZXBsYWNlTG9nZ2luZ01ldGhvZHMobGV2ZWwsIGxvZ2dlck5hbWUpIHtcbiAgICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsb2dNZXRob2RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbWV0aG9kTmFtZSA9IGxvZ01ldGhvZHNbaV07XG4gICAgICAgICAgICB0aGlzW21ldGhvZE5hbWVdID0gKGkgPCBsZXZlbCkgP1xuICAgICAgICAgICAgICAgIG5vb3AgOlxuICAgICAgICAgICAgICAgIHRoaXMubWV0aG9kRmFjdG9yeShtZXRob2ROYW1lLCBsZXZlbCwgbG9nZ2VyTmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWZpbmUgbG9nLmxvZyBhcyBhbiBhbGlhcyBmb3IgbG9nLmRlYnVnXG4gICAgICAgIHRoaXMubG9nID0gdGhpcy5kZWJ1ZztcbiAgICB9XG5cbiAgICAvLyBJbiBvbGQgSUUgdmVyc2lvbnMsIHRoZSBjb25zb2xlIGlzbid0IHByZXNlbnQgdW50aWwgeW91IGZpcnN0IG9wZW4gaXQuXG4gICAgLy8gV2UgYnVpbGQgcmVhbE1ldGhvZCgpIHJlcGxhY2VtZW50cyBoZXJlIHRoYXQgcmVnZW5lcmF0ZSBsb2dnaW5nIG1ldGhvZHNcbiAgICBmdW5jdGlvbiBlbmFibGVMb2dnaW5nV2hlbkNvbnNvbGVBcnJpdmVzKG1ldGhvZE5hbWUsIGxldmVsLCBsb2dnZXJOYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IHVuZGVmaW5lZFR5cGUpIHtcbiAgICAgICAgICAgICAgICByZXBsYWNlTG9nZ2luZ01ldGhvZHMuY2FsbCh0aGlzLCBsZXZlbCwgbG9nZ2VyTmFtZSk7XG4gICAgICAgICAgICAgICAgdGhpc1ttZXRob2ROYW1lXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIEJ5IGRlZmF1bHQsIHdlIHVzZSBjbG9zZWx5IGJvdW5kIHJlYWwgbWV0aG9kcyB3aGVyZXZlciBwb3NzaWJsZSwgYW5kXG4gICAgLy8gb3RoZXJ3aXNlIHdlIHdhaXQgZm9yIGEgY29uc29sZSB0byBhcHBlYXIsIGFuZCB0aGVuIHRyeSBhZ2Fpbi5cbiAgICBmdW5jdGlvbiBkZWZhdWx0TWV0aG9kRmFjdG9yeShtZXRob2ROYW1lLCBsZXZlbCwgbG9nZ2VyTmFtZSkge1xuICAgICAgICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICAgICAgICByZXR1cm4gcmVhbE1ldGhvZChtZXRob2ROYW1lKSB8fFxuICAgICAgICAgICAgICAgZW5hYmxlTG9nZ2luZ1doZW5Db25zb2xlQXJyaXZlcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIExvZ2dlcihuYW1lLCBkZWZhdWx0TGV2ZWwsIGZhY3RvcnkpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBjdXJyZW50TGV2ZWw7XG4gICAgICBkZWZhdWx0TGV2ZWwgPSBkZWZhdWx0TGV2ZWwgPT0gbnVsbCA/IFwiV0FSTlwiIDogZGVmYXVsdExldmVsO1xuXG4gICAgICB2YXIgc3RvcmFnZUtleSA9IFwibG9nbGV2ZWxcIjtcbiAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBzdG9yYWdlS2V5ICs9IFwiOlwiICsgbmFtZTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5hbWUgPT09IFwic3ltYm9sXCIpIHtcbiAgICAgICAgc3RvcmFnZUtleSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcGVyc2lzdExldmVsSWZQb3NzaWJsZShsZXZlbE51bSkge1xuICAgICAgICAgIHZhciBsZXZlbE5hbWUgPSAobG9nTWV0aG9kc1tsZXZlbE51bV0gfHwgJ3NpbGVudCcpLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gdW5kZWZpbmVkVHlwZSB8fCAhc3RvcmFnZUtleSkgcmV0dXJuO1xuXG4gICAgICAgICAgLy8gVXNlIGxvY2FsU3RvcmFnZSBpZiBhdmFpbGFibGVcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlW3N0b3JhZ2VLZXldID0gbGV2ZWxOYW1lO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuXG4gICAgICAgICAgLy8gVXNlIHNlc3Npb24gY29va2llIGFzIGZhbGxiYWNrXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LmNvb2tpZSA9XG4gICAgICAgICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0b3JhZ2VLZXkpICsgXCI9XCIgKyBsZXZlbE5hbWUgKyBcIjtcIjtcbiAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdldFBlcnNpc3RlZExldmVsKCkge1xuICAgICAgICAgIHZhciBzdG9yZWRMZXZlbDtcblxuICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSB1bmRlZmluZWRUeXBlIHx8ICFzdG9yYWdlS2V5KSByZXR1cm47XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBzdG9yZWRMZXZlbCA9IHdpbmRvdy5sb2NhbFN0b3JhZ2Vbc3RvcmFnZUtleV07XG4gICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuXG4gICAgICAgICAgLy8gRmFsbGJhY2sgdG8gY29va2llcyBpZiBsb2NhbCBzdG9yYWdlIGdpdmVzIHVzIG5vdGhpbmdcbiAgICAgICAgICBpZiAodHlwZW9mIHN0b3JlZExldmVsID09PSB1bmRlZmluZWRUeXBlKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICB2YXIgY29va2llID0gd2luZG93LmRvY3VtZW50LmNvb2tpZTtcbiAgICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IGNvb2tpZS5pbmRleE9mKFxuICAgICAgICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdG9yYWdlS2V5KSArIFwiPVwiKTtcbiAgICAgICAgICAgICAgICAgIGlmIChsb2NhdGlvbiAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzdG9yZWRMZXZlbCA9IC9eKFteO10rKS8uZXhlYyhjb29raWUuc2xpY2UobG9jYXRpb24pKVsxXTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIElmIHRoZSBzdG9yZWQgbGV2ZWwgaXMgbm90IHZhbGlkLCB0cmVhdCBpdCBhcyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG4gICAgICAgICAgaWYgKHNlbGYubGV2ZWxzW3N0b3JlZExldmVsXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHN0b3JlZExldmVsID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdG9yZWRMZXZlbDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2xlYXJQZXJzaXN0ZWRMZXZlbCgpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gdW5kZWZpbmVkVHlwZSB8fCAhc3RvcmFnZUtleSkgcmV0dXJuO1xuXG4gICAgICAgICAgLy8gVXNlIGxvY2FsU3RvcmFnZSBpZiBhdmFpbGFibGVcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oc3RvcmFnZUtleSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG5cbiAgICAgICAgICAvLyBVc2Ugc2Vzc2lvbiBjb29raWUgYXMgZmFsbGJhY2tcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuY29va2llID1cbiAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc3RvcmFnZUtleSkgKyBcIj07IGV4cGlyZXM9VGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBVVENcIjtcbiAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG4gICAgICB9XG5cbiAgICAgIC8qXG4gICAgICAgKlxuICAgICAgICogUHVibGljIGxvZ2dlciBBUEkgLSBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BpbXRlcnJ5L2xvZ2xldmVsIGZvciBkZXRhaWxzXG4gICAgICAgKlxuICAgICAgICovXG5cbiAgICAgIHNlbGYubmFtZSA9IG5hbWU7XG5cbiAgICAgIHNlbGYubGV2ZWxzID0geyBcIlRSQUNFXCI6IDAsIFwiREVCVUdcIjogMSwgXCJJTkZPXCI6IDIsIFwiV0FSTlwiOiAzLFxuICAgICAgICAgIFwiRVJST1JcIjogNCwgXCJTSUxFTlRcIjogNX07XG5cbiAgICAgIHNlbGYubWV0aG9kRmFjdG9yeSA9IGZhY3RvcnkgfHwgZGVmYXVsdE1ldGhvZEZhY3Rvcnk7XG5cbiAgICAgIHNlbGYuZ2V0TGV2ZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGN1cnJlbnRMZXZlbDtcbiAgICAgIH07XG5cbiAgICAgIHNlbGYuc2V0TGV2ZWwgPSBmdW5jdGlvbiAobGV2ZWwsIHBlcnNpc3QpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGxldmVsID09PSBcInN0cmluZ1wiICYmIHNlbGYubGV2ZWxzW2xldmVsLnRvVXBwZXJDYXNlKCldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgbGV2ZWwgPSBzZWxmLmxldmVsc1tsZXZlbC50b1VwcGVyQ2FzZSgpXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiBsZXZlbCA9PT0gXCJudW1iZXJcIiAmJiBsZXZlbCA+PSAwICYmIGxldmVsIDw9IHNlbGYubGV2ZWxzLlNJTEVOVCkge1xuICAgICAgICAgICAgICBjdXJyZW50TGV2ZWwgPSBsZXZlbDtcbiAgICAgICAgICAgICAgaWYgKHBlcnNpc3QgIT09IGZhbHNlKSB7ICAvLyBkZWZhdWx0cyB0byB0cnVlXG4gICAgICAgICAgICAgICAgICBwZXJzaXN0TGV2ZWxJZlBvc3NpYmxlKGxldmVsKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXBsYWNlTG9nZ2luZ01ldGhvZHMuY2FsbChzZWxmLCBsZXZlbCwgbmFtZSk7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSA9PT0gdW5kZWZpbmVkVHlwZSAmJiBsZXZlbCA8IHNlbGYubGV2ZWxzLlNJTEVOVCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiTm8gY29uc29sZSBhdmFpbGFibGUgZm9yIGxvZ2dpbmdcIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IFwibG9nLnNldExldmVsKCkgY2FsbGVkIHdpdGggaW52YWxpZCBsZXZlbDogXCIgKyBsZXZlbDtcbiAgICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBzZWxmLnNldERlZmF1bHRMZXZlbCA9IGZ1bmN0aW9uIChsZXZlbCkge1xuICAgICAgICAgIGRlZmF1bHRMZXZlbCA9IGxldmVsO1xuICAgICAgICAgIGlmICghZ2V0UGVyc2lzdGVkTGV2ZWwoKSkge1xuICAgICAgICAgICAgICBzZWxmLnNldExldmVsKGxldmVsLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc2VsZi5yZXNldExldmVsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNlbGYuc2V0TGV2ZWwoZGVmYXVsdExldmVsLCBmYWxzZSk7XG4gICAgICAgICAgY2xlYXJQZXJzaXN0ZWRMZXZlbCgpO1xuICAgICAgfTtcblxuICAgICAgc2VsZi5lbmFibGVBbGwgPSBmdW5jdGlvbihwZXJzaXN0KSB7XG4gICAgICAgICAgc2VsZi5zZXRMZXZlbChzZWxmLmxldmVscy5UUkFDRSwgcGVyc2lzdCk7XG4gICAgICB9O1xuXG4gICAgICBzZWxmLmRpc2FibGVBbGwgPSBmdW5jdGlvbihwZXJzaXN0KSB7XG4gICAgICAgICAgc2VsZi5zZXRMZXZlbChzZWxmLmxldmVscy5TSUxFTlQsIHBlcnNpc3QpO1xuICAgICAgfTtcblxuICAgICAgLy8gSW5pdGlhbGl6ZSB3aXRoIHRoZSByaWdodCBsZXZlbFxuICAgICAgdmFyIGluaXRpYWxMZXZlbCA9IGdldFBlcnNpc3RlZExldmVsKCk7XG4gICAgICBpZiAoaW5pdGlhbExldmVsID09IG51bGwpIHtcbiAgICAgICAgICBpbml0aWFsTGV2ZWwgPSBkZWZhdWx0TGV2ZWw7XG4gICAgICB9XG4gICAgICBzZWxmLnNldExldmVsKGluaXRpYWxMZXZlbCwgZmFsc2UpO1xuICAgIH1cblxuICAgIC8qXG4gICAgICpcbiAgICAgKiBUb3AtbGV2ZWwgQVBJXG4gICAgICpcbiAgICAgKi9cblxuICAgIHZhciBkZWZhdWx0TG9nZ2VyID0gbmV3IExvZ2dlcigpO1xuXG4gICAgdmFyIF9sb2dnZXJzQnlOYW1lID0ge307XG4gICAgZGVmYXVsdExvZ2dlci5nZXRMb2dnZXIgPSBmdW5jdGlvbiBnZXRMb2dnZXIobmFtZSkge1xuICAgICAgICBpZiAoKHR5cGVvZiBuYW1lICE9PSBcInN5bWJvbFwiICYmIHR5cGVvZiBuYW1lICE9PSBcInN0cmluZ1wiKSB8fCBuYW1lID09PSBcIlwiKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIllvdSBtdXN0IHN1cHBseSBhIG5hbWUgd2hlbiBjcmVhdGluZyBhIGxvZ2dlci5cIik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbG9nZ2VyID0gX2xvZ2dlcnNCeU5hbWVbbmFtZV07XG4gICAgICAgIGlmICghbG9nZ2VyKSB7XG4gICAgICAgICAgbG9nZ2VyID0gX2xvZ2dlcnNCeU5hbWVbbmFtZV0gPSBuZXcgTG9nZ2VyKFxuICAgICAgICAgICAgbmFtZSwgZGVmYXVsdExvZ2dlci5nZXRMZXZlbCgpLCBkZWZhdWx0TG9nZ2VyLm1ldGhvZEZhY3RvcnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2dnZXI7XG4gICAgfTtcblxuICAgIC8vIEdyYWIgdGhlIGN1cnJlbnQgZ2xvYmFsIGxvZyB2YXJpYWJsZSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuICAgIHZhciBfbG9nID0gKHR5cGVvZiB3aW5kb3cgIT09IHVuZGVmaW5lZFR5cGUpID8gd2luZG93LmxvZyA6IHVuZGVmaW5lZDtcbiAgICBkZWZhdWx0TG9nZ2VyLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IHVuZGVmaW5lZFR5cGUgJiZcbiAgICAgICAgICAgICAgIHdpbmRvdy5sb2cgPT09IGRlZmF1bHRMb2dnZXIpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2cgPSBfbG9nO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRMb2dnZXI7XG4gICAgfTtcblxuICAgIGRlZmF1bHRMb2dnZXIuZ2V0TG9nZ2VycyA9IGZ1bmN0aW9uIGdldExvZ2dlcnMoKSB7XG4gICAgICAgIHJldHVybiBfbG9nZ2Vyc0J5TmFtZTtcbiAgICB9O1xuXG4gICAgLy8gRVM2IGRlZmF1bHQgZXhwb3J0LCBmb3IgY29tcGF0aWJpbGl0eVxuICAgIGRlZmF1bHRMb2dnZXJbJ2RlZmF1bHQnXSA9IGRlZmF1bHRMb2dnZXI7XG5cbiAgICByZXR1cm4gZGVmYXVsdExvZ2dlcjtcbn0pKTtcbiIsIi8qIVxuICogdjIuMS40LTEwNC1nYzg2OGIzYVxuICogXG4gKi9cbihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwib2JvZVwiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJvYm9lXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIm9ib2VcIl0gPSBmYWN0b3J5KCk7XG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDcpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJqXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gcGFydGlhbENvbXBsZXRlOyB9KTtcbi8qIHVudXNlZCBoYXJtb255IGV4cG9ydCBjb21wb3NlICovXG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiZFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGNvbXBvc2UyOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJjXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXR0cjsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiaFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGxhenlVbmlvbjsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYlwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFwcGx5OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJrXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gdmFyQXJnczsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGZsaXA7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImdcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBsYXp5SW50ZXJzZWN0aW9uOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJpXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gbm9vcDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFsd2F5czsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiZlwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGZ1bmN0b3I7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fbGlzdHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cblxuLyoqXG4gKiBQYXJ0aWFsbHkgY29tcGxldGUgYSBmdW5jdGlvbi5cbiAqXG4gKiAgdmFyIGFkZDMgPSBwYXJ0aWFsQ29tcGxldGUoIGZ1bmN0aW9uIGFkZChhLGIpe3JldHVybiBhK2J9LCAzICk7XG4gKlxuICogIGFkZDMoNCkgLy8gZ2l2ZXMgN1xuICpcbiAqICBmdW5jdGlvbiB3cmFwKGxlZnQsIHJpZ2h0LCBjZW4pe3JldHVybiBsZWZ0ICsgXCIgXCIgKyBjZW4gKyBcIiBcIiArIHJpZ2h0O31cbiAqXG4gKiAgdmFyIHBpcmF0ZUdyZWV0aW5nID0gcGFydGlhbENvbXBsZXRlKCB3cmFwICwgXCJJJ21cIiwgXCIsIGEgbWlnaHR5IHBpcmF0ZSFcIiApO1xuICpcbiAqICBwaXJhdGVHcmVldGluZyhcIkd1eWJydXNoIFRocmVlcHdvb2RcIik7XG4gKiAgLy8gZ2l2ZXMgXCJJJ20gR3V5YnJ1c2ggVGhyZWVwd29vZCwgYSBtaWdodHkgcGlyYXRlIVwiXG4gKi9cbnZhciBwYXJ0aWFsQ29tcGxldGUgPSB2YXJBcmdzKGZ1bmN0aW9uIChmbiwgYXJncykge1xuICAvLyB0aGlzIGlzbid0IHRoZSBzaG9ydGVzdCB3YXkgdG8gd3JpdGUgdGhpcyBidXQgaXQgZG9lc1xuICAvLyBhdm9pZCBjcmVhdGluZyBhIG5ldyBhcnJheSBlYWNoIHRpbWUgdG8gcGFzcyB0byBmbi5hcHBseSxcbiAgLy8gb3RoZXJ3aXNlIGNvdWxkIGp1c3QgY2FsbCBib3VuZEFyZ3MuY29uY2F0KGNhbGxBcmdzKVxuXG4gIHZhciBudW1Cb3VuZEFyZ3MgPSBhcmdzLmxlbmd0aFxuXG4gIHJldHVybiB2YXJBcmdzKGZ1bmN0aW9uIChjYWxsQXJncykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbEFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbbnVtQm91bmRBcmdzICsgaV0gPSBjYWxsQXJnc1tpXVxuICAgIH1cblxuICAgIGFyZ3MubGVuZ3RoID0gbnVtQm91bmRBcmdzICsgY2FsbEFyZ3MubGVuZ3RoXG5cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJncylcbiAgfSlcbn0pXG5cbi8qKlxuKiBDb21wb3NlIHplcm8gb3IgbW9yZSBmdW5jdGlvbnM6XG4qXG4qICAgIGNvbXBvc2UoZjEsIGYyLCBmMykoeCkgPSBmMShmMihmMyh4KSkpKVxuKlxuKiBUaGUgbGFzdCAoaW5uZXItbW9zdCkgZnVuY3Rpb24gbWF5IHRha2UgbW9yZSB0aGFuIG9uZSBwYXJhbWV0ZXI6XG4qXG4qICAgIGNvbXBvc2UoZjEsIGYyLCBmMykoeCx5KSA9IGYxKGYyKGYzKHgseSkpKSlcbiovXG52YXIgY29tcG9zZSA9IHZhckFyZ3MoZnVuY3Rpb24gKGZucykge1xuICB2YXIgZm5zTGlzdCA9IE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2xpc3RzX19bXCJjXCIgLyogYXJyYXlBc0xpc3QgKi9dKShmbnMpXG5cbiAgZnVuY3Rpb24gbmV4dCAocGFyYW1zLCBjdXJGbikge1xuICAgIHJldHVybiBbYXBwbHkocGFyYW1zLCBjdXJGbildXG4gIH1cblxuICByZXR1cm4gdmFyQXJncyhmdW5jdGlvbiAoc3RhcnRQYXJhbXMpIHtcbiAgICByZXR1cm4gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fbGlzdHNfX1tcImZcIiAvKiBmb2xkUiAqL10pKG5leHQsIHN0YXJ0UGFyYW1zLCBmbnNMaXN0KVswXVxuICB9KVxufSlcblxuLyoqXG4qIEEgbW9yZSBvcHRpbWlzZWQgdmVyc2lvbiBvZiBjb21wb3NlIHRoYXQgdGFrZXMgZXhhY3RseSB0d28gZnVuY3Rpb25zXG4qIEBwYXJhbSBmMVxuKiBAcGFyYW0gZjJcbiovXG5mdW5jdGlvbiBjb21wb3NlMiAoZjEsIGYyKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGYxLmNhbGwodGhpcywgZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKSlcbiAgfVxufVxuXG4vKipcbiogR2VuZXJpYyBmb3JtIGZvciBhIGZ1bmN0aW9uIHRvIGdldCBhIHByb3BlcnR5IGZyb20gYW4gb2JqZWN0XG4qXG4qICAgIHZhciBvID0ge1xuKiAgICAgICBmb286J2JhcidcbiogICAgfVxuKlxuKiAgICB2YXIgZ2V0Rm9vID0gYXR0cignZm9vJylcbipcbiogICAgZmV0Rm9vKG8pIC8vIHJldHVybnMgJ2JhcidcbipcbiogQHBhcmFtIHtTdHJpbmd9IGtleSB0aGUgcHJvcGVydHkgbmFtZVxuKi9cbmZ1bmN0aW9uIGF0dHIgKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG9ba2V5XSB9XG59XG5cbi8qKlxuKiBDYWxsIGEgbGlzdCBvZiBmdW5jdGlvbnMgd2l0aCB0aGUgc2FtZSBhcmdzIHVudGlsIG9uZSByZXR1cm5zIGFcbiogdHJ1dGh5IHJlc3VsdC4gU2ltaWxhciB0byB0aGUgfHwgb3BlcmF0b3IuXG4qXG4qIFNvOlxuKiAgICAgIGxhenlVbmlvbihbZjEsZjIsZjMgLi4uIGZuXSkoIHAxLCBwMiAuLi4gcG4gKVxuKlxuKiBJcyBlcXVpdmFsZW50IHRvOlxuKiAgICAgIGFwcGx5KFtwMSwgcDIgLi4uIHBuXSwgZjEpIHx8XG4qICAgICAgYXBwbHkoW3AxLCBwMiAuLi4gcG5dLCBmMikgfHxcbiogICAgICBhcHBseShbcDEsIHAyIC4uLiBwbl0sIGYzKSAuLi4gYXBwbHkoZm4sIFtwMSwgcDIgLi4uIHBuXSlcbipcbiogQHJldHVybnMgdGhlIGZpcnN0IHJldHVybiB2YWx1ZSB0aGF0IGlzIGdpdmVuIHRoYXQgaXMgdHJ1dGh5LlxuKi9cbnZhciBsYXp5VW5pb24gPSB2YXJBcmdzKGZ1bmN0aW9uIChmbnMpIHtcbiAgcmV0dXJuIHZhckFyZ3MoZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIHZhciBtYXliZVZhbHVlXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGF0dHIoJ2xlbmd0aCcpKGZucyk7IGkrKykge1xuICAgICAgbWF5YmVWYWx1ZSA9IGFwcGx5KHBhcmFtcywgZm5zW2ldKVxuXG4gICAgICBpZiAobWF5YmVWYWx1ZSkge1xuICAgICAgICByZXR1cm4gbWF5YmVWYWx1ZVxuICAgICAgfVxuICAgIH1cbiAgfSlcbn0pXG5cbi8qKlxuKiBUaGlzIGZpbGUgZGVjbGFyZXMgdmFyaW91cyBwaWVjZXMgb2YgZnVuY3Rpb25hbCBwcm9ncmFtbWluZy5cbipcbiogVGhpcyBpc24ndCBhIGdlbmVyYWwgcHVycG9zZSBmdW5jdGlvbmFsIGxpYnJhcnksIHRvIGtlZXAgdGhpbmdzIHNtYWxsIGl0XG4qIGhhcyBqdXN0IHRoZSBwYXJ0cyB1c2VmdWwgZm9yIE9ib2UuanMuXG4qL1xuXG4vKipcbiogQ2FsbCBhIHNpbmdsZSBmdW5jdGlvbiB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHMgYXJyYXkuXG4qIEJhc2ljYWxseSwgYSBmdW5jdGlvbmFsLXN0eWxlIHZlcnNpb24gb2YgdGhlIE9PLXN0eWxlIEZ1bmN0aW9uI2FwcGx5IGZvclxuKiB3aGVuIHdlIGRvbid0IGNhcmUgYWJvdXQgdGhlIGNvbnRleHQgKCd0aGlzJykgb2YgdGhlIGNhbGwuXG4qXG4qIFRoZSBvcmRlciBvZiBhcmd1bWVudHMgYWxsb3dzIHBhcnRpYWwgY29tcGxldGlvbiBvZiB0aGUgYXJndW1lbnRzIGFycmF5XG4qL1xuZnVuY3Rpb24gYXBwbHkgKGFyZ3MsIGZuKSB7XG4gIHJldHVybiBmbi5hcHBseSh1bmRlZmluZWQsIGFyZ3MpXG59XG5cbi8qKlxuKiBEZWZpbmUgdmFyaWFibGUgYXJndW1lbnQgZnVuY3Rpb25zIGJ1dCBjdXQgb3V0IGFsbCB0aGF0IHRlZGlvdXMgbWVzc2luZyBhYm91dFxuKiB3aXRoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBEZWxpdmVycyB0aGUgdmFyaWFibGUtbGVuZ3RoIHBhcnQgb2YgdGhlIGFyZ3VtZW50c1xuKiBsaXN0IGFzIGFuIGFycmF5LlxuKlxuKiBFZzpcbipcbiogdmFyIG15RnVuY3Rpb24gPSB2YXJBcmdzKFxuKiAgICBmdW5jdGlvbiggZml4ZWRBcmd1bWVudCwgb3RoZXJGaXhlZEFyZ3VtZW50LCB2YXJpYWJsZU51bWJlck9mQXJndW1lbnRzICl7XG4qICAgICAgIGNvbnNvbGUubG9nKCB2YXJpYWJsZU51bWJlck9mQXJndW1lbnRzICk7XG4qICAgIH1cbiogKVxuKlxuKiBteUZ1bmN0aW9uKCdhJywgJ2InLCAxLCAyLCAzKTsgLy8gbG9ncyBbMSwyLDNdXG4qXG4qIHZhciBteU90aGVyRnVuY3Rpb24gPSB2YXJBcmdzKGZ1bmN0aW9uKCB2YXJpYWJsZU51bWJlck9mQXJndW1lbnRzICl7XG4qICAgIGNvbnNvbGUubG9nKCB2YXJpYWJsZU51bWJlck9mQXJndW1lbnRzICk7XG4qIH0pXG4qXG4qIG15RnVuY3Rpb24oMSwgMiwgMyk7IC8vIGxvZ3MgWzEsMiwzXVxuKlxuKi9cbmZ1bmN0aW9uIHZhckFyZ3MgKGZuKSB7XG4gIHZhciBudW1iZXJPZkZpeGVkQXJndW1lbnRzID0gZm4ubGVuZ3RoIC0gMVxuICB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2VcblxuICBpZiAobnVtYmVyT2ZGaXhlZEFyZ3VtZW50cyA9PT0gMCkge1xuICAgIC8vIGFuIG9wdGltaXNlZCBjYXNlIGZvciB3aGVuIHRoZXJlIGFyZSBubyBmaXhlZCBhcmdzOlxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIHNsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICB9XG4gIH0gZWxzZSBpZiAobnVtYmVyT2ZGaXhlZEFyZ3VtZW50cyA9PT0gMSkge1xuICAgIC8vIGFuIG9wdGltaXNlZCBjYXNlIGZvciB3aGVuIHRoZXJlIGFyZSBpcyBvbmUgZml4ZWQgYXJnczpcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBhcmd1bWVudHNbMF0sIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSlcbiAgICB9XG4gIH1cblxuICAvLyBnZW5lcmFsIGNhc2VcblxuICAvLyB3ZSBrbm93IGhvdyBtYW55IGFyZ3VtZW50cyBmbiB3aWxsIGFsd2F5cyB0YWtlLiBDcmVhdGUgYVxuICAvLyBmaXhlZC1zaXplIGFycmF5IHRvIGhvbGQgdGhhdCBtYW55LCB0byBiZSByZS11c2VkIG9uXG4gIC8vIGV2ZXJ5IGNhbGwgdG8gdGhlIHJldHVybmVkIGZ1bmN0aW9uXG4gIHZhciBhcmdzSG9sZGVyID0gQXJyYXkoZm4ubGVuZ3RoKVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1iZXJPZkZpeGVkQXJndW1lbnRzOyBpKyspIHtcbiAgICAgIGFyZ3NIb2xkZXJbaV0gPSBhcmd1bWVudHNbaV1cbiAgICB9XG5cbiAgICBhcmdzSG9sZGVyW251bWJlck9mRml4ZWRBcmd1bWVudHNdID1cbiAgICAgIHNsaWNlLmNhbGwoYXJndW1lbnRzLCBudW1iZXJPZkZpeGVkQXJndW1lbnRzKVxuXG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3NIb2xkZXIpXG4gIH1cbn1cblxuLyoqXG4qIFN3YXAgdGhlIG9yZGVyIG9mIHBhcmFtZXRlcnMgdG8gYSBiaW5hcnkgZnVuY3Rpb25cbipcbiogQSBiaXQgbGlrZSB0aGlzIGZsaXA6IGh0dHA6Ly96dm9uLm9yZy9vdGhlci9oYXNrZWxsL091dHB1dHByZWx1ZGUvZmxpcF9mLmh0bWxcbiovXG5mdW5jdGlvbiBmbGlwIChmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZm4oYiwgYSlcbiAgfVxufVxuXG4vKipcbiogQ3JlYXRlIGEgZnVuY3Rpb24gd2hpY2ggaXMgdGhlIGludGVyc2VjdGlvbiBvZiB0d28gb3RoZXIgZnVuY3Rpb25zLlxuKlxuKiBMaWtlIHRoZSAmJiBvcGVyYXRvciwgaWYgdGhlIGZpcnN0IGlzIHRydXRoeSwgdGhlIHNlY29uZCBpcyBuZXZlciBjYWxsZWQsXG4qIG90aGVyd2lzZSB0aGUgcmV0dXJuIHZhbHVlIGZyb20gdGhlIHNlY29uZCBpcyByZXR1cm5lZC5cbiovXG5mdW5jdGlvbiBsYXp5SW50ZXJzZWN0aW9uIChmbjEsIGZuMikge1xuICByZXR1cm4gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgcmV0dXJuIGZuMShwYXJhbSkgJiYgZm4yKHBhcmFtKVxuICB9XG59XG5cbi8qKlxuKiBBIGZ1bmN0aW9uIHdoaWNoIGRvZXMgbm90aGluZ1xuKi9cbmZ1bmN0aW9uIG5vb3AgKCkgeyB9XG5cbi8qKlxuKiBBIGZ1bmN0aW9uIHdoaWNoIGlzIGFsd2F5cyBoYXBweVxuKi9cbmZ1bmN0aW9uIGFsd2F5cyAoKSB7IHJldHVybiB0cnVlIH1cblxuLyoqXG4qIENyZWF0ZSBhIGZ1bmN0aW9uIHdoaWNoIGFsd2F5cyByZXR1cm5zIHRoZSBzYW1lXG4qIHZhbHVlXG4qXG4qIHZhciByZXR1cm4zID0gZnVuY3RvcigzKTtcbipcbiogcmV0dXJuMygpIC8vIGdpdmVzIDNcbiogcmV0dXJuMygpIC8vIHN0aWxsIGdpdmVzIDNcbiogcmV0dXJuMygpIC8vIHdpbGwgYWx3YXlzIGdpdmUgM1xuKi9cbmZ1bmN0aW9uIGZ1bmN0b3IgKHZhbCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB2YWxcbiAgfVxufVxuXG5cblxuXG4vKioqLyB9KSxcbi8qIDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiZFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGNvbnM7IH0pO1xuLyogdW51c2VkIGhhcm1vbnkgZXhwb3J0IGVtcHR5TGlzdCAqL1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImdcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBoZWFkOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJsXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gdGFpbDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiY1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFycmF5QXNMaXN0OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJoXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gbGlzdDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiaVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGxpc3RBc0FycmF5OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJqXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gbWFwOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJmXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gZm9sZFI7IH0pO1xuLyogdW51c2VkIGhhcm1vbnkgZXhwb3J0IGZvbGRSMSAqL1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIm1cIiwgZnVuY3Rpb24oKSB7IHJldHVybiB3aXRob3V0OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gYWxsOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJiXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXBwbHlFYWNoOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJrXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gcmV2ZXJzZUxpc3Q7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImVcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBmaXJzdDsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mdW5jdGlvbmFsX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cbi8qKlxuICogTGlrZSBjb25zIGluIExpc3BcbiAqL1xuZnVuY3Rpb24gY29ucyAoeCwgeHMpIHtcbiAgLyogSW50ZXJuYWxseSBsaXN0cyBhcmUgbGlua2VkIDItZWxlbWVudCBKYXZhc2NyaXB0IGFycmF5cy5cblxuICAgICAgSWRlYWxseSB0aGUgcmV0dXJuIGhlcmUgd291bGQgYmUgT2JqZWN0LmZyZWV6ZShbeCx4c10pXG4gICAgICBzbyB0aGF0IGJ1Z3MgcmVsYXRlZCB0byBtdXRhdGlvbiBhcmUgZm91bmQgZmFzdC5cbiAgICAgIEhvd2V2ZXIsIGNvbnMgaXMgcmlnaHQgb24gdGhlIGNyaXRpY2FsIHBhdGggZm9yXG4gICAgICBwZXJmb3JtYW5jZSBhbmQgdGhpcyBzbG93cyBvYm9lLW1hcmsgZG93biBieVxuICAgICAgfjI1JS4gVW5kZXIgdGhlb3JldGljYWwgZnV0dXJlIEpTIGVuZ2luZXMgdGhhdCBmcmVlemUgbW9yZVxuICAgICAgZWZmaWNpZW50bHkgKHBvc3NpYmx5IGV2ZW4gdXNlIGltbXV0YWJpbGl0eSB0b1xuICAgICAgcnVuIGZhc3RlcikgdGhpcyBzaG91bGQgYmUgY29uc2lkZXJlZCBmb3JcbiAgICAgIHJlc3RvcmF0aW9uLlxuICAgKi9cblxuICByZXR1cm4gW3gsIHhzXVxufVxuXG4vKipcbiAqIFRoZSBlbXB0eSBsaXN0XG4gKi9cbnZhciBlbXB0eUxpc3QgPSBudWxsXG5cbi8qKlxuICogR2V0IHRoZSBoZWFkIG9mIGEgbGlzdC5cbiAqXG4gKiBJZSwgaGVhZChjb25zKGEsYikpID0gYVxuICovXG52YXIgaGVhZCA9IE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2Z1bmN0aW9uYWxfX1tcImNcIiAvKiBhdHRyICovXSkoMClcblxuLyoqXG4gKiBHZXQgdGhlIHRhaWwgb2YgYSBsaXN0LlxuICpcbiAqIEllLCB0YWlsKGNvbnMoYSxiKSkgPSBiXG4gKi9cbnZhciB0YWlsID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZnVuY3Rpb25hbF9fW1wiY1wiIC8qIGF0dHIgKi9dKSgxKVxuXG4vKipcbiAqIENvbnZlcnRzIGFuIGFycmF5IHRvIGEgbGlzdFxuICpcbiAqICAgIGFzTGlzdChbYSxiLGNdKVxuICpcbiAqIGlzIGVxdWl2YWxlbnQgdG86XG4gKlxuICogICAgY29ucyhhLCBjb25zKGIsIGNvbnMoYywgZW1wdHlMaXN0KSkpXG4gKiovXG5mdW5jdGlvbiBhcnJheUFzTGlzdCAoaW5wdXRBcnJheSkge1xuICByZXR1cm4gcmV2ZXJzZUxpc3QoXG4gICAgaW5wdXRBcnJheS5yZWR1Y2UoXG4gICAgICBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mdW5jdGlvbmFsX19bXCJlXCIgLyogZmxpcCAqL10pKGNvbnMpLFxuICAgICAgZW1wdHlMaXN0XG4gICAgKVxuICApXG59XG5cbi8qKlxuICogQSB2YXJhcmdzIHZlcnNpb24gb2YgYXJyYXlBc0xpc3QuIFdvcmtzIGEgYml0IGxpa2UgbGlzdFxuICogaW4gTElTUC5cbiAqXG4gKiAgICBsaXN0KGEsYixjKVxuICpcbiAqIGlzIGVxdWl2YWxlbnQgdG86XG4gKlxuICogICAgY29ucyhhLCBjb25zKGIsIGNvbnMoYywgZW1wdHlMaXN0KSkpXG4gKi9cbnZhciBsaXN0ID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZnVuY3Rpb25hbF9fW1wia1wiIC8qIHZhckFyZ3MgKi9dKShhcnJheUFzTGlzdClcblxuLyoqXG4gKiBDb252ZXJ0IGEgbGlzdCBiYWNrIHRvIGEganMgbmF0aXZlIGFycmF5XG4gKi9cbmZ1bmN0aW9uIGxpc3RBc0FycmF5IChsaXN0KSB7XG4gIHJldHVybiBmb2xkUihmdW5jdGlvbiAoYXJyYXlTb0ZhciwgbGlzdEl0ZW0pIHtcbiAgICBhcnJheVNvRmFyLnVuc2hpZnQobGlzdEl0ZW0pXG4gICAgcmV0dXJuIGFycmF5U29GYXJcbiAgfSwgW10sIGxpc3QpXG59XG5cbi8qKlxuICogTWFwIGEgZnVuY3Rpb24gb3ZlciBhIGxpc3RcbiAqL1xuZnVuY3Rpb24gbWFwIChmbiwgbGlzdCkge1xuICByZXR1cm4gbGlzdFxuICAgID8gY29ucyhmbihoZWFkKGxpc3QpKSwgbWFwKGZuLCB0YWlsKGxpc3QpKSlcbiAgICA6IGVtcHR5TGlzdFxufVxuXG4vKipcbiAqIGZvbGRSIGltcGxlbWVudGF0aW9uLiBSZWR1Y2UgYSBsaXN0IGRvd24gdG8gYSBzaW5nbGUgdmFsdWUuXG4gKlxuICogQHByYW0ge0Z1bmN0aW9ufSBmbiAgICAgKHJpZ2h0RXZhbCwgY3VyVmFsKSAtPiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gZm9sZFIgKGZuLCBzdGFydFZhbHVlLCBsaXN0KSB7XG4gIHJldHVybiBsaXN0XG4gICAgPyBmbihmb2xkUihmbiwgc3RhcnRWYWx1ZSwgdGFpbChsaXN0KSksIGhlYWQobGlzdCkpXG4gICAgOiBzdGFydFZhbHVlXG59XG5cbi8qKlxuICogZm9sZFIgaW1wbGVtZW50YXRpb24uIFJlZHVjZSBhIGxpc3QgZG93biB0byBhIHNpbmdsZSB2YWx1ZS5cbiAqXG4gKiBAcHJhbSB7RnVuY3Rpb259IGZuICAgICAocmlnaHRFdmFsLCBjdXJWYWwpIC0+IHJlc3VsdFxuICovXG5mdW5jdGlvbiBmb2xkUjEgKGZuLCBsaXN0KSB7XG4gIHJldHVybiB0YWlsKGxpc3QpXG4gICAgPyBmbihmb2xkUjEoZm4sIHRhaWwobGlzdCkpLCBoZWFkKGxpc3QpKVxuICAgIDogaGVhZChsaXN0KVxufVxuXG4vKipcbiAqIFJldHVybiBhIGxpc3QgbGlrZSB0aGUgb25lIGdpdmVuIGJ1dCB3aXRoIHRoZSBmaXJzdCBpbnN0YW5jZSBlcXVhbFxuICogdG8gaXRlbSByZW1vdmVkXG4gKi9cbmZ1bmN0aW9uIHdpdGhvdXQgKGxpc3QsIHRlc3QsIHJlbW92ZWRGbikge1xuICByZXR1cm4gd2l0aG91dElubmVyKGxpc3QsIHJlbW92ZWRGbiB8fCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2Z1bmN0aW9uYWxfX1tcImlcIiAvKiBub29wICovXSlcblxuICBmdW5jdGlvbiB3aXRob3V0SW5uZXIgKHN1Ykxpc3QsIHJlbW92ZWRGbikge1xuICAgIHJldHVybiBzdWJMaXN0XG4gICAgICA/ICh0ZXN0KGhlYWQoc3ViTGlzdCkpXG4gICAgICAgID8gKHJlbW92ZWRGbihoZWFkKHN1Ykxpc3QpKSwgdGFpbChzdWJMaXN0KSlcbiAgICAgICAgOiBjb25zKGhlYWQoc3ViTGlzdCksIHdpdGhvdXRJbm5lcih0YWlsKHN1Ykxpc3QpLCByZW1vdmVkRm4pKVxuICAgICAgKVxuICAgICAgOiBlbXB0eUxpc3RcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gZnVuY3Rpb24gaG9sZHMgZm9yIGV2ZXJ5IGl0ZW0gaW5cbiAqIHRoZSBsaXN0LCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZnVuY3Rpb24gYWxsIChmbiwgbGlzdCkge1xuICByZXR1cm4gIWxpc3QgfHxcbiAgICAoZm4oaGVhZChsaXN0KSkgJiYgYWxsKGZuLCB0YWlsKGxpc3QpKSlcbn1cblxuLyoqXG4gKiBDYWxsIGV2ZXJ5IGZ1bmN0aW9uIGluIGEgbGlzdCBvZiBmdW5jdGlvbnMgd2l0aCB0aGUgc2FtZSBhcmd1bWVudHNcbiAqXG4gKiBUaGlzIGRvZXNuJ3QgbWFrZSBhbnkgc2Vuc2UgaWYgd2UncmUgZG9pbmcgcHVyZSBmdW5jdGlvbmFsIGJlY2F1c2VcbiAqIGl0IGRvZXNuJ3QgcmV0dXJuIGFueXRoaW5nLiBIZW5jZSwgdGhpcyBpcyBvbmx5IHJlYWxseSB1c2VmdWwgaWYgdGhlXG4gKiBmdW5jdGlvbnMgYmVpbmcgY2FsbGVkIGhhdmUgc2lkZS1lZmZlY3RzLlxuICovXG5mdW5jdGlvbiBhcHBseUVhY2ggKGZuTGlzdCwgYXJncykge1xuICBpZiAoZm5MaXN0KSB7XG4gICAgaGVhZChmbkxpc3QpLmFwcGx5KG51bGwsIGFyZ3MpXG5cbiAgICBhcHBseUVhY2godGFpbChmbkxpc3QpLCBhcmdzKVxuICB9XG59XG5cbi8qKlxuICogUmV2ZXJzZSB0aGUgb3JkZXIgb2YgYSBsaXN0XG4gKi9cbmZ1bmN0aW9uIHJldmVyc2VMaXN0IChsaXN0KSB7XG4gIC8vIGpzIHJlLWltcGxlbWVudGF0aW9uIG9mIDNyZCBzb2x1dGlvbiBmcm9tOlxuICAvLyAgICBodHRwOi8vd3d3Lmhhc2tlbGwub3JnL2hhc2tlbGx3aWtpLzk5X3F1ZXN0aW9ucy9Tb2x1dGlvbnMvNVxuICBmdW5jdGlvbiByZXZlcnNlSW5uZXIgKGxpc3QsIHJldmVyc2VkQWxyZWFkeSkge1xuICAgIGlmICghbGlzdCkge1xuICAgICAgcmV0dXJuIHJldmVyc2VkQWxyZWFkeVxuICAgIH1cblxuICAgIHJldHVybiByZXZlcnNlSW5uZXIodGFpbChsaXN0KSwgY29ucyhoZWFkKGxpc3QpLCByZXZlcnNlZEFscmVhZHkpKVxuICB9XG5cbiAgcmV0dXJuIHJldmVyc2VJbm5lcihsaXN0LCBlbXB0eUxpc3QpXG59XG5cbmZ1bmN0aW9uIGZpcnN0ICh0ZXN0LCBsaXN0KSB7XG4gIHJldHVybiBsaXN0ICYmXG4gICAgKHRlc3QoaGVhZChsaXN0KSlcbiAgICAgID8gaGVhZChsaXN0KVxuICAgICAgOiBmaXJzdCh0ZXN0LCB0YWlsKGxpc3QpKSlcbn1cblxuXG5cblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImNcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBpc09mVHlwZTsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGxlbjsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiZFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGlzU3RyaW5nOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gZGVmaW5lZDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYlwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGhhc0FsbFByb3BlcnRpZXM7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fbGlzdHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mdW5jdGlvbmFsX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLyoqXG4gKiBUaGlzIGZpbGUgZGVmaW5lcyBzb21lIGxvb3NlbHkgYXNzb2NpYXRlZCBzeW50YWN0aWMgc3VnYXIgZm9yXG4gKiBKYXZhc2NyaXB0IHByb2dyYW1taW5nXG4gKi9cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIGNhbmRpZGF0ZSBpcyBvZiB0eXBlIFRcbiAqL1xuZnVuY3Rpb24gaXNPZlR5cGUgKFQsIG1heWJlU29tZXRoaW5nKSB7XG4gIHJldHVybiBtYXliZVNvbWV0aGluZyAmJiBtYXliZVNvbWV0aGluZy5jb25zdHJ1Y3RvciA9PT0gVFxufVxuXG52YXIgbGVuID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZnVuY3Rpb25hbF9fW1wiY1wiIC8qIGF0dHIgKi9dKSgnbGVuZ3RoJylcbnZhciBpc1N0cmluZyA9IE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2Z1bmN0aW9uYWxfX1tcImpcIiAvKiBwYXJ0aWFsQ29tcGxldGUgKi9dKShpc09mVHlwZSwgU3RyaW5nKVxuXG4vKipcbiAqIEkgZG9uJ3QgbGlrZSBzYXlpbmcgdGhpczpcbiAqXG4gKiAgICBmb28gIT09PSB1bmRlZmluZWRcbiAqXG4gKiBiZWNhdXNlIG9mIHRoZSBkb3VibGUtbmVnYXRpdmUuIEkgZmluZCB0aGlzOlxuICpcbiAqICAgIGRlZmluZWQoZm9vKVxuICpcbiAqIGVhc2llciB0byByZWFkLlxuICovXG5mdW5jdGlvbiBkZWZpbmVkICh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZFxufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBvYmplY3QgbyBoYXMgYSBrZXkgbmFtZWQgbGlrZSBldmVyeSBwcm9wZXJ0eSBpblxuICogdGhlIHByb3BlcnRpZXMgYXJyYXkuIFdpbGwgZ2l2ZSBmYWxzZSBpZiBhbnkgYXJlIG1pc3NpbmcsIG9yIGlmIG9cbiAqIGlzIG5vdCBhbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGhhc0FsbFByb3BlcnRpZXMgKGZpZWxkTGlzdCwgbykge1xuICByZXR1cm4gKG8gaW5zdGFuY2VvZiBPYmplY3QpICYmXG4gICAgT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fbGlzdHNfX1tcImFcIiAvKiBhbGwgKi9dKShmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiAoZmllbGQgaW4gbylcbiAgICB9LCBmaWVsZExpc3QpXG59XG5cblxuXG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJmXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gTk9ERV9PUEVORUQ7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBOT0RFX0NMT1NFRDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiZ1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE5PREVfU1dBUDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE5PREVfRFJPUDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYlwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEZBSUxfRVZFTlQ7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImhcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBST09UX05PREVfRk9VTkQ7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImlcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBST09UX1BBVEhfRk9VTkQ7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImNcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBIVFRQX1NUQVJUOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJtXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gU1RSRUFNX0RBVEE7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIm5cIiwgZnVuY3Rpb24oKSB7IHJldHVybiBTVFJFQU1fRU5EOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gQUJPUlRJTkc7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImpcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBTQVhfS0VZOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJsXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gU0FYX1ZBTFVFX09QRU47IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImtcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBTQVhfVkFMVUVfQ0xPU0U7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIm9cIiwgZnVuY3Rpb24oKSB7IHJldHVybiBlcnJvclJlcG9ydDsgfSk7XG4vKipcbiAqIFRoaXMgZmlsZSBkZWNsYXJlcyBzb21lIGNvbnN0YW50cyB0byB1c2UgYXMgbmFtZXMgZm9yIGV2ZW50IHR5cGVzLlxuICovXG5cbi8vIHRoZSBldmVudHMgd2hpY2ggYXJlIG5ldmVyIGV4cG9ydGVkIGFyZSBrZXB0IGFzXG4vLyB0aGUgc21hbGxlc3QgcG9zc2libGUgcmVwcmVzZW50YXRpb24sIGluIG51bWJlcnM6XG52YXIgX1MgPSAxXG5cbi8vIGZpcmVkIHdoZW5ldmVyIGEgbmV3IG5vZGUgc3RhcnRzIGluIHRoZSBKU09OIHN0cmVhbTpcbnZhciBOT0RFX09QRU5FRCA9IF9TKytcblxuLy8gZmlyZWQgd2hlbmV2ZXIgYSBub2RlIGNsb3NlcyBpbiB0aGUgSlNPTiBzdHJlYW06XG52YXIgTk9ERV9DTE9TRUQgPSBfUysrXG5cbi8vIGNhbGxlZCBpZiBhIC5ub2RlIGNhbGxiYWNrIHJldHVybnMgYSB2YWx1ZSAtXG52YXIgTk9ERV9TV0FQID0gX1MrK1xudmFyIE5PREVfRFJPUCA9IF9TKytcblxudmFyIEZBSUxfRVZFTlQgPSAnZmFpbCdcblxudmFyIFJPT1RfTk9ERV9GT1VORCA9IF9TKytcbnZhciBST09UX1BBVEhfRk9VTkQgPSBfUysrXG5cbnZhciBIVFRQX1NUQVJUID0gJ3N0YXJ0J1xudmFyIFNUUkVBTV9EQVRBID0gJ2RhdGEnXG52YXIgU1RSRUFNX0VORCA9ICdlbmQnXG52YXIgQUJPUlRJTkcgPSBfUysrXG5cbi8vIFNBWCBldmVudHMgYnV0Y2hlcmVkIGZyb20gQ2xhcmluZXRcbnZhciBTQVhfS0VZID0gX1MrK1xudmFyIFNBWF9WQUxVRV9PUEVOID0gX1MrK1xudmFyIFNBWF9WQUxVRV9DTE9TRSA9IF9TKytcblxuZnVuY3Rpb24gZXJyb3JSZXBvcnQgKHN0YXR1c0NvZGUsIGJvZHksIGVycm9yKSB7XG4gIHRyeSB7XG4gICAgdmFyIGpzb25Cb2R5ID0gSlNPTi5wYXJzZShib2R5KVxuICB9IGNhdGNoIChlKSB7IH1cblxuICByZXR1cm4ge1xuICAgIHN0YXR1c0NvZGU6IHN0YXR1c0NvZGUsXG4gICAgYm9keTogYm9keSxcbiAgICBqc29uQm9keToganNvbkJvZHksXG4gICAgdGhyb3duOiBlcnJvclxuICB9XG59XG5cblxuXG5cbi8qKiovIH0pLFxuLyogNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJiXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gbmFtZWROb2RlOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4ga2V5T2Y7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImNcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBub2RlT2Y7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZnVuY3Rpb25hbF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG4vKipcbiAqIEdldCBhIG5ldyBrZXktPm5vZGUgbWFwcGluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0ga2V5XG4gKiBAcGFyYW0ge09iamVjdHxBcnJheXxTdHJpbmd8TnVtYmVyfG51bGx9IG5vZGUgYSB2YWx1ZSBmb3VuZCBpbiB0aGUganNvblxuICovXG5mdW5jdGlvbiBuYW1lZE5vZGUgKGtleSwgbm9kZSkge1xuICByZXR1cm4ge2tleToga2V5LCBub2RlOiBub2RlfVxufVxuXG4vKiogZ2V0IHRoZSBrZXkgb2YgYSBuYW1lZE5vZGUgKi9cbnZhciBrZXlPZiA9IE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2Z1bmN0aW9uYWxfX1tcImNcIiAvKiBhdHRyICovXSkoJ2tleScpXG5cbi8qKiBnZXQgdGhlIG5vZGUgZnJvbSBhIG5hbWVkTm9kZSAqL1xudmFyIG5vZGVPZiA9IE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2Z1bmN0aW9uYWxfX1tcImNcIiAvKiBhdHRyICovXSkoJ25vZGUnKVxuXG5cblxuXG4vKioqLyB9KSxcbi8qIDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIG9ib2U7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fbGlzdHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mdW5jdGlvbmFsX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fdXRpbF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2RlZmF1bHRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fd2lyZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblxuXG5cblxuXG5cbi8vIGV4cG9ydCBwdWJsaWMgQVBJXG5mdW5jdGlvbiBvYm9lIChhcmcxKSB7XG4gIC8vIFdlIHVzZSBkdWNrLXR5cGluZyB0byBkZXRlY3QgaWYgdGhlIHBhcmFtZXRlciBnaXZlbiBpcyBhIHN0cmVhbSwgd2l0aCB0aGVcbiAgLy8gYmVsb3cgbGlzdCBvZiBwYXJhbWV0ZXJzLlxuICAvLyBVbnBpcGUgYW5kIHVuc2hpZnQgd291bGQgbm9ybWFsbHkgYmUgcHJlc2VudCBvbiBhIHN0cmVhbSBidXQgdGhpcyBicmVha3NcbiAgLy8gY29tcGF0aWJpbGl0eSB3aXRoIFJlcXVlc3Qgc3RyZWFtcy5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qaW1oaWdzb24vb2JvZS5qcy9pc3N1ZXMvNjVcblxuICB2YXIgbm9kZVN0cmVhbU1ldGhvZE5hbWVzID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fbGlzdHNfX1tcImhcIiAvKiBsaXN0ICovXSkoJ3Jlc3VtZScsICdwYXVzZScsICdwaXBlJylcbiAgdmFyIGlzU3RyZWFtID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZnVuY3Rpb25hbF9fW1wialwiIC8qIHBhcnRpYWxDb21wbGV0ZSAqL10pKFxuICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fdXRpbF9fW1wiYlwiIC8qIGhhc0FsbFByb3BlcnRpZXMgKi9dLFxuICAgIG5vZGVTdHJlYW1NZXRob2ROYW1lc1xuICApXG5cbiAgaWYgKGFyZzEpIHtcbiAgICBpZiAoaXNTdHJlYW0oYXJnMSkgfHwgT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fdXRpbF9fW1wiZFwiIC8qIGlzU3RyaW5nICovXSkoYXJnMSkpIHtcbiAgICAgIC8vICBzaW1wbGUgdmVyc2lvbiBmb3IgR0VUcy4gU2lnbmF0dXJlIGlzOlxuICAgICAgLy8gICAgb2JvZSggdXJsIClcbiAgICAgIC8vICBvciwgdW5kZXIgbm9kZTpcbiAgICAgIC8vICAgIG9ib2UoIHJlYWRhYmxlU3RyZWFtIClcbiAgICAgIHJldHVybiBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19kZWZhdWx0c19fW1wiYVwiIC8qIGFwcGx5RGVmYXVsdHMgKi9dKShcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X193aXJlX19bXCJhXCIgLyogd2lyZSAqL10sXG4gICAgICAgIGFyZzEgLy8gdXJsXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG1ldGhvZCBzaWduYXR1cmUgaXM6XG4gICAgICAvLyAgICBvYm9lKHttZXRob2Q6bSwgdXJsOnUsIGJvZHk6YiwgaGVhZGVyczp7Li4ufX0pXG5cbiAgICAgIHJldHVybiBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19kZWZhdWx0c19fW1wiYVwiIC8qIGFwcGx5RGVmYXVsdHMgKi9dKShcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X193aXJlX19bXCJhXCIgLyogd2lyZSAqL10sXG4gICAgICAgIGFyZzEudXJsLFxuICAgICAgICBhcmcxLm1ldGhvZCxcbiAgICAgICAgYXJnMS5ib2R5LFxuICAgICAgICBhcmcxLmhlYWRlcnMsXG4gICAgICAgIGFyZzEud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICBhcmcxLmNhY2hlZFxuICAgICAgKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyB3aXJlIHVwIGEgbm8tQUpBWCwgbm8tc3RyZWFtIE9ib2UuIFdpbGwgaGF2ZSB0byBoYXZlIGNvbnRlbnRcbiAgICAvLyBmZWQgaW4gZXh0ZXJuYWxseSBhbmQgdXNpbmcgLmVtaXQuXG4gICAgcmV0dXJuIE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX3dpcmVfX1tcImFcIiAvKiB3aXJlICovXSkoKVxuICB9XG59XG5cbi8qIG9ib2UuZHJvcCBpcyBhIHNwZWNpYWwgdmFsdWUuIElmIGEgbm9kZSBjYWxsYmFjayByZXR1cm5zIHRoaXMgdmFsdWUgdGhlXG4gICBwYXJzZWQgbm9kZSBpcyBkZWxldGVkIGZyb20gdGhlIEpTT05cbiAqL1xub2JvZS5kcm9wID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gb2JvZS5kcm9wXG59XG5cblxuXG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJiXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gaW5jcmVtZW50YWxDb250ZW50QnVpbGRlcjsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFJPT1RfUEFUSDsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19ldmVudHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19hc2NlbnRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX191dGlsX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fbGlzdHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cblxuXG5cblxuLyoqXG4gKiBUaGlzIGZpbGUgcHJvdmlkZXMgdmFyaW91cyBsaXN0ZW5lcnMgd2hpY2ggY2FuIGJlIHVzZWQgdG8gYnVpbGQgdXBcbiAqIGEgY2hhbmdpbmcgYXNjZW50IGJhc2VkIG9uIHRoZSBjYWxsYmFja3MgcHJvdmlkZWQgYnkgQ2xhcmluZXQuIEl0IGxpc3RlbnNcbiAqIHRvIHRoZSBsb3ctbGV2ZWwgZXZlbnRzIGZyb20gQ2xhcmluZXQgYW5kIGVtaXRzIGhpZ2hlci1sZXZlbCBvbmVzLlxuICpcbiAqIFRoZSBidWlsZGluZyB1cCBpcyBzdGF0ZWxlc3Mgc28gdG8gdHJhY2sgYSBKU09OIGZpbGVcbiAqIGFzY2VudE1hbmFnZXIuanMgaXMgcmVxdWlyZWQgdG8gc3RvcmUgdGhlIGFzY2VudCBzdGF0ZVxuICogYmV0d2VlbiBjYWxscy5cbiAqL1xuXG4vKipcbiAqIEEgc3BlY2lhbCB2YWx1ZSB0byB1c2UgaW4gdGhlIHBhdGggbGlzdCB0byByZXByZXNlbnQgdGhlIHBhdGggJ3RvJyBhIHJvb3RcbiAqIG9iamVjdCAod2hpY2ggZG9lc24ndCByZWFsbHkgaGF2ZSBhbnkgcGF0aCkuIFRoaXMgcHJldmVudHMgdGhlIG5lZWQgZm9yXG4gKiBzcGVjaWFsLWNhc2luZyBkZXRlY3Rpb24gb2YgdGhlIHJvb3Qgb2JqZWN0IGFuZCBhbGxvd3MgaXQgdG8gYmUgdHJlYXRlZFxuICogbGlrZSBhbnkgb3RoZXIgb2JqZWN0LiBXZSBtaWdodCB0aGluayBvZiB0aGlzIGFzIGJlaW5nIHNpbWlsYXIgdG8gdGhlXG4gKiAndW5uYW1lZCByb290JyBkb21haW4gXCIuXCIsIGVnIGlmIEkgZ28gdG9cbiAqIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnLi93aWtpL0VuL01haW5fcGFnZSB0aGUgZG90IGFmdGVyICdvcmcnIGRlbGltaW5hdGVzXG4gKiB0aGUgdW5uYW1lZCByb290IG9mIHRoZSBETlMuXG4gKlxuICogVGhpcyBpcyBrZXB0IGFzIGFuIG9iamVjdCB0byB0YWtlIGFkdmFudGFnZSB0aGF0IGluIEphdmFzY3JpcHQncyBPTyBvYmplY3RzXG4gKiBhcmUgZ3VhcmFudGVlZCB0byBiZSBkaXN0aW5jdCwgdGhlcmVmb3JlIG5vIG90aGVyIG9iamVjdCBjYW4gcG9zc2libHkgY2xhc2hcbiAqIHdpdGggdGhpcyBvbmUuIFN0cmluZ3MsIG51bWJlcnMgZXRjIHByb3ZpZGUgbm8gc3VjaCBndWFyYW50ZWUuXG4gKiovXG52YXIgUk9PVF9QQVRIID0ge31cblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgc2V0IG9mIGhhbmRsZXJzIGZvciBjbGFyaW5ldCdzIGV2ZW50cywgYm91bmQgdG8gdGhlIGVtaXRcbiAqIGZ1bmN0aW9uIGdpdmVuLlxuICovXG5mdW5jdGlvbiBpbmNyZW1lbnRhbENvbnRlbnRCdWlsZGVyIChvYm9lQnVzKSB7XG4gIHZhciBlbWl0Tm9kZU9wZW5lZCA9IG9ib2VCdXMoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19ldmVudHNfX1tcImZcIiAvKiBOT0RFX09QRU5FRCAqL10pLmVtaXRcbiAgdmFyIGVtaXROb2RlQ2xvc2VkID0gb2JvZUJ1cyhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2V2ZW50c19fW1wiZFwiIC8qIE5PREVfQ0xPU0VEICovXSkuZW1pdFxuICB2YXIgZW1pdFJvb3RPcGVuZWQgPSBvYm9lQnVzKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZXZlbnRzX19bXCJpXCIgLyogUk9PVF9QQVRIX0ZPVU5EICovXSkuZW1pdFxuICB2YXIgZW1pdFJvb3RDbG9zZWQgPSBvYm9lQnVzKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZXZlbnRzX19bXCJoXCIgLyogUk9PVF9OT0RFX0ZPVU5EICovXSkuZW1pdFxuXG4gIGZ1bmN0aW9uIGFycmF5SW5kaWNlc0FyZUtleXMgKHBvc3NpYmx5SW5jb25zaXN0ZW50QXNjZW50LCBuZXdEZWVwZXN0Tm9kZSkge1xuICAgIC8qIGZvciB2YWx1ZXMgaW4gYXJyYXlzIHdlIGFyZW4ndCBwcmUtd2FybmVkIG9mIHRoZSBjb21pbmcgcGF0aHNcbiAgICAgICAgIChDbGFyaW5ldCBnaXZlcyBubyBjYWxsIHRvIG9ua2V5IGxpa2UgaXQgZG9lcyBmb3IgdmFsdWVzIGluIG9iamVjdHMpXG4gICAgICAgICBzbyBpZiB3ZSBhcmUgaW4gYW4gYXJyYXkgd2UgbmVlZCB0byBjcmVhdGUgdGhpcyBwYXRoIG91cnNlbHZlcy4gVGhlXG4gICAgICAgICBrZXkgd2lsbCBiZSBsZW4ocGFyZW50Tm9kZSkgYmVjYXVzZSBhcnJheSBrZXlzIGFyZSBhbHdheXMgc2VxdWVudGlhbFxuICAgICAgICAgbnVtYmVycy4gKi9cblxuICAgIHZhciBwYXJlbnROb2RlID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fYXNjZW50X19bXCJjXCIgLyogbm9kZU9mICovXSkoT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fbGlzdHNfX1tcImdcIiAvKiBoZWFkICovXSkocG9zc2libHlJbmNvbnNpc3RlbnRBc2NlbnQpKVxuXG4gICAgcmV0dXJuIE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX3V0aWxfX1tcImNcIiAvKiBpc09mVHlwZSAqL10pKEFycmF5LCBwYXJlbnROb2RlKVxuICAgICAgPyBrZXlGb3VuZChwb3NzaWJseUluY29uc2lzdGVudEFzY2VudCxcbiAgICAgICAgT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fdXRpbF9fW1wiZVwiIC8qIGxlbiAqL10pKHBhcmVudE5vZGUpLFxuICAgICAgICBuZXdEZWVwZXN0Tm9kZVxuICAgICAgKVxuICAgICAgLy8gbm90aGluZyBuZWVkZWQsIHJldHVybiB1bmNoYW5nZWRcbiAgICAgIDogcG9zc2libHlJbmNvbnNpc3RlbnRBc2NlbnRcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vZGVPcGVuZWQgKGFzY2VudCwgbmV3RGVlcGVzdE5vZGUpIHtcbiAgICBpZiAoIWFzY2VudCkge1xuICAgICAgLy8gd2UgZGlzY292ZXJlZCB0aGUgcm9vdCBub2RlLFxuICAgICAgZW1pdFJvb3RPcGVuZWQobmV3RGVlcGVzdE5vZGUpXG5cbiAgICAgIHJldHVybiBrZXlGb3VuZChhc2NlbnQsIFJPT1RfUEFUSCwgbmV3RGVlcGVzdE5vZGUpXG4gICAgfVxuXG4gICAgLy8gd2UgZGlzY292ZXJlZCBhIG5vbi1yb290IG5vZGVcblxuICAgIHZhciBhcnJheUNvbnNpc3RlbnRBc2NlbnQgPSBhcnJheUluZGljZXNBcmVLZXlzKGFzY2VudCwgbmV3RGVlcGVzdE5vZGUpXG4gICAgdmFyIGFuY2VzdG9yQnJhbmNoZXMgPSBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19saXN0c19fW1wibFwiIC8qIHRhaWwgKi9dKShhcnJheUNvbnNpc3RlbnRBc2NlbnQpXG4gICAgdmFyIHByZXZpb3VzbHlVbm1hcHBlZE5hbWUgPSBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19hc2NlbnRfX1tcImFcIiAvKiBrZXlPZiAqL10pKE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2xpc3RzX19bXCJnXCIgLyogaGVhZCAqL10pKGFycmF5Q29uc2lzdGVudEFzY2VudCkpXG5cbiAgICBhcHBlbmRCdWlsdENvbnRlbnQoXG4gICAgICBhbmNlc3RvckJyYW5jaGVzLFxuICAgICAgcHJldmlvdXNseVVubWFwcGVkTmFtZSxcbiAgICAgIG5ld0RlZXBlc3ROb2RlXG4gICAgKVxuXG4gICAgcmV0dXJuIE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2xpc3RzX19bXCJkXCIgLyogY29ucyAqL10pKFxuICAgICAgT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fYXNjZW50X19bXCJiXCIgLyogbmFtZWROb2RlICovXSkocHJldmlvdXNseVVubWFwcGVkTmFtZSwgbmV3RGVlcGVzdE5vZGUpLFxuICAgICAgYW5jZXN0b3JCcmFuY2hlc1xuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgICogQWRkIGEgbmV3IHZhbHVlIHRvIHRoZSBvYmplY3Qgd2UgYXJlIGJ1aWxkaW5nIHVwIHRvIHJlcHJlc2VudCB0aGVcbiAgICAqIHBhcnNlZCBKU09OXG4gICAgKi9cbiAgZnVuY3Rpb24gYXBwZW5kQnVpbHRDb250ZW50IChhbmNlc3RvckJyYW5jaGVzLCBrZXksIG5vZGUpIHtcbiAgICBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19hc2NlbnRfX1tcImNcIiAvKiBub2RlT2YgKi9dKShPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19saXN0c19fW1wiZ1wiIC8qIGhlYWQgKi9dKShhbmNlc3RvckJyYW5jaGVzKSlba2V5XSA9IG5vZGVcbiAgfVxuXG4gIC8qKlxuICAgICogRm9yIHdoZW4gd2UgZmluZCBhIG5ldyBrZXkgaW4gdGhlIGpzb24uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfE9iamVjdH0gbmV3RGVlcGVzdE5hbWUgdGhlIGtleS4gSWYgd2UgYXJlIGluIGFuXG4gICAgKiAgICBhcnJheSB3aWxsIGJlIGEgbnVtYmVyLCBvdGhlcndpc2UgYSBzdHJpbmcuIE1heSB0YWtlIHRoZSBzcGVjaWFsXG4gICAgKiAgICB2YWx1ZSBST09UX1BBVEggaWYgdGhlIHJvb3Qgbm9kZSBoYXMganVzdCBiZWVuIGZvdW5kXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfE9iamVjdHxBcnJheXxOdWxsfHVuZGVmaW5lZH0gW21heWJlTmV3RGVlcGVzdE5vZGVdXG4gICAgKiAgICB1c3VhbGx5IHRoaXMgd29uJ3QgYmUga25vd24gc28gY2FuIGJlIHVuZGVmaW5lZC4gQ2FuJ3QgdXNlIG51bGxcbiAgICAqICAgIHRvIHJlcHJlc2VudCB1bmtub3duIGJlY2F1c2UgbnVsbCBpcyBhIHZhbGlkIHZhbHVlIGluIEpTT05cbiAgICAqKi9cbiAgZnVuY3Rpb24ga2V5Rm91bmQgKGFzY2VudCwgbmV3RGVlcGVzdE5hbWUsIG1heWJlTmV3RGVlcGVzdE5vZGUpIHtcbiAgICBpZiAoYXNjZW50KSB7IC8vIGlmIG5vdCByb290XG4gICAgICAvLyBJZiB3ZSBoYXZlIHRoZSBrZXkgYnV0ICh1bmxlc3MgYWRkaW5nIHRvIGFuIGFycmF5KSBubyBrbm93biB2YWx1ZVxuICAgICAgLy8geWV0LiBQdXQgdGhhdCBrZXkgaW4gdGhlIG91dHB1dCBidXQgYWdhaW5zdCBubyBkZWZpbmVkIHZhbHVlOlxuICAgICAgYXBwZW5kQnVpbHRDb250ZW50KGFzY2VudCwgbmV3RGVlcGVzdE5hbWUsIG1heWJlTmV3RGVlcGVzdE5vZGUpXG4gICAgfVxuXG4gICAgdmFyIGFzY2VudFdpdGhOZXdQYXRoID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fbGlzdHNfX1tcImRcIiAvKiBjb25zICovXSkoXG4gICAgICBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19hc2NlbnRfX1tcImJcIiAvKiBuYW1lZE5vZGUgKi9dKShuZXdEZWVwZXN0TmFtZSxcbiAgICAgICAgbWF5YmVOZXdEZWVwZXN0Tm9kZSksXG4gICAgICBhc2NlbnRcbiAgICApXG5cbiAgICBlbWl0Tm9kZU9wZW5lZChhc2NlbnRXaXRoTmV3UGF0aClcblxuICAgIHJldHVybiBhc2NlbnRXaXRoTmV3UGF0aFxuICB9XG5cbiAgLyoqXG4gICAgKiBGb3Igd2hlbiB0aGUgY3VycmVudCBub2RlIGVuZHMuXG4gICAgKi9cbiAgZnVuY3Rpb24gbm9kZUNsb3NlZCAoYXNjZW50KSB7XG4gICAgZW1pdE5vZGVDbG9zZWQoYXNjZW50KVxuXG4gICAgcmV0dXJuIE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2xpc3RzX19bXCJsXCIgLyogdGFpbCAqL10pKGFzY2VudCkgfHxcbiAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBub2RlcyBsZWZ0IGluIHRoZSBhc2NlbnQgdGhlIHJvb3Qgbm9kZVxuICAgICAgLy8ganVzdCBjbG9zZWQuIEVtaXQgYSBzcGVjaWFsIGV2ZW50IGZvciB0aGlzOlxuICAgICAgZW1pdFJvb3RDbG9zZWQoT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fYXNjZW50X19bXCJjXCIgLyogbm9kZU9mICovXSkoT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fbGlzdHNfX1tcImdcIiAvKiBoZWFkICovXSkoYXNjZW50KSkpXG4gIH1cblxuICB2YXIgY29udGVudEJ1aWxkZXJIYW5kbGVycyA9IHt9XG4gIGNvbnRlbnRCdWlsZGVySGFuZGxlcnNbX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19ldmVudHNfX1tcImxcIiAvKiBTQVhfVkFMVUVfT1BFTiAqL11dID0gbm9kZU9wZW5lZFxuICBjb250ZW50QnVpbGRlckhhbmRsZXJzW19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZXZlbnRzX19bXCJrXCIgLyogU0FYX1ZBTFVFX0NMT1NFICovXV0gPSBub2RlQ2xvc2VkXG4gIGNvbnRlbnRCdWlsZGVySGFuZGxlcnNbX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19ldmVudHNfX1tcImpcIiAvKiBTQVhfS0VZICovXV0gPSBrZXlGb3VuZFxuICByZXR1cm4gY29udGVudEJ1aWxkZXJIYW5kbGVyc1xufVxuXG5cblxuXG4vKioqLyB9KSxcbi8qIDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19wdWJsaWNBcGlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiZGVmYXVsdFwiXSA9IChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX3B1YmxpY0FwaV9fW1wiYVwiIC8qIG9ib2UgKi9dKTtcblxuXG4vKioqLyB9KSxcbi8qIDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFwcGx5RGVmYXVsdHM7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fdXRpbF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxuXG5mdW5jdGlvbiBhcHBseURlZmF1bHRzIChwYXNzdGhyb3VnaCwgdXJsLCBodHRwTWV0aG9kTmFtZSwgYm9keSwgaGVhZGVycywgd2l0aENyZWRlbnRpYWxzLCBjYWNoZWQpIHtcbiAgaGVhZGVycyA9IGhlYWRlcnNcbiAgICAvLyBTaGFsbG93LWNsb25lIHRoZSBoZWFkZXJzIGFycmF5LiBUaGlzIGFsbG93cyBpdCB0byBiZVxuICAgIC8vIG1vZGlmaWVkIHdpdGhvdXQgc2lkZSBlZmZlY3RzIHRvIHRoZSBjYWxsZXIuIFdlIGRvbid0XG4gICAgLy8gd2FudCB0byBjaGFuZ2Ugb2JqZWN0cyB0aGF0IHRoZSB1c2VyIHBhc3NlcyBpbi5cbiAgICA/IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoaGVhZGVycykpXG4gICAgOiB7fVxuXG4gIGlmIChib2R5KSB7XG4gICAgaWYgKCFPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX191dGlsX19bXCJkXCIgLyogaXNTdHJpbmcgKi9dKShib2R5KSkge1xuICAgICAgLy8gSWYgdGhlIGJvZHkgaXMgbm90IGEgc3RyaW5nLCBzdHJpbmdpZnkgaXQuIFRoaXMgYWxsb3dzIG9iamVjdHMgdG9cbiAgICAgIC8vIGJlIGdpdmVuIHdoaWNoIHdpbGwgYmUgc2VudCBhcyBKU09OLlxuICAgICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KGJvZHkpXG5cbiAgICAgIC8vIERlZmF1bHQgQ29udGVudC1UeXBlIHRvIEpTT04gdW5sZXNzIGdpdmVuIG90aGVyd2lzZS5cbiAgICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gaGVhZGVyc1snQ29udGVudC1UeXBlJ10gfHwgJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgfVxuICAgIGhlYWRlcnNbJ0NvbnRlbnQtTGVuZ3RoJ10gPSBoZWFkZXJzWydDb250ZW50LUxlbmd0aCddIHx8IGJvZHkubGVuZ3RoXG4gIH0gZWxzZSB7XG4gICAgYm9keSA9IG51bGxcbiAgfVxuXG4gIC8vIHN1cHBvcnQgY2FjaGUgYnVzdGluZyBsaWtlIGpRdWVyeS5hamF4KHtjYWNoZTpmYWxzZX0pXG4gIGZ1bmN0aW9uIG1vZGlmaWVkVXJsIChiYXNlVXJsLCBjYWNoZWQpIHtcbiAgICBpZiAoY2FjaGVkID09PSBmYWxzZSkge1xuICAgICAgaWYgKGJhc2VVcmwuaW5kZXhPZignPycpID09PSAtMSkge1xuICAgICAgICBiYXNlVXJsICs9ICc/J1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZVVybCArPSAnJidcbiAgICAgIH1cblxuICAgICAgYmFzZVVybCArPSAnXz0nICsgbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgICB9XG4gICAgcmV0dXJuIGJhc2VVcmxcbiAgfVxuXG4gIHJldHVybiBwYXNzdGhyb3VnaChodHRwTWV0aG9kTmFtZSB8fCAnR0VUJywgbW9kaWZpZWRVcmwodXJsLCBjYWNoZWQpLCBib2R5LCBoZWFkZXJzLCB3aXRoQ3JlZGVudGlhbHMgfHwgZmFsc2UpXG59XG5cblxuXG5cbi8qKiovIH0pLFxuLyogOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gd2lyZTsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19wdWJTdWJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fYXNjZW50TWFuYWdlcl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19pbmNyZW1lbnRhbENvbnRlbnRCdWlsZGVyX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fcGF0dGVybkFkYXB0ZXJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fanNvblBhdGhfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9faW5zdGFuY2VBcGlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fbGlic19jbGFyaW5ldF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X19zdHJlYW1pbmdIdHRwX25vZGVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xuXG5cblxuXG5cblxuXG5cblxuXG4vKipcbiAqIFRoaXMgZmlsZSBzaXRzIGp1c3QgYmVoaW5kIHRoZSBBUEkgd2hpY2ggaXMgdXNlZCB0byBhdHRhaW4gYSBuZXdcbiAqIE9ib2UgaW5zdGFuY2UuIEl0IGNyZWF0ZXMgdGhlIG5ldyBjb21wb25lbnRzIHRoYXQgYXJlIHJlcXVpcmVkXG4gKiBhbmQgaW50cm9kdWNlcyB0aGVtIHRvIGVhY2ggb3RoZXIuXG4gKi9cblxuZnVuY3Rpb24gd2lyZSAoaHR0cE1ldGhvZE5hbWUsIGNvbnRlbnRTb3VyY2UsIGJvZHksIGhlYWRlcnMsIHdpdGhDcmVkZW50aWFscykge1xuICB2YXIgb2JvZUJ1cyA9IE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX3B1YlN1Yl9fW1wiYVwiIC8qIHB1YlN1YiAqL10pKClcblxuICAvLyBXaXJlIHRoZSBpbnB1dCBzdHJlYW0gaW4gaWYgd2UgYXJlIGdpdmVuIGEgY29udGVudCBzb3VyY2UuXG4gIC8vIFRoaXMgd2lsbCB1c3VhbGx5IGJlIHRoZSBjYXNlLiBJZiBub3QsIHRoZSBpbnN0YW5jZSBjcmVhdGVkXG4gIC8vIHdpbGwgaGF2ZSB0byBiZSBwYXNzZWQgY29udGVudCBmcm9tIGFuIGV4dGVybmFsIHNvdXJjZS5cblxuICBpZiAoY29udGVudFNvdXJjZSkge1xuICAgIE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfX3N0cmVhbWluZ0h0dHBfbm9kZV9fW1wiYlwiIC8qIHN0cmVhbWluZ0h0dHAgKi9dKShvYm9lQnVzLFxuICAgICAgT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fc3RyZWFtaW5nSHR0cF9ub2RlX19bXCJhXCIgLyogaHR0cFRyYW5zcG9ydCAqL10pKCksXG4gICAgICBodHRwTWV0aG9kTmFtZSxcbiAgICAgIGNvbnRlbnRTb3VyY2UsXG4gICAgICBib2R5LFxuICAgICAgaGVhZGVycyxcbiAgICAgIHdpdGhDcmVkZW50aWFsc1xuICAgIClcbiAgfVxuXG4gIE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX2xpYnNfY2xhcmluZXRfX1tcImFcIiAvKiBjbGFyaW5ldCAqL10pKG9ib2VCdXMpXG5cbiAgT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fYXNjZW50TWFuYWdlcl9fW1wiYVwiIC8qIGFzY2VudE1hbmFnZXIgKi9dKShvYm9lQnVzLCBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19pbmNyZW1lbnRhbENvbnRlbnRCdWlsZGVyX19bXCJiXCIgLyogaW5jcmVtZW50YWxDb250ZW50QnVpbGRlciAqL10pKG9ib2VCdXMpKVxuXG4gIE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX3BhdHRlcm5BZGFwdGVyX19bXCJhXCIgLyogcGF0dGVybkFkYXB0ZXIgKi9dKShvYm9lQnVzLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2pzb25QYXRoX19bXCJhXCIgLyoganNvblBhdGhDb21waWxlciAqL10pXG5cbiAgcmV0dXJuIE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2luc3RhbmNlQXBpX19bXCJhXCIgLyogaW5zdGFuY2VBcGkgKi9dKShvYm9lQnVzLCBjb250ZW50U291cmNlKVxufVxuXG5cblxuXG4vKioqLyB9KSxcbi8qIDEwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBwdWJTdWI7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fc2luZ2xlRXZlbnRQdWJTdWJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZnVuY3Rpb25hbF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG5cbi8qKlxuICogcHViU3ViIGlzIGEgY3VycmllZCBpbnRlcmZhY2UgZm9yIGxpc3RlbmluZyB0byBhbmQgZW1pdHRpbmdcbiAqIGV2ZW50cy5cbiAqXG4gKiBJZiB3ZSBnZXQgYSBidXM6XG4gKlxuICogICAgdmFyIGJ1cyA9IHB1YlN1YigpO1xuICpcbiAqIFdlIGNhbiBsaXN0ZW4gdG8gZXZlbnQgJ2ZvbycgbGlrZTpcbiAqXG4gKiAgICBidXMoJ2ZvbycpLm9uKG15Q2FsbGJhY2spXG4gKlxuICogQW5kIGVtaXQgZXZlbnQgZm9vIGxpa2U6XG4gKlxuICogICAgYnVzKCdmb28nKS5lbWl0KClcbiAqXG4gKiBvciwgd2l0aCBhIHBhcmFtZXRlcjpcbiAqXG4gKiAgICBidXMoJ2ZvbycpLmVtaXQoJ2JhcicpXG4gKlxuICogQWxsIGZ1bmN0aW9ucyBjYW4gYmUgY2FjaGVkIGFuZCBkb24ndCBuZWVkIHRvIGJlXG4gKiBib3VuZC4gSWU6XG4gKlxuICogICAgdmFyIGZvb0VtaXR0ZXIgPSBidXMoJ2ZvbycpLmVtaXRcbiAqICAgIGZvb0VtaXR0ZXIoJ2JhcicpOyAgLy8gZW1pdCBhbiBldmVudFxuICogICAgZm9vRW1pdHRlcignYmF6Jyk7ICAvLyBlbWl0IGFub3RoZXJcbiAqXG4gKiBUaGVyZSdzIGFsc28gYW4gdW5jdXJyaWVkWzFdIHNob3J0Y3V0IGZvciAuZW1pdCBhbmQgLm9uOlxuICpcbiAqICAgIGJ1cy5vbignZm9vJywgY2FsbGJhY2spXG4gKiAgICBidXMuZW1pdCgnZm9vJywgJ2JhcicpXG4gKlxuICogWzFdOiBodHRwOi8venZvbi5vcmcvb3RoZXIvaGFza2VsbC9PdXRwdXRwcmVsdWRlL3VuY3VycnlfZi5odG1sXG4gKi9cbmZ1bmN0aW9uIHB1YlN1YiAoKSB7XG4gIHZhciBzaW5nbGVzID0ge31cbiAgdmFyIG5ld0xpc3RlbmVyID0gbmV3U2luZ2xlKCduZXdMaXN0ZW5lcicpXG4gIHZhciByZW1vdmVMaXN0ZW5lciA9IG5ld1NpbmdsZSgncmVtb3ZlTGlzdGVuZXInKVxuXG4gIGZ1bmN0aW9uIG5ld1NpbmdsZSAoZXZlbnROYW1lKSB7XG4gICAgc2luZ2xlc1tldmVudE5hbWVdID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fc2luZ2xlRXZlbnRQdWJTdWJfX1tcImFcIiAvKiBzaW5nbGVFdmVudFB1YlN1YiAqL10pKFxuICAgICAgZXZlbnROYW1lLFxuICAgICAgbmV3TGlzdGVuZXIsXG4gICAgICByZW1vdmVMaXN0ZW5lclxuICAgIClcbiAgICByZXR1cm4gc2luZ2xlc1tldmVudE5hbWVdXG4gIH1cblxuICAvKiogcHViU3ViIGluc3RhbmNlcyBhcmUgZnVuY3Rpb25zICovXG4gIGZ1bmN0aW9uIHB1YlN1Ykluc3RhbmNlIChldmVudE5hbWUpIHtcbiAgICByZXR1cm4gc2luZ2xlc1tldmVudE5hbWVdIHx8IG5ld1NpbmdsZShldmVudE5hbWUpXG4gIH1cblxuICAvLyBhZGQgY29udmVuaWVuY2UgRXZlbnRFbWl0dGVyLXN0eWxlIHVuY3VycmllZCBmb3JtIG9mICdlbWl0JyBhbmQgJ29uJ1xuICBbJ2VtaXQnLCAnb24nLCAndW4nXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7XG4gICAgcHViU3ViSW5zdGFuY2VbbWV0aG9kTmFtZV0gPSBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mdW5jdGlvbmFsX19bXCJrXCIgLyogdmFyQXJncyAqL10pKGZ1bmN0aW9uIChldmVudE5hbWUsIHBhcmFtZXRlcnMpIHtcbiAgICAgIE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2Z1bmN0aW9uYWxfX1tcImJcIiAvKiBhcHBseSAqL10pKHBhcmFtZXRlcnMsIHB1YlN1Ykluc3RhbmNlKGV2ZW50TmFtZSlbbWV0aG9kTmFtZV0pXG4gICAgfSlcbiAgfSlcblxuICByZXR1cm4gcHViU3ViSW5zdGFuY2Vcbn1cblxuXG5cblxuLyoqKi8gfSksXG4vKiAxMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gc2luZ2xlRXZlbnRQdWJTdWI7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fbGlzdHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX191dGlsX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZnVuY3Rpb25hbF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG5cblxuLyoqXG4gKiBBIHB1Yi9zdWIgd2hpY2ggaXMgcmVzcG9uc2libGUgZm9yIGEgc2luZ2xlIGV2ZW50IHR5cGUuIEFcbiAqIG11bHRpLWV2ZW50IHR5cGUgZXZlbnQgYnVzIGlzIGNyZWF0ZWQgYnkgcHViU3ViIGJ5IGNvbGxlY3RpbmdcbiAqIHNldmVyYWwgb2YgdGhlc2UuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50VHlwZVxuICogICAgdGhlIG5hbWUgb2YgdGhlIGV2ZW50cyBtYW5hZ2VkIGJ5IHRoaXMgc2luZ2xlRXZlbnRQdWJTdWJcbiAqIEBwYXJhbSB7c2luZ2xlRXZlbnRQdWJTdWJ9IFtuZXdMaXN0ZW5lcl1cbiAqICAgIHBsYWNlIHRvIG5vdGlmeSBvZiBuZXcgbGlzdGVuZXJzXG4gKiBAcGFyYW0ge3NpbmdsZUV2ZW50UHViU3VifSBbcmVtb3ZlTGlzdGVuZXJdXG4gKiAgICBwbGFjZSB0byBub3RpZnkgb2Ygd2hlbiBsaXN0ZW5lcnMgYXJlIHJlbW92ZWRcbiAqL1xuZnVuY3Rpb24gc2luZ2xlRXZlbnRQdWJTdWIgKGV2ZW50VHlwZSwgbmV3TGlzdGVuZXIsIHJlbW92ZUxpc3RlbmVyKSB7XG4gIC8qKiB3ZSBhcmUgb3B0aW1pc2VkIGZvciBlbWl0dGluZyBldmVudHMgb3ZlciBmaXJpbmcgdGhlbS5cbiAgICogIEFzIHdlbGwgYXMgdGhlIHR1cGxlIGxpc3Qgd2hpY2ggc3RvcmVzIGV2ZW50IGlkcyBhbmRcbiAgICogIGxpc3RlbmVycyB0aGVyZSBpcyBhIGxpc3Qgd2l0aCBqdXN0IHRoZSBsaXN0ZW5lcnMgd2hpY2hcbiAgICogIGNhbiBiZSBpdGVyYXRlZCBtb3JlIHF1aWNrbHkgd2hlbiB3ZSBhcmUgZW1pdHRpbmdcbiAgICovXG4gIHZhciBsaXN0ZW5lclR1cGxlTGlzdCxcbiAgICBsaXN0ZW5lckxpc3RcblxuICBmdW5jdGlvbiBoYXNJZCAoaWQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHR1cGxlKSB7XG4gICAgICByZXR1cm4gdHVwbGUuaWQgPT09IGlkXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyXG4gICAgICogQHBhcmFtIHsqfSBsaXN0ZW5lcklkXG4gICAgICogICAgYW4gaWQgdGhhdCB0aGlzIGxpc3RlbmVyIGNhbiBsYXRlciBieSByZW1vdmVkIGJ5LlxuICAgICAqICAgIENhbiBiZSBvZiBhbnkgdHlwZSwgdG8gYmUgY29tcGFyZWQgdG8gb3RoZXIgaWRzIHVzaW5nID09XG4gICAgICovXG4gICAgb246IGZ1bmN0aW9uIChsaXN0ZW5lciwgbGlzdGVuZXJJZCkge1xuICAgICAgdmFyIHR1cGxlID0ge1xuICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXG4gICAgICAgIGlkOiBsaXN0ZW5lcklkIHx8IGxpc3RlbmVyIC8vIHdoZW4gbm8gaWQgaXMgZ2l2ZW4gdXNlIHRoZVxuICAgICAgICAvLyBsaXN0ZW5lciBmdW5jdGlvbiBhcyB0aGUgaWRcbiAgICAgIH1cblxuICAgICAgaWYgKG5ld0xpc3RlbmVyKSB7XG4gICAgICAgIG5ld0xpc3RlbmVyLmVtaXQoZXZlbnRUeXBlLCBsaXN0ZW5lciwgdHVwbGUuaWQpXG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVyVHVwbGVMaXN0ID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fbGlzdHNfX1tcImRcIiAvKiBjb25zICovXSkodHVwbGUsIGxpc3RlbmVyVHVwbGVMaXN0KVxuICAgICAgbGlzdGVuZXJMaXN0ID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fbGlzdHNfX1tcImRcIiAvKiBjb25zICovXSkobGlzdGVuZXIsIGxpc3RlbmVyTGlzdClcblxuICAgICAgcmV0dXJuIHRoaXMgLy8gY2hhaW5pbmdcbiAgICB9LFxuXG4gICAgZW1pdDogZnVuY3Rpb24gKCkge1xuICAgICAgT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fbGlzdHNfX1tcImJcIiAvKiBhcHBseUVhY2ggKi9dKShsaXN0ZW5lckxpc3QsIGFyZ3VtZW50cylcbiAgICB9LFxuXG4gICAgdW46IGZ1bmN0aW9uIChsaXN0ZW5lcklkKSB7XG4gICAgICB2YXIgcmVtb3ZlZFxuXG4gICAgICBsaXN0ZW5lclR1cGxlTGlzdCA9IE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2xpc3RzX19bXCJtXCIgLyogd2l0aG91dCAqL10pKFxuICAgICAgICBsaXN0ZW5lclR1cGxlTGlzdCxcbiAgICAgICAgaGFzSWQobGlzdGVuZXJJZCksXG4gICAgICAgIGZ1bmN0aW9uICh0dXBsZSkge1xuICAgICAgICAgIHJlbW92ZWQgPSB0dXBsZVxuICAgICAgICB9XG4gICAgICApXG5cbiAgICAgIGlmIChyZW1vdmVkKSB7XG4gICAgICAgIGxpc3RlbmVyTGlzdCA9IE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2xpc3RzX19bXCJtXCIgLyogd2l0aG91dCAqL10pKGxpc3RlbmVyTGlzdCwgZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgcmV0dXJuIGxpc3RlbmVyID09PSByZW1vdmVkLmxpc3RlbmVyXG4gICAgICAgIH0pXG5cbiAgICAgICAgaWYgKHJlbW92ZUxpc3RlbmVyKSB7XG4gICAgICAgICAgcmVtb3ZlTGlzdGVuZXIuZW1pdChldmVudFR5cGUsIHJlbW92ZWQubGlzdGVuZXIsIHJlbW92ZWQuaWQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgbGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBkaWZmZXJzIGZyb20gTm9kZSBFdmVudEVtaXR0ZXI6IHJldHVybnMgbGlzdCwgbm90IGFycmF5XG4gICAgICByZXR1cm4gbGlzdGVuZXJMaXN0XG4gICAgfSxcblxuICAgIGhhc0xpc3RlbmVyOiBmdW5jdGlvbiAobGlzdGVuZXJJZCkge1xuICAgICAgdmFyIHRlc3QgPSBsaXN0ZW5lcklkID8gaGFzSWQobGlzdGVuZXJJZCkgOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2Z1bmN0aW9uYWxfX1tcImFcIiAvKiBhbHdheXMgKi9dXG5cbiAgICAgIHJldHVybiBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX191dGlsX19bXCJhXCIgLyogZGVmaW5lZCAqL10pKE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2xpc3RzX19bXCJlXCIgLyogZmlyc3QgKi9dKSh0ZXN0LCBsaXN0ZW5lclR1cGxlTGlzdCkpXG4gICAgfVxuICB9XG59XG5cblxuXG5cbi8qKiovIH0pLFxuLyogMTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFzY2VudE1hbmFnZXI7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fYXNjZW50X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZXZlbnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fbGlzdHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cblxuXG4vKipcbiAqIEEgYnJpZGdlIHVzZWQgdG8gYXNzaWduIHN0YXRlbGVzcyBmdW5jdGlvbnMgdG8gbGlzdGVuIHRvIGNsYXJpbmV0LlxuICpcbiAqIEFzIHdlbGwgYXMgdGhlIHBhcmFtZXRlciBmcm9tIGNsYXJpbmV0LCBlYWNoIGNhbGxiYWNrIHdpbGwgYWxzbyBiZSBwYXNzZWRcbiAqIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgY2FsbGJhY2suXG4gKlxuICogVGhpcyBtYXkgYWxzbyBiZSB1c2VkIHRvIGNsZWFyIGFsbCBsaXN0ZW5lcnMgYnkgYXNzaWduaW5nIHplcm8gaGFuZGxlcnM6XG4gKlxuICogICAgYXNjZW50TWFuYWdlciggY2xhcmluZXQsIHt9IClcbiAqL1xuZnVuY3Rpb24gYXNjZW50TWFuYWdlciAob2JvZUJ1cywgaGFuZGxlcnMpIHtcbiAgJ3VzZSBzdHJpY3QnXG5cbiAgdmFyIGxpc3RlbmVySWQgPSB7fVxuICB2YXIgYXNjZW50XG5cbiAgZnVuY3Rpb24gc3RhdGVBZnRlciAoaGFuZGxlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIGFzY2VudCA9IGhhbmRsZXIoYXNjZW50LCBwYXJhbSlcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBldmVudE5hbWUgaW4gaGFuZGxlcnMpIHtcbiAgICBvYm9lQnVzKGV2ZW50TmFtZSkub24oc3RhdGVBZnRlcihoYW5kbGVyc1tldmVudE5hbWVdKSwgbGlzdGVuZXJJZClcbiAgfVxuXG4gIG9ib2VCdXMoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19ldmVudHNfX1tcImdcIiAvKiBOT0RFX1NXQVAgKi9dKS5vbihmdW5jdGlvbiAobmV3Tm9kZSkge1xuICAgIHZhciBvbGRIZWFkID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fbGlzdHNfX1tcImdcIiAvKiBoZWFkICovXSkoYXNjZW50KVxuICAgIHZhciBrZXkgPSBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19hc2NlbnRfX1tcImFcIiAvKiBrZXlPZiAqL10pKG9sZEhlYWQpXG4gICAgdmFyIGFuY2VzdG9ycyA9IE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2xpc3RzX19bXCJsXCIgLyogdGFpbCAqL10pKGFzY2VudClcbiAgICB2YXIgcGFyZW50Tm9kZVxuXG4gICAgaWYgKGFuY2VzdG9ycykge1xuICAgICAgcGFyZW50Tm9kZSA9IE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2FzY2VudF9fW1wiY1wiIC8qIG5vZGVPZiAqL10pKE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2xpc3RzX19bXCJnXCIgLyogaGVhZCAqL10pKGFuY2VzdG9ycykpXG4gICAgICBwYXJlbnROb2RlW2tleV0gPSBuZXdOb2RlXG4gICAgfVxuICB9KVxuXG4gIG9ib2VCdXMoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19ldmVudHNfX1tcImVcIiAvKiBOT0RFX0RST1AgKi9dKS5vbihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9sZEhlYWQgPSBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19saXN0c19fW1wiZ1wiIC8qIGhlYWQgKi9dKShhc2NlbnQpXG4gICAgdmFyIGtleSA9IE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2FzY2VudF9fW1wiYVwiIC8qIGtleU9mICovXSkob2xkSGVhZClcbiAgICB2YXIgYW5jZXN0b3JzID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fbGlzdHNfX1tcImxcIiAvKiB0YWlsICovXSkoYXNjZW50KVxuICAgIHZhciBwYXJlbnROb2RlXG5cbiAgICBpZiAoYW5jZXN0b3JzKSB7XG4gICAgICBwYXJlbnROb2RlID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fYXNjZW50X19bXCJjXCIgLyogbm9kZU9mICovXSkoT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fbGlzdHNfX1tcImdcIiAvKiBoZWFkICovXSkoYW5jZXN0b3JzKSlcblxuICAgICAgZGVsZXRlIHBhcmVudE5vZGVba2V5XVxuICAgIH1cbiAgfSlcblxuICBvYm9lQnVzKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZXZlbnRzX19bXCJhXCIgLyogQUJPUlRJTkcgKi9dKS5vbihmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgZXZlbnROYW1lIGluIGhhbmRsZXJzKSB7XG4gICAgICBvYm9lQnVzKGV2ZW50TmFtZSkudW4obGlzdGVuZXJJZClcbiAgICB9XG4gIH0pXG59XG5cblxuXG5cbi8qKiovIH0pLFxuLyogMTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIHBhdHRlcm5BZGFwdGVyOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2V2ZW50c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2xpc3RzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fYXNjZW50X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG5cblxuXG4vKipcbiAqICBUaGUgcGF0dGVybiBhZGFwdG9yIGxpc3RlbnMgZm9yIG5ld0xpc3RlbmVyIGFuZCByZW1vdmVMaXN0ZW5lclxuICogIGV2ZW50cy4gV2hlbiBwYXR0ZXJucyBhcmUgYWRkZWQgb3IgcmVtb3ZlZCBpdCBjb21waWxlcyB0aGUgSlNPTlBhdGhcbiAqICBhbmQgd2lyZXMgdGhlbSB1cC5cbiAqXG4gKiAgV2hlbiBub2RlcyBhbmQgcGF0aHMgYXJlIGZvdW5kIGl0IGVtaXRzIHRoZSBmdWxseS1xdWFsaWZpZWQgbWF0Y2hcbiAqICBldmVudHMgd2l0aCBwYXJhbWV0ZXJzIHJlYWR5IHRvIHNoaXAgdG8gdGhlIG91dHNpZGUgd29ybGRcbiAqL1xuXG5mdW5jdGlvbiBwYXR0ZXJuQWRhcHRlciAob2JvZUJ1cywganNvblBhdGhDb21waWxlcikge1xuICB2YXIgcHJlZGljYXRlRXZlbnRNYXAgPSB7XG4gICAgbm9kZTogb2JvZUJ1cyhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2V2ZW50c19fW1wiZFwiIC8qIE5PREVfQ0xPU0VEICovXSksXG4gICAgcGF0aDogb2JvZUJ1cyhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2V2ZW50c19fW1wiZlwiIC8qIE5PREVfT1BFTkVEICovXSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXRNYXRjaGluZ05vZGUgKGVtaXRNYXRjaCwgbm9kZSwgYXNjZW50KSB7XG4gICAgLypcbiAgICAgICAgIFdlJ3JlIG5vdyBjYWxsaW5nIHRvIHRoZSBvdXRzaWRlIHdvcmxkIHdoZXJlIExpc3Atc3R5bGVcbiAgICAgICAgIGxpc3RzIHdpbGwgbm90IGJlIGZhbWlsaWFyLiBDb252ZXJ0IHRvIHN0YW5kYXJkIGFycmF5cy5cblxuICAgICAgICAgQWxzbywgcmV2ZXJzZSB0aGUgb3JkZXIgYmVjYXVzZSBpdCBpcyBtb3JlIGNvbW1vbiB0b1xuICAgICAgICAgbGlzdCBwYXRocyBcInJvb3QgdG8gbGVhZlwiIHRoYW4gXCJsZWFmIHRvIHJvb3RcIiAgKi9cbiAgICB2YXIgZGVzY2VudCA9IE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2xpc3RzX19bXCJrXCIgLyogcmV2ZXJzZUxpc3QgKi9dKShhc2NlbnQpXG5cbiAgICBlbWl0TWF0Y2goXG4gICAgICBub2RlLFxuXG4gICAgICAvLyBUbyBtYWtlIGEgcGF0aCwgc3RyaXAgb2ZmIHRoZSBsYXN0IGl0ZW0gd2hpY2ggaXMgdGhlIHNwZWNpYWxcbiAgICAgIC8vIFJPT1RfUEFUSCB0b2tlbiBmb3IgdGhlICdwYXRoJyB0byB0aGUgcm9vdCBub2RlXG4gICAgICBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19saXN0c19fW1wiaVwiIC8qIGxpc3RBc0FycmF5ICovXSkoT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fbGlzdHNfX1tcImxcIiAvKiB0YWlsICovXSkoT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fbGlzdHNfX1tcImpcIiAvKiBtYXAgKi9dKShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2FzY2VudF9fW1wiYVwiIC8qIGtleU9mICovXSwgZGVzY2VudCkpKSwgLy8gcGF0aFxuICAgICAgT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fbGlzdHNfX1tcImlcIiAvKiBsaXN0QXNBcnJheSAqL10pKE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2xpc3RzX19bXCJqXCIgLyogbWFwICovXSkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19hc2NlbnRfX1tcImNcIiAvKiBub2RlT2YgKi9dLCBkZXNjZW50KSkgLy8gYW5jZXN0b3JzXG4gICAgKVxuICB9XG5cbiAgLypcbiAgICAqIFNldCB1cCB0aGUgY2F0Y2hpbmcgb2YgZXZlbnRzIHN1Y2ggYXMgTk9ERV9DTE9TRUQgYW5kIE5PREVfT1BFTkVEIGFuZCwgaWZcbiAgICAqIG1hdGNoaW5nIHRoZSBzcGVjaWZpZWQgcGF0dGVybiwgcHJvcGFnYXRlIHRvIHBhdHRlcm4tbWF0Y2ggZXZlbnRzIHN1Y2ggYXNcbiAgICAqIG9ib2VCdXMoJ25vZGU6IScpXG4gICAgKlxuICAgICpcbiAgICAqXG4gICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGVFdmVudFxuICAgICogICAgICAgICAgZWl0aGVyIG9ib2VCdXMoTk9ERV9DTE9TRUQpIG9yIG9ib2VCdXMoTk9ERV9PUEVORUQpLlxuICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGlsZWRKc29uUGF0aFxuICAgICovXG4gIGZ1bmN0aW9uIGFkZFVuZGVybHlpbmdMaXN0ZW5lciAoZnVsbEV2ZW50TmFtZSwgcHJlZGljYXRlRXZlbnQsIGNvbXBpbGVkSnNvblBhdGgpIHtcbiAgICB2YXIgZW1pdE1hdGNoID0gb2JvZUJ1cyhmdWxsRXZlbnROYW1lKS5lbWl0XG5cbiAgICBwcmVkaWNhdGVFdmVudC5vbihmdW5jdGlvbiAoYXNjZW50KSB7XG4gICAgICB2YXIgbWF5YmVNYXRjaGluZ01hcHBpbmcgPSBjb21waWxlZEpzb25QYXRoKGFzY2VudClcblxuICAgICAgLyogUG9zc2libGUgdmFsdWVzIGZvciBtYXliZU1hdGNoaW5nTWFwcGluZyBhcmUgbm93OlxuXG4gICAgICAgICAgZmFsc2U6XG4gICAgICAgICAgd2UgZGlkIG5vdCBtYXRjaFxuXG4gICAgICAgICAgYW4gb2JqZWN0L2FycmF5L3N0cmluZy9udW1iZXIvbnVsbDpcbiAgICAgICAgICB3ZSBtYXRjaGVkIGFuZCBoYXZlIHRoZSBub2RlIHRoYXQgbWF0Y2hlZC5cbiAgICAgICAgICBCZWNhdXNlIG51bGxzIGFyZSB2YWxpZCBqc29uIHZhbHVlcyB0aGlzIGNhbiBiZSBudWxsLlxuXG4gICAgICAgICAgdW5kZWZpbmVkOlxuICAgICAgICAgIHdlIG1hdGNoZWQgYnV0IGRvbid0IGhhdmUgdGhlIG1hdGNoaW5nIG5vZGUgeWV0LlxuICAgICAgICAgIGllLCB3ZSBrbm93IHRoZXJlIGlzIGFuIHVwY29taW5nIG5vZGUgdGhhdCBtYXRjaGVzIGJ1dCB3ZVxuICAgICAgICAgIGNhbid0IHNheSBhbnl0aGluZyBlbHNlIGFib3V0IGl0LlxuICAgICAgICAgICovXG4gICAgICBpZiAobWF5YmVNYXRjaGluZ01hcHBpbmcgIT09IGZhbHNlKSB7XG4gICAgICAgIGVtaXRNYXRjaGluZ05vZGUoXG4gICAgICAgICAgZW1pdE1hdGNoLFxuICAgICAgICAgIE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2FzY2VudF9fW1wiY1wiIC8qIG5vZGVPZiAqL10pKG1heWJlTWF0Y2hpbmdNYXBwaW5nKSxcbiAgICAgICAgICBhc2NlbnRcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0sIGZ1bGxFdmVudE5hbWUpXG5cbiAgICBvYm9lQnVzKCdyZW1vdmVMaXN0ZW5lcicpLm9uKGZ1bmN0aW9uIChyZW1vdmVkRXZlbnROYW1lKSB7XG4gICAgICAvLyBpZiB0aGUgZnVsbHkgcXVhbGlmaWVkIG1hdGNoIGV2ZW50IGxpc3RlbmVyIGlzIGxhdGVyIHJlbW92ZWQsIGNsZWFuIHVwXG4gICAgICAvLyBieSByZW1vdmluZyB0aGUgdW5kZXJseWluZyBsaXN0ZW5lciBpZiBpdCB3YXMgdGhlIGxhc3QgdXNpbmcgdGhhdCBwYXR0ZXJuOlxuXG4gICAgICBpZiAocmVtb3ZlZEV2ZW50TmFtZSA9PT0gZnVsbEV2ZW50TmFtZSkge1xuICAgICAgICBpZiAoIW9ib2VCdXMocmVtb3ZlZEV2ZW50TmFtZSkubGlzdGVuZXJzKCkpIHtcbiAgICAgICAgICBwcmVkaWNhdGVFdmVudC51bihmdWxsRXZlbnROYW1lKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIG9ib2VCdXMoJ25ld0xpc3RlbmVyJykub24oZnVuY3Rpb24gKGZ1bGxFdmVudE5hbWUpIHtcbiAgICB2YXIgbWF0Y2ggPSAvKG5vZGV8cGF0aCk6KC4qKS8uZXhlYyhmdWxsRXZlbnROYW1lKVxuXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICB2YXIgcHJlZGljYXRlRXZlbnQgPSBwcmVkaWNhdGVFdmVudE1hcFttYXRjaFsxXV1cblxuICAgICAgaWYgKCFwcmVkaWNhdGVFdmVudC5oYXNMaXN0ZW5lcihmdWxsRXZlbnROYW1lKSkge1xuICAgICAgICBhZGRVbmRlcmx5aW5nTGlzdGVuZXIoXG4gICAgICAgICAgZnVsbEV2ZW50TmFtZSxcbiAgICAgICAgICBwcmVkaWNhdGVFdmVudCxcbiAgICAgICAgICBqc29uUGF0aENvbXBpbGVyKG1hdGNoWzJdKVxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuICB9KVxufVxuXG5cblxuXG4vKioqLyB9KSxcbi8qIDE0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBqc29uUGF0aENvbXBpbGVyOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2Z1bmN0aW9uYWxfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19saXN0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2FzY2VudF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX3V0aWxfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19pbmNyZW1lbnRhbENvbnRlbnRCdWlsZGVyX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fanNvblBhdGhTeW50YXhfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xuXG5cblxuXG5cblxuXG4vKipcbiAqIFRoZSBqc29uUGF0aCBldmFsdWF0b3IgY29tcGlsZXIgdXNlZCBmb3IgT2JvZS5qcy5cbiAqXG4gKiBPbmUgZnVuY3Rpb24gaXMgZXhwb3NlZC4gVGhpcyBmdW5jdGlvbiB0YWtlcyBhIFN0cmluZyBKU09OUGF0aCBzcGVjIGFuZFxuICogcmV0dXJucyBhIGZ1bmN0aW9uIHRvIHRlc3QgY2FuZGlkYXRlIGFzY2VudHMgZm9yIG1hdGNoZXMuXG4gKlxuICogIFN0cmluZyBqc29uUGF0aCAtPiAoTGlzdCBhc2NlbnQpIC0+IEJvb2xlYW58T2JqZWN0XG4gKlxuICogVGhpcyBmaWxlIGlzIGNvZGVkIGluIGEgcHVyZSBmdW5jdGlvbmFsIHN0eWxlLiBUaGF0IGlzLCBubyBmdW5jdGlvbiBoYXNcbiAqIHNpZGUgZWZmZWN0cywgZXZlcnkgZnVuY3Rpb24gZXZhbHVhdGVzIHRvIHRoZSBzYW1lIHZhbHVlIGZvciB0aGUgc2FtZVxuICogYXJndW1lbnRzIGFuZCBubyB2YXJpYWJsZXMgYXJlIHJlYXNzaWduZWQuXG4gKi9cbi8vIHRoZSBjYWxsIHRvIGpzb25QYXRoU3ludGF4IGluamVjdHMgdGhlIHRva2VuIHN5bnRheGVzIHRoYXQgYXJlIG5lZWRlZFxuLy8gaW5zaWRlIHRoZSBjb21waWxlclxudmFyIGpzb25QYXRoQ29tcGlsZXIgPSBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19qc29uUGF0aFN5bnRheF9fW1wiYVwiIC8qIGpzb25QYXRoU3ludGF4ICovXSkoZnVuY3Rpb24gKHBhdGhOb2RlU3ludGF4LFxuICBkb3VibGVEb3RTeW50YXgsXG4gIGRvdFN5bnRheCxcbiAgYmFuZ1N5bnRheCxcbiAgZW1wdHlTeW50YXgpIHtcbiAgdmFyIENBUFRVUklOR19JTkRFWCA9IDFcbiAgdmFyIE5BTUVfSU5ERVggPSAyXG4gIHZhciBGSUVMRF9MSVNUX0lOREVYID0gM1xuXG4gIHZhciBoZWFkS2V5ID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZnVuY3Rpb25hbF9fW1wiZFwiIC8qIGNvbXBvc2UyICovXSkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19hc2NlbnRfX1tcImFcIiAvKiBrZXlPZiAqL10sIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fbGlzdHNfX1tcImdcIiAvKiBoZWFkICovXSlcbiAgdmFyIGhlYWROb2RlID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZnVuY3Rpb25hbF9fW1wiZFwiIC8qIGNvbXBvc2UyICovXSkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19hc2NlbnRfX1tcImNcIiAvKiBub2RlT2YgKi9dLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2xpc3RzX19bXCJnXCIgLyogaGVhZCAqL10pXG5cbiAgLyoqXG4gICAgKiBDcmVhdGUgYW4gZXZhbHVhdG9yIGZ1bmN0aW9uIGZvciBhIG5hbWVkIHBhdGggbm9kZSwgZXhwcmVzc2VkIGluIHRoZVxuICAgICogSlNPTlBhdGggbGlrZTpcbiAgICAqICAgIGZvb1xuICAgICogICAgW1wiYmFyXCJdXG4gICAgKiAgICBbMl1cbiAgICAqL1xuICBmdW5jdGlvbiBuYW1lQ2xhdXNlIChwcmV2aW91c0V4cHIsIGRldGVjdGlvbikge1xuICAgIHZhciBuYW1lID0gZGV0ZWN0aW9uW05BTUVfSU5ERVhdXG5cbiAgICB2YXIgbWF0Y2hlc05hbWUgPSAoIW5hbWUgfHwgbmFtZSA9PT0gJyonKVxuICAgICAgPyBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2Z1bmN0aW9uYWxfX1tcImFcIiAvKiBhbHdheXMgKi9dXG4gICAgICA6IGZ1bmN0aW9uIChhc2NlbnQpIHsgcmV0dXJuIFN0cmluZyhoZWFkS2V5KGFzY2VudCkpID09PSBuYW1lIH1cblxuICAgIHJldHVybiBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mdW5jdGlvbmFsX19bXCJnXCIgLyogbGF6eUludGVyc2VjdGlvbiAqL10pKG1hdGNoZXNOYW1lLCBwcmV2aW91c0V4cHIpXG4gIH1cblxuICAvKipcbiAgICAqIENyZWF0ZSBhbiBldmFsdWF0b3IgZnVuY3Rpb24gZm9yIGEgYSBkdWNrLXR5cGVkIG5vZGUsIGV4cHJlc3NlZCBsaWtlOlxuICAgICpcbiAgICAqICAgIHtzcGluLCB0YXN0ZSwgY29sb3VyfVxuICAgICogICAgLnBhcnRpY2xle3NwaW4sIHRhc3RlLCBjb2xvdXJ9XG4gICAgKiAgICAqe3NwaW4sIHRhc3RlLCBjb2xvdXJ9XG4gICAgKi9cbiAgZnVuY3Rpb24gZHVja1R5cGVDbGF1c2UgKHByZXZpb3VzRXhwciwgZGV0ZWN0aW9uKSB7XG4gICAgdmFyIGZpZWxkTGlzdFN0ciA9IGRldGVjdGlvbltGSUVMRF9MSVNUX0lOREVYXVxuXG4gICAgaWYgKCFmaWVsZExpc3RTdHIpIHsgcmV0dXJuIHByZXZpb3VzRXhwciB9IC8vIGRvbid0IHdyYXAgYXQgYWxsLCByZXR1cm4gZ2l2ZW4gZXhwciBhcy1pc1xuXG4gICAgdmFyIGhhc0FsbHJlcXVpcmVkRmllbGRzID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZnVuY3Rpb25hbF9fW1wialwiIC8qIHBhcnRpYWxDb21wbGV0ZSAqL10pKFxuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX191dGlsX19bXCJiXCIgLyogaGFzQWxsUHJvcGVydGllcyAqL10sXG4gICAgICBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19saXN0c19fW1wiY1wiIC8qIGFycmF5QXNMaXN0ICovXSkoZmllbGRMaXN0U3RyLnNwbGl0KC9cXFcrLykpXG4gICAgKVxuXG4gICAgdmFyIGlzTWF0Y2ggPSBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mdW5jdGlvbmFsX19bXCJkXCIgLyogY29tcG9zZTIgKi9dKShcbiAgICAgIGhhc0FsbHJlcXVpcmVkRmllbGRzLFxuICAgICAgaGVhZE5vZGVcbiAgICApXG5cbiAgICByZXR1cm4gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZnVuY3Rpb25hbF9fW1wiZ1wiIC8qIGxhenlJbnRlcnNlY3Rpb24gKi9dKShpc01hdGNoLCBwcmV2aW91c0V4cHIpXG4gIH1cblxuICAvKipcbiAgICAqIEV4cHJlc3Npb24gZm9yICQsIHJldHVybnMgdGhlIGV2YWx1YXRvciBmdW5jdGlvblxuICAgICovXG4gIGZ1bmN0aW9uIGNhcHR1cmUgKHByZXZpb3VzRXhwciwgZGV0ZWN0aW9uKSB7XG4gICAgLy8gZXh0cmFjdCBtZWFuaW5nIGZyb20gdGhlIGRldGVjdGlvblxuICAgIHZhciBjYXB0dXJpbmcgPSAhIWRldGVjdGlvbltDQVBUVVJJTkdfSU5ERVhdXG5cbiAgICBpZiAoIWNhcHR1cmluZykgeyByZXR1cm4gcHJldmlvdXNFeHByIH0gLy8gZG9uJ3Qgd3JhcCBhdCBhbGwsIHJldHVybiBnaXZlbiBleHByIGFzLWlzXG5cbiAgICByZXR1cm4gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZnVuY3Rpb25hbF9fW1wiZ1wiIC8qIGxhenlJbnRlcnNlY3Rpb24gKi9dKShwcmV2aW91c0V4cHIsIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fbGlzdHNfX1tcImdcIiAvKiBoZWFkICovXSlcbiAgfVxuXG4gIC8qKlxuICAgICogQ3JlYXRlIGFuIGV2YWx1YXRvciBmdW5jdGlvbiB0aGF0IG1vdmVzIG9udG8gdGhlIG5leHQgaXRlbSBvbiB0aGVcbiAgICAqIGxpc3RzLiBUaGlzIGZ1bmN0aW9uIGlzIHRoZSBwbGFjZSB3aGVyZSB0aGUgbG9naWMgdG8gbW92ZSB1cCBhXG4gICAgKiBsZXZlbCBpbiB0aGUgYXNjZW50IGV4aXN0cy5cbiAgICAqXG4gICAgKiBFZywgZm9yIEpTT05QYXRoIFwiLmZvb1wiIHdlIG5lZWQgc2tpcDEobmFtZUNsYXVzZShhbHdheXMsIFssJ2ZvbyddKSlcbiAgICAqL1xuICBmdW5jdGlvbiBza2lwMSAocHJldmlvdXNFeHByKSB7XG4gICAgaWYgKHByZXZpb3VzRXhwciA9PT0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mdW5jdGlvbmFsX19bXCJhXCIgLyogYWx3YXlzICovXSkge1xuICAgICAgLyogSWYgdGhlcmUgaXMgbm8gcHJldmlvdXMgZXhwcmVzc2lvbiB0aGlzIGNvbnN1bWUgY29tbWFuZFxuICAgICAgICAgICAgaXMgYXQgdGhlIHN0YXJ0IG9mIHRoZSBqc29uUGF0aC5cbiAgICAgICAgICAgIFNpbmNlIEpTT05QYXRoIHNwZWNpZmllcyB3aGF0IHdlJ2QgbGlrZSB0byBmaW5kIGJ1dCBub3RcbiAgICAgICAgICAgIG5lY2Vzc2FyaWx5IGV2ZXJ5dGhpbmcgbGVhZGluZyBkb3duIHRvIGl0LCB3aGVuIHJ1bm5pbmdcbiAgICAgICAgICAgIG91dCBvZiBKU09OUGF0aCB0byBjaGVjayBhZ2FpbnN0IHdlIGRlZmF1bHQgdG8gdHJ1ZSAqL1xuICAgICAgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZnVuY3Rpb25hbF9fW1wiYVwiIC8qIGFsd2F5cyAqL11cbiAgICB9XG5cbiAgICAvKiogcmV0dXJuIHRydWUgaWYgdGhlIGFzY2VudCB3ZSBoYXZlIGNvbnRhaW5zIG9ubHkgdGhlIEpTT04gcm9vdCxcbiAgICAgICAqICBmYWxzZSBvdGhlcndpc2VcbiAgICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vdEF0Um9vdCAoYXNjZW50KSB7XG4gICAgICByZXR1cm4gaGVhZEtleShhc2NlbnQpICE9PSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2luY3JlbWVudGFsQ29udGVudEJ1aWxkZXJfX1tcImFcIiAvKiBST09UX1BBVEggKi9dXG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2Z1bmN0aW9uYWxfX1tcImdcIiAvKiBsYXp5SW50ZXJzZWN0aW9uICovXSkoXG4gICAgICAvKiBJZiB3ZSdyZSBhbHJlYWR5IGF0IHRoZSByb290IGJ1dCB0aGVyZSBhcmUgbW9yZVxuICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbnMgdG8gc2F0aXNmeSwgY2FuJ3QgY29uc3VtZSBhbnkgbW9yZS4gTm8gbWF0Y2guXG5cbiAgICAgICAgICAgICAgICAgIFRoaXMgY2hlY2sgaXMgd2h5IG5vbmUgb2YgdGhlIG90aGVyIGV4cHJzIGhhdmUgdG8gYmUgYWJsZVxuICAgICAgICAgICAgICAgICAgdG8gaGFuZGxlIGVtcHR5IGxpc3RzOyBza2lwMSBpcyB0aGUgb25seSBldmFsdWF0b3IgdGhhdFxuICAgICAgICAgICAgICAgICAgbW92ZXMgb250byB0aGUgbmV4dCB0b2tlbiBhbmQgaXQgcmVmdXNlcyB0byBkbyBzbyBvbmNlIGl0XG4gICAgICAgICAgICAgICAgICByZWFjaGVzIHRoZSBsYXN0IGl0ZW0gaW4gdGhlIGxpc3QuICovXG4gICAgICBub3RBdFJvb3QsXG5cbiAgICAgIC8qIFdlIGFyZSBub3QgYXQgdGhlIHJvb3Qgb2YgdGhlIGFzY2VudCB5ZXQuXG4gICAgICAgICAgICAgICAgICBNb3ZlIHRvIHRoZSBuZXh0IGxldmVsIG9mIHRoZSBhc2NlbnQgYnkgaGFuZGluZyBvbmx5XG4gICAgICAgICAgICAgICAgICB0aGUgdGFpbCB0byB0aGUgcHJldmlvdXMgZXhwcmVzc2lvbiAqL1xuICAgICAgT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZnVuY3Rpb25hbF9fW1wiZFwiIC8qIGNvbXBvc2UyICovXSkocHJldmlvdXNFeHByLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2xpc3RzX19bXCJsXCIgLyogdGFpbCAqL10pXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAgKiBDcmVhdGUgYW4gZXZhbHVhdG9yIGZ1bmN0aW9uIGZvciB0aGUgLi4gKGRvdWJsZSBkb3QpIHRva2VuLiBDb25zdW1lc1xuICAgICogemVybyBvciBtb3JlIGxldmVscyBvZiB0aGUgYXNjZW50LCB0aGUgZmV3ZXN0IHRoYXQgYXJlIHJlcXVpcmVkIHRvIGZpbmRcbiAgICAqIGEgbWF0Y2ggd2hlbiBnaXZlbiB0byBwcmV2aW91c0V4cHIuXG4gICAgKi9cbiAgZnVuY3Rpb24gc2tpcE1hbnkgKHByZXZpb3VzRXhwcikge1xuICAgIGlmIChwcmV2aW91c0V4cHIgPT09IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZnVuY3Rpb25hbF9fW1wiYVwiIC8qIGFsd2F5cyAqL10pIHtcbiAgICAgIC8qIElmIHRoZXJlIGlzIG5vIHByZXZpb3VzIGV4cHJlc3Npb24gdGhpcyBjb25zdW1lIGNvbW1hbmRcbiAgICAgICAgICAgIGlzIGF0IHRoZSBzdGFydCBvZiB0aGUganNvblBhdGguXG4gICAgICAgICAgICBTaW5jZSBKU09OUGF0aCBzcGVjaWZpZXMgd2hhdCB3ZSdkIGxpa2UgdG8gZmluZCBidXQgbm90XG4gICAgICAgICAgICBuZWNlc3NhcmlseSBldmVyeXRoaW5nIGxlYWRpbmcgZG93biB0byBpdCwgd2hlbiBydW5uaW5nXG4gICAgICAgICAgICBvdXQgb2YgSlNPTlBhdGggdG8gY2hlY2sgYWdhaW5zdCB3ZSBkZWZhdWx0IHRvIHRydWUgKi9cbiAgICAgIHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2Z1bmN0aW9uYWxfX1tcImFcIiAvKiBhbHdheXMgKi9dXG4gICAgfVxuXG4gICAgLy8gSW4gSlNPTlBhdGggLi4gaXMgZXF1aXZhbGVudCB0byAhLi4gc28gaWYgLi4gcmVhY2hlcyB0aGUgcm9vdFxuICAgIC8vIHRoZSBtYXRjaCBoYXMgc3VjY2VlZGVkLiBJZSwgd2UgbWlnaHQgd3JpdGUgLi5mb28gb3IgIS4uZm9vXG4gICAgLy8gYW5kIGJvdGggc2hvdWxkIG1hdGNoIGlkZW50aWNhbGx5LlxuICAgIHZhciB0ZXJtaW5hbENhc2VXaGVuQXJyaXZpbmdBdFJvb3QgPSByb290RXhwcigpXG4gICAgdmFyIHRlcm1pbmFsQ2FzZVdoZW5QcmV2aW91c0V4cHJlc3Npb25Jc1NhdGlzZmllZCA9IHByZXZpb3VzRXhwclxuICAgIHZhciByZWN1cnNpdmVDYXNlID0gc2tpcDEoZnVuY3Rpb24gKGFzY2VudCkge1xuICAgICAgcmV0dXJuIGNhc2VzKGFzY2VudClcbiAgICB9KVxuXG4gICAgdmFyIGNhc2VzID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZnVuY3Rpb25hbF9fW1wiaFwiIC8qIGxhenlVbmlvbiAqL10pKFxuICAgICAgdGVybWluYWxDYXNlV2hlbkFycml2aW5nQXRSb290XG4gICAgICAsIHRlcm1pbmFsQ2FzZVdoZW5QcmV2aW91c0V4cHJlc3Npb25Jc1NhdGlzZmllZFxuICAgICAgLCByZWN1cnNpdmVDYXNlXG4gICAgKVxuXG4gICAgcmV0dXJuIGNhc2VzXG4gIH1cblxuICAvKipcbiAgICAqIEdlbmVyYXRlIGFuIGV2YWx1YXRvciBmb3IgISAtIG1hdGNoZXMgb25seSB0aGUgcm9vdCBlbGVtZW50IG9mIHRoZSBqc29uXG4gICAgKiBhbmQgaWdub3JlcyBhbnkgcHJldmlvdXMgZXhwcmVzc2lvbnMgc2luY2Ugbm90aGluZyBtYXkgcHJlY2VkZSAhLlxuICAgICovXG4gIGZ1bmN0aW9uIHJvb3RFeHByICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFzY2VudCkge1xuICAgICAgcmV0dXJuIGhlYWRLZXkoYXNjZW50KSA9PT0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19pbmNyZW1lbnRhbENvbnRlbnRCdWlsZGVyX19bXCJhXCIgLyogUk9PVF9QQVRIICovXVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgICogR2VuZXJhdGUgYSBzdGF0ZW1lbnQgd3JhcHBlciB0byBzaXQgYXJvdW5kIHRoZSBvdXRlcm1vc3RcbiAgICAqIGNsYXVzZSBldmFsdWF0b3IuXG4gICAgKlxuICAgICogSGFuZGxlcyB0aGUgY2FzZSB3aGVyZSB0aGUgY2FwdHVyaW5nIGlzIGltcGxpY2l0IGJlY2F1c2UgdGhlIEpTT05QYXRoXG4gICAgKiBkaWQgbm90IGNvbnRhaW4gYSAnJCcgYnkgcmV0dXJuaW5nIHRoZSBsYXN0IG5vZGUuXG4gICAgKi9cbiAgZnVuY3Rpb24gc3RhdGVtZW50RXhwciAobGFzdENsYXVzZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXNjZW50KSB7XG4gICAgICAvLyBraWNrIG9mZiB0aGUgZXZhbHVhdGlvbiBieSBwYXNzaW5nIHRocm91Z2ggdG8gdGhlIGxhc3QgY2xhdXNlXG4gICAgICB2YXIgZXhwck1hdGNoID0gbGFzdENsYXVzZShhc2NlbnQpXG5cbiAgICAgIHJldHVybiBleHByTWF0Y2ggPT09IHRydWUgPyBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19saXN0c19fW1wiZ1wiIC8qIGhlYWQgKi9dKShhc2NlbnQpIDogZXhwck1hdGNoXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAgKiBGb3Igd2hlbiBhIHRva2VuIGhhcyBiZWVuIGZvdW5kIGluIHRoZSBKU09OUGF0aCBpbnB1dC5cbiAgICAqIENvbXBpbGVzIHRoZSBwYXJzZXIgZm9yIHRoYXQgdG9rZW4gYW5kIHJldHVybnMgaW4gY29tYmluYXRpb24gd2l0aCB0aGVcbiAgICAqIHBhcnNlciBhbHJlYWR5IGdlbmVyYXRlZC5cbiAgICAqXG4gICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBleHBycyAgYSBsaXN0IG9mIHRoZSBjbGF1c2UgZXZhbHVhdG9yIGdlbmVyYXRvcnMgZm9yXG4gICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHRva2VuIHRoYXQgd2FzIGZvdW5kXG4gICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwYXJzZXJHZW5lcmF0ZWRTb0ZhciB0aGUgcGFyc2VyIGFscmVhZHkgZm91bmRcbiAgICAqIEBwYXJhbSB7QXJyYXl9IGRldGVjdGlvbiB0aGUgbWF0Y2ggZ2l2ZW4gYnkgdGhlIHJlZ2V4IGVuZ2luZSB3aGVuXG4gICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGZlYXR1cmUgd2FzIGZvdW5kXG4gICAgKi9cbiAgZnVuY3Rpb24gZXhwcmVzc2lvbnNSZWFkZXIgKGV4cHJzLCBwYXJzZXJHZW5lcmF0ZWRTb0ZhciwgZGV0ZWN0aW9uKSB7XG4gICAgLy8gaWYgZXhwcnMgaXMgemVyby1sZW5ndGggZm9sZFIgd2lsbCBwYXNzIGJhY2sgdGhlXG4gICAgLy8gcGFyc2VyR2VuZXJhdGVkU29GYXIgYXMtaXMgc28gd2UgZG9uJ3QgbmVlZCB0byB0cmVhdFxuICAgIC8vIHRoaXMgYXMgYSBzcGVjaWFsIGNhc2VcblxuICAgIHJldHVybiBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19saXN0c19fW1wiZlwiIC8qIGZvbGRSICovXSkoXG4gICAgICBmdW5jdGlvbiAocGFyc2VyR2VuZXJhdGVkU29GYXIsIGV4cHIpIHtcbiAgICAgICAgcmV0dXJuIGV4cHIocGFyc2VyR2VuZXJhdGVkU29GYXIsIGRldGVjdGlvbilcbiAgICAgIH0sXG4gICAgICBwYXJzZXJHZW5lcmF0ZWRTb0ZhcixcbiAgICAgIGV4cHJzXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAgKiAgSWYganNvblBhdGggbWF0Y2hlcyB0aGUgZ2l2ZW4gZGV0ZWN0b3IgZnVuY3Rpb24sIGNyZWF0ZXMgYSBmdW5jdGlvbiB3aGljaFxuICAgICogIGV2YWx1YXRlcyBhZ2FpbnN0IGV2ZXJ5IGNsYXVzZSBpbiB0aGUgY2xhdXNlRXZhbHVhdG9yR2VuZXJhdG9ycy4gVGhlXG4gICAgKiAgY3JlYXRlZCBmdW5jdGlvbiBpcyBwcm9wYWdhdGVkIHRvIHRoZSBvblN1Y2Nlc3MgZnVuY3Rpb24sIGFsb25nIHdpdGhcbiAgICAqICB0aGUgcmVtYWluaW5nIHVucGFyc2VkIEpTT05QYXRoIHN1YnN0cmluZy5cbiAgICAqXG4gICAgKiAgVGhlIGludGVuZGVkIHVzZSBpcyB0byBjcmVhdGUgYSBjbGF1c2VNYXRjaGVyIGJ5IGZpbGxpbmcgaW5cbiAgICAqICB0aGUgZmlyc3QgdHdvIGFyZ3VtZW50cywgdGh1cyBwcm92aWRpbmcgYSBmdW5jdGlvbiB0aGF0IGtub3dzXG4gICAgKiAgc29tZSBzeW50YXggdG8gbWF0Y2ggYW5kIHdoYXQga2luZCBvZiBnZW5lcmF0b3IgdG8gY3JlYXRlIGlmIGl0XG4gICAgKiAgZmluZHMgaXQuIFRoZSBwYXJhbWV0ZXIgbGlzdCBvbmNlIGNvbXBsZXRlZCBpczpcbiAgICAqXG4gICAgKiAgICAoanNvblBhdGgsIHBhcnNlckdlbmVyYXRlZFNvRmFyLCBvblN1Y2Nlc3MpXG4gICAgKlxuICAgICogIG9uU3VjY2VzcyBtYXkgYmUgY29tcGlsZUpzb25QYXRoVG9GdW5jdGlvbiwgdG8gcmVjdXJzaXZlbHkgY29udGludWVcbiAgICAqICBwYXJzaW5nIGFmdGVyIGZpbmRpbmcgYSBtYXRjaCBvciByZXR1cm5Gb3VuZFBhcnNlciB0byBzdG9wIGhlcmUuXG4gICAgKi9cbiAgZnVuY3Rpb24gZ2VuZXJhdGVDbGF1c2VSZWFkZXJJZlRva2VuRm91bmQgKFxuXG4gICAgdG9rZW5EZXRlY3RvciwgY2xhdXNlRXZhbHVhdG9yR2VuZXJhdG9ycyxcblxuICAgIGpzb25QYXRoLCBwYXJzZXJHZW5lcmF0ZWRTb0Zhciwgb25TdWNjZXNzKSB7XG4gICAgdmFyIGRldGVjdGVkID0gdG9rZW5EZXRlY3Rvcihqc29uUGF0aClcblxuICAgIGlmIChkZXRlY3RlZCkge1xuICAgICAgdmFyIGNvbXBpbGVkUGFyc2VyID0gZXhwcmVzc2lvbnNSZWFkZXIoXG4gICAgICAgIGNsYXVzZUV2YWx1YXRvckdlbmVyYXRvcnMsXG4gICAgICAgIHBhcnNlckdlbmVyYXRlZFNvRmFyLFxuICAgICAgICBkZXRlY3RlZFxuICAgICAgKVxuXG4gICAgICB2YXIgcmVtYWluaW5nVW5wYXJzZWRKc29uUGF0aCA9IGpzb25QYXRoLnN1YnN0cihPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX191dGlsX19bXCJlXCIgLyogbGVuICovXSkoZGV0ZWN0ZWRbMF0pKVxuXG4gICAgICByZXR1cm4gb25TdWNjZXNzKHJlbWFpbmluZ1VucGFyc2VkSnNvblBhdGgsIGNvbXBpbGVkUGFyc2VyKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgICogUGFydGlhbGx5IGNvbXBsZXRlcyBnZW5lcmF0ZUNsYXVzZVJlYWRlcklmVG9rZW5Gb3VuZCBhYm92ZS5cbiAgICAqL1xuICBmdW5jdGlvbiBjbGF1c2VNYXRjaGVyICh0b2tlbkRldGVjdG9yLCBleHBycykge1xuICAgIHJldHVybiBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mdW5jdGlvbmFsX19bXCJqXCIgLyogcGFydGlhbENvbXBsZXRlICovXSkoXG4gICAgICBnZW5lcmF0ZUNsYXVzZVJlYWRlcklmVG9rZW5Gb3VuZCxcbiAgICAgIHRva2VuRGV0ZWN0b3IsXG4gICAgICBleHByc1xuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgICogY2xhdXNlRm9ySnNvblBhdGggaXMgYSBmdW5jdGlvbiB3aGljaCBhdHRlbXB0cyB0byBtYXRjaCBhZ2FpbnN0XG4gICAgKiBzZXZlcmFsIGNsYXVzZSBtYXRjaGVycyBpbiBvcmRlciB1bnRpbCBvbmUgbWF0Y2hlcy4gSWYgbm9uIG1hdGNoIHRoZVxuICAgICoganNvblBhdGggZXhwcmVzc2lvbiBpcyBpbnZhbGlkIGFuZCBhbiBlcnJvciBpcyB0aHJvd24uXG4gICAgKlxuICAgICogVGhlIHBhcmFtZXRlciBsaXN0IGlzIHRoZSBzYW1lIGFzIGEgc2luZ2xlIGNsYXVzZU1hdGNoZXI6XG4gICAgKlxuICAgICogICAgKGpzb25QYXRoLCBwYXJzZXJHZW5lcmF0ZWRTb0Zhciwgb25TdWNjZXNzKVxuICAgICovXG4gIHZhciBjbGF1c2VGb3JKc29uUGF0aCA9IE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2Z1bmN0aW9uYWxfX1tcImhcIiAvKiBsYXp5VW5pb24gKi9dKShcblxuICAgIGNsYXVzZU1hdGNoZXIocGF0aE5vZGVTeW50YXgsIE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2xpc3RzX19bXCJoXCIgLyogbGlzdCAqL10pKGNhcHR1cmUsXG4gICAgICBkdWNrVHlwZUNsYXVzZSxcbiAgICAgIG5hbWVDbGF1c2UsXG4gICAgICBza2lwMSkpXG5cbiAgICAsIGNsYXVzZU1hdGNoZXIoZG91YmxlRG90U3ludGF4LCBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19saXN0c19fW1wiaFwiIC8qIGxpc3QgKi9dKShza2lwTWFueSkpXG5cbiAgICAvLyBkb3QgaXMgYSBzZXBhcmF0b3Igb25seSAobGlrZSB3aGl0ZXNwYWNlIGluIG90aGVyIGxhbmd1YWdlcykgYnV0XG4gICAgLy8gcmF0aGVyIHRoYW4gbWFrZSBpdCBhIHNwZWNpYWwgY2FzZSwgdXNlIGFuIGVtcHR5IGxpc3Qgb2ZcbiAgICAvLyBleHByZXNzaW9ucyB3aGVuIHRoaXMgdG9rZW4gaXMgZm91bmRcbiAgICAsIGNsYXVzZU1hdGNoZXIoZG90U3ludGF4LCBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19saXN0c19fW1wiaFwiIC8qIGxpc3QgKi9dKSgpKVxuXG4gICAgLCBjbGF1c2VNYXRjaGVyKGJhbmdTeW50YXgsIE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2xpc3RzX19bXCJoXCIgLyogbGlzdCAqL10pKGNhcHR1cmUsXG4gICAgICByb290RXhwcikpXG5cbiAgICAsIGNsYXVzZU1hdGNoZXIoZW1wdHlTeW50YXgsIE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2xpc3RzX19bXCJoXCIgLyogbGlzdCAqL10pKHN0YXRlbWVudEV4cHIpKVxuXG4gICAgLCBmdW5jdGlvbiAoanNvblBhdGgpIHtcbiAgICAgIHRocm93IEVycm9yKCdcIicgKyBqc29uUGF0aCArICdcIiBjb3VsZCBub3QgYmUgdG9rZW5pc2VkJylcbiAgICB9XG4gIClcblxuICAvKipcbiAgICAqIE9uZSBvZiB0d28gcG9zc2libGUgdmFsdWVzIGZvciB0aGUgb25TdWNjZXNzIGFyZ3VtZW50IG9mXG4gICAgKiBnZW5lcmF0ZUNsYXVzZVJlYWRlcklmVG9rZW5Gb3VuZC5cbiAgICAqXG4gICAgKiBXaGVuIHRoaXMgZnVuY3Rpb24gaXMgdXNlZCwgZ2VuZXJhdGVDbGF1c2VSZWFkZXJJZlRva2VuRm91bmQgc2ltcGx5XG4gICAgKiByZXR1cm5zIHRoZSBjb21waWxlZFBhcnNlciB0aGF0IGl0IG1hZGUsIHJlZ2FyZGxlc3Mgb2YgaWYgdGhlcmUgaXNcbiAgICAqIGFueSByZW1haW5pbmcganNvblBhdGggdG8gYmUgY29tcGlsZWQuXG4gICAgKi9cbiAgZnVuY3Rpb24gcmV0dXJuRm91bmRQYXJzZXIgKF9yZW1haW5pbmdKc29uUGF0aCwgY29tcGlsZWRQYXJzZXIpIHtcbiAgICByZXR1cm4gY29tcGlsZWRQYXJzZXJcbiAgfVxuXG4gIC8qKlxuICAgICogUmVjdXJzaXZlbHkgY29tcGlsZSBhIEpTT05QYXRoIGV4cHJlc3Npb24uXG4gICAgKlxuICAgICogVGhpcyBmdW5jdGlvbiBzZXJ2ZXMgYXMgb25lIG9mIHR3byBwb3NzaWJsZSB2YWx1ZXMgZm9yIHRoZSBvblN1Y2Nlc3NcbiAgICAqIGFyZ3VtZW50IG9mIGdlbmVyYXRlQ2xhdXNlUmVhZGVySWZUb2tlbkZvdW5kLCBtZWFuaW5nIGNvbnRpbnVlIHRvXG4gICAgKiByZWN1cnNpdmVseSBjb21waWxlLiBPdGhlcndpc2UsIHJldHVybkZvdW5kUGFyc2VyIGlzIGdpdmVuIGFuZFxuICAgICogY29tcGlsYXRpb24gdGVybWluYXRlcy5cbiAgICAqL1xuICBmdW5jdGlvbiBjb21waWxlSnNvblBhdGhUb0Z1bmN0aW9uICh1bmNvbXBpbGVkSnNvblBhdGgsXG4gICAgcGFyc2VyR2VuZXJhdGVkU29GYXIpIHtcbiAgICAvKipcbiAgICAgICAqIE9uIGZpbmRpbmcgYSBtYXRjaCwgaWYgdGhlcmUgaXMgcmVtYWluaW5nIHRleHQgdG8gYmUgY29tcGlsZWRcbiAgICAgICAqIHdlIHdhbnQgdG8gZWl0aGVyIGNvbnRpbnVlIHBhcnNpbmcgdXNpbmcgYSByZWN1cnNpdmUgY2FsbCB0b1xuICAgICAgICogY29tcGlsZUpzb25QYXRoVG9GdW5jdGlvbi4gT3RoZXJ3aXNlLCB3ZSB3YW50IHRvIHN0b3AgYW5kIHJldHVyblxuICAgICAgICogdGhlIHBhcnNlciB0aGF0IHdlIGhhdmUgZm91bmQgc28gZmFyLlxuICAgICAgICovXG4gICAgdmFyIG9uRmluZCA9IHVuY29tcGlsZWRKc29uUGF0aFxuICAgICAgPyBjb21waWxlSnNvblBhdGhUb0Z1bmN0aW9uXG4gICAgICA6IHJldHVybkZvdW5kUGFyc2VyXG5cbiAgICByZXR1cm4gY2xhdXNlRm9ySnNvblBhdGgoXG4gICAgICB1bmNvbXBpbGVkSnNvblBhdGgsXG4gICAgICBwYXJzZXJHZW5lcmF0ZWRTb0ZhcixcbiAgICAgIG9uRmluZFxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgICogVGhpcyBpcyB0aGUgZnVuY3Rpb24gdGhhdCB3ZSBleHBvc2UgdG8gdGhlIHJlc3Qgb2YgdGhlIGxpYnJhcnkuXG4gICAgKi9cbiAgcmV0dXJuIGZ1bmN0aW9uIChqc29uUGF0aCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBLaWNrIG9mZiB0aGUgcmVjdXJzaXZlIHBhcnNpbmcgb2YgdGhlIGpzb25QYXRoXG4gICAgICByZXR1cm4gY29tcGlsZUpzb25QYXRoVG9GdW5jdGlvbihqc29uUGF0aCwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mdW5jdGlvbmFsX19bXCJhXCIgLyogYWx3YXlzICovXSlcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBFcnJvcignQ291bGQgbm90IGNvbXBpbGUgXCInICsganNvblBhdGggK1xuICAgICAgICAnXCIgYmVjYXVzZSAnICsgZS5tZXNzYWdlXG4gICAgICApXG4gICAgfVxuICB9XG59KVxuXG5cblxuXG4vKioqLyB9KSxcbi8qIDE1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBqc29uUGF0aFN5bnRheDsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mdW5jdGlvbmFsX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cbnZhciBqc29uUGF0aFN5bnRheCA9IChmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAqIEV4cG9ydCBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhcyBhIHNpbXBsZSBmdW5jdGlvbiBieSBleHBvc2luZyBqdXN0XG4gICogdGhlIFJlZ2V4I2V4ZWMuIFRoaXMgYWxsb3dzIHJlZ2V4IHRlc3RzIHRvIGJlIHVzZWQgdW5kZXIgdGhlIHNhbWVcbiAgKiBpbnRlcmZhY2UgYXMgZGlmZmVyZW50bHkgaW1wbGVtZW50ZWQgdGVzdHMsIG9yIGZvciBhIHVzZXIgb2YgdGhlXG4gICogdGVzdHMgdG8gbm90IGNvbmNlcm4gdGhlbXNlbHZlcyB3aXRoIHRoZWlyIGltcGxlbWVudGF0aW9uIGFzIHJlZ3VsYXJcbiAgKiBleHByZXNzaW9ucy5cbiAgKlxuICAqIFRoaXMgY291bGQgYWxzbyBiZSBleHByZXNzZWQgcG9pbnQtZnJlZSBhczpcbiAgKiAgIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmJpbmQoUmVnRXhwLnByb3RvdHlwZS5leGVjKSxcbiAgKlxuICAqIEJ1dCB0aGF0J3MgZmFyIHRvbyBjb25mdXNpbmchIChhbmQgbm90IGV2ZW4gc21hbGxlciBvbmNlIG1pbmlmaWVkXG4gICogYW5kIGd6aXBwZWQpXG4gICovXG4gIHZhciByZWdleERlc2NyaXB0b3IgPSBmdW5jdGlvbiByZWdleERlc2NyaXB0b3IgKHJlZ2V4KSB7XG4gICAgcmV0dXJuIHJlZ2V4LmV4ZWMuYmluZChyZWdleClcbiAgfVxuXG4gIC8qKlxuICAqIEpvaW4gc2V2ZXJhbCByZWd1bGFyIGV4cHJlc3Npb25zIGFuZCBleHByZXNzIGFzIGEgZnVuY3Rpb24uXG4gICogVGhpcyBhbGxvd3MgdGhlIHRva2VuIHBhdHRlcm5zIHRvIHJldXNlIGNvbXBvbmVudCByZWd1bGFyIGV4cHJlc3Npb25zXG4gICogaW5zdGVhZCBvZiBiZWluZyBleHByZXNzZWQgaW4gZnVsbCB1c2luZyBodWdlIGFuZCBjb25mdXNpbmcgcmVndWxhclxuICAqIGV4cHJlc3Npb25zLlxuICAqL1xuICB2YXIganNvblBhdGhDbGF1c2UgPSBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mdW5jdGlvbmFsX19bXCJrXCIgLyogdmFyQXJncyAqL10pKGZ1bmN0aW9uIChjb21wb25lbnRSZWdleGVzKSB7XG4gICAgLy8gVGhlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYWxsIHN0YXJ0IHdpdGggXiBiZWNhdXNlIHdlXG4gICAgLy8gb25seSB3YW50IHRvIGZpbmQgbWF0Y2hlcyBhdCB0aGUgc3RhcnQgb2YgdGhlXG4gICAgLy8gSlNPTlBhdGggZnJhZ21lbnQgd2UgYXJlIGluc3BlY3RpbmdcbiAgICBjb21wb25lbnRSZWdleGVzLnVuc2hpZnQoL14vKVxuXG4gICAgcmV0dXJuIHJlZ2V4RGVzY3JpcHRvcihcbiAgICAgIFJlZ0V4cChcbiAgICAgICAgY29tcG9uZW50UmVnZXhlcy5tYXAoT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZnVuY3Rpb25hbF9fW1wiY1wiIC8qIGF0dHIgKi9dKSgnc291cmNlJykpLmpvaW4oJycpXG4gICAgICApXG4gICAgKVxuICB9KVxuXG4gIHZhciBwb3NzaWJseUNhcHR1cmluZyA9IC8oXFwkPykvXG4gIHZhciBuYW1lZE5vZGUgPSAvKFtcXHctX10rfFxcKikvXG4gIHZhciBuYW1lUGxhY2Vob2xkZXIgPSAvKCkvXG4gIHZhciBub2RlSW5BcnJheU5vdGF0aW9uID0gL1xcW1wiKFteXCJdKylcIlxcXS9cbiAgdmFyIG51bWJlcmVkTm9kZUluQXJyYXlOb3RhdGlvbiA9IC9cXFsoXFxkK3xcXCopXFxdL1xuICB2YXIgZmllbGRMaXN0ID0gL3soW1xcdyBdKj8pfS9cbiAgdmFyIG9wdGlvbmFsRmllbGRMaXN0ID0gLyg/OnsoW1xcdyBdKj8pfSk/L1xuXG4gIC8vICAgZm9vIG9yICpcbiAgdmFyIGpzb25QYXRoTmFtZWROb2RlSW5PYmplY3ROb3RhdGlvbiA9IGpzb25QYXRoQ2xhdXNlKFxuICAgIHBvc3NpYmx5Q2FwdHVyaW5nLFxuICAgIG5hbWVkTm9kZSxcbiAgICBvcHRpb25hbEZpZWxkTGlzdFxuICApXG5cbiAgLy8gICBbXCJmb29cIl1cbiAgdmFyIGpzb25QYXRoTmFtZWROb2RlSW5BcnJheU5vdGF0aW9uID0ganNvblBhdGhDbGF1c2UoXG4gICAgcG9zc2libHlDYXB0dXJpbmcsXG4gICAgbm9kZUluQXJyYXlOb3RhdGlvbixcbiAgICBvcHRpb25hbEZpZWxkTGlzdFxuICApXG5cbiAgLy8gICBbMl0gb3IgWypdXG4gIHZhciBqc29uUGF0aE51bWJlcmVkTm9kZUluQXJyYXlOb3RhdGlvbiA9IGpzb25QYXRoQ2xhdXNlKFxuICAgIHBvc3NpYmx5Q2FwdHVyaW5nLFxuICAgIG51bWJlcmVkTm9kZUluQXJyYXlOb3RhdGlvbixcbiAgICBvcHRpb25hbEZpZWxkTGlzdFxuICApXG5cbiAgLy8gICB7YSBiIGN9XG4gIHZhciBqc29uUGF0aFB1cmVEdWNrVHlwaW5nID0ganNvblBhdGhDbGF1c2UoXG4gICAgcG9zc2libHlDYXB0dXJpbmcsXG4gICAgbmFtZVBsYWNlaG9sZGVyLFxuICAgIGZpZWxkTGlzdFxuICApXG5cbiAgLy8gICAuLlxuICB2YXIganNvblBhdGhEb3VibGVEb3QgPSBqc29uUGF0aENsYXVzZSgvXFwuXFwuLylcblxuICAvLyAgIC5cbiAgdmFyIGpzb25QYXRoRG90ID0ganNvblBhdGhDbGF1c2UoL1xcLi8pXG5cbiAgLy8gICAhXG4gIHZhciBqc29uUGF0aEJhbmcgPSBqc29uUGF0aENsYXVzZShcbiAgICBwb3NzaWJseUNhcHR1cmluZyxcbiAgICAvIS9cbiAgKVxuXG4gIC8vICAgbmFkYSFcbiAgdmFyIGVtcHR5U3RyaW5nID0ganNvblBhdGhDbGF1c2UoLyQvKVxuXG4gIC8qIFdlIGV4cG9ydCBvbmx5IGEgc2luZ2xlIGZ1bmN0aW9uLiBXaGVuIGNhbGxlZCwgdGhpcyBmdW5jdGlvbiBpbmplY3RzXG4gICAgICBpbnRvIGFub3RoZXIgZnVuY3Rpb24gdGhlIGRlc2NyaXB0b3JzIGZyb20gYWJvdmUuXG4gICAgKi9cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBmbihcbiAgICAgIE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2Z1bmN0aW9uYWxfX1tcImhcIiAvKiBsYXp5VW5pb24gKi9dKShcbiAgICAgICAganNvblBhdGhOYW1lZE5vZGVJbk9iamVjdE5vdGF0aW9uXG4gICAgICAgICwganNvblBhdGhOYW1lZE5vZGVJbkFycmF5Tm90YXRpb25cbiAgICAgICAgLCBqc29uUGF0aE51bWJlcmVkTm9kZUluQXJyYXlOb3RhdGlvblxuICAgICAgICAsIGpzb25QYXRoUHVyZUR1Y2tUeXBpbmdcbiAgICAgIClcbiAgICAgICwganNvblBhdGhEb3VibGVEb3RcbiAgICAgICwganNvblBhdGhEb3RcbiAgICAgICwganNvblBhdGhCYW5nXG4gICAgICAsIGVtcHR5U3RyaW5nXG4gICAgKVxuICB9XG59KCkpXG5cblxuXG5cbi8qKiovIH0pLFxuLyogMTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGluc3RhbmNlQXBpOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2V2ZW50c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2Z1bmN0aW9uYWxfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX191dGlsX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fcHVibGljQXBpX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG5cblxuXG5cbi8qKlxuICogVGhlIGluc3RhbmNlIEFQSSBpcyB0aGUgdGhpbmcgdGhhdCBpcyByZXR1cm5lZCB3aGVuIG9ib2UoKSBpcyBjYWxsZWQuXG4gKiBpdCBhbGxvd3M6XG4gKlxuICogICAgLSBsaXN0ZW5lcnMgZm9yIHZhcmlvdXMgZXZlbnRzIHRvIGJlIGFkZGVkIGFuZCByZW1vdmVkXG4gKiAgICAtIHRoZSBodHRwIHJlc3BvbnNlIGhlYWRlci9oZWFkZXJzIHRvIGJlIHJlYWRcbiAqL1xuZnVuY3Rpb24gaW5zdGFuY2VBcGkgKG9ib2VCdXMsIGNvbnRlbnRTb3VyY2UpIHtcbiAgdmFyIG9ib2VBcGlcbiAgdmFyIGZ1bGx5UXVhbGlmaWVkTmFtZVBhdHRlcm4gPSAvXihub2RlfHBhdGgpOi4vXG4gIHZhciByb290Tm9kZUZpbmlzaGVkRXZlbnQgPSBvYm9lQnVzKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZXZlbnRzX19bXCJoXCIgLyogUk9PVF9OT0RFX0ZPVU5EICovXSlcbiAgdmFyIGVtaXROb2RlRHJvcCA9IG9ib2VCdXMoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19ldmVudHNfX1tcImVcIiAvKiBOT0RFX0RST1AgKi9dKS5lbWl0XG4gIHZhciBlbWl0Tm9kZVN3YXAgPSBvYm9lQnVzKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZXZlbnRzX19bXCJnXCIgLyogTk9ERV9TV0FQICovXSkuZW1pdFxuXG4gIC8qKlxuICAgICAgICogQWRkIGFueSBraW5kIG9mIGxpc3RlbmVyIHRoYXQgdGhlIGluc3RhbmNlIGFwaSBleHBvc2VzXG4gICAgICAgKi9cbiAgdmFyIGFkZExpc3RlbmVyID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZnVuY3Rpb25hbF9fW1wia1wiIC8qIHZhckFyZ3MgKi9dKShmdW5jdGlvbiAoZXZlbnRJZCwgcGFyYW1ldGVycykge1xuICAgIGlmIChvYm9lQXBpW2V2ZW50SWRdKSB7XG4gICAgICAvLyBmb3IgZXZlbnRzIGFkZGVkIGFzIC5vbihldmVudCwgY2FsbGJhY2spLCBpZiB0aGVyZSBpcyBhXG4gICAgICAvLyAuZXZlbnQoKSBlcXVpdmFsZW50IHdpdGggc3BlY2lhbCBiZWhhdmlvdXIgLCBwYXNzIHRocm91Z2hcbiAgICAgIC8vIHRvIHRoYXQ6XG4gICAgICBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mdW5jdGlvbmFsX19bXCJiXCIgLyogYXBwbHkgKi9dKShwYXJhbWV0ZXJzLCBvYm9lQXBpW2V2ZW50SWRdKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB3ZSBoYXZlIGEgc3RhbmRhcmQgTm9kZS5qcyBFdmVudEVtaXR0ZXIgMi1hcmd1bWVudCBjYWxsLlxuICAgICAgLy8gVGhlIGZpcnN0IHBhcmFtZXRlciBpcyB0aGUgbGlzdGVuZXIuXG4gICAgICB2YXIgZXZlbnQgPSBvYm9lQnVzKGV2ZW50SWQpXG4gICAgICB2YXIgbGlzdGVuZXIgPSBwYXJhbWV0ZXJzWzBdXG5cbiAgICAgIGlmIChmdWxseVF1YWxpZmllZE5hbWVQYXR0ZXJuLnRlc3QoZXZlbnRJZCkpIHtcbiAgICAgICAgLy8gYWxsb3cgZnVsbHktcXVhbGlmaWVkIG5vZGUvcGF0aCBsaXN0ZW5lcnNcbiAgICAgICAgLy8gdG8gYmUgYWRkZWRcbiAgICAgICAgYWRkRm9yZ2V0dGFibGVDYWxsYmFjayhldmVudCwgd3JhcENhbGxiYWNrVG9Td2FwTm9kZUlmU29tZXRoaW5nUmV0dXJuZWQobGlzdGVuZXIpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdGhlIGV2ZW50IGhhcyBubyBzcGVjaWFsIGhhbmRsaW5nLCBwYXNzIHRocm91Z2hcbiAgICAgICAgLy8gZGlyZWN0bHkgb250byB0aGUgZXZlbnQgYnVzOlxuICAgICAgICBldmVudC5vbihsaXN0ZW5lcilcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2JvZUFwaSAvLyBjaGFpbmluZ1xuICB9KVxuXG4gIC8qKlxuICAgICAgICogUmVtb3ZlIGFueSBraW5kIG9mIGxpc3RlbmVyIHRoYXQgdGhlIGluc3RhbmNlIGFwaSBleHBvc2VzXG4gICAgICAgKi9cbiAgdmFyIHJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50SWQsIHAyLCBwMykge1xuICAgIGlmIChldmVudElkID09PSAnZG9uZScpIHtcbiAgICAgIHJvb3ROb2RlRmluaXNoZWRFdmVudC51bihwMilcbiAgICB9IGVsc2UgaWYgKGV2ZW50SWQgPT09ICdub2RlJyB8fCBldmVudElkID09PSAncGF0aCcpIHtcbiAgICAgIC8vIGFsbG93IHJlbW92YWwgb2Ygbm9kZSBhbmQgcGF0aFxuICAgICAgb2JvZUJ1cy51bihldmVudElkICsgJzonICsgcDIsIHAzKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB3ZSBoYXZlIGEgc3RhbmRhcmQgTm9kZS5qcyBFdmVudEVtaXR0ZXIgMi1hcmd1bWVudCBjYWxsLlxuICAgICAgLy8gVGhlIHNlY29uZCBwYXJhbWV0ZXIgaXMgdGhlIGxpc3RlbmVyLiBUaGlzIG1heSBiZSBhIGNhbGxcbiAgICAgIC8vIHRvIHJlbW92ZSBhIGZ1bGx5LXF1YWxpZmllZCBub2RlL3BhdGggbGlzdGVuZXIgYnV0IHJlcXVpcmVzXG4gICAgICAvLyBubyBzcGVjaWFsIGhhbmRsaW5nXG4gICAgICB2YXIgbGlzdGVuZXIgPSBwMlxuXG4gICAgICBvYm9lQnVzKGV2ZW50SWQpLnVuKGxpc3RlbmVyKVxuICAgIH1cblxuICAgIHJldHVybiBvYm9lQXBpIC8vIGNoYWluaW5nXG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgY2FsbGJhY2ssIHdyYXBwZWQgaW4gYSB0cnkvY2F0Y2ggc28gYXMgdG8gbm90IGJyZWFrIHRoZVxuICAgKiBleGVjdXRpb24gb2YgT2JvZSBpZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIChmYWlsIGV2ZW50cyBhcmVcbiAgICogZmlyZWQgaW5zdGVhZClcbiAgICpcbiAgICogVGhlIGNhbGxiYWNrIGlzIHVzZWQgYXMgdGhlIGxpc3RlbmVyIGlkIHNvIHRoYXQgaXQgY2FuIGxhdGVyIGJlXG4gICAqIHJlbW92ZWQgdXNpbmcgLnVuKGNhbGxiYWNrKVxuICAgKi9cbiAgZnVuY3Rpb24gYWRkUHJvdGVjdGVkQ2FsbGJhY2sgKGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICBvYm9lQnVzKGV2ZW50TmFtZSkub24ocHJvdGVjdGVkQ2FsbGJhY2soY2FsbGJhY2spLCBjYWxsYmFjaylcbiAgICByZXR1cm4gb2JvZUFwaSAvLyBjaGFpbmluZ1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIGNhbGxiYWNrIHdoZXJlLCBpZiAuZm9yZ2V0KCkgaXMgY2FsbGVkIGR1cmluZyB0aGUgY2FsbGJhY2snc1xuICAgKiBleGVjdXRpb24sIHRoZSBjYWxsYmFjayB3aWxsIGJlIGRlLXJlZ2lzdGVyZWRcbiAgICovXG4gIGZ1bmN0aW9uIGFkZEZvcmdldHRhYmxlQ2FsbGJhY2sgKGV2ZW50LCBjYWxsYmFjaywgbGlzdGVuZXJJZCkge1xuICAgIC8vIGxpc3RlbmVySWQgaXMgb3B0aW9uYWwgYW5kIGlmIG5vdCBnaXZlbiwgdGhlIG9yaWdpbmFsXG4gICAgLy8gY2FsbGJhY2sgd2lsbCBiZSB1c2VkXG4gICAgbGlzdGVuZXJJZCA9IGxpc3RlbmVySWQgfHwgY2FsbGJhY2tcblxuICAgIHZhciBzYWZlQ2FsbGJhY2sgPSBwcm90ZWN0ZWRDYWxsYmFjayhjYWxsYmFjaylcblxuICAgIGV2ZW50Lm9uKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBkaXNjYXJkID0gZmFsc2VcblxuICAgICAgb2JvZUFwaS5mb3JnZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRpc2NhcmQgPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2Z1bmN0aW9uYWxfX1tcImJcIiAvKiBhcHBseSAqL10pKGFyZ3VtZW50cywgc2FmZUNhbGxiYWNrKVxuXG4gICAgICBkZWxldGUgb2JvZUFwaS5mb3JnZXRcblxuICAgICAgaWYgKGRpc2NhcmQpIHtcbiAgICAgICAgZXZlbnQudW4obGlzdGVuZXJJZClcbiAgICAgIH1cbiAgICB9LCBsaXN0ZW5lcklkKVxuXG4gICAgcmV0dXJuIG9ib2VBcGkgLy8gY2hhaW5pbmdcbiAgfVxuXG4gIC8qKlxuICAgKiAgd3JhcCBhIGNhbGxiYWNrIHNvIHRoYXQgaWYgaXQgdGhyb3dzLCBPYm9lLmpzIGRvZXNuJ3QgY3Jhc2ggYnV0IGluc3RlYWRcbiAgICogIHRocm93IHRoZSBlcnJvciBpbiBhbm90aGVyIGV2ZW50IGxvb3BcbiAgICovXG4gIGZ1bmN0aW9uIHByb3RlY3RlZENhbGxiYWNrIChjYWxsYmFjaykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkob2JvZUFwaSwgYXJndW1lbnRzKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZS5tZXNzYWdlKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGZ1bGx5IHF1YWxpZmllZCBldmVudCBmb3Igd2hlbiBhIHBhdHRlcm4gbWF0Y2hlc1xuICAgKiBlaXRoZXIgYSBub2RlIG9yIGEgcGF0aFxuICAgKlxuICAgKiBAcGFyYW0gdHlwZSB7U3RyaW5nfSBlaXRoZXIgJ25vZGUnIG9yICdwYXRoJ1xuICAgKi9cbiAgZnVuY3Rpb24gZnVsbHlRdWFsaWZpZWRQYXR0ZXJuTWF0Y2hFdmVudCAodHlwZSwgcGF0dGVybikge1xuICAgIHJldHVybiBvYm9lQnVzKHR5cGUgKyAnOicgKyBwYXR0ZXJuKVxuICB9XG5cbiAgZnVuY3Rpb24gd3JhcENhbGxiYWNrVG9Td2FwTm9kZUlmU29tZXRoaW5nUmV0dXJuZWQgKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciByZXR1cm5WYWx1ZUZyb21DYWxsYmFjayA9IGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcblxuICAgICAgaWYgKE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX3V0aWxfX1tcImFcIiAvKiBkZWZpbmVkICovXSkocmV0dXJuVmFsdWVGcm9tQ2FsbGJhY2spKSB7XG4gICAgICAgIGlmIChyZXR1cm5WYWx1ZUZyb21DYWxsYmFjayA9PT0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19wdWJsaWNBcGlfX1tcImFcIiAvKiBvYm9lICovXS5kcm9wKSB7XG4gICAgICAgICAgZW1pdE5vZGVEcm9wKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbWl0Tm9kZVN3YXAocmV0dXJuVmFsdWVGcm9tQ2FsbGJhY2spXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGRTaW5nbGVOb2RlT3JQYXRoTGlzdGVuZXIgKGV2ZW50SWQsIHBhdHRlcm4sIGNhbGxiYWNrKSB7XG4gICAgdmFyIGVmZmVjdGl2ZUNhbGxiYWNrXG5cbiAgICBpZiAoZXZlbnRJZCA9PT0gJ25vZGUnKSB7XG4gICAgICBlZmZlY3RpdmVDYWxsYmFjayA9IHdyYXBDYWxsYmFja1RvU3dhcE5vZGVJZlNvbWV0aGluZ1JldHVybmVkKGNhbGxiYWNrKVxuICAgIH0gZWxzZSB7XG4gICAgICBlZmZlY3RpdmVDYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgfVxuXG4gICAgYWRkRm9yZ2V0dGFibGVDYWxsYmFjayhcbiAgICAgIGZ1bGx5UXVhbGlmaWVkUGF0dGVybk1hdGNoRXZlbnQoZXZlbnRJZCwgcGF0dGVybiksXG4gICAgICBlZmZlY3RpdmVDYWxsYmFjayxcbiAgICAgIGNhbGxiYWNrXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBzZXZlcmFsIGxpc3RlbmVycyBhdCBhIHRpbWUsIGZyb20gYSBtYXBcbiAgICovXG4gIGZ1bmN0aW9uIGFkZE11bHRpcGxlTm9kZU9yUGF0aExpc3RlbmVycyAoZXZlbnRJZCwgbGlzdGVuZXJNYXApIHtcbiAgICBmb3IgKHZhciBwYXR0ZXJuIGluIGxpc3RlbmVyTWFwKSB7XG4gICAgICBhZGRTaW5nbGVOb2RlT3JQYXRoTGlzdGVuZXIoZXZlbnRJZCwgcGF0dGVybiwgbGlzdGVuZXJNYXBbcGF0dGVybl0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIGltcGxlbWVudGF0aW9uIGJlaGluZCAub25QYXRoKCkgYW5kIC5vbk5vZGUoKVxuICAgKi9cbiAgZnVuY3Rpb24gYWRkTm9kZU9yUGF0aExpc3RlbmVyQXBpIChldmVudElkLCBqc29uUGF0aE9yTGlzdGVuZXJNYXAsIGNhbGxiYWNrKSB7XG4gICAgaWYgKE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX3V0aWxfX1tcImRcIiAvKiBpc1N0cmluZyAqL10pKGpzb25QYXRoT3JMaXN0ZW5lck1hcCkpIHtcbiAgICAgIGFkZFNpbmdsZU5vZGVPclBhdGhMaXN0ZW5lcihldmVudElkLCBqc29uUGF0aE9yTGlzdGVuZXJNYXAsIGNhbGxiYWNrKVxuICAgIH0gZWxzZSB7XG4gICAgICBhZGRNdWx0aXBsZU5vZGVPclBhdGhMaXN0ZW5lcnMoZXZlbnRJZCwganNvblBhdGhPckxpc3RlbmVyTWFwKVxuICAgIH1cblxuICAgIHJldHVybiBvYm9lQXBpIC8vIGNoYWluaW5nXG4gIH1cblxuICAvLyBzb21lIGludGVyZmFjZSBtZXRob2RzIGFyZSBvbmx5IGZpbGxlZCBpbiBhZnRlciB3ZSByZWNlaXZlXG4gIC8vIHZhbHVlcyBhbmQgYXJlIG5vb3BzIGJlZm9yZSB0aGF0OlxuICBvYm9lQnVzKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZXZlbnRzX19bXCJpXCIgLyogUk9PVF9QQVRIX0ZPVU5EICovXSkub24oZnVuY3Rpb24gKHJvb3ROb2RlKSB7XG4gICAgb2JvZUFwaS5yb290ID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZnVuY3Rpb25hbF9fW1wiZlwiIC8qIGZ1bmN0b3IgKi9dKShyb290Tm9kZSlcbiAgfSlcblxuICAvKipcbiAgICogV2hlbiBjb250ZW50IHN0YXJ0cyBtYWtlIHRoZSBoZWFkZXJzIHJlYWRhYmxlIHRocm91Z2ggdGhlXG4gICAqIGluc3RhbmNlIEFQSVxuICAgKi9cbiAgb2JvZUJ1cyhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2V2ZW50c19fW1wiY1wiIC8qIEhUVFBfU1RBUlQgKi9dKS5vbihmdW5jdGlvbiAoX3N0YXR1c0NvZGUsIGhlYWRlcnMpIHtcbiAgICBvYm9lQXBpLmhlYWRlciA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gbmFtZSA/IGhlYWRlcnNbbmFtZV1cbiAgICAgICAgOiBoZWFkZXJzXG4gICAgfVxuICB9KVxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYW5kIHJldHVybiB0aGUgcHVibGljIEFQSSBvZiB0aGUgT2JvZSBpbnN0YW5jZSB0byBiZVxuICAgKiByZXR1cm5lZCB0byB0aGUgY2FsbGluZyBhcHBsaWNhdGlvblxuICAgKi9cbiAgb2JvZUFwaSA9IHtcbiAgICBvbjogYWRkTGlzdGVuZXIsXG4gICAgYWRkTGlzdGVuZXI6IGFkZExpc3RlbmVyLFxuICAgIHJlbW92ZUxpc3RlbmVyOiByZW1vdmVMaXN0ZW5lcixcbiAgICBlbWl0OiBvYm9lQnVzLmVtaXQsXG5cbiAgICBub2RlOiBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mdW5jdGlvbmFsX19bXCJqXCIgLyogcGFydGlhbENvbXBsZXRlICovXSkoYWRkTm9kZU9yUGF0aExpc3RlbmVyQXBpLCAnbm9kZScpLFxuICAgIHBhdGg6IE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2Z1bmN0aW9uYWxfX1tcImpcIiAvKiBwYXJ0aWFsQ29tcGxldGUgKi9dKShhZGROb2RlT3JQYXRoTGlzdGVuZXJBcGksICdwYXRoJyksXG5cbiAgICBkb25lOiBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mdW5jdGlvbmFsX19bXCJqXCIgLyogcGFydGlhbENvbXBsZXRlICovXSkoYWRkRm9yZ2V0dGFibGVDYWxsYmFjaywgcm9vdE5vZGVGaW5pc2hlZEV2ZW50KSxcbiAgICBzdGFydDogT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZnVuY3Rpb25hbF9fW1wialwiIC8qIHBhcnRpYWxDb21wbGV0ZSAqL10pKGFkZFByb3RlY3RlZENhbGxiYWNrLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2V2ZW50c19fW1wiY1wiIC8qIEhUVFBfU1RBUlQgKi9dKSxcblxuICAgIC8vIGZhaWwgZG9lc24ndCB1c2UgcHJvdGVjdGVkQ2FsbGJhY2sgYmVjYXVzZVxuICAgIC8vIGNvdWxkIGxlYWQgdG8gbm9uLXRlcm1pbmF0aW5nIGxvb3BzXG4gICAgZmFpbDogb2JvZUJ1cyhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2V2ZW50c19fW1wiYlwiIC8qIEZBSUxfRVZFTlQgKi9dKS5vbixcblxuICAgIC8vIHB1YmxpYyBhcGkgY2FsbGluZyBhYm9ydCBmaXJlcyB0aGUgQUJPUlRJTkcgZXZlbnRcbiAgICBhYm9ydDogb2JvZUJ1cyhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2V2ZW50c19fW1wiYVwiIC8qIEFCT1JUSU5HICovXSkuZW1pdCxcblxuICAgIC8vIGluaXRpYWxseSByZXR1cm4gbm90aGluZyBmb3IgaGVhZGVyIGFuZCByb290XG4gICAgaGVhZGVyOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2Z1bmN0aW9uYWxfX1tcImlcIiAvKiBub29wICovXSxcbiAgICByb290OiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2Z1bmN0aW9uYWxfX1tcImlcIiAvKiBub29wICovXSxcblxuICAgIHNvdXJjZTogY29udGVudFNvdXJjZVxuICB9XG5cbiAgcmV0dXJuIG9ib2VBcGlcbn1cblxuXG5cblxuLyoqKi8gfSksXG4vKiAxNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gY2xhcmluZXQ7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZXZlbnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG5cbi8qXG4gICBUaGlzIGlzIGEgc2xpZ2h0bHkgaGFja2VkLXVwIGJyb3dzZXIgb25seSB2ZXJzaW9uIG9mIGNsYXJpbmV0XG5cbiAgICAgICogIHNvbWUgZmVhdHVyZXMgcmVtb3ZlZCB0byBoZWxwIGtlZXAgYnJvd3NlciBPYm9lIHVuZGVyXG4gICAgICAgICB0aGUgNWsgbWljcm8tbGlicmFyeSBsaW1pdFxuICAgICAgKiAgcGx1ZyBkaXJlY3RseSBpbnRvIGV2ZW50IGJ1c1xuXG4gICBGb3IgdGhlIG9yaWdpbmFsIGdvIGhlcmU6XG4gICAgICBodHRwczovL2dpdGh1Yi5jb20vZHNjYXBlL2NsYXJpbmV0XG5cbiAgIFdlIHJlY2VpdmUgdGhlIGV2ZW50czpcbiAgICAgIFNUUkVBTV9EQVRBXG4gICAgICBTVFJFQU1fRU5EXG5cbiAgIFdlIGVtaXQgdGhlIGV2ZW50czpcbiAgICAgIFNBWF9LRVlcbiAgICAgIFNBWF9WQUxVRV9PUEVOXG4gICAgICBTQVhfVkFMVUVfQ0xPU0VcbiAgICAgIEZBSUxfRVZFTlRcbiAqL1xuXG5mdW5jdGlvbiBjbGFyaW5ldCAoZXZlbnRCdXMpIHtcbiAgJ3VzZSBzdHJpY3QnXG5cbiAgLy8gc2hvcnRjdXQgc29tZSBldmVudHMgb24gdGhlIGJ1c1xuICB2YXIgZW1pdFNheEtleSA9IGV2ZW50QnVzKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZXZlbnRzX19bXCJqXCIgLyogU0FYX0tFWSAqL10pLmVtaXRcbiAgdmFyIGVtaXRWYWx1ZU9wZW4gPSBldmVudEJ1cyhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2V2ZW50c19fW1wibFwiIC8qIFNBWF9WQUxVRV9PUEVOICovXSkuZW1pdFxuICB2YXIgZW1pdFZhbHVlQ2xvc2UgPSBldmVudEJ1cyhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2V2ZW50c19fW1wia1wiIC8qIFNBWF9WQUxVRV9DTE9TRSAqL10pLmVtaXRcbiAgdmFyIGVtaXRGYWlsID0gZXZlbnRCdXMoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19ldmVudHNfX1tcImJcIiAvKiBGQUlMX0VWRU5UICovXSkuZW1pdFxuXG4gIHZhciBNQVhfQlVGRkVSX0xFTkdUSCA9IDY0ICogMTAyNFxuICB2YXIgc3RyaW5nVG9rZW5QYXR0ZXJuID0gL1tcXFxcXCJcXG5dL2dcbiAgdmFyIF9uID0gMFxuXG4gIC8vIHN0YXRlc1xuICB2YXIgQkVHSU4gPSBfbisrXG4gIHZhciBWQUxVRSA9IF9uKysgLy8gZ2VuZXJhbCBzdHVmZlxuICB2YXIgT1BFTl9PQkpFQ1QgPSBfbisrIC8vIHtcbiAgdmFyIENMT1NFX09CSkVDVCA9IF9uKysgLy8gfVxuICB2YXIgT1BFTl9BUlJBWSA9IF9uKysgLy8gW1xuICB2YXIgQ0xPU0VfQVJSQVkgPSBfbisrIC8vIF1cbiAgdmFyIFNUUklORyA9IF9uKysgLy8gXCJcIlxuICB2YXIgT1BFTl9LRVkgPSBfbisrIC8vICwgXCJhXCJcbiAgdmFyIENMT1NFX0tFWSA9IF9uKysgLy8gOlxuICB2YXIgVFJVRSA9IF9uKysgLy8gclxuICB2YXIgVFJVRTIgPSBfbisrIC8vIHVcbiAgdmFyIFRSVUUzID0gX24rKyAvLyBlXG4gIHZhciBGQUxTRSA9IF9uKysgLy8gYVxuICB2YXIgRkFMU0UyID0gX24rKyAvLyBsXG4gIHZhciBGQUxTRTMgPSBfbisrIC8vIHNcbiAgdmFyIEZBTFNFNCA9IF9uKysgLy8gZVxuICB2YXIgTlVMTCA9IF9uKysgLy8gdVxuICB2YXIgTlVMTDIgPSBfbisrIC8vIGxcbiAgdmFyIE5VTEwzID0gX24rKyAvLyBsXG4gIHZhciBOVU1CRVJfREVDSU1BTF9QT0lOVCA9IF9uKysgLy8gLlxuICB2YXIgTlVNQkVSX0RJR0lUID0gX24gLy8gWzAtOV1cblxuICAvLyBzZXR1cCBpbml0aWFsIHBhcnNlciB2YWx1ZXNcbiAgdmFyIGJ1ZmZlckNoZWNrUG9zaXRpb24gPSBNQVhfQlVGRkVSX0xFTkdUSFxuICB2YXIgbGF0ZXN0RXJyb3JcbiAgdmFyIGNcbiAgdmFyIHBcbiAgdmFyIHRleHROb2RlXG4gIHZhciBudW1iZXJOb2RlID0gJydcbiAgdmFyIHNsYXNoZWQgPSBmYWxzZVxuICB2YXIgY2xvc2VkID0gZmFsc2VcbiAgdmFyIHN0YXRlID0gQkVHSU5cbiAgdmFyIHN0YWNrID0gW11cbiAgdmFyIHVuaWNvZGVTID0gbnVsbFxuICB2YXIgdW5pY29kZUkgPSAwXG4gIHZhciBkZXB0aCA9IDBcbiAgdmFyIHBvc2l0aW9uID0gMFxuICB2YXIgY29sdW1uID0gMCAvLyBtb3N0bHkgZm9yIGVycm9yIHJlcG9ydGluZ1xuICB2YXIgbGluZSA9IDFcblxuICBmdW5jdGlvbiBjaGVja0J1ZmZlckxlbmd0aCAoKSB7XG4gICAgdmFyIG1heEFjdHVhbCA9IDBcblxuICAgIGlmICh0ZXh0Tm9kZSAhPT0gdW5kZWZpbmVkICYmIHRleHROb2RlLmxlbmd0aCA+IE1BWF9CVUZGRVJfTEVOR1RIKSB7XG4gICAgICBlbWl0RXJyb3IoJ01heCBidWZmZXIgbGVuZ3RoIGV4Y2VlZGVkOiB0ZXh0Tm9kZScpXG4gICAgICBtYXhBY3R1YWwgPSBNYXRoLm1heChtYXhBY3R1YWwsIHRleHROb2RlLmxlbmd0aClcbiAgICB9XG4gICAgaWYgKG51bWJlck5vZGUubGVuZ3RoID4gTUFYX0JVRkZFUl9MRU5HVEgpIHtcbiAgICAgIGVtaXRFcnJvcignTWF4IGJ1ZmZlciBsZW5ndGggZXhjZWVkZWQ6IG51bWJlck5vZGUnKVxuICAgICAgbWF4QWN0dWFsID0gTWF0aC5tYXgobWF4QWN0dWFsLCBudW1iZXJOb2RlLmxlbmd0aClcbiAgICB9XG5cbiAgICBidWZmZXJDaGVja1Bvc2l0aW9uID0gKE1BWF9CVUZGRVJfTEVOR1RIIC0gbWF4QWN0dWFsKSArXG4gICAgICBwb3NpdGlvblxuICB9XG5cbiAgZXZlbnRCdXMoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19ldmVudHNfX1tcIm1cIiAvKiBTVFJFQU1fREFUQSAqL10pLm9uKGhhbmRsZURhdGEpXG5cbiAgLyogQXQgdGhlIGVuZCBvZiB0aGUgaHR0cCBjb250ZW50IGNsb3NlIHRoZSBjbGFyaW5ldFxuICAgIFRoaXMgd2lsbCBwcm92aWRlIGFuIGVycm9yIGlmIHRoZSB0b3RhbCBjb250ZW50IHByb3ZpZGVkIHdhcyBub3RcbiAgICB2YWxpZCBqc29uLCBpZSBpZiBub3QgYWxsIGFycmF5cywgb2JqZWN0cyBhbmQgU3RyaW5ncyBjbG9zZWQgcHJvcGVybHkgKi9cbiAgZXZlbnRCdXMoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19ldmVudHNfX1tcIm5cIiAvKiBTVFJFQU1fRU5EICovXSkub24oaGFuZGxlU3RyZWFtRW5kKVxuXG4gIGZ1bmN0aW9uIGVtaXRFcnJvciAoZXJyb3JTdHJpbmcpIHtcbiAgICBpZiAodGV4dE5vZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZW1pdFZhbHVlT3Blbih0ZXh0Tm9kZSlcbiAgICAgIGVtaXRWYWx1ZUNsb3NlKClcbiAgICAgIHRleHROb2RlID0gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgbGF0ZXN0RXJyb3IgPSBFcnJvcihlcnJvclN0cmluZyArICdcXG5MbjogJyArIGxpbmUgK1xuICAgICAgJ1xcbkNvbDogJyArIGNvbHVtbiArXG4gICAgICAnXFxuQ2hyOiAnICsgYylcblxuICAgIGVtaXRGYWlsKE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2V2ZW50c19fW1wib1wiIC8qIGVycm9yUmVwb3J0ICovXSkodW5kZWZpbmVkLCB1bmRlZmluZWQsIGxhdGVzdEVycm9yKSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN0cmVhbUVuZCAoKSB7XG4gICAgaWYgKHN0YXRlID09PSBCRUdJTikge1xuICAgICAgLy8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSBzdHJlYW0gY2xvc2VzIHdpdGhvdXQgZXZlciByZWNlaXZpbmdcbiAgICAgIC8vIGFueSBpbnB1dC4gVGhpcyBpc24ndCBhbiBlcnJvciAtIHJlc3BvbnNlIGJvZGllcyBjYW4gYmUgYmxhbmssXG4gICAgICAvLyBwYXJ0aWN1bGFybHkgZm9yIDIwNCBodHRwIHJlc3BvbnNlc1xuXG4gICAgICAvLyBCZWNhdXNlIG9mIGhvdyBPYm9lIGlzIGN1cnJlbnRseSBpbXBsZW1lbnRlZCwgd2UgcGFyc2UgYVxuICAgICAgLy8gY29tcGxldGVseSBlbXB0eSBzdHJlYW0gYXMgY29udGFpbmluZyBhbiBlbXB0eSBvYmplY3QuXG4gICAgICAvLyBUaGlzIGlzIGJlY2F1c2UgT2JvZSdzIGRvbmUgZXZlbnQgaXMgb25seSBmaXJlZCB3aGVuIHRoZVxuICAgICAgLy8gcm9vdCBvYmplY3Qgb2YgdGhlIEpTT04gc3RyZWFtIGNsb3Nlcy5cblxuICAgICAgLy8gVGhpcyBzaG91bGQgYmUgZGVjb3VwbGVkIGFuZCBhdHRhY2hlZCBpbnN0ZWFkIHRvIHRoZSBpbnB1dCBzdHJlYW1cbiAgICAgIC8vIGZyb20gdGhlIGh0dHAgKG9yIHdoYXRldmVyKSByZXNvdXJjZSBlbmRpbmcuXG4gICAgICAvLyBJZiB0aGlzIGRlY291cGxpbmcgY291bGQgaGFwcGVuIHRoZSBTQVggcGFyc2VyIGNvdWxkIHNpbXBseSBlbWl0XG4gICAgICAvLyB6ZXJvIGV2ZW50cyBvbiBhIGNvbXBsZXRlbHkgZW1wdHkgaW5wdXQuXG4gICAgICBlbWl0VmFsdWVPcGVuKHt9KVxuICAgICAgZW1pdFZhbHVlQ2xvc2UoKVxuXG4gICAgICBjbG9zZWQgPSB0cnVlXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IFZBTFVFIHx8IGRlcHRoICE9PSAwKSB7IGVtaXRFcnJvcignVW5leHBlY3RlZCBlbmQnKSB9XG5cbiAgICBpZiAodGV4dE5vZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZW1pdFZhbHVlT3Blbih0ZXh0Tm9kZSlcbiAgICAgIGVtaXRWYWx1ZUNsb3NlKClcbiAgICAgIHRleHROb2RlID0gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgY2xvc2VkID0gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gd2hpdGVzcGFjZSAoYykge1xuICAgIHJldHVybiBjID09PSAnXFxyJyB8fCBjID09PSAnXFxuJyB8fCBjID09PSAnICcgfHwgYyA9PT0gJ1xcdCdcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZURhdGEgKGNodW5rKSB7XG4gICAgLy8gdGhpcyB1c2VkIHRvIHRocm93IHRoZSBlcnJvciBidXQgaW5zaWRlIE9ib2Ugd2Ugd2lsbCBoYXZlIGFscmVhZHlcbiAgICAvLyBnb3R0ZW4gdGhlIGVycm9yIHdoZW4gaXQgd2FzIGVtaXR0ZWQuIFRoZSBpbXBvcnRhbnQgdGhpbmcgaXMgdG9cbiAgICAvLyBub3QgY29udGludWUgd2l0aCB0aGUgcGFyc2UuXG4gICAgaWYgKGxhdGVzdEVycm9yKSB7IHJldHVybiB9XG5cbiAgICBpZiAoY2xvc2VkKSB7XG4gICAgICByZXR1cm4gZW1pdEVycm9yKCdDYW5ub3Qgd3JpdGUgYWZ0ZXIgY2xvc2UnKVxuICAgIH1cblxuICAgIHZhciBpID0gMFxuICAgIGMgPSBjaHVua1swXVxuXG4gICAgd2hpbGUgKGMpIHtcbiAgICAgIGlmIChpID4gMCkge1xuICAgICAgICBwID0gY1xuICAgICAgfVxuICAgICAgYyA9IGNodW5rW2krK11cbiAgICAgIGlmICghYykgYnJlYWtcblxuICAgICAgcG9zaXRpb24rK1xuICAgICAgaWYgKGMgPT09ICdcXG4nKSB7XG4gICAgICAgIGxpbmUrK1xuICAgICAgICBjb2x1bW4gPSAwXG4gICAgICB9IGVsc2UgY29sdW1uKytcbiAgICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgICAgY2FzZSBCRUdJTjpcbiAgICAgICAgICBpZiAoYyA9PT0gJ3snKSBzdGF0ZSA9IE9QRU5fT0JKRUNUXG4gICAgICAgICAgZWxzZSBpZiAoYyA9PT0gJ1snKSBzdGF0ZSA9IE9QRU5fQVJSQVlcbiAgICAgICAgICBlbHNlIGlmICghd2hpdGVzcGFjZShjKSkgeyByZXR1cm4gZW1pdEVycm9yKCdOb24td2hpdGVzcGFjZSBiZWZvcmUge1suJykgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBPUEVOX0tFWTpcbiAgICAgICAgY2FzZSBPUEVOX09CSkVDVDpcbiAgICAgICAgICBpZiAod2hpdGVzcGFjZShjKSkgY29udGludWVcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IE9QRU5fS0VZKSBzdGFjay5wdXNoKENMT1NFX0tFWSlcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjID09PSAnfScpIHtcbiAgICAgICAgICAgICAgZW1pdFZhbHVlT3Blbih7fSlcbiAgICAgICAgICAgICAgZW1pdFZhbHVlQ2xvc2UoKVxuICAgICAgICAgICAgICBzdGF0ZSA9IHN0YWNrLnBvcCgpIHx8IFZBTFVFXG4gICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICB9IGVsc2Ugc3RhY2sucHVzaChDTE9TRV9PQkpFQ1QpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjID09PSAnXCInKSB7IHN0YXRlID0gU1RSSU5HIH0gZWxzZSB7IHJldHVybiBlbWl0RXJyb3IoJ01hbGZvcm1lZCBvYmplY3Qga2V5IHNob3VsZCBzdGFydCB3aXRoIFwiICcpIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgQ0xPU0VfS0VZOlxuICAgICAgICBjYXNlIENMT1NFX09CSkVDVDpcbiAgICAgICAgICBpZiAod2hpdGVzcGFjZShjKSkgY29udGludWVcblxuICAgICAgICAgIGlmIChjID09PSAnOicpIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gQ0xPU0VfT0JKRUNUKSB7XG4gICAgICAgICAgICAgIHN0YWNrLnB1c2goQ0xPU0VfT0JKRUNUKVxuXG4gICAgICAgICAgICAgIGlmICh0ZXh0Tm9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gd2FzIHByZXZpb3VzbHkgKGluIHVwc3RyZWFtIENsYXJpbmV0KSBvbmUgZXZlbnRcbiAgICAgICAgICAgICAgICAvLyAgLSBvYmplY3Qgb3BlbiBjYW1lIHdpdGggdGhlIHRleHQgb2YgdGhlIGZpcnN0XG4gICAgICAgICAgICAgICAgZW1pdFZhbHVlT3Blbih7fSlcbiAgICAgICAgICAgICAgICBlbWl0U2F4S2V5KHRleHROb2RlKVxuICAgICAgICAgICAgICAgIHRleHROb2RlID0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZGVwdGgrK1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHRleHROb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBlbWl0U2F4S2V5KHRleHROb2RlKVxuICAgICAgICAgICAgICAgIHRleHROb2RlID0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXRlID0gVkFMVUVcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICd9Jykge1xuICAgICAgICAgICAgaWYgKHRleHROb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgZW1pdFZhbHVlT3Blbih0ZXh0Tm9kZSlcbiAgICAgICAgICAgICAgZW1pdFZhbHVlQ2xvc2UoKVxuICAgICAgICAgICAgICB0ZXh0Tm9kZSA9IHVuZGVmaW5lZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW1pdFZhbHVlQ2xvc2UoKVxuICAgICAgICAgICAgZGVwdGgtLVxuICAgICAgICAgICAgc3RhdGUgPSBzdGFjay5wb3AoKSB8fCBWQUxVRVxuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJywnKSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUgPT09IENMT1NFX09CSkVDVCkgeyBzdGFjay5wdXNoKENMT1NFX09CSkVDVCkgfVxuICAgICAgICAgICAgaWYgKHRleHROb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgZW1pdFZhbHVlT3Blbih0ZXh0Tm9kZSlcbiAgICAgICAgICAgICAgZW1pdFZhbHVlQ2xvc2UoKVxuICAgICAgICAgICAgICB0ZXh0Tm9kZSA9IHVuZGVmaW5lZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhdGUgPSBPUEVOX0tFWVxuICAgICAgICAgIH0gZWxzZSB7IHJldHVybiBlbWl0RXJyb3IoJ0JhZCBvYmplY3QnKSB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIE9QRU5fQVJSQVk6IC8vIGFmdGVyIGFuIGFycmF5IHRoZXJlIGFsd2F5cyBhIHZhbHVlXG4gICAgICAgIGNhc2UgVkFMVUU6XG4gICAgICAgICAgaWYgKHdoaXRlc3BhY2UoYykpIGNvbnRpbnVlXG4gICAgICAgICAgaWYgKHN0YXRlID09PSBPUEVOX0FSUkFZKSB7XG4gICAgICAgICAgICBlbWl0VmFsdWVPcGVuKFtdKVxuICAgICAgICAgICAgZGVwdGgrK1xuICAgICAgICAgICAgc3RhdGUgPSBWQUxVRVxuICAgICAgICAgICAgaWYgKGMgPT09ICddJykge1xuICAgICAgICAgICAgICBlbWl0VmFsdWVDbG9zZSgpXG4gICAgICAgICAgICAgIGRlcHRoLS1cbiAgICAgICAgICAgICAgc3RhdGUgPSBzdGFjay5wb3AoKSB8fCBWQUxVRVxuICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3RhY2sucHVzaChDTE9TRV9BUlJBWSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGMgPT09ICdcIicpIHN0YXRlID0gU1RSSU5HXG4gICAgICAgICAgZWxzZSBpZiAoYyA9PT0gJ3snKSBzdGF0ZSA9IE9QRU5fT0JKRUNUXG4gICAgICAgICAgZWxzZSBpZiAoYyA9PT0gJ1snKSBzdGF0ZSA9IE9QRU5fQVJSQVlcbiAgICAgICAgICBlbHNlIGlmIChjID09PSAndCcpIHN0YXRlID0gVFJVRVxuICAgICAgICAgIGVsc2UgaWYgKGMgPT09ICdmJykgc3RhdGUgPSBGQUxTRVxuICAgICAgICAgIGVsc2UgaWYgKGMgPT09ICduJykgc3RhdGUgPSBOVUxMXG4gICAgICAgICAgZWxzZSBpZiAoYyA9PT0gJy0nKSB7IC8vIGtlZXAgYW5kIGNvbnRpbnVlXG4gICAgICAgICAgICBudW1iZXJOb2RlICs9IGNcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICcwJykge1xuICAgICAgICAgICAgbnVtYmVyTm9kZSArPSBjXG4gICAgICAgICAgICBzdGF0ZSA9IE5VTUJFUl9ESUdJVFxuICAgICAgICAgIH0gZWxzZSBpZiAoJzEyMzQ1Njc4OScuaW5kZXhPZihjKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIG51bWJlck5vZGUgKz0gY1xuICAgICAgICAgICAgc3RhdGUgPSBOVU1CRVJfRElHSVRcbiAgICAgICAgICB9IGVsc2UgeyByZXR1cm4gZW1pdEVycm9yKCdCYWQgdmFsdWUnKSB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIENMT1NFX0FSUkFZOlxuICAgICAgICAgIGlmIChjID09PSAnLCcpIHtcbiAgICAgICAgICAgIHN0YWNrLnB1c2goQ0xPU0VfQVJSQVkpXG4gICAgICAgICAgICBpZiAodGV4dE5vZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBlbWl0VmFsdWVPcGVuKHRleHROb2RlKVxuICAgICAgICAgICAgICBlbWl0VmFsdWVDbG9zZSgpXG4gICAgICAgICAgICAgIHRleHROb2RlID0gdW5kZWZpbmVkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGF0ZSA9IFZBTFVFXG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAnXScpIHtcbiAgICAgICAgICAgIGlmICh0ZXh0Tm9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGVtaXRWYWx1ZU9wZW4odGV4dE5vZGUpXG4gICAgICAgICAgICAgIGVtaXRWYWx1ZUNsb3NlKClcbiAgICAgICAgICAgICAgdGV4dE5vZGUgPSB1bmRlZmluZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVtaXRWYWx1ZUNsb3NlKClcbiAgICAgICAgICAgIGRlcHRoLS1cbiAgICAgICAgICAgIHN0YXRlID0gc3RhY2sucG9wKCkgfHwgVkFMVUVcbiAgICAgICAgICB9IGVsc2UgaWYgKHdoaXRlc3BhY2UoYykpIHsgY29udGludWUgfSBlbHNlIHsgcmV0dXJuIGVtaXRFcnJvcignQmFkIGFycmF5JykgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTVFJJTkc6XG4gICAgICAgICAgaWYgKHRleHROb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRleHROb2RlID0gJydcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB0aGFua3MgdGhlamgsIHRoaXMgaXMgYW4gYWJvdXQgNTAlIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50LlxuICAgICAgICAgIHZhciBzdGFydGkgPSBpIC0gMVxuXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxhYmVsc1xuICAgICAgICAgIFNUUklOR19CSUdMT09QOiB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgLy8gemVybyBtZWFucyBcIm5vIHVuaWNvZGUgYWN0aXZlXCIuIDEtNCBtZWFuIFwicGFyc2Ugc29tZSBtb3JlXCIuIGVuZCBhZnRlciA0LlxuICAgICAgICAgICAgd2hpbGUgKHVuaWNvZGVJID4gMCkge1xuICAgICAgICAgICAgICB1bmljb2RlUyArPSBjXG4gICAgICAgICAgICAgIGMgPSBjaHVuay5jaGFyQXQoaSsrKVxuICAgICAgICAgICAgICBpZiAodW5pY29kZUkgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPIHRoaXMgbWlnaHQgYmUgc2xvdz8gd2VsbCwgcHJvYmFibHkgbm90IHVzZWQgdG9vIG9mdGVuIGFueXdheVxuICAgICAgICAgICAgICAgIHRleHROb2RlICs9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQodW5pY29kZVMsIDE2KSlcbiAgICAgICAgICAgICAgICB1bmljb2RlSSA9IDBcbiAgICAgICAgICAgICAgICBzdGFydGkgPSBpIC0gMVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHVuaWNvZGVJKytcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyB3ZSBjYW4ganVzdCBicmVhayBoZXJlOiBubyBzdHVmZiB3ZSBza2lwcGVkIHRoYXQgc3RpbGwgaGFzIHRvIGJlIHNsaWNlZCBvdXQgb3Igc29cbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxhYmVsc1xuICAgICAgICAgICAgICBpZiAoIWMpIGJyZWFrIFNUUklOR19CSUdMT09QXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYyA9PT0gJ1wiJyAmJiAhc2xhc2hlZCkge1xuICAgICAgICAgICAgICBzdGF0ZSA9IHN0YWNrLnBvcCgpIHx8IFZBTFVFXG4gICAgICAgICAgICAgIHRleHROb2RlICs9IGNodW5rLnN1YnN0cmluZyhzdGFydGksIGkgLSAxKVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMgPT09ICdcXFxcJyAmJiAhc2xhc2hlZCkge1xuICAgICAgICAgICAgICBzbGFzaGVkID0gdHJ1ZVxuICAgICAgICAgICAgICB0ZXh0Tm9kZSArPSBjaHVuay5zdWJzdHJpbmcoc3RhcnRpLCBpIC0gMSlcbiAgICAgICAgICAgICAgYyA9IGNodW5rLmNoYXJBdChpKyspXG4gICAgICAgICAgICAgIGlmICghYykgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzbGFzaGVkKSB7XG4gICAgICAgICAgICAgIHNsYXNoZWQgPSBmYWxzZVxuICAgICAgICAgICAgICBpZiAoYyA9PT0gJ24nKSB7IHRleHROb2RlICs9ICdcXG4nIH0gZWxzZSBpZiAoYyA9PT0gJ3InKSB7IHRleHROb2RlICs9ICdcXHInIH0gZWxzZSBpZiAoYyA9PT0gJ3QnKSB7IHRleHROb2RlICs9ICdcXHQnIH0gZWxzZSBpZiAoYyA9PT0gJ2YnKSB7IHRleHROb2RlICs9ICdcXGYnIH0gZWxzZSBpZiAoYyA9PT0gJ2InKSB7IHRleHROb2RlICs9ICdcXGInIH0gZWxzZSBpZiAoYyA9PT0gJ3UnKSB7XG4gICAgICAgICAgICAgICAgLy8gXFx1eHh4eC4gbWVoIVxuICAgICAgICAgICAgICAgIHVuaWNvZGVJID0gMVxuICAgICAgICAgICAgICAgIHVuaWNvZGVTID0gJydcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0ZXh0Tm9kZSArPSBjXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYyA9IGNodW5rLmNoYXJBdChpKyspXG4gICAgICAgICAgICAgIHN0YXJ0aSA9IGkgLSAxXG4gICAgICAgICAgICAgIGlmICghYykgYnJlYWtcbiAgICAgICAgICAgICAgZWxzZSBjb250aW51ZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdHJpbmdUb2tlblBhdHRlcm4ubGFzdEluZGV4ID0gaVxuICAgICAgICAgICAgdmFyIHJlUmVzdWx0ID0gc3RyaW5nVG9rZW5QYXR0ZXJuLmV4ZWMoY2h1bmspXG4gICAgICAgICAgICBpZiAoIXJlUmVzdWx0KSB7XG4gICAgICAgICAgICAgIGkgPSBjaHVuay5sZW5ndGggKyAxXG4gICAgICAgICAgICAgIHRleHROb2RlICs9IGNodW5rLnN1YnN0cmluZyhzdGFydGksIGkgLSAxKVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSA9IHJlUmVzdWx0LmluZGV4ICsgMVxuICAgICAgICAgICAgYyA9IGNodW5rLmNoYXJBdChyZVJlc3VsdC5pbmRleClcbiAgICAgICAgICAgIGlmICghYykge1xuICAgICAgICAgICAgICB0ZXh0Tm9kZSArPSBjaHVuay5zdWJzdHJpbmcoc3RhcnRpLCBpIC0gMSlcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFRSVUU6XG4gICAgICAgICAgaWYgKCFjKSBjb250aW51ZSAvLyBzdHJhbmdlIGJ1ZmZlcnNcbiAgICAgICAgICBpZiAoYyA9PT0gJ3InKSBzdGF0ZSA9IFRSVUUyXG4gICAgICAgICAgZWxzZSB7IHJldHVybiBlbWl0RXJyb3IoJ0ludmFsaWQgdHJ1ZSBzdGFydGVkIHdpdGggdCcgKyBjKSB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFRSVUUyOlxuICAgICAgICAgIGlmICghYykgY29udGludWVcbiAgICAgICAgICBpZiAoYyA9PT0gJ3UnKSBzdGF0ZSA9IFRSVUUzXG4gICAgICAgICAgZWxzZSB7IHJldHVybiBlbWl0RXJyb3IoJ0ludmFsaWQgdHJ1ZSBzdGFydGVkIHdpdGggdHInICsgYykgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBUUlVFMzpcbiAgICAgICAgICBpZiAoIWMpIGNvbnRpbnVlXG4gICAgICAgICAgaWYgKGMgPT09ICdlJykge1xuICAgICAgICAgICAgZW1pdFZhbHVlT3Blbih0cnVlKVxuICAgICAgICAgICAgZW1pdFZhbHVlQ2xvc2UoKVxuICAgICAgICAgICAgc3RhdGUgPSBzdGFjay5wb3AoKSB8fCBWQUxVRVxuICAgICAgICAgIH0gZWxzZSB7IHJldHVybiBlbWl0RXJyb3IoJ0ludmFsaWQgdHJ1ZSBzdGFydGVkIHdpdGggdHJ1JyArIGMpIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgRkFMU0U6XG4gICAgICAgICAgaWYgKCFjKSBjb250aW51ZVxuICAgICAgICAgIGlmIChjID09PSAnYScpIHN0YXRlID0gRkFMU0UyXG4gICAgICAgICAgZWxzZSB7IHJldHVybiBlbWl0RXJyb3IoJ0ludmFsaWQgZmFsc2Ugc3RhcnRlZCB3aXRoIGYnICsgYykgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBGQUxTRTI6XG4gICAgICAgICAgaWYgKCFjKSBjb250aW51ZVxuICAgICAgICAgIGlmIChjID09PSAnbCcpIHN0YXRlID0gRkFMU0UzXG4gICAgICAgICAgZWxzZSB7IHJldHVybiBlbWl0RXJyb3IoJ0ludmFsaWQgZmFsc2Ugc3RhcnRlZCB3aXRoIGZhJyArIGMpIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgRkFMU0UzOlxuICAgICAgICAgIGlmICghYykgY29udGludWVcbiAgICAgICAgICBpZiAoYyA9PT0gJ3MnKSBzdGF0ZSA9IEZBTFNFNFxuICAgICAgICAgIGVsc2UgeyByZXR1cm4gZW1pdEVycm9yKCdJbnZhbGlkIGZhbHNlIHN0YXJ0ZWQgd2l0aCBmYWwnICsgYykgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBGQUxTRTQ6XG4gICAgICAgICAgaWYgKCFjKSBjb250aW51ZVxuICAgICAgICAgIGlmIChjID09PSAnZScpIHtcbiAgICAgICAgICAgIGVtaXRWYWx1ZU9wZW4oZmFsc2UpXG4gICAgICAgICAgICBlbWl0VmFsdWVDbG9zZSgpXG4gICAgICAgICAgICBzdGF0ZSA9IHN0YWNrLnBvcCgpIHx8IFZBTFVFXG4gICAgICAgICAgfSBlbHNlIHsgcmV0dXJuIGVtaXRFcnJvcignSW52YWxpZCBmYWxzZSBzdGFydGVkIHdpdGggZmFscycgKyBjKSB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIE5VTEw6XG4gICAgICAgICAgaWYgKCFjKSBjb250aW51ZVxuICAgICAgICAgIGlmIChjID09PSAndScpIHN0YXRlID0gTlVMTDJcbiAgICAgICAgICBlbHNlIHsgcmV0dXJuIGVtaXRFcnJvcignSW52YWxpZCBudWxsIHN0YXJ0ZWQgd2l0aCBuJyArIGMpIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgTlVMTDI6XG4gICAgICAgICAgaWYgKCFjKSBjb250aW51ZVxuICAgICAgICAgIGlmIChjID09PSAnbCcpIHN0YXRlID0gTlVMTDNcbiAgICAgICAgICBlbHNlIHsgcmV0dXJuIGVtaXRFcnJvcignSW52YWxpZCBudWxsIHN0YXJ0ZWQgd2l0aCBudScgKyBjKSB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIE5VTEwzOlxuICAgICAgICAgIGlmICghYykgY29udGludWVcbiAgICAgICAgICBpZiAoYyA9PT0gJ2wnKSB7XG4gICAgICAgICAgICBlbWl0VmFsdWVPcGVuKG51bGwpXG4gICAgICAgICAgICBlbWl0VmFsdWVDbG9zZSgpXG4gICAgICAgICAgICBzdGF0ZSA9IHN0YWNrLnBvcCgpIHx8IFZBTFVFXG4gICAgICAgICAgfSBlbHNlIHsgcmV0dXJuIGVtaXRFcnJvcignSW52YWxpZCBudWxsIHN0YXJ0ZWQgd2l0aCBudWwnICsgYykgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBOVU1CRVJfREVDSU1BTF9QT0lOVDpcbiAgICAgICAgICBpZiAoYyA9PT0gJy4nKSB7XG4gICAgICAgICAgICBudW1iZXJOb2RlICs9IGNcbiAgICAgICAgICAgIHN0YXRlID0gTlVNQkVSX0RJR0lUXG4gICAgICAgICAgfSBlbHNlIHsgcmV0dXJuIGVtaXRFcnJvcignTGVhZGluZyB6ZXJvIG5vdCBmb2xsb3dlZCBieSAuJykgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBOVU1CRVJfRElHSVQ6XG4gICAgICAgICAgaWYgKCcwMTIzNDU2Nzg5Jy5pbmRleE9mKGMpICE9PSAtMSkgbnVtYmVyTm9kZSArPSBjXG4gICAgICAgICAgZWxzZSBpZiAoYyA9PT0gJy4nKSB7XG4gICAgICAgICAgICBpZiAobnVtYmVyTm9kZS5pbmRleE9mKCcuJykgIT09IC0xKSB7IHJldHVybiBlbWl0RXJyb3IoJ0ludmFsaWQgbnVtYmVyIGhhcyB0d28gZG90cycpIH1cbiAgICAgICAgICAgIG51bWJlck5vZGUgKz0gY1xuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJ2UnIHx8IGMgPT09ICdFJykge1xuICAgICAgICAgICAgaWYgKG51bWJlck5vZGUuaW5kZXhPZignZScpICE9PSAtMSB8fFxuICAgICAgICAgICAgICBudW1iZXJOb2RlLmluZGV4T2YoJ0UnKSAhPT0gLTEpIHsgcmV0dXJuIGVtaXRFcnJvcignSW52YWxpZCBudW1iZXIgaGFzIHR3byBleHBvbmVudGlhbCcpIH1cbiAgICAgICAgICAgIG51bWJlck5vZGUgKz0gY1xuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJysnIHx8IGMgPT09ICctJykge1xuICAgICAgICAgICAgaWYgKCEocCA9PT0gJ2UnIHx8IHAgPT09ICdFJykpIHsgcmV0dXJuIGVtaXRFcnJvcignSW52YWxpZCBzeW1ib2wgaW4gbnVtYmVyJykgfVxuICAgICAgICAgICAgbnVtYmVyTm9kZSArPSBjXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChudW1iZXJOb2RlKSB7XG4gICAgICAgICAgICAgIGVtaXRWYWx1ZU9wZW4ocGFyc2VGbG9hdChudW1iZXJOb2RlKSlcbiAgICAgICAgICAgICAgZW1pdFZhbHVlQ2xvc2UoKVxuICAgICAgICAgICAgICBudW1iZXJOb2RlID0gJydcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGktLSAvLyBnbyBiYWNrIG9uZVxuICAgICAgICAgICAgc3RhdGUgPSBzdGFjay5wb3AoKSB8fCBWQUxVRVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIGVtaXRFcnJvcignVW5rbm93biBzdGF0ZTogJyArIHN0YXRlKVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAocG9zaXRpb24gPj0gYnVmZmVyQ2hlY2tQb3NpdGlvbikgeyBjaGVja0J1ZmZlckxlbmd0aCgpIH1cbiAgfVxufVxuXG5cblxuXG4vKioqLyB9KSxcbi8qIDE4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBodHRwVHJhbnNwb3J0OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJiXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gc3RyZWFtaW5nSHR0cDsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19kZXRlY3RDcm9zc09yaWdpbl9icm93c2VyX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2V2ZW50c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX3V0aWxfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19wYXJzZVJlc3BvbnNlSGVhZGVyc19icm93c2VyX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2Z1bmN0aW9uYWxfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG5cblxuXG5mdW5jdGlvbiBodHRwVHJhbnNwb3J0ICgpIHtcbiAgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpXG59XG5cbi8qKlxuICogQSB3cmFwcGVyIGFyb3VuZCB0aGUgYnJvd3NlciBYbWxIdHRwUmVxdWVzdCBvYmplY3QgdGhhdCByYWlzZXMgYW5cbiAqIGV2ZW50IHdoZW5ldmVyIGEgbmV3IHBhcnQgb2YgdGhlIHJlc3BvbnNlIGlzIGF2YWlsYWJsZS5cbiAqXG4gKiBJbiBvbGRlciBicm93c2VycyBwcm9ncmVzc2l2ZSByZWFkaW5nIGlzIGltcG9zc2libGUgc28gYWxsIHRoZVxuICogY29udGVudCBpcyBnaXZlbiBpbiBhIHNpbmdsZSBjYWxsLiBGb3IgbmV3ZXIgb25lcyBzZXZlcmFsIGV2ZW50c1xuICogc2hvdWxkIGJlIHJhaXNlZCwgYWxsb3dpbmcgcHJvZ3Jlc3NpdmUgaW50ZXJwcmV0YXRpb24gb2YgdGhlIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9ib2VCdXMgYW4gZXZlbnQgYnVzIGxvY2FsIHRvIHRoaXMgT2JvZSBpbnN0YW5jZVxuICogQHBhcmFtIHtYTUxIdHRwUmVxdWVzdH0geGhyIHRoZSB4aHIgdG8gdXNlIGFzIHRoZSB0cmFuc3BvcnQuIFVuZGVyIG5vcm1hbFxuICogICAgICAgICAgb3BlcmF0aW9uLCB3aWxsIGhhdmUgYmVlbiBjcmVhdGVkIHVzaW5nIGh0dHBUcmFuc3BvcnQoKSBhYm92ZVxuICogICAgICAgICAgYnV0IGZvciB0ZXN0cyBhIHN0dWIgY2FuIGJlIHByb3ZpZGVkIGluc3RlYWQuXG4gKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kIG9uZSBvZiAnR0VUJyAnUE9TVCcgJ1BVVCcgJ1BBVENIJyAnREVMRVRFJ1xuICogQHBhcmFtIHtTdHJpbmd9IHVybCB0aGUgdXJsIHRvIG1ha2UgYSByZXF1ZXN0IHRvXG4gKiBAcGFyYW0ge1N0cmluZ3xOdWxsfSBkYXRhIHNvbWUgY29udGVudCB0byBiZSBzZW50IHdpdGggdGhlIHJlcXVlc3QuXG4gKiAgICAgICAgICAgICAgICAgICAgICBPbmx5IHZhbGlkIGlmIG1ldGhvZCBpcyBQT1NUIG9yIFBVVC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbaGVhZGVyc10gdGhlIGh0dHAgcmVxdWVzdCBoZWFkZXJzIHRvIHNlbmRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gd2l0aENyZWRlbnRpYWxzIHRoZSBYSFIgd2l0aENyZWRlbnRpYWxzIHByb3BlcnR5IHdpbGwgYmVcbiAqICAgIHNldCB0byB0aGlzIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHN0cmVhbWluZ0h0dHAgKG9ib2VCdXMsIHhociwgbWV0aG9kLCB1cmwsIGRhdGEsIGhlYWRlcnMsIHdpdGhDcmVkZW50aWFscykge1xuICAndXNlIHN0cmljdCdcblxuICB2YXIgZW1pdFN0cmVhbURhdGEgPSBvYm9lQnVzKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZXZlbnRzX19bXCJtXCIgLyogU1RSRUFNX0RBVEEgKi9dKS5lbWl0XG4gIHZhciBlbWl0RmFpbCA9IG9ib2VCdXMoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19ldmVudHNfX1tcImJcIiAvKiBGQUlMX0VWRU5UICovXSkuZW1pdFxuICB2YXIgbnVtYmVyT2ZDaGFyc0FscmVhZHlHaXZlblRvQ2FsbGJhY2sgPSAwXG4gIHZhciBzdGlsbFRvU2VuZFN0YXJ0RXZlbnQgPSB0cnVlXG5cbiAgLy8gV2hlbiBhbiBBQk9SVElORyBtZXNzYWdlIGlzIHB1dCBvbiB0aGUgZXZlbnQgYnVzIGFib3J0XG4gIC8vIHRoZSBhamF4IHJlcXVlc3RcbiAgb2JvZUJ1cyhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2V2ZW50c19fW1wiYVwiIC8qIEFCT1JUSU5HICovXSkub24oZnVuY3Rpb24gKCkge1xuICAgIC8vIGlmIHdlIGtlZXAgdGhlIG9ucmVhZHlzdGF0ZWNoYW5nZSB3aGlsZSBhYm9ydGluZyB0aGUgWEhSIGdpdmVzXG4gICAgLy8gYSBjYWxsYmFjayBsaWtlIGEgc3VjY2Vzc2Z1bCBjYWxsIHNvIGZpcnN0IHJlbW92ZSB0aGlzIGxpc3RlbmVyXG4gICAgLy8gYnkgYXNzaWduaW5nIG51bGw6XG4gICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGxcblxuICAgIHhoci5hYm9ydCgpXG4gIH0pXG5cbiAgLyoqXG4gICAgKiBIYW5kbGUgaW5wdXQgZnJvbSB0aGUgdW5kZXJseWluZyB4aHI6IGVpdGhlciBhIHN0YXRlIGNoYW5nZSxcbiAgICAqIHRoZSBwcm9ncmVzcyBldmVudCBvciB0aGUgcmVxdWVzdCBiZWluZyBjb21wbGV0ZS5cbiAgICAqL1xuICBmdW5jdGlvbiBoYW5kbGVQcm9ncmVzcyAoKSB7XG4gICAgaWYgKFN0cmluZyh4aHIuc3RhdHVzKVswXSA9PT0gJzInKSB7XG4gICAgICB2YXIgdGV4dFNvRmFyID0geGhyLnJlc3BvbnNlVGV4dFxuICAgICAgdmFyIG5ld1RleHQgPSAoJyAnICsgdGV4dFNvRmFyLnN1YnN0cihudW1iZXJPZkNoYXJzQWxyZWFkeUdpdmVuVG9DYWxsYmFjaykpLnN1YnN0cigxKVxuXG4gICAgICAvKiBSYWlzZSB0aGUgZXZlbnQgZm9yIG5ldyB0ZXh0LlxuXG4gICAgICAgT24gb2xkZXIgYnJvd3NlcnMsIHRoZSBuZXcgdGV4dCBpcyB0aGUgd2hvbGUgcmVzcG9uc2UuXG4gICAgICAgT24gbmV3ZXIvYmV0dGVyIG9uZXMsIHRoZSBmcmFnbWVudCBwYXJ0IHRoYXQgd2UgZ290IHNpbmNlXG4gICAgICAgbGFzdCBwcm9ncmVzcy4gKi9cblxuICAgICAgaWYgKG5ld1RleHQpIHtcbiAgICAgICAgZW1pdFN0cmVhbURhdGEobmV3VGV4dClcbiAgICAgIH1cblxuICAgICAgbnVtYmVyT2ZDaGFyc0FscmVhZHlHaXZlblRvQ2FsbGJhY2sgPSBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX191dGlsX19bXCJlXCIgLyogbGVuICovXSkodGV4dFNvRmFyKVxuICAgIH1cbiAgfVxuXG4gIGlmICgnb25wcm9ncmVzcycgaW4geGhyKSB7IC8vIGRldGVjdCBicm93c2VyIHN1cHBvcnQgZm9yIHByb2dyZXNzaXZlIGRlbGl2ZXJ5XG4gICAgeGhyLm9ucHJvZ3Jlc3MgPSBoYW5kbGVQcm9ncmVzc1xuICB9XG5cbiAgZnVuY3Rpb24gc2VuZFN0YXJ0SWZOb3RBbHJlYWR5ICh4aHIpIHtcbiAgICAvLyBJbnRlcm5ldCBFeHBsb3JlciBpcyB2ZXJ5IHVucmVsaWFibGUgYXMgdG8gd2hlbiB4aHIuc3RhdHVzIGV0YyBjYW5cbiAgICAvLyBiZSByZWFkIHNvIGhhcyB0byBiZSBwcm90ZWN0ZWQgd2l0aCB0cnkvY2F0Y2ggYW5kIHRyaWVkIGFnYWluIG9uXG4gICAgLy8gdGhlIG5leHQgcmVhZHlTdGF0ZSBpZiBpdCBmYWlsc1xuICAgIHRyeSB7XG4gICAgICBzdGlsbFRvU2VuZFN0YXJ0RXZlbnQgJiYgb2JvZUJ1cyhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2V2ZW50c19fW1wiY1wiIC8qIEhUVFBfU1RBUlQgKi9dKS5lbWl0KFxuICAgICAgICB4aHIuc3RhdHVzLFxuICAgICAgICBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19wYXJzZVJlc3BvbnNlSGVhZGVyc19icm93c2VyX19bXCJhXCIgLyogcGFyc2VSZXNwb25zZUhlYWRlcnMgKi9dKSh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpKVxuICAgICAgc3RpbGxUb1NlbmRTdGFydEV2ZW50ID0gZmFsc2VcbiAgICB9IGNhdGNoIChlKSB7IC8qIGRvIG5vdGhpbmcsIHdpbGwgdHJ5IGFnYWluIG9uIG5leHQgcmVhZHlTdGF0ZSAqLyB9XG4gIH1cblxuICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgIHN3aXRjaCAoeGhyLnJlYWR5U3RhdGUpIHtcbiAgICAgIGNhc2UgMjogLy8gSEVBREVSU19SRUNFSVZFRFxuICAgICAgY2FzZSAzOiAvLyBMT0FESU5HXG4gICAgICAgIHJldHVybiBzZW5kU3RhcnRJZk5vdEFscmVhZHkoeGhyKVxuXG4gICAgICBjYXNlIDQ6IC8vIERPTkVcbiAgICAgICAgc2VuZFN0YXJ0SWZOb3RBbHJlYWR5KHhocikgLy8gaWYgeGhyLnN0YXR1cyBoYXNuJ3QgYmVlbiBhdmFpbGFibGUgeWV0LCBpdCBtdXN0IGJlIE5PVywgaHVoIElFP1xuXG4gICAgICAgIC8vIGlzIHRoaXMgYSAyeHggaHR0cCBjb2RlP1xuICAgICAgICB2YXIgc3VjY2Vzc2Z1bCA9IFN0cmluZyh4aHIuc3RhdHVzKVswXSA9PT0gJzInXG5cbiAgICAgICAgaWYgKHN1Y2Nlc3NmdWwpIHtcbiAgICAgICAgICAvLyBJbiBDaHJvbWUgMjkgKG5vdCAyOCkgbm8gb25wcm9ncmVzcyBpcyBlbWl0dGVkIHdoZW4gYSByZXNwb25zZVxuICAgICAgICAgIC8vIGlzIGNvbXBsZXRlIGJlZm9yZSB0aGUgb25sb2FkLiBXZSBuZWVkIHRvIGFsd2F5cyBkbyBoYW5kbGVJbnB1dFxuICAgICAgICAgIC8vIGluIGNhc2Ugd2UgZ2V0IHRoZSBsb2FkIGJ1dCBoYXZlIG5vdCBoYWQgYSBmaW5hbCBwcm9ncmVzcyBldmVudC5cbiAgICAgICAgICAvLyBUaGlzIGxvb2tzIGxpa2UgYSBidWcgYW5kIG1heSBjaGFuZ2UgaW4gZnV0dXJlIGJ1dCBsZXQncyB0YWtlXG4gICAgICAgICAgLy8gdGhlIHNhZmVzdCBhcHByb2FjaCBhbmQgYXNzdW1lIHdlIG1pZ2h0IG5vdCBoYXZlIHJlY2VpdmVkIGFcbiAgICAgICAgICAvLyBwcm9ncmVzcyBldmVudCBmb3IgZWFjaCBwYXJ0IG9mIHRoZSByZXNwb25zZVxuICAgICAgICAgIGhhbmRsZVByb2dyZXNzKClcblxuICAgICAgICAgIG9ib2VCdXMoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19ldmVudHNfX1tcIm5cIiAvKiBTVFJFQU1fRU5EICovXSkuZW1pdCgpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW1pdEZhaWwoT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZXZlbnRzX19bXCJvXCIgLyogZXJyb3JSZXBvcnQgKi9dKShcbiAgICAgICAgICAgIHhoci5zdGF0dXMsXG4gICAgICAgICAgICB4aHIucmVzcG9uc2VUZXh0XG4gICAgICAgICAgKSlcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRyeSB7XG4gICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpXG5cbiAgICBmb3IgKHZhciBoZWFkZXJOYW1lIGluIGhlYWRlcnMpIHtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGhlYWRlck5hbWUsIGhlYWRlcnNbaGVhZGVyTmFtZV0pXG4gICAgfVxuXG4gICAgaWYgKCFPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19kZXRlY3RDcm9zc09yaWdpbl9icm93c2VyX19bXCJhXCIgLyogaXNDcm9zc09yaWdpbiAqL10pKHdpbmRvdy5sb2NhdGlvbiwgT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZGV0ZWN0Q3Jvc3NPcmlnaW5fYnJvd3Nlcl9fW1wiYlwiIC8qIHBhcnNlVXJsT3JpZ2luICovXSkodXJsKSkpIHtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdYLVJlcXVlc3RlZC1XaXRoJywgJ1hNTEh0dHBSZXF1ZXN0JylcbiAgICB9XG5cbiAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gd2l0aENyZWRlbnRpYWxzXG5cbiAgICB4aHIuc2VuZChkYXRhKVxuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gVG8ga2VlcCBhIGNvbnNpc3RlbnQgaW50ZXJmYWNlIHdpdGggTm9kZSwgd2UgY2FuJ3QgZW1pdCBhbiBldmVudCBoZXJlLlxuICAgIC8vIE5vZGUncyBzdHJlYW1pbmcgaHR0cCBhZGFwdG9yIHJlY2VpdmVzIHRoZSBlcnJvciBhcyBhbiBhc3luY2hyb25vdXNcbiAgICAvLyBldmVudCByYXRoZXIgdGhhbiBhcyBhbiBleGNlcHRpb24uIElmIHdlIGVtaXR0ZWQgbm93LCB0aGUgT2JvZSB1c2VyXG4gICAgLy8gaGFzIGhhZCBubyBjaGFuY2UgdG8gYWRkIGEgLmZhaWwgbGlzdGVuZXIgc28gdGhlcmUgaXMgbm8gd2F5XG4gICAgLy8gdGhlIGV2ZW50IGNvdWxkIGJlIHVzZWZ1bC4gRm9yIGJvdGggdGhlc2UgcmVhc29ucyBkZWZlciB0aGVcbiAgICAvLyBmaXJpbmcgdG8gdGhlIG5leHQgSlMgZnJhbWUuXG4gICAgd2luZG93LnNldFRpbWVvdXQoXG4gICAgICBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mdW5jdGlvbmFsX19bXCJqXCIgLyogcGFydGlhbENvbXBsZXRlICovXSkoZW1pdEZhaWwsIE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2V2ZW50c19fW1wib1wiIC8qIGVycm9yUmVwb3J0ICovXSkodW5kZWZpbmVkLCB1bmRlZmluZWQsIGUpKVxuICAgICAgLCAwXG4gICAgKVxuICB9XG59XG5cblxuXG5cbi8qKiovIH0pLFxuLyogMTkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGlzQ3Jvc3NPcmlnaW47IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImJcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBwYXJzZVVybE9yaWdpbjsgfSk7XG4vKipcbiAqIERldGVjdCBpZiBhIGdpdmVuIFVSTCBpcyBjcm9zcy1vcmlnaW4gaW4gdGhlIHNjb3BlIG9mIHRoZVxuICogY3VycmVudCBwYWdlLlxuICpcbiAqIEJyb3dzZXIgb25seSAoc2luY2UgY3Jvc3Mtb3JpZ2luIGhhcyBubyBtZWFuaW5nIGluIE5vZGUuanMpXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhZ2VMb2NhdGlvbiAtIGFzIGluIHdpbmRvdy5sb2NhdGlvblxuICogQHBhcmFtIHtPYmplY3R9IGFqYXhIb3N0IC0gYW4gb2JqZWN0IGxpa2Ugd2luZG93LmxvY2F0aW9uIGRlc2NyaWJpbmcgdGhlXG4gKiAgICBvcmlnaW4gb2YgdGhlIHVybCB0aGF0IHdlIHdhbnQgdG8gYWpheCBpblxuICovXG5mdW5jdGlvbiBpc0Nyb3NzT3JpZ2luIChwYWdlTG9jYXRpb24sIGFqYXhIb3N0KSB7XG4gIC8qXG4gICAgKiBOQjogZGVmYXVsdFBvcnQgb25seSBrbm93cyBodHRwIGFuZCBodHRwcy5cbiAgICAqIFJldHVybnMgdW5kZWZpbmVkIG90aGVyd2lzZS5cbiAgICAqL1xuICBmdW5jdGlvbiBkZWZhdWx0UG9ydCAocHJvdG9jb2wpIHtcbiAgICByZXR1cm4geyAnaHR0cDonOiA4MCwgJ2h0dHBzOic6IDQ0MyB9W3Byb3RvY29sXVxuICB9XG5cbiAgZnVuY3Rpb24gcG9ydE9mIChsb2NhdGlvbikge1xuICAgIC8vIHBhZ2VMb2NhdGlvbiBzaG91bGQgYWx3YXlzIGhhdmUgYSBwcm90b2NvbC4gYWpheEhvc3QgaWYgbm8gcG9ydCBvclxuICAgIC8vIHByb3RvY29sIGlzIHNwZWNpZmllZCwgc2hvdWxkIHVzZSB0aGUgcG9ydCBvZiB0aGUgY29udGFpbmluZyBwYWdlXG5cbiAgICByZXR1cm4gU3RyaW5nKGxvY2F0aW9uLnBvcnQgfHwgZGVmYXVsdFBvcnQobG9jYXRpb24ucHJvdG9jb2wgfHwgcGFnZUxvY2F0aW9uLnByb3RvY29sKSlcbiAgfVxuXG4gIC8vIGlmIGFqYXhIb3N0IGRvZXNuJ3QgZ2l2ZSBhIGRvbWFpbiwgcG9ydCBpcyB0aGUgc2FtZSBhcyBwYWdlTG9jYXRpb25cbiAgLy8gaXQgY2FuJ3QgZ2l2ZSBhIHByb3RvY29sIGJ1dCBub3QgYSBkb21haW5cbiAgLy8gaXQgY2FuJ3QgZ2l2ZSBhIHBvcnQgYnV0IG5vdCBhIGRvbWFpblxuXG4gIHJldHVybiAhISgoYWpheEhvc3QucHJvdG9jb2wgJiYgKGFqYXhIb3N0LnByb3RvY29sICE9PSBwYWdlTG9jYXRpb24ucHJvdG9jb2wpKSB8fFxuICAgIChhamF4SG9zdC5ob3N0ICYmIChhamF4SG9zdC5ob3N0ICE9PSBwYWdlTG9jYXRpb24uaG9zdCkpIHx8XG4gICAgKGFqYXhIb3N0Lmhvc3QgJiYgKHBvcnRPZihhamF4SG9zdCkgIT09IHBvcnRPZihwYWdlTG9jYXRpb24pKSlcbiAgKVxufVxuXG4vKiB0dXJuIGFueSB1cmwgaW50byBhbiBvYmplY3QgbGlrZSB3aW5kb3cubG9jYXRpb24gKi9cbmZ1bmN0aW9uIHBhcnNlVXJsT3JpZ2luICh1cmwpIHtcbiAgLy8gdXJsIGNvdWxkIGJlIGRvbWFpbi1yZWxhdGl2ZVxuICAvLyB1cmwgY291bGQgZ2l2ZSBhIGRvbWFpblxuXG4gIC8vIGNyb3NzIG9yaWdpbiBtZWFuczpcbiAgLy8gICAgc2FtZSBkb21haW5cbiAgLy8gICAgc2FtZSBwb3J0XG4gIC8vICAgIHNvbWUgcHJvdG9jb2xcbiAgLy8gc28sIHNhbWUgZXZlcnl0aGluZyB1cCB0byB0aGUgZmlyc3QgKHNpbmdsZSkgc2xhc2hcbiAgLy8gaWYgc3VjaCBpcyBnaXZlblxuICAvL1xuICAvLyBjYW4gaWdub3JlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhhdFxuXG4gIHZhciBVUkxfSE9TVF9QQVRURVJOID0gLyhcXHcrOik/KD86XFwvXFwvKShbXFx3Li1dKyk/KD86OihcXGQrKSk/XFwvPy9cblxuICAvLyBpZiBubyBtYXRjaCwgdXNlIGFuIGVtcHR5IGFycmF5IHNvIHRoYXRcbiAgLy8gc3ViZXhwcmVzc2lvbnMgMSwyLDMgYXJlIGFsbCB1bmRlZmluZWRcbiAgLy8gYW5kIHdpbGwgdWx0aW1hdGVseSByZXR1cm4gYWxsIGVtcHR5XG4gIC8vIHN0cmluZ3MgYXMgdGhlIHBhcnNlIHJlc3VsdDpcbiAgdmFyIHVybEhvc3RNYXRjaCA9IFVSTF9IT1NUX1BBVFRFUk4uZXhlYyh1cmwpIHx8IFtdXG5cbiAgcmV0dXJuIHtcbiAgICBwcm90b2NvbDogdXJsSG9zdE1hdGNoWzFdIHx8ICcnLFxuICAgIGhvc3Q6IHVybEhvc3RNYXRjaFsyXSB8fCAnJyxcbiAgICBwb3J0OiB1cmxIb3N0TWF0Y2hbM10gfHwgJydcbiAgfVxufVxuXG5cblxuXG4vKioqLyB9KSxcbi8qIDIwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBwYXJzZVJlc3BvbnNlSGVhZGVyczsgfSk7XG4vLyBiYXNlZCBvbiBnaXN0IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL21vbnN1ci83MDY4MzlcblxuLyoqXG4gKiBYbWxIdHRwUmVxdWVzdCdzIGdldEFsbFJlc3BvbnNlSGVhZGVycygpIG1ldGhvZCByZXR1cm5zIGEgc3RyaW5nIG9mIHJlc3BvbnNlXG4gKiBoZWFkZXJzIGFjY29yZGluZyB0byB0aGUgZm9ybWF0IGRlc2NyaWJlZCBoZXJlOlxuICogaHR0cDovL3d3dy53My5vcmcvVFIvWE1MSHR0cFJlcXVlc3QvI3RoZS1nZXRhbGxyZXNwb25zZWhlYWRlcnMtbWV0aG9kXG4gKiBUaGlzIG1ldGhvZCBwYXJzZXMgdGhhdCBzdHJpbmcgaW50byBhIHVzZXItZnJpZW5kbHkga2V5L3ZhbHVlIHBhaXIgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBwYXJzZVJlc3BvbnNlSGVhZGVycyAoaGVhZGVyU3RyKSB7XG4gIHZhciBoZWFkZXJzID0ge31cblxuICBoZWFkZXJTdHIgJiYgaGVhZGVyU3RyLnNwbGl0KCdcXHUwMDBkXFx1MDAwYScpXG4gICAgLmZvckVhY2goZnVuY3Rpb24gKGhlYWRlclBhaXIpIHtcbiAgICAgIC8vIENhbid0IHVzZSBzcGxpdCgpIGhlcmUgYmVjYXVzZSBpdCBkb2VzIHRoZSB3cm9uZyB0aGluZ1xuICAgICAgLy8gaWYgdGhlIGhlYWRlciB2YWx1ZSBoYXMgdGhlIHN0cmluZyBcIjogXCIgaW4gaXQuXG4gICAgICB2YXIgaW5kZXggPSBoZWFkZXJQYWlyLmluZGV4T2YoJ1xcdTAwM2FcXHUwMDIwJylcblxuICAgICAgaGVhZGVyc1toZWFkZXJQYWlyLnN1YnN0cmluZygwLCBpbmRleCldID1cbiAgICAgICAgaGVhZGVyUGFpci5zdWJzdHJpbmcoaW5kZXggKyAyKVxuICAgIH0pXG5cbiAgcmV0dXJuIGhlYWRlcnNcbn1cblxuXG5cblxuLyoqKi8gfSlcbi8qKioqKiovIF0pW1wiZGVmYXVsdFwiXTtcbn0pOyIsInZhciBpc0hleFByZWZpeGVkID0gcmVxdWlyZSgnaXMtaGV4LXByZWZpeGVkJyk7XG5cbi8qKlxuICogUmVtb3ZlcyAnMHgnIGZyb20gYSBnaXZlbiBgU3RyaW5nYCBpcyBwcmVzZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIHRoZSBzdHJpbmcgdmFsdWVcbiAqIEByZXR1cm4ge1N0cmluZ3xPcHRpb25hbH0gYSBzdHJpbmcgYnkgcGFzcyBpZiBuZWNlc3NhcnlcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzdHJpcEhleFByZWZpeChzdHIpIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIHJldHVybiBpc0hleFByZWZpeGVkKHN0cikgPyBzdHIuc2xpY2UoMikgOiBzdHI7XG59XG4iLCIvKlxuICAgIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiAgICB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiAgICB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAgICBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuLyoqXG4gKiBAZmlsZSBlcnJvcnMuanNcbiAqIEBhdXRob3IgRmFiaWFuIFZvZ2Vsc3RlbGxlciA8ZmFiaWFuQGV0aGVyZXVtLm9yZz5cbiAqIEBhdXRob3IgTWFyZWsgS290ZXdpY3ogPG1hcmVrQHBhcml0eS5pbz5cbiAqIEBkYXRlIDIwMTdcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBFcnJvclJlc3BvbnNlOiBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgIHZhciBtZXNzYWdlID0gISFyZXN1bHQgJiYgISFyZXN1bHQuZXJyb3IgJiYgISFyZXN1bHQuZXJyb3IubWVzc2FnZSA/IHJlc3VsdC5lcnJvci5tZXNzYWdlIDogSlNPTi5zdHJpbmdpZnkocmVzdWx0KTtcbiAgICAgICAgdmFyIGRhdGEgPSAoISFyZXN1bHQuZXJyb3IgJiYgISFyZXN1bHQuZXJyb3IuZGF0YSkgPyByZXN1bHQuZXJyb3IuZGF0YSA6IG51bGw7XG4gICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1JldHVybmVkIGVycm9yOiAnICsgbWVzc2FnZSk7XG4gICAgICAgIGVyci5kYXRhID0gZGF0YTtcbiAgICAgICAgcmV0dXJuIGVycjtcbiAgICB9LFxuICAgIEludmFsaWROdW1iZXJPZlBhcmFtczogZnVuY3Rpb24gKGdvdCwgZXhwZWN0ZWQsIG1ldGhvZCkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkIG51bWJlciBvZiBwYXJhbWV0ZXJzIGZvciBcIicgKyBtZXRob2QgKyAnXCIuIEdvdCAnICsgZ290ICsgJyBleHBlY3RlZCAnICsgZXhwZWN0ZWQgKyAnIScpO1xuICAgIH0sXG4gICAgSW52YWxpZENvbm5lY3Rpb246IGZ1bmN0aW9uIChob3N0LCBldmVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5Db25uZWN0aW9uRXJyb3IoJ0NPTk5FQ1RJT04gRVJST1I6IENvdWxkblxcJ3QgY29ubmVjdCB0byBub2RlICcgKyBob3N0ICsgJy4nLCBldmVudCk7XG4gICAgfSxcbiAgICBJbnZhbGlkUHJvdmlkZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignUHJvdmlkZXIgbm90IHNldCBvciBpbnZhbGlkJyk7XG4gICAgfSxcbiAgICBJbnZhbGlkUmVzcG9uc2U6IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSAhIXJlc3VsdCAmJiAhIXJlc3VsdC5lcnJvciAmJiAhIXJlc3VsdC5lcnJvci5tZXNzYWdlID8gcmVzdWx0LmVycm9yLm1lc3NhZ2UgOiAnSW52YWxpZCBKU09OIFJQQyByZXNwb25zZTogJyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCk7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSxcbiAgICBDb25uZWN0aW9uVGltZW91dDogZnVuY3Rpb24gKG1zKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0NPTk5FQ1RJT04gVElNRU9VVDogdGltZW91dCBvZiAnICsgbXMgKyAnIG1zIGFjaGl2ZWQnKTtcbiAgICB9LFxuICAgIENvbm5lY3Rpb25Ob3RPcGVuRXJyb3I6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5Db25uZWN0aW9uRXJyb3IoJ2Nvbm5lY3Rpb24gbm90IG9wZW4gb24gc2VuZCgpJywgZXZlbnQpO1xuICAgIH0sXG4gICAgQ29ubmVjdGlvbkNsb3NlRXJyb3I6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAodHlwZW9mIGV2ZW50ID09PSAnb2JqZWN0JyAmJiBldmVudC5jb2RlICYmIGV2ZW50LnJlYXNvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuQ29ubmVjdGlvbkVycm9yKCdDT05ORUNUSU9OIEVSUk9SOiBUaGUgY29ubmVjdGlvbiBnb3QgY2xvc2VkIHdpdGggJyArXG4gICAgICAgICAgICAgICAgJ3RoZSBjbG9zZSBjb2RlIGAnICsgZXZlbnQuY29kZSArICdgIGFuZCB0aGUgZm9sbG93aW5nICcgK1xuICAgICAgICAgICAgICAgICdyZWFzb24gc3RyaW5nIGAnICsgZXZlbnQucmVhc29uICsgJ2AnLCBldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignQ09OTkVDVElPTiBFUlJPUjogVGhlIGNvbm5lY3Rpb24gY2xvc2VkIHVuZXhwZWN0ZWRseScpO1xuICAgIH0sXG4gICAgTWF4QXR0ZW1wdHNSZWFjaGVkT25SZWNvbm5lY3RpbmdFcnJvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdNYXhpbXVtIG51bWJlciBvZiByZWNvbm5lY3QgYXR0ZW1wdHMgcmVhY2hlZCEnKTtcbiAgICB9LFxuICAgIFBlbmRpbmdSZXF1ZXN0c09uUmVjb25uZWN0aW5nRXJyb3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignQ09OTkVDVElPTiBFUlJPUjogUHJvdmlkZXIgc3RhcnRlZCB0byByZWNvbm5lY3QgYmVmb3JlIHRoZSByZXNwb25zZSBnb3QgcmVjZWl2ZWQhJyk7XG4gICAgfSxcbiAgICBDb25uZWN0aW9uRXJyb3I6IGZ1bmN0aW9uIChtc2csIGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKG1zZyk7XG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgZXJyb3IuY29kZSA9IGV2ZW50LmNvZGU7XG4gICAgICAgICAgICBlcnJvci5yZWFzb24gPSBldmVudC5yZWFzb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgIH0sXG4gICAgUmV2ZXJ0SW5zdHJ1Y3Rpb25FcnJvcjogZnVuY3Rpb24gKHJlYXNvbiwgc2lnbmF0dXJlKSB7XG4gICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcignWW91ciByZXF1ZXN0IGdvdCByZXZlcnRlZCB3aXRoIHRoZSBmb2xsb3dpbmcgcmVhc29uIHN0cmluZzogJyArIHJlYXNvbik7XG4gICAgICAgIGVycm9yLnJlYXNvbiA9IHJlYXNvbjtcbiAgICAgICAgZXJyb3Iuc2lnbmF0dXJlID0gc2lnbmF0dXJlO1xuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgfSxcbiAgICBUcmFuc2FjdGlvblJldmVydEluc3RydWN0aW9uRXJyb3I6IGZ1bmN0aW9uIChyZWFzb24sIHNpZ25hdHVyZSwgcmVjZWlwdCkge1xuICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoJ1RyYW5zYWN0aW9uIGhhcyBiZWVuIHJldmVydGVkIGJ5IHRoZSBFVk06XFxuJyArIEpTT04uc3RyaW5naWZ5KHJlY2VpcHQsIG51bGwsIDIpKTtcbiAgICAgICAgZXJyb3IucmVhc29uID0gcmVhc29uO1xuICAgICAgICBlcnJvci5zaWduYXR1cmUgPSBzaWduYXR1cmU7XG4gICAgICAgIGVycm9yLnJlY2VpcHQgPSByZWNlaXB0O1xuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgfSxcbiAgICBUcmFuc2FjdGlvbkVycm9yOiBmdW5jdGlvbiAobWVzc2FnZSwgcmVjZWlwdCkge1xuICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgIGVycm9yLnJlY2VpcHQgPSByZWNlaXB0O1xuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgfSxcbiAgICBOb0NvbnRyYWN0QWRkcmVzc0ZvdW5kRXJyb3I6IGZ1bmN0aW9uIChyZWNlaXB0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLlRyYW5zYWN0aW9uRXJyb3IoJ1RoZSB0cmFuc2FjdGlvbiByZWNlaXB0IGRpZG5cXCd0IGNvbnRhaW4gYSBjb250cmFjdCBhZGRyZXNzLicsIHJlY2VpcHQpO1xuICAgIH0sXG4gICAgQ29udHJhY3RDb2RlTm90U3RvcmVkRXJyb3I6IGZ1bmN0aW9uIChyZWNlaXB0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLlRyYW5zYWN0aW9uRXJyb3IoJ1RoZSBjb250cmFjdCBjb2RlIGNvdWxkblxcJ3QgYmUgc3RvcmVkLCBwbGVhc2UgY2hlY2sgeW91ciBnYXMgbGltaXQuJywgcmVjZWlwdCk7XG4gICAgfSxcbiAgICBUcmFuc2FjdGlvblJldmVydGVkV2l0aG91dFJlYXNvbkVycm9yOiBmdW5jdGlvbiAocmVjZWlwdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5UcmFuc2FjdGlvbkVycm9yKCdUcmFuc2FjdGlvbiBoYXMgYmVlbiByZXZlcnRlZCBieSB0aGUgRVZNOlxcbicgKyBKU09OLnN0cmluZ2lmeShyZWNlaXB0LCBudWxsLCAyKSwgcmVjZWlwdCk7XG4gICAgfSxcbiAgICBUcmFuc2FjdGlvbk91dE9mR2FzRXJyb3I6IGZ1bmN0aW9uIChyZWNlaXB0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLlRyYW5zYWN0aW9uRXJyb3IoJ1RyYW5zYWN0aW9uIHJhbiBvdXQgb2YgZ2FzLiBQbGVhc2UgcHJvdmlkZSBtb3JlIGdhczpcXG4nICsgSlNPTi5zdHJpbmdpZnkocmVjZWlwdCwgbnVsbCwgMiksIHJlY2VpcHQpO1xuICAgIH0sXG4gICAgUmVzb2x2ZXJNZXRob2RNaXNzaW5nRXJyb3I6IGZ1bmN0aW9uIChhZGRyZXNzLCBuYW1lKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1RoZSByZXNvbHZlciBhdCAnICsgYWRkcmVzcyArICdkb2VzIG5vdCBpbXBsZW1lbnQgcmVxdWVzdGVkIG1ldGhvZDogXCInICsgbmFtZSArICdcIi4nKTtcbiAgICB9LFxuICAgIENvbnRyYWN0TWlzc2luZ0FCSUVycm9yOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1lvdSBtdXN0IHByb3ZpZGUgdGhlIGpzb24gaW50ZXJmYWNlIG9mIHRoZSBjb250cmFjdCB3aGVuIGluc3RhbnRpYXRpbmcgYSBjb250cmFjdCBvYmplY3QuJyk7XG4gICAgfSxcbiAgICBDb250cmFjdE9uY2VSZXF1aXJlc0NhbGxiYWNrRXJyb3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignT25jZSByZXF1aXJlcyBhIGNhbGxiYWNrIGFzIHRoZSBzZWNvbmQgcGFyYW1ldGVyLicpO1xuICAgIH0sXG4gICAgQ29udHJhY3RFdmVudERvZXNOb3RFeGlzdEVycm9yOiBmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0V2ZW50IFwiJyArIGV2ZW50TmFtZSArICdcIiBkb2VzblxcJ3QgZXhpc3QgaW4gdGhpcyBjb250cmFjdC4nKTtcbiAgICB9LFxuICAgIENvbnRyYWN0UmVzZXJ2ZWRFdmVudEVycm9yOiBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdUaGUgZXZlbnQgXCInICsgdHlwZSArICdcIiBpcyBhIHJlc2VydmVkIGV2ZW50IG5hbWUsIHlvdSBjYW5cXCd0IHVzZSBpdC4nKTtcbiAgICB9LFxuICAgIENvbnRyYWN0TWlzc2luZ0RlcGxveURhdGFFcnJvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdObyBcImRhdGFcIiBzcGVjaWZpZWQgaW4gbmVpdGhlciB0aGUgZ2l2ZW4gb3B0aW9ucywgbm9yIHRoZSBkZWZhdWx0IG9wdGlvbnMuJyk7XG4gICAgfSxcbiAgICBDb250cmFjdE5vQWRkcmVzc0RlZmluZWRFcnJvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdUaGlzIGNvbnRyYWN0IG9iamVjdCBkb2VzblxcJ3QgaGF2ZSBhZGRyZXNzIHNldCB5ZXQsIHBsZWFzZSBzZXQgYW4gYWRkcmVzcyBmaXJzdC4nKTtcbiAgICB9LFxuICAgIENvbnRyYWN0Tm9Gcm9tQWRkcmVzc0RlZmluZWRFcnJvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdObyBcImZyb21cIiBhZGRyZXNzIHNwZWNpZmllZCBpbiBuZWl0aGVyIHRoZSBnaXZlbiBvcHRpb25zLCBub3IgdGhlIGRlZmF1bHQgb3B0aW9ucy4nKTtcbiAgICB9XG59O1xuIiwiLypcbiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gICAgd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbi8qKlxuICogQGZpbGUgZm9ybWF0dGVycy5qc1xuICogQGF1dGhvciBGYWJpYW4gVm9nZWxzdGVsbGVyIDxmYWJpYW5AZXRoZXJldW0ub3JnPlxuICogQGF1dGhvciBNYXJlayBLb3Rld2ljeiA8bWFyZWtAcGFyaXR5LmlvPlxuICogQGRhdGUgMjAxN1xuICovXG5cInVzZSBzdHJpY3RcIjtcbnZhciB1dGlscyA9IHJlcXVpcmUoJ3dlYjMtdXRpbHMnKTtcbnZhciBJYmFuID0gcmVxdWlyZSgnd2ViMy1ldGgtaWJhbicpO1xuLyoqXG4gKiBXaWxsIGZvcm1hdCB0aGUgZ2l2ZW4gc3RvcmFnZSBrZXkgYXJyYXkgdmFsdWVzIHRvIGhleCBzdHJpbmdzLlxuICpcbiAqIEBtZXRob2QgaW5wdXRTdG9yYWdlS2V5c0Zvcm1hdHRlclxuICpcbiAqIEBwYXJhbSB7QXJyYXk8TnVtYmVyfFN0cmluZ3xCTnxCaWdOdW1iZXI+fSBrZXlzXG4gKlxuICogQHJldHVybnMge0FycmF5PFN0cmluZz59XG4gKi9cbnZhciBpbnB1dFN0b3JhZ2VLZXlzRm9ybWF0dGVyID0gZnVuY3Rpb24gKGtleXMpIHtcbiAgICByZXR1cm4ga2V5cy5tYXAodXRpbHMubnVtYmVyVG9IZXgpO1xufTtcbi8qKlxuICogV2lsbCBmb3JtYXQgdGhlIGdpdmVuIHByb29mIHJlc3BvbnNlIGZyb20gdGhlIG5vZGUuXG4gKlxuICogQG1ldGhvZCBvdXRwdXRQcm9vZkZvcm1hdHRlclxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9vZlxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cbnZhciBvdXRwdXRQcm9vZkZvcm1hdHRlciA9IGZ1bmN0aW9uIChwcm9vZikge1xuICAgIHByb29mLmFkZHJlc3MgPSB1dGlscy50b0NoZWNrc3VtQWRkcmVzcyhwcm9vZi5hZGRyZXNzKTtcbiAgICBwcm9vZi5ub25jZSA9IHV0aWxzLmhleFRvTnVtYmVyU3RyaW5nKHByb29mLm5vbmNlKTtcbiAgICBwcm9vZi5iYWxhbmNlID0gdXRpbHMuaGV4VG9OdW1iZXJTdHJpbmcocHJvb2YuYmFsYW5jZSk7XG4gICAgcmV0dXJuIHByb29mO1xufTtcbi8qKlxuICogU2hvdWxkIHRoZSBmb3JtYXQgb3V0cHV0IHRvIGEgYmlnIG51bWJlclxuICpcbiAqIEBtZXRob2Qgb3V0cHV0QmlnTnVtYmVyRm9ybWF0dGVyXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfEJpZ051bWJlcnxCTn0gbnVtYmVyXG4gKlxuICogQHJldHVybnMge0JOfSBvYmplY3RcbiAqL1xudmFyIG91dHB1dEJpZ051bWJlckZvcm1hdHRlciA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICByZXR1cm4gdXRpbHMudG9CTihudW1iZXIpLnRvU3RyaW5nKDEwKTtcbn07XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gYmxvY2tOdW1iZXIgaXMgJ2xhdGVzdCcsICdwZW5kaW5nJywgb3IgJ2VhcmxpZXN0LlxuICpcbiAqIEBtZXRob2QgaXNQcmVkZWZpbmVkQmxvY2tOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYmxvY2tOdW1iZXJcbiAqXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xudmFyIGlzUHJlZGVmaW5lZEJsb2NrTnVtYmVyID0gZnVuY3Rpb24gKGJsb2NrTnVtYmVyKSB7XG4gICAgcmV0dXJuIGJsb2NrTnVtYmVyID09PSAnbGF0ZXN0JyB8fCBibG9ja051bWJlciA9PT0gJ3BlbmRpbmcnIHx8IGJsb2NrTnVtYmVyID09PSAnZWFybGllc3QnO1xufTtcbi8qKlxuICogUmV0dXJucyB0aGUgZ2l2ZW4gYmxvY2sgbnVtYmVyIGFzIGhleCBzdHJpbmcgb3IgZG9lcyByZXR1cm4gdGhlIGRlZmF1bHRCbG9jayBwcm9wZXJ0eSBvZiB0aGUgY3VycmVudCBtb2R1bGVcbiAqXG4gKiBAbWV0aG9kIGlucHV0RGVmYXVsdEJsb2NrTnVtYmVyRm9ybWF0dGVyXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfEJOfEJpZ051bWJlcn0gYmxvY2tOdW1iZXJcbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG52YXIgaW5wdXREZWZhdWx0QmxvY2tOdW1iZXJGb3JtYXR0ZXIgPSBmdW5jdGlvbiAoYmxvY2tOdW1iZXIpIHtcbiAgICBpZiAodGhpcyAmJiAoYmxvY2tOdW1iZXIgPT09IHVuZGVmaW5lZCB8fCBibG9ja051bWJlciA9PT0gbnVsbCkpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0QmxvY2tOdW1iZXJGb3JtYXR0ZXIodGhpcy5kZWZhdWx0QmxvY2spO1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXRCbG9ja051bWJlckZvcm1hdHRlcihibG9ja051bWJlcik7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBnaXZlbiBibG9jayBudW1iZXIgYXMgaGV4IHN0cmluZyBvciB0aGUgcHJlZGVmaW5lZCBibG9jayBudW1iZXIgJ2xhdGVzdCcsICdwZW5kaW5nJywgJ2VhcmxpZXN0JywgJ2dlbmVzaXMnXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfEJOfEJpZ051bWJlcn0gYmxvY2tOdW1iZXJcbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG52YXIgaW5wdXRCbG9ja051bWJlckZvcm1hdHRlciA9IGZ1bmN0aW9uIChibG9ja051bWJlcikge1xuICAgIGlmIChibG9ja051bWJlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChpc1ByZWRlZmluZWRCbG9ja051bWJlcihibG9ja051bWJlcikpIHtcbiAgICAgICAgcmV0dXJuIGJsb2NrTnVtYmVyO1xuICAgIH1cbiAgICBpZiAoYmxvY2tOdW1iZXIgPT09ICdnZW5lc2lzJykge1xuICAgICAgICByZXR1cm4gJzB4MCc7XG4gICAgfVxuICAgIHJldHVybiAodXRpbHMuaXNIZXhTdHJpY3QoYmxvY2tOdW1iZXIpKSA/ICgodHlwZW9mIGJsb2NrTnVtYmVyID09PSAnc3RyaW5nJykgPyBibG9ja051bWJlci50b0xvd2VyQ2FzZSgpIDogYmxvY2tOdW1iZXIpIDogdXRpbHMubnVtYmVyVG9IZXgoYmxvY2tOdW1iZXIpO1xufTtcbi8qKlxuICogRm9ybWF0cyB0aGUgaW5wdXQgb2YgYSB0cmFuc2FjdGlvbiBhbmQgY29udmVydHMgYWxsIHZhbHVlcyB0byBIRVhcbiAqXG4gKiBAbWV0aG9kIF90eElucHV0Rm9ybWF0dGVyXG4gKiBAcGFyYW0ge09iamVjdH0gdHJhbnNhY3Rpb24gb3B0aW9uc1xuICogQHJldHVybnMgb2JqZWN0XG4gKi9cbnZhciBfdHhJbnB1dEZvcm1hdHRlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMudG8pIHsgLy8gaXQgbWlnaHQgYmUgY29udHJhY3QgY3JlYXRpb25cbiAgICAgICAgb3B0aW9ucy50byA9IGlucHV0QWRkcmVzc0Zvcm1hdHRlcihvcHRpb25zLnRvKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmlucHV0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IGNhblxcJ3QgaGF2ZSBcImRhdGFcIiBhbmQgXCJpbnB1dFwiIGFzIHByb3BlcnRpZXMgb2YgdHJhbnNhY3Rpb25zIGF0IHRoZSBzYW1lIHRpbWUsIHBsZWFzZSB1c2UgZWl0aGVyIFwiZGF0YVwiIG9yIFwiaW5wdXRcIiBpbnN0ZWFkLicpO1xuICAgIH1cbiAgICBpZiAoIW9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmlucHV0KSB7XG4gICAgICAgIG9wdGlvbnMuZGF0YSA9IG9wdGlvbnMuaW5wdXQ7XG4gICAgICAgIGRlbGV0ZSBvcHRpb25zLmlucHV0O1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5kYXRhICYmICFvcHRpb25zLmRhdGEuc3RhcnRzV2l0aCgnMHgnKSkge1xuICAgICAgICBvcHRpb25zLmRhdGEgPSAnMHgnICsgb3B0aW9ucy5kYXRhO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5kYXRhICYmICF1dGlscy5pc0hleChvcHRpb25zLmRhdGEpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGRhdGEgZmllbGQgbXVzdCBiZSBIRVggZW5jb2RlZCBkYXRhLicpO1xuICAgIH1cbiAgICAvLyBhbGxvdyBib3RoXG4gICAgaWYgKG9wdGlvbnMuZ2FzIHx8IG9wdGlvbnMuZ2FzTGltaXQpIHtcbiAgICAgICAgb3B0aW9ucy5nYXMgPSBvcHRpb25zLmdhcyB8fCBvcHRpb25zLmdhc0xpbWl0O1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5tYXhQcmlvcml0eUZlZVBlckdhcyB8fCBvcHRpb25zLm1heEZlZVBlckdhcykge1xuICAgICAgICBkZWxldGUgb3B0aW9ucy5nYXNQcmljZTtcbiAgICB9XG4gICAgWydnYXNQcmljZScsICdnYXMnLCAndmFsdWUnLCAnbWF4UHJpb3JpdHlGZWVQZXJHYXMnLCAnbWF4RmVlUGVyR2FzJywgJ25vbmNlJ10uZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnNba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBvcHRpb25zW2tleV0gPSB1dGlscy5udW1iZXJUb0hleChvcHRpb25zW2tleV0pO1xuICAgIH0pO1xuICAgIHJldHVybiBvcHRpb25zO1xufTtcbi8qKlxuICogRm9ybWF0cyB0aGUgaW5wdXQgb2YgYSB0cmFuc2FjdGlvbiBhbmQgY29udmVydHMgYWxsIHZhbHVlcyB0byBIRVhcbiAqXG4gKiBAbWV0aG9kIGlucHV0Q2FsbEZvcm1hdHRlclxuICogQHBhcmFtIHtPYmplY3R9IHRyYW5zYWN0aW9uIG9wdGlvbnNcbiAqIEByZXR1cm5zIG9iamVjdFxuICovXG52YXIgaW5wdXRDYWxsRm9ybWF0dGVyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gX3R4SW5wdXRGb3JtYXR0ZXIob3B0aW9ucyk7XG4gICAgdmFyIGZyb20gPSBvcHRpb25zLmZyb20gfHwgKHRoaXMgPyB0aGlzLmRlZmF1bHRBY2NvdW50IDogbnVsbCk7XG4gICAgaWYgKGZyb20pIHtcbiAgICAgICAgb3B0aW9ucy5mcm9tID0gaW5wdXRBZGRyZXNzRm9ybWF0dGVyKGZyb20pO1xuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucztcbn07XG4vKipcbiAqIEZvcm1hdHMgdGhlIGlucHV0IG9mIGEgdHJhbnNhY3Rpb24gYW5kIGNvbnZlcnRzIGFsbCB2YWx1ZXMgdG8gSEVYXG4gKlxuICogQG1ldGhvZCBpbnB1dFRyYW5zYWN0aW9uRm9ybWF0dGVyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybnMgb2JqZWN0XG4gKi9cbnZhciBpbnB1dFRyYW5zYWN0aW9uRm9ybWF0dGVyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gX3R4SW5wdXRGb3JtYXR0ZXIob3B0aW9ucyk7XG4gICAgLy8gY2hlY2sgZnJvbSwgb25seSBpZiBub3QgbnVtYmVyLCBvciBvYmplY3RcbiAgICBpZiAoISh0eXBlb2Ygb3B0aW9ucy5mcm9tID09PSAnbnVtYmVyJykgJiYgISghIW9wdGlvbnMuZnJvbSAmJiB0eXBlb2Ygb3B0aW9ucy5mcm9tID09PSAnb2JqZWN0JykpIHtcbiAgICAgICAgb3B0aW9ucy5mcm9tID0gb3B0aW9ucy5mcm9tIHx8ICh0aGlzID8gdGhpcy5kZWZhdWx0QWNjb3VudCA6IG51bGwpO1xuICAgICAgICBpZiAoIW9wdGlvbnMuZnJvbSAmJiAhKHR5cGVvZiBvcHRpb25zLmZyb20gPT09ICdudW1iZXInKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgc2VuZCB0cmFuc2FjdGlvbnMgXCJmcm9tXCIgZmllbGQgbXVzdCBiZSBkZWZpbmVkIScpO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMuZnJvbSA9IGlucHV0QWRkcmVzc0Zvcm1hdHRlcihvcHRpb25zLmZyb20pO1xuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucztcbn07XG4vKipcbiAqIEhleCBlbmNvZGVzIHRoZSBkYXRhIHBhc3NlZCB0byBldGhfc2lnbiBhbmQgcGVyc29uYWxfc2lnblxuICpcbiAqIEBtZXRob2QgaW5wdXRTaWduRm9ybWF0dGVyXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YVxuICogQHJldHVybnMge1N0cmluZ31cbiAqL1xudmFyIGlucHV0U2lnbkZvcm1hdHRlciA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuICh1dGlscy5pc0hleFN0cmljdChkYXRhKSkgPyBkYXRhIDogdXRpbHMudXRmOFRvSGV4KGRhdGEpO1xufTtcbi8qKlxuICogRm9ybWF0cyB0aGUgb3V0cHV0IG9mIGEgdHJhbnNhY3Rpb24gdG8gaXRzIHByb3BlciB2YWx1ZXNcbiAqXG4gKiBAbWV0aG9kIG91dHB1dFRyYW5zYWN0aW9uRm9ybWF0dGVyXG4gKiBAcGFyYW0ge09iamVjdH0gdHhcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbnZhciBvdXRwdXRUcmFuc2FjdGlvbkZvcm1hdHRlciA9IGZ1bmN0aW9uICh0eCkge1xuICAgIGlmICh0eC5ibG9ja051bWJlciAhPT0gbnVsbClcbiAgICAgICAgdHguYmxvY2tOdW1iZXIgPSB1dGlscy5oZXhUb051bWJlcih0eC5ibG9ja051bWJlcik7XG4gICAgaWYgKHR4LnRyYW5zYWN0aW9uSW5kZXggIT09IG51bGwpXG4gICAgICAgIHR4LnRyYW5zYWN0aW9uSW5kZXggPSB1dGlscy5oZXhUb051bWJlcih0eC50cmFuc2FjdGlvbkluZGV4KTtcbiAgICB0eC5ub25jZSA9IHV0aWxzLmhleFRvTnVtYmVyKHR4Lm5vbmNlKTtcbiAgICB0eC5nYXMgPSB1dGlscy5oZXhUb051bWJlcih0eC5nYXMpO1xuICAgIGlmICh0eC5nYXNQcmljZSlcbiAgICAgICAgdHguZ2FzUHJpY2UgPSBvdXRwdXRCaWdOdW1iZXJGb3JtYXR0ZXIodHguZ2FzUHJpY2UpO1xuICAgIGlmICh0eC5tYXhGZWVQZXJHYXMpXG4gICAgICAgIHR4Lm1heEZlZVBlckdhcyA9IG91dHB1dEJpZ051bWJlckZvcm1hdHRlcih0eC5tYXhGZWVQZXJHYXMpO1xuICAgIGlmICh0eC5tYXhQcmlvcml0eUZlZVBlckdhcylcbiAgICAgICAgdHgubWF4UHJpb3JpdHlGZWVQZXJHYXMgPSBvdXRwdXRCaWdOdW1iZXJGb3JtYXR0ZXIodHgubWF4UHJpb3JpdHlGZWVQZXJHYXMpO1xuICAgIGlmICh0eC50eXBlKVxuICAgICAgICB0eC50eXBlID0gdXRpbHMuaGV4VG9OdW1iZXIodHgudHlwZSk7XG4gICAgdHgudmFsdWUgPSBvdXRwdXRCaWdOdW1iZXJGb3JtYXR0ZXIodHgudmFsdWUpO1xuICAgIGlmICh0eC50byAmJiB1dGlscy5pc0FkZHJlc3ModHgudG8pKSB7IC8vIHR4LnRvIGNvdWxkIGJlIGAweDBgIG9yIGBudWxsYCB3aGlsZSBjb250cmFjdCBjcmVhdGlvblxuICAgICAgICB0eC50byA9IHV0aWxzLnRvQ2hlY2tzdW1BZGRyZXNzKHR4LnRvKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHR4LnRvID0gbnVsbDsgLy8gc2V0IHRvIGBudWxsYCBpZiBpbnZhbGlkIGFkZHJlc3NcbiAgICB9XG4gICAgaWYgKHR4LmZyb20pIHtcbiAgICAgICAgdHguZnJvbSA9IHV0aWxzLnRvQ2hlY2tzdW1BZGRyZXNzKHR4LmZyb20pO1xuICAgIH1cbiAgICByZXR1cm4gdHg7XG59O1xuLyoqXG4gKiBGb3JtYXRzIHRoZSBvdXRwdXQgb2YgYSB0cmFuc2FjdGlvbiByZWNlaXB0IHRvIGl0cyBwcm9wZXIgdmFsdWVzXG4gKlxuICogQG1ldGhvZCBvdXRwdXRUcmFuc2FjdGlvblJlY2VpcHRGb3JtYXR0ZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWNlaXB0XG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG52YXIgb3V0cHV0VHJhbnNhY3Rpb25SZWNlaXB0Rm9ybWF0dGVyID0gZnVuY3Rpb24gKHJlY2VpcHQpIHtcbiAgICBpZiAodHlwZW9mIHJlY2VpcHQgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUmVjZWl2ZWQgcmVjZWlwdCBpcyBpbnZhbGlkOiAnICsgcmVjZWlwdCk7XG4gICAgfVxuICAgIGlmIChyZWNlaXB0LmJsb2NrTnVtYmVyICE9PSBudWxsKVxuICAgICAgICByZWNlaXB0LmJsb2NrTnVtYmVyID0gdXRpbHMuaGV4VG9OdW1iZXIocmVjZWlwdC5ibG9ja051bWJlcik7XG4gICAgaWYgKHJlY2VpcHQudHJhbnNhY3Rpb25JbmRleCAhPT0gbnVsbClcbiAgICAgICAgcmVjZWlwdC50cmFuc2FjdGlvbkluZGV4ID0gdXRpbHMuaGV4VG9OdW1iZXIocmVjZWlwdC50cmFuc2FjdGlvbkluZGV4KTtcbiAgICByZWNlaXB0LmN1bXVsYXRpdmVHYXNVc2VkID0gdXRpbHMuaGV4VG9OdW1iZXIocmVjZWlwdC5jdW11bGF0aXZlR2FzVXNlZCk7XG4gICAgcmVjZWlwdC5nYXNVc2VkID0gdXRpbHMuaGV4VG9OdW1iZXIocmVjZWlwdC5nYXNVc2VkKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZWNlaXB0LmxvZ3MpKSB7XG4gICAgICAgIHJlY2VpcHQubG9ncyA9IHJlY2VpcHQubG9ncy5tYXAob3V0cHV0TG9nRm9ybWF0dGVyKTtcbiAgICB9XG4gICAgaWYgKHJlY2VpcHQuY29udHJhY3RBZGRyZXNzKSB7XG4gICAgICAgIHJlY2VpcHQuY29udHJhY3RBZGRyZXNzID0gdXRpbHMudG9DaGVja3N1bUFkZHJlc3MocmVjZWlwdC5jb250cmFjdEFkZHJlc3MpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlY2VpcHQuc3RhdHVzICE9PSAndW5kZWZpbmVkJyAmJiByZWNlaXB0LnN0YXR1cyAhPT0gbnVsbCkge1xuICAgICAgICByZWNlaXB0LnN0YXR1cyA9IEJvb2xlYW4ocGFyc2VJbnQocmVjZWlwdC5zdGF0dXMpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlY2VpcHQ7XG59O1xuLyoqXG4gKiBGb3JtYXRzIHRoZSBvdXRwdXQgb2YgYSBibG9jayB0byBpdHMgcHJvcGVyIHZhbHVlc1xuICpcbiAqIEBtZXRob2Qgb3V0cHV0QmxvY2tGb3JtYXR0ZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBibG9ja1xuICogQHJldHVybnMge09iamVjdH1cbiAqL1xudmFyIG91dHB1dEJsb2NrRm9ybWF0dGVyID0gZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgLy8gdHJhbnNmb3JtIHRvIG51bWJlclxuICAgIGJsb2NrLmdhc0xpbWl0ID0gdXRpbHMuaGV4VG9OdW1iZXIoYmxvY2suZ2FzTGltaXQpO1xuICAgIGJsb2NrLmdhc1VzZWQgPSB1dGlscy5oZXhUb051bWJlcihibG9jay5nYXNVc2VkKTtcbiAgICBibG9jay5zaXplID0gdXRpbHMuaGV4VG9OdW1iZXIoYmxvY2suc2l6ZSk7XG4gICAgYmxvY2sudGltZXN0YW1wID0gdXRpbHMuaGV4VG9OdW1iZXIoYmxvY2sudGltZXN0YW1wKTtcbiAgICBpZiAoYmxvY2subnVtYmVyICE9PSBudWxsKVxuICAgICAgICBibG9jay5udW1iZXIgPSB1dGlscy5oZXhUb051bWJlcihibG9jay5udW1iZXIpO1xuICAgIGlmIChibG9jay5kaWZmaWN1bHR5KVxuICAgICAgICBibG9jay5kaWZmaWN1bHR5ID0gb3V0cHV0QmlnTnVtYmVyRm9ybWF0dGVyKGJsb2NrLmRpZmZpY3VsdHkpO1xuICAgIGlmIChibG9jay50b3RhbERpZmZpY3VsdHkpXG4gICAgICAgIGJsb2NrLnRvdGFsRGlmZmljdWx0eSA9IG91dHB1dEJpZ051bWJlckZvcm1hdHRlcihibG9jay50b3RhbERpZmZpY3VsdHkpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGJsb2NrLnRyYW5zYWN0aW9ucykpIHtcbiAgICAgICAgYmxvY2sudHJhbnNhY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIGlmICghKHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJykpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG91dHB1dFRyYW5zYWN0aW9uRm9ybWF0dGVyKGl0ZW0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGJsb2NrLm1pbmVyKVxuICAgICAgICBibG9jay5taW5lciA9IHV0aWxzLnRvQ2hlY2tzdW1BZGRyZXNzKGJsb2NrLm1pbmVyKTtcbiAgICBpZiAoYmxvY2suYmFzZUZlZVBlckdhcylcbiAgICAgICAgYmxvY2suYmFzZUZlZVBlckdhcyA9IHV0aWxzLmhleFRvTnVtYmVyKGJsb2NrLmJhc2VGZWVQZXJHYXMpO1xuICAgIHJldHVybiBibG9jaztcbn07XG4vKipcbiAqIEZvcm1hdHMgdGhlIGlucHV0IG9mIGEgbG9nXG4gKlxuICogQG1ldGhvZCBpbnB1dExvZ0Zvcm1hdHRlclxuICogQHBhcmFtIHtPYmplY3R9IGxvZyBvYmplY3RcbiAqIEByZXR1cm5zIHtPYmplY3R9IGxvZ1xuICovXG52YXIgaW5wdXRMb2dGb3JtYXR0ZXIgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciB0b1RvcGljID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlLmluZGV4T2YoJzB4JykgPT09IDApXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiB1dGlscy5mcm9tVXRmOCh2YWx1ZSk7XG4gICAgfTtcbiAgICBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICBvcHRpb25zID0ge307XG4gICAgLy8gSWYgb3B0aW9ucyAhPT0gdW5kZWZpbmVkLCBkb24ndCBibG93IG91dCBleGlzdGluZyBkYXRhXG4gICAgaWYgKG9wdGlvbnMuZnJvbUJsb2NrID09PSB1bmRlZmluZWQpXG4gICAgICAgIG9wdGlvbnMgPSB7IC4uLm9wdGlvbnMsIGZyb21CbG9jazogJ2xhdGVzdCcgfTtcbiAgICBpZiAob3B0aW9ucy5mcm9tQmxvY2sgfHwgb3B0aW9ucy5mcm9tQmxvY2sgPT09IDApXG4gICAgICAgIG9wdGlvbnMuZnJvbUJsb2NrID0gaW5wdXRCbG9ja051bWJlckZvcm1hdHRlcihvcHRpb25zLmZyb21CbG9jayk7XG4gICAgaWYgKG9wdGlvbnMudG9CbG9jayB8fCBvcHRpb25zLnRvQmxvY2sgPT09IDApXG4gICAgICAgIG9wdGlvbnMudG9CbG9jayA9IGlucHV0QmxvY2tOdW1iZXJGb3JtYXR0ZXIob3B0aW9ucy50b0Jsb2NrKTtcbiAgICAvLyBtYWtlIHN1cmUgdG9waWNzLCBnZXQgY29udmVydGVkIHRvIGhleFxuICAgIG9wdGlvbnMudG9waWNzID0gb3B0aW9ucy50b3BpY3MgfHwgW107XG4gICAgb3B0aW9ucy50b3BpY3MgPSBvcHRpb25zLnRvcGljcy5tYXAoZnVuY3Rpb24gKHRvcGljKSB7XG4gICAgICAgIHJldHVybiAoQXJyYXkuaXNBcnJheSh0b3BpYykpID8gdG9waWMubWFwKHRvVG9waWMpIDogdG9Ub3BpYyh0b3BpYyk7XG4gICAgfSk7XG4gICAgdG9Ub3BpYyA9IG51bGw7XG4gICAgaWYgKG9wdGlvbnMuYWRkcmVzcykge1xuICAgICAgICBvcHRpb25zLmFkZHJlc3MgPSAoQXJyYXkuaXNBcnJheShvcHRpb25zLmFkZHJlc3MpKSA/IG9wdGlvbnMuYWRkcmVzcy5tYXAoZnVuY3Rpb24gKGFkZHIpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dEFkZHJlc3NGb3JtYXR0ZXIoYWRkcik7XG4gICAgICAgIH0pIDogaW5wdXRBZGRyZXNzRm9ybWF0dGVyKG9wdGlvbnMuYWRkcmVzcyk7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xufTtcbi8qKlxuICogRm9ybWF0cyB0aGUgb3V0cHV0IG9mIGEgbG9nXG4gKlxuICogQG1ldGhvZCBvdXRwdXRMb2dGb3JtYXR0ZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBsb2cgb2JqZWN0XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBsb2dcbiAqL1xudmFyIG91dHB1dExvZ0Zvcm1hdHRlciA9IGZ1bmN0aW9uIChsb2cpIHtcbiAgICAvLyBnZW5lcmF0ZSBhIGN1c3RvbSBsb2cgaWRcbiAgICBpZiAodHlwZW9mIGxvZy5ibG9ja0hhc2ggPT09ICdzdHJpbmcnICYmXG4gICAgICAgIHR5cGVvZiBsb2cudHJhbnNhY3Rpb25IYXNoID09PSAnc3RyaW5nJyAmJlxuICAgICAgICB0eXBlb2YgbG9nLmxvZ0luZGV4ID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgc2hhSWQgPSB1dGlscy5zaGEzKGxvZy5ibG9ja0hhc2gucmVwbGFjZSgnMHgnLCAnJykgKyBsb2cudHJhbnNhY3Rpb25IYXNoLnJlcGxhY2UoJzB4JywgJycpICsgbG9nLmxvZ0luZGV4LnJlcGxhY2UoJzB4JywgJycpKTtcbiAgICAgICAgbG9nLmlkID0gJ2xvZ18nICsgc2hhSWQucmVwbGFjZSgnMHgnLCAnJykuc3Vic3RyKDAsIDgpO1xuICAgIH1cbiAgICBlbHNlIGlmICghbG9nLmlkKSB7XG4gICAgICAgIGxvZy5pZCA9IG51bGw7XG4gICAgfVxuICAgIGlmIChsb2cuYmxvY2tOdW1iZXIgIT09IG51bGwpXG4gICAgICAgIGxvZy5ibG9ja051bWJlciA9IHV0aWxzLmhleFRvTnVtYmVyKGxvZy5ibG9ja051bWJlcik7XG4gICAgaWYgKGxvZy50cmFuc2FjdGlvbkluZGV4ICE9PSBudWxsKVxuICAgICAgICBsb2cudHJhbnNhY3Rpb25JbmRleCA9IHV0aWxzLmhleFRvTnVtYmVyKGxvZy50cmFuc2FjdGlvbkluZGV4KTtcbiAgICBpZiAobG9nLmxvZ0luZGV4ICE9PSBudWxsKVxuICAgICAgICBsb2cubG9nSW5kZXggPSB1dGlscy5oZXhUb051bWJlcihsb2cubG9nSW5kZXgpO1xuICAgIGlmIChsb2cuYWRkcmVzcykge1xuICAgICAgICBsb2cuYWRkcmVzcyA9IHV0aWxzLnRvQ2hlY2tzdW1BZGRyZXNzKGxvZy5hZGRyZXNzKTtcbiAgICB9XG4gICAgcmV0dXJuIGxvZztcbn07XG4vKipcbiAqIEZvcm1hdHMgdGhlIGlucHV0IG9mIGEgd2hpc3BlciBwb3N0IGFuZCBjb252ZXJ0cyBhbGwgdmFsdWVzIHRvIEhFWFxuICpcbiAqIEBtZXRob2QgaW5wdXRQb3N0Rm9ybWF0dGVyXG4gKiBAcGFyYW0ge09iamVjdH0gdHJhbnNhY3Rpb24gb2JqZWN0XG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG52YXIgaW5wdXRQb3N0Rm9ybWF0dGVyID0gZnVuY3Rpb24gKHBvc3QpIHtcbiAgICAvLyBwb3N0LnBheWxvYWQgPSB1dGlscy50b0hleChwb3N0LnBheWxvYWQpO1xuICAgIGlmIChwb3N0LnR0bClcbiAgICAgICAgcG9zdC50dGwgPSB1dGlscy5udW1iZXJUb0hleChwb3N0LnR0bCk7XG4gICAgaWYgKHBvc3Qud29ya1RvUHJvdmUpXG4gICAgICAgIHBvc3Qud29ya1RvUHJvdmUgPSB1dGlscy5udW1iZXJUb0hleChwb3N0LndvcmtUb1Byb3ZlKTtcbiAgICBpZiAocG9zdC5wcmlvcml0eSlcbiAgICAgICAgcG9zdC5wcmlvcml0eSA9IHV0aWxzLm51bWJlclRvSGV4KHBvc3QucHJpb3JpdHkpO1xuICAgIC8vIGZhbGxiYWNrXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHBvc3QudG9waWNzKSkge1xuICAgICAgICBwb3N0LnRvcGljcyA9IHBvc3QudG9waWNzID8gW3Bvc3QudG9waWNzXSA6IFtdO1xuICAgIH1cbiAgICAvLyBmb3JtYXQgdGhlIGZvbGxvd2luZyBvcHRpb25zXG4gICAgcG9zdC50b3BpY3MgPSBwb3N0LnRvcGljcy5tYXAoZnVuY3Rpb24gKHRvcGljKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgb25seSBpZiBub3QgaGV4XG4gICAgICAgIHJldHVybiAodG9waWMuaW5kZXhPZignMHgnKSA9PT0gMCkgPyB0b3BpYyA6IHV0aWxzLmZyb21VdGY4KHRvcGljKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcG9zdDtcbn07XG4vKipcbiAqIEZvcm1hdHMgdGhlIG91dHB1dCBvZiBhIHJlY2VpdmVkIHBvc3QgbWVzc2FnZVxuICpcbiAqIEBtZXRob2Qgb3V0cHV0UG9zdEZvcm1hdHRlclxuICogQHBhcmFtIHtPYmplY3R9XG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG52YXIgb3V0cHV0UG9zdEZvcm1hdHRlciA9IGZ1bmN0aW9uIChwb3N0KSB7XG4gICAgcG9zdC5leHBpcnkgPSB1dGlscy5oZXhUb051bWJlcihwb3N0LmV4cGlyeSk7XG4gICAgcG9zdC5zZW50ID0gdXRpbHMuaGV4VG9OdW1iZXIocG9zdC5zZW50KTtcbiAgICBwb3N0LnR0bCA9IHV0aWxzLmhleFRvTnVtYmVyKHBvc3QudHRsKTtcbiAgICBwb3N0LndvcmtQcm92ZWQgPSB1dGlscy5oZXhUb051bWJlcihwb3N0LndvcmtQcm92ZWQpO1xuICAgIC8vIHBvc3QucGF5bG9hZFJhdyA9IHBvc3QucGF5bG9hZDtcbiAgICAvLyBwb3N0LnBheWxvYWQgPSB1dGlscy5oZXhUb0FzY2lpKHBvc3QucGF5bG9hZCk7XG4gICAgLy8gaWYgKHV0aWxzLmlzSnNvbihwb3N0LnBheWxvYWQpKSB7XG4gICAgLy8gICAgIHBvc3QucGF5bG9hZCA9IEpTT04ucGFyc2UocG9zdC5wYXlsb2FkKTtcbiAgICAvLyB9XG4gICAgLy8gZm9ybWF0IHRoZSBmb2xsb3dpbmcgb3B0aW9uc1xuICAgIGlmICghcG9zdC50b3BpY3MpIHtcbiAgICAgICAgcG9zdC50b3BpY3MgPSBbXTtcbiAgICB9XG4gICAgcG9zdC50b3BpY3MgPSBwb3N0LnRvcGljcy5tYXAoZnVuY3Rpb24gKHRvcGljKSB7XG4gICAgICAgIHJldHVybiB1dGlscy50b1V0ZjgodG9waWMpO1xuICAgIH0pO1xuICAgIHJldHVybiBwb3N0O1xufTtcbnZhciBpbnB1dEFkZHJlc3NGb3JtYXR0ZXIgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICAgIHZhciBpYmFuID0gbmV3IEliYW4oYWRkcmVzcyk7XG4gICAgaWYgKGliYW4uaXNWYWxpZCgpICYmIGliYW4uaXNEaXJlY3QoKSkge1xuICAgICAgICByZXR1cm4gaWJhbi50b0FkZHJlc3MoKS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbiAgICBlbHNlIGlmICh1dGlscy5pc0FkZHJlc3MoYWRkcmVzcykpIHtcbiAgICAgICAgcmV0dXJuICcweCcgKyBhZGRyZXNzLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgnMHgnLCAnJyk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgUHJvdmlkZWQgYWRkcmVzcyAke2FkZHJlc3N9IGlzIGludmFsaWQsIHRoZSBjYXBpdGFsaXphdGlvbiBjaGVja3N1bSB0ZXN0IGZhaWxlZCwgb3IgaXQncyBhbiBpbmRpcmVjdCBJQkFOIGFkZHJlc3Mgd2hpY2ggY2FuJ3QgYmUgY29udmVydGVkLmApO1xufTtcbnZhciBvdXRwdXRTeW5jaW5nRm9ybWF0dGVyID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgIHJlc3VsdC5zdGFydGluZ0Jsb2NrID0gdXRpbHMuaGV4VG9OdW1iZXIocmVzdWx0LnN0YXJ0aW5nQmxvY2spO1xuICAgIHJlc3VsdC5jdXJyZW50QmxvY2sgPSB1dGlscy5oZXhUb051bWJlcihyZXN1bHQuY3VycmVudEJsb2NrKTtcbiAgICByZXN1bHQuaGlnaGVzdEJsb2NrID0gdXRpbHMuaGV4VG9OdW1iZXIocmVzdWx0LmhpZ2hlc3RCbG9jayk7XG4gICAgaWYgKHJlc3VsdC5rbm93blN0YXRlcykge1xuICAgICAgICByZXN1bHQua25vd25TdGF0ZXMgPSB1dGlscy5oZXhUb051bWJlcihyZXN1bHQua25vd25TdGF0ZXMpO1xuICAgICAgICByZXN1bHQucHVsbGVkU3RhdGVzID0gdXRpbHMuaGV4VG9OdW1iZXIocmVzdWx0LnB1bGxlZFN0YXRlcyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaW5wdXREZWZhdWx0QmxvY2tOdW1iZXJGb3JtYXR0ZXI6IGlucHV0RGVmYXVsdEJsb2NrTnVtYmVyRm9ybWF0dGVyLFxuICAgIGlucHV0QmxvY2tOdW1iZXJGb3JtYXR0ZXI6IGlucHV0QmxvY2tOdW1iZXJGb3JtYXR0ZXIsXG4gICAgaW5wdXRDYWxsRm9ybWF0dGVyOiBpbnB1dENhbGxGb3JtYXR0ZXIsXG4gICAgaW5wdXRUcmFuc2FjdGlvbkZvcm1hdHRlcjogaW5wdXRUcmFuc2FjdGlvbkZvcm1hdHRlcixcbiAgICBpbnB1dEFkZHJlc3NGb3JtYXR0ZXI6IGlucHV0QWRkcmVzc0Zvcm1hdHRlcixcbiAgICBpbnB1dFBvc3RGb3JtYXR0ZXI6IGlucHV0UG9zdEZvcm1hdHRlcixcbiAgICBpbnB1dExvZ0Zvcm1hdHRlcjogaW5wdXRMb2dGb3JtYXR0ZXIsXG4gICAgaW5wdXRTaWduRm9ybWF0dGVyOiBpbnB1dFNpZ25Gb3JtYXR0ZXIsXG4gICAgaW5wdXRTdG9yYWdlS2V5c0Zvcm1hdHRlcjogaW5wdXRTdG9yYWdlS2V5c0Zvcm1hdHRlcixcbiAgICBvdXRwdXRQcm9vZkZvcm1hdHRlcjogb3V0cHV0UHJvb2ZGb3JtYXR0ZXIsXG4gICAgb3V0cHV0QmlnTnVtYmVyRm9ybWF0dGVyOiBvdXRwdXRCaWdOdW1iZXJGb3JtYXR0ZXIsXG4gICAgb3V0cHV0VHJhbnNhY3Rpb25Gb3JtYXR0ZXI6IG91dHB1dFRyYW5zYWN0aW9uRm9ybWF0dGVyLFxuICAgIG91dHB1dFRyYW5zYWN0aW9uUmVjZWlwdEZvcm1hdHRlcjogb3V0cHV0VHJhbnNhY3Rpb25SZWNlaXB0Rm9ybWF0dGVyLFxuICAgIG91dHB1dEJsb2NrRm9ybWF0dGVyOiBvdXRwdXRCbG9ja0Zvcm1hdHRlcixcbiAgICBvdXRwdXRMb2dGb3JtYXR0ZXI6IG91dHB1dExvZ0Zvcm1hdHRlcixcbiAgICBvdXRwdXRQb3N0Rm9ybWF0dGVyOiBvdXRwdXRQb3N0Rm9ybWF0dGVyLFxuICAgIG91dHB1dFN5bmNpbmdGb3JtYXR0ZXI6IG91dHB1dFN5bmNpbmdGb3JtYXR0ZXJcbn07XG4iLCIvKlxuICAgIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiAgICB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiAgICB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAgICBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuLyoqXG4gKiBAZmlsZSBpbmRleC5qc1xuICogQGF1dGhvciBGYWJpYW4gVm9nZWxzdGVsbGVyIDxmYWJpYW5AZXRoZXJldW0ub3JnPlxuICogQGRhdGUgMjAxN1xuICovXG5cInVzZSBzdHJpY3RcIjtcbnZhciBlcnJvcnMgPSByZXF1aXJlKCcuL2Vycm9ycycpO1xudmFyIGZvcm1hdHRlcnMgPSByZXF1aXJlKCcuL2Zvcm1hdHRlcnMnKTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGVycm9yczogZXJyb3JzLFxuICAgIGZvcm1hdHRlcnM6IGZvcm1hdHRlcnNcbn07XG4iLCIvKlxuICAgIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiAgICB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiAgICB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAgICBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuLyoqXG4gKiBAZmlsZSBpbmRleC5qc1xuICogQGF1dGhvciBGYWJpYW4gVm9nZWxzdGVsbGVyIDxmYWJpYW5AZXRoZXJldW0ub3JnPlxuICogQGF1dGhvciBNYXJlayBLb3Rld2ljeiA8bWFyZWtAcGFyaXR5LmlvPlxuICogQGRhdGUgMjAxN1xuICovXG4ndXNlIHN0cmljdCc7XG52YXIgZXJyb3JzID0gcmVxdWlyZSgnd2ViMy1jb3JlLWhlbHBlcnMnKS5lcnJvcnM7XG52YXIgZm9ybWF0dGVycyA9IHJlcXVpcmUoJ3dlYjMtY29yZS1oZWxwZXJzJykuZm9ybWF0dGVycztcbnZhciB1dGlscyA9IHJlcXVpcmUoJ3dlYjMtdXRpbHMnKTtcbnZhciBwcm9taUV2ZW50ID0gcmVxdWlyZSgnd2ViMy1jb3JlLXByb21pZXZlbnQnKTtcbnZhciBTdWJzY3JpcHRpb25zID0gcmVxdWlyZSgnd2ViMy1jb3JlLXN1YnNjcmlwdGlvbnMnKS5zdWJzY3JpcHRpb25zO1xudmFyIEV0aGVyc1RyYW5zYWN0aW9uVXRpbHMgPSByZXF1aXJlKCdAZXRoZXJzcHJvamVjdC90cmFuc2FjdGlvbnMnKTtcbnZhciBNZXRob2QgPSBmdW5jdGlvbiBNZXRob2Qob3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucy5jYWxsIHx8ICFvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXaGVuIGNyZWF0aW5nIGEgbWV0aG9kIHlvdSBuZWVkIHRvIHByb3ZpZGUgYXQgbGVhc3QgdGhlIFwibmFtZVwiIGFuZCBcImNhbGxcIiBwcm9wZXJ0eS4nKTtcbiAgICB9XG4gICAgdGhpcy5uYW1lID0gb3B0aW9ucy5uYW1lO1xuICAgIHRoaXMuY2FsbCA9IG9wdGlvbnMuY2FsbDtcbiAgICB0aGlzLnBhcmFtcyA9IG9wdGlvbnMucGFyYW1zIHx8IDA7XG4gICAgdGhpcy5pbnB1dEZvcm1hdHRlciA9IG9wdGlvbnMuaW5wdXRGb3JtYXR0ZXI7XG4gICAgdGhpcy5vdXRwdXRGb3JtYXR0ZXIgPSBvcHRpb25zLm91dHB1dEZvcm1hdHRlcjtcbiAgICB0aGlzLnRyYW5zZm9ybVBheWxvYWQgPSBvcHRpb25zLnRyYW5zZm9ybVBheWxvYWQ7XG4gICAgdGhpcy5leHRyYUZvcm1hdHRlcnMgPSBvcHRpb25zLmV4dHJhRm9ybWF0dGVycztcbiAgICB0aGlzLmFiaUNvZGVyID0gb3B0aW9ucy5hYmlDb2RlcjsgLy8gV2lsbCBiZSB1c2VkIHRvIGVuY29kZSB0aGUgcmV2ZXJ0IHJlYXNvbiBzdHJpbmdcbiAgICB0aGlzLnJlcXVlc3RNYW5hZ2VyID0gb3B0aW9ucy5yZXF1ZXN0TWFuYWdlcjtcbiAgICAvLyByZWZlcmVuY2UgdG8gZXRoLmFjY291bnRzXG4gICAgdGhpcy5hY2NvdW50cyA9IG9wdGlvbnMuYWNjb3VudHM7XG4gICAgdGhpcy5kZWZhdWx0QmxvY2sgPSBvcHRpb25zLmRlZmF1bHRCbG9jayB8fCAnbGF0ZXN0JztcbiAgICB0aGlzLmRlZmF1bHRBY2NvdW50ID0gb3B0aW9ucy5kZWZhdWx0QWNjb3VudCB8fCBudWxsO1xuICAgIHRoaXMudHJhbnNhY3Rpb25CbG9ja1RpbWVvdXQgPSBvcHRpb25zLnRyYW5zYWN0aW9uQmxvY2tUaW1lb3V0IHx8IDUwO1xuICAgIHRoaXMudHJhbnNhY3Rpb25Db25maXJtYXRpb25CbG9ja3MgPSBvcHRpb25zLnRyYW5zYWN0aW9uQ29uZmlybWF0aW9uQmxvY2tzIHx8IDI0O1xuICAgIHRoaXMudHJhbnNhY3Rpb25Qb2xsaW5nVGltZW91dCA9IG9wdGlvbnMudHJhbnNhY3Rpb25Qb2xsaW5nVGltZW91dCB8fCA3NTA7XG4gICAgdGhpcy5ibG9ja0hlYWRlclRpbWVvdXQgPSBvcHRpb25zLmJsb2NrSGVhZGVyVGltZW91dCB8fCAxMDsgLy8gMTAgc2Vjb25kc1xuICAgIHRoaXMuZGVmYXVsdENvbW1vbiA9IG9wdGlvbnMuZGVmYXVsdENvbW1vbjtcbiAgICB0aGlzLmRlZmF1bHRDaGFpbiA9IG9wdGlvbnMuZGVmYXVsdENoYWluO1xuICAgIHRoaXMuZGVmYXVsdEhhcmRmb3JrID0gb3B0aW9ucy5kZWZhdWx0SGFyZGZvcms7XG4gICAgdGhpcy5oYW5kbGVSZXZlcnQgPSBvcHRpb25zLmhhbmRsZVJldmVydDtcbn07XG5NZXRob2QucHJvdG90eXBlLnNldFJlcXVlc3RNYW5hZ2VyID0gZnVuY3Rpb24gKHJlcXVlc3RNYW5hZ2VyLCBhY2NvdW50cykge1xuICAgIHRoaXMucmVxdWVzdE1hbmFnZXIgPSByZXF1ZXN0TWFuYWdlcjtcbiAgICAvLyByZWZlcmVuY2UgdG8gZXRoLmFjY291bnRzXG4gICAgaWYgKGFjY291bnRzKSB7XG4gICAgICAgIHRoaXMuYWNjb3VudHMgPSBhY2NvdW50cztcbiAgICB9XG59O1xuTWV0aG9kLnByb3RvdHlwZS5jcmVhdGVGdW5jdGlvbiA9IGZ1bmN0aW9uIChyZXF1ZXN0TWFuYWdlciwgYWNjb3VudHMpIHtcbiAgICB2YXIgZnVuYyA9IHRoaXMuYnVpbGRDYWxsKCk7XG4gICAgZnVuYy5jYWxsID0gdGhpcy5jYWxsO1xuICAgIHRoaXMuc2V0UmVxdWVzdE1hbmFnZXIocmVxdWVzdE1hbmFnZXIgfHwgdGhpcy5yZXF1ZXN0TWFuYWdlciwgYWNjb3VudHMgfHwgdGhpcy5hY2NvdW50cyk7XG4gICAgcmV0dXJuIGZ1bmM7XG59O1xuTWV0aG9kLnByb3RvdHlwZS5hdHRhY2hUb09iamVjdCA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICB2YXIgZnVuYyA9IHRoaXMuYnVpbGRDYWxsKCk7XG4gICAgZnVuYy5jYWxsID0gdGhpcy5jYWxsO1xuICAgIHZhciBuYW1lID0gdGhpcy5uYW1lLnNwbGl0KCcuJyk7XG4gICAgaWYgKG5hbWUubGVuZ3RoID4gMSkge1xuICAgICAgICBvYmpbbmFtZVswXV0gPSBvYmpbbmFtZVswXV0gfHwge307XG4gICAgICAgIG9ialtuYW1lWzBdXVtuYW1lWzFdXSA9IGZ1bmM7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBvYmpbbmFtZVswXV0gPSBmdW5jO1xuICAgIH1cbn07XG4vKipcbiAqIFNob3VsZCBiZSB1c2VkIHRvIGRldGVybWluZSBuYW1lIG9mIHRoZSBqc29ucnBjIG1ldGhvZCBiYXNlZCBvbiBhcmd1bWVudHNcbiAqXG4gKiBAbWV0aG9kIGdldENhbGxcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3VtZW50c1xuICogQHJldHVybiB7U3RyaW5nfSBuYW1lIG9mIGpzb25ycGMgbWV0aG9kXG4gKi9cbk1ldGhvZC5wcm90b3R5cGUuZ2V0Q2FsbCA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLmNhbGwgPT09ICdmdW5jdGlvbicgPyB0aGlzLmNhbGwoYXJncykgOiB0aGlzLmNhbGw7XG59O1xuLyoqXG4gKiBTaG91bGQgYmUgdXNlZCB0byBleHRyYWN0IGNhbGxiYWNrIGZyb20gYXJyYXkgb2YgYXJndW1lbnRzLiBNb2RpZmllcyBpbnB1dCBwYXJhbVxuICpcbiAqIEBtZXRob2QgZXh0cmFjdENhbGxiYWNrXG4gKiBAcGFyYW0ge0FycmF5fSBhcmd1bWVudHNcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufE51bGx9IGNhbGxiYWNrLCBpZiBleGlzdHNcbiAqL1xuTWV0aG9kLnByb3RvdHlwZS5leHRyYWN0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoYXJncykge1xuICAgIGlmICh0eXBlb2YgKGFyZ3NbYXJncy5sZW5ndGggLSAxXSkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3MucG9wKCk7IC8vIG1vZGlmeSB0aGUgYXJncyBhcnJheSFcbiAgICB9XG59O1xuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIGNoZWNrIGlmIHRoZSBudW1iZXIgb2YgYXJndW1lbnRzIGlzIGNvcnJlY3RcbiAqXG4gKiBAbWV0aG9kIHZhbGlkYXRlQXJnc1xuICogQHBhcmFtIHtBcnJheX0gYXJndW1lbnRzXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgaXQgaXMgbm90XG4gKi9cbk1ldGhvZC5wcm90b3R5cGUudmFsaWRhdGVBcmdzID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICBpZiAoYXJncy5sZW5ndGggIT09IHRoaXMucGFyYW1zKSB7XG4gICAgICAgIHRocm93IGVycm9ycy5JbnZhbGlkTnVtYmVyT2ZQYXJhbXMoYXJncy5sZW5ndGgsIHRoaXMucGFyYW1zLCB0aGlzLm5hbWUpO1xuICAgIH1cbn07XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gZm9ybWF0IGlucHV0IGFyZ3Mgb2YgbWV0aG9kXG4gKlxuICogQG1ldGhvZCBmb3JtYXRJbnB1dFxuICogQHBhcmFtIHtBcnJheX1cbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5NZXRob2QucHJvdG90eXBlLmZvcm1hdElucHV0ID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIGlmICghdGhpcy5pbnB1dEZvcm1hdHRlcikge1xuICAgICAgICByZXR1cm4gYXJncztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuaW5wdXRGb3JtYXR0ZXIubWFwKGZ1bmN0aW9uIChmb3JtYXR0ZXIsIGluZGV4KSB7XG4gICAgICAgIC8vIGJpbmQgdGhpcyBmb3IgZGVmYXVsdEJsb2NrLCBhbmQgZGVmYXVsdEFjY291bnRcbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlciA/IGZvcm1hdHRlci5jYWxsKF90aGlzLCBhcmdzW2luZGV4XSkgOiBhcmdzW2luZGV4XTtcbiAgICB9KTtcbn07XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gZm9ybWF0IG91dHB1dChyZXN1bHQpIG9mIG1ldGhvZFxuICpcbiAqIEBtZXRob2QgZm9ybWF0T3V0cHV0XG4gKiBAcGFyYW0ge09iamVjdH1cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuTWV0aG9kLnByb3RvdHlwZS5mb3JtYXRPdXRwdXQgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQubWFwKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5vdXRwdXRGb3JtYXR0ZXIgJiYgcmVzID8gX3RoaXMub3V0cHV0Rm9ybWF0dGVyKHJlcykgOiByZXM7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3V0cHV0Rm9ybWF0dGVyICYmIHJlc3VsdCA/IHRoaXMub3V0cHV0Rm9ybWF0dGVyKHJlc3VsdCkgOiByZXN1bHQ7XG4gICAgfVxufTtcbi8qKlxuICogU2hvdWxkIGNyZWF0ZSBwYXlsb2FkIGZyb20gZ2l2ZW4gaW5wdXQgYXJnc1xuICpcbiAqIEBtZXRob2QgdG9QYXlsb2FkXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbk1ldGhvZC5wcm90b3R5cGUudG9QYXlsb2FkID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICB2YXIgY2FsbCA9IHRoaXMuZ2V0Q2FsbChhcmdzKTtcbiAgICB2YXIgY2FsbGJhY2sgPSB0aGlzLmV4dHJhY3RDYWxsYmFjayhhcmdzKTtcbiAgICB2YXIgcGFyYW1zID0gdGhpcy5mb3JtYXRJbnB1dChhcmdzKTtcbiAgICB0aGlzLnZhbGlkYXRlQXJncyhwYXJhbXMpO1xuICAgIHZhciBwYXlsb2FkID0ge1xuICAgICAgICBtZXRob2Q6IGNhbGwsXG4gICAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgICBjYWxsYmFjazogY2FsbGJhY2tcbiAgICB9O1xuICAgIGlmICh0aGlzLnRyYW5zZm9ybVBheWxvYWQpIHtcbiAgICAgICAgcGF5bG9hZCA9IHRoaXMudHJhbnNmb3JtUGF5bG9hZChwYXlsb2FkKTtcbiAgICB9XG4gICAgcmV0dXJuIHBheWxvYWQ7XG59O1xuTWV0aG9kLnByb3RvdHlwZS5fY29uZmlybVRyYW5zYWN0aW9uID0gZnVuY3Rpb24gKGRlZmVyLCByZXN1bHQsIHBheWxvYWQpIHtcbiAgICB2YXIgbWV0aG9kID0gdGhpcywgcHJvbWlzZVJlc29sdmVkID0gZmFsc2UsIGNhblVuc3Vic2NyaWJlID0gdHJ1ZSwgdGltZW91dENvdW50ID0gMCwgY29uZmlybWF0aW9uQ291bnQgPSAwLCBpbnRlcnZhbElkID0gbnVsbCwgYmxvY2tIZWFkZXJUaW1lb3V0SWQgPSBudWxsLCBsYXN0QmxvY2sgPSBudWxsLCByZWNlaXB0SlNPTiA9ICcnLCBnYXNQcm92aWRlZCA9ICgoISFwYXlsb2FkLnBhcmFtc1swXSAmJiB0eXBlb2YgcGF5bG9hZC5wYXJhbXNbMF0gPT09ICdvYmplY3QnKSAmJiBwYXlsb2FkLnBhcmFtc1swXS5nYXMpID8gcGF5bG9hZC5wYXJhbXNbMF0uZ2FzIDogbnVsbCwgaXNDb250cmFjdERlcGxveW1lbnQgPSAoISFwYXlsb2FkLnBhcmFtc1swXSAmJiB0eXBlb2YgcGF5bG9hZC5wYXJhbXNbMF0gPT09ICdvYmplY3QnKSAmJlxuICAgICAgICBwYXlsb2FkLnBhcmFtc1swXS5kYXRhICYmXG4gICAgICAgIHBheWxvYWQucGFyYW1zWzBdLmZyb20gJiZcbiAgICAgICAgIXBheWxvYWQucGFyYW1zWzBdLnRvLCBoYXNCeXRlY29kZSA9IGlzQ29udHJhY3REZXBsb3ltZW50ICYmIHBheWxvYWQucGFyYW1zWzBdLmRhdGEubGVuZ3RoID4gMjtcbiAgICAvLyBhZGQgY3VzdG9tIHNlbmQgTWV0aG9kc1xuICAgIHZhciBfZXRoZXJldW1DYWxscyA9IFtcbiAgICAgICAgbmV3IE1ldGhvZCh7XG4gICAgICAgICAgICBuYW1lOiAnZ2V0QmxvY2tCeU51bWJlcicsXG4gICAgICAgICAgICBjYWxsOiAnZXRoX2dldEJsb2NrQnlOdW1iZXInLFxuICAgICAgICAgICAgcGFyYW1zOiAyLFxuICAgICAgICAgICAgaW5wdXRGb3JtYXR0ZXI6IFtmb3JtYXR0ZXJzLmlucHV0QmxvY2tOdW1iZXJGb3JtYXR0ZXIsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhdmFsO1xuICAgICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgb3V0cHV0Rm9ybWF0dGVyOiBmb3JtYXR0ZXJzLm91dHB1dEJsb2NrRm9ybWF0dGVyXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgTWV0aG9kKHtcbiAgICAgICAgICAgIG5hbWU6ICdnZXRUcmFuc2FjdGlvblJlY2VpcHQnLFxuICAgICAgICAgICAgY2FsbDogJ2V0aF9nZXRUcmFuc2FjdGlvblJlY2VpcHQnLFxuICAgICAgICAgICAgcGFyYW1zOiAxLFxuICAgICAgICAgICAgaW5wdXRGb3JtYXR0ZXI6IFtudWxsXSxcbiAgICAgICAgICAgIG91dHB1dEZvcm1hdHRlcjogZm9ybWF0dGVycy5vdXRwdXRUcmFuc2FjdGlvblJlY2VpcHRGb3JtYXR0ZXJcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBNZXRob2Qoe1xuICAgICAgICAgICAgbmFtZTogJ2dldENvZGUnLFxuICAgICAgICAgICAgY2FsbDogJ2V0aF9nZXRDb2RlJyxcbiAgICAgICAgICAgIHBhcmFtczogMixcbiAgICAgICAgICAgIGlucHV0Rm9ybWF0dGVyOiBbZm9ybWF0dGVycy5pbnB1dEFkZHJlc3NGb3JtYXR0ZXIsIGZvcm1hdHRlcnMuaW5wdXREZWZhdWx0QmxvY2tOdW1iZXJGb3JtYXR0ZXJdXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgTWV0aG9kKHtcbiAgICAgICAgICAgIG5hbWU6ICdnZXRUcmFuc2FjdGlvbkJ5SGFzaCcsXG4gICAgICAgICAgICBjYWxsOiAnZXRoX2dldFRyYW5zYWN0aW9uQnlIYXNoJyxcbiAgICAgICAgICAgIHBhcmFtczogMSxcbiAgICAgICAgICAgIGlucHV0Rm9ybWF0dGVyOiBbbnVsbF0sXG4gICAgICAgICAgICBvdXRwdXRGb3JtYXR0ZXI6IGZvcm1hdHRlcnMub3V0cHV0VHJhbnNhY3Rpb25Gb3JtYXR0ZXJcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBTdWJzY3JpcHRpb25zKHtcbiAgICAgICAgICAgIG5hbWU6ICdzdWJzY3JpYmUnLFxuICAgICAgICAgICAgdHlwZTogJ2V0aCcsXG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgJ25ld0Jsb2NrSGVhZGVycyc6IHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uTmFtZTogJ25ld0hlYWRzJyxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiAwLFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXRGb3JtYXR0ZXI6IGZvcm1hdHRlcnMub3V0cHV0QmxvY2tGb3JtYXR0ZXJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgXTtcbiAgICAvLyBhdHRhY2ggbWV0aG9kcyB0byB0aGlzLl9ldGhlcmV1bUNhbGxcbiAgICB2YXIgX2V0aGVyZXVtQ2FsbCA9IHt9O1xuICAgIF9ldGhlcmV1bUNhbGxzLmZvckVhY2gobXRoZCA9PiB7XG4gICAgICAgIG10aGQuYXR0YWNoVG9PYmplY3QoX2V0aGVyZXVtQ2FsbCk7XG4gICAgICAgIG10aGQucmVxdWVzdE1hbmFnZXIgPSBtZXRob2QucmVxdWVzdE1hbmFnZXI7IC8vIGFzc2lnbiByYXRoZXIgdGhhbiBjYWxsIHNldFJlcXVlc3RNYW5hZ2VyKClcbiAgICB9KTtcbiAgICAvLyBmaXJlIFwicmVjZWlwdFwiIGFuZCBjb25maXJtYXRpb24gZXZlbnRzIGFuZCByZXNvbHZlIGFmdGVyXG4gICAgdmFyIGNoZWNrQ29uZmlybWF0aW9uID0gZnVuY3Rpb24gKGV4aXN0aW5nUmVjZWlwdCwgaXNQb2xsaW5nLCBlcnIsIGJsb2NrSGVhZGVyLCBzdWIpIHtcbiAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBmYWtlIHVuc3Vic2NyaWJlXG4gICAgICAgICAgICBpZiAoIXN1Yikge1xuICAgICAgICAgICAgICAgIHN1YiA9IHtcbiAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoYmxvY2tIZWFkZXJUaW1lb3V0SWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIHdlIGhhdmUgYSB2YWxpZCByZWNlaXB0IHdlIGRvbid0IG5lZWQgdG8gc2VuZCBhIHJlcXVlc3RcbiAgICAgICAgICAgIHJldHVybiAoZXhpc3RpbmdSZWNlaXB0ID8gcHJvbWlFdmVudC5yZXNvbHZlKGV4aXN0aW5nUmVjZWlwdCkgOiBfZXRoZXJldW1DYWxsLmdldFRyYW5zYWN0aW9uUmVjZWlwdChyZXN1bHQpKVxuICAgICAgICAgICAgICAgIC8vIGNhdGNoIGVycm9yIGZyb20gcmVxdWVzdGluZyByZWNlaXB0XG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICBwcm9taXNlUmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHV0aWxzLl9maXJlRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIGNoZWNrIGZvciB0cmFuc2FjdGlvbiByZWNlaXB0OicsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGVyclxuICAgICAgICAgICAgICAgIH0sIGRlZmVyLmV2ZW50RW1pdHRlciwgZGVmZXIucmVqZWN0KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLy8gaWYgQ09ORklSTUFUSU9OIGxpc3RlbmVyIGV4aXN0cyBjaGVjayBmb3IgY29uZmlybWF0aW9ucywgYnkgc2V0dGluZyBjYW5VbnN1YnNjcmliZSA9IGZhbHNlXG4gICAgICAgICAgICAgICAgLnRoZW4oYXN5bmMgZnVuY3Rpb24gKHJlY2VpcHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXJlY2VpcHQgfHwgIXJlY2VpcHQuYmxvY2tIYXNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVjZWlwdCBtaXNzaW5nIG9yIGJsb2NrSGFzaCBudWxsJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGFwcGx5IGV4dHJhIGZvcm1hdHRlcnNcbiAgICAgICAgICAgICAgICBpZiAobWV0aG9kLmV4dHJhRm9ybWF0dGVycyAmJiBtZXRob2QuZXh0cmFGb3JtYXR0ZXJzLnJlY2VpcHRGb3JtYXR0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVjZWlwdCA9IG1ldGhvZC5leHRyYUZvcm1hdHRlcnMucmVjZWlwdEZvcm1hdHRlcihyZWNlaXB0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgY29uZmlybWF0aW9uIGxpc3RlbmVyIGV4aXN0c1xuICAgICAgICAgICAgICAgIGlmIChkZWZlci5ldmVudEVtaXR0ZXIubGlzdGVuZXJzKCdjb25maXJtYXRpb24nKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBibG9jaztcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgd2FzIGFuIGltbWVkaWF0ZWx5IHJldHJpZXZlZCByZWNlaXB0LCBpdCdzIGFscmVhZHlcbiAgICAgICAgICAgICAgICAgICAgLy8gYmVlbiBjb25maXJtZWQgYnkgdGhlIGRpcmVjdCBjYWxsIHRvIGNoZWNrQ29uZmlybWF0aW9uIG5lZWRlZFxuICAgICAgICAgICAgICAgICAgICAvLyBmb3IgcGFyaXR5IGluc3RhbnQtc2VhbFxuICAgICAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdSZWNlaXB0ID09PSB1bmRlZmluZWQgfHwgY29uZmlybWF0aW9uQ291bnQgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCBsYXRlc3QgYmxvY2sgdG8gZW1pdCB3aXRoIGNvbmZpcm1hdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhdGVzdEJsb2NrID0gYXdhaXQgX2V0aGVyZXVtQ2FsbC5nZXRCbG9ja0J5TnVtYmVyKCdsYXRlc3QnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYXRlc3RCbG9ja0hhc2ggPSBsYXRlc3RCbG9jayA/IGxhdGVzdEJsb2NrLmhhc2ggOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzUG9sbGluZykgeyAvLyBDaGVjayBpZiBhY3R1YWxseSBhIG5ldyBibG9jayBpcyBleGlzdGluZyBvbiBwb2xsaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RCbG9jaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9jayA9IGF3YWl0IF9ldGhlcmV1bUNhbGwuZ2V0QmxvY2tCeU51bWJlcihsYXN0QmxvY2subnVtYmVyICsgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChibG9jaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEJsb2NrID0gYmxvY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlci5ldmVudEVtaXR0ZXIuZW1pdCgnY29uZmlybWF0aW9uJywgY29uZmlybWF0aW9uQ291bnQsIHJlY2VpcHQsIGxhdGVzdEJsb2NrSGFzaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrID0gYXdhaXQgX2V0aGVyZXVtQ2FsbC5nZXRCbG9ja0J5TnVtYmVyKHJlY2VpcHQuYmxvY2tOdW1iZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0QmxvY2sgPSBibG9jaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXIuZXZlbnRFbWl0dGVyLmVtaXQoJ2NvbmZpcm1hdGlvbicsIGNvbmZpcm1hdGlvbkNvdW50LCByZWNlaXB0LCBsYXRlc3RCbG9ja0hhc2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVyLmV2ZW50RW1pdHRlci5lbWl0KCdjb25maXJtYXRpb24nLCBjb25maXJtYXRpb25Db3VudCwgcmVjZWlwdCwgbGF0ZXN0QmxvY2tIYXNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoKGlzUG9sbGluZyAmJiBibG9jaykgfHwgIWlzUG9sbGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybWF0aW9uQ291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYW5VbnN1YnNjcmliZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlybWF0aW9uQ291bnQgPT09IG1ldGhvZC50cmFuc2FjdGlvbkNvbmZpcm1hdGlvbkJsb2NrcyArIDEpIHsgLy8gYWRkIDEgc28gd2UgYWNjb3VudCBmb3IgY29uZiAwXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVyLmV2ZW50RW1pdHRlci5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWlwdDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLy8gQ0hFQ0sgZm9yIENPTlRSQUNUIERFUExPWU1FTlRcbiAgICAgICAgICAgICAgICAudGhlbihhc3luYyBmdW5jdGlvbiAocmVjZWlwdCkge1xuICAgICAgICAgICAgICAgIGlmIChpc0NvbnRyYWN0RGVwbG95bWVudCAmJiAhcHJvbWlzZVJlc29sdmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVjZWlwdC5jb250cmFjdEFkZHJlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYW5VbnN1YnNjcmliZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2VSZXNvbHZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5fZmlyZUVycm9yKGVycm9ycy5Ob0NvbnRyYWN0QWRkcmVzc0ZvdW5kRXJyb3IocmVjZWlwdCksIGRlZmVyLmV2ZW50RW1pdHRlciwgZGVmZXIucmVqZWN0LCBudWxsLCByZWNlaXB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgY29kZTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUgPSBhd2FpdCBfZXRoZXJldW1DYWxsLmdldENvZGUocmVjZWlwdC5jb250cmFjdEFkZHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlnbm9yZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBJZiBkZXBsb3ltZW50IGlzIHN0YXR1cy50cnVlIGFuZCB0aGVyZSB3YXMgYSByZWFsXG4gICAgICAgICAgICAgICAgICAgIC8vIGJ5dGVjb2RlIHN0cmluZywgYXNzdW1lIGl0IHdhcyBzdWNjZXNzZnVsLlxuICAgICAgICAgICAgICAgICAgICB2YXIgZGVwbG95bWVudFN1Y2Nlc3MgPSByZWNlaXB0LnN0YXR1cyA9PT0gdHJ1ZSAmJiBoYXNCeXRlY29kZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlcGxveW1lbnRTdWNjZXNzIHx8IGNvZGUubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXIuZXZlbnRFbWl0dGVyLmVtaXQoJ3JlY2VpcHQnLCByZWNlaXB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGNvbnRyYWN0LCByZXR1cm4gaW5zdGFuY2UgaW5zdGVhZCBvZiByZWNlaXB0XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWV0aG9kLmV4dHJhRm9ybWF0dGVycyAmJiBtZXRob2QuZXh0cmFGb3JtYXR0ZXJzLmNvbnRyYWN0RGVwbG95Rm9ybWF0dGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXIucmVzb2x2ZShtZXRob2QuZXh0cmFGb3JtYXR0ZXJzLmNvbnRyYWN0RGVwbG95Rm9ybWF0dGVyKHJlY2VpcHQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVyLnJlc29sdmUocmVjZWlwdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBuZWVkIHRvIHJlbW92ZSBsaXN0ZW5lcnMsIGFzIHRoZXkgYXJlbid0IHJlbW92ZWQgYXV0b21hdGljYWxseSB3aGVuIHN1Y2Nlc2Z1bGxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYW5VbnN1YnNjcmliZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVyLmV2ZW50RW1pdHRlci5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLl9maXJlRXJyb3IoZXJyb3JzLkNvbnRyYWN0Q29kZU5vdFN0b3JlZEVycm9yKHJlY2VpcHQpLCBkZWZlci5ldmVudEVtaXR0ZXIsIGRlZmVyLnJlamVjdCwgbnVsbCwgcmVjZWlwdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhblVuc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwcm9taXNlUmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWlwdDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLy8gQ0hFQ0sgZm9yIG5vcm1hbCB0eCBjaGVjayBmb3IgcmVjZWlwdCBvbmx5XG4gICAgICAgICAgICAgICAgLnRoZW4oYXN5bmMgZnVuY3Rpb24gKHJlY2VpcHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzQ29udHJhY3REZXBsb3ltZW50ICYmICFwcm9taXNlUmVzb2x2ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWNlaXB0Lm91dE9mR2FzICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoIWdhc1Byb3ZpZGVkIHx8IGdhc1Byb3ZpZGVkICE9PSByZWNlaXB0Lmdhc1VzZWQpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAocmVjZWlwdC5zdGF0dXMgPT09IHRydWUgfHwgcmVjZWlwdC5zdGF0dXMgPT09ICcweDEnIHx8IHR5cGVvZiByZWNlaXB0LnN0YXR1cyA9PT0gJ3VuZGVmaW5lZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlci5ldmVudEVtaXR0ZXIuZW1pdCgncmVjZWlwdCcsIHJlY2VpcHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXIucmVzb2x2ZShyZWNlaXB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5lZWQgdG8gcmVtb3ZlIGxpc3RlbmVycywgYXMgdGhleSBhcmVuJ3QgcmVtb3ZlZCBhdXRvbWF0aWNhbGx5IHdoZW4gc3VjY2VzZnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhblVuc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXIuZXZlbnRFbWl0dGVyLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWlwdEpTT04gPSBKU09OLnN0cmluZ2lmeShyZWNlaXB0LCBudWxsLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWNlaXB0LnN0YXR1cyA9PT0gZmFsc2UgfHwgcmVjZWlwdC5zdGF0dXMgPT09ICcweDAnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJldmVydE1lc3NhZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWV0aG9kLmhhbmRsZVJldmVydCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG1ldGhvZC5jYWxsID09PSAnZXRoX3NlbmRUcmFuc2FjdGlvbicgfHwgbWV0aG9kLmNhbGwgPT09ICdldGhfc2VuZFJhd1RyYW5zYWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0eFJlcGxheU9wdGlvbnMgPSBwYXlsb2FkLnBhcmFtc1swXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHNlbmQgd2FzIHJhdywgZmV0Y2ggdGhlIHRyYW5zYWN0aW9uIGFuZCByZWNvbnN0aXR1dGUgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvcmlnaW5hbCBwYXJhbXMgc28gdGhleSBjYW4gYmUgcmVwbGF5ZWQgd2l0aCBgZXRoX2NhbGxgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWV0aG9kLmNhbGwgPT09ICdldGhfc2VuZFJhd1RyYW5zYWN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYXdUcmFuc2FjdGlvbkhleCA9IHBheWxvYWQucGFyYW1zWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJzZWRUeCA9IEV0aGVyc1RyYW5zYWN0aW9uVXRpbHMucGFyc2UocmF3VHJhbnNhY3Rpb25IZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4UmVwbGF5T3B0aW9ucyA9IGZvcm1hdHRlcnMuaW5wdXRUcmFuc2FjdGlvbkZvcm1hdHRlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHBhcnNlZFR4LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvOiBwYXJzZWRUeC50byxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogcGFyc2VkVHguZnJvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FzOiBwYXJzZWRUeC5nYXNMaW1pdC50b0hleFN0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYXNQcmljZTogcGFyc2VkVHguZ2FzUHJpY2UudG9IZXhTdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHBhcnNlZFR4LnZhbHVlLnRvSGV4U3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCByZXZlcnQgcmVhc29uIHN0cmluZyB3aXRoIGV0aF9jYWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXZlcnRNZXNzYWdlID0gYXdhaXQgbWV0aG9kLmdldFJldmVydFJlYXNvbih0eFJlcGxheU9wdGlvbnMsIHJlY2VpcHQuYmxvY2tOdW1iZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldmVydE1lc3NhZ2UpIHsgLy8gT25seSB0aHJvdyBhIHJldmVydCBlcnJvciBpZiBhIHJldmVydCByZWFzb24gaXMgZXhpc3RpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5fZmlyZUVycm9yKGVycm9ycy5UcmFuc2FjdGlvblJldmVydEluc3RydWN0aW9uRXJyb3IocmV2ZXJ0TWVzc2FnZS5yZWFzb24sIHJldmVydE1lc3NhZ2Uuc2lnbmF0dXJlLCByZWNlaXB0KSwgZGVmZXIuZXZlbnRFbWl0dGVyLCBkZWZlci5yZWplY3QsIG51bGwsIHJlY2VpcHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZmFsc2U7IC8vIFRocm93IGZhbHNlIGFuZCBsZXQgdGhlIHRyeS9jYXRjaCBzdGF0ZW1lbnQgaGFuZGxlIHRoZSBlcnJvciBjb3JyZWN0bHkgYWZ0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGZhbHNlOyAvLyBUaHJvdyBmYWxzZSBhbmQgbGV0IHRoZSB0cnkvY2F0Y2ggc3RhdGVtZW50IGhhbmRsZSB0aGUgZXJyb3IgY29ycmVjdGx5IGFmdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRocm93IGFuIG5vcm1hbCByZXZlcnQgZXJyb3IgaWYgbm8gcmV2ZXJ0IHJlYXNvbiBpcyBnaXZlbiBvciB0aGUgZGV0ZWN0aW9uIG9mIGl0IGlzIGRpc2FibGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLl9maXJlRXJyb3IoZXJyb3JzLlRyYW5zYWN0aW9uUmV2ZXJ0ZWRXaXRob3V0UmVhc29uRXJyb3IocmVjZWlwdCksIGRlZmVyLmV2ZW50RW1pdHRlciwgZGVmZXIucmVqZWN0LCBudWxsLCByZWNlaXB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaHJvdyBPT0cgaWYgc3RhdHVzIGlzIG5vdCBleGlzdGluZyBhbmQgcHJvdmlkZWQgZ2FzIGFuZCB1c2VkIGdhcyBhcmUgZXF1YWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5fZmlyZUVycm9yKGVycm9ycy5UcmFuc2FjdGlvbk91dE9mR2FzRXJyb3IocmVjZWlwdCksIGRlZmVyLmV2ZW50RW1pdHRlciwgZGVmZXIucmVqZWN0LCBudWxsLCByZWNlaXB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FuVW5zdWJzY3JpYmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHByb21pc2VSZXNvbHZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAvLyB0aW1lIG91dCB0aGUgdHJhbnNhY3Rpb24gaWYgbm90IG1pbmVkIGFmdGVyIDUwIGJsb2Nrc1xuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGltZW91dENvdW50Kys7XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgdG8gc2VlIGlmIHdlIGFyZSBodHRwIHBvbGxpbmdcbiAgICAgICAgICAgICAgICBpZiAoISFpc1BvbGxpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcG9sbGluZyB0aW1lb3V0IGlzIGRpZmZlcmVudCB0aGFuIHRyYW5zYWN0aW9uQmxvY2tUaW1lb3V0IGJsb2NrcyBzaW5jZSB3ZSBhcmUgdHJpZ2dlcmluZyBldmVyeSBzZWNvbmRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVvdXRDb3VudCAtIDEgPj0gbWV0aG9kLnRyYW5zYWN0aW9uUG9sbGluZ1RpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZVJlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLl9maXJlRXJyb3IoZXJyb3JzLlRyYW5zYWN0aW9uRXJyb3IoJ1RyYW5zYWN0aW9uIHdhcyBub3QgbWluZWQgd2l0aGluICcgKyBtZXRob2QudHJhbnNhY3Rpb25Qb2xsaW5nVGltZW91dCArICcgc2Vjb25kcywgcGxlYXNlIG1ha2Ugc3VyZSB5b3VyIHRyYW5zYWN0aW9uIHdhcyBwcm9wZXJseSBzZW50LiBCZSBhd2FyZSB0aGF0IGl0IG1pZ2h0IHN0aWxsIGJlIG1pbmVkIScpLCBkZWZlci5ldmVudEVtaXR0ZXIsIGRlZmVyLnJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0Q291bnQgLSAxID49IG1ldGhvZC50cmFuc2FjdGlvbkJsb2NrVGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlUmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbHMuX2ZpcmVFcnJvcihlcnJvcnMuVHJhbnNhY3Rpb25FcnJvcignVHJhbnNhY3Rpb24gd2FzIG5vdCBtaW5lZCB3aXRoaW4gJyArIG1ldGhvZC50cmFuc2FjdGlvbkJsb2NrVGltZW91dCArICcgYmxvY2tzLCBwbGVhc2UgbWFrZSBzdXJlIHlvdXIgdHJhbnNhY3Rpb24gd2FzIHByb3Blcmx5IHNlbnQuIEJlIGF3YXJlIHRoYXQgaXQgbWlnaHQgc3RpbGwgYmUgbWluZWQhJyksIGRlZmVyLmV2ZW50RW1pdHRlciwgZGVmZXIucmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBwcm9taXNlUmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgdXRpbHMuX2ZpcmVFcnJvcih7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBzdWJzY3JpYmUgdG8gbmV3IG5ld0Jsb2NrSGVhZGVycyB0byBjb25maXJtIHRoZSB0cmFuc2FjdGlvbiByZWNlaXB0cy4nLFxuICAgICAgICAgICAgICAgIGRhdGE6IGVyclxuICAgICAgICAgICAgfSwgZGVmZXIuZXZlbnRFbWl0dGVyLCBkZWZlci5yZWplY3QpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBzdGFydCB3YXRjaGluZyBmb3IgY29uZmlybWF0aW9uIGRlcGVuZGluZyBvbiB0aGUgc3VwcG9ydCBmZWF0dXJlcyBvZiB0aGUgcHJvdmlkZXJcbiAgICB2YXIgc3RhcnRXYXRjaGluZyA9IGZ1bmN0aW9uIChleGlzdGluZ1JlY2VpcHQpIHtcbiAgICAgICAgbGV0IGJsb2NrSGVhZGVyQXJyaXZlZCA9IGZhbHNlO1xuICAgICAgICBjb25zdCBzdGFydEludGVydmFsID0gKCkgPT4ge1xuICAgICAgICAgICAgaW50ZXJ2YWxJZCA9IHNldEludGVydmFsKGNoZWNrQ29uZmlybWF0aW9uLmJpbmQobnVsbCwgZXhpc3RpbmdSZWNlaXB0LCB0cnVlKSwgMTAwMCk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIElmIHByb3ZpZGVyIGRvIG5vdCBzdXBwb3J0IGV2ZW50IHN1YnNjcmlwdGlvbiB1c2UgcG9sbGluZ1xuICAgICAgICBpZiAoIXRoaXMucmVxdWVzdE1hbmFnZXIucHJvdmlkZXIub24pIHtcbiAgICAgICAgICAgIHJldHVybiBzdGFydEludGVydmFsKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU3Vic2NyaWJlIHRvIG5ldyBibG9jayBoZWFkZXJzIHRvIGxvb2sgZm9yIHR4IHJlY2VpcHRcbiAgICAgICAgX2V0aGVyZXVtQ2FsbC5zdWJzY3JpYmUoJ25ld0Jsb2NrSGVhZGVycycsIGZ1bmN0aW9uIChlcnIsIGJsb2NrSGVhZGVyLCBzdWIpIHtcbiAgICAgICAgICAgIGJsb2NrSGVhZGVyQXJyaXZlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoZXJyIHx8ICFibG9ja0hlYWRlcikge1xuICAgICAgICAgICAgICAgIC8vIGZhbGwgYmFjayB0byBwb2xsaW5nXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXJ0SW50ZXJ2YWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoZWNrQ29uZmlybWF0aW9uKGV4aXN0aW5nUmVjZWlwdCwgZmFsc2UsIGVyciwgYmxvY2tIZWFkZXIsIHN1Yik7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBGYWxsYmFjayB0byBwb2xsaW5nIGlmIHR4IHJlY2VpcHQgZGlkbid0IGFycml2ZWQgaW4gXCJibG9ja0hlYWRlclRpbWVvdXRcIiBbMTAgc2Vjb25kc11cbiAgICAgICAgYmxvY2tIZWFkZXJUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGlmICghYmxvY2tIZWFkZXJBcnJpdmVkKSB7XG4gICAgICAgICAgICAgICAgc3RhcnRJbnRlcnZhbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0aGlzLmJsb2NrSGVhZGVyVGltZW91dCAqIDEwMDApO1xuICAgIH0uYmluZCh0aGlzKTtcbiAgICAvLyBmaXJzdCBjaGVjayBpZiB3ZSBhbHJlYWR5IGhhdmUgYSBjb25maXJtZWQgdHJhbnNhY3Rpb25cbiAgICBfZXRoZXJldW1DYWxsLmdldFRyYW5zYWN0aW9uUmVjZWlwdChyZXN1bHQpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZWNlaXB0KSB7XG4gICAgICAgIGlmIChyZWNlaXB0ICYmIHJlY2VpcHQuYmxvY2tIYXNoKSB7XG4gICAgICAgICAgICBpZiAoZGVmZXIuZXZlbnRFbWl0dGVyLmxpc3RlbmVycygnY29uZmlybWF0aW9uJykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIFdlIG11c3Qga2VlcCBvbiB3YXRjaGluZyBmb3IgbmV3IEJsb2NrcywgaWYgYSBjb25maXJtYXRpb24gbGlzdGVuZXIgaXMgcHJlc2VudFxuICAgICAgICAgICAgICAgIHN0YXJ0V2F0Y2hpbmcocmVjZWlwdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGVja0NvbmZpcm1hdGlvbihyZWNlaXB0LCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXByb21pc2VSZXNvbHZlZCkge1xuICAgICAgICAgICAgc3RhcnRXYXRjaGluZygpO1xuICAgICAgICB9XG4gICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFwcm9taXNlUmVzb2x2ZWQpXG4gICAgICAgICAgICBzdGFydFdhdGNoaW5nKCk7XG4gICAgfSk7XG59O1xudmFyIGdldFdhbGxldCA9IGZ1bmN0aW9uIChmcm9tLCBhY2NvdW50cykge1xuICAgIHZhciB3YWxsZXQgPSBudWxsO1xuICAgIC8vIGlzIGluZGV4IGdpdmVuXG4gICAgaWYgKHR5cGVvZiBmcm9tID09PSAnbnVtYmVyJykge1xuICAgICAgICB3YWxsZXQgPSBhY2NvdW50cy53YWxsZXRbZnJvbV07XG4gICAgICAgIC8vIGlzIGFjY291bnQgZ2l2ZW5cbiAgICB9XG4gICAgZWxzZSBpZiAoISFmcm9tICYmIHR5cGVvZiBmcm9tID09PSAnb2JqZWN0JyAmJiBmcm9tLmFkZHJlc3MgJiYgZnJvbS5wcml2YXRlS2V5KSB7XG4gICAgICAgIHdhbGxldCA9IGZyb207XG4gICAgICAgIC8vIHNlYXJjaCBpbiB3YWxsZXQgZm9yIGFkZHJlc3NcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHdhbGxldCA9IGFjY291bnRzLndhbGxldFtmcm9tLnRvTG93ZXJDYXNlKCldO1xuICAgIH1cbiAgICByZXR1cm4gd2FsbGV0O1xufTtcbk1ldGhvZC5wcm90b3R5cGUuYnVpbGRDYWxsID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtZXRob2QgPSB0aGlzLCBpc1NlbmRUeCA9IChtZXRob2QuY2FsbCA9PT0gJ2V0aF9zZW5kVHJhbnNhY3Rpb24nIHx8IG1ldGhvZC5jYWxsID09PSAnZXRoX3NlbmRSYXdUcmFuc2FjdGlvbicpLCAvLyB8fCBtZXRob2QuY2FsbCA9PT0gJ3BlcnNvbmFsX3NlbmRUcmFuc2FjdGlvbidcbiAgICBpc0NhbGwgPSAobWV0aG9kLmNhbGwgPT09ICdldGhfY2FsbCcpO1xuICAgIC8vIGFjdHVhbCBzZW5kIGZ1bmN0aW9uXG4gICAgdmFyIHNlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkZWZlciA9IHByb21pRXZlbnQoIWlzU2VuZFR4KSwgcGF5bG9hZCA9IG1ldGhvZC50b1BheWxvYWQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgICAgIC8vIENBTExCQUNLIGZ1bmN0aW9uXG4gICAgICAgIHZhciBzZW5kVHhDYWxsYmFjayA9IGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKG1ldGhvZC5oYW5kbGVSZXZlcnQgJiYgaXNDYWxsICYmIG1ldGhvZC5hYmlDb2Rlcikge1xuICAgICAgICAgICAgICAgIHZhciByZWFzb25EYXRhO1xuICAgICAgICAgICAgICAgIC8vIEdhbmFjaGUgLyBHZXRoIDw9IDEuOS4xMyByZXR1cm4gdGhlIHJlYXNvbiBkYXRhIGFzIGEgc3VjY2Vzc2Z1bCBldGhfY2FsbCByZXNwb25zZVxuICAgICAgICAgICAgICAgIC8vIEdldGggPj0gMS45LjE1IGF0dGFjaGVzIHRoZSByZWFzb24gZGF0YSB0byBhbiBlcnJvciBvYmplY3QuXG4gICAgICAgICAgICAgICAgLy8gR2V0aCAxLjkuMTQgaXMgbWlzc2luZyByZXZlcnQgcmVhc29uIChodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vd2ViMy5qcy9pc3N1ZXMvMzUyMClcbiAgICAgICAgICAgICAgICBpZiAoIWVyciAmJiBtZXRob2QuaXNSZXZlcnRSZWFzb25TdHJpbmcocmVzdWx0KSkge1xuICAgICAgICAgICAgICAgICAgICByZWFzb25EYXRhID0gcmVzdWx0LnN1YnN0cmluZygxMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGVyciAmJiBlcnIuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICByZWFzb25EYXRhID0gZXJyLmRhdGEuc3Vic3RyaW5nKDEwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlYXNvbkRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlYXNvbiA9IG1ldGhvZC5hYmlDb2Rlci5kZWNvZGVQYXJhbWV0ZXIoJ3N0cmluZycsICcweCcgKyByZWFzb25EYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNpZ25hdHVyZSA9ICdFcnJvcihTdHJpbmcpJztcbiAgICAgICAgICAgICAgICAgICAgdXRpbHMuX2ZpcmVFcnJvcihlcnJvcnMuUmV2ZXJ0SW5zdHJ1Y3Rpb25FcnJvcihyZWFzb24sIHNpZ25hdHVyZSksIGRlZmVyLmV2ZW50RW1pdHRlciwgZGVmZXIucmVqZWN0LCBwYXlsb2FkLmNhbGxiYWNrLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWFzb246IHJlYXNvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hdHVyZTogc2lnbmF0dXJlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBtZXRob2QuZm9ybWF0T3V0cHV0KHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGVyciA9IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBlcnIgPSByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWVycikge1xuICAgICAgICAgICAgICAgIGlmIChwYXlsb2FkLmNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQuY2FsbGJhY2sobnVsbCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGVyciA9IGVyci5lcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHV0aWxzLl9maXJlRXJyb3IoZXJyLCBkZWZlci5ldmVudEVtaXR0ZXIsIGRlZmVyLnJlamVjdCwgcGF5bG9hZC5jYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByZXR1cm4gUFJPTUlTRVxuICAgICAgICAgICAgaWYgKCFpc1NlbmRUeCkge1xuICAgICAgICAgICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVyLnJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIFBST01JRVZFTlRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlZmVyLmV2ZW50RW1pdHRlci5lbWl0KCd0cmFuc2FjdGlvbkhhc2gnLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIG1ldGhvZC5fY29uZmlybVRyYW5zYWN0aW9uKGRlZmVyLCByZXN1bHQsIHBheWxvYWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBTRU5EUyB0aGUgU0lHTkVEIFNJR05BVFVSRVxuICAgICAgICB2YXIgc2VuZFNpZ25lZFR4ID0gZnVuY3Rpb24gKHNpZ24pIHtcbiAgICAgICAgICAgIHZhciBzaWduZWRQYXlsb2FkID0geyAuLi5wYXlsb2FkLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ2V0aF9zZW5kUmF3VHJhbnNhY3Rpb24nLFxuICAgICAgICAgICAgICAgIHBhcmFtczogW3NpZ24ucmF3VHJhbnNhY3Rpb25dXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbWV0aG9kLnJlcXVlc3RNYW5hZ2VyLnNlbmQoc2lnbmVkUGF5bG9hZCwgc2VuZFR4Q2FsbGJhY2spO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgc2VuZFJlcXVlc3QgPSBmdW5jdGlvbiAocGF5bG9hZCwgbWV0aG9kKSB7XG4gICAgICAgICAgICBpZiAobWV0aG9kICYmIG1ldGhvZC5hY2NvdW50cyAmJiBtZXRob2QuYWNjb3VudHMud2FsbGV0ICYmIG1ldGhvZC5hY2NvdW50cy53YWxsZXQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdhbGxldDtcbiAgICAgICAgICAgICAgICAvLyBFVEhfU0VORFRSQU5TQUNUSU9OXG4gICAgICAgICAgICAgICAgaWYgKHBheWxvYWQubWV0aG9kID09PSAnZXRoX3NlbmRUcmFuc2FjdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR4ID0gcGF5bG9hZC5wYXJhbXNbMF07XG4gICAgICAgICAgICAgICAgICAgIHdhbGxldCA9IGdldFdhbGxldCgoISF0eCAmJiB0eXBlb2YgdHggPT09ICdvYmplY3QnKSA/IHR4LmZyb20gOiBudWxsLCBtZXRob2QuYWNjb3VudHMpO1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB3YWxsZXQgd2FzIGZvdW5kLCBzaWduIHR4LCBhbmQgc2VuZCB1c2luZyBzZW5kUmF3VHJhbnNhY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgaWYgKHdhbGxldCAmJiB3YWxsZXQucHJpdmF0ZUtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR4ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0eCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHR4LmZyb207XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWV0aG9kLmRlZmF1bHRDaGFpbiAmJiAhdHguY2hhaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eC5jaGFpbiA9IG1ldGhvZC5kZWZhdWx0Q2hhaW47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWV0aG9kLmRlZmF1bHRIYXJkZm9yayAmJiAhdHguaGFyZGZvcmspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eC5oYXJkZm9yayA9IG1ldGhvZC5kZWZhdWx0SGFyZGZvcms7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWV0aG9kLmRlZmF1bHRDb21tb24gJiYgIXR4LmNvbW1vbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4LmNvbW1vbiA9IG1ldGhvZC5kZWZhdWx0Q29tbW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kLmFjY291bnRzLnNpZ25UcmFuc2FjdGlvbih0eCwgd2FsbGV0LnByaXZhdGVLZXkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oc2VuZFNpZ25lZFR4KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkZWZlci5ldmVudEVtaXR0ZXIubGlzdGVuZXJzID09PSAnZnVuY3Rpb24nICYmIGRlZmVyLmV2ZW50RW1pdHRlci5saXN0ZW5lcnMoJ2Vycm9yJykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlci5ldmVudEVtaXR0ZXIuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElnbm9yZSB1c2VybGFuZCBlcnJvciBwcmV2ZW50IGl0IHRvIGJ1YmJsZSB1cCB3aXRoaW4gd2ViMy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlci5ldmVudEVtaXR0ZXIucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVyLmV2ZW50RW1pdHRlci5jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlci5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEVUSF9TSUdOXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBheWxvYWQubWV0aG9kID09PSAnZXRoX3NpZ24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gcGF5bG9hZC5wYXJhbXNbMV07XG4gICAgICAgICAgICAgICAgICAgIHdhbGxldCA9IGdldFdhbGxldChwYXlsb2FkLnBhcmFtc1swXSwgbWV0aG9kLmFjY291bnRzKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2FsbGV0IHdhcyBmb3VuZCwgc2lnbiB0eCwgYW5kIHNlbmQgdXNpbmcgc2VuZFJhd1RyYW5zYWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIGlmICh3YWxsZXQgJiYgd2FsbGV0LnByaXZhdGVLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaWduID0gbWV0aG9kLmFjY291bnRzLnNpZ24oZGF0YSwgd2FsbGV0LnByaXZhdGVLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBheWxvYWQuY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkLmNhbGxiYWNrKG51bGwsIHNpZ24uc2lnbmF0dXJlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVyLnJlc29sdmUoc2lnbi5zaWduYXR1cmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1ldGhvZC5yZXF1ZXN0TWFuYWdlci5zZW5kKHBheWxvYWQsIHNlbmRUeENhbGxiYWNrKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gU2VuZCB0aGUgYWN0dWFsIHRyYW5zYWN0aW9uXG4gICAgICAgIGlmIChpc1NlbmRUeFxuICAgICAgICAgICAgJiYgISFwYXlsb2FkLnBhcmFtc1swXVxuICAgICAgICAgICAgJiYgdHlwZW9mIHBheWxvYWQucGFyYW1zWzBdID09PSAnb2JqZWN0J1xuICAgICAgICAgICAgJiYgKHR5cGVvZiBwYXlsb2FkLnBhcmFtc1swXS5nYXNQcmljZSA9PT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICAmJiAodHlwZW9mIHBheWxvYWQucGFyYW1zWzBdLm1heFByaW9yaXR5RmVlUGVyR2FzID09PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICAgICB8fCB0eXBlb2YgcGF5bG9hZC5wYXJhbXNbMF0ubWF4RmVlUGVyR2FzID09PSAndW5kZWZpbmVkJykpKSB7XG4gICAgICAgICAgICBfaGFuZGxlVHhQcmljaW5nKG1ldGhvZCwgcGF5bG9hZC5wYXJhbXNbMF0pLnRoZW4odHhQcmljaW5nID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodHhQcmljaW5nLmdhc1ByaWNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZC5wYXJhbXNbMF0uZ2FzUHJpY2UgPSB0eFByaWNpbmcuZ2FzUHJpY2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR4UHJpY2luZy5tYXhQcmlvcml0eUZlZVBlckdhcyAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICYmIHR4UHJpY2luZy5tYXhGZWVQZXJHYXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBwYXlsb2FkLnBhcmFtc1swXS5tYXhQcmlvcml0eUZlZVBlckdhcyA9IHR4UHJpY2luZy5tYXhQcmlvcml0eUZlZVBlckdhcztcbiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZC5wYXJhbXNbMF0ubWF4RmVlUGVyR2FzID0gdHhQcmljaW5nLm1heEZlZVBlckdhcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzU2VuZFR4KSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXIuZXZlbnRFbWl0dGVyLmVtaXQoJ3NlbmRpbmcnLCBwYXlsb2FkKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbmRSZXF1ZXN0KHBheWxvYWQsIG1ldGhvZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpc1NlbmRUeCkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkZWZlci5ldmVudEVtaXR0ZXIuZW1pdCgnc2VuZGluZycsIHBheWxvYWQpO1xuICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VuZFJlcXVlc3QocGF5bG9hZCwgbWV0aG9kKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTZW5kVHgpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGRlZmVyLmV2ZW50RW1pdHRlci5lbWl0KCdzZW50JywgcGF5bG9hZCk7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmZXIuZXZlbnRFbWl0dGVyO1xuICAgIH07XG4gICAgLy8gbmVjZXNzYXJ5IHRvIGF0dGFjaCB0aGluZ3MgdG8gdGhlIG1ldGhvZFxuICAgIHNlbmQubWV0aG9kID0gbWV0aG9kO1xuICAgIC8vIG5lY2Vzc2FyeSBmb3IgYmF0Y2ggcmVxdWVzdHNcbiAgICBzZW5kLnJlcXVlc3QgPSB0aGlzLnJlcXVlc3QuYmluZCh0aGlzKTtcbiAgICByZXR1cm4gc2VuZDtcbn07XG5mdW5jdGlvbiBfaGFuZGxlVHhQcmljaW5nKG1ldGhvZCwgdHgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGdldEJsb2NrQnlOdW1iZXIgPSAobmV3IE1ldGhvZCh7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2dldEJsb2NrQnlOdW1iZXInLFxuICAgICAgICAgICAgICAgIGNhbGw6ICdldGhfZ2V0QmxvY2tCeU51bWJlcicsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiAyLFxuICAgICAgICAgICAgICAgIGlucHV0Rm9ybWF0dGVyOiBbZnVuY3Rpb24gKGJsb2NrTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmxvY2tOdW1iZXIgPyB1dGlscy50b0hleChibG9ja051bWJlcikgOiAnbGF0ZXN0JztcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfSkpLmNyZWF0ZUZ1bmN0aW9uKG1ldGhvZC5yZXF1ZXN0TWFuYWdlcik7XG4gICAgICAgICAgICB2YXIgZ2V0R2FzUHJpY2UgPSAobmV3IE1ldGhvZCh7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2dldEdhc1ByaWNlJyxcbiAgICAgICAgICAgICAgICBjYWxsOiAnZXRoX2dhc1ByaWNlJyxcbiAgICAgICAgICAgICAgICBwYXJhbXM6IDBcbiAgICAgICAgICAgIH0pKS5jcmVhdGVGdW5jdGlvbihtZXRob2QucmVxdWVzdE1hbmFnZXIpO1xuICAgICAgICAgICAgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgICAgIGdldEJsb2NrQnlOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICBnZXRHYXNQcmljZSgpXG4gICAgICAgICAgICBdKS50aGVuKHJlc3BvbnNlcyA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgW2Jsb2NrLCBnYXNQcmljZV0gPSByZXNwb25zZXM7XG4gICAgICAgICAgICAgICAgaWYgKCh0eC50eXBlID09PSAnMHgyJyB8fCB0eC50eXBlID09PSB1bmRlZmluZWQpICYmXG4gICAgICAgICAgICAgICAgICAgIChibG9jayAmJiBibG9jay5iYXNlRmVlUGVyR2FzKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgbmV0d29yayBzdXBwb3J0cyBFSVAtMTU1OVxuICAgICAgICAgICAgICAgICAgICAvLyBUYWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcnMtaW8vZXRoZXJzLmpzL2Jsb2IvYmE2ODU0YmRkNWE5MTJmZTg3M2Q1ZGE0OTRjYjVjNjJjMTkwYWRkZS9wYWNrYWdlcy9hYnN0cmFjdC1wcm92aWRlci9zcmMudHMvaW5kZXgudHMjTDIzMFxuICAgICAgICAgICAgICAgICAgICBsZXQgbWF4UHJpb3JpdHlGZWVQZXJHYXMsIG1heEZlZVBlckdhcztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR4Lmdhc1ByaWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2luZyBsZWdhY3kgZ2FzUHJpY2UgcHJvcGVydHkgb24gYW4gZWlwLTE1NTkgbmV0d29yayxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIHVzZSBnYXNQcmljZSBhcyBib3RoIGZlZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhQcmlvcml0eUZlZVBlckdhcyA9IHR4Lmdhc1ByaWNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4RmVlUGVyR2FzID0gdHguZ2FzUHJpY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdHguZ2FzUHJpY2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhQcmlvcml0eUZlZVBlckdhcyA9IHR4Lm1heFByaW9yaXR5RmVlUGVyR2FzIHx8ICcweDk1MDJGOTAwJzsgLy8gMi41IEd3ZWlcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heEZlZVBlckdhcyA9IHR4Lm1heEZlZVBlckdhcyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLnRvSGV4KHV0aWxzLnRvQk4oYmxvY2suYmFzZUZlZVBlckdhcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm11bCh1dGlscy50b0JOKDIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkKHV0aWxzLnRvQk4obWF4UHJpb3JpdHlGZWVQZXJHYXMpKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7IG1heEZlZVBlckdhcywgbWF4UHJpb3JpdHlGZWVQZXJHYXMgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHgubWF4UHJpb3JpdHlGZWVQZXJHYXMgfHwgdHgubWF4RmVlUGVyR2FzKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJOZXR3b3JrIGRvZXNuJ3Qgc3VwcG9ydCBlaXAtMTU1OVwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7IGdhc1ByaWNlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSByZXZlcnQgcmVhc29uIHN0cmluZyBpZiBleGlzdGluZyBvciBvdGhlcndpc2UgZmFsc2UuXG4gKlxuICogQG1ldGhvZCBnZXRSZXZlcnRSZWFzb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdHhPcHRpb25zXG4gKiBAcGFyYW0ge051bWJlcn0gYmxvY2tOdW1iZXJcbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxCb29sZWFufFN0cmluZz59XG4gKi9cbk1ldGhvZC5wcm90b3R5cGUuZ2V0UmV2ZXJ0UmVhc29uID0gZnVuY3Rpb24gKHR4T3B0aW9ucywgYmxvY2tOdW1iZXIpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgKG5ldyBNZXRob2Qoe1xuICAgICAgICAgICAgbmFtZTogJ2NhbGwnLFxuICAgICAgICAgICAgY2FsbDogJ2V0aF9jYWxsJyxcbiAgICAgICAgICAgIHBhcmFtczogMixcbiAgICAgICAgICAgIGFiaUNvZGVyOiBzZWxmLmFiaUNvZGVyLFxuICAgICAgICAgICAgaGFuZGxlUmV2ZXJ0OiB0cnVlXG4gICAgICAgIH0pKVxuICAgICAgICAgICAgLmNyZWF0ZUZ1bmN0aW9uKHNlbGYucmVxdWVzdE1hbmFnZXIpKHR4T3B0aW9ucywgdXRpbHMubnVtYmVyVG9IZXgoYmxvY2tOdW1iZXIpKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IucmVhc29uKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgICAgIHJlYXNvbjogZXJyb3IucmVhc29uLFxuICAgICAgICAgICAgICAgICAgICBzaWduYXR1cmU6IGVycm9yLnNpZ25hdHVyZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGhleCBzdHJpbmcgaXMgYSByZXZlcnQgbWVzc2FnZSBmcm9tIHRoZSBFVk1cbiAqXG4gKiBAbWV0aG9kIGlzUmV2ZXJ0UmVhc29uU3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgLSBIZXggc3RyaW5nIHByZWZpeGVkIHdpdGggMHhcbiAqXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuTWV0aG9kLnByb3RvdHlwZS5pc1JldmVydFJlYXNvblN0cmluZyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJyAmJiAoKGRhdGEubGVuZ3RoIC0gMikgLyAyKSAlIDMyID09PSA0ICYmIGRhdGEuc3Vic3RyaW5nKDAsIDEwKSA9PT0gJzB4MDhjMzc5YTAnO1xufTtcbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBjcmVhdGUgdGhlIHB1cmUgSlNPTlJQQyByZXF1ZXN0IHdoaWNoIGNhbiBiZSB1c2VkIGluIGEgYmF0Y2ggcmVxdWVzdFxuICpcbiAqIEBtZXRob2QgcmVxdWVzdFxuICogQHJldHVybiB7T2JqZWN0fSBqc29ucnBjIHJlcXVlc3RcbiAqL1xuTWV0aG9kLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXlsb2FkID0gdGhpcy50b1BheWxvYWQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcGF5bG9hZC5mb3JtYXQgPSB0aGlzLmZvcm1hdE91dHB1dC5iaW5kKHRoaXMpO1xuICAgIHJldHVybiBwYXlsb2FkO1xufTtcbm1vZHVsZS5leHBvcnRzID0gTWV0aG9kO1xuIiwiLypcbiBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICovXG4vKipcbiAqIEBmaWxlIGluZGV4LmpzXG4gKiBAYXV0aG9yIEZhYmlhbiBWb2dlbHN0ZWxsZXIgPGZhYmlhbkBldGhlcmV1bS5vcmc+XG4gKiBAZGF0ZSAyMDE2XG4gKi9cblwidXNlIHN0cmljdFwiO1xudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50ZW1pdHRlcjMnKTtcbi8qKlxuICogVGhpcyBmdW5jdGlvbiBnZW5lcmF0ZXMgYSBkZWZlciBwcm9taXNlIGFuZCBhZGRzIGV2ZW50RW1pdHRlciBmdW5jdGlvbmFsaXR5IHRvIGl0XG4gKlxuICogQG1ldGhvZCBldmVudGlmaWVkUHJvbWlzZVxuICovXG52YXIgUHJvbWlFdmVudCA9IGZ1bmN0aW9uIFByb21pRXZlbnQoanVzdFByb21pc2UpIHtcbiAgICB2YXIgcmVzb2x2ZSwgcmVqZWN0LCBldmVudEVtaXR0ZXIgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlc29sdmUgPSBhcmd1bWVudHNbMF07XG4gICAgICAgIHJlamVjdCA9IGFyZ3VtZW50c1sxXTtcbiAgICB9KTtcbiAgICBpZiAoanVzdFByb21pc2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgICAgICAgICByZWplY3Q6IHJlamVjdCxcbiAgICAgICAgICAgIGV2ZW50RW1pdHRlcjogZXZlbnRFbWl0dGVyXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIGdldCBldmVudEVtaXR0ZXJcbiAgICB2YXIgZW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAvLyBhZGQgZXZlbnRFbWl0dGVyIHRvIHRoZSBwcm9taXNlXG4gICAgZXZlbnRFbWl0dGVyLl9ldmVudHMgPSBlbWl0dGVyLl9ldmVudHM7XG4gICAgZXZlbnRFbWl0dGVyLmVtaXQgPSBlbWl0dGVyLmVtaXQ7XG4gICAgZXZlbnRFbWl0dGVyLm9uID0gZW1pdHRlci5vbjtcbiAgICBldmVudEVtaXR0ZXIub25jZSA9IGVtaXR0ZXIub25jZTtcbiAgICBldmVudEVtaXR0ZXIub2ZmID0gZW1pdHRlci5vZmY7XG4gICAgZXZlbnRFbWl0dGVyLmxpc3RlbmVycyA9IGVtaXR0ZXIubGlzdGVuZXJzO1xuICAgIGV2ZW50RW1pdHRlci5hZGRMaXN0ZW5lciA9IGVtaXR0ZXIuYWRkTGlzdGVuZXI7XG4gICAgZXZlbnRFbWl0dGVyLnJlbW92ZUxpc3RlbmVyID0gZW1pdHRlci5yZW1vdmVMaXN0ZW5lcjtcbiAgICBldmVudEVtaXR0ZXIucmVtb3ZlQWxsTGlzdGVuZXJzID0gZW1pdHRlci5yZW1vdmVBbGxMaXN0ZW5lcnM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVzb2x2ZTogcmVzb2x2ZSxcbiAgICAgICAgcmVqZWN0OiByZWplY3QsXG4gICAgICAgIGV2ZW50RW1pdHRlcjogZXZlbnRFbWl0dGVyXG4gICAgfTtcbn07XG5Qcm9taUV2ZW50LnJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pRXZlbnQodHJ1ZSk7XG4gICAgcHJvbWlzZS5yZXNvbHZlKHZhbHVlKTtcbiAgICByZXR1cm4gcHJvbWlzZS5ldmVudEVtaXR0ZXI7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBQcm9taUV2ZW50O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eVxuICAsIHByZWZpeCA9ICd+JztcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciB0byBjcmVhdGUgYSBzdG9yYWdlIGZvciBvdXIgYEVFYCBvYmplY3RzLlxuICogQW4gYEV2ZW50c2AgaW5zdGFuY2UgaXMgYSBwbGFpbiBvYmplY3Qgd2hvc2UgcHJvcGVydGllcyBhcmUgZXZlbnQgbmFtZXMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBFdmVudHMoKSB7fVxuXG4vL1xuLy8gV2UgdHJ5IHRvIG5vdCBpbmhlcml0IGZyb20gYE9iamVjdC5wcm90b3R5cGVgLiBJbiBzb21lIGVuZ2luZXMgY3JlYXRpbmcgYW5cbi8vIGluc3RhbmNlIGluIHRoaXMgd2F5IGlzIGZhc3RlciB0aGFuIGNhbGxpbmcgYE9iamVjdC5jcmVhdGUobnVsbClgIGRpcmVjdGx5LlxuLy8gSWYgYE9iamVjdC5jcmVhdGUobnVsbClgIGlzIG5vdCBzdXBwb3J0ZWQgd2UgcHJlZml4IHRoZSBldmVudCBuYW1lcyB3aXRoIGFcbi8vIGNoYXJhY3RlciB0byBtYWtlIHN1cmUgdGhhdCB0aGUgYnVpbHQtaW4gb2JqZWN0IHByb3BlcnRpZXMgYXJlIG5vdFxuLy8gb3ZlcnJpZGRlbiBvciB1c2VkIGFzIGFuIGF0dGFjayB2ZWN0b3IuXG4vL1xuaWYgKE9iamVjdC5jcmVhdGUpIHtcbiAgRXZlbnRzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgLy9cbiAgLy8gVGhpcyBoYWNrIGlzIG5lZWRlZCBiZWNhdXNlIHRoZSBgX19wcm90b19fYCBwcm9wZXJ0eSBpcyBzdGlsbCBpbmhlcml0ZWQgaW5cbiAgLy8gc29tZSBvbGQgYnJvd3NlcnMgbGlrZSBBbmRyb2lkIDQsIGlQaG9uZSA1LjEsIE9wZXJhIDExIGFuZCBTYWZhcmkgNS5cbiAgLy9cbiAgaWYgKCFuZXcgRXZlbnRzKCkuX19wcm90b19fKSBwcmVmaXggPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRhdGlvbiBvZiBhIHNpbmdsZSBldmVudCBsaXN0ZW5lci5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHBhcmFtIHtCb29sZWFufSBbb25jZT1mYWxzZV0gU3BlY2lmeSBpZiB0aGUgbGlzdGVuZXIgaXMgYSBvbmUtdGltZSBsaXN0ZW5lci5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gRUUoZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgdGhpcy5mbiA9IGZuO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLm9uY2UgPSBvbmNlIHx8IGZhbHNlO1xufVxuXG4vKipcbiAqIEFkZCBhIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBlbWl0dGVyIFJlZmVyZW5jZSB0byB0aGUgYEV2ZW50RW1pdHRlcmAgaW5zdGFuY2UuXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHBhcmFtIHtCb29sZWFufSBvbmNlIFNwZWNpZnkgaWYgdGhlIGxpc3RlbmVyIGlzIGEgb25lLXRpbWUgbGlzdGVuZXIuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gYWRkTGlzdGVuZXIoZW1pdHRlciwgZXZlbnQsIGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXIgPSBuZXcgRUUoZm4sIGNvbnRleHQgfHwgZW1pdHRlciwgb25jZSlcbiAgICAsIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCFlbWl0dGVyLl9ldmVudHNbZXZ0XSkgZW1pdHRlci5fZXZlbnRzW2V2dF0gPSBsaXN0ZW5lciwgZW1pdHRlci5fZXZlbnRzQ291bnQrKztcbiAgZWxzZSBpZiAoIWVtaXR0ZXIuX2V2ZW50c1tldnRdLmZuKSBlbWl0dGVyLl9ldmVudHNbZXZ0XS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZSBlbWl0dGVyLl9ldmVudHNbZXZ0XSA9IFtlbWl0dGVyLl9ldmVudHNbZXZ0XSwgbGlzdGVuZXJdO1xuXG4gIHJldHVybiBlbWl0dGVyO1xufVxuXG4vKipcbiAqIENsZWFyIGV2ZW50IGJ5IG5hbWUuXG4gKlxuICogQHBhcmFtIHtFdmVudEVtaXR0ZXJ9IGVtaXR0ZXIgUmVmZXJlbmNlIHRvIHRoZSBgRXZlbnRFbWl0dGVyYCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldnQgVGhlIEV2ZW50IG5hbWUuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjbGVhckV2ZW50KGVtaXR0ZXIsIGV2dCkge1xuICBpZiAoLS1lbWl0dGVyLl9ldmVudHNDb3VudCA9PT0gMCkgZW1pdHRlci5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICBlbHNlIGRlbGV0ZSBlbWl0dGVyLl9ldmVudHNbZXZ0XTtcbn1cblxuLyoqXG4gKiBNaW5pbWFsIGBFdmVudEVtaXR0ZXJgIGludGVyZmFjZSB0aGF0IGlzIG1vbGRlZCBhZ2FpbnN0IHRoZSBOb2RlLmpzXG4gKiBgRXZlbnRFbWl0dGVyYCBpbnRlcmZhY2UuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG59XG5cbi8qKlxuICogUmV0dXJuIGFuIGFycmF5IGxpc3RpbmcgdGhlIGV2ZW50cyBmb3Igd2hpY2ggdGhlIGVtaXR0ZXIgaGFzIHJlZ2lzdGVyZWRcbiAqIGxpc3RlbmVycy5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHZhciBuYW1lcyA9IFtdXG4gICAgLCBldmVudHNcbiAgICAsIG5hbWU7XG5cbiAgaWYgKHRoaXMuX2V2ZW50c0NvdW50ID09PSAwKSByZXR1cm4gbmFtZXM7XG5cbiAgZm9yIChuYW1lIGluIChldmVudHMgPSB0aGlzLl9ldmVudHMpKSB7XG4gICAgaWYgKGhhcy5jYWxsKGV2ZW50cywgbmFtZSkpIG5hbWVzLnB1c2gocHJlZml4ID8gbmFtZS5zbGljZSgxKSA6IG5hbWUpO1xuICB9XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICByZXR1cm4gbmFtZXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZXZlbnRzKSk7XG4gIH1cblxuICByZXR1cm4gbmFtZXM7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgbGlzdGVuZXJzIHJlZ2lzdGVyZWQgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0FycmF5fSBUaGUgcmVnaXN0ZXJlZCBsaXN0ZW5lcnMuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKGV2ZW50KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50XG4gICAgLCBoYW5kbGVycyA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmICghaGFuZGxlcnMpIHJldHVybiBbXTtcbiAgaWYgKGhhbmRsZXJzLmZuKSByZXR1cm4gW2hhbmRsZXJzLmZuXTtcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGhhbmRsZXJzLmxlbmd0aCwgZWUgPSBuZXcgQXJyYXkobCk7IGkgPCBsOyBpKyspIHtcbiAgICBlZVtpXSA9IGhhbmRsZXJzW2ldLmZuO1xuICB9XG5cbiAgcmV0dXJuIGVlO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIG51bWJlciBvZiBsaXN0ZW5lcnMgbGlzdGVuaW5nIHRvIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge051bWJlcn0gVGhlIG51bWJlciBvZiBsaXN0ZW5lcnMuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uIGxpc3RlbmVyQ291bnQoZXZlbnQpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnRcbiAgICAsIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmICghbGlzdGVuZXJzKSByZXR1cm4gMDtcbiAgaWYgKGxpc3RlbmVycy5mbikgcmV0dXJuIDE7XG4gIHJldHVybiBsaXN0ZW5lcnMubGVuZ3RoO1xufTtcblxuLyoqXG4gKiBDYWxscyBlYWNoIG9mIHRoZSBsaXN0ZW5lcnMgcmVnaXN0ZXJlZCBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBldmVudCBoYWQgbGlzdGVuZXJzLCBlbHNlIGBmYWxzZWAuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQoZXZlbnQsIGExLCBhMiwgYTMsIGE0LCBhNSkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdXG4gICAgLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgLCBhcmdzXG4gICAgLCBpO1xuXG4gIGlmIChsaXN0ZW5lcnMuZm4pIHtcbiAgICBpZiAobGlzdGVuZXJzLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVycy5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICBjYXNlIDE6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCksIHRydWU7XG4gICAgICBjYXNlIDI6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEpLCB0cnVlO1xuICAgICAgY2FzZSAzOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiksIHRydWU7XG4gICAgICBjYXNlIDQ6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMyksIHRydWU7XG4gICAgICBjYXNlIDU6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQpLCB0cnVlO1xuICAgICAgY2FzZSA2OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMsIGE0LCBhNSksIHRydWU7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mbi5hcHBseShsaXN0ZW5lcnMuY29udGV4dCwgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGhcbiAgICAgICwgajtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGxpc3RlbmVyc1tpXS5vbmNlKSB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnNbaV0uZm4sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICAgIGNhc2UgMTogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQpOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEpOyBicmVhaztcbiAgICAgICAgY2FzZSAzOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEsIGEyKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgNDogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExLCBhMiwgYTMpOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAoIWFyZ3MpIGZvciAoaiA9IDEsIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0xKTsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICBhcmdzW2ogLSAxXSA9IGFyZ3VtZW50c1tqXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsaXN0ZW5lcnNbaV0uZm4uYXBwbHkobGlzdGVuZXJzW2ldLmNvbnRleHQsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBBZGQgYSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IFtjb250ZXh0PXRoaXNdIFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIG9uKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICByZXR1cm4gYWRkTGlzdGVuZXIodGhpcywgZXZlbnQsIGZuLCBjb250ZXh0LCBmYWxzZSk7XG59O1xuXG4vKipcbiAqIEFkZCBhIG9uZS10aW1lIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gW2NvbnRleHQ9dGhpc10gVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICByZXR1cm4gYWRkTGlzdGVuZXIodGhpcywgZXZlbnQsIGZuLCBjb250ZXh0LCB0cnVlKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBsaXN0ZW5lcnMgb2YgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBPbmx5IHJlbW92ZSB0aGUgbGlzdGVuZXJzIHRoYXQgbWF0Y2ggdGhpcyBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBPbmx5IHJlbW92ZSB0aGUgbGlzdGVuZXJzIHRoYXQgaGF2ZSB0aGlzIGNvbnRleHQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9uY2UgT25seSByZW1vdmUgb25lLXRpbWUgbGlzdGVuZXJzLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiB0aGlzO1xuICBpZiAoIWZuKSB7XG4gICAgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmIChsaXN0ZW5lcnMuZm4pIHtcbiAgICBpZiAoXG4gICAgICBsaXN0ZW5lcnMuZm4gPT09IGZuICYmXG4gICAgICAoIW9uY2UgfHwgbGlzdGVuZXJzLm9uY2UpICYmXG4gICAgICAoIWNvbnRleHQgfHwgbGlzdGVuZXJzLmNvbnRleHQgPT09IGNvbnRleHQpXG4gICAgKSB7XG4gICAgICBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSAwLCBldmVudHMgPSBbXSwgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGxpc3RlbmVyc1tpXS5mbiAhPT0gZm4gfHxcbiAgICAgICAgKG9uY2UgJiYgIWxpc3RlbmVyc1tpXS5vbmNlKSB8fFxuICAgICAgICAoY29udGV4dCAmJiBsaXN0ZW5lcnNbaV0uY29udGV4dCAhPT0gY29udGV4dClcbiAgICAgICkge1xuICAgICAgICBldmVudHMucHVzaChsaXN0ZW5lcnNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vXG4gICAgLy8gUmVzZXQgdGhlIGFycmF5LCBvciByZW1vdmUgaXQgY29tcGxldGVseSBpZiB3ZSBoYXZlIG5vIG1vcmUgbGlzdGVuZXJzLlxuICAgIC8vXG4gICAgaWYgKGV2ZW50cy5sZW5ndGgpIHRoaXMuX2V2ZW50c1tldnRdID0gZXZlbnRzLmxlbmd0aCA9PT0gMSA/IGV2ZW50c1swXSA6IGV2ZW50cztcbiAgICBlbHNlIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYWxsIGxpc3RlbmVycywgb3IgdGhvc2Ugb2YgdGhlIHNwZWNpZmllZCBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gW2V2ZW50XSBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQpIHtcbiAgdmFyIGV2dDtcblxuICBpZiAoZXZlbnQpIHtcbiAgICBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuICAgIGlmICh0aGlzLl9ldmVudHNbZXZ0XSkgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vXG4vLyBBbGlhcyBtZXRob2RzIG5hbWVzIGJlY2F1c2UgcGVvcGxlIHJvbGwgbGlrZSB0aGF0LlxuLy9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBwcmVmaXguXG4vL1xuRXZlbnRFbWl0dGVyLnByZWZpeGVkID0gcHJlZml4O1xuXG4vL1xuLy8gQWxsb3cgYEV2ZW50RW1pdHRlcmAgdG8gYmUgaW1wb3J0ZWQgYXMgbW9kdWxlIG5hbWVzcGFjZS5cbi8vXG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBtb2R1bGUuXG4vL1xuaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgbW9kdWxlKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xufVxuIiwiLypcbiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gICAgd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbi8qKlxuICogQGZpbGUgYmF0Y2guanNcbiAqIEBhdXRob3IgTWFyZWsgS290ZXdpY3ogPG1hcmVrQGV0aGRldi5jb20+XG4gKiBAZGF0ZSAyMDE1XG4gKi9cblwidXNlIHN0cmljdFwiO1xudmFyIEpzb25ycGMgPSByZXF1aXJlKCcuL2pzb25ycGMnKTtcbnZhciBlcnJvcnMgPSByZXF1aXJlKCd3ZWIzLWNvcmUtaGVscGVycycpLmVycm9ycztcbnZhciBCYXRjaCA9IGZ1bmN0aW9uIChyZXF1ZXN0TWFuYWdlcikge1xuICAgIHRoaXMucmVxdWVzdE1hbmFnZXIgPSByZXF1ZXN0TWFuYWdlcjtcbiAgICB0aGlzLnJlcXVlc3RzID0gW107XG59O1xuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIGFkZCBjcmVhdGUgbmV3IHJlcXVlc3QgdG8gYmF0Y2ggcmVxdWVzdFxuICpcbiAqIEBtZXRob2QgYWRkXG4gKiBAcGFyYW0ge09iamVjdH0ganNvbnJwYyByZXF1ZXQgb2JqZWN0XG4gKi9cbkJhdGNoLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAocmVxdWVzdCkge1xuICAgIHRoaXMucmVxdWVzdHMucHVzaChyZXF1ZXN0KTtcbn07XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gZXhlY3V0ZSBiYXRjaCByZXF1ZXN0XG4gKlxuICogQG1ldGhvZCBleGVjdXRlXG4gKi9cbkJhdGNoLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXF1ZXN0cyA9IHRoaXMucmVxdWVzdHM7XG4gICAgdGhpcy5yZXF1ZXN0TWFuYWdlci5zZW5kQmF0Y2gocmVxdWVzdHMsIGZ1bmN0aW9uIChlcnIsIHJlc3VsdHMpIHtcbiAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG4gICAgICAgIHJlcXVlc3RzLm1hcChmdW5jdGlvbiAocmVxdWVzdCwgaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzW2luZGV4XSB8fCB7fTtcbiAgICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0LCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKHJlcXVlc3RzW2luZGV4XS5jYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0c1tpbmRleF0uY2FsbGJhY2soZXJyb3JzLkVycm9yUmVzcG9uc2UocmVzdWx0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghSnNvbnJwYy5pc1ZhbGlkUmVzcG9uc2UocmVzdWx0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdHNbaW5kZXhdLmNhbGxiYWNrKGVycm9ycy5JbnZhbGlkUmVzcG9uc2UocmVzdWx0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RzW2luZGV4XS5jYWxsYmFjayhudWxsLCByZXF1ZXN0c1tpbmRleF0uZm9ybWF0ID8gcmVxdWVzdHNbaW5kZXhdLmZvcm1hdChyZXN1bHQucmVzdWx0KSA6IHJlc3VsdC5yZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RzW2luZGV4XS5jYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBCYXRjaDtcbiIsIi8qXG4gVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxuIHdlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxuIHdlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuIGFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuLyoqXG4gKiBAZmlsZSBnaXZlblByb3ZpZGVyLmpzXG4gKiBAYXV0aG9yIEZhYmlhbiBWb2dlbHN0ZWxsZXIgPGZhYmlhbkBldGhlcmV1bS5vcmc+XG4gKiBAZGF0ZSAyMDE3XG4gKi9cblwidXNlIHN0cmljdFwiO1xudmFyIGdpdmVuUHJvdmlkZXIgPSBudWxsO1xuLy8gQUREIEdJVkVOIFBST1ZJREVSXG4vKiBqc2hpbnQgaWdub3JlOnN0YXJ0ICovXG52YXIgZ2xvYmFsO1xudHJ5IHtcbiAgICBnbG9iYWwgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuY2F0Y2ggKGUpIHtcbiAgICBnbG9iYWwgPSB3aW5kb3c7XG59XG4vLyBFSVAtMTE5Mzogd2luZG93LmV0aGVyZXVtXG5pZiAodHlwZW9mIGdsb2JhbC5ldGhlcmV1bSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBnaXZlblByb3ZpZGVyID0gZ2xvYmFsLmV0aGVyZXVtO1xuICAgIC8vIExlZ2FjeSB3ZWIzLmN1cnJlbnRQcm92aWRlclxufVxuZWxzZSBpZiAodHlwZW9mIGdsb2JhbC53ZWIzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwud2ViMy5jdXJyZW50UHJvdmlkZXIpIHtcbiAgICBpZiAoZ2xvYmFsLndlYjMuY3VycmVudFByb3ZpZGVyLnNlbmRBc3luYykge1xuICAgICAgICBnbG9iYWwud2ViMy5jdXJyZW50UHJvdmlkZXIuc2VuZCA9IGdsb2JhbC53ZWIzLmN1cnJlbnRQcm92aWRlci5zZW5kQXN5bmM7XG4gICAgICAgIGRlbGV0ZSBnbG9iYWwud2ViMy5jdXJyZW50UHJvdmlkZXIuc2VuZEFzeW5jO1xuICAgIH1cbiAgICAvLyBpZiBjb25uZWN0aW9uIGlzICdpcGNQcm92aWRlcldyYXBwZXInLCBhZGQgc3Vic2NyaXB0aW9uIHN1cHBvcnRcbiAgICBpZiAoIWdsb2JhbC53ZWIzLmN1cnJlbnRQcm92aWRlci5vbiAmJlxuICAgICAgICBnbG9iYWwud2ViMy5jdXJyZW50UHJvdmlkZXIuY29ubmVjdGlvbiAmJlxuICAgICAgICBnbG9iYWwud2ViMy5jdXJyZW50UHJvdmlkZXIuY29ubmVjdGlvbi5jb25zdHJ1Y3Rvci5uYW1lID09PSAnaXBjUHJvdmlkZXJXcmFwcGVyJykge1xuICAgICAgICBnbG9iYWwud2ViMy5jdXJyZW50UHJvdmlkZXIub24gPSBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgc2Vjb25kIHBhcmFtZXRlciBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkYXRhJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uLm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBkYXRhLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoJ0NvdWxkblxcJ3QgcGFyc2UgcmVzcG9uc2UgZGF0YScgKyBkYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBub3RpZmljYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzdWx0LmlkICYmIHJlc3VsdC5tZXRob2QuaW5kZXhPZignX3N1YnNjcmlwdGlvbicpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24ub24odHlwZSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2l2ZW5Qcm92aWRlciA9IGdsb2JhbC53ZWIzLmN1cnJlbnRQcm92aWRlcjtcbn1cbi8qIGpzaGludCBpZ25vcmU6ZW5kICovXG5tb2R1bGUuZXhwb3J0cyA9IGdpdmVuUHJvdmlkZXI7XG4iLCIvKlxuICAgIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG4gICAgd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICAgIHdlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAgICBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuLyoqXG4gKiBAZmlsZSBpbmRleC5qc1xuICogQGF1dGhvciBGYWJpYW4gVm9nZWxzdGVsbGVyIDxmYWJpYW5AZXRoZXJldW0ub3JnPlxuICogQGRhdGUgMjAxN1xuICovXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IHsgY2FsbGJhY2tpZnkgfSA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBlcnJvcnMgPSByZXF1aXJlKCd3ZWIzLWNvcmUtaGVscGVycycpLmVycm9ycztcbnZhciBKc29ucnBjID0gcmVxdWlyZSgnLi9qc29ucnBjLmpzJyk7XG52YXIgQmF0Y2hNYW5hZ2VyID0gcmVxdWlyZSgnLi9iYXRjaC5qcycpO1xudmFyIGdpdmVuUHJvdmlkZXIgPSByZXF1aXJlKCcuL2dpdmVuUHJvdmlkZXIuanMnKTtcbi8qKlxuICogSXQncyByZXNwb25zaWJsZSBmb3IgcGFzc2luZyBtZXNzYWdlcyB0byBwcm92aWRlcnNcbiAqIEl0J3MgYWxzbyByZXNwb25zaWJsZSBmb3IgcG9sbGluZyB0aGUgZXRoZXJldW0gbm9kZSBmb3IgaW5jb21pbmcgbWVzc2FnZXNcbiAqIERlZmF1bHQgcG9sbCB0aW1lb3V0IGlzIDEgc2Vjb25kXG4gKiBTaW5nbGV0b25cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9cHJvdmlkZXJcbiAqIEBwYXJhbSB7TmV0LlNvY2tldH0gbmV0XG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBSZXF1ZXN0TWFuYWdlciA9IGZ1bmN0aW9uIFJlcXVlc3RNYW5hZ2VyKHByb3ZpZGVyLCBuZXQpIHtcbiAgICB0aGlzLnByb3ZpZGVyID0gbnVsbDtcbiAgICB0aGlzLnByb3ZpZGVycyA9IFJlcXVlc3RNYW5hZ2VyLnByb3ZpZGVycztcbiAgICB0aGlzLnNldFByb3ZpZGVyKHByb3ZpZGVyLCBuZXQpO1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IG5ldyBNYXAoKTtcbn07XG5SZXF1ZXN0TWFuYWdlci5naXZlblByb3ZpZGVyID0gZ2l2ZW5Qcm92aWRlcjtcblJlcXVlc3RNYW5hZ2VyLnByb3ZpZGVycyA9IHtcbiAgICBXZWJzb2NrZXRQcm92aWRlcjogcmVxdWlyZSgnd2ViMy1wcm92aWRlcnMtd3MnKSxcbiAgICBIdHRwUHJvdmlkZXI6IHJlcXVpcmUoJ3dlYjMtcHJvdmlkZXJzLWh0dHAnKSxcbiAgICBJcGNQcm92aWRlcjogcmVxdWlyZSgnd2ViMy1wcm92aWRlcnMtaXBjJylcbn07XG4vKipcbiAqIFNob3VsZCBiZSB1c2VkIHRvIHNldCBwcm92aWRlciBvZiByZXF1ZXN0IG1hbmFnZXJcbiAqXG4gKiBAbWV0aG9kIHNldFByb3ZpZGVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHByb3ZpZGVyXG4gKiBAcGFyYW0ge25ldC5Tb2NrZXR9IG5ldFxuICpcbiAqIEByZXR1cm5zIHZvaWRcbiAqL1xuUmVxdWVzdE1hbmFnZXIucHJvdG90eXBlLnNldFByb3ZpZGVyID0gZnVuY3Rpb24gKHByb3ZpZGVyLCBuZXQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIC8vIGF1dG9kZXRlY3QgcHJvdmlkZXJcbiAgICBpZiAocHJvdmlkZXIgJiYgdHlwZW9mIHByb3ZpZGVyID09PSAnc3RyaW5nJyAmJiB0aGlzLnByb3ZpZGVycykge1xuICAgICAgICAvLyBIVFRQXG4gICAgICAgIGlmICgvXmh0dHAocyk/OlxcL1xcLy9pLnRlc3QocHJvdmlkZXIpKSB7XG4gICAgICAgICAgICBwcm92aWRlciA9IG5ldyB0aGlzLnByb3ZpZGVycy5IdHRwUHJvdmlkZXIocHJvdmlkZXIpO1xuICAgICAgICAgICAgLy8gV1NcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgvXndzKHMpPzpcXC9cXC8vaS50ZXN0KHByb3ZpZGVyKSkge1xuICAgICAgICAgICAgcHJvdmlkZXIgPSBuZXcgdGhpcy5wcm92aWRlcnMuV2Vic29ja2V0UHJvdmlkZXIocHJvdmlkZXIpO1xuICAgICAgICAgICAgLy8gSVBDXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHJvdmlkZXIgJiYgdHlwZW9mIG5ldCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG5ldC5jb25uZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBwcm92aWRlciA9IG5ldyB0aGlzLnByb3ZpZGVycy5JcGNQcm92aWRlcihwcm92aWRlciwgbmV0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcm92aWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5cXCd0IGF1dG9kZXRlY3QgcHJvdmlkZXIgZm9yIFwiJyArIHByb3ZpZGVyICsgJ1wiJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gcmVzZXQgdGhlIG9sZCBvbmUgYmVmb3JlIGNoYW5naW5nLCBpZiBzdGlsbCBjb25uZWN0ZWRcbiAgICBpZiAodGhpcy5wcm92aWRlciAmJiB0aGlzLnByb3ZpZGVyLmNvbm5lY3RlZClcbiAgICAgICAgdGhpcy5jbGVhclN1YnNjcmlwdGlvbnMoKTtcbiAgICB0aGlzLnByb3ZpZGVyID0gcHJvdmlkZXIgfHwgbnVsbDtcbiAgICAvLyBsaXN0ZW4gdG8gaW5jb21pbmcgbm90aWZpY2F0aW9uc1xuICAgIGlmICh0aGlzLnByb3ZpZGVyICYmIHRoaXMucHJvdmlkZXIub24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwcm92aWRlci5yZXF1ZXN0ID09PSAnZnVuY3Rpb24nKSB7IC8vIEVJUC0xMTkzIHByb3ZpZGVyXG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVyLm9uKCdtZXNzYWdlJywgZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgICAgICAgICAgICAgICBpZiAocGF5bG9hZCAmJiBwYXlsb2FkLnR5cGUgPT09ICdldGhfc3Vic2NyaXB0aW9uJyAmJiBwYXlsb2FkLmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHBheWxvYWQuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc3Vic2NyaXB0aW9uICYmIF90aGlzLnN1YnNjcmlwdGlvbnMuaGFzKGRhdGEuc3Vic2NyaXB0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc3Vic2NyaXB0aW9ucy5nZXQoZGF0YS5zdWJzY3JpcHRpb24pLmNhbGxiYWNrKG51bGwsIGRhdGEucmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAvLyBsZWdhY3kgcHJvdmlkZXIgc3Vic2NyaXB0aW9uIGV2ZW50XG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVyLm9uKCdkYXRhJywgZnVuY3Rpb24gZGF0YShyZXN1bHQsIGRlcHJlY2F0ZWRSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgfHwgZGVwcmVjYXRlZFJlc3VsdDsgLy8gdGhpcyBpcyBmb3IgcG9zc2libGUgb2xkIHByb3ZpZGVycywgd2hpY2ggbWF5IGhhZCB0aGUgZXJyb3IgZmlyc3QgaGFuZGxlclxuICAgICAgICAgICAgICAgIC8vIGlmIHJlc3VsdCBpcyBhIHN1YnNjcmlwdGlvbiwgY2FsbCBjYWxsYmFjayBmb3IgdGhhdCBzdWJzY3JpcHRpb25cbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0Lm1ldGhvZCAmJiByZXN1bHQucGFyYW1zICYmIHJlc3VsdC5wYXJhbXMuc3Vic2NyaXB0aW9uICYmIF90aGlzLnN1YnNjcmlwdGlvbnMuaGFzKHJlc3VsdC5wYXJhbXMuc3Vic2NyaXB0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zdWJzY3JpcHRpb25zLmdldChyZXN1bHQucGFyYW1zLnN1YnNjcmlwdGlvbikuY2FsbGJhY2sobnVsbCwgcmVzdWx0LnBhcmFtcy5yZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlc3Vic2NyaWJlIGlmIHRoZSBwcm92aWRlciBoYXMgcmVjb25uZWN0ZWRcbiAgICAgICAgdGhpcy5wcm92aWRlci5vbignY29ubmVjdCcsIGZ1bmN0aW9uIGNvbm5lY3QoKSB7XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5zdWJzY3JpcHRpb24ucmVzdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gbm90aWZ5IGFsbCBzdWJzY3JpcHRpb25zIGFib3V0IHRoZSBlcnJvciBjb25kaXRpb25cbiAgICAgICAgdGhpcy5wcm92aWRlci5vbignZXJyb3InLCBmdW5jdGlvbiBlcnJvcihlcnJvcikge1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24uY2FsbGJhY2soZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBub3RpZnkgYWxsIHN1YnNjcmlwdGlvbnMgYWJvdXQgYmFkIGNsb3NlIGNvbmRpdGlvbnNcbiAgICAgICAgY29uc3QgZGlzY29ubmVjdCA9IGZ1bmN0aW9uIGRpc2Nvbm5lY3QoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMuX2lzQ2xlYW5DbG9zZUV2ZW50KGV2ZW50KSB8fCBfdGhpcy5faXNJcGNDbG9zZUVycm9yKGV2ZW50KSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnN1YnNjcmlwdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5jYWxsYmFjayhlcnJvcnMuQ29ubmVjdGlvbkNsb3NlRXJyb3IoZXZlbnQpKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc3Vic2NyaXB0aW9ucy5kZWxldGUoc3Vic2NyaXB0aW9uLnN1YnNjcmlwdGlvbi5pZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLnByb3ZpZGVyICYmIF90aGlzLnByb3ZpZGVyLmVtaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJvdmlkZXIuZW1pdCgnZXJyb3InLCBlcnJvcnMuQ29ubmVjdGlvbkNsb3NlRXJyb3IoZXZlbnQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX3RoaXMucHJvdmlkZXIgJiYgX3RoaXMucHJvdmlkZXIuZW1pdCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnByb3ZpZGVyLmVtaXQoJ2VuZCcsIGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gVE9ETzogUmVtb3ZlIGNsb3NlIG9uY2UgdGhlIHN0YW5kYXJkIGFsbG93cyBpdFxuICAgICAgICB0aGlzLnByb3ZpZGVyLm9uKCdjbG9zZScsIGRpc2Nvbm5lY3QpO1xuICAgICAgICB0aGlzLnByb3ZpZGVyLm9uKCdkaXNjb25uZWN0JywgZGlzY29ubmVjdCk7XG4gICAgICAgIC8vIFRPRE8gYWRkIGVuZCwgdGltZW91dD8/XG4gICAgfVxufTtcbi8qKlxuICogQXN5bmNocm9ub3VzbHkgc2VuZCByZXF1ZXN0IHRvIHByb3ZpZGVyLlxuICogUHJlZmVycyB0byB1c2UgdGhlIGByZXF1ZXN0YCBtZXRob2QgYXZhaWxhYmxlIG9uIHRoZSBwcm92aWRlciBhcyBzcGVjaWZpZWQgaW4gW0VJUC0xMTkzXShodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTExOTMpLlxuICogSWYgYHJlcXVlc3RgIGlzIG5vdCBhdmFpbGFibGUsIGZhbGxzIGJhY2sgdG8gYHNlbmRBc3luY2AgYW5kIGBzZW5kYCByZXNwZWN0aXZlbHkuXG4gKiBAbWV0aG9kIHNlbmRcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICovXG5SZXF1ZXN0TWFuYWdlci5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChkYXRhLCBjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkgeyB9O1xuICAgIGlmICghdGhpcy5wcm92aWRlcikge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyb3JzLkludmFsaWRQcm92aWRlcigpKTtcbiAgICB9XG4gICAgY29uc3QgeyBtZXRob2QsIHBhcmFtcyB9ID0gZGF0YTtcbiAgICBjb25zdCBqc29ucnBjUGF5bG9hZCA9IEpzb25ycGMudG9QYXlsb2FkKG1ldGhvZCwgcGFyYW1zKTtcbiAgICBjb25zdCBqc29ucnBjUmVzdWx0Q2FsbGJhY2sgPSB0aGlzLl9qc29ucnBjUmVzdWx0Q2FsbGJhY2soY2FsbGJhY2ssIGpzb25ycGNQYXlsb2FkKTtcbiAgICBpZiAodGhpcy5wcm92aWRlci5yZXF1ZXN0KSB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrUmVxdWVzdCA9IGNhbGxiYWNraWZ5KHRoaXMucHJvdmlkZXIucmVxdWVzdC5iaW5kKHRoaXMucHJvdmlkZXIpKTtcbiAgICAgICAgY29uc3QgcmVxdWVzdEFyZ3MgPSB7IG1ldGhvZCwgcGFyYW1zIH07XG4gICAgICAgIGNhbGxiYWNrUmVxdWVzdChyZXF1ZXN0QXJncywgY2FsbGJhY2spO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLnByb3ZpZGVyLnNlbmRBc3luYykge1xuICAgICAgICB0aGlzLnByb3ZpZGVyLnNlbmRBc3luYyhqc29ucnBjUGF5bG9hZCwganNvbnJwY1Jlc3VsdENhbGxiYWNrKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGhpcy5wcm92aWRlci5zZW5kKSB7XG4gICAgICAgIHRoaXMucHJvdmlkZXIuc2VuZChqc29ucnBjUGF5bG9hZCwganNvbnJwY1Jlc3VsdENhbGxiYWNrKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUHJvdmlkZXIgZG9lcyBub3QgaGF2ZSBhIHJlcXVlc3Qgb3Igc2VuZCBtZXRob2QgdG8gdXNlLicpO1xuICAgIH1cbn07XG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IHNlbmQgYmF0Y2ggcmVxdWVzdC5cbiAqIE9ubHkgd29ya3MgaWYgcHJvdmlkZXIgc3VwcG9ydHMgYmF0Y2ggbWV0aG9kcyB0aHJvdWdoIGBzZW5kQXN5bmNgIG9yIGBzZW5kYC5cbiAqIEBtZXRob2Qgc2VuZEJhdGNoXG4gKiBAcGFyYW0ge0FycmF5fSBkYXRhIC0gYXJyYXkgb2YgcGF5bG9hZCBvYmplY3RzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICovXG5SZXF1ZXN0TWFuYWdlci5wcm90b3R5cGUuc2VuZEJhdGNoID0gZnVuY3Rpb24gKGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCF0aGlzLnByb3ZpZGVyKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnJvcnMuSW52YWxpZFByb3ZpZGVyKCkpO1xuICAgIH1cbiAgICB2YXIgcGF5bG9hZCA9IEpzb25ycGMudG9CYXRjaFBheWxvYWQoZGF0YSk7XG4gICAgdGhpcy5wcm92aWRlclt0aGlzLnByb3ZpZGVyLnNlbmRBc3luYyA/ICdzZW5kQXN5bmMnIDogJ3NlbmQnXShwYXlsb2FkLCBmdW5jdGlvbiAoZXJyLCByZXN1bHRzKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZXN1bHRzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycm9ycy5JbnZhbGlkUmVzcG9uc2UocmVzdWx0cykpO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdHMpO1xuICAgIH0pO1xufTtcbi8qKlxuICogV2FpdHMgZm9yIG5vdGlmaWNhdGlvbnNcbiAqXG4gKiBAbWV0aG9kIGFkZFN1YnNjcmlwdGlvblxuICogQHBhcmFtIHtTdWJzY3JpcHRpb259IHN1YnNjcmlwdGlvbiAgICAgICAgIHRoZSBzdWJzY3JpcHRpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlICAgICAgICAgdGhlIHN1YnNjcmlwdGlvbiBuYW1lc3BhY2UgKGV0aCwgcGVyc29uYWwsIGV0YylcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrICAgdGhlIGNhbGxiYWNrIHRvIGNhbGwgZm9yIGluY29taW5nIG5vdGlmaWNhdGlvbnNcbiAqL1xuUmVxdWVzdE1hbmFnZXIucHJvdG90eXBlLmFkZFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24sIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRoaXMucHJvdmlkZXIub24pIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnNldChzdWJzY3JpcHRpb24uaWQsIHtcbiAgICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgcHJvdmlkZXIgZG9lc25cXCd0IHN1cHBvcnQgc3Vic2NyaXB0aW9uczogJyArIHRoaXMucHJvdmlkZXIuY29uc3RydWN0b3IubmFtZSk7XG4gICAgfVxufTtcbi8qKlxuICogV2FpdHMgZm9yIG5vdGlmaWNhdGlvbnNcbiAqXG4gKiBAbWV0aG9kIHJlbW92ZVN1YnNjcmlwdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IGlkICAgICAgICAgICB0aGUgc3Vic2NyaXB0aW9uIGlkXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAgIGZpcmVkIG9uY2UgdGhlIHN1YnNjcmlwdGlvbiBpcyByZW1vdmVkXG4gKi9cblJlcXVlc3RNYW5hZ2VyLnByb3RvdHlwZS5yZW1vdmVTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoaWQsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9ucy5oYXMoaWQpKSB7XG4gICAgICAgIHZhciB0eXBlID0gdGhpcy5zdWJzY3JpcHRpb25zLmdldChpZCkuc3Vic2NyaXB0aW9uLm9wdGlvbnMudHlwZTtcbiAgICAgICAgLy8gcmVtb3ZlIHN1YnNjcmlwdGlvbiBmaXJzdCB0byBhdm9pZCByZWVudHJ5XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5kZWxldGUoaWQpO1xuICAgICAgICAvLyB0aGVuLCB0cnkgdG8gYWN0dWFsbHkgdW5zdWJzY3JpYmVcbiAgICAgICAgdGhpcy5zZW5kKHtcbiAgICAgICAgICAgIG1ldGhvZDogdHlwZSArICdfdW5zdWJzY3JpYmUnLFxuICAgICAgICAgICAgcGFyYW1zOiBbaWRdXG4gICAgICAgIH0sIGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIGNhbGwgdGhlIGNhbGxiYWNrIGlmIHRoZSBzdWJzY3JpcHRpb24gd2FzIGFscmVhZHkgcmVtb3ZlZFxuICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICB9XG59O1xuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIHJlc2V0IHRoZSBzdWJzY3JpcHRpb25zXG4gKlxuICogQG1ldGhvZCByZXNldFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5SZXF1ZXN0TWFuYWdlci5wcm90b3R5cGUuY2xlYXJTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24gKGtlZXBJc1N5bmNpbmcpIHtcbiAgICB0cnkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvLyB1bmluc3RhbGwgYWxsIHN1YnNjcmlwdGlvbnNcbiAgICAgICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9ucy5zaXplID4gMCkge1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBpZCkge1xuICAgICAgICAgICAgICAgIGlmICgha2VlcElzU3luY2luZyB8fCB2YWx1ZS5uYW1lICE9PSAnc3luY2luZycpXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJlbW92ZVN1YnNjcmlwdGlvbihpZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyAgcmVzZXQgbm90aWZpY2F0aW9uIGNhbGxiYWNrcyBldGMuXG4gICAgICAgIGlmICh0aGlzLnByb3ZpZGVyLnJlc2V0KVxuICAgICAgICAgICAgdGhpcy5wcm92aWRlci5yZXNldCgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciB3aGlsZSBjbGVhcmluZyBzdWJzY3JpcHRpb25zOiAke2V9YCk7XG4gICAgfVxufTtcbi8qKlxuICogRXZhbHVhdGVzIFdTIGNsb3NlIGV2ZW50XG4gKlxuICogQG1ldGhvZCBfaXNDbGVhbkNsb3NlXG4gKlxuICogQHBhcmFtIHtDbG9zZUV2ZW50IHwgYm9vbGVhbn0gZXZlbnQgV1MgY2xvc2UgZXZlbnQgb3IgZXhjZXB0aW9uIGZsYWdcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuUmVxdWVzdE1hbmFnZXIucHJvdG90eXBlLl9pc0NsZWFuQ2xvc2VFdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiB0eXBlb2YgZXZlbnQgPT09ICdvYmplY3QnICYmIChbMTAwMF0uaW5jbHVkZXMoZXZlbnQuY29kZSkgfHwgZXZlbnQud2FzQ2xlYW4gPT09IHRydWUpO1xufTtcbi8qKlxuICogRGV0ZWN0cyBJcGMgY2xvc2UgZXJyb3IuIFRoZSBub2RlLm5ldCBtb2R1bGUgZW1pdHMgKCdjbG9zZScsIGlzRXhjZXB0aW9uKVxuICpcbiAqIEBtZXRob2QgX2lzSXBjQ2xvc2VFcnJvclxuICpcbiAqIEBwYXJhbSB7Q2xvc2VFdmVudCB8IGJvb2xlYW59IGV2ZW50IFdTIGNsb3NlIGV2ZW50IG9yIGV4Y2VwdGlvbiBmbGFnXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cblJlcXVlc3RNYW5hZ2VyLnByb3RvdHlwZS5faXNJcGNDbG9zZUVycm9yID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBldmVudCA9PT0gJ2Jvb2xlYW4nICYmIGV2ZW50O1xufTtcbi8qKlxuICogVGhlIGpzb25ycGMgcmVzdWx0IGNhbGxiYWNrIGZvciBSZXF1ZXN0TWFuYWdlci5zZW5kXG4gKlxuICogQG1ldGhvZCBfanNvbnJwY1Jlc3VsdENhbGxiYWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgdGhlIGNhbGxiYWNrIHRvIHVzZVxuICogQHBhcmFtIHtPYmplY3R9IHBheWxvYWQgdGhlIGpzb25ycGMgcGF5bG9hZFxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gcmV0dXJuIGNhbGxiYWNrIG9mIGZvcm0gKGVyciwgcmVzdWx0KVxuICpcbiAqL1xuUmVxdWVzdE1hbmFnZXIucHJvdG90eXBlLl9qc29ucnBjUmVzdWx0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHBheWxvYWQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7XG4gICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LmlkICYmIHBheWxvYWQuaWQgIT09IHJlc3VsdC5pZCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcihgV3JvbmcgcmVzcG9uc2UgaWQgJHtyZXN1bHQuaWR9IChleHBlY3RlZDogJHtwYXlsb2FkLmlkfSkgaW4gJHtKU09OLnN0cmluZ2lmeShwYXlsb2FkKX1gKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnJvcnMuRXJyb3JSZXNwb25zZShyZXN1bHQpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIUpzb25ycGMuaXNWYWxpZFJlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnJvcnMuSW52YWxpZFJlc3BvbnNlKHJlc3VsdCkpO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdC5yZXN1bHQpO1xuICAgIH07XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgTWFuYWdlcjogUmVxdWVzdE1hbmFnZXIsXG4gICAgQmF0Y2hNYW5hZ2VyOiBCYXRjaE1hbmFnZXJcbn07XG4iLCIvKlxuICAgIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiAgICB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiAgICB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAgICBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuLyoqIEBmaWxlIGpzb25ycGMuanNcbiAqIEBhdXRob3JzOlxuICogICBGYWJpYW4gVm9nZWxzdGVsbGVyIDxmYWJpYW5AZXRoZXJldW0ub3JnPlxuICogICBNYXJlayBLb3Rld2ljeiA8bWFyZWtAZXRoZGV2LmNvbT5cbiAqICAgQWFyb24gS3VtYXZpcyA8YWFyb25Aa3VtYXZpcy5tZT5cbiAqIEBkYXRlIDIwMTVcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBJbml0aWFsaXplIEpzb25ycGMgYXMgYSBzaW1wbGUgb2JqZWN0IHdpdGggdXRpbGl0eSBmdW5jdGlvbnMuXG52YXIgSnNvbnJwYyA9IHtcbiAgICBtZXNzYWdlSWQ6IDBcbn07XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gdmFsaWQganNvbiBjcmVhdGUgcGF5bG9hZCBvYmplY3RcbiAqXG4gKiBAbWV0aG9kIHRvUGF5bG9hZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWV0aG9kIG9mIGpzb25ycGMgY2FsbCwgcmVxdWlyZWRcbiAqIEBwYXJhbSB7QXJyYXl9IHBhcmFtcywgYW4gYXJyYXkgb2YgbWV0aG9kIHBhcmFtcywgb3B0aW9uYWxcbiAqIEByZXR1cm5zIHtPYmplY3R9IHZhbGlkIGpzb25ycGMgcGF5bG9hZCBvYmplY3RcbiAqL1xuSnNvbnJwYy50b1BheWxvYWQgPSBmdW5jdGlvbiAobWV0aG9kLCBwYXJhbXMpIHtcbiAgICBpZiAoIW1ldGhvZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0pTT05SUEMgbWV0aG9kIHNob3VsZCBiZSBzcGVjaWZpZWQgZm9yIHBhcmFtczogXCInICsgSlNPTi5zdHJpbmdpZnkocGFyYW1zKSArICdcIiEnKTtcbiAgICB9XG4gICAgLy8gYWR2YW5jZSBtZXNzYWdlIElEXG4gICAgSnNvbnJwYy5tZXNzYWdlSWQrKztcbiAgICByZXR1cm4ge1xuICAgICAgICBqc29ucnBjOiAnMi4wJyxcbiAgICAgICAgaWQ6IEpzb25ycGMubWVzc2FnZUlkLFxuICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgcGFyYW1zOiBwYXJhbXMgfHwgW11cbiAgICB9O1xufTtcbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBjaGVjayBpZiBqc29ucnBjIHJlc3BvbnNlIGlzIHZhbGlkXG4gKlxuICogQG1ldGhvZCBpc1ZhbGlkUmVzcG9uc2VcbiAqIEBwYXJhbSB7T2JqZWN0fVxuICogQHJldHVybnMge0Jvb2xlYW59IHRydWUgaWYgcmVzcG9uc2UgaXMgdmFsaWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5Kc29ucnBjLmlzVmFsaWRSZXNwb25zZSA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHJlc3BvbnNlKSA/IHJlc3BvbnNlLmV2ZXJ5KHZhbGlkYXRlU2luZ2xlTWVzc2FnZSkgOiB2YWxpZGF0ZVNpbmdsZU1lc3NhZ2UocmVzcG9uc2UpO1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlU2luZ2xlTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiAhIW1lc3NhZ2UgJiZcbiAgICAgICAgICAgICFtZXNzYWdlLmVycm9yICYmXG4gICAgICAgICAgICBtZXNzYWdlLmpzb25ycGMgPT09ICcyLjAnICYmXG4gICAgICAgICAgICAodHlwZW9mIG1lc3NhZ2UuaWQgPT09ICdudW1iZXInIHx8IHR5cGVvZiBtZXNzYWdlLmlkID09PSAnc3RyaW5nJykgJiZcbiAgICAgICAgICAgIG1lc3NhZ2UucmVzdWx0ICE9PSB1bmRlZmluZWQ7IC8vIG9ubHkgdW5kZWZpbmVkIGlzIG5vdCB2YWxpZCBqc29uIG9iamVjdFxuICAgIH1cbn07XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gY3JlYXRlIGJhdGNoIHBheWxvYWQgb2JqZWN0XG4gKlxuICogQG1ldGhvZCB0b0JhdGNoUGF5bG9hZFxuICogQHBhcmFtIHtBcnJheX0gbWVzc2FnZXMsIGFuIGFycmF5IG9mIG9iamVjdHMgd2l0aCBtZXRob2QgKHJlcXVpcmVkKSBhbmQgcGFyYW1zIChvcHRpb25hbCkgZmllbGRzXG4gKiBAcmV0dXJucyB7QXJyYXl9IGJhdGNoIHBheWxvYWRcbiAqL1xuSnNvbnJwYy50b0JhdGNoUGF5bG9hZCA9IGZ1bmN0aW9uIChtZXNzYWdlcykge1xuICAgIHJldHVybiBtZXNzYWdlcy5tYXAoZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIEpzb25ycGMudG9QYXlsb2FkKG1lc3NhZ2UubWV0aG9kLCBtZXNzYWdlLnBhcmFtcyk7XG4gICAgfSk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBKc29ucnBjO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufSIsIi8vIEN1cnJlbnRseSBpbiBzeW5jIHdpdGggTm9kZS5qcyBsaWIvaW50ZXJuYWwvdXRpbC90eXBlcy5qc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2NvbW1pdC8xMTJjYzdjMjc1NTEyNTRhYTJiMTcwOThmYjc3NDg2N2YwNWVkMGQ5XG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGlzQXJndW1lbnRzT2JqZWN0ID0gcmVxdWlyZSgnaXMtYXJndW1lbnRzJyk7XG52YXIgaXNHZW5lcmF0b3JGdW5jdGlvbiA9IHJlcXVpcmUoJ2lzLWdlbmVyYXRvci1mdW5jdGlvbicpO1xudmFyIHdoaWNoVHlwZWRBcnJheSA9IHJlcXVpcmUoJ3doaWNoLXR5cGVkLWFycmF5Jyk7XG52YXIgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnaXMtdHlwZWQtYXJyYXknKTtcblxuZnVuY3Rpb24gdW5jdXJyeVRoaXMoZikge1xuICByZXR1cm4gZi5jYWxsLmJpbmQoZik7XG59XG5cbnZhciBCaWdJbnRTdXBwb3J0ZWQgPSB0eXBlb2YgQmlnSW50ICE9PSAndW5kZWZpbmVkJztcbnZhciBTeW1ib2xTdXBwb3J0ZWQgPSB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJztcblxudmFyIE9iamVjdFRvU3RyaW5nID0gdW5jdXJyeVRoaXMoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyk7XG5cbnZhciBudW1iZXJWYWx1ZSA9IHVuY3VycnlUaGlzKE51bWJlci5wcm90b3R5cGUudmFsdWVPZik7XG52YXIgc3RyaW5nVmFsdWUgPSB1bmN1cnJ5VGhpcyhTdHJpbmcucHJvdG90eXBlLnZhbHVlT2YpO1xudmFyIGJvb2xlYW5WYWx1ZSA9IHVuY3VycnlUaGlzKEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YpO1xuXG5pZiAoQmlnSW50U3VwcG9ydGVkKSB7XG4gIHZhciBiaWdJbnRWYWx1ZSA9IHVuY3VycnlUaGlzKEJpZ0ludC5wcm90b3R5cGUudmFsdWVPZik7XG59XG5cbmlmIChTeW1ib2xTdXBwb3J0ZWQpIHtcbiAgdmFyIHN5bWJvbFZhbHVlID0gdW5jdXJyeVRoaXMoU3ltYm9sLnByb3RvdHlwZS52YWx1ZU9mKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tCb3hlZFByaW1pdGl2ZSh2YWx1ZSwgcHJvdG90eXBlVmFsdWVPZikge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB0cnkge1xuICAgIHByb3RvdHlwZVZhbHVlT2YodmFsdWUpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0cy5pc0FyZ3VtZW50c09iamVjdCA9IGlzQXJndW1lbnRzT2JqZWN0O1xuZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gaXNHZW5lcmF0b3JGdW5jdGlvbjtcbmV4cG9ydHMuaXNUeXBlZEFycmF5ID0gaXNUeXBlZEFycmF5O1xuXG4vLyBUYWtlbiBmcm9tIGhlcmUgYW5kIG1vZGlmaWVkIGZvciBiZXR0ZXIgYnJvd3NlciBzdXBwb3J0XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3AtaXMtcHJvbWlzZS9ibG9iL2NkYTM1YTUxM2JkYTAzZjk3N2FkNWNkZTNhMDc5ZDIzN2U4MmQ3ZWYvaW5kZXguanNcbmZ1bmN0aW9uIGlzUHJvbWlzZShpbnB1dCkge1xuXHRyZXR1cm4gKFxuXHRcdChcblx0XHRcdHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJlxuXHRcdFx0aW5wdXQgaW5zdGFuY2VvZiBQcm9taXNlXG5cdFx0KSB8fFxuXHRcdChcblx0XHRcdGlucHV0ICE9PSBudWxsICYmXG5cdFx0XHR0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmXG5cdFx0XHR0eXBlb2YgaW5wdXQudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdFx0dHlwZW9mIGlucHV0LmNhdGNoID09PSAnZnVuY3Rpb24nXG5cdFx0KVxuXHQpO1xufVxuZXhwb3J0cy5pc1Byb21pc2UgPSBpc1Byb21pc2U7XG5cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIEFycmF5QnVmZmVyLmlzVmlldykge1xuICAgIHJldHVybiBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICBpc1R5cGVkQXJyYXkodmFsdWUpIHx8XG4gICAgaXNEYXRhVmlldyh2YWx1ZSlcbiAgKTtcbn1cbmV4cG9ydHMuaXNBcnJheUJ1ZmZlclZpZXcgPSBpc0FycmF5QnVmZmVyVmlldztcblxuXG5mdW5jdGlvbiBpc1VpbnQ4QXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdVaW50OEFycmF5Jztcbn1cbmV4cG9ydHMuaXNVaW50OEFycmF5ID0gaXNVaW50OEFycmF5O1xuXG5mdW5jdGlvbiBpc1VpbnQ4Q2xhbXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnVWludDhDbGFtcGVkQXJyYXknO1xufVxuZXhwb3J0cy5pc1VpbnQ4Q2xhbXBlZEFycmF5ID0gaXNVaW50OENsYW1wZWRBcnJheTtcblxuZnVuY3Rpb24gaXNVaW50MTZBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ1VpbnQxNkFycmF5Jztcbn1cbmV4cG9ydHMuaXNVaW50MTZBcnJheSA9IGlzVWludDE2QXJyYXk7XG5cbmZ1bmN0aW9uIGlzVWludDMyQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdVaW50MzJBcnJheSc7XG59XG5leHBvcnRzLmlzVWludDMyQXJyYXkgPSBpc1VpbnQzMkFycmF5O1xuXG5mdW5jdGlvbiBpc0ludDhBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ0ludDhBcnJheSc7XG59XG5leHBvcnRzLmlzSW50OEFycmF5ID0gaXNJbnQ4QXJyYXk7XG5cbmZ1bmN0aW9uIGlzSW50MTZBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ0ludDE2QXJyYXknO1xufVxuZXhwb3J0cy5pc0ludDE2QXJyYXkgPSBpc0ludDE2QXJyYXk7XG5cbmZ1bmN0aW9uIGlzSW50MzJBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ0ludDMyQXJyYXknO1xufVxuZXhwb3J0cy5pc0ludDMyQXJyYXkgPSBpc0ludDMyQXJyYXk7XG5cbmZ1bmN0aW9uIGlzRmxvYXQzMkFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnRmxvYXQzMkFycmF5Jztcbn1cbmV4cG9ydHMuaXNGbG9hdDMyQXJyYXkgPSBpc0Zsb2F0MzJBcnJheTtcblxuZnVuY3Rpb24gaXNGbG9hdDY0QXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdGbG9hdDY0QXJyYXknO1xufVxuZXhwb3J0cy5pc0Zsb2F0NjRBcnJheSA9IGlzRmxvYXQ2NEFycmF5O1xuXG5mdW5jdGlvbiBpc0JpZ0ludDY0QXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdCaWdJbnQ2NEFycmF5Jztcbn1cbmV4cG9ydHMuaXNCaWdJbnQ2NEFycmF5ID0gaXNCaWdJbnQ2NEFycmF5O1xuXG5mdW5jdGlvbiBpc0JpZ1VpbnQ2NEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnQmlnVWludDY0QXJyYXknO1xufVxuZXhwb3J0cy5pc0JpZ1VpbnQ2NEFycmF5ID0gaXNCaWdVaW50NjRBcnJheTtcblxuZnVuY3Rpb24gaXNNYXBUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBNYXBdJztcbn1cbmlzTWFwVG9TdHJpbmcud29ya2luZyA9IChcbiAgdHlwZW9mIE1hcCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgaXNNYXBUb1N0cmluZyhuZXcgTWFwKCkpXG4pO1xuXG5mdW5jdGlvbiBpc01hcCh2YWx1ZSkge1xuICBpZiAodHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNNYXBUb1N0cmluZy53b3JraW5nXG4gICAgPyBpc01hcFRvU3RyaW5nKHZhbHVlKVxuICAgIDogdmFsdWUgaW5zdGFuY2VvZiBNYXA7XG59XG5leHBvcnRzLmlzTWFwID0gaXNNYXA7XG5cbmZ1bmN0aW9uIGlzU2V0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgU2V0XSc7XG59XG5pc1NldFRvU3RyaW5nLndvcmtpbmcgPSAoXG4gIHR5cGVvZiBTZXQgIT09ICd1bmRlZmluZWQnICYmXG4gIGlzU2V0VG9TdHJpbmcobmV3IFNldCgpKVxuKTtcbmZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgU2V0ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBpc1NldFRvU3RyaW5nLndvcmtpbmdcbiAgICA/IGlzU2V0VG9TdHJpbmcodmFsdWUpXG4gICAgOiB2YWx1ZSBpbnN0YW5jZW9mIFNldDtcbn1cbmV4cG9ydHMuaXNTZXQgPSBpc1NldDtcblxuZnVuY3Rpb24gaXNXZWFrTWFwVG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgV2Vha01hcF0nO1xufVxuaXNXZWFrTWFwVG9TdHJpbmcud29ya2luZyA9IChcbiAgdHlwZW9mIFdlYWtNYXAgIT09ICd1bmRlZmluZWQnICYmXG4gIGlzV2Vha01hcFRvU3RyaW5nKG5ldyBXZWFrTWFwKCkpXG4pO1xuZnVuY3Rpb24gaXNXZWFrTWFwKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgV2Vha01hcCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNXZWFrTWFwVG9TdHJpbmcud29ya2luZ1xuICAgID8gaXNXZWFrTWFwVG9TdHJpbmcodmFsdWUpXG4gICAgOiB2YWx1ZSBpbnN0YW5jZW9mIFdlYWtNYXA7XG59XG5leHBvcnRzLmlzV2Vha01hcCA9IGlzV2Vha01hcDtcblxuZnVuY3Rpb24gaXNXZWFrU2V0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgV2Vha1NldF0nO1xufVxuaXNXZWFrU2V0VG9TdHJpbmcud29ya2luZyA9IChcbiAgdHlwZW9mIFdlYWtTZXQgIT09ICd1bmRlZmluZWQnICYmXG4gIGlzV2Vha1NldFRvU3RyaW5nKG5ldyBXZWFrU2V0KCkpXG4pO1xuZnVuY3Rpb24gaXNXZWFrU2V0KHZhbHVlKSB7XG4gIHJldHVybiBpc1dlYWtTZXRUb1N0cmluZyh2YWx1ZSk7XG59XG5leHBvcnRzLmlzV2Vha1NldCA9IGlzV2Vha1NldDtcblxuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5pc0FycmF5QnVmZmVyVG9TdHJpbmcud29ya2luZyA9IChcbiAgdHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICBpc0FycmF5QnVmZmVyVG9TdHJpbmcobmV3IEFycmF5QnVmZmVyKCkpXG4pO1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBpc0FycmF5QnVmZmVyVG9TdHJpbmcud29ya2luZ1xuICAgID8gaXNBcnJheUJ1ZmZlclRvU3RyaW5nKHZhbHVlKVxuICAgIDogdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcjtcbn1cbmV4cG9ydHMuaXNBcnJheUJ1ZmZlciA9IGlzQXJyYXlCdWZmZXI7XG5cbmZ1bmN0aW9uIGlzRGF0YVZpZXdUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBEYXRhVmlld10nO1xufVxuaXNEYXRhVmlld1RvU3RyaW5nLndvcmtpbmcgPSAoXG4gIHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgdHlwZW9mIERhdGFWaWV3ICE9PSAndW5kZWZpbmVkJyAmJlxuICBpc0RhdGFWaWV3VG9TdHJpbmcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSwgMCwgMSkpXG4pO1xuZnVuY3Rpb24gaXNEYXRhVmlldyh2YWx1ZSkge1xuICBpZiAodHlwZW9mIERhdGFWaWV3ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBpc0RhdGFWaWV3VG9TdHJpbmcud29ya2luZ1xuICAgID8gaXNEYXRhVmlld1RvU3RyaW5nKHZhbHVlKVxuICAgIDogdmFsdWUgaW5zdGFuY2VvZiBEYXRhVmlldztcbn1cbmV4cG9ydHMuaXNEYXRhVmlldyA9IGlzRGF0YVZpZXc7XG5cbi8vIFN0b3JlIGEgY29weSBvZiBTaGFyZWRBcnJheUJ1ZmZlciBpbiBjYXNlIGl0J3MgZGVsZXRlZCBlbHNld2hlcmVcbnZhciBTaGFyZWRBcnJheUJ1ZmZlckNvcHkgPSB0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnID8gU2hhcmVkQXJyYXlCdWZmZXIgOiB1bmRlZmluZWQ7XG5mdW5jdGlvbiBpc1NoYXJlZEFycmF5QnVmZmVyVG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgU2hhcmVkQXJyYXlCdWZmZXJdJztcbn1cbmZ1bmN0aW9uIGlzU2hhcmVkQXJyYXlCdWZmZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlckNvcHkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBpc1NoYXJlZEFycmF5QnVmZmVyVG9TdHJpbmcud29ya2luZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpc1NoYXJlZEFycmF5QnVmZmVyVG9TdHJpbmcud29ya2luZyA9IGlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZyhuZXcgU2hhcmVkQXJyYXlCdWZmZXJDb3B5KCkpO1xuICB9XG5cbiAgcmV0dXJuIGlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZy53b3JraW5nXG4gICAgPyBpc1NoYXJlZEFycmF5QnVmZmVyVG9TdHJpbmcodmFsdWUpXG4gICAgOiB2YWx1ZSBpbnN0YW5jZW9mIFNoYXJlZEFycmF5QnVmZmVyQ29weTtcbn1cbmV4cG9ydHMuaXNTaGFyZWRBcnJheUJ1ZmZlciA9IGlzU2hhcmVkQXJyYXlCdWZmZXI7XG5cbmZ1bmN0aW9uIGlzQXN5bmNGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXSc7XG59XG5leHBvcnRzLmlzQXN5bmNGdW5jdGlvbiA9IGlzQXN5bmNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNNYXBJdGVyYXRvcih2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBNYXAgSXRlcmF0b3JdJztcbn1cbmV4cG9ydHMuaXNNYXBJdGVyYXRvciA9IGlzTWFwSXRlcmF0b3I7XG5cbmZ1bmN0aW9uIGlzU2V0SXRlcmF0b3IodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgU2V0IEl0ZXJhdG9yXSc7XG59XG5leHBvcnRzLmlzU2V0SXRlcmF0b3IgPSBpc1NldEl0ZXJhdG9yO1xuXG5mdW5jdGlvbiBpc0dlbmVyYXRvck9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBHZW5lcmF0b3JdJztcbn1cbmV4cG9ydHMuaXNHZW5lcmF0b3JPYmplY3QgPSBpc0dlbmVyYXRvck9iamVjdDtcblxuZnVuY3Rpb24gaXNXZWJBc3NlbWJseUNvbXBpbGVkTW9kdWxlKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IFdlYkFzc2VtYmx5Lk1vZHVsZV0nO1xufVxuZXhwb3J0cy5pc1dlYkFzc2VtYmx5Q29tcGlsZWRNb2R1bGUgPSBpc1dlYkFzc2VtYmx5Q29tcGlsZWRNb2R1bGU7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBudW1iZXJWYWx1ZSk7XG59XG5leHBvcnRzLmlzTnVtYmVyT2JqZWN0ID0gaXNOdW1iZXJPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBzdHJpbmdWYWx1ZSk7XG59XG5leHBvcnRzLmlzU3RyaW5nT2JqZWN0ID0gaXNTdHJpbmdPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbk9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gY2hlY2tCb3hlZFByaW1pdGl2ZSh2YWx1ZSwgYm9vbGVhblZhbHVlKTtcbn1cbmV4cG9ydHMuaXNCb29sZWFuT2JqZWN0ID0gaXNCb29sZWFuT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0JpZ0ludE9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gQmlnSW50U3VwcG9ydGVkICYmIGNoZWNrQm94ZWRQcmltaXRpdmUodmFsdWUsIGJpZ0ludFZhbHVlKTtcbn1cbmV4cG9ydHMuaXNCaWdJbnRPYmplY3QgPSBpc0JpZ0ludE9iamVjdDtcblxuZnVuY3Rpb24gaXNTeW1ib2xPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIFN5bWJvbFN1cHBvcnRlZCAmJiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBzeW1ib2xWYWx1ZSk7XG59XG5leHBvcnRzLmlzU3ltYm9sT2JqZWN0ID0gaXNTeW1ib2xPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzQm94ZWRQcmltaXRpdmUodmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICBpc051bWJlck9iamVjdCh2YWx1ZSkgfHxcbiAgICBpc1N0cmluZ09iamVjdCh2YWx1ZSkgfHxcbiAgICBpc0Jvb2xlYW5PYmplY3QodmFsdWUpIHx8XG4gICAgaXNCaWdJbnRPYmplY3QodmFsdWUpIHx8XG4gICAgaXNTeW1ib2xPYmplY3QodmFsdWUpXG4gICk7XG59XG5leHBvcnRzLmlzQm94ZWRQcmltaXRpdmUgPSBpc0JveGVkUHJpbWl0aXZlO1xuXG5mdW5jdGlvbiBpc0FueUFycmF5QnVmZmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgKFxuICAgIGlzQXJyYXlCdWZmZXIodmFsdWUpIHx8XG4gICAgaXNTaGFyZWRBcnJheUJ1ZmZlcih2YWx1ZSlcbiAgKTtcbn1cbmV4cG9ydHMuaXNBbnlBcnJheUJ1ZmZlciA9IGlzQW55QXJyYXlCdWZmZXI7XG5cblsnaXNQcm94eScsICdpc0V4dGVybmFsJywgJ2lzTW9kdWxlTmFtZXNwYWNlT2JqZWN0J10uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG1ldGhvZCwge1xuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXRob2QgKyAnIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdXNlcmxhbmQnKTtcbiAgICB9XG4gIH0pO1xufSk7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyB8fFxuICBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iaikge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICB2YXIgZGVzY3JpcHRvcnMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlc2NyaXB0b3JzW2tleXNbaV1dID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleXNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gZGVzY3JpcHRvcnM7XG4gIH07XG5cbnZhciBmb3JtYXRSZWdFeHAgPSAvJVtzZGolXS9nO1xuZXhwb3J0cy5mb3JtYXQgPSBmdW5jdGlvbihmKSB7XG4gIGlmICghaXNTdHJpbmcoZikpIHtcbiAgICB2YXIgb2JqZWN0cyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvYmplY3RzLnB1c2goaW5zcGVjdChhcmd1bWVudHNbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdHMuam9pbignICcpO1xuICB9XG5cbiAgdmFyIGkgPSAxO1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgc3RyID0gU3RyaW5nKGYpLnJlcGxhY2UoZm9ybWF0UmVnRXhwLCBmdW5jdGlvbih4KSB7XG4gICAgaWYgKHggPT09ICclJScpIHJldHVybiAnJSc7XG4gICAgaWYgKGkgPj0gbGVuKSByZXR1cm4geDtcbiAgICBzd2l0Y2ggKHgpIHtcbiAgICAgIGNhc2UgJyVzJzogcmV0dXJuIFN0cmluZyhhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWQnOiByZXR1cm4gTnVtYmVyKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclaic6XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3NbaSsrXSk7XG4gICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICAgICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4geDtcbiAgICB9XG4gIH0pO1xuICBmb3IgKHZhciB4ID0gYXJnc1tpXTsgaSA8IGxlbjsgeCA9IGFyZ3NbKytpXSkge1xuICAgIGlmIChpc051bGwoeCkgfHwgIWlzT2JqZWN0KHgpKSB7XG4gICAgICBzdHIgKz0gJyAnICsgeDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyICs9ICcgJyArIGluc3BlY3QoeCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHI7XG59O1xuXG5cbi8vIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4vLyBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuLy8gSWYgLS1uby1kZXByZWNhdGlvbiBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbmV4cG9ydHMuZGVwcmVjYXRlID0gZnVuY3Rpb24oZm4sIG1zZykge1xuICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3Mubm9EZXByZWNhdGlvbiA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIC8vIEFsbG93IGZvciBkZXByZWNhdGluZyB0aGluZ3MgaW4gdGhlIHByb2Nlc3Mgb2Ygc3RhcnRpbmcgdXAuXG4gIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5kZXByZWNhdGUoZm4sIG1zZykuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAocHJvY2Vzcy50aHJvd0RlcHJlY2F0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLnRyYWNlRGVwcmVjYXRpb24pIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn07XG5cblxudmFyIGRlYnVncyA9IHt9O1xudmFyIGRlYnVnRW52UmVnZXggPSAvXiQvO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9ERUJVRykge1xuICB2YXIgZGVidWdFbnYgPSBwcm9jZXNzLmVudi5OT0RFX0RFQlVHO1xuICBkZWJ1Z0VudiA9IGRlYnVnRW52LnJlcGxhY2UoL1t8XFxcXHt9KClbXFxdXiQrPy5dL2csICdcXFxcJCYnKVxuICAgIC5yZXBsYWNlKC9cXCovZywgJy4qJylcbiAgICAucmVwbGFjZSgvLC9nLCAnJHxeJylcbiAgICAudG9VcHBlckNhc2UoKTtcbiAgZGVidWdFbnZSZWdleCA9IG5ldyBSZWdFeHAoJ14nICsgZGVidWdFbnYgKyAnJCcsICdpJyk7XG59XG5leHBvcnRzLmRlYnVnbG9nID0gZnVuY3Rpb24oc2V0KSB7XG4gIHNldCA9IHNldC50b1VwcGVyQ2FzZSgpO1xuICBpZiAoIWRlYnVnc1tzZXRdKSB7XG4gICAgaWYgKGRlYnVnRW52UmVnZXgudGVzdChzZXQpKSB7XG4gICAgICB2YXIgcGlkID0gcHJvY2Vzcy5waWQ7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbXNnID0gZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKTtcbiAgICAgICAgY29uc29sZS5lcnJvcignJXMgJWQ6ICVzJywgc2V0LCBwaWQsIG1zZyk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge307XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWJ1Z3Nbc2V0XTtcbn07XG5cblxuLyoqXG4gKiBFY2hvcyB0aGUgdmFsdWUgb2YgYSB2YWx1ZS4gVHJ5cyB0byBwcmludCB0aGUgdmFsdWUgb3V0XG4gKiBpbiB0aGUgYmVzdCB3YXkgcG9zc2libGUgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gcHJpbnQgb3V0LlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QgdGhhdCBhbHRlcnMgdGhlIG91dHB1dC5cbiAqL1xuLyogbGVnYWN5OiBvYmosIHNob3dIaWRkZW4sIGRlcHRoLCBjb2xvcnMqL1xuZnVuY3Rpb24gaW5zcGVjdChvYmosIG9wdHMpIHtcbiAgLy8gZGVmYXVsdCBvcHRpb25zXG4gIHZhciBjdHggPSB7XG4gICAgc2VlbjogW10sXG4gICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3JcbiAgfTtcbiAgLy8gbGVnYWN5Li4uXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIGN0eC5kZXB0aCA9IGFyZ3VtZW50c1syXTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgY3R4LmNvbG9ycyA9IGFyZ3VtZW50c1szXTtcbiAgaWYgKGlzQm9vbGVhbihvcHRzKSkge1xuICAgIC8vIGxlZ2FjeS4uLlxuICAgIGN0eC5zaG93SGlkZGVuID0gb3B0cztcbiAgfSBlbHNlIGlmIChvcHRzKSB7XG4gICAgLy8gZ290IGFuIFwib3B0aW9uc1wiIG9iamVjdFxuICAgIGV4cG9ydHMuX2V4dGVuZChjdHgsIG9wdHMpO1xuICB9XG4gIC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5zaG93SGlkZGVuKSkgY3R4LnNob3dIaWRkZW4gPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5kZXB0aCkpIGN0eC5kZXB0aCA9IDI7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY29sb3JzKSkgY3R4LmNvbG9ycyA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmN1c3RvbUluc3BlY3QpKSBjdHguY3VzdG9tSW5zcGVjdCA9IHRydWU7XG4gIGlmIChjdHguY29sb3JzKSBjdHguc3R5bGl6ZSA9IHN0eWxpemVXaXRoQ29sb3I7XG4gIHJldHVybiBmb3JtYXRWYWx1ZShjdHgsIG9iaiwgY3R4LmRlcHRoKTtcbn1cbmV4cG9ydHMuaW5zcGVjdCA9IGluc3BlY3Q7XG5cblxuLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BTlNJX2VzY2FwZV9jb2RlI2dyYXBoaWNzXG5pbnNwZWN0LmNvbG9ycyA9IHtcbiAgJ2JvbGQnIDogWzEsIDIyXSxcbiAgJ2l0YWxpYycgOiBbMywgMjNdLFxuICAndW5kZXJsaW5lJyA6IFs0LCAyNF0sXG4gICdpbnZlcnNlJyA6IFs3LCAyN10sXG4gICd3aGl0ZScgOiBbMzcsIDM5XSxcbiAgJ2dyZXknIDogWzkwLCAzOV0sXG4gICdibGFjaycgOiBbMzAsIDM5XSxcbiAgJ2JsdWUnIDogWzM0LCAzOV0sXG4gICdjeWFuJyA6IFszNiwgMzldLFxuICAnZ3JlZW4nIDogWzMyLCAzOV0sXG4gICdtYWdlbnRhJyA6IFszNSwgMzldLFxuICAncmVkJyA6IFszMSwgMzldLFxuICAneWVsbG93JyA6IFszMywgMzldXG59O1xuXG4vLyBEb24ndCB1c2UgJ2JsdWUnIG5vdCB2aXNpYmxlIG9uIGNtZC5leGVcbmluc3BlY3Quc3R5bGVzID0ge1xuICAnc3BlY2lhbCc6ICdjeWFuJyxcbiAgJ251bWJlcic6ICd5ZWxsb3cnLFxuICAnYm9vbGVhbic6ICd5ZWxsb3cnLFxuICAndW5kZWZpbmVkJzogJ2dyZXknLFxuICAnbnVsbCc6ICdib2xkJyxcbiAgJ3N0cmluZyc6ICdncmVlbicsXG4gICdkYXRlJzogJ21hZ2VudGEnLFxuICAvLyBcIm5hbWVcIjogaW50ZW50aW9uYWxseSBub3Qgc3R5bGluZ1xuICAncmVnZXhwJzogJ3JlZCdcbn07XG5cblxuZnVuY3Rpb24gc3R5bGl6ZVdpdGhDb2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICB2YXIgc3R5bGUgPSBpbnNwZWN0LnN0eWxlc1tzdHlsZVR5cGVdO1xuXG4gIGlmIChzdHlsZSkge1xuICAgIHJldHVybiAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzBdICsgJ20nICsgc3RyICtcbiAgICAgICAgICAgJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVsxXSArICdtJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG59XG5cblxuZnVuY3Rpb24gc3R5bGl6ZU5vQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgcmV0dXJuIHN0cjtcbn1cblxuXG5mdW5jdGlvbiBhcnJheVRvSGFzaChhcnJheSkge1xuICB2YXIgaGFzaCA9IHt9O1xuXG4gIGFycmF5LmZvckVhY2goZnVuY3Rpb24odmFsLCBpZHgpIHtcbiAgICBoYXNoW3ZhbF0gPSB0cnVlO1xuICB9KTtcblxuICByZXR1cm4gaGFzaDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRWYWx1ZShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMpIHtcbiAgLy8gUHJvdmlkZSBhIGhvb2sgZm9yIHVzZXItc3BlY2lmaWVkIGluc3BlY3QgZnVuY3Rpb25zLlxuICAvLyBDaGVjayB0aGF0IHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGFuIGluc3BlY3QgZnVuY3Rpb24gb24gaXRcbiAgaWYgKGN0eC5jdXN0b21JbnNwZWN0ICYmXG4gICAgICB2YWx1ZSAmJlxuICAgICAgaXNGdW5jdGlvbih2YWx1ZS5pbnNwZWN0KSAmJlxuICAgICAgLy8gRmlsdGVyIG91dCB0aGUgdXRpbCBtb2R1bGUsIGl0J3MgaW5zcGVjdCBmdW5jdGlvbiBpcyBzcGVjaWFsXG4gICAgICB2YWx1ZS5pbnNwZWN0ICE9PSBleHBvcnRzLmluc3BlY3QgJiZcbiAgICAgIC8vIEFsc28gZmlsdGVyIG91dCBhbnkgcHJvdG90eXBlIG9iamVjdHMgdXNpbmcgdGhlIGNpcmN1bGFyIGNoZWNrLlxuICAgICAgISh2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPT09IHZhbHVlKSkge1xuICAgIHZhciByZXQgPSB2YWx1ZS5pbnNwZWN0KHJlY3Vyc2VUaW1lcywgY3R4KTtcbiAgICBpZiAoIWlzU3RyaW5nKHJldCkpIHtcbiAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLy8gUHJpbWl0aXZlIHR5cGVzIGNhbm5vdCBoYXZlIHByb3BlcnRpZXNcbiAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTtcbiAgaWYgKHByaW1pdGl2ZSkge1xuICAgIHJldHVybiBwcmltaXRpdmU7XG4gIH1cblxuICAvLyBMb29rIHVwIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICB2YXIgdmlzaWJsZUtleXMgPSBhcnJheVRvSGFzaChrZXlzKTtcblxuICBpZiAoY3R4LnNob3dIaWRkZW4pIHtcbiAgICBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpO1xuICB9XG5cbiAgLy8gSUUgZG9lc24ndCBtYWtlIGVycm9yIGZpZWxkcyBub24tZW51bWVyYWJsZVxuICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZHd3NTJzYnQodj12cy45NCkuYXNweFxuICBpZiAoaXNFcnJvcih2YWx1ZSlcbiAgICAgICYmIChrZXlzLmluZGV4T2YoJ21lc3NhZ2UnKSA+PSAwIHx8IGtleXMuaW5kZXhPZignZGVzY3JpcHRpb24nKSA+PSAwKSkge1xuICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICAvLyBTb21lIHR5cGUgb2Ygb2JqZWN0IHdpdGhvdXQgcHJvcGVydGllcyBjYW4gYmUgc2hvcnRjdXR0ZWQuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgdmFyIG5hbWUgPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW0Z1bmN0aW9uJyArIG5hbWUgKyAnXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfVxuICAgIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdkYXRlJyk7XG4gICAgfVxuICAgIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzZSA9ICcnLCBhcnJheSA9IGZhbHNlLCBicmFjZXMgPSBbJ3snLCAnfSddO1xuXG4gIC8vIE1ha2UgQXJyYXkgc2F5IHRoYXQgdGhleSBhcmUgQXJyYXlcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgYXJyYXkgPSB0cnVlO1xuICAgIGJyYWNlcyA9IFsnWycsICddJ107XG4gIH1cblxuICAvLyBNYWtlIGZ1bmN0aW9ucyBzYXkgdGhhdCB0aGV5IGFyZSBmdW5jdGlvbnNcbiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgdmFyIG4gPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICBiYXNlID0gJyBbRnVuY3Rpb24nICsgbiArICddJztcbiAgfVxuXG4gIC8vIE1ha2UgUmVnRXhwcyBzYXkgdGhhdCB0aGV5IGFyZSBSZWdFeHBzXG4gIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZGF0ZXMgd2l0aCBwcm9wZXJ0aWVzIGZpcnN0IHNheSB0aGUgZGF0ZVxuICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZXJyb3Igd2l0aCBtZXNzYWdlIGZpcnN0IHNheSB0aGUgZXJyb3JcbiAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCAmJiAoIWFycmF5IHx8IHZhbHVlLmxlbmd0aCA9PSAwKSkge1xuICAgIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgYnJhY2VzWzFdO1xuICB9XG5cbiAgaWYgKHJlY3Vyc2VUaW1lcyA8IDApIHtcbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tPYmplY3RdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cblxuICBjdHguc2Vlbi5wdXNoKHZhbHVlKTtcblxuICB2YXIgb3V0cHV0O1xuICBpZiAoYXJyYXkpIHtcbiAgICBvdXRwdXQgPSBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKTtcbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQgPSBrZXlzLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KTtcbiAgICB9KTtcbiAgfVxuXG4gIGN0eC5zZWVuLnBvcCgpO1xuXG4gIHJldHVybiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ3VuZGVmaW5lZCcsICd1bmRlZmluZWQnKTtcbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHZhciBzaW1wbGUgPSAnXFwnJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKSArICdcXCcnO1xuICAgIHJldHVybiBjdHguc3R5bGl6ZShzaW1wbGUsICdzdHJpbmcnKTtcbiAgfVxuICBpZiAoaXNOdW1iZXIodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7XG4gIGlmIChpc0Jvb2xlYW4odmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnYm9vbGVhbicpO1xuICAvLyBGb3Igc29tZSByZWFzb24gdHlwZW9mIG51bGwgaXMgXCJvYmplY3RcIiwgc28gc3BlY2lhbCBjYXNlIGhlcmUuXG4gIGlmIChpc051bGwodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnbnVsbCcsICdudWxsJyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0RXJyb3IodmFsdWUpIHtcbiAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJztcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkodmFsdWUsIFN0cmluZyhpKSkpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAgU3RyaW5nKGkpLCB0cnVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKCcnKTtcbiAgICB9XG4gIH1cbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmICgha2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBrZXksIHRydWUpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpIHtcbiAgdmFyIG5hbWUsIHN0ciwgZGVzYztcbiAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIGtleSkgfHwgeyB2YWx1ZTogdmFsdWVba2V5XSB9O1xuICBpZiAoZGVzYy5nZXQpIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmICghaGFzT3duUHJvcGVydHkodmlzaWJsZUtleXMsIGtleSkpIHtcbiAgICBuYW1lID0gJ1snICsga2V5ICsgJ10nO1xuICB9XG4gIGlmICghc3RyKSB7XG4gICAgaWYgKGN0eC5zZWVuLmluZGV4T2YoZGVzYy52YWx1ZSkgPCAwKSB7XG4gICAgICBpZiAoaXNOdWxsKHJlY3Vyc2VUaW1lcykpIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgcmVjdXJzZVRpbWVzIC0gMSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgc3RyID0gc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpLnN1YnN0cigyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHIgPSAnXFxuJyArIHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tDaXJjdWxhcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNVbmRlZmluZWQobmFtZSkpIHtcbiAgICBpZiAoYXJyYXkgJiYga2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgbmFtZSA9IEpTT04uc3RyaW5naWZ5KCcnICsga2V5KTtcbiAgICBpZiAobmFtZS5tYXRjaCgvXlwiKFthLXpBLVpfXVthLXpBLVpfMC05XSopXCIkLykpIHtcbiAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigxLCBuYW1lLmxlbmd0aCAtIDIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICduYW1lJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oXlwifFwiJCkvZywgXCInXCIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICdzdHJpbmcnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmFtZSArICc6ICcgKyBzdHI7XG59XG5cblxuZnVuY3Rpb24gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpIHtcbiAgdmFyIG51bUxpbmVzRXN0ID0gMDtcbiAgdmFyIGxlbmd0aCA9IG91dHB1dC5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3VyKSB7XG4gICAgbnVtTGluZXNFc3QrKztcbiAgICBpZiAoY3VyLmluZGV4T2YoJ1xcbicpID49IDApIG51bUxpbmVzRXN0Kys7XG4gICAgcmV0dXJuIHByZXYgKyBjdXIucmVwbGFjZSgvXFx1MDAxYlxcW1xcZFxcZD9tL2csICcnKS5sZW5ndGggKyAxO1xuICB9LCAwKTtcblxuICBpZiAobGVuZ3RoID4gNjApIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICtcbiAgICAgICAgICAgKGJhc2UgPT09ICcnID8gJycgOiBiYXNlICsgJ1xcbiAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIG91dHB1dC5qb2luKCcsXFxuICAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIGJyYWNlc1sxXTtcbiAgfVxuXG4gIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgJyAnICsgb3V0cHV0LmpvaW4oJywgJykgKyAnICcgKyBicmFjZXNbMV07XG59XG5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cbmV4cG9ydHMudHlwZXMgPSByZXF1aXJlKCcuL3N1cHBvcnQvdHlwZXMnKTtcblxuZnVuY3Rpb24gaXNBcnJheShhcikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShhcik7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBpc09iamVjdChyZSkgJiYgb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcbmV4cG9ydHMudHlwZXMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5leHBvcnRzLnR5cGVzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiBpc09iamVjdChlKSAmJlxuICAgICAgKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuZXhwb3J0cy50eXBlcy5pc05hdGl2ZUVycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IHJlcXVpcmUoJy4vc3VwcG9ydC9pc0J1ZmZlcicpO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG5cblxuZnVuY3Rpb24gcGFkKG4pIHtcbiAgcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4udG9TdHJpbmcoMTApIDogbi50b1N0cmluZygxMCk7XG59XG5cblxudmFyIG1vbnRocyA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLFxuICAgICAgICAgICAgICAnT2N0JywgJ05vdicsICdEZWMnXTtcblxuLy8gMjYgRmViIDE2OjE5OjM0XG5mdW5jdGlvbiB0aW1lc3RhbXAoKSB7XG4gIHZhciBkID0gbmV3IERhdGUoKTtcbiAgdmFyIHRpbWUgPSBbcGFkKGQuZ2V0SG91cnMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldE1pbnV0ZXMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldFNlY29uZHMoKSldLmpvaW4oJzonKTtcbiAgcmV0dXJuIFtkLmdldERhdGUoKSwgbW9udGhzW2QuZ2V0TW9udGgoKV0sIHRpbWVdLmpvaW4oJyAnKTtcbn1cblxuXG4vLyBsb2cgaXMganVzdCBhIHRoaW4gd3JhcHBlciB0byBjb25zb2xlLmxvZyB0aGF0IHByZXBlbmRzIGEgdGltZXN0YW1wXG5leHBvcnRzLmxvZyA9IGZ1bmN0aW9uKCkge1xuICBjb25zb2xlLmxvZygnJXMgLSAlcycsIHRpbWVzdGFtcCgpLCBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpKTtcbn07XG5cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXIuXG4gKlxuICogVGhlIEZ1bmN0aW9uLnByb3RvdHlwZS5pbmhlcml0cyBmcm9tIGxhbmcuanMgcmV3cml0dGVuIGFzIGEgc3RhbmRhbG9uZVxuICogZnVuY3Rpb24gKG5vdCBvbiBGdW5jdGlvbi5wcm90b3R5cGUpLiBOT1RFOiBJZiB0aGlzIGZpbGUgaXMgdG8gYmUgbG9hZGVkXG4gKiBkdXJpbmcgYm9vdHN0cmFwcGluZyB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJld3JpdHRlbiB1c2luZyBzb21lIG5hdGl2ZVxuICogZnVuY3Rpb25zIGFzIHByb3RvdHlwZSBzZXR1cCB1c2luZyBub3JtYWwgSmF2YVNjcmlwdCBkb2VzIG5vdCB3b3JrIGFzXG4gKiBleHBlY3RlZCBkdXJpbmcgYm9vdHN0cmFwcGluZyAoc2VlIG1pcnJvci5qcyBpbiByMTE0OTAzKS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHdoaWNoIG5lZWRzIHRvIGluaGVyaXQgdGhlXG4gKiAgICAgcHJvdG90eXBlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIGluaGVyaXQgcHJvdG90eXBlIGZyb20uXG4gKi9cbmV4cG9ydHMuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5leHBvcnRzLl9leHRlbmQgPSBmdW5jdGlvbihvcmlnaW4sIGFkZCkge1xuICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0XG4gIGlmICghYWRkIHx8ICFpc09iamVjdChhZGQpKSByZXR1cm4gb3JpZ2luO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTtcbiAgfVxuICByZXR1cm4gb3JpZ2luO1xufTtcblxuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxudmFyIGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnID8gU3ltYm9sKCd1dGlsLnByb21pc2lmeS5jdXN0b20nKSA6IHVuZGVmaW5lZDtcblxuZXhwb3J0cy5wcm9taXNpZnkgPSBmdW5jdGlvbiBwcm9taXNpZnkob3JpZ2luYWwpIHtcbiAgaWYgKHR5cGVvZiBvcmlnaW5hbCAhPT0gJ2Z1bmN0aW9uJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJvcmlnaW5hbFwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbicpO1xuXG4gIGlmIChrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wgJiYgb3JpZ2luYWxba0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXSkge1xuICAgIHZhciBmbiA9IG9yaWdpbmFsW2tDdXN0b21Qcm9taXNpZmllZFN5bWJvbF07XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwidXRpbC5wcm9taXNpZnkuY3VzdG9tXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sLCB7XG4gICAgICB2YWx1ZTogZm4sIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZuKCkge1xuICAgIHZhciBwcm9taXNlUmVzb2x2ZSwgcHJvbWlzZVJlamVjdDtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHByb21pc2VSZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgIHByb21pc2VSZWplY3QgPSByZWplY3Q7XG4gICAgfSk7XG5cbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG4gICAgYXJncy5wdXNoKGZ1bmN0aW9uIChlcnIsIHZhbHVlKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHByb21pc2VSZWplY3QoZXJyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb21pc2VSZXNvbHZlKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRyeSB7XG4gICAgICBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHByb21pc2VSZWplY3QoZXJyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihmbiwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9yaWdpbmFsKSk7XG5cbiAgaWYgKGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wsIHtcbiAgICB2YWx1ZTogZm4sIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFxuICAgIGZuLFxuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob3JpZ2luYWwpXG4gICk7XG59XG5cbmV4cG9ydHMucHJvbWlzaWZ5LmN1c3RvbSA9IGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbFxuXG5mdW5jdGlvbiBjYWxsYmFja2lmeU9uUmVqZWN0ZWQocmVhc29uLCBjYikge1xuICAvLyBgIXJlYXNvbmAgZ3VhcmQgaW5zcGlyZWQgYnkgYmx1ZWJpcmQgKFJlZjogaHR0cHM6Ly9nb28uZ2wvdDVJUzZNKS5cbiAgLy8gQmVjYXVzZSBgbnVsbGAgaXMgYSBzcGVjaWFsIGVycm9yIHZhbHVlIGluIGNhbGxiYWNrcyB3aGljaCBtZWFucyBcIm5vIGVycm9yXG4gIC8vIG9jY3VycmVkXCIsIHdlIGVycm9yLXdyYXAgc28gdGhlIGNhbGxiYWNrIGNvbnN1bWVyIGNhbiBkaXN0aW5ndWlzaCBiZXR3ZWVuXG4gIC8vIFwidGhlIHByb21pc2UgcmVqZWN0ZWQgd2l0aCBudWxsXCIgb3IgXCJ0aGUgcHJvbWlzZSBmdWxmaWxsZWQgd2l0aCB1bmRlZmluZWRcIi5cbiAgaWYgKCFyZWFzb24pIHtcbiAgICB2YXIgbmV3UmVhc29uID0gbmV3IEVycm9yKCdQcm9taXNlIHdhcyByZWplY3RlZCB3aXRoIGEgZmFsc3kgdmFsdWUnKTtcbiAgICBuZXdSZWFzb24ucmVhc29uID0gcmVhc29uO1xuICAgIHJlYXNvbiA9IG5ld1JlYXNvbjtcbiAgfVxuICByZXR1cm4gY2IocmVhc29uKTtcbn1cblxuZnVuY3Rpb24gY2FsbGJhY2tpZnkob3JpZ2luYWwpIHtcbiAgaWYgKHR5cGVvZiBvcmlnaW5hbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcIm9yaWdpbmFsXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XG4gIH1cblxuICAvLyBXZSBETyBOT1QgcmV0dXJuIHRoZSBwcm9taXNlIGFzIGl0IGdpdmVzIHRoZSB1c2VyIGEgZmFsc2Ugc2Vuc2UgdGhhdFxuICAvLyB0aGUgcHJvbWlzZSBpcyBhY3R1YWxseSBzb21laG93IHJlbGF0ZWQgdG8gdGhlIGNhbGxiYWNrJ3MgZXhlY3V0aW9uXG4gIC8vIGFuZCB0aGF0IHRoZSBjYWxsYmFjayB0aHJvd2luZyB3aWxsIHJlamVjdCB0aGUgcHJvbWlzZS5cbiAgZnVuY3Rpb24gY2FsbGJhY2tpZmllZCgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG5cbiAgICB2YXIgbWF5YmVDYiA9IGFyZ3MucG9wKCk7XG4gICAgaWYgKHR5cGVvZiBtYXliZUNiICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgbGFzdCBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgICB9XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBjYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG1heWJlQ2IuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgICB9O1xuICAgIC8vIEluIHRydWUgbm9kZSBzdHlsZSB3ZSBwcm9jZXNzIHRoZSBjYWxsYmFjayBvbiBgbmV4dFRpY2tgIHdpdGggYWxsIHRoZVxuICAgIC8vIGltcGxpY2F0aW9ucyAoc3RhY2ssIGB1bmNhdWdodEV4Y2VwdGlvbmAsIGBhc3luY19ob29rc2ApXG4gICAgb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncylcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJldCkgeyBwcm9jZXNzLm5leHRUaWNrKGNiLmJpbmQobnVsbCwgbnVsbCwgcmV0KSkgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKHJlaikgeyBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNraWZ5T25SZWplY3RlZC5iaW5kKG51bGwsIHJlaiwgY2IpKSB9KTtcbiAgfVxuXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihjYWxsYmFja2lmaWVkLCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob3JpZ2luYWwpKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY2FsbGJhY2tpZmllZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvcmlnaW5hbCkpO1xuICByZXR1cm4gY2FsbGJhY2tpZmllZDtcbn1cbmV4cG9ydHMuY2FsbGJhY2tpZnkgPSBjYWxsYmFja2lmeTtcbiIsIi8qXG4gICAgVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxuICAgIHdlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICAgIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gICAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxuICAgIHdlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICAgIGFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG4vKipcbiAqIEBmaWxlIGluZGV4LmpzXG4gKiBAYXV0aG9yIEZhYmlhbiBWb2dlbHN0ZWxsZXIgPGZhYmlhbkBldGhlcmV1bS5vcmc+XG4gKiBAZGF0ZSAyMDE3XG4gKi9cblwidXNlIHN0cmljdFwiO1xudmFyIFN1YnNjcmlwdGlvbiA9IHJlcXVpcmUoJy4vc3Vic2NyaXB0aW9uLmpzJyk7XG52YXIgU3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIFN1YnNjcmlwdGlvbnMob3B0aW9ucykge1xuICAgIHRoaXMubmFtZSA9IG9wdGlvbnMubmFtZTtcbiAgICB0aGlzLnR5cGUgPSBvcHRpb25zLnR5cGU7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zID0gb3B0aW9ucy5zdWJzY3JpcHRpb25zIHx8IHt9O1xuICAgIHRoaXMucmVxdWVzdE1hbmFnZXIgPSBudWxsO1xufTtcblN1YnNjcmlwdGlvbnMucHJvdG90eXBlLnNldFJlcXVlc3RNYW5hZ2VyID0gZnVuY3Rpb24gKHJtKSB7XG4gICAgdGhpcy5yZXF1ZXN0TWFuYWdlciA9IHJtO1xufTtcblN1YnNjcmlwdGlvbnMucHJvdG90eXBlLmF0dGFjaFRvT2JqZWN0ID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBmdW5jID0gdGhpcy5idWlsZENhbGwoKTtcbiAgICB2YXIgbmFtZSA9IHRoaXMubmFtZS5zcGxpdCgnLicpO1xuICAgIGlmIChuYW1lLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgb2JqW25hbWVbMF1dID0gb2JqW25hbWVbMF1dIHx8IHt9O1xuICAgICAgICBvYmpbbmFtZVswXV1bbmFtZVsxXV0gPSBmdW5jO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgb2JqW25hbWVbMF1dID0gZnVuYztcbiAgICB9XG59O1xuU3Vic2NyaXB0aW9ucy5wcm90b3R5cGUuYnVpbGRDYWxsID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5zdWJzY3JpcHRpb25zW2FyZ3VtZW50c1swXV0pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignU3Vic2NyaXB0aW9uICcgKyBKU09OLnN0cmluZ2lmeShhcmd1bWVudHNbMF0pICsgJyBkb2VzblxcJ3QgZXhpc3QuIFN1YnNjcmliaW5nIGFueXdheS4nKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbih7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb246IF90aGlzLnN1YnNjcmlwdGlvbnNbYXJndW1lbnRzWzBdXSB8fCB7fSxcbiAgICAgICAgICAgIHJlcXVlc3RNYW5hZ2VyOiBfdGhpcy5yZXF1ZXN0TWFuYWdlcixcbiAgICAgICAgICAgIHR5cGU6IF90aGlzLnR5cGVcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb24uc3Vic2NyaWJlLmFwcGx5KHN1YnNjcmlwdGlvbiwgYXJndW1lbnRzKTtcbiAgICB9O1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHN1YnNjcmlwdGlvbnM6IFN1YnNjcmlwdGlvbnMsXG4gICAgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb25cbn07XG4iLCIvKlxuICAgIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiAgICB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiAgICB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAgICBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuLyoqXG4gKiBAZmlsZSBzdWJzY3JpcHRpb24uanNcbiAqIEBhdXRob3IgRmFiaWFuIFZvZ2Vsc3RlbGxlciA8ZmFiaWFuQGV0aGVyZXVtLm9yZz5cbiAqIEBkYXRlIDIwMTdcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZXJyb3JzID0gcmVxdWlyZSgnd2ViMy1jb3JlLWhlbHBlcnMnKS5lcnJvcnM7XG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRlbWl0dGVyMycpO1xudmFyIGZvcm1hdHRlcnMgPSByZXF1aXJlKCd3ZWIzLWNvcmUtaGVscGVycycpLmZvcm1hdHRlcnM7XG5mdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIFN1YnNjcmlwdGlvbihvcHRpb25zKSB7XG4gICAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG4gICAgdGhpcy5pZCA9IG51bGw7XG4gICAgdGhpcy5jYWxsYmFjayA9IGlkZW50aXR5O1xuICAgIHRoaXMuYXJndW1lbnRzID0gbnVsbDtcbiAgICB0aGlzLmxhc3RCbG9jayA9IG51bGw7IC8vIFwiZnJvbVwiIGJsb2NrIHRyYWNrZXIgZm9yIGJhY2tmaWxsaW5nIGV2ZW50cyBvbiByZWNvbm5lY3Rpb25cbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgIHN1YnNjcmlwdGlvbjogb3B0aW9ucy5zdWJzY3JpcHRpb24sXG4gICAgICAgIHR5cGU6IG9wdGlvbnMudHlwZSxcbiAgICAgICAgcmVxdWVzdE1hbmFnZXI6IG9wdGlvbnMucmVxdWVzdE1hbmFnZXJcbiAgICB9O1xufVxuLy8gSU5IRVJJVFxuU3Vic2NyaXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXZlbnRFbWl0dGVyLnByb3RvdHlwZSk7XG5TdWJzY3JpcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3Vic2NyaXB0aW9uO1xuLyoqXG4gKiBTaG91bGQgYmUgdXNlZCB0byBleHRyYWN0IGNhbGxiYWNrIGZyb20gYXJyYXkgb2YgYXJndW1lbnRzLiBNb2RpZmllcyBpbnB1dCBwYXJhbVxuICpcbiAqIEBtZXRob2QgZXh0cmFjdENhbGxiYWNrXG4gKiBAcGFyYW0ge0FycmF5fSBhcmd1bWVudHNcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufE51bGx9IGNhbGxiYWNrLCBpZiBleGlzdHNcbiAqL1xuU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5fZXh0cmFjdENhbGxiYWNrID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICBpZiAodHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gYXJncy5wb3AoKTsgLy8gbW9kaWZ5IHRoZSBhcmdzIGFycmF5IVxuICAgIH1cbn07XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gY2hlY2sgaWYgdGhlIG51bWJlciBvZiBhcmd1bWVudHMgaXMgY29ycmVjdFxuICpcbiAqIEBtZXRob2QgdmFsaWRhdGVBcmdzXG4gKiBAcGFyYW0ge0FycmF5fSBhcmd1bWVudHNcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiBpdCBpcyBub3RcbiAqL1xuU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5fdmFsaWRhdGVBcmdzID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5vcHRpb25zLnN1YnNjcmlwdGlvbjtcbiAgICBpZiAoIXN1YnNjcmlwdGlvbilcbiAgICAgICAgc3Vic2NyaXB0aW9uID0ge307XG4gICAgaWYgKCFzdWJzY3JpcHRpb24ucGFyYW1zKVxuICAgICAgICBzdWJzY3JpcHRpb24ucGFyYW1zID0gMDtcbiAgICBpZiAoYXJncy5sZW5ndGggIT09IHN1YnNjcmlwdGlvbi5wYXJhbXMpIHtcbiAgICAgICAgdGhyb3cgZXJyb3JzLkludmFsaWROdW1iZXJPZlBhcmFtcyhhcmdzLmxlbmd0aCwgc3Vic2NyaXB0aW9uLnBhcmFtcywgc3Vic2NyaXB0aW9uLnN1YnNjcmlwdGlvbk5hbWUpO1xuICAgIH1cbn07XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gZm9ybWF0IGlucHV0IGFyZ3Mgb2YgbWV0aG9kXG4gKlxuICogQG1ldGhvZCBmb3JtYXRJbnB1dFxuICogQHBhcmFtIHtBcnJheX1cbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5TdWJzY3JpcHRpb24ucHJvdG90eXBlLl9mb3JtYXRJbnB1dCA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMub3B0aW9ucy5zdWJzY3JpcHRpb247XG4gICAgaWYgKCFzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgfVxuICAgIGlmICghc3Vic2NyaXB0aW9uLmlucHV0Rm9ybWF0dGVyKSB7XG4gICAgICAgIHJldHVybiBhcmdzO1xuICAgIH1cbiAgICB2YXIgZm9ybWF0dGVkQXJncyA9IHN1YnNjcmlwdGlvbi5pbnB1dEZvcm1hdHRlci5tYXAoZnVuY3Rpb24gKGZvcm1hdHRlciwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlciA/IGZvcm1hdHRlcihhcmdzW2luZGV4XSkgOiBhcmdzW2luZGV4XTtcbiAgICB9KTtcbiAgICByZXR1cm4gZm9ybWF0dGVkQXJncztcbn07XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gZm9ybWF0IG91dHB1dChyZXN1bHQpIG9mIG1ldGhvZFxuICpcbiAqIEBtZXRob2QgZm9ybWF0T3V0cHV0XG4gKiBAcGFyYW0gcmVzdWx0IHtPYmplY3R9XG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX2Zvcm1hdE91dHB1dCA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5vcHRpb25zLnN1YnNjcmlwdGlvbjtcbiAgICByZXR1cm4gKHN1YnNjcmlwdGlvbiAmJiBzdWJzY3JpcHRpb24ub3V0cHV0Rm9ybWF0dGVyICYmIHJlc3VsdCkgPyBzdWJzY3JpcHRpb24ub3V0cHV0Rm9ybWF0dGVyKHJlc3VsdCkgOiByZXN1bHQ7XG59O1xuLyoqXG4gKiBTaG91bGQgY3JlYXRlIHBheWxvYWQgZnJvbSBnaXZlbiBpbnB1dCBhcmdzXG4gKlxuICogQG1ldGhvZCB0b1BheWxvYWRcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3NcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5fdG9QYXlsb2FkID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICB2YXIgcGFyYW1zID0gW107XG4gICAgdGhpcy5jYWxsYmFjayA9IHRoaXMuX2V4dHJhY3RDYWxsYmFjayhhcmdzKSB8fCBpZGVudGl0eTtcbiAgICBpZiAoIXRoaXMuc3Vic2NyaXB0aW9uTWV0aG9kKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uTWV0aG9kID0gYXJncy5zaGlmdCgpO1xuICAgICAgICAvLyByZXBsYWNlIHN1YnNjcmlwdGlvbiB3aXRoIGdpdmVuIG5hbWVcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zdWJzY3JpcHRpb24uc3Vic2NyaXB0aW9uTmFtZSkge1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25NZXRob2QgPSB0aGlzLm9wdGlvbnMuc3Vic2NyaXB0aW9uLnN1YnNjcmlwdGlvbk5hbWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCF0aGlzLmFyZ3VtZW50cykge1xuICAgICAgICB0aGlzLmFyZ3VtZW50cyA9IHRoaXMuX2Zvcm1hdElucHV0KGFyZ3MpO1xuICAgICAgICB0aGlzLl92YWxpZGF0ZUFyZ3ModGhpcy5hcmd1bWVudHMpO1xuICAgICAgICBhcmdzID0gW107IC8vIG1ha2UgZW1wdHkgYWZ0ZXIgdmFsaWRhdGlvblxuICAgIH1cbiAgICAvLyByZS1hZGQgc3Vic2NyaXB0aW9uTmFtZVxuICAgIHBhcmFtcy5wdXNoKHRoaXMuc3Vic2NyaXB0aW9uTWV0aG9kKTtcbiAgICBwYXJhbXMgPSBwYXJhbXMuY29uY2F0KHRoaXMuYXJndW1lbnRzKTtcbiAgICBpZiAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPbmx5IGEgY2FsbGJhY2sgaXMgYWxsb3dlZCBhcyBwYXJhbWV0ZXIgb24gYW4gYWxyZWFkeSBpbnN0YW50aWF0ZWQgc3Vic2NyaXB0aW9uLicpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBtZXRob2Q6IHRoaXMub3B0aW9ucy50eXBlICsgJ19zdWJzY3JpYmUnLFxuICAgICAgICBwYXJhbXM6IHBhcmFtc1xuICAgIH07XG59O1xuLyoqXG4gKiBVbnN1YnNjcmliZXMgYW5kIGNsZWFycyBjYWxsYmFja3NcbiAqXG4gKiBAbWV0aG9kIHVuc3Vic2NyaWJlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB0aGlzLm9wdGlvbnMucmVxdWVzdE1hbmFnZXIucmVtb3ZlU3Vic2NyaXB0aW9uKHRoaXMuaWQsIGNhbGxiYWNrKTtcbiAgICB0aGlzLmlkID0gbnVsbDtcbiAgICB0aGlzLmxhc3RCbG9jayA9IG51bGw7XG4gICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbn07XG4vKipcbiAqIFN1YnNjcmliZXMgYW5kIHdhdGNoZXMgZm9yIGNoYW5nZXNcbiAqXG4gKiBAbWV0aG9kIHN1YnNjcmliZVxuICogQHBhcmFtIHtTdHJpbmd9IHN1YnNjcmlwdGlvbiB0aGUgc3Vic2NyaXB0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyB0aGUgb3B0aW9ucyBvYmplY3Qgd2l0aCBhZGRyZXNzIHRvcGljcyBhbmQgZnJvbUJsb2NrXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblN1YnNjcmlwdGlvbi5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgIHZhciBwYXlsb2FkID0gdGhpcy5fdG9QYXlsb2FkKGFyZ3MpO1xuICAgIGlmICghcGF5bG9hZCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLy8gdGhyb3cgZXJyb3IsIGlmIHByb3ZpZGVyIGlzIG5vdCBzZXRcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5yZXF1ZXN0TWFuYWdlci5wcm92aWRlcikge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBlcnIxID0gbmV3IEVycm9yKCdObyBwcm92aWRlciBzZXQuJyk7XG4gICAgICAgICAgICBfdGhpcy5jYWxsYmFjayhlcnIxLCBudWxsLCBfdGhpcyk7XG4gICAgICAgICAgICBfdGhpcy5lbWl0KCdlcnJvcicsIGVycjEpO1xuICAgICAgICB9LCAwKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIHRocm93IGVycm9yLCBpZiBwcm92aWRlciBkb2VzbnQgc3VwcG9ydCBzdWJzY3JpcHRpb25zXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMucmVxdWVzdE1hbmFnZXIucHJvdmlkZXIub24pIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZXJyMiA9IG5ldyBFcnJvcignVGhlIGN1cnJlbnQgcHJvdmlkZXIgZG9lc25cXCd0IHN1cHBvcnQgc3Vic2NyaXB0aW9uczogJyArXG4gICAgICAgICAgICAgICAgX3RoaXMub3B0aW9ucy5yZXF1ZXN0TWFuYWdlci5wcm92aWRlci5jb25zdHJ1Y3Rvci5uYW1lKTtcbiAgICAgICAgICAgIF90aGlzLmNhbGxiYWNrKGVycjIsIG51bGwsIF90aGlzKTtcbiAgICAgICAgICAgIF90aGlzLmVtaXQoJ2Vycm9yJywgZXJyMik7XG4gICAgICAgIH0sIDApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLy8gUmUtc3Vic2NyaXB0aW9uIG9ubHk6IGNvbnRpbnVlIGZldGNoaW5nIGZyb20gdGhlIGxhc3QgYmxvY2sgd2UgcmVjZWl2ZWQuXG4gICAgLy8gYSBkcm9wcGVkIGNvbm5lY3Rpb24gbWF5IGhhdmUgcmVzdWx0ZWQgaW4gZ2FwcyBpbiB0aGUgbG9ncy4uLlxuICAgIGlmICh0aGlzLmxhc3RCbG9jayAmJiAhIXRoaXMub3B0aW9ucy5wYXJhbXMgJiYgdHlwZW9mIHRoaXMub3B0aW9ucy5wYXJhbXMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHBheWxvYWQucGFyYW1zWzFdID0gdGhpcy5vcHRpb25zLnBhcmFtcztcbiAgICAgICAgcGF5bG9hZC5wYXJhbXNbMV0uZnJvbUJsb2NrID0gZm9ybWF0dGVycy5pbnB1dEJsb2NrTnVtYmVyRm9ybWF0dGVyKHRoaXMubGFzdEJsb2NrICsgMSk7XG4gICAgfVxuICAgIC8vIGlmIGlkIGlzIHRoZXJlIHVuc3Vic2NyaWJlIGZpcnN0XG4gICAgaWYgKHRoaXMuaWQpIHtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgICAvLyBzdG9yZSB0aGUgcGFyYW1zIGluIHRoZSBvcHRpb25zIG9iamVjdFxuICAgIHRoaXMub3B0aW9ucy5wYXJhbXMgPSBwYXlsb2FkLnBhcmFtc1sxXTtcbiAgICAvLyBnZXQgcGFzdCBsb2dzLCBpZiBmcm9tQmxvY2sgaXMgYXZhaWxhYmxlXG4gICAgaWYgKHBheWxvYWQucGFyYW1zWzBdID09PSAnbG9ncycgJiYgISFwYXlsb2FkLnBhcmFtc1sxXSAmJiB0eXBlb2YgcGF5bG9hZC5wYXJhbXNbMV0gPT09ICdvYmplY3QnICYmIHBheWxvYWQucGFyYW1zWzFdLmhhc093blByb3BlcnR5KCdmcm9tQmxvY2snKSAmJiBpc0Zpbml0ZShwYXlsb2FkLnBhcmFtc1sxXS5mcm9tQmxvY2spKSB7XG4gICAgICAgIC8vIHNlbmQgdGhlIHN1YnNjcmlwdGlvbiByZXF1ZXN0XG4gICAgICAgIC8vIGNvcHkgdGhlIHBhcmFtcyB0byBhdm9pZCByYWNlLWNvbmRpdGlvbiB3aXRoIGRlbGV0aW9uIGJlbG93IHRoaXMgYmxvY2tcbiAgICAgICAgdmFyIGJsb2NrUGFyYW1zID0gT2JqZWN0LmFzc2lnbih7fSwgcGF5bG9hZC5wYXJhbXNbMV0pO1xuICAgICAgICB0aGlzLm9wdGlvbnMucmVxdWVzdE1hbmFnZXIuc2VuZCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdldGhfZ2V0TG9ncycsXG4gICAgICAgICAgICBwYXJhbXM6IFtibG9ja1BhcmFtc11cbiAgICAgICAgfSwgZnVuY3Rpb24gKGVyciwgbG9ncykge1xuICAgICAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgICAgICBsb2dzLmZvckVhY2goZnVuY3Rpb24gKGxvZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3V0cHV0ID0gX3RoaXMuX2Zvcm1hdE91dHB1dChsb2cpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jYWxsYmFjayhudWxsLCBvdXRwdXQsIF90aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZW1pdCgnZGF0YScsIG91dHB1dCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyBzdWJzY3JpYmUgaGVyZT8gYWZ0ZXIgdGhlIHBhc3QgbG9ncz9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jYWxsYmFjayhlcnIsIG51bGwsIF90aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gY3JlYXRlIHN1YnNjcmlwdGlvblxuICAgIC8vIFRPRE8gbW92ZSB0byBzZXBhcmF0ZSBmdW5jdGlvbj8gc28gdGhhdCBwYXN0IGxvZ3MgY2FuIGdvIGZpcnN0P1xuICAgIGlmICh0eXBlb2YgcGF5bG9hZC5wYXJhbXNbMV0gPT09ICdvYmplY3QnKVxuICAgICAgICBkZWxldGUgcGF5bG9hZC5wYXJhbXNbMV0uZnJvbUJsb2NrO1xuICAgIHRoaXMub3B0aW9ucy5yZXF1ZXN0TWFuYWdlci5zZW5kKHBheWxvYWQsIGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xuICAgICAgICBpZiAoIWVyciAmJiByZXN1bHQpIHtcbiAgICAgICAgICAgIF90aGlzLmlkID0gcmVzdWx0O1xuICAgICAgICAgICAgX3RoaXMubWV0aG9kID0gcGF5bG9hZC5wYXJhbXNbMF07XG4gICAgICAgICAgICAvLyBjYWxsIGNhbGxiYWNrIG9uIG5vdGlmaWNhdGlvbnNcbiAgICAgICAgICAgIF90aGlzLm9wdGlvbnMucmVxdWVzdE1hbmFnZXIuYWRkU3Vic2NyaXB0aW9uKF90aGlzLCBmdW5jdGlvbiAoZXJyb3IsIHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtyZXN1bHRdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uIChyZXN1bHRJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3V0cHV0ID0gX3RoaXMuX2Zvcm1hdE91dHB1dChyZXN1bHRJdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyYWNrIGN1cnJlbnQgYmxvY2sgKGZvciBnYXBzIGludHJvZHVjZWQgYnkgZHJvcHBlZCBjb25uZWN0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxhc3RCbG9jayA9ICEhb3V0cHV0ICYmIHR5cGVvZiBvdXRwdXQgPT09ICdvYmplY3QnID8gb3V0cHV0LmJsb2NrTnVtYmVyIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgX3RoaXMub3B0aW9ucy5zdWJzY3JpcHRpb24uc3Vic2NyaXB0aW9uSGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5vcHRpb25zLnN1YnNjcmlwdGlvbi5zdWJzY3JpcHRpb25IYW5kbGVyLmNhbGwoX3RoaXMsIG91dHB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KCdkYXRhJywgb3V0cHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGwgdGhlIGNhbGxiYWNrLCBsYXN0IHNvIHRoYXQgdW5zdWJzY3JpYmUgdGhlcmUgd29uJ3QgYWZmZWN0IHRoZSBlbWl0IGFib3ZlXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jYWxsYmFjayhudWxsLCBvdXRwdXQsIF90aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jYWxsYmFjayhlcnJvciwgZmFsc2UsIF90aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZW1pdCgnZXJyb3InLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfdGhpcy5lbWl0KCdjb25uZWN0ZWQnLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuY2FsbGJhY2soZXJyLCBmYWxzZSwgX3RoaXMpO1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gcmV0dXJuIGFuIG9iamVjdCB0byBjYW5jZWwgdGhlIHN1YnNjcmlwdGlvblxuICAgIHJldHVybiB0aGlzO1xufTtcbi8qKlxuICogUmVzdWJzY3JpYmVcbiAqXG4gKiBAbWV0aG9kIHJlc3Vic2NyaWJlXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblN1YnNjcmlwdGlvbi5wcm90b3R5cGUucmVzdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5vcHRpb25zLnJlcXVlc3RNYW5hZ2VyLnJlbW92ZVN1YnNjcmlwdGlvbih0aGlzLmlkKTsgLy8gdW5zdWJzY3JpYmVcbiAgICB0aGlzLmlkID0gbnVsbDtcbiAgICB0aGlzLnN1YnNjcmliZSh0aGlzLmNhbGxiYWNrKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IFN1YnNjcmlwdGlvbjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlcbiAgLCBwcmVmaXggPSAnfic7XG5cbi8qKlxuICogQ29uc3RydWN0b3IgdG8gY3JlYXRlIGEgc3RvcmFnZSBmb3Igb3VyIGBFRWAgb2JqZWN0cy5cbiAqIEFuIGBFdmVudHNgIGluc3RhbmNlIGlzIGEgcGxhaW4gb2JqZWN0IHdob3NlIHByb3BlcnRpZXMgYXJlIGV2ZW50IG5hbWVzLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gRXZlbnRzKCkge31cblxuLy9cbi8vIFdlIHRyeSB0byBub3QgaW5oZXJpdCBmcm9tIGBPYmplY3QucHJvdG90eXBlYC4gSW4gc29tZSBlbmdpbmVzIGNyZWF0aW5nIGFuXG4vLyBpbnN0YW5jZSBpbiB0aGlzIHdheSBpcyBmYXN0ZXIgdGhhbiBjYWxsaW5nIGBPYmplY3QuY3JlYXRlKG51bGwpYCBkaXJlY3RseS5cbi8vIElmIGBPYmplY3QuY3JlYXRlKG51bGwpYCBpcyBub3Qgc3VwcG9ydGVkIHdlIHByZWZpeCB0aGUgZXZlbnQgbmFtZXMgd2l0aCBhXG4vLyBjaGFyYWN0ZXIgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGJ1aWx0LWluIG9iamVjdCBwcm9wZXJ0aWVzIGFyZSBub3Rcbi8vIG92ZXJyaWRkZW4gb3IgdXNlZCBhcyBhbiBhdHRhY2sgdmVjdG9yLlxuLy9cbmlmIChPYmplY3QuY3JlYXRlKSB7XG4gIEV2ZW50cy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIC8vXG4gIC8vIFRoaXMgaGFjayBpcyBuZWVkZWQgYmVjYXVzZSB0aGUgYF9fcHJvdG9fX2AgcHJvcGVydHkgaXMgc3RpbGwgaW5oZXJpdGVkIGluXG4gIC8vIHNvbWUgb2xkIGJyb3dzZXJzIGxpa2UgQW5kcm9pZCA0LCBpUGhvbmUgNS4xLCBPcGVyYSAxMSBhbmQgU2FmYXJpIDUuXG4gIC8vXG4gIGlmICghbmV3IEV2ZW50cygpLl9fcHJvdG9fXykgcHJlZml4ID0gZmFsc2U7XG59XG5cbi8qKlxuICogUmVwcmVzZW50YXRpb24gb2YgYSBzaW5nbGUgZXZlbnQgbGlzdGVuZXIuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29uY2U9ZmFsc2VdIFNwZWNpZnkgaWYgdGhlIGxpc3RlbmVyIGlzIGEgb25lLXRpbWUgbGlzdGVuZXIuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIEVFKGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIHRoaXMuZm4gPSBmbjtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5vbmNlID0gb25jZSB8fCBmYWxzZTtcbn1cblxuLyoqXG4gKiBBZGQgYSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50RW1pdHRlcn0gZW1pdHRlciBSZWZlcmVuY2UgdG8gdGhlIGBFdmVudEVtaXR0ZXJgIGluc3RhbmNlLlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBTcGVjaWZ5IGlmIHRoZSBsaXN0ZW5lciBpcyBhIG9uZS10aW1lIGxpc3RlbmVyLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGFkZExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBmbiwgY29udGV4dCwgb25jZSkge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGxpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyID0gbmV3IEVFKGZuLCBjb250ZXh0IHx8IGVtaXR0ZXIsIG9uY2UpXG4gICAgLCBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghZW1pdHRlci5fZXZlbnRzW2V2dF0pIGVtaXR0ZXIuX2V2ZW50c1tldnRdID0gbGlzdGVuZXIsIGVtaXR0ZXIuX2V2ZW50c0NvdW50Kys7XG4gIGVsc2UgaWYgKCFlbWl0dGVyLl9ldmVudHNbZXZ0XS5mbikgZW1pdHRlci5fZXZlbnRzW2V2dF0ucHVzaChsaXN0ZW5lcik7XG4gIGVsc2UgZW1pdHRlci5fZXZlbnRzW2V2dF0gPSBbZW1pdHRlci5fZXZlbnRzW2V2dF0sIGxpc3RlbmVyXTtcblxuICByZXR1cm4gZW1pdHRlcjtcbn1cblxuLyoqXG4gKiBDbGVhciBldmVudCBieSBuYW1lLlxuICpcbiAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBlbWl0dGVyIFJlZmVyZW5jZSB0byB0aGUgYEV2ZW50RW1pdHRlcmAgaW5zdGFuY2UuXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZ0IFRoZSBFdmVudCBuYW1lLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY2xlYXJFdmVudChlbWl0dGVyLCBldnQpIHtcbiAgaWYgKC0tZW1pdHRlci5fZXZlbnRzQ291bnQgPT09IDApIGVtaXR0ZXIuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgZWxzZSBkZWxldGUgZW1pdHRlci5fZXZlbnRzW2V2dF07XG59XG5cbi8qKlxuICogTWluaW1hbCBgRXZlbnRFbWl0dGVyYCBpbnRlcmZhY2UgdGhhdCBpcyBtb2xkZWQgYWdhaW5zdCB0aGUgTm9kZS5qc1xuICogYEV2ZW50RW1pdHRlcmAgaW50ZXJmYWNlLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xufVxuXG4vKipcbiAqIFJldHVybiBhbiBhcnJheSBsaXN0aW5nIHRoZSBldmVudHMgZm9yIHdoaWNoIHRoZSBlbWl0dGVyIGhhcyByZWdpc3RlcmVkXG4gKiBsaXN0ZW5lcnMuXG4gKlxuICogQHJldHVybnMge0FycmF5fVxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICB2YXIgbmFtZXMgPSBbXVxuICAgICwgZXZlbnRzXG4gICAgLCBuYW1lO1xuXG4gIGlmICh0aGlzLl9ldmVudHNDb3VudCA9PT0gMCkgcmV0dXJuIG5hbWVzO1xuXG4gIGZvciAobmFtZSBpbiAoZXZlbnRzID0gdGhpcy5fZXZlbnRzKSkge1xuICAgIGlmIChoYXMuY2FsbChldmVudHMsIG5hbWUpKSBuYW1lcy5wdXNoKHByZWZpeCA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lKTtcbiAgfVxuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgcmV0dXJuIG5hbWVzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGV2ZW50cykpO1xuICB9XG5cbiAgcmV0dXJuIG5hbWVzO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGxpc3RlbmVycyByZWdpc3RlcmVkIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gVGhlIHJlZ2lzdGVyZWQgbGlzdGVuZXJzLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyhldmVudCkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudFxuICAgICwgaGFuZGxlcnMgPSB0aGlzLl9ldmVudHNbZXZ0XTtcblxuICBpZiAoIWhhbmRsZXJzKSByZXR1cm4gW107XG4gIGlmIChoYW5kbGVycy5mbikgcmV0dXJuIFtoYW5kbGVycy5mbl07XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBoYW5kbGVycy5sZW5ndGgsIGVlID0gbmV3IEFycmF5KGwpOyBpIDwgbDsgaSsrKSB7XG4gICAgZWVbaV0gPSBoYW5kbGVyc1tpXS5mbjtcbiAgfVxuXG4gIHJldHVybiBlZTtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBudW1iZXIgb2YgbGlzdGVuZXJzIGxpc3RlbmluZyB0byBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBudW1iZXIgb2YgbGlzdGVuZXJzLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbiBsaXN0ZW5lckNvdW50KGV2ZW50KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50XG4gICAgLCBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XTtcblxuICBpZiAoIWxpc3RlbmVycykgcmV0dXJuIDA7XG4gIGlmIChsaXN0ZW5lcnMuZm4pIHJldHVybiAxO1xuICByZXR1cm4gbGlzdGVuZXJzLmxlbmd0aDtcbn07XG5cbi8qKlxuICogQ2FsbHMgZWFjaCBvZiB0aGUgbGlzdGVuZXJzIHJlZ2lzdGVyZWQgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgZXZlbnQgaGFkIGxpc3RlbmVycywgZWxzZSBgZmFsc2VgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2ZW50LCBhMSwgYTIsIGEzLCBhNCwgYTUpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XVxuICAgICwgbGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgYXJnc1xuICAgICwgaTtcblxuICBpZiAobGlzdGVuZXJzLmZuKSB7XG4gICAgaWYgKGxpc3RlbmVycy5vbmNlKSB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnMuZm4sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICBzd2l0Y2ggKGxlbikge1xuICAgICAgY2FzZSAxOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQpLCB0cnVlO1xuICAgICAgY2FzZSAyOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExKSwgdHJ1ZTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIpLCB0cnVlO1xuICAgICAgY2FzZSA0OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMpLCB0cnVlO1xuICAgICAgY2FzZSA1OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMsIGE0KSwgdHJ1ZTtcbiAgICAgIGNhc2UgNjogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzLCBhNCwgYTUpLCB0cnVlO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDEsIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0xKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm4uYXBwbHkobGlzdGVuZXJzLmNvbnRleHQsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoXG4gICAgICAsIGo7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChsaXN0ZW5lcnNbaV0ub25jZSkgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzW2ldLmZuLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gICAgICBzd2l0Y2ggKGxlbikge1xuICAgICAgICBjYXNlIDE6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0KTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMzogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExLCBhMik7IGJyZWFrO1xuICAgICAgICBjYXNlIDQ6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSwgYTIsIGEzKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWYgKCFhcmdzKSBmb3IgKGogPSAxLCBhcmdzID0gbmV3IEFycmF5KGxlbiAtMSk7IGogPCBsZW47IGorKykge1xuICAgICAgICAgICAgYXJnc1tqIC0gMV0gPSBhcmd1bWVudHNbal07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGlzdGVuZXJzW2ldLmZuLmFwcGx5KGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhcmdzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogQWRkIGEgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBbY29udGV4dD10aGlzXSBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiBvbihldmVudCwgZm4sIGNvbnRleHQpIHtcbiAgcmV0dXJuIGFkZExpc3RlbmVyKHRoaXMsIGV2ZW50LCBmbiwgY29udGV4dCwgZmFsc2UpO1xufTtcblxuLyoqXG4gKiBBZGQgYSBvbmUtdGltZSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IFtjb250ZXh0PXRoaXNdIFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZShldmVudCwgZm4sIGNvbnRleHQpIHtcbiAgcmV0dXJuIGFkZExpc3RlbmVyKHRoaXMsIGV2ZW50LCBmbiwgY29udGV4dCwgdHJ1ZSk7XG59O1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgbGlzdGVuZXJzIG9mIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gT25seSByZW1vdmUgdGhlIGxpc3RlbmVycyB0aGF0IG1hdGNoIHRoaXMgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgT25seSByZW1vdmUgdGhlIGxpc3RlbmVycyB0aGF0IGhhdmUgdGhpcyBjb250ZXh0LlxuICogQHBhcmFtIHtCb29sZWFufSBvbmNlIE9ubHkgcmVtb3ZlIG9uZS10aW1lIGxpc3RlbmVycy5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKGV2ZW50LCBmbiwgY29udGV4dCwgb25jZSkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdKSByZXR1cm4gdGhpcztcbiAgaWYgKCFmbikge1xuICAgIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XTtcblxuICBpZiAobGlzdGVuZXJzLmZuKSB7XG4gICAgaWYgKFxuICAgICAgbGlzdGVuZXJzLmZuID09PSBmbiAmJlxuICAgICAgKCFvbmNlIHx8IGxpc3RlbmVycy5vbmNlKSAmJlxuICAgICAgKCFjb250ZXh0IHx8IGxpc3RlbmVycy5jb250ZXh0ID09PSBjb250ZXh0KVxuICAgICkge1xuICAgICAgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpID0gMCwgZXZlbnRzID0gW10sIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKFxuICAgICAgICBsaXN0ZW5lcnNbaV0uZm4gIT09IGZuIHx8XG4gICAgICAgIChvbmNlICYmICFsaXN0ZW5lcnNbaV0ub25jZSkgfHxcbiAgICAgICAgKGNvbnRleHQgJiYgbGlzdGVuZXJzW2ldLmNvbnRleHQgIT09IGNvbnRleHQpXG4gICAgICApIHtcbiAgICAgICAgZXZlbnRzLnB1c2gobGlzdGVuZXJzW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL1xuICAgIC8vIFJlc2V0IHRoZSBhcnJheSwgb3IgcmVtb3ZlIGl0IGNvbXBsZXRlbHkgaWYgd2UgaGF2ZSBubyBtb3JlIGxpc3RlbmVycy5cbiAgICAvL1xuICAgIGlmIChldmVudHMubGVuZ3RoKSB0aGlzLl9ldmVudHNbZXZ0XSA9IGV2ZW50cy5sZW5ndGggPT09IDEgPyBldmVudHNbMF0gOiBldmVudHM7XG4gICAgZWxzZSBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFsbCBsaXN0ZW5lcnMsIG9yIHRob3NlIG9mIHRoZSBzcGVjaWZpZWQgZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IFtldmVudF0gVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50KSB7XG4gIHZhciBldnQ7XG5cbiAgaWYgKGV2ZW50KSB7XG4gICAgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcbiAgICBpZiAodGhpcy5fZXZlbnRzW2V2dF0pIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vL1xuLy8gQWxpYXMgbWV0aG9kcyBuYW1lcyBiZWNhdXNlIHBlb3BsZSByb2xsIGxpa2UgdGhhdC5cbi8vXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbjtcblxuLy9cbi8vIEV4cG9zZSB0aGUgcHJlZml4LlxuLy9cbkV2ZW50RW1pdHRlci5wcmVmaXhlZCA9IHByZWZpeDtcblxuLy9cbi8vIEFsbG93IGBFdmVudEVtaXR0ZXJgIHRvIGJlIGltcG9ydGVkIGFzIG1vZHVsZSBuYW1lc3BhY2UuXG4vL1xuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuLy9cbi8vIEV4cG9zZSB0aGUgbW9kdWxlLlxuLy9cbmlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIG1vZHVsZSkge1xuICBtb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbn1cbiIsIi8qXG4gVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxuIHdlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxuIHdlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuIGFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuLyoqXG4gKiBAZmlsZSBleHRlbmQuanNcbiAqIEBhdXRob3IgRmFiaWFuIFZvZ2Vsc3RlbGxlciA8ZmFiaWFuQGV0aGVyZXVtLm9yZz5cbiAqIEBkYXRlIDIwMTdcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZm9ybWF0dGVycyA9IHJlcXVpcmUoJ3dlYjMtY29yZS1oZWxwZXJzJykuZm9ybWF0dGVycztcbnZhciBNZXRob2QgPSByZXF1aXJlKCd3ZWIzLWNvcmUtbWV0aG9kJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCd3ZWIzLXV0aWxzJyk7XG52YXIgZXh0ZW5kID0gZnVuY3Rpb24gKHBja2cpIHtcbiAgICAvKiBqc2hpbnQgbWF4Y29tcGxleGl0eTo1ICovXG4gICAgdmFyIGV4ID0gZnVuY3Rpb24gKGV4dGVuc2lvbikge1xuICAgICAgICB2YXIgZXh0ZW5kZWRPYmplY3Q7XG4gICAgICAgIGlmIChleHRlbnNpb24ucHJvcGVydHkpIHtcbiAgICAgICAgICAgIGlmICghcGNrZ1tleHRlbnNpb24ucHJvcGVydHldKSB7XG4gICAgICAgICAgICAgICAgcGNrZ1tleHRlbnNpb24ucHJvcGVydHldID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleHRlbmRlZE9iamVjdCA9IHBja2dbZXh0ZW5zaW9uLnByb3BlcnR5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGV4dGVuZGVkT2JqZWN0ID0gcGNrZztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXh0ZW5zaW9uLm1ldGhvZHMpIHtcbiAgICAgICAgICAgIGV4dGVuc2lvbi5tZXRob2RzLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgICAgICAgICAgICAgIGlmICghKG1ldGhvZCBpbnN0YW5jZW9mIE1ldGhvZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kID0gbmV3IE1ldGhvZChtZXRob2QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtZXRob2QuYXR0YWNoVG9PYmplY3QoZXh0ZW5kZWRPYmplY3QpO1xuICAgICAgICAgICAgICAgIG1ldGhvZC5zZXRSZXF1ZXN0TWFuYWdlcihwY2tnLl9yZXF1ZXN0TWFuYWdlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGNrZztcbiAgICB9O1xuICAgIGV4LmZvcm1hdHRlcnMgPSBmb3JtYXR0ZXJzO1xuICAgIGV4LnV0aWxzID0gdXRpbHM7XG4gICAgZXguTWV0aG9kID0gTWV0aG9kO1xuICAgIHJldHVybiBleDtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGV4dGVuZDtcbiIsIi8qXG4gICAgVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxuICAgIHdlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICAgIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gICAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxuICAgIHdlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICAgIGFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG4vKipcbiAqIEBmaWxlIGluZGV4LmpzXG4gKiBAYXV0aG9yIEZhYmlhbiBWb2dlbHN0ZWxsZXIgPGZhYmlhbkBldGhlcmV1bS5vcmc+XG4gKiBAZGF0ZSAyMDE3XG4gKi9cbmNvbnN0IHJlcXVlc3RNYW5hZ2VyID0gcmVxdWlyZShcIndlYjMtY29yZS1yZXF1ZXN0bWFuYWdlclwiKTtcbmNvbnN0IGV4dGVuZCA9IHJlcXVpcmUoXCIuL2V4dGVuZFwiKTtcbmNvbnN0IHBhY2thZ2VJbml0ID0gKHBrZywgYXJncykgPT4ge1xuICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKTtcbiAgICBpZiAoIXBrZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBuZWVkIHRvIGluc3RhbnRpYXRlIHVzaW5nIHRoZSBcIm5ld1wiIGtleXdvcmQuJyk7XG4gICAgfVxuICAgIC8vIG1ha2UgcHJvcGVydHkgb2YgcGtnLl9wcm92aWRlciwgd2hpY2ggY2FuIHByb3Blcmx5IHNldCBwcm92aWRlcnNcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocGtnLCAnY3VycmVudFByb3ZpZGVyJywge1xuICAgICAgICBnZXQ6ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBwa2cuX3Byb3ZpZGVyO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6ICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHBrZy5zZXRQcm92aWRlcih2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8vIGluaGVyaXQgZnJvbSBwYXJlbnQgcGFja2FnZSBvciBjcmVhdGUgYSBuZXcgUmVxdWVzdE1hbmFnZXJcbiAgICBpZiAoYXJnc1swXSAmJiBhcmdzWzBdLl9yZXF1ZXN0TWFuYWdlcikge1xuICAgICAgICBwa2cuX3JlcXVlc3RNYW5hZ2VyID0gYXJnc1swXS5fcmVxdWVzdE1hbmFnZXI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwa2cuX3JlcXVlc3RNYW5hZ2VyID0gbmV3IHJlcXVlc3RNYW5hZ2VyLk1hbmFnZXIoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgfVxuICAgIC8vIGFkZCBnaXZlblByb3ZpZGVyXG4gICAgcGtnLmdpdmVuUHJvdmlkZXIgPSByZXF1ZXN0TWFuYWdlci5NYW5hZ2VyLmdpdmVuUHJvdmlkZXI7XG4gICAgcGtnLnByb3ZpZGVycyA9IHJlcXVlc3RNYW5hZ2VyLk1hbmFnZXIucHJvdmlkZXJzO1xuICAgIHBrZy5fcHJvdmlkZXIgPSBwa2cuX3JlcXVlc3RNYW5hZ2VyLnByb3ZpZGVyO1xuICAgIC8vIGFkZCBTRVRQUk9WSURFUiBmdW5jdGlvbiAoZG9uJ3Qgb3ZlcndyaXRlIGlmIGFscmVhZHkgZXhpc3RpbmcpXG4gICAgaWYgKCFwa2cuc2V0UHJvdmlkZXIpIHtcbiAgICAgICAgcGtnLnNldFByb3ZpZGVyID0gKHByb3ZpZGVyLCBuZXQpID0+IHtcbiAgICAgICAgICAgIHBrZy5fcmVxdWVzdE1hbmFnZXIuc2V0UHJvdmlkZXIocHJvdmlkZXIsIG5ldCk7XG4gICAgICAgICAgICBwa2cuX3Byb3ZpZGVyID0gcGtnLl9yZXF1ZXN0TWFuYWdlci5wcm92aWRlcjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBwa2cuc2V0UmVxdWVzdE1hbmFnZXIgPSAobWFuYWdlcikgPT4ge1xuICAgICAgICBwa2cuX3JlcXVlc3RNYW5hZ2VyID0gbWFuYWdlcjtcbiAgICAgICAgcGtnLl9wcm92aWRlciA9IG1hbmFnZXIucHJvdmlkZXI7XG4gICAgfTtcbiAgICAvLyBhdHRhY2ggYmF0Y2ggcmVxdWVzdCBjcmVhdGlvblxuICAgIHBrZy5CYXRjaFJlcXVlc3QgPSByZXF1ZXN0TWFuYWdlci5CYXRjaE1hbmFnZXIuYmluZChudWxsLCBwa2cuX3JlcXVlc3RNYW5hZ2VyKTtcbiAgICAvLyBhdHRhY2ggZXh0ZW5kIGZ1bmN0aW9uXG4gICAgcGtnLmV4dGVuZCA9IGV4dGVuZChwa2cpO1xufTtcbmNvbnN0IGFkZFByb3ZpZGVycyA9IChwa2cpID0+IHtcbiAgICBwa2cuZ2l2ZW5Qcm92aWRlciA9IHJlcXVlc3RNYW5hZ2VyLk1hbmFnZXIuZ2l2ZW5Qcm92aWRlcjtcbiAgICBwa2cucHJvdmlkZXJzID0gcmVxdWVzdE1hbmFnZXIuTWFuYWdlci5wcm92aWRlcnM7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgcGFja2FnZUluaXQsXG4gICAgYWRkUHJvdmlkZXJzXG59O1xuIiwiLypcbiBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICovXG4vKipcbiAqIEBmaWxlIGluZGV4LmpzXG4gKiBAYXV0aG9yIE1hcmVrIEtvdGV3aWN6IDxtYXJla0BwYXJpdHkuaW8+XG4gKiBAYXV0aG9yIEZhYmlhbiBWb2dlbHN0ZWxsZXIgPGZhYmlhbkBmcm96ZW1hbi5kZT5cbiAqIEBkYXRlIDIwMThcbiAqL1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbnZhciB1dGlscyA9IHJlcXVpcmUoJ3dlYjMtdXRpbHMnKTtcbnZhciBFdGhlcnNBYmlDb2RlciA9IHJlcXVpcmUoJ0BldGhlcnNwcm9qZWN0L2FiaScpLkFiaUNvZGVyO1xudmFyIFBhcmFtVHlwZSA9IHJlcXVpcmUoJ0BldGhlcnNwcm9qZWN0L2FiaScpLlBhcmFtVHlwZTtcbnZhciBldGhlcnNBYmlDb2RlciA9IG5ldyBFdGhlcnNBYmlDb2RlcihmdW5jdGlvbiAodHlwZSwgdmFsdWUpIHtcbiAgICBpZiAodHlwZS5tYXRjaCgvXnU/aW50LykgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpICYmICghKCEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JykgfHwgdmFsdWUuY29uc3RydWN0b3IubmFtZSAhPT0gJ0JOJykpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn0pO1xuLy8gcmVzdWx0IG1ldGhvZFxuZnVuY3Rpb24gUmVzdWx0KCkge1xufVxuLyoqXG4gKiBBQklDb2RlciBwcm90b3R5cGUgc2hvdWxkIGJlIHVzZWQgdG8gZW5jb2RlL2RlY29kZSBzb2xpZGl0eSBwYXJhbXMgb2YgYW55IHR5cGVcbiAqL1xudmFyIEFCSUNvZGVyID0gZnVuY3Rpb24gKCkge1xufTtcbi8qKlxuICogRW5jb2RlcyB0aGUgZnVuY3Rpb24gbmFtZSB0byBpdHMgQUJJIHJlcHJlc2VudGF0aW9uLCB3aGljaCBhcmUgdGhlIGZpcnN0IDQgYnl0ZXMgb2YgdGhlIHNoYTMgb2YgdGhlIGZ1bmN0aW9uIG5hbWUgaW5jbHVkaW5nICB0eXBlcy5cbiAqXG4gKiBAbWV0aG9kIGVuY29kZUZ1bmN0aW9uU2lnbmF0dXJlXG4gKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGZ1bmN0aW9uTmFtZVxuICogQHJldHVybiB7U3RyaW5nfSBlbmNvZGVkIGZ1bmN0aW9uIG5hbWVcbiAqL1xuQUJJQ29kZXIucHJvdG90eXBlLmVuY29kZUZ1bmN0aW9uU2lnbmF0dXJlID0gZnVuY3Rpb24gKGZ1bmN0aW9uTmFtZSkge1xuICAgIGlmICh0eXBlb2YgZnVuY3Rpb25OYW1lID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBmdW5jdGlvbk5hbWUgPT09ICdvYmplY3QnICYmIGZ1bmN0aW9uTmFtZSkge1xuICAgICAgICBmdW5jdGlvbk5hbWUgPSB1dGlscy5fanNvbkludGVyZmFjZU1ldGhvZFRvU3RyaW5nKGZ1bmN0aW9uTmFtZSk7XG4gICAgfVxuICAgIHJldHVybiB1dGlscy5zaGEzKGZ1bmN0aW9uTmFtZSkuc2xpY2UoMCwgMTApO1xufTtcbi8qKlxuICogRW5jb2RlcyB0aGUgZnVuY3Rpb24gbmFtZSB0byBpdHMgQUJJIHJlcHJlc2VudGF0aW9uLCB3aGljaCBhcmUgdGhlIGZpcnN0IDQgYnl0ZXMgb2YgdGhlIHNoYTMgb2YgdGhlIGZ1bmN0aW9uIG5hbWUgaW5jbHVkaW5nICB0eXBlcy5cbiAqXG4gKiBAbWV0aG9kIGVuY29kZUV2ZW50U2lnbmF0dXJlXG4gKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGZ1bmN0aW9uTmFtZVxuICogQHJldHVybiB7U3RyaW5nfSBlbmNvZGVkIGZ1bmN0aW9uIG5hbWVcbiAqL1xuQUJJQ29kZXIucHJvdG90eXBlLmVuY29kZUV2ZW50U2lnbmF0dXJlID0gZnVuY3Rpb24gKGZ1bmN0aW9uTmFtZSkge1xuICAgIGlmICh0eXBlb2YgZnVuY3Rpb25OYW1lID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBmdW5jdGlvbk5hbWUgPT09ICdvYmplY3QnICYmIGZ1bmN0aW9uTmFtZSkge1xuICAgICAgICBmdW5jdGlvbk5hbWUgPSB1dGlscy5fanNvbkludGVyZmFjZU1ldGhvZFRvU3RyaW5nKGZ1bmN0aW9uTmFtZSk7XG4gICAgfVxuICAgIHJldHVybiB1dGlscy5zaGEzKGZ1bmN0aW9uTmFtZSk7XG59O1xuLyoqXG4gKiBTaG91bGQgYmUgdXNlZCB0byBlbmNvZGUgcGxhaW4gcGFyYW1cbiAqXG4gKiBAbWV0aG9kIGVuY29kZVBhcmFtZXRlclxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gdHlwZVxuICogQHBhcmFtIHthbnl9IHBhcmFtXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSBlbmNvZGVkIHBsYWluIHBhcmFtXG4gKi9cbkFCSUNvZGVyLnByb3RvdHlwZS5lbmNvZGVQYXJhbWV0ZXIgPSBmdW5jdGlvbiAodHlwZSwgcGFyYW0pIHtcbiAgICByZXR1cm4gdGhpcy5lbmNvZGVQYXJhbWV0ZXJzKFt0eXBlXSwgW3BhcmFtXSk7XG59O1xuLyoqXG4gKiBTaG91bGQgYmUgdXNlZCB0byBlbmNvZGUgbGlzdCBvZiBwYXJhbXNcbiAqXG4gKiBAbWV0aG9kIGVuY29kZVBhcmFtZXRlcnNcbiAqXG4gKiBAcGFyYW0ge0FycmF5PFN0cmluZ3xPYmplY3Q+fSB0eXBlc1xuICogQHBhcmFtIHtBcnJheTxhbnk+fSBwYXJhbXNcbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IGVuY29kZWQgbGlzdCBvZiBwYXJhbXNcbiAqL1xuQUJJQ29kZXIucHJvdG90eXBlLmVuY29kZVBhcmFtZXRlcnMgPSBmdW5jdGlvbiAodHlwZXMsIHBhcmFtcykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0eXBlcyA9IHNlbGYubWFwVHlwZXModHlwZXMpO1xuICAgIHBhcmFtcyA9IHBhcmFtcy5tYXAoZnVuY3Rpb24gKHBhcmFtLCBpbmRleCkge1xuICAgICAgICBsZXQgdHlwZSA9IHR5cGVzW2luZGV4XTtcbiAgICAgICAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiB0eXBlLnR5cGUpIHtcbiAgICAgICAgICAgIC8vIFdlIG1heSBnZXQgYSBuYW1lZCB0eXBlIG9mIHNoYXBlIHtuYW1lLCB0eXBlfVxuICAgICAgICAgICAgdHlwZSA9IHR5cGUudHlwZTtcbiAgICAgICAgfVxuICAgICAgICBwYXJhbSA9IHNlbGYuZm9ybWF0UGFyYW0odHlwZSwgcGFyYW0pO1xuICAgICAgICAvLyBGb3JtYXQgcGFyYW1zIGZvciB0dXBsZXNcbiAgICAgICAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyAmJiB0eXBlLmluY2x1ZGVzKCd0dXBsZScpKSB7XG4gICAgICAgICAgICBjb25zdCBjb2RlciA9IGV0aGVyc0FiaUNvZGVyLl9nZXRDb2RlcihQYXJhbVR5cGUuZnJvbSh0eXBlKSk7XG4gICAgICAgICAgICBjb25zdCBtb2RpZnlQYXJhbXMgPSAoY29kZXIsIHBhcmFtKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNvZGVyLm5hbWUgPT09ICdhcnJheScpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcmFtLm1hcChwID0+IG1vZGlmeVBhcmFtcyhldGhlcnNBYmlDb2Rlci5fZ2V0Q29kZXIoUGFyYW1UeXBlLmZyb20oY29kZXIudHlwZS5yZXBsYWNlKCdbXScsICcnKSkpLCBwKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvZGVyLmNvZGVycy5mb3JFYWNoKChjLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjLm5hbWUgPT09ICd0dXBsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmeVBhcmFtcyhjLCBwYXJhbVtpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbVtpXSA9IHNlbGYuZm9ybWF0UGFyYW0oYy5uYW1lLCBwYXJhbVtpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBtb2RpZnlQYXJhbXMoY29kZXIsIHBhcmFtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyYW07XG4gICAgfSk7XG4gICAgcmV0dXJuIGV0aGVyc0FiaUNvZGVyLmVuY29kZSh0eXBlcywgcGFyYW1zKTtcbn07XG4vKipcbiAqIE1hcCB0eXBlcyBpZiBzaW1wbGlmaWVkIGZvcm1hdCBpcyB1c2VkXG4gKlxuICogQG1ldGhvZCBtYXBUeXBlc1xuICogQHBhcmFtIHtBcnJheX0gdHlwZXNcbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5BQklDb2Rlci5wcm90b3R5cGUubWFwVHlwZXMgPSBmdW5jdGlvbiAodHlwZXMpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIG1hcHBlZFR5cGVzID0gW107XG4gICAgdHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAvLyBSZW1hcCBgZnVuY3Rpb25gIHR5cGUgcGFyYW1zIHRvIGJ5dGVzMjQgc2luY2UgRXRoZXJzIGRvZXMgbm90XG4gICAgICAgIC8vIHJlY29nbml6ZSBmb3JtZXIgdHlwZS4gU29saWRpdHkgZG9jcyBzYXkgYEZ1bmN0aW9uYCBpcyBhIGJ5dGVzMjRcbiAgICAgICAgLy8gZW5jb2RpbmcgdGhlIGNvbnRyYWN0IGFkZHJlc3MgZm9sbG93ZWQgYnkgdGhlIGZ1bmN0aW9uIHNlbGVjdG9yIGhhc2guXG4gICAgICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZS50eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0eXBlID0gT2JqZWN0LmFzc2lnbih7fSwgdHlwZSwgeyB0eXBlOiBcImJ5dGVzMjRcIiB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZi5pc1NpbXBsaWZpZWRTdHJ1Y3RGb3JtYXQodHlwZSkpIHtcbiAgICAgICAgICAgIHZhciBzdHJ1Y3ROYW1lID0gT2JqZWN0LmtleXModHlwZSlbMF07XG4gICAgICAgICAgICBtYXBwZWRUeXBlcy5wdXNoKE9iamVjdC5hc3NpZ24oc2VsZi5tYXBTdHJ1Y3ROYW1lQW5kVHlwZShzdHJ1Y3ROYW1lKSwge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudHM6IHNlbGYubWFwU3RydWN0VG9Db2RlckZvcm1hdCh0eXBlW3N0cnVjdE5hbWVdKVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG1hcHBlZFR5cGVzLnB1c2godHlwZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG1hcHBlZFR5cGVzO1xufTtcbi8qKlxuICogQ2hlY2sgaWYgdHlwZSBpcyBzaW1wbGlmaWVkIHN0cnVjdCBmb3JtYXRcbiAqXG4gKiBAbWV0aG9kIGlzU2ltcGxpZmllZFN0cnVjdEZvcm1hdFxuICogQHBhcmFtIHtzdHJpbmcgfCBPYmplY3R9IHR5cGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5BQklDb2Rlci5wcm90b3R5cGUuaXNTaW1wbGlmaWVkU3RydWN0Rm9ybWF0ID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB0eXBlLmNvbXBvbmVudHMgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB0eXBlLm5hbWUgPT09ICd1bmRlZmluZWQnO1xufTtcbi8qKlxuICogTWFwcyB0aGUgY29ycmVjdCB0dXBsZSB0eXBlIGFuZCBuYW1lIHdoZW4gdGhlIHNpbXBsaWZpZWQgZm9ybWF0IGluIGVuY29kZS9kZWNvZGVQYXJhbWV0ZXIgaXMgdXNlZFxuICpcbiAqIEBtZXRob2QgbWFwU3RydWN0TmFtZUFuZFR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJ1Y3ROYW1lXG4gKiBAcmV0dXJuIHt7dHlwZTogc3RyaW5nLCBuYW1lOiAqfX1cbiAqL1xuQUJJQ29kZXIucHJvdG90eXBlLm1hcFN0cnVjdE5hbWVBbmRUeXBlID0gZnVuY3Rpb24gKHN0cnVjdE5hbWUpIHtcbiAgICB2YXIgdHlwZSA9ICd0dXBsZSc7XG4gICAgaWYgKHN0cnVjdE5hbWUuaW5kZXhPZignW10nKSA+IC0xKSB7XG4gICAgICAgIHR5cGUgPSAndHVwbGVbXSc7XG4gICAgICAgIHN0cnVjdE5hbWUgPSBzdHJ1Y3ROYW1lLnNsaWNlKDAsIC0yKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdHlwZTogdHlwZSwgbmFtZTogc3RydWN0TmFtZSB9O1xufTtcbi8qKlxuICogTWFwcyB0aGUgc2ltcGxpZmllZCBmb3JtYXQgaW4gdG8gdGhlIGV4cGVjdGVkIGZvcm1hdCBvZiB0aGUgQUJJQ29kZXJcbiAqXG4gKiBAbWV0aG9kIG1hcFN0cnVjdFRvQ29kZXJGb3JtYXRcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdHJ1Y3RcbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5BQklDb2Rlci5wcm90b3R5cGUubWFwU3RydWN0VG9Db2RlckZvcm1hdCA9IGZ1bmN0aW9uIChzdHJ1Y3QpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGNvbXBvbmVudHMgPSBbXTtcbiAgICBPYmplY3Qua2V5cyhzdHJ1Y3QpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHN0cnVjdFtrZXldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY29tcG9uZW50cy5wdXNoKE9iamVjdC5hc3NpZ24oc2VsZi5tYXBTdHJ1Y3ROYW1lQW5kVHlwZShrZXkpLCB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50czogc2VsZi5tYXBTdHJ1Y3RUb0NvZGVyRm9ybWF0KHN0cnVjdFtrZXldKVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbXBvbmVudHMucHVzaCh7XG4gICAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgICB0eXBlOiBzdHJ1Y3Rba2V5XVxuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gY29tcG9uZW50cztcbn07XG4vKipcbiAqIEhhbmRsZSBzb21lIGZvcm1hdHRpbmcgb2YgcGFyYW1zIGZvciBiYWNrd2FyZHMgY29tcGF0YWJpbGl0eSB3aXRoIEV0aGVycyBWNFxuICpcbiAqIEBtZXRob2QgZm9ybWF0UGFyYW1cbiAqIEBwYXJhbSB7U3RyaW5nfSAtIHR5cGVcbiAqIEBwYXJhbSB7YW55fSAtIHBhcmFtXG4gKiBAcmV0dXJuIHthbnl9IC0gVGhlIGZvcm1hdHRlZCBwYXJhbVxuICovXG5BQklDb2Rlci5wcm90b3R5cGUuZm9ybWF0UGFyYW0gPSBmdW5jdGlvbiAodHlwZSwgcGFyYW0pIHtcbiAgICBjb25zdCBwYXJhbVR5cGVCeXRlcyA9IG5ldyBSZWdFeHAoL15ieXRlcyhbMC05XSopJC8pO1xuICAgIGNvbnN0IHBhcmFtVHlwZUJ5dGVzQXJyYXkgPSBuZXcgUmVnRXhwKC9eYnl0ZXMoWzAtOV0qKVxcW1xcXSQvKTtcbiAgICBjb25zdCBwYXJhbVR5cGVOdW1iZXIgPSBuZXcgUmVnRXhwKC9eKHU/aW50KShbMC05XSopJC8pO1xuICAgIGNvbnN0IHBhcmFtVHlwZU51bWJlckFycmF5ID0gbmV3IFJlZ0V4cCgvXih1P2ludCkoWzAtOV0qKVxcW1xcXSQvKTtcbiAgICAvLyBGb3JtYXQgQk4gdG8gc3RyaW5nXG4gICAgaWYgKHV0aWxzLmlzQk4ocGFyYW0pIHx8IHV0aWxzLmlzQmlnTnVtYmVyKHBhcmFtKSkge1xuICAgICAgICByZXR1cm4gcGFyYW0udG9TdHJpbmcoMTApO1xuICAgIH1cbiAgICBpZiAodHlwZS5tYXRjaChwYXJhbVR5cGVCeXRlc0FycmF5KSB8fCB0eXBlLm1hdGNoKHBhcmFtVHlwZU51bWJlckFycmF5KSkge1xuICAgICAgICByZXR1cm4gcGFyYW0ubWFwKHAgPT4gdGhpcy5mb3JtYXRQYXJhbSh0eXBlLnJlcGxhY2UoJ1tdJywgJycpLCBwKSk7XG4gICAgfVxuICAgIC8vIEZvcm1hdCBjb3JyZWN0IHdpZHRoIGZvciB1P2ludFswLTldKlxuICAgIGxldCBtYXRjaCA9IHR5cGUubWF0Y2gocGFyYW1UeXBlTnVtYmVyKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgbGV0IHNpemUgPSBwYXJzZUludChtYXRjaFsyXSB8fCBcIjI1NlwiKTtcbiAgICAgICAgaWYgKHNpemUgLyA4IDwgcGFyYW0ubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBwYWQgdG8gY29ycmVjdCBiaXQgd2lkdGhcbiAgICAgICAgICAgIHBhcmFtID0gdXRpbHMubGVmdFBhZChwYXJhbSwgc2l6ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gRm9ybWF0IGNvcnJlY3QgbGVuZ3RoIGZvciBieXRlc1swLTldK1xuICAgIG1hdGNoID0gdHlwZS5tYXRjaChwYXJhbVR5cGVCeXRlcyk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIocGFyYW0pKSB7XG4gICAgICAgICAgICBwYXJhbSA9IHV0aWxzLnRvSGV4KHBhcmFtKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBmb3JtYXQgdG8gY29ycmVjdCBsZW5ndGhcbiAgICAgICAgbGV0IHNpemUgPSBwYXJzZUludChtYXRjaFsxXSk7XG4gICAgICAgIGlmIChzaXplKSB7XG4gICAgICAgICAgICBsZXQgbWF4U2l6ZSA9IHNpemUgKiAyO1xuICAgICAgICAgICAgaWYgKHBhcmFtLnN1YnN0cmluZygwLCAyKSA9PT0gJzB4Jykge1xuICAgICAgICAgICAgICAgIG1heFNpemUgKz0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJhbS5sZW5ndGggPCBtYXhTaXplKSB7XG4gICAgICAgICAgICAgICAgLy8gcGFkIHRvIGNvcnJlY3QgbGVuZ3RoXG4gICAgICAgICAgICAgICAgcGFyYW0gPSB1dGlscy5yaWdodFBhZChwYXJhbSwgc2l6ZSAqIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGZvcm1hdCBvZGQtbGVuZ3RoIGJ5dGVzIHRvIGV2ZW4tbGVuZ3RoXG4gICAgICAgIGlmIChwYXJhbS5sZW5ndGggJSAyID09PSAxKSB7XG4gICAgICAgICAgICBwYXJhbSA9ICcweDAnICsgcGFyYW0uc3Vic3RyaW5nKDIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJhbTtcbn07XG4vKipcbiAqIEVuY29kZXMgYSBmdW5jdGlvbiBjYWxsIGZyb20gaXRzIGpzb24gaW50ZXJmYWNlIGFuZCBwYXJhbWV0ZXJzLlxuICpcbiAqIEBtZXRob2QgZW5jb2RlRnVuY3Rpb25DYWxsXG4gKiBAcGFyYW0ge0FycmF5fSBqc29uSW50ZXJmYWNlXG4gKiBAcGFyYW0ge0FycmF5fSBwYXJhbXNcbiAqIEByZXR1cm4ge1N0cmluZ30gVGhlIGVuY29kZWQgQUJJIGZvciB0aGlzIGZ1bmN0aW9uIGNhbGxcbiAqL1xuQUJJQ29kZXIucHJvdG90eXBlLmVuY29kZUZ1bmN0aW9uQ2FsbCA9IGZ1bmN0aW9uIChqc29uSW50ZXJmYWNlLCBwYXJhbXMpIHtcbiAgICByZXR1cm4gdGhpcy5lbmNvZGVGdW5jdGlvblNpZ25hdHVyZShqc29uSW50ZXJmYWNlKSArIHRoaXMuZW5jb2RlUGFyYW1ldGVycyhqc29uSW50ZXJmYWNlLmlucHV0cywgcGFyYW1zKS5yZXBsYWNlKCcweCcsICcnKTtcbn07XG4vKipcbiAqIFNob3VsZCBiZSB1c2VkIHRvIGRlY29kZSBieXRlcyB0byBwbGFpbiBwYXJhbVxuICpcbiAqIEBtZXRob2QgZGVjb2RlUGFyYW1ldGVyXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtTdHJpbmd9IGJ5dGVzXG4gKiBAcmV0dXJuIHtPYmplY3R9IHBsYWluIHBhcmFtXG4gKi9cbkFCSUNvZGVyLnByb3RvdHlwZS5kZWNvZGVQYXJhbWV0ZXIgPSBmdW5jdGlvbiAodHlwZSwgYnl0ZXMpIHtcbiAgICByZXR1cm4gdGhpcy5kZWNvZGVQYXJhbWV0ZXJzKFt0eXBlXSwgYnl0ZXMpWzBdO1xufTtcbi8qKlxuICogU2hvdWxkIGJlIHVzZWQgdG8gZGVjb2RlIGxpc3Qgb2YgcGFyYW1zXG4gKlxuICogQG1ldGhvZCBkZWNvZGVQYXJhbWV0ZXJcbiAqIEBwYXJhbSB7QXJyYXl9IG91dHB1dHNcbiAqIEBwYXJhbSB7U3RyaW5nfSBieXRlc1xuICogQHJldHVybiB7QXJyYXl9IGFycmF5IG9mIHBsYWluIHBhcmFtc1xuICovXG5BQklDb2Rlci5wcm90b3R5cGUuZGVjb2RlUGFyYW1ldGVycyA9IGZ1bmN0aW9uIChvdXRwdXRzLCBieXRlcykge1xuICAgIHJldHVybiB0aGlzLmRlY29kZVBhcmFtZXRlcnNXaXRoKG91dHB1dHMsIGJ5dGVzLCBmYWxzZSk7XG59O1xuLyoqXG4gKiBTaG91bGQgYmUgdXNlZCB0byBkZWNvZGUgbGlzdCBvZiBwYXJhbXNcbiAqXG4gKiBAbWV0aG9kIGRlY29kZVBhcmFtZXRlclxuICogQHBhcmFtIHtBcnJheX0gb3V0cHV0c1xuICogQHBhcmFtIHtTdHJpbmd9IGJ5dGVzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGxvb3NlXG4gKiBAcmV0dXJuIHtBcnJheX0gYXJyYXkgb2YgcGxhaW4gcGFyYW1zXG4gKi9cbkFCSUNvZGVyLnByb3RvdHlwZS5kZWNvZGVQYXJhbWV0ZXJzV2l0aCA9IGZ1bmN0aW9uIChvdXRwdXRzLCBieXRlcywgbG9vc2UpIHtcbiAgICBpZiAob3V0cHV0cy5sZW5ndGggPiAwICYmICghYnl0ZXMgfHwgYnl0ZXMgPT09ICcweCcgfHwgYnl0ZXMgPT09ICcwWCcpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUmV0dXJuZWQgdmFsdWVzIGFyZW5cXCd0IHZhbGlkLCBkaWQgaXQgcnVuIE91dCBvZiBHYXM/ICcgK1xuICAgICAgICAgICAgJ1lvdSBtaWdodCBhbHNvIHNlZSB0aGlzIGVycm9yIGlmIHlvdSBhcmUgbm90IHVzaW5nIHRoZSAnICtcbiAgICAgICAgICAgICdjb3JyZWN0IEFCSSBmb3IgdGhlIGNvbnRyYWN0IHlvdSBhcmUgcmV0cmlldmluZyBkYXRhIGZyb20sICcgK1xuICAgICAgICAgICAgJ3JlcXVlc3RpbmcgZGF0YSBmcm9tIGEgYmxvY2sgbnVtYmVyIHRoYXQgZG9lcyBub3QgZXhpc3QsICcgK1xuICAgICAgICAgICAgJ29yIHF1ZXJ5aW5nIGEgbm9kZSB3aGljaCBpcyBub3QgZnVsbHkgc3luY2VkLicpO1xuICAgIH1cbiAgICB2YXIgcmVzID0gZXRoZXJzQWJpQ29kZXIuZGVjb2RlKHRoaXMubWFwVHlwZXMob3V0cHV0cyksICcweCcgKyBieXRlcy5yZXBsYWNlKC8weC9pLCAnJyksIGxvb3NlKTtcbiAgICB2YXIgcmV0dXJuVmFsdWUgPSBuZXcgUmVzdWx0KCk7XG4gICAgcmV0dXJuVmFsdWUuX19sZW5ndGhfXyA9IDA7XG4gICAgb3V0cHV0cy5mb3JFYWNoKGZ1bmN0aW9uIChvdXRwdXQsIGkpIHtcbiAgICAgICAgdmFyIGRlY29kZWRWYWx1ZSA9IHJlc1tyZXR1cm5WYWx1ZS5fX2xlbmd0aF9fXTtcbiAgICAgICAgZGVjb2RlZFZhbHVlID0gKGRlY29kZWRWYWx1ZSA9PT0gJzB4JykgPyBudWxsIDogZGVjb2RlZFZhbHVlO1xuICAgICAgICByZXR1cm5WYWx1ZVtpXSA9IGRlY29kZWRWYWx1ZTtcbiAgICAgICAgaWYgKCh0eXBlb2Ygb3V0cHV0ID09PSAnZnVuY3Rpb24nIHx8ICEhb3V0cHV0ICYmIHR5cGVvZiBvdXRwdXQgPT09ICdvYmplY3QnKSAmJiBvdXRwdXQubmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuVmFsdWVbb3V0cHV0Lm5hbWVdID0gZGVjb2RlZFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblZhbHVlLl9fbGVuZ3RoX18rKztcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG59O1xuLyoqXG4gKiBEZWNvZGVzIGV2ZW50cyBub24tIGFuZCBpbmRleGVkIHBhcmFtZXRlcnMuXG4gKlxuICogQG1ldGhvZCBkZWNvZGVMb2dcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dHNcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhXG4gKiBAcGFyYW0ge0FycmF5fSB0b3BpY3NcbiAqIEByZXR1cm4ge0FycmF5fSBhcnJheSBvZiBwbGFpbiBwYXJhbXNcbiAqL1xuQUJJQ29kZXIucHJvdG90eXBlLmRlY29kZUxvZyA9IGZ1bmN0aW9uIChpbnB1dHMsIGRhdGEsIHRvcGljcykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdG9waWNzID0gQXJyYXkuaXNBcnJheSh0b3BpY3MpID8gdG9waWNzIDogW3RvcGljc107XG4gICAgZGF0YSA9IGRhdGEgfHwgJyc7XG4gICAgdmFyIG5vdEluZGV4ZWRJbnB1dHMgPSBbXTtcbiAgICB2YXIgaW5kZXhlZFBhcmFtcyA9IFtdO1xuICAgIHZhciB0b3BpY0NvdW50ID0gMDtcbiAgICAvLyBUT0RPIGNoZWNrIGZvciBhbm9ueW1vdXMgbG9ncz9cbiAgICBpbnB1dHMuZm9yRWFjaChmdW5jdGlvbiAoaW5wdXQsIGkpIHtcbiAgICAgICAgaWYgKGlucHV0LmluZGV4ZWQpIHtcbiAgICAgICAgICAgIGluZGV4ZWRQYXJhbXNbaV0gPSAoWydib29sJywgJ2ludCcsICd1aW50JywgJ2FkZHJlc3MnLCAnZml4ZWQnLCAndWZpeGVkJ10uZmluZChmdW5jdGlvbiAoc3RhdGljVHlwZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dC50eXBlLmluZGV4T2Yoc3RhdGljVHlwZSkgIT09IC0xO1xuICAgICAgICAgICAgfSkpID8gX3RoaXMuZGVjb2RlUGFyYW1ldGVyKGlucHV0LnR5cGUsIHRvcGljc1t0b3BpY0NvdW50XSkgOiB0b3BpY3NbdG9waWNDb3VudF07XG4gICAgICAgICAgICB0b3BpY0NvdW50Kys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub3RJbmRleGVkSW5wdXRzW2ldID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICB2YXIgbm9uSW5kZXhlZERhdGEgPSBkYXRhO1xuICAgIHZhciBub3RJbmRleGVkUGFyYW1zID0gKG5vbkluZGV4ZWREYXRhKSA/IHRoaXMuZGVjb2RlUGFyYW1ldGVyc1dpdGgobm90SW5kZXhlZElucHV0cywgbm9uSW5kZXhlZERhdGEsIHRydWUpIDogW107XG4gICAgdmFyIHJldHVyblZhbHVlID0gbmV3IFJlc3VsdCgpO1xuICAgIHJldHVyblZhbHVlLl9fbGVuZ3RoX18gPSAwO1xuICAgIGlucHV0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXMsIGkpIHtcbiAgICAgICAgcmV0dXJuVmFsdWVbaV0gPSAocmVzLnR5cGUgPT09ICdzdHJpbmcnKSA/ICcnIDogbnVsbDtcbiAgICAgICAgaWYgKHR5cGVvZiBub3RJbmRleGVkUGFyYW1zW2ldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuVmFsdWVbaV0gPSBub3RJbmRleGVkUGFyYW1zW2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgaW5kZXhlZFBhcmFtc1tpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVyblZhbHVlW2ldID0gaW5kZXhlZFBhcmFtc1tpXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzLm5hbWUpIHtcbiAgICAgICAgICAgIHJldHVyblZhbHVlW3Jlcy5uYW1lXSA9IHJldHVyblZhbHVlW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblZhbHVlLl9fbGVuZ3RoX18rKztcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG59O1xudmFyIGNvZGVyID0gbmV3IEFCSUNvZGVyKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGNvZGVyO1xuIiwiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcImFiaS81LjAuN1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X3ZlcnNpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyBCaWdOdW1iZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYmlnbnVtYmVyXCI7XG5pbXBvcnQgeyBkZWZpbmVSZWFkT25seSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG47XG5jb25zdCBfY29uc3RydWN0b3JHdWFyZCA9IHt9O1xubGV0IE1vZGlmaWVyc0J5dGVzID0geyBjYWxsZGF0YTogdHJ1ZSwgbWVtb3J5OiB0cnVlLCBzdG9yYWdlOiB0cnVlIH07XG5sZXQgTW9kaWZpZXJzTmVzdCA9IHsgY2FsbGRhdGE6IHRydWUsIG1lbW9yeTogdHJ1ZSB9O1xuZnVuY3Rpb24gY2hlY2tNb2RpZmllcih0eXBlLCBuYW1lKSB7XG4gICAgaWYgKHR5cGUgPT09IFwiYnl0ZXNcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmIChNb2RpZmllcnNCeXRlc1tuYW1lXSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSA9PT0gXCJhZGRyZXNzXCIpIHtcbiAgICAgICAgaWYgKG5hbWUgPT09IFwicGF5YWJsZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlLmluZGV4T2YoXCJbXCIpID49IDAgfHwgdHlwZSA9PT0gXCJ0dXBsZVwiKSB7XG4gICAgICAgIGlmIChNb2RpZmllcnNOZXN0W25hbWVdKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoTW9kaWZpZXJzQnl0ZXNbbmFtZV0gfHwgbmFtZSA9PT0gXCJwYXlhYmxlXCIpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgbW9kaWZpZXJcIiwgXCJuYW1lXCIsIG5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vLyBAVE9ETzogTWFrZSBzdXJlIHRoYXQgY2hpbGRyZW4gb2YgYW4gaW5kZXhlZCB0dXBsZSBhcmUgbWFya2VkIHdpdGggYSBudWxsIGluZGV4ZWRcbmZ1bmN0aW9uIHBhcnNlUGFyYW1UeXBlKHBhcmFtLCBhbGxvd0luZGV4ZWQpIHtcbiAgICBsZXQgb3JpZ2luYWxQYXJhbSA9IHBhcmFtO1xuICAgIGZ1bmN0aW9uIHRocm93RXJyb3IoaSkge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKGB1bmV4cGVjdGVkIGNoYXJhY3RlciBhdCBwb3NpdGlvbiAke2l9YCwgXCJwYXJhbVwiLCBwYXJhbSk7XG4gICAgfVxuICAgIHBhcmFtID0gcGFyYW0ucmVwbGFjZSgvXFxzL2csIFwiIFwiKTtcbiAgICBmdW5jdGlvbiBuZXdOb2RlKHBhcmVudCkge1xuICAgICAgICBsZXQgbm9kZSA9IHsgdHlwZTogXCJcIiwgbmFtZTogXCJcIiwgcGFyZW50OiBwYXJlbnQsIHN0YXRlOiB7IGFsbG93VHlwZTogdHJ1ZSB9IH07XG4gICAgICAgIGlmIChhbGxvd0luZGV4ZWQpIHtcbiAgICAgICAgICAgIG5vZGUuaW5kZXhlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgICBsZXQgcGFyZW50ID0geyB0eXBlOiBcIlwiLCBuYW1lOiBcIlwiLCBzdGF0ZTogeyBhbGxvd1R5cGU6IHRydWUgfSB9O1xuICAgIGxldCBub2RlID0gcGFyZW50O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGMgPSBwYXJhbVtpXTtcbiAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgICAgICBjYXNlIFwiKFwiOlxuICAgICAgICAgICAgICAgIGlmIChub2RlLnN0YXRlLmFsbG93VHlwZSAmJiBub2RlLnR5cGUgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS50eXBlID0gXCJ0dXBsZVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghbm9kZS5zdGF0ZS5hbGxvd1BhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBub2RlLnN0YXRlLmFsbG93VHlwZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIG5vZGUudHlwZSA9IHZlcmlmeVR5cGUobm9kZS50eXBlKTtcbiAgICAgICAgICAgICAgICBub2RlLmNvbXBvbmVudHMgPSBbbmV3Tm9kZShub2RlKV07XG4gICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUuY29tcG9uZW50c1swXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCIpXCI6XG4gICAgICAgICAgICAgICAgZGVsZXRlIG5vZGUuc3RhdGU7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUubmFtZSA9PT0gXCJpbmRleGVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbGxvd0luZGV4ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3IoaSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbm9kZS5pbmRleGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5uYW1lID0gXCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrTW9kaWZpZXIobm9kZS50eXBlLCBub2RlLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUubmFtZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5vZGUudHlwZSA9IHZlcmlmeVR5cGUobm9kZS50eXBlKTtcbiAgICAgICAgICAgICAgICBsZXQgY2hpbGQgPSBub2RlO1xuICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudDtcbiAgICAgICAgICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3dFcnJvcihpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVsZXRlIGNoaWxkLnBhcmVudDtcbiAgICAgICAgICAgICAgICBub2RlLnN0YXRlLmFsbG93UGFyYW1zID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbm9kZS5zdGF0ZS5hbGxvd05hbWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIG5vZGUuc3RhdGUuYWxsb3dBcnJheSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiLFwiOlxuICAgICAgICAgICAgICAgIGRlbGV0ZSBub2RlLnN0YXRlO1xuICAgICAgICAgICAgICAgIGlmIChub2RlLm5hbWUgPT09IFwiaW5kZXhlZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghYWxsb3dJbmRleGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKGkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuaW5kZXhlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUubmFtZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjaGVja01vZGlmaWVyKG5vZGUudHlwZSwgbm9kZS5uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlLm5hbWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBub2RlLnR5cGUgPSB2ZXJpZnlUeXBlKG5vZGUudHlwZSk7XG4gICAgICAgICAgICAgICAgbGV0IHNpYmxpbmcgPSBuZXdOb2RlKG5vZGUucGFyZW50KTtcbiAgICAgICAgICAgICAgICAvL3sgdHlwZTogXCJcIiwgbmFtZTogXCJcIiwgcGFyZW50OiBub2RlLnBhcmVudCwgc3RhdGU6IHsgYWxsb3dUeXBlOiB0cnVlIH0gfTtcbiAgICAgICAgICAgICAgICBub2RlLnBhcmVudC5jb21wb25lbnRzLnB1c2goc2libGluZyk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIG5vZGUucGFyZW50O1xuICAgICAgICAgICAgICAgIG5vZGUgPSBzaWJsaW5nO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgLy8gSGl0IGEgc3BhY2UuLi5cbiAgICAgICAgICAgIGNhc2UgXCIgXCI6XG4gICAgICAgICAgICAgICAgLy8gSWYgcmVhZGluZyB0eXBlLCB0aGUgdHlwZSBpcyBkb25lIGFuZCBtYXkgcmVhZCBhIHBhcmFtIG9yIG5hbWVcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5zdGF0ZS5hbGxvd1R5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUudHlwZSAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS50eXBlID0gdmVyaWZ5VHlwZShub2RlLnR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG5vZGUuc3RhdGUuYWxsb3dUeXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zdGF0ZS5hbGxvd05hbWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zdGF0ZS5hbGxvd1BhcmFtcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSWYgcmVhZGluZyBuYW1lLCB0aGUgbmFtZSBpcyBkb25lXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuc3RhdGUuYWxsb3dOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5hbWUgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5hbWUgPT09IFwiaW5kZXhlZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhbGxvd0luZGV4ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3dFcnJvcihpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuaW5kZXhlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmluZGV4ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUubmFtZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjaGVja01vZGlmaWVyKG5vZGUudHlwZSwgbm9kZS5uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUubmFtZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnN0YXRlLmFsbG93TmFtZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIltcIjpcbiAgICAgICAgICAgICAgICBpZiAoIW5vZGUuc3RhdGUuYWxsb3dBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBub2RlLnR5cGUgKz0gYztcbiAgICAgICAgICAgICAgICBub2RlLnN0YXRlLmFsbG93QXJyYXkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBub2RlLnN0YXRlLmFsbG93TmFtZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIG5vZGUuc3RhdGUucmVhZEFycmF5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJdXCI6XG4gICAgICAgICAgICAgICAgaWYgKCFub2RlLnN0YXRlLnJlYWRBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBub2RlLnR5cGUgKz0gYztcbiAgICAgICAgICAgICAgICBub2RlLnN0YXRlLnJlYWRBcnJheSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIG5vZGUuc3RhdGUuYWxsb3dBcnJheSA9IHRydWU7XG4gICAgICAgICAgICAgICAgbm9kZS5zdGF0ZS5hbGxvd05hbWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5zdGF0ZS5hbGxvd1R5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS50eXBlICs9IGM7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuc3RhdGUuYWxsb3dQYXJhbXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBub2RlLnN0YXRlLmFsbG93QXJyYXkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChub2RlLnN0YXRlLmFsbG93TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlLm5hbWUgKz0gYztcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG5vZGUuc3RhdGUuYWxsb3dBcnJheTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobm9kZS5zdGF0ZS5yZWFkQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS50eXBlICs9IGM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZS5wYXJlbnQpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInVuZXhwZWN0ZWQgZW9mXCIsIFwicGFyYW1cIiwgcGFyYW0pO1xuICAgIH1cbiAgICBkZWxldGUgcGFyZW50LnN0YXRlO1xuICAgIGlmIChub2RlLm5hbWUgPT09IFwiaW5kZXhlZFwiKSB7XG4gICAgICAgIGlmICghYWxsb3dJbmRleGVkKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKG9yaWdpbmFsUGFyYW0ubGVuZ3RoIC0gNyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUuaW5kZXhlZCkge1xuICAgICAgICAgICAgdGhyb3dFcnJvcihvcmlnaW5hbFBhcmFtLmxlbmd0aCAtIDcpO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUuaW5kZXhlZCA9IHRydWU7XG4gICAgICAgIG5vZGUubmFtZSA9IFwiXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNoZWNrTW9kaWZpZXIobm9kZS50eXBlLCBub2RlLm5hbWUpKSB7XG4gICAgICAgIG5vZGUubmFtZSA9IFwiXCI7XG4gICAgfVxuICAgIHBhcmVudC50eXBlID0gdmVyaWZ5VHlwZShwYXJlbnQudHlwZSk7XG4gICAgcmV0dXJuIHBhcmVudDtcbn1cbmZ1bmN0aW9uIHBvcHVsYXRlKG9iamVjdCwgcGFyYW1zKSB7XG4gICAgZm9yIChsZXQga2V5IGluIHBhcmFtcykge1xuICAgICAgICBkZWZpbmVSZWFkT25seShvYmplY3QsIGtleSwgcGFyYW1zW2tleV0pO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBGb3JtYXRUeXBlcyA9IE9iamVjdC5mcmVlemUoe1xuICAgIC8vIEJhcmUgZm9ybWF0dGluZywgYXMgaXMgbmVlZGVkIGZvciBjb21wdXRpbmcgYSBzaWdoYXNoIG9mIGFuIGV2ZW50IG9yIGZ1bmN0aW9uXG4gICAgc2lnaGFzaDogXCJzaWdoYXNoXCIsXG4gICAgLy8gSHVtYW4tUmVhZGFibGUgd2l0aCBNaW5pbWFsIHNwYWNpbmcgYW5kIHdpdGhvdXQgbmFtZXMgKGNvbXBhY3QgaHVtYW4tcmVhZGFibGUpXG4gICAgbWluaW1hbDogXCJtaW5pbWFsXCIsXG4gICAgLy8gSHVtYW4tUmVhZGJsZSB3aXRoIG5pY2Ugc3BhY2luZywgaW5jbHVkaW5nIGFsbCBuYW1lc1xuICAgIGZ1bGw6IFwiZnVsbFwiLFxuICAgIC8vIEpTT04tZm9ybWF0IGEgbGEgU29saWRpdHlcbiAgICBqc29uOiBcImpzb25cIlxufSk7XG5jb25zdCBwYXJhbVR5cGVBcnJheSA9IG5ldyBSZWdFeHAoL14oLiopXFxbKFswLTldKilcXF0kLyk7XG5leHBvcnQgY2xhc3MgUGFyYW1UeXBlIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25zdHJ1Y3Rvckd1YXJkLCBwYXJhbXMpIHtcbiAgICAgICAgaWYgKGNvbnN0cnVjdG9yR3VhcmQgIT09IF9jb25zdHJ1Y3Rvckd1YXJkKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcInVzZSBmcm9tU3RyaW5nXCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcIm5ldyBQYXJhbVR5cGUoKVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBwb3B1bGF0ZSh0aGlzLCBwYXJhbXMpO1xuICAgICAgICBsZXQgbWF0Y2ggPSB0aGlzLnR5cGUubWF0Y2gocGFyYW1UeXBlQXJyYXkpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHBvcHVsYXRlKHRoaXMsIHtcbiAgICAgICAgICAgICAgICBhcnJheUxlbmd0aDogcGFyc2VJbnQobWF0Y2hbMl0gfHwgXCItMVwiKSxcbiAgICAgICAgICAgICAgICBhcnJheUNoaWxkcmVuOiBQYXJhbVR5cGUuZnJvbU9iamVjdCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IG1hdGNoWzFdLFxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRzOiB0aGlzLmNvbXBvbmVudHNcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBiYXNlVHlwZTogXCJhcnJheVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBvcHVsYXRlKHRoaXMsIHtcbiAgICAgICAgICAgICAgICBhcnJheUxlbmd0aDogbnVsbCxcbiAgICAgICAgICAgICAgICBhcnJheUNoaWxkcmVuOiBudWxsLFxuICAgICAgICAgICAgICAgIGJhc2VUeXBlOiAoKHRoaXMuY29tcG9uZW50cyAhPSBudWxsKSA/IFwidHVwbGVcIiA6IHRoaXMudHlwZSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lzUGFyYW1UeXBlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgICB9XG4gICAgLy8gRm9ybWF0IHRoZSBwYXJhbWV0ZXIgZnJhZ21lbnRcbiAgICAvLyAgIC0gc2lnaGFzaDogXCIodWludDI1NixhZGRyZXNzKVwiXG4gICAgLy8gICAtIG1pbmltYWw6IFwidHVwbGUodWludDI1NixhZGRyZXNzKSBpbmRleGVkXCJcbiAgICAvLyAgIC0gZnVsbDogICAgXCJ0dXBsZSh1aW50MjU2IGZvbywgYWRkcmVzIGJhcikgaW5kZXhlZCBiYXpcIlxuICAgIGZvcm1hdChmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFmb3JtYXQpIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IEZvcm1hdFR5cGVzLnNpZ2hhc2g7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFGb3JtYXRUeXBlc1tmb3JtYXRdKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBmb3JtYXQgdHlwZVwiLCBcImZvcm1hdFwiLCBmb3JtYXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IEZvcm1hdFR5cGVzLmpzb24pIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogKCh0aGlzLmJhc2VUeXBlID09PSBcInR1cGxlXCIpID8gXCJ0dXBsZVwiIDogdGhpcy50eXBlKSxcbiAgICAgICAgICAgICAgICBuYW1lOiAodGhpcy5uYW1lIHx8IHVuZGVmaW5lZClcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodHlwZW9mICh0aGlzLmluZGV4ZWQpID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5pbmRleGVkID0gdGhpcy5pbmRleGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50cykge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5jb21wb25lbnRzID0gdGhpcy5jb21wb25lbnRzLm1hcCgoY29tcCkgPT4gSlNPTi5wYXJzZShjb21wLmZvcm1hdChmb3JtYXQpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzdWx0ID0gXCJcIjtcbiAgICAgICAgLy8gQXJyYXlcbiAgICAgICAgaWYgKHRoaXMuYmFzZVR5cGUgPT09IFwiYXJyYXlcIikge1xuICAgICAgICAgICAgcmVzdWx0ICs9IHRoaXMuYXJyYXlDaGlsZHJlbi5mb3JtYXQoZm9ybWF0KTtcbiAgICAgICAgICAgIHJlc3VsdCArPSBcIltcIiArICh0aGlzLmFycmF5TGVuZ3RoIDwgMCA/IFwiXCIgOiBTdHJpbmcodGhpcy5hcnJheUxlbmd0aCkpICsgXCJdXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5iYXNlVHlwZSA9PT0gXCJ0dXBsZVwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZvcm1hdCAhPT0gRm9ybWF0VHlwZXMuc2lnaGFzaCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gdGhpcy50eXBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCIoXCIgKyB0aGlzLmNvbXBvbmVudHMubWFwKChjb21wKSA9PiBjb21wLmZvcm1hdChmb3JtYXQpKS5qb2luKChmb3JtYXQgPT09IEZvcm1hdFR5cGVzLmZ1bGwpID8gXCIsIFwiIDogXCIsXCIpICsgXCIpXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gdGhpcy50eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgIT09IEZvcm1hdFR5cGVzLnNpZ2hhc2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmluZGV4ZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCIgaW5kZXhlZFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gRm9ybWF0VHlwZXMuZnVsbCAmJiB0aGlzLm5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCIgXCIgKyB0aGlzLm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgc3RhdGljIGZyb20odmFsdWUsIGFsbG93SW5kZXhlZCkge1xuICAgICAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVR5cGUuZnJvbVN0cmluZyh2YWx1ZSwgYWxsb3dJbmRleGVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUGFyYW1UeXBlLmZyb21PYmplY3QodmFsdWUpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgICBpZiAoUGFyYW1UeXBlLmlzUGFyYW1UeXBlKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUGFyYW1UeXBlKF9jb25zdHJ1Y3Rvckd1YXJkLCB7XG4gICAgICAgICAgICBuYW1lOiAodmFsdWUubmFtZSB8fCBudWxsKSxcbiAgICAgICAgICAgIHR5cGU6IHZlcmlmeVR5cGUodmFsdWUudHlwZSksXG4gICAgICAgICAgICBpbmRleGVkOiAoKHZhbHVlLmluZGV4ZWQgPT0gbnVsbCkgPyBudWxsIDogISF2YWx1ZS5pbmRleGVkKSxcbiAgICAgICAgICAgIGNvbXBvbmVudHM6ICh2YWx1ZS5jb21wb25lbnRzID8gdmFsdWUuY29tcG9uZW50cy5tYXAoUGFyYW1UeXBlLmZyb21PYmplY3QpIDogbnVsbClcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tU3RyaW5nKHZhbHVlLCBhbGxvd0luZGV4ZWQpIHtcbiAgICAgICAgZnVuY3Rpb24gUGFyYW1UeXBpZnkobm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIFBhcmFtVHlwZS5mcm9tT2JqZWN0KHtcbiAgICAgICAgICAgICAgICBuYW1lOiBub2RlLm5hbWUsXG4gICAgICAgICAgICAgICAgdHlwZTogbm9kZS50eXBlLFxuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IG5vZGUuaW5kZXhlZCxcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzOiBub2RlLmNvbXBvbmVudHNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQYXJhbVR5cGlmeShwYXJzZVBhcmFtVHlwZSh2YWx1ZSwgISFhbGxvd0luZGV4ZWQpKTtcbiAgICB9XG4gICAgc3RhdGljIGlzUGFyYW1UeXBlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAhISh2YWx1ZSAhPSBudWxsICYmIHZhbHVlLl9pc1BhcmFtVHlwZSk7XG4gICAgfVxufVxuO1xuZnVuY3Rpb24gcGFyc2VQYXJhbXModmFsdWUsIGFsbG93SW5kZXgpIHtcbiAgICByZXR1cm4gc3BsaXROZXN0aW5nKHZhbHVlKS5tYXAoKHBhcmFtKSA9PiBQYXJhbVR5cGUuZnJvbVN0cmluZyhwYXJhbSwgYWxsb3dJbmRleCkpO1xufVxuZXhwb3J0IGNsYXNzIEZyYWdtZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihjb25zdHJ1Y3Rvckd1YXJkLCBwYXJhbXMpIHtcbiAgICAgICAgaWYgKGNvbnN0cnVjdG9yR3VhcmQgIT09IF9jb25zdHJ1Y3Rvckd1YXJkKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcInVzZSBhIHN0YXRpYyBmcm9tIG1ldGhvZFwiLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogXCJuZXcgRnJhZ21lbnQoKVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBwb3B1bGF0ZSh0aGlzLCBwYXJhbXMpO1xuICAgICAgICB0aGlzLl9pc0ZyYWdtZW50ID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb20odmFsdWUpIHtcbiAgICAgICAgaWYgKEZyYWdtZW50LmlzRnJhZ21lbnQodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gRnJhZ21lbnQuZnJvbVN0cmluZyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEZyYWdtZW50LmZyb21PYmplY3QodmFsdWUpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgICBpZiAoRnJhZ21lbnQuaXNGcmFnbWVudCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHZhbHVlLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbkZyYWdtZW50LmZyb21PYmplY3QodmFsdWUpO1xuICAgICAgICAgICAgY2FzZSBcImV2ZW50XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIEV2ZW50RnJhZ21lbnQuZnJvbU9iamVjdCh2YWx1ZSk7XG4gICAgICAgICAgICBjYXNlIFwiY29uc3RydWN0b3JcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29uc3RydWN0b3JGcmFnbWVudC5mcm9tT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgXCJmYWxsYmFja1wiOlxuICAgICAgICAgICAgY2FzZSBcInJlY2VpdmVcIjpcbiAgICAgICAgICAgICAgICAvLyBAVE9ETzogU29tZXRoaW5nPyBNYXliZSByZXR1cm4gYSBGdW5jdGlvbkZyYWdtZW50PyBBIGN1c3RvbSBEZWZhdWx0RnVuY3Rpb25GcmFnbWVudD9cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZnJhZ21lbnQgb2JqZWN0XCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVN0cmluZyh2YWx1ZSkge1xuICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIFwicmV0dXJuc1wiIGlzIHN1cnJvdW5kZWQgYnkgYSBzcGFjZSBhbmQgYWxsIHdoaXRlc3BhY2UgaXMgZXhhY3RseSBvbmUgc3BhY2VcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXHMvZywgXCIgXCIpO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcKC9nLCBcIiAoXCIpLnJlcGxhY2UoL1xcKS9nLCBcIikgXCIpLnJlcGxhY2UoL1xccysvZywgXCIgXCIpO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnRyaW0oKTtcbiAgICAgICAgaWYgKHZhbHVlLnNwbGl0KFwiIFwiKVswXSA9PT0gXCJldmVudFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gRXZlbnRGcmFnbWVudC5mcm9tU3RyaW5nKHZhbHVlLnN1YnN0cmluZyg1KS50cmltKCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlLnNwbGl0KFwiIFwiKVswXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gRnVuY3Rpb25GcmFnbWVudC5mcm9tU3RyaW5nKHZhbHVlLnN1YnN0cmluZyg4KS50cmltKCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlLnNwbGl0KFwiKFwiKVswXS50cmltKCkgPT09IFwiY29uc3RydWN0b3JcIikge1xuICAgICAgICAgICAgcmV0dXJuIENvbnN0cnVjdG9yRnJhZ21lbnQuZnJvbVN0cmluZyh2YWx1ZS50cmltKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwidW5zdXBwb3J0ZWQgZnJhZ21lbnRcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgfVxuICAgIHN0YXRpYyBpc0ZyYWdtZW50KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5faXNGcmFnbWVudCk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEV2ZW50RnJhZ21lbnQgZXh0ZW5kcyBGcmFnbWVudCB7XG4gICAgZm9ybWF0KGZvcm1hdCkge1xuICAgICAgICBpZiAoIWZvcm1hdCkge1xuICAgICAgICAgICAgZm9ybWF0ID0gRm9ybWF0VHlwZXMuc2lnaGFzaDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIUZvcm1hdFR5cGVzW2Zvcm1hdF0pIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGZvcm1hdCB0eXBlXCIsIFwiZm9ybWF0XCIsIGZvcm1hdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gRm9ybWF0VHlwZXMuanNvbikge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImV2ZW50XCIsXG4gICAgICAgICAgICAgICAgYW5vbnltb3VzOiB0aGlzLmFub255bW91cyxcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICAgICAgaW5wdXRzOiB0aGlzLmlucHV0cy5tYXAoKGlucHV0KSA9PiBKU09OLnBhcnNlKGlucHV0LmZvcm1hdChmb3JtYXQpKSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXN1bHQgPSBcIlwiO1xuICAgICAgICBpZiAoZm9ybWF0ICE9PSBGb3JtYXRUeXBlcy5zaWdoYXNoKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gXCJldmVudCBcIjtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgKz0gdGhpcy5uYW1lICsgXCIoXCIgKyB0aGlzLmlucHV0cy5tYXAoKGlucHV0KSA9PiBpbnB1dC5mb3JtYXQoZm9ybWF0KSkuam9pbigoZm9ybWF0ID09PSBGb3JtYXRUeXBlcy5mdWxsKSA/IFwiLCBcIiA6IFwiLFwiKSArIFwiKSBcIjtcbiAgICAgICAgaWYgKGZvcm1hdCAhPT0gRm9ybWF0VHlwZXMuc2lnaGFzaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYW5vbnltb3VzKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiYW5vbnltb3VzIFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQudHJpbSgpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbSh2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBFdmVudEZyYWdtZW50LmZyb21TdHJpbmcodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBFdmVudEZyYWdtZW50LmZyb21PYmplY3QodmFsdWUpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgICBpZiAoRXZlbnRGcmFnbWVudC5pc0V2ZW50RnJhZ21lbnQodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlLnR5cGUgIT09IFwiZXZlbnRcIikge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZXZlbnQgb2JqZWN0XCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgIG5hbWU6IHZlcmlmeUlkZW50aWZpZXIodmFsdWUubmFtZSksXG4gICAgICAgICAgICBhbm9ueW1vdXM6IHZhbHVlLmFub255bW91cyxcbiAgICAgICAgICAgIGlucHV0czogKHZhbHVlLmlucHV0cyA/IHZhbHVlLmlucHV0cy5tYXAoUGFyYW1UeXBlLmZyb21PYmplY3QpIDogW10pLFxuICAgICAgICAgICAgdHlwZTogXCJldmVudFwiXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBuZXcgRXZlbnRGcmFnbWVudChfY29uc3RydWN0b3JHdWFyZCwgcGFyYW1zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21TdHJpbmcodmFsdWUpIHtcbiAgICAgICAgbGV0IG1hdGNoID0gdmFsdWUubWF0Y2gocmVnZXhQYXJlbik7XG4gICAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGV2ZW50IHN0cmluZ1wiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYW5vbnltb3VzID0gZmFsc2U7XG4gICAgICAgIG1hdGNoWzNdLnNwbGl0KFwiIFwiKS5mb3JFYWNoKChtb2RpZmllcikgPT4ge1xuICAgICAgICAgICAgc3dpdGNoIChtb2RpZmllci50cmltKCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiYW5vbnltb3VzXCI6XG4gICAgICAgICAgICAgICAgICAgIGFub255bW91cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJcIjpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJ1bmtub3duIG1vZGlmaWVyOiBcIiArIG1vZGlmaWVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBFdmVudEZyYWdtZW50LmZyb21PYmplY3Qoe1xuICAgICAgICAgICAgbmFtZTogbWF0Y2hbMV0udHJpbSgpLFxuICAgICAgICAgICAgYW5vbnltb3VzOiBhbm9ueW1vdXMsXG4gICAgICAgICAgICBpbnB1dHM6IHBhcnNlUGFyYW1zKG1hdGNoWzJdLCB0cnVlKSxcbiAgICAgICAgICAgIHR5cGU6IFwiZXZlbnRcIlxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIGlzRXZlbnRGcmFnbWVudCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKHZhbHVlICYmIHZhbHVlLl9pc0ZyYWdtZW50ICYmIHZhbHVlLnR5cGUgPT09IFwiZXZlbnRcIik7XG4gICAgfVxufVxuZnVuY3Rpb24gcGFyc2VHYXModmFsdWUsIHBhcmFtcykge1xuICAgIHBhcmFtcy5nYXMgPSBudWxsO1xuICAgIGxldCBjb21wcyA9IHZhbHVlLnNwbGl0KFwiQFwiKTtcbiAgICBpZiAoY29tcHMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgIGlmIChjb21wcy5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBodW1hbi1yZWFkYWJsZSBBQkkgc2lnbmF0dXJlXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY29tcHNbMV0ubWF0Y2goL15bMC05XSskLykpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGh1bWFuLXJlYWRhYmxlIEFCSSBzaWduYXR1cmUgZ2FzXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtcy5nYXMgPSBCaWdOdW1iZXIuZnJvbShjb21wc1sxXSk7XG4gICAgICAgIHJldHVybiBjb21wc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gcGFyc2VNb2RpZmllcnModmFsdWUsIHBhcmFtcykge1xuICAgIHBhcmFtcy5jb25zdGFudCA9IGZhbHNlO1xuICAgIHBhcmFtcy5wYXlhYmxlID0gZmFsc2U7XG4gICAgcGFyYW1zLnN0YXRlTXV0YWJpbGl0eSA9IFwibm9ucGF5YWJsZVwiO1xuICAgIHZhbHVlLnNwbGl0KFwiIFwiKS5mb3JFYWNoKChtb2RpZmllcikgPT4ge1xuICAgICAgICBzd2l0Y2ggKG1vZGlmaWVyLnRyaW0oKSkge1xuICAgICAgICAgICAgY2FzZSBcImNvbnN0YW50XCI6XG4gICAgICAgICAgICAgICAgcGFyYW1zLmNvbnN0YW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJwYXlhYmxlXCI6XG4gICAgICAgICAgICAgICAgcGFyYW1zLnBheWFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHBhcmFtcy5zdGF0ZU11dGFiaWxpdHkgPSBcInBheWFibGVcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJub25wYXlhYmxlXCI6XG4gICAgICAgICAgICAgICAgcGFyYW1zLnBheWFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBwYXJhbXMuc3RhdGVNdXRhYmlsaXR5ID0gXCJub25wYXlhYmxlXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicHVyZVwiOlxuICAgICAgICAgICAgICAgIHBhcmFtcy5jb25zdGFudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcGFyYW1zLnN0YXRlTXV0YWJpbGl0eSA9IFwicHVyZVwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInZpZXdcIjpcbiAgICAgICAgICAgICAgICBwYXJhbXMuY29uc3RhbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHBhcmFtcy5zdGF0ZU11dGFiaWxpdHkgPSBcInZpZXdcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJleHRlcm5hbFwiOlxuICAgICAgICAgICAgY2FzZSBcInB1YmxpY1wiOlxuICAgICAgICAgICAgY2FzZSBcIlwiOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInVua25vd24gbW9kaWZpZXI6IFwiICsgbW9kaWZpZXIpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiB2ZXJpZnlTdGF0ZSh2YWx1ZSkge1xuICAgIGxldCByZXN1bHQgPSB7XG4gICAgICAgIGNvbnN0YW50OiBmYWxzZSxcbiAgICAgICAgcGF5YWJsZTogdHJ1ZSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcInBheWFibGVcIlxuICAgIH07XG4gICAgaWYgKHZhbHVlLnN0YXRlTXV0YWJpbGl0eSAhPSBudWxsKSB7XG4gICAgICAgIHJlc3VsdC5zdGF0ZU11dGFiaWxpdHkgPSB2YWx1ZS5zdGF0ZU11dGFiaWxpdHk7XG4gICAgICAgIC8vIFNldCAoYW5kIGNoZWNrIHRoaW5ncyBhcmUgY29uc2lzdGVudCkgdGhlIGNvbnN0YW50IHByb3BlcnR5XG4gICAgICAgIHJlc3VsdC5jb25zdGFudCA9IChyZXN1bHQuc3RhdGVNdXRhYmlsaXR5ID09PSBcInZpZXdcIiB8fCByZXN1bHQuc3RhdGVNdXRhYmlsaXR5ID09PSBcInB1cmVcIik7XG4gICAgICAgIGlmICh2YWx1ZS5jb25zdGFudCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoKCEhdmFsdWUuY29uc3RhbnQpICE9PSByZXN1bHQuY29uc3RhbnQpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiY2Fubm90IGhhdmUgY29uc3RhbnQgZnVuY3Rpb24gd2l0aCBtdXRhYmlsaXR5IFwiICsgcmVzdWx0LnN0YXRlTXV0YWJpbGl0eSwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IChhbmQgY2hlY2sgdGhpbmdzIGFyZSBjb25zaXN0ZW50KSB0aGUgcGF5YWJsZSBwcm9wZXJ0eVxuICAgICAgICByZXN1bHQucGF5YWJsZSA9IChyZXN1bHQuc3RhdGVNdXRhYmlsaXR5ID09PSBcInBheWFibGVcIik7XG4gICAgICAgIGlmICh2YWx1ZS5wYXlhYmxlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICgoISF2YWx1ZS5wYXlhYmxlKSAhPT0gcmVzdWx0LnBheWFibGUpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiY2Fubm90IGhhdmUgcGF5YWJsZSBmdW5jdGlvbiB3aXRoIG11dGFiaWxpdHkgXCIgKyByZXN1bHQuc3RhdGVNdXRhYmlsaXR5LCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh2YWx1ZS5wYXlhYmxlICE9IG51bGwpIHtcbiAgICAgICAgcmVzdWx0LnBheWFibGUgPSAhIXZhbHVlLnBheWFibGU7XG4gICAgICAgIC8vIElmIHBheWFibGUgd2UgY2FuIGFzc3VtZSBub24tY29uc3RhbnQ7IG90aGVyd2lzZSB3ZSBjYW4ndCBhc3N1bWVcbiAgICAgICAgaWYgKHZhbHVlLmNvbnN0YW50ID09IG51bGwgJiYgIXJlc3VsdC5wYXlhYmxlICYmIHZhbHVlLnR5cGUgIT09IFwiY29uc3RydWN0b3JcIikge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInVuYWJsZSB0byBkZXRlcm1pbmUgc3RhdGVNdXRhYmlsaXR5XCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5jb25zdGFudCA9ICEhdmFsdWUuY29uc3RhbnQ7XG4gICAgICAgIGlmIChyZXN1bHQuY29uc3RhbnQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5zdGF0ZU11dGFiaWxpdHkgPSBcInZpZXdcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC5zdGF0ZU11dGFiaWxpdHkgPSAocmVzdWx0LnBheWFibGUgPyBcInBheWFibGVcIiA6IFwibm9ucGF5YWJsZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0LnBheWFibGUgJiYgcmVzdWx0LmNvbnN0YW50KSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiY2Fubm90IGhhdmUgY29uc3RhbnQgcGF5YWJsZSBmdW5jdGlvblwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh2YWx1ZS5jb25zdGFudCAhPSBudWxsKSB7XG4gICAgICAgIHJlc3VsdC5jb25zdGFudCA9ICEhdmFsdWUuY29uc3RhbnQ7XG4gICAgICAgIHJlc3VsdC5wYXlhYmxlID0gIXJlc3VsdC5jb25zdGFudDtcbiAgICAgICAgcmVzdWx0LnN0YXRlTXV0YWJpbGl0eSA9IChyZXN1bHQuY29uc3RhbnQgPyBcInZpZXdcIiA6IFwicGF5YWJsZVwiKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodmFsdWUudHlwZSAhPT0gXCJjb25zdHJ1Y3RvclwiKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bmFibGUgdG8gZGV0ZXJtaW5lIHN0YXRlTXV0YWJpbGl0eVwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBjbGFzcyBDb25zdHJ1Y3RvckZyYWdtZW50IGV4dGVuZHMgRnJhZ21lbnQge1xuICAgIGZvcm1hdChmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFmb3JtYXQpIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IEZvcm1hdFR5cGVzLnNpZ2hhc2g7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFGb3JtYXRUeXBlc1tmb3JtYXRdKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBmb3JtYXQgdHlwZVwiLCBcImZvcm1hdFwiLCBmb3JtYXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IEZvcm1hdFR5cGVzLmpzb24pIHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJjb25zdHJ1Y3RvclwiLFxuICAgICAgICAgICAgICAgIHN0YXRlTXV0YWJpbGl0eTogKCh0aGlzLnN0YXRlTXV0YWJpbGl0eSAhPT0gXCJub25wYXlhYmxlXCIpID8gdGhpcy5zdGF0ZU11dGFiaWxpdHkgOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgIHBheWJsZTogdGhpcy5wYXlhYmxlLFxuICAgICAgICAgICAgICAgIGdhczogKHRoaXMuZ2FzID8gdGhpcy5nYXMudG9OdW1iZXIoKSA6IHVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgaW5wdXRzOiB0aGlzLmlucHV0cy5tYXAoKGlucHV0KSA9PiBKU09OLnBhcnNlKGlucHV0LmZvcm1hdChmb3JtYXQpKSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IEZvcm1hdFR5cGVzLnNpZ2hhc2gpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiY2Fubm90IGZvcm1hdCBhIGNvbnN0cnVjdG9yIGZvciBzaWdoYXNoXCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcImZvcm1hdChzaWdoYXNoKVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzdWx0ID0gXCJjb25zdHJ1Y3RvcihcIiArIHRoaXMuaW5wdXRzLm1hcCgoaW5wdXQpID0+IGlucHV0LmZvcm1hdChmb3JtYXQpKS5qb2luKChmb3JtYXQgPT09IEZvcm1hdFR5cGVzLmZ1bGwpID8gXCIsIFwiIDogXCIsXCIpICsgXCIpIFwiO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZU11dGFiaWxpdHkgJiYgdGhpcy5zdGF0ZU11dGFiaWxpdHkgIT09IFwibm9ucGF5YWJsZVwiKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gdGhpcy5zdGF0ZU11dGFiaWxpdHkgKyBcIiBcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0LnRyaW0oKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb20odmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gQ29uc3RydWN0b3JGcmFnbWVudC5mcm9tU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gQ29uc3RydWN0b3JGcmFnbWVudC5mcm9tT2JqZWN0KHZhbHVlKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgICAgaWYgKENvbnN0cnVjdG9yRnJhZ21lbnQuaXNDb25zdHJ1Y3RvckZyYWdtZW50KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZS50eXBlICE9PSBcImNvbnN0cnVjdG9yXCIpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGNvbnN0cnVjdG9yIG9iamVjdFwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3RhdGUgPSB2ZXJpZnlTdGF0ZSh2YWx1ZSk7XG4gICAgICAgIGlmIChzdGF0ZS5jb25zdGFudCkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjb25zdGFudFwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICBuYW1lOiBudWxsLFxuICAgICAgICAgICAgdHlwZTogdmFsdWUudHlwZSxcbiAgICAgICAgICAgIGlucHV0czogKHZhbHVlLmlucHV0cyA/IHZhbHVlLmlucHV0cy5tYXAoUGFyYW1UeXBlLmZyb21PYmplY3QpIDogW10pLFxuICAgICAgICAgICAgcGF5YWJsZTogc3RhdGUucGF5YWJsZSxcbiAgICAgICAgICAgIHN0YXRlTXV0YWJpbGl0eTogc3RhdGUuc3RhdGVNdXRhYmlsaXR5LFxuICAgICAgICAgICAgZ2FzOiAodmFsdWUuZ2FzID8gQmlnTnVtYmVyLmZyb20odmFsdWUuZ2FzKSA6IG51bGwpXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3JGcmFnbWVudChfY29uc3RydWN0b3JHdWFyZCwgcGFyYW1zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21TdHJpbmcodmFsdWUpIHtcbiAgICAgICAgbGV0IHBhcmFtcyA9IHsgdHlwZTogXCJjb25zdHJ1Y3RvclwiIH07XG4gICAgICAgIHZhbHVlID0gcGFyc2VHYXModmFsdWUsIHBhcmFtcyk7XG4gICAgICAgIGxldCBwYXJlbnMgPSB2YWx1ZS5tYXRjaChyZWdleFBhcmVuKTtcbiAgICAgICAgaWYgKCFwYXJlbnMgfHwgcGFyZW5zWzFdLnRyaW0oKSAhPT0gXCJjb25zdHJ1Y3RvclwiKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBjb25zdHJ1Y3RvciBzdHJpbmdcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcGFyYW1zLmlucHV0cyA9IHBhcnNlUGFyYW1zKHBhcmVuc1syXS50cmltKCksIGZhbHNlKTtcbiAgICAgICAgcGFyc2VNb2RpZmllcnMocGFyZW5zWzNdLnRyaW0oKSwgcGFyYW1zKTtcbiAgICAgICAgcmV0dXJuIENvbnN0cnVjdG9yRnJhZ21lbnQuZnJvbU9iamVjdChwYXJhbXMpO1xuICAgIH1cbiAgICBzdGF0aWMgaXNDb25zdHJ1Y3RvckZyYWdtZW50KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAodmFsdWUgJiYgdmFsdWUuX2lzRnJhZ21lbnQgJiYgdmFsdWUudHlwZSA9PT0gXCJjb25zdHJ1Y3RvclwiKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgRnVuY3Rpb25GcmFnbWVudCBleHRlbmRzIENvbnN0cnVjdG9yRnJhZ21lbnQge1xuICAgIGZvcm1hdChmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFmb3JtYXQpIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IEZvcm1hdFR5cGVzLnNpZ2hhc2g7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFGb3JtYXRUeXBlc1tmb3JtYXRdKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBmb3JtYXQgdHlwZVwiLCBcImZvcm1hdFwiLCBmb3JtYXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IEZvcm1hdFR5cGVzLmpzb24pIHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgICAgICBjb25zdGFudDogdGhpcy5jb25zdGFudCxcbiAgICAgICAgICAgICAgICBzdGF0ZU11dGFiaWxpdHk6ICgodGhpcy5zdGF0ZU11dGFiaWxpdHkgIT09IFwibm9ucGF5YWJsZVwiKSA/IHRoaXMuc3RhdGVNdXRhYmlsaXR5IDogdW5kZWZpbmVkKSxcbiAgICAgICAgICAgICAgICBwYXlibGU6IHRoaXMucGF5YWJsZSxcbiAgICAgICAgICAgICAgICBnYXM6ICh0aGlzLmdhcyA/IHRoaXMuZ2FzLnRvTnVtYmVyKCkgOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgIGlucHV0czogdGhpcy5pbnB1dHMubWFwKChpbnB1dCkgPT4gSlNPTi5wYXJzZShpbnB1dC5mb3JtYXQoZm9ybWF0KSkpLFxuICAgICAgICAgICAgICAgIG91cHV0czogdGhpcy5vdXRwdXRzLm1hcCgob3V0cHV0KSA9PiBKU09OLnBhcnNlKG91dHB1dC5mb3JtYXQoZm9ybWF0KSkpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gICAgICAgIGlmIChmb3JtYXQgIT09IEZvcm1hdFR5cGVzLnNpZ2hhc2gpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBcImZ1bmN0aW9uIFwiO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCArPSB0aGlzLm5hbWUgKyBcIihcIiArIHRoaXMuaW5wdXRzLm1hcCgoaW5wdXQpID0+IGlucHV0LmZvcm1hdChmb3JtYXQpKS5qb2luKChmb3JtYXQgPT09IEZvcm1hdFR5cGVzLmZ1bGwpID8gXCIsIFwiIDogXCIsXCIpICsgXCIpIFwiO1xuICAgICAgICBpZiAoZm9ybWF0ICE9PSBGb3JtYXRUeXBlcy5zaWdoYXNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZU11dGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0ZU11dGFiaWxpdHkgIT09IFwibm9ucGF5YWJsZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAodGhpcy5zdGF0ZU11dGFiaWxpdHkgKyBcIiBcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5jb25zdGFudCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBcInZpZXcgXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5vdXRwdXRzICYmIHRoaXMub3V0cHV0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCJyZXR1cm5zIChcIiArIHRoaXMub3V0cHV0cy5tYXAoKG91dHB1dCkgPT4gb3V0cHV0LmZvcm1hdChmb3JtYXQpKS5qb2luKFwiLCBcIikgKyBcIikgXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5nYXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBcIkBcIiArIHRoaXMuZ2FzLnRvU3RyaW5nKCkgKyBcIiBcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0LnRyaW0oKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb20odmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gRnVuY3Rpb25GcmFnbWVudC5mcm9tU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRnVuY3Rpb25GcmFnbWVudC5mcm9tT2JqZWN0KHZhbHVlKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgICAgaWYgKEZ1bmN0aW9uRnJhZ21lbnQuaXNGdW5jdGlvbkZyYWdtZW50KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZS50eXBlICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGZ1bmN0aW9uIG9iamVjdFwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3RhdGUgPSB2ZXJpZnlTdGF0ZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgIHR5cGU6IHZhbHVlLnR5cGUsXG4gICAgICAgICAgICBuYW1lOiB2ZXJpZnlJZGVudGlmaWVyKHZhbHVlLm5hbWUpLFxuICAgICAgICAgICAgY29uc3RhbnQ6IHN0YXRlLmNvbnN0YW50LFxuICAgICAgICAgICAgaW5wdXRzOiAodmFsdWUuaW5wdXRzID8gdmFsdWUuaW5wdXRzLm1hcChQYXJhbVR5cGUuZnJvbU9iamVjdCkgOiBbXSksXG4gICAgICAgICAgICBvdXRwdXRzOiAodmFsdWUub3V0cHV0cyA/IHZhbHVlLm91dHB1dHMubWFwKFBhcmFtVHlwZS5mcm9tT2JqZWN0KSA6IFtdKSxcbiAgICAgICAgICAgIHBheWFibGU6IHN0YXRlLnBheWFibGUsXG4gICAgICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IHN0YXRlLnN0YXRlTXV0YWJpbGl0eSxcbiAgICAgICAgICAgIGdhczogKHZhbHVlLmdhcyA/IEJpZ051bWJlci5mcm9tKHZhbHVlLmdhcykgOiBudWxsKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uRnJhZ21lbnQoX2NvbnN0cnVjdG9yR3VhcmQsIHBhcmFtcyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tU3RyaW5nKHZhbHVlKSB7XG4gICAgICAgIGxldCBwYXJhbXMgPSB7IHR5cGU6IFwiZnVuY3Rpb25cIiB9O1xuICAgICAgICB2YWx1ZSA9IHBhcnNlR2FzKHZhbHVlLCBwYXJhbXMpO1xuICAgICAgICBsZXQgY29tcHMgPSB2YWx1ZS5zcGxpdChcIiByZXR1cm5zIFwiKTtcbiAgICAgICAgaWYgKGNvbXBzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGZ1bmN0aW9uIHN0cmluZ1wiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcGFyZW5zID0gY29tcHNbMF0ubWF0Y2gocmVnZXhQYXJlbik7XG4gICAgICAgIGlmICghcGFyZW5zKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBmdW5jdGlvbiBzaWduYXR1cmVcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcGFyYW1zLm5hbWUgPSBwYXJlbnNbMV0udHJpbSgpO1xuICAgICAgICBpZiAocGFyYW1zLm5hbWUpIHtcbiAgICAgICAgICAgIHZlcmlmeUlkZW50aWZpZXIocGFyYW1zLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtcy5pbnB1dHMgPSBwYXJzZVBhcmFtcyhwYXJlbnNbMl0sIGZhbHNlKTtcbiAgICAgICAgcGFyc2VNb2RpZmllcnMocGFyZW5zWzNdLnRyaW0oKSwgcGFyYW1zKTtcbiAgICAgICAgLy8gV2UgaGF2ZSBvdXRwdXRzXG4gICAgICAgIGlmIChjb21wcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBsZXQgcmV0dXJucyA9IGNvbXBzWzFdLm1hdGNoKHJlZ2V4UGFyZW4pO1xuICAgICAgICAgICAgaWYgKHJldHVybnNbMV0udHJpbSgpICE9IFwiXCIgfHwgcmV0dXJuc1szXS50cmltKCkgIT0gXCJcIikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bmV4cGVjdGVkIHRva2Vuc1wiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmFtcy5vdXRwdXRzID0gcGFyc2VQYXJhbXMocmV0dXJuc1syXSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGFyYW1zLm91dHB1dHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRnVuY3Rpb25GcmFnbWVudC5mcm9tT2JqZWN0KHBhcmFtcyk7XG4gICAgfVxuICAgIHN0YXRpYyBpc0Z1bmN0aW9uRnJhZ21lbnQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZSAmJiB2YWx1ZS5faXNGcmFnbWVudCAmJiB2YWx1ZS50eXBlID09PSBcImZ1bmN0aW9uXCIpO1xuICAgIH1cbn1cbi8vZXhwb3J0IGNsYXNzIEVycm9yRnJhZ21lbnQgZXh0ZW5kcyBGcmFnbWVudCB7XG4vL31cbi8vZXhwb3J0IGNsYXNzIFN0cnVjdEZyYWdtZW50IGV4dGVuZHMgRnJhZ21lbnQge1xuLy99XG5mdW5jdGlvbiB2ZXJpZnlUeXBlKHR5cGUpIHtcbiAgICAvLyBUaGVzZSBuZWVkIHRvIGJlIHRyYW5zZm9ybWVkIHRvIHRoZWlyIGZ1bGwgZGVzY3JpcHRpb25cbiAgICBpZiAodHlwZS5tYXRjaCgvXnVpbnQoJHxbXjEtOV0pLykpIHtcbiAgICAgICAgdHlwZSA9IFwidWludDI1NlwiICsgdHlwZS5zdWJzdHJpbmcoNCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUubWF0Y2goL15pbnQoJHxbXjEtOV0pLykpIHtcbiAgICAgICAgdHlwZSA9IFwiaW50MjU2XCIgKyB0eXBlLnN1YnN0cmluZygzKTtcbiAgICB9XG4gICAgLy8gQFRPRE86IG1vcmUgdmVyaWZpY2F0aW9uXG4gICAgcmV0dXJuIHR5cGU7XG59XG5jb25zdCByZWdleElkZW50aWZpZXIgPSBuZXcgUmVnRXhwKFwiXltBLVphLXpfXVtBLVphLXowLTlfXSokXCIpO1xuZnVuY3Rpb24gdmVyaWZ5SWRlbnRpZmllcih2YWx1ZSkge1xuICAgIGlmICghdmFsdWUgfHwgIXZhbHVlLm1hdGNoKHJlZ2V4SWRlbnRpZmllcikpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihgaW52YWxpZCBpZGVudGlmaWVyIFwiJHt2YWx1ZX1cImAsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5jb25zdCByZWdleFBhcmVuID0gbmV3IFJlZ0V4cChcIl4oW14pKF0qKVxcXFwoKC4qKVxcXFwpKFteKShdKikkXCIpO1xuZnVuY3Rpb24gc3BsaXROZXN0aW5nKHZhbHVlKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS50cmltKCk7XG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgIGxldCBhY2N1bSA9IFwiXCI7XG4gICAgbGV0IGRlcHRoID0gMDtcbiAgICBmb3IgKGxldCBvZmZzZXQgPSAwOyBvZmZzZXQgPCB2YWx1ZS5sZW5ndGg7IG9mZnNldCsrKSB7XG4gICAgICAgIGxldCBjID0gdmFsdWVbb2Zmc2V0XTtcbiAgICAgICAgaWYgKGMgPT09IFwiLFwiICYmIGRlcHRoID09PSAwKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChhY2N1bSk7XG4gICAgICAgICAgICBhY2N1bSA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhY2N1bSArPSBjO1xuICAgICAgICAgICAgaWYgKGMgPT09IFwiKFwiKSB7XG4gICAgICAgICAgICAgICAgZGVwdGgrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGMgPT09IFwiKVwiKSB7XG4gICAgICAgICAgICAgICAgZGVwdGgtLTtcbiAgICAgICAgICAgICAgICBpZiAoZGVwdGggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bmJhbGFuY2VkIHBhcmVudGhlc2lzXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYWNjdW0pIHtcbiAgICAgICAgcmVzdWx0LnB1c2goYWNjdW0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJhZ21lbnRzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgYXJyYXlpZnksIGNvbmNhdCwgaGV4Q29uY2F0LCBoZXhsaWZ5IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5pbXBvcnQgeyBCaWdOdW1iZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYmlnbnVtYmVyXCI7XG5pbXBvcnQgeyBkZWZpbmVSZWFkT25seSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4uL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUmVzdWx0RXJyb3JzKHJlc3VsdCkge1xuICAgIC8vIEZpbmQgdGhlIGZpcnN0IGVycm9yIChpZiBhbnkpXG4gICAgY29uc3QgZXJyb3JzID0gW107XG4gICAgY29uc3QgY2hlY2tFcnJvcnMgPSBmdW5jdGlvbiAocGF0aCwgb2JqZWN0KSB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQga2V5IGluIG9iamVjdCkge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRQYXRoID0gcGF0aC5zbGljZSgpO1xuICAgICAgICAgICAgY2hpbGRQYXRoLnB1c2goa2V5KTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY2hlY2tFcnJvcnMoY2hpbGRQYXRoLCBvYmplY3Rba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBlcnJvcnMucHVzaCh7IHBhdGg6IGNoaWxkUGF0aCwgZXJyb3I6IGVycm9yIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjaGVja0Vycm9ycyhbXSwgcmVzdWx0KTtcbiAgICByZXR1cm4gZXJyb3JzO1xufVxuZXhwb3J0IGNsYXNzIENvZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCB0eXBlLCBsb2NhbE5hbWUsIGR5bmFtaWMpIHtcbiAgICAgICAgLy8gQFRPRE86IGRlZmluZVJlYWRPbmx5IHRoZXNlXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMubG9jYWxOYW1lID0gbG9jYWxOYW1lO1xuICAgICAgICB0aGlzLmR5bmFtaWMgPSBkeW5hbWljO1xuICAgIH1cbiAgICBfdGhyb3dFcnJvcihtZXNzYWdlLCB2YWx1ZSkge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKG1lc3NhZ2UsIHRoaXMubG9jYWxOYW1lLCB2YWx1ZSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFdyaXRlciB7XG4gICAgY29uc3RydWN0b3Iod29yZFNpemUpIHtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJ3b3JkU2l6ZVwiLCB3b3JkU2l6ZSB8fCAzMik7XG4gICAgICAgIHRoaXMuX2RhdGEgPSBbXTtcbiAgICAgICAgdGhpcy5fZGF0YUxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuX3BhZGRpbmcgPSBuZXcgVWludDhBcnJheSh3b3JkU2l6ZSk7XG4gICAgfVxuICAgIGdldCBkYXRhKCkge1xuICAgICAgICByZXR1cm4gaGV4Q29uY2F0KHRoaXMuX2RhdGEpO1xuICAgIH1cbiAgICBnZXQgbGVuZ3RoKCkgeyByZXR1cm4gdGhpcy5fZGF0YUxlbmd0aDsgfVxuICAgIF93cml0ZURhdGEoZGF0YSkge1xuICAgICAgICB0aGlzLl9kYXRhLnB1c2goZGF0YSk7XG4gICAgICAgIHRoaXMuX2RhdGFMZW5ndGggKz0gZGF0YS5sZW5ndGg7XG4gICAgICAgIHJldHVybiBkYXRhLmxlbmd0aDtcbiAgICB9XG4gICAgYXBwZW5kV3JpdGVyKHdyaXRlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fd3JpdGVEYXRhKGNvbmNhdCh3cml0ZXIuX2RhdGEpKTtcbiAgICB9XG4gICAgLy8gQXJyYXlpc2ggaXRlbXM7IHBhZGRlZCBvbiB0aGUgcmlnaHQgdG8gd29yZFNpemVcbiAgICB3cml0ZUJ5dGVzKHZhbHVlKSB7XG4gICAgICAgIGxldCBieXRlcyA9IGFycmF5aWZ5KHZhbHVlKTtcbiAgICAgICAgY29uc3QgcGFkZGluZ09mZnNldCA9IGJ5dGVzLmxlbmd0aCAlIHRoaXMud29yZFNpemU7XG4gICAgICAgIGlmIChwYWRkaW5nT2Zmc2V0KSB7XG4gICAgICAgICAgICBieXRlcyA9IGNvbmNhdChbYnl0ZXMsIHRoaXMuX3BhZGRpbmcuc2xpY2UocGFkZGluZ09mZnNldCldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fd3JpdGVEYXRhKGJ5dGVzKTtcbiAgICB9XG4gICAgX2dldFZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGxldCBieXRlcyA9IGFycmF5aWZ5KEJpZ051bWJlci5mcm9tKHZhbHVlKSk7XG4gICAgICAgIGlmIChieXRlcy5sZW5ndGggPiB0aGlzLndvcmRTaXplKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcInZhbHVlIG91dC1vZi1ib3VuZHNcIiwgTG9nZ2VyLmVycm9ycy5CVUZGRVJfT1ZFUlJVTiwge1xuICAgICAgICAgICAgICAgIGxlbmd0aDogdGhpcy53b3JkU2l6ZSxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IGJ5dGVzLmxlbmd0aFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ5dGVzLmxlbmd0aCAlIHRoaXMud29yZFNpemUpIHtcbiAgICAgICAgICAgIGJ5dGVzID0gY29uY2F0KFt0aGlzLl9wYWRkaW5nLnNsaWNlKGJ5dGVzLmxlbmd0aCAlIHRoaXMud29yZFNpemUpLCBieXRlc10pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBieXRlcztcbiAgICB9XG4gICAgLy8gQmlnTnVtYmVyaXNoIGl0ZW1zOyBwYWRkZWQgb24gdGhlIGxlZnQgdG8gd29yZFNpemVcbiAgICB3cml0ZVZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93cml0ZURhdGEodGhpcy5fZ2V0VmFsdWUodmFsdWUpKTtcbiAgICB9XG4gICAgd3JpdGVVcGRhdGFibGVWYWx1ZSgpIHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5fZGF0YS5sZW5ndGg7XG4gICAgICAgIHRoaXMuX2RhdGEucHVzaCh0aGlzLl9wYWRkaW5nKTtcbiAgICAgICAgdGhpcy5fZGF0YUxlbmd0aCArPSB0aGlzLndvcmRTaXplO1xuICAgICAgICByZXR1cm4gKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9kYXRhW29mZnNldF0gPSB0aGlzLl9nZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJlYWRlciB7XG4gICAgY29uc3RydWN0b3IoZGF0YSwgd29yZFNpemUsIGNvZXJjZUZ1bmMsIGFsbG93TG9vc2UpIHtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJfZGF0YVwiLCBhcnJheWlmeShkYXRhKSk7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwid29yZFNpemVcIiwgd29yZFNpemUgfHwgMzIpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcIl9jb2VyY2VGdW5jXCIsIGNvZXJjZUZ1bmMpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcImFsbG93TG9vc2VcIiwgYWxsb3dMb29zZSk7XG4gICAgICAgIHRoaXMuX29mZnNldCA9IDA7XG4gICAgfVxuICAgIGdldCBkYXRhKCkgeyByZXR1cm4gaGV4bGlmeSh0aGlzLl9kYXRhKTsgfVxuICAgIGdldCBjb25zdW1lZCgpIHsgcmV0dXJuIHRoaXMuX29mZnNldDsgfVxuICAgIC8vIFRoZSBkZWZhdWx0IENvZXJjZSBmdW5jdGlvblxuICAgIHN0YXRpYyBjb2VyY2UobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgbGV0IG1hdGNoID0gbmFtZS5tYXRjaChcIl51P2ludChbMC05XSspJFwiKTtcbiAgICAgICAgaWYgKG1hdGNoICYmIHBhcnNlSW50KG1hdGNoWzFdKSA8PSA0OCkge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b051bWJlcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgY29lcmNlKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLl9jb2VyY2VGdW5jKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29lcmNlRnVuYyhuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFJlYWRlci5jb2VyY2UobmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgICBfcGVla0J5dGVzKG9mZnNldCwgbGVuZ3RoLCBsb29zZSkge1xuICAgICAgICBsZXQgYWxpZ25lZExlbmd0aCA9IE1hdGguY2VpbChsZW5ndGggLyB0aGlzLndvcmRTaXplKSAqIHRoaXMud29yZFNpemU7XG4gICAgICAgIGlmICh0aGlzLl9vZmZzZXQgKyBhbGlnbmVkTGVuZ3RoID4gdGhpcy5fZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFsbG93TG9vc2UgJiYgbG9vc2UgJiYgdGhpcy5fb2Zmc2V0ICsgbGVuZ3RoIDw9IHRoaXMuX2RhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgYWxpZ25lZExlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiZGF0YSBvdXQtb2YtYm91bmRzXCIsIExvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4sIHtcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiB0aGlzLl9kYXRhLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLl9vZmZzZXQgKyBhbGlnbmVkTGVuZ3RoXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGEuc2xpY2UodGhpcy5fb2Zmc2V0LCB0aGlzLl9vZmZzZXQgKyBhbGlnbmVkTGVuZ3RoKTtcbiAgICB9XG4gICAgc3ViUmVhZGVyKG9mZnNldCkge1xuICAgICAgICByZXR1cm4gbmV3IFJlYWRlcih0aGlzLl9kYXRhLnNsaWNlKHRoaXMuX29mZnNldCArIG9mZnNldCksIHRoaXMud29yZFNpemUsIHRoaXMuX2NvZXJjZUZ1bmMsIHRoaXMuYWxsb3dMb29zZSk7XG4gICAgfVxuICAgIHJlYWRCeXRlcyhsZW5ndGgsIGxvb3NlKSB7XG4gICAgICAgIGxldCBieXRlcyA9IHRoaXMuX3BlZWtCeXRlcygwLCBsZW5ndGgsICEhbG9vc2UpO1xuICAgICAgICB0aGlzLl9vZmZzZXQgKz0gYnl0ZXMubGVuZ3RoO1xuICAgICAgICAvLyBAVE9ETzogTWFrZSBzdXJlIHRoZSBsZW5ndGguLmVuZCBieXRlcyBhcmUgYWxsIDA/XG4gICAgICAgIHJldHVybiBieXRlcy5zbGljZSgwLCBsZW5ndGgpO1xuICAgIH1cbiAgICByZWFkVmFsdWUoKSB7XG4gICAgICAgIHJldHVybiBCaWdOdW1iZXIuZnJvbSh0aGlzLnJlYWRCeXRlcyh0aGlzLndvcmRTaXplKSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWJzdHJhY3QtY29kZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyBnZXRBZGRyZXNzIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2FkZHJlc3NcIjtcbmltcG9ydCB7IGhleFplcm9QYWQgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IENvZGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXJcIjtcbmV4cG9ydCBjbGFzcyBBZGRyZXNzQ29kZXIgZXh0ZW5kcyBDb2RlciB7XG4gICAgY29uc3RydWN0b3IobG9jYWxOYW1lKSB7XG4gICAgICAgIHN1cGVyKFwiYWRkcmVzc1wiLCBcImFkZHJlc3NcIiwgbG9jYWxOYW1lLCBmYWxzZSk7XG4gICAgfVxuICAgIGVuY29kZSh3cml0ZXIsIHZhbHVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBnZXRBZGRyZXNzKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rocm93RXJyb3IoZXJyb3IubWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXIud3JpdGVWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuICAgIGRlY29kZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIGdldEFkZHJlc3MoaGV4WmVyb1BhZChyZWFkZXIucmVhZFZhbHVlKCkudG9IZXhTdHJpbmcoKSwgMjApKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGRyZXNzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgQ29kZXIgfSBmcm9tIFwiLi9hYnN0cmFjdC1jb2RlclwiO1xuLy8gQ2xvbmVzIHRoZSBmdW5jdGlvbmFsaXR5IG9mIGFuIGV4aXN0aW5nIENvZGVyLCBidXQgd2l0aG91dCBhIGxvY2FsTmFtZVxuZXhwb3J0IGNsYXNzIEFub255bW91c0NvZGVyIGV4dGVuZHMgQ29kZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvZGVyKSB7XG4gICAgICAgIHN1cGVyKGNvZGVyLm5hbWUsIGNvZGVyLnR5cGUsIHVuZGVmaW5lZCwgY29kZXIuZHluYW1pYyk7XG4gICAgICAgIHRoaXMuY29kZXIgPSBjb2RlcjtcbiAgICB9XG4gICAgZW5jb2RlKHdyaXRlciwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29kZXIuZW5jb2RlKHdyaXRlciwgdmFsdWUpO1xuICAgIH1cbiAgICBkZWNvZGUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvZGVyLmRlY29kZShyZWFkZXIpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFub255bW91cy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG5pbXBvcnQgeyBDb2RlciwgV3JpdGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXJcIjtcbmltcG9ydCB7IEFub255bW91c0NvZGVyIH0gZnJvbSBcIi4vYW5vbnltb3VzXCI7XG5leHBvcnQgZnVuY3Rpb24gcGFjayh3cml0ZXIsIGNvZGVycywgdmFsdWVzKSB7XG4gICAgbGV0IGFycmF5VmFsdWVzID0gbnVsbDtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZXMpKSB7XG4gICAgICAgIGFycmF5VmFsdWVzID0gdmFsdWVzO1xuICAgIH1cbiAgICBlbHNlIGlmICh2YWx1ZXMgJiYgdHlwZW9mICh2YWx1ZXMpID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGxldCB1bmlxdWUgPSB7fTtcbiAgICAgICAgYXJyYXlWYWx1ZXMgPSBjb2RlcnMubWFwKChjb2RlcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGNvZGVyLmxvY2FsTmFtZTtcbiAgICAgICAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiY2Fubm90IGVuY29kZSBvYmplY3QgZm9yIHNpZ25hdHVyZSB3aXRoIG1pc3NpbmcgbmFtZXNcIiwgTG9nZ2VyLmVycm9ycy5JTlZBTElEX0FSR1VNRU5ULCB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50OiBcInZhbHVlc1wiLFxuICAgICAgICAgICAgICAgICAgICBjb2RlcjogY29kZXIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1bmlxdWVbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImNhbm5vdCBlbmNvZGUgb2JqZWN0IGZvciBzaWduYXR1cmUgd2l0aCBkdXBsaWNhdGUgbmFtZXNcIiwgTG9nZ2VyLmVycm9ycy5JTlZBTElEX0FSR1VNRU5ULCB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50OiBcInZhbHVlc1wiLFxuICAgICAgICAgICAgICAgICAgICBjb2RlcjogY29kZXIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVuaXF1ZVtuYW1lXSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzW25hbWVdO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHR1cGxlIHZhbHVlXCIsIFwidHVwbGVcIiwgdmFsdWVzKTtcbiAgICB9XG4gICAgaWYgKGNvZGVycy5sZW5ndGggIT09IGFycmF5VmFsdWVzLmxlbmd0aCkge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwidHlwZXMvdmFsdWUgbGVuZ3RoIG1pc21hdGNoXCIsIFwidHVwbGVcIiwgdmFsdWVzKTtcbiAgICB9XG4gICAgbGV0IHN0YXRpY1dyaXRlciA9IG5ldyBXcml0ZXIod3JpdGVyLndvcmRTaXplKTtcbiAgICBsZXQgZHluYW1pY1dyaXRlciA9IG5ldyBXcml0ZXIod3JpdGVyLndvcmRTaXplKTtcbiAgICBsZXQgdXBkYXRlRnVuY3MgPSBbXTtcbiAgICBjb2RlcnMuZm9yRWFjaCgoY29kZXIsIGluZGV4KSA9PiB7XG4gICAgICAgIGxldCB2YWx1ZSA9IGFycmF5VmFsdWVzW2luZGV4XTtcbiAgICAgICAgaWYgKGNvZGVyLmR5bmFtaWMpIHtcbiAgICAgICAgICAgIC8vIEdldCBjdXJyZW50IGR5bmFtaWMgb2Zmc2V0IChmb3IgdGhlIGZ1dHVyZSBwb2ludGVyKVxuICAgICAgICAgICAgbGV0IGR5bmFtaWNPZmZzZXQgPSBkeW5hbWljV3JpdGVyLmxlbmd0aDtcbiAgICAgICAgICAgIC8vIEVuY29kZSB0aGUgZHluYW1pYyB2YWx1ZSBpbnRvIHRoZSBkeW5hbWljV3JpdGVyXG4gICAgICAgICAgICBjb2Rlci5lbmNvZGUoZHluYW1pY1dyaXRlciwgdmFsdWUpO1xuICAgICAgICAgICAgLy8gUHJlcGFyZSB0byBwb3B1bGF0ZSB0aGUgY29ycmVjdCBvZmZzZXQgb25jZSB3ZSBhcmUgZG9uZVxuICAgICAgICAgICAgbGV0IHVwZGF0ZUZ1bmMgPSBzdGF0aWNXcml0ZXIud3JpdGVVcGRhdGFibGVWYWx1ZSgpO1xuICAgICAgICAgICAgdXBkYXRlRnVuY3MucHVzaCgoYmFzZU9mZnNldCkgPT4ge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUZ1bmMoYmFzZU9mZnNldCArIGR5bmFtaWNPZmZzZXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb2Rlci5lbmNvZGUoc3RhdGljV3JpdGVyLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBCYWNrZmlsbCBhbGwgdGhlIGR5bmFtaWMgb2Zmc2V0cywgbm93IHRoYXQgd2Uga25vdyB0aGUgc3RhdGljIGxlbmd0aFxuICAgIHVwZGF0ZUZ1bmNzLmZvckVhY2goKGZ1bmMpID0+IHsgZnVuYyhzdGF0aWNXcml0ZXIubGVuZ3RoKTsgfSk7XG4gICAgbGV0IGxlbmd0aCA9IHdyaXRlci5hcHBlbmRXcml0ZXIoc3RhdGljV3JpdGVyKTtcbiAgICBsZW5ndGggKz0gd3JpdGVyLmFwcGVuZFdyaXRlcihkeW5hbWljV3JpdGVyKTtcbiAgICByZXR1cm4gbGVuZ3RoO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVucGFjayhyZWFkZXIsIGNvZGVycykge1xuICAgIGxldCB2YWx1ZXMgPSBbXTtcbiAgICAvLyBBIHJlYWRlciBhbmNob3JlZCB0byB0aGlzIGJhc2VcbiAgICBsZXQgYmFzZVJlYWRlciA9IHJlYWRlci5zdWJSZWFkZXIoMCk7XG4gICAgY29kZXJzLmZvckVhY2goKGNvZGVyKSA9PiB7XG4gICAgICAgIGxldCB2YWx1ZSA9IG51bGw7XG4gICAgICAgIGlmIChjb2Rlci5keW5hbWljKSB7XG4gICAgICAgICAgICBsZXQgb2Zmc2V0ID0gcmVhZGVyLnJlYWRWYWx1ZSgpO1xuICAgICAgICAgICAgbGV0IG9mZnNldFJlYWRlciA9IGJhc2VSZWFkZXIuc3ViUmVhZGVyKG9mZnNldC50b051bWJlcigpKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBjb2Rlci5kZWNvZGUob2Zmc2V0UmVhZGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIENhbm5vdCByZWNvdmVyIGZyb20gdGhpc1xuICAgICAgICAgICAgICAgIGlmIChlcnJvci5jb2RlID09PSBMb2dnZXIuZXJyb3JzLkJVRkZFUl9PVkVSUlVOKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGVycm9yO1xuICAgICAgICAgICAgICAgIHZhbHVlLmJhc2VUeXBlID0gY29kZXIubmFtZTtcbiAgICAgICAgICAgICAgICB2YWx1ZS5uYW1lID0gY29kZXIubG9jYWxOYW1lO1xuICAgICAgICAgICAgICAgIHZhbHVlLnR5cGUgPSBjb2Rlci50eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGNvZGVyLmRlY29kZShyZWFkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2Fubm90IHJlY292ZXIgZnJvbSB0aGlzXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IExvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgdmFsdWUuYmFzZVR5cGUgPSBjb2Rlci5uYW1lO1xuICAgICAgICAgICAgICAgIHZhbHVlLm5hbWUgPSBjb2Rlci5sb2NhbE5hbWU7XG4gICAgICAgICAgICAgICAgdmFsdWUudHlwZSA9IGNvZGVyLnR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gV2Ugb25seSBvdXRwdXQgbmFtZWQgcHJvcGVydGllcyBmb3IgdW5pcXVlbHkgbmFtZWQgY29kZXJzXG4gICAgY29uc3QgdW5pcXVlTmFtZXMgPSBjb2RlcnMucmVkdWNlKChhY2N1bSwgY29kZXIpID0+IHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGNvZGVyLmxvY2FsTmFtZTtcbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgIGlmICghYWNjdW1bbmFtZV0pIHtcbiAgICAgICAgICAgICAgICBhY2N1bVtuYW1lXSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY2N1bVtuYW1lXSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2N1bTtcbiAgICB9LCB7fSk7XG4gICAgLy8gQWRkIGFueSBuYW1lZCBwYXJhbWV0ZXJzIChpLmUuIHR1cGxlcylcbiAgICBjb2RlcnMuZm9yRWFjaCgoY29kZXIsIGluZGV4KSA9PiB7XG4gICAgICAgIGxldCBuYW1lID0gY29kZXIubG9jYWxOYW1lO1xuICAgICAgICBpZiAoIW5hbWUgfHwgdW5pcXVlTmFtZXNbbmFtZV0gIT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmFtZSA9PT0gXCJsZW5ndGhcIikge1xuICAgICAgICAgICAgbmFtZSA9IFwiX2xlbmd0aFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWx1ZXMsIG5hbWUsIHtcbiAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IHsgdGhyb3cgdmFsdWU7IH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFsdWVzW25hbWVdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlc1tpXTtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWx1ZXMsIGksIHtcbiAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IHsgdGhyb3cgdmFsdWU7IH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuZnJlZXplKHZhbHVlcyk7XG59XG5leHBvcnQgY2xhc3MgQXJyYXlDb2RlciBleHRlbmRzIENvZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2RlciwgbGVuZ3RoLCBsb2NhbE5hbWUpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IChjb2Rlci50eXBlICsgXCJbXCIgKyAobGVuZ3RoID49IDAgPyBsZW5ndGggOiBcIlwiKSArIFwiXVwiKTtcbiAgICAgICAgY29uc3QgZHluYW1pYyA9IChsZW5ndGggPT09IC0xIHx8IGNvZGVyLmR5bmFtaWMpO1xuICAgICAgICBzdXBlcihcImFycmF5XCIsIHR5cGUsIGxvY2FsTmFtZSwgZHluYW1pYyk7XG4gICAgICAgIHRoaXMuY29kZXIgPSBjb2RlcjtcbiAgICAgICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XG4gICAgfVxuICAgIGVuY29kZSh3cml0ZXIsIHZhbHVlKSB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rocm93RXJyb3IoXCJleHBlY3RlZCBhcnJheSB2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNvdW50ID0gdGhpcy5sZW5ndGg7XG4gICAgICAgIGlmIChjb3VudCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGNvdW50ID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgICAgd3JpdGVyLndyaXRlVmFsdWUodmFsdWUubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICBsb2dnZXIuY2hlY2tBcmd1bWVudENvdW50KHZhbHVlLmxlbmd0aCwgY291bnQsIFwiY29kZXIgYXJyYXlcIiArICh0aGlzLmxvY2FsTmFtZSA/IChcIiBcIiArIHRoaXMubG9jYWxOYW1lKSA6IFwiXCIpKTtcbiAgICAgICAgbGV0IGNvZGVycyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb2RlcnMucHVzaCh0aGlzLmNvZGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFjayh3cml0ZXIsIGNvZGVycywgdmFsdWUpO1xuICAgIH1cbiAgICBkZWNvZGUocmVhZGVyKSB7XG4gICAgICAgIGxldCBjb3VudCA9IHRoaXMubGVuZ3RoO1xuICAgICAgICBpZiAoY291bnQgPT09IC0xKSB7XG4gICAgICAgICAgICBjb3VudCA9IHJlYWRlci5yZWFkVmFsdWUoKS50b051bWJlcigpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjb2RlcnMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBjb2RlcnMucHVzaChuZXcgQW5vbnltb3VzQ29kZXIodGhpcy5jb2RlcikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWFkZXIuY29lcmNlKHRoaXMubmFtZSwgdW5wYWNrKHJlYWRlciwgY29kZXJzKSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJyYXkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyBDb2RlciB9IGZyb20gXCIuL2Fic3RyYWN0LWNvZGVyXCI7XG5leHBvcnQgY2xhc3MgQm9vbGVhbkNvZGVyIGV4dGVuZHMgQ29kZXIge1xuICAgIGNvbnN0cnVjdG9yKGxvY2FsTmFtZSkge1xuICAgICAgICBzdXBlcihcImJvb2xcIiwgXCJib29sXCIsIGxvY2FsTmFtZSwgZmFsc2UpO1xuICAgIH1cbiAgICBlbmNvZGUod3JpdGVyLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gd3JpdGVyLndyaXRlVmFsdWUodmFsdWUgPyAxIDogMCk7XG4gICAgfVxuICAgIGRlY29kZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRlci5jb2VyY2UodGhpcy50eXBlLCAhcmVhZGVyLnJlYWRWYWx1ZSgpLmlzWmVybygpKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ib29sZWFuLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgYXJyYXlpZnksIGhleGxpZnkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IENvZGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXJcIjtcbmV4cG9ydCBjbGFzcyBEeW5hbWljQnl0ZXNDb2RlciBleHRlbmRzIENvZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlLCBsb2NhbE5hbWUpIHtcbiAgICAgICAgc3VwZXIodHlwZSwgdHlwZSwgbG9jYWxOYW1lLCB0cnVlKTtcbiAgICB9XG4gICAgZW5jb2RlKHdyaXRlciwgdmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSBhcnJheWlmeSh2YWx1ZSk7XG4gICAgICAgIGxldCBsZW5ndGggPSB3cml0ZXIud3JpdGVWYWx1ZSh2YWx1ZS5sZW5ndGgpO1xuICAgICAgICBsZW5ndGggKz0gd3JpdGVyLndyaXRlQnl0ZXModmFsdWUpO1xuICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgICBkZWNvZGUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiByZWFkZXIucmVhZEJ5dGVzKHJlYWRlci5yZWFkVmFsdWUoKS50b051bWJlcigpLCB0cnVlKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQnl0ZXNDb2RlciBleHRlbmRzIER5bmFtaWNCeXRlc0NvZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihsb2NhbE5hbWUpIHtcbiAgICAgICAgc3VwZXIoXCJieXRlc1wiLCBsb2NhbE5hbWUpO1xuICAgIH1cbiAgICBkZWNvZGUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiByZWFkZXIuY29lcmNlKHRoaXMubmFtZSwgaGV4bGlmeShzdXBlci5kZWNvZGUocmVhZGVyKSkpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ5dGVzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgYXJyYXlpZnksIGhleGxpZnkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IENvZGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXJcIjtcbi8vIEBUT0RPOiBNZXJnZSB0aGlzIHdpdGggYnl0ZXNcbmV4cG9ydCBjbGFzcyBGaXhlZEJ5dGVzQ29kZXIgZXh0ZW5kcyBDb2RlciB7XG4gICAgY29uc3RydWN0b3Ioc2l6ZSwgbG9jYWxOYW1lKSB7XG4gICAgICAgIGxldCBuYW1lID0gXCJieXRlc1wiICsgU3RyaW5nKHNpemUpO1xuICAgICAgICBzdXBlcihuYW1lLCBuYW1lLCBsb2NhbE5hbWUsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgICB9XG4gICAgZW5jb2RlKHdyaXRlciwgdmFsdWUpIHtcbiAgICAgICAgbGV0IGRhdGEgPSBhcnJheWlmeSh2YWx1ZSk7XG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCAhPT0gdGhpcy5zaXplKSB7XG4gICAgICAgICAgICB0aGlzLl90aHJvd0Vycm9yKFwiaW5jb3JyZWN0IGRhdGEgbGVuZ3RoXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyLndyaXRlQnl0ZXMoZGF0YSk7XG4gICAgfVxuICAgIGRlY29kZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRlci5jb2VyY2UodGhpcy5uYW1lLCBoZXhsaWZ5KHJlYWRlci5yZWFkQnl0ZXModGhpcy5zaXplKSkpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpeGVkLWJ5dGVzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgQ29kZXIgfSBmcm9tIFwiLi9hYnN0cmFjdC1jb2RlclwiO1xuZXhwb3J0IGNsYXNzIE51bGxDb2RlciBleHRlbmRzIENvZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihsb2NhbE5hbWUpIHtcbiAgICAgICAgc3VwZXIoXCJudWxsXCIsIFwiXCIsIGxvY2FsTmFtZSwgZmFsc2UpO1xuICAgIH1cbiAgICBlbmNvZGUod3JpdGVyLCB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fdGhyb3dFcnJvcihcIm5vdCBudWxsXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyLndyaXRlQnl0ZXMoW10pO1xuICAgIH1cbiAgICBkZWNvZGUocmVhZGVyKSB7XG4gICAgICAgIHJlYWRlci5yZWFkQnl0ZXMoMCk7XG4gICAgICAgIHJldHVybiByZWFkZXIuY29lcmNlKHRoaXMubmFtZSwgbnVsbCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bnVsbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IEJpZ051bWJlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9iaWdudW1iZXJcIjtcbmltcG9ydCB7IE1heFVpbnQyNTYsIE5lZ2F0aXZlT25lLCBPbmUsIFplcm8gfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBDb2RlciB9IGZyb20gXCIuL2Fic3RyYWN0LWNvZGVyXCI7XG5leHBvcnQgY2xhc3MgTnVtYmVyQ29kZXIgZXh0ZW5kcyBDb2RlciB7XG4gICAgY29uc3RydWN0b3Ioc2l6ZSwgc2lnbmVkLCBsb2NhbE5hbWUpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9ICgoc2lnbmVkID8gXCJpbnRcIiA6IFwidWludFwiKSArIChzaXplICogOCkpO1xuICAgICAgICBzdXBlcihuYW1lLCBuYW1lLCBsb2NhbE5hbWUsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgICAgICAgdGhpcy5zaWduZWQgPSBzaWduZWQ7XG4gICAgfVxuICAgIGVuY29kZSh3cml0ZXIsIHZhbHVlKSB7XG4gICAgICAgIGxldCB2ID0gQmlnTnVtYmVyLmZyb20odmFsdWUpO1xuICAgICAgICAvLyBDaGVjayBib3VuZHMgYXJlIHNhZmUgZm9yIGVuY29kaW5nXG4gICAgICAgIGxldCBtYXhVaW50VmFsdWUgPSBNYXhVaW50MjU2Lm1hc2sod3JpdGVyLndvcmRTaXplICogOCk7XG4gICAgICAgIGlmICh0aGlzLnNpZ25lZCkge1xuICAgICAgICAgICAgbGV0IGJvdW5kcyA9IG1heFVpbnRWYWx1ZS5tYXNrKHRoaXMuc2l6ZSAqIDggLSAxKTtcbiAgICAgICAgICAgIGlmICh2Lmd0KGJvdW5kcykgfHwgdi5sdChib3VuZHMuYWRkKE9uZSkubXVsKE5lZ2F0aXZlT25lKSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90aHJvd0Vycm9yKFwidmFsdWUgb3V0LW9mLWJvdW5kc1wiLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodi5sdChaZXJvKSB8fCB2Lmd0KG1heFVpbnRWYWx1ZS5tYXNrKHRoaXMuc2l6ZSAqIDgpKSkge1xuICAgICAgICAgICAgdGhpcy5fdGhyb3dFcnJvcihcInZhbHVlIG91dC1vZi1ib3VuZHNcIiwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHYgPSB2LnRvVHdvcyh0aGlzLnNpemUgKiA4KS5tYXNrKHRoaXMuc2l6ZSAqIDgpO1xuICAgICAgICBpZiAodGhpcy5zaWduZWQpIHtcbiAgICAgICAgICAgIHYgPSB2LmZyb21Ud29zKHRoaXMuc2l6ZSAqIDgpLnRvVHdvcyg4ICogd3JpdGVyLndvcmRTaXplKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyLndyaXRlVmFsdWUodik7XG4gICAgfVxuICAgIGRlY29kZShyZWFkZXIpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gcmVhZGVyLnJlYWRWYWx1ZSgpLm1hc2sodGhpcy5zaXplICogOCk7XG4gICAgICAgIGlmICh0aGlzLnNpZ25lZCkge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5mcm9tVHdvcyh0aGlzLnNpemUgKiA4KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVhZGVyLmNvZXJjZSh0aGlzLm5hbWUsIHZhbHVlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1udW1iZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyB0b1V0ZjhCeXRlcywgdG9VdGY4U3RyaW5nIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3N0cmluZ3NcIjtcbmltcG9ydCB7IER5bmFtaWNCeXRlc0NvZGVyIH0gZnJvbSBcIi4vYnl0ZXNcIjtcbmV4cG9ydCBjbGFzcyBTdHJpbmdDb2RlciBleHRlbmRzIER5bmFtaWNCeXRlc0NvZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihsb2NhbE5hbWUpIHtcbiAgICAgICAgc3VwZXIoXCJzdHJpbmdcIiwgbG9jYWxOYW1lKTtcbiAgICB9XG4gICAgZW5jb2RlKHdyaXRlciwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmVuY29kZSh3cml0ZXIsIHRvVXRmOEJ5dGVzKHZhbHVlKSk7XG4gICAgfVxuICAgIGRlY29kZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIHRvVXRmOFN0cmluZyhzdXBlci5kZWNvZGUocmVhZGVyKSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyaW5nLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgQ29kZXIgfSBmcm9tIFwiLi9hYnN0cmFjdC1jb2RlclwiO1xuaW1wb3J0IHsgcGFjaywgdW5wYWNrIH0gZnJvbSBcIi4vYXJyYXlcIjtcbmV4cG9ydCBjbGFzcyBUdXBsZUNvZGVyIGV4dGVuZHMgQ29kZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvZGVycywgbG9jYWxOYW1lKSB7XG4gICAgICAgIGxldCBkeW5hbWljID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHR5cGVzID0gW107XG4gICAgICAgIGNvZGVycy5mb3JFYWNoKChjb2RlcikgPT4ge1xuICAgICAgICAgICAgaWYgKGNvZGVyLmR5bmFtaWMpIHtcbiAgICAgICAgICAgICAgICBkeW5hbWljID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHR5cGVzLnB1c2goY29kZXIudHlwZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB0eXBlID0gKFwidHVwbGUoXCIgKyB0eXBlcy5qb2luKFwiLFwiKSArIFwiKVwiKTtcbiAgICAgICAgc3VwZXIoXCJ0dXBsZVwiLCB0eXBlLCBsb2NhbE5hbWUsIGR5bmFtaWMpO1xuICAgICAgICB0aGlzLmNvZGVycyA9IGNvZGVycztcbiAgICB9XG4gICAgZW5jb2RlKHdyaXRlciwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHBhY2sod3JpdGVyLCB0aGlzLmNvZGVycywgdmFsdWUpO1xuICAgIH1cbiAgICBkZWNvZGUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiByZWFkZXIuY29lcmNlKHRoaXMubmFtZSwgdW5wYWNrKHJlYWRlciwgdGhpcy5jb2RlcnMpKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10dXBsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL3dpa2kvd2lraS9FdGhlcmV1bS1Db250cmFjdC1BQklcbmltcG9ydCB7IGFycmF5aWZ5IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5pbXBvcnQgeyBkZWZpbmVSZWFkT25seSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG5pbXBvcnQgeyBSZWFkZXIsIFdyaXRlciB9IGZyb20gXCIuL2NvZGVycy9hYnN0cmFjdC1jb2RlclwiO1xuaW1wb3J0IHsgQWRkcmVzc0NvZGVyIH0gZnJvbSBcIi4vY29kZXJzL2FkZHJlc3NcIjtcbmltcG9ydCB7IEFycmF5Q29kZXIgfSBmcm9tIFwiLi9jb2RlcnMvYXJyYXlcIjtcbmltcG9ydCB7IEJvb2xlYW5Db2RlciB9IGZyb20gXCIuL2NvZGVycy9ib29sZWFuXCI7XG5pbXBvcnQgeyBCeXRlc0NvZGVyIH0gZnJvbSBcIi4vY29kZXJzL2J5dGVzXCI7XG5pbXBvcnQgeyBGaXhlZEJ5dGVzQ29kZXIgfSBmcm9tIFwiLi9jb2RlcnMvZml4ZWQtYnl0ZXNcIjtcbmltcG9ydCB7IE51bGxDb2RlciB9IGZyb20gXCIuL2NvZGVycy9udWxsXCI7XG5pbXBvcnQgeyBOdW1iZXJDb2RlciB9IGZyb20gXCIuL2NvZGVycy9udW1iZXJcIjtcbmltcG9ydCB7IFN0cmluZ0NvZGVyIH0gZnJvbSBcIi4vY29kZXJzL3N0cmluZ1wiO1xuaW1wb3J0IHsgVHVwbGVDb2RlciB9IGZyb20gXCIuL2NvZGVycy90dXBsZVwiO1xuaW1wb3J0IHsgUGFyYW1UeXBlIH0gZnJvbSBcIi4vZnJhZ21lbnRzXCI7XG5jb25zdCBwYXJhbVR5cGVCeXRlcyA9IG5ldyBSZWdFeHAoL15ieXRlcyhbMC05XSopJC8pO1xuY29uc3QgcGFyYW1UeXBlTnVtYmVyID0gbmV3IFJlZ0V4cCgvXih1P2ludCkoWzAtOV0qKSQvKTtcbmV4cG9ydCBjbGFzcyBBYmlDb2RlciB7XG4gICAgY29uc3RydWN0b3IoY29lcmNlRnVuYykge1xuICAgICAgICBsb2dnZXIuY2hlY2tOZXcobmV3LnRhcmdldCwgQWJpQ29kZXIpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcImNvZXJjZUZ1bmNcIiwgY29lcmNlRnVuYyB8fCBudWxsKTtcbiAgICB9XG4gICAgX2dldENvZGVyKHBhcmFtKSB7XG4gICAgICAgIHN3aXRjaCAocGFyYW0uYmFzZVR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJhZGRyZXNzXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBZGRyZXNzQ29kZXIocGFyYW0ubmFtZSk7XG4gICAgICAgICAgICBjYXNlIFwiYm9vbFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQm9vbGVhbkNvZGVyKHBhcmFtLm5hbWUpO1xuICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU3RyaW5nQ29kZXIocGFyYW0ubmFtZSk7XG4gICAgICAgICAgICBjYXNlIFwiYnl0ZXNcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEJ5dGVzQ29kZXIocGFyYW0ubmFtZSk7XG4gICAgICAgICAgICBjYXNlIFwiYXJyYXlcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFycmF5Q29kZXIodGhpcy5fZ2V0Q29kZXIocGFyYW0uYXJyYXlDaGlsZHJlbiksIHBhcmFtLmFycmF5TGVuZ3RoLCBwYXJhbS5uYW1lKTtcbiAgICAgICAgICAgIGNhc2UgXCJ0dXBsZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVHVwbGVDb2RlcigocGFyYW0uY29tcG9uZW50cyB8fCBbXSkubWFwKChjb21wb25lbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldENvZGVyKGNvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgfSksIHBhcmFtLm5hbWUpO1xuICAgICAgICAgICAgY2FzZSBcIlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTnVsbENvZGVyKHBhcmFtLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHU/aW50WzAtOV0qXG4gICAgICAgIGxldCBtYXRjaCA9IHBhcmFtLnR5cGUubWF0Y2gocGFyYW1UeXBlTnVtYmVyKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBsZXQgc2l6ZSA9IHBhcnNlSW50KG1hdGNoWzJdIHx8IFwiMjU2XCIpO1xuICAgICAgICAgICAgaWYgKHNpemUgPT09IDAgfHwgc2l6ZSA+IDI1NiB8fCAoc2l6ZSAlIDgpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgXCIgKyBtYXRjaFsxXSArIFwiIGJpdCBsZW5ndGhcIiwgXCJwYXJhbVwiLCBwYXJhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IE51bWJlckNvZGVyKHNpemUgLyA4LCAobWF0Y2hbMV0gPT09IFwiaW50XCIpLCBwYXJhbS5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBieXRlc1swLTldK1xuICAgICAgICBtYXRjaCA9IHBhcmFtLnR5cGUubWF0Y2gocGFyYW1UeXBlQnl0ZXMpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGxldCBzaXplID0gcGFyc2VJbnQobWF0Y2hbMV0pO1xuICAgICAgICAgICAgaWYgKHNpemUgPT09IDAgfHwgc2l6ZSA+IDMyKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYnl0ZXMgbGVuZ3RoXCIsIFwicGFyYW1cIiwgcGFyYW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGaXhlZEJ5dGVzQ29kZXIoc2l6ZSwgcGFyYW0ubmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHR5cGVcIiwgXCJ0eXBlXCIsIHBhcmFtLnR5cGUpO1xuICAgIH1cbiAgICBfZ2V0V29yZFNpemUoKSB7IHJldHVybiAzMjsgfVxuICAgIF9nZXRSZWFkZXIoZGF0YSwgYWxsb3dMb29zZSkge1xuICAgICAgICByZXR1cm4gbmV3IFJlYWRlcihkYXRhLCB0aGlzLl9nZXRXb3JkU2l6ZSgpLCB0aGlzLmNvZXJjZUZ1bmMsIGFsbG93TG9vc2UpO1xuICAgIH1cbiAgICBfZ2V0V3JpdGVyKCkge1xuICAgICAgICByZXR1cm4gbmV3IFdyaXRlcih0aGlzLl9nZXRXb3JkU2l6ZSgpKTtcbiAgICB9XG4gICAgZW5jb2RlKHR5cGVzLCB2YWx1ZXMpIHtcbiAgICAgICAgaWYgKHR5cGVzLmxlbmd0aCAhPT0gdmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJ0eXBlcy92YWx1ZXMgbGVuZ3RoIG1pc21hdGNoXCIsIExvZ2dlci5lcnJvcnMuSU5WQUxJRF9BUkdVTUVOVCwge1xuICAgICAgICAgICAgICAgIGNvdW50OiB7IHR5cGVzOiB0eXBlcy5sZW5ndGgsIHZhbHVlczogdmFsdWVzLmxlbmd0aCB9LFxuICAgICAgICAgICAgICAgIHZhbHVlOiB7IHR5cGVzOiB0eXBlcywgdmFsdWVzOiB2YWx1ZXMgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29kZXJzID0gdHlwZXMubWFwKCh0eXBlKSA9PiB0aGlzLl9nZXRDb2RlcihQYXJhbVR5cGUuZnJvbSh0eXBlKSkpO1xuICAgICAgICBjb25zdCBjb2RlciA9IChuZXcgVHVwbGVDb2Rlcihjb2RlcnMsIFwiX1wiKSk7XG4gICAgICAgIGNvbnN0IHdyaXRlciA9IHRoaXMuX2dldFdyaXRlcigpO1xuICAgICAgICBjb2Rlci5lbmNvZGUod3JpdGVyLCB2YWx1ZXMpO1xuICAgICAgICByZXR1cm4gd3JpdGVyLmRhdGE7XG4gICAgfVxuICAgIGRlY29kZSh0eXBlcywgZGF0YSwgbG9vc2UpIHtcbiAgICAgICAgY29uc3QgY29kZXJzID0gdHlwZXMubWFwKCh0eXBlKSA9PiB0aGlzLl9nZXRDb2RlcihQYXJhbVR5cGUuZnJvbSh0eXBlKSkpO1xuICAgICAgICBjb25zdCBjb2RlciA9IG5ldyBUdXBsZUNvZGVyKGNvZGVycywgXCJfXCIpO1xuICAgICAgICByZXR1cm4gY29kZXIuZGVjb2RlKHRoaXMuX2dldFJlYWRlcihhcnJheWlmeShkYXRhKSwgbG9vc2UpKTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgZGVmYXVsdEFiaUNvZGVyID0gbmV3IEFiaUNvZGVyKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hYmktY29kZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyBnZXRBZGRyZXNzIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2FkZHJlc3NcIjtcbmltcG9ydCB7IEJpZ051bWJlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9iaWdudW1iZXJcIjtcbmltcG9ydCB7IGFycmF5aWZ5LCBjb25jYXQsIGhleERhdGFTbGljZSwgaGV4bGlmeSwgaGV4WmVyb1BhZCwgaXNIZXhTdHJpbmcgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IGlkIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2hhc2hcIjtcbmltcG9ydCB7IGtlY2NhazI1NiB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9rZWNjYWsyNTZcIjtcbmltcG9ydCB7IGRlZmluZVJlYWRPbmx5LCBEZXNjcmlwdGlvbiwgZ2V0U3RhdGljIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3BlcnRpZXNcIjtcbmltcG9ydCB7IGRlZmF1bHRBYmlDb2RlciB9IGZyb20gXCIuL2FiaS1jb2RlclwiO1xuaW1wb3J0IHsgY2hlY2tSZXN1bHRFcnJvcnMgfSBmcm9tIFwiLi9jb2RlcnMvYWJzdHJhY3QtY29kZXJcIjtcbmltcG9ydCB7IENvbnN0cnVjdG9yRnJhZ21lbnQsIEV2ZW50RnJhZ21lbnQsIEZvcm1hdFR5cGVzLCBGcmFnbWVudCwgRnVuY3Rpb25GcmFnbWVudCwgUGFyYW1UeXBlIH0gZnJvbSBcIi4vZnJhZ21lbnRzXCI7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG5leHBvcnQgeyBjaGVja1Jlc3VsdEVycm9ycyB9O1xuZXhwb3J0IGNsYXNzIExvZ0Rlc2NyaXB0aW9uIGV4dGVuZHMgRGVzY3JpcHRpb24ge1xufVxuZXhwb3J0IGNsYXNzIFRyYW5zYWN0aW9uRGVzY3JpcHRpb24gZXh0ZW5kcyBEZXNjcmlwdGlvbiB7XG59XG5leHBvcnQgY2xhc3MgSW5kZXhlZCBleHRlbmRzIERlc2NyaXB0aW9uIHtcbiAgICBzdGF0aWMgaXNJbmRleGVkKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5faXNJbmRleGVkKTtcbiAgICB9XG59XG5mdW5jdGlvbiB3cmFwQWNjZXNzRXJyb3IocHJvcGVydHksIGVycm9yKSB7XG4gICAgY29uc3Qgd3JhcCA9IG5ldyBFcnJvcihgZGVmZXJyZWQgZXJyb3IgZHVyaW5nIEFCSSBkZWNvZGluZyB0cmlnZ2VyZWQgYWNjZXNzaW5nICR7cHJvcGVydHl9YCk7XG4gICAgd3JhcC5lcnJvciA9IGVycm9yO1xuICAgIHJldHVybiB3cmFwO1xufVxuLypcbmZ1bmN0aW9uIGNoZWNrTmFtZXMoZnJhZ21lbnQ6IEZyYWdtZW50LCB0eXBlOiBcImlucHV0XCIgfCBcIm91dHB1dFwiLCBwYXJhbXM6IEFycmF5PFBhcmFtVHlwZT4pOiB2b2lkIHtcbiAgICBwYXJhbXMucmVkdWNlKChhY2N1bSwgcGFyYW0pID0+IHtcbiAgICAgICAgaWYgKHBhcmFtLm5hbWUpIHtcbiAgICAgICAgICAgIGlmIChhY2N1bVtwYXJhbS5uYW1lXSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoYGR1cGxpY2F0ZSAkeyB0eXBlIH0gcGFyYW1ldGVyICR7IEpTT04uc3RyaW5naWZ5KHBhcmFtLm5hbWUpIH0gaW4gJHsgZnJhZ21lbnQuZm9ybWF0KFwiZnVsbFwiKSB9YCwgXCJmcmFnbWVudFwiLCBmcmFnbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY2N1bVtwYXJhbS5uYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjY3VtO1xuICAgIH0sIDx7IFsgbmFtZTogc3RyaW5nIF06IGJvb2xlYW4gfT57IH0pO1xufVxuKi9cbmV4cG9ydCBjbGFzcyBJbnRlcmZhY2Uge1xuICAgIGNvbnN0cnVjdG9yKGZyYWdtZW50cykge1xuICAgICAgICBsb2dnZXIuY2hlY2tOZXcobmV3LnRhcmdldCwgSW50ZXJmYWNlKTtcbiAgICAgICAgbGV0IGFiaSA9IFtdO1xuICAgICAgICBpZiAodHlwZW9mIChmcmFnbWVudHMpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBhYmkgPSBKU09OLnBhcnNlKGZyYWdtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhYmkgPSBmcmFnbWVudHM7XG4gICAgICAgIH1cbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJmcmFnbWVudHNcIiwgYWJpLm1hcCgoZnJhZ21lbnQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBGcmFnbWVudC5mcm9tKGZyYWdtZW50KTtcbiAgICAgICAgfSkuZmlsdGVyKChmcmFnbWVudCkgPT4gKGZyYWdtZW50ICE9IG51bGwpKSk7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiX2FiaUNvZGVyXCIsIGdldFN0YXRpYygobmV3LnRhcmdldCksIFwiZ2V0QWJpQ29kZXJcIikoKSk7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiZnVuY3Rpb25zXCIsIHt9KTtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJlcnJvcnNcIiwge30pO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcImV2ZW50c1wiLCB7fSk7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwic3RydWN0c1wiLCB7fSk7XG4gICAgICAgIC8vIEFkZCBhbGwgZnJhZ21lbnRzIGJ5IHRoZWlyIHNpZ25hdHVyZVxuICAgICAgICB0aGlzLmZyYWdtZW50cy5mb3JFYWNoKChmcmFnbWVudCkgPT4ge1xuICAgICAgICAgICAgbGV0IGJ1Y2tldCA9IG51bGw7XG4gICAgICAgICAgICBzd2l0Y2ggKGZyYWdtZW50LnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiY29uc3RydWN0b3JcIjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVwbG95KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybihcImR1cGxpY2F0ZSBkZWZpbml0aW9uIC0gY29uc3RydWN0b3JcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy9jaGVja05hbWVzKGZyYWdtZW50LCBcImlucHV0XCIsIGZyYWdtZW50LmlucHV0cyk7XG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiZGVwbG95XCIsIGZyYWdtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgICAgICAgICAgICAgICAvL2NoZWNrTmFtZXMoZnJhZ21lbnQsIFwiaW5wdXRcIiwgZnJhZ21lbnQuaW5wdXRzKTtcbiAgICAgICAgICAgICAgICAgICAgLy9jaGVja05hbWVzKGZyYWdtZW50LCBcIm91dHB1dFwiLCAoPEZ1bmN0aW9uRnJhZ21lbnQ+ZnJhZ21lbnQpLm91dHB1dHMpO1xuICAgICAgICAgICAgICAgICAgICBidWNrZXQgPSB0aGlzLmZ1bmN0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImV2ZW50XCI6XG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2tOYW1lcyhmcmFnbWVudCwgXCJpbnB1dFwiLCBmcmFnbWVudC5pbnB1dHMpO1xuICAgICAgICAgICAgICAgICAgICBidWNrZXQgPSB0aGlzLmV2ZW50cztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHNpZ25hdHVyZSA9IGZyYWdtZW50LmZvcm1hdCgpO1xuICAgICAgICAgICAgaWYgKGJ1Y2tldFtzaWduYXR1cmVdKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJkdXBsaWNhdGUgZGVmaW5pdGlvbiAtIFwiICsgc2lnbmF0dXJlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWNrZXRbc2lnbmF0dXJlXSA9IGZyYWdtZW50O1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gSWYgd2UgZG8gbm90IGhhdmUgYSBjb25zdHJ1Y3RvciBhZGQgYSBkZWZhdWx0XG4gICAgICAgIGlmICghdGhpcy5kZXBsb3kpIHtcbiAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiZGVwbG95XCIsIENvbnN0cnVjdG9yRnJhZ21lbnQuZnJvbSh7XG4gICAgICAgICAgICAgICAgcGF5YWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJjb25zdHJ1Y3RvclwiXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJfaXNJbnRlcmZhY2VcIiwgdHJ1ZSk7XG4gICAgfVxuICAgIGZvcm1hdChmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFmb3JtYXQpIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IEZvcm1hdFR5cGVzLmZ1bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gRm9ybWF0VHlwZXMuc2lnaGFzaCkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludGVyZmFjZSBkb2VzIG5vdCBzdXBwb3J0IGZvcm1hdHRpbmcgc2lnaGFzaFwiLCBcImZvcm1hdFwiLCBmb3JtYXQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFiaSA9IHRoaXMuZnJhZ21lbnRzLm1hcCgoZnJhZ21lbnQpID0+IGZyYWdtZW50LmZvcm1hdChmb3JtYXQpKTtcbiAgICAgICAgLy8gV2UgbmVlZCB0byByZS1idW5kbGUgdGhlIEpTT04gZnJhZ21lbnRzIGEgYml0XG4gICAgICAgIGlmIChmb3JtYXQgPT09IEZvcm1hdFR5cGVzLmpzb24pIHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhYmkubWFwKChqKSA9PiBKU09OLnBhcnNlKGopKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFiaTtcbiAgICB9XG4gICAgLy8gU3ViLWNsYXNzZXMgY2FuIG92ZXJyaWRlIHRoZXNlIHRvIGhhbmRsZSBvdGhlciBibG9ja2NoYWluc1xuICAgIHN0YXRpYyBnZXRBYmlDb2RlcigpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRBYmlDb2RlcjtcbiAgICB9XG4gICAgc3RhdGljIGdldEFkZHJlc3MoYWRkcmVzcykge1xuICAgICAgICByZXR1cm4gZ2V0QWRkcmVzcyhhZGRyZXNzKTtcbiAgICB9XG4gICAgc3RhdGljIGdldFNpZ2hhc2goZnVuY3Rpb25GcmFnbWVudCkge1xuICAgICAgICByZXR1cm4gaGV4RGF0YVNsaWNlKGlkKGZ1bmN0aW9uRnJhZ21lbnQuZm9ybWF0KCkpLCAwLCA0KTtcbiAgICB9XG4gICAgc3RhdGljIGdldEV2ZW50VG9waWMoZXZlbnRGcmFnbWVudCkge1xuICAgICAgICByZXR1cm4gaWQoZXZlbnRGcmFnbWVudC5mb3JtYXQoKSk7XG4gICAgfVxuICAgIC8vIEZpbmQgYSBmdW5jdGlvbiBkZWZpbml0aW9uIGJ5IGFueSBtZWFucyBuZWNlc3NhcnkgKHVubGVzcyBpdCBpcyBhbWJpZ3VvdXMpXG4gICAgZ2V0RnVuY3Rpb24obmFtZU9yU2lnbmF0dXJlT3JTaWdoYXNoKSB7XG4gICAgICAgIGlmIChpc0hleFN0cmluZyhuYW1lT3JTaWduYXR1cmVPclNpZ2hhc2gpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gdGhpcy5mdW5jdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAobmFtZU9yU2lnbmF0dXJlT3JTaWdoYXNoID09PSB0aGlzLmdldFNpZ2hhc2gobmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZnVuY3Rpb25zW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJubyBtYXRjaGluZyBmdW5jdGlvblwiLCBcInNpZ2hhc2hcIiwgbmFtZU9yU2lnbmF0dXJlT3JTaWdoYXNoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJdCBpcyBhIGJhcmUgbmFtZSwgbG9vayB1cCB0aGUgZnVuY3Rpb24gKHdpbGwgcmV0dXJuIG51bGwgaWYgYW1iaWd1b3VzKVxuICAgICAgICBpZiAobmFtZU9yU2lnbmF0dXJlT3JTaWdoYXNoLmluZGV4T2YoXCIoXCIpID09PSAtMSkge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IG5hbWVPclNpZ25hdHVyZU9yU2lnaGFzaC50cmltKCk7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGluZyA9IE9iamVjdC5rZXlzKHRoaXMuZnVuY3Rpb25zKS5maWx0ZXIoKGYpID0+IChmLnNwbGl0KFwiKFwiIC8qIGZpeDopICovKVswXSA9PT0gbmFtZSkpO1xuICAgICAgICAgICAgaWYgKG1hdGNoaW5nLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJubyBtYXRjaGluZyBmdW5jdGlvblwiLCBcIm5hbWVcIiwgbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChtYXRjaGluZy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcIm11bHRpcGxlIG1hdGNoaW5nIGZ1bmN0aW9uc1wiLCBcIm5hbWVcIiwgbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mdW5jdGlvbnNbbWF0Y2hpbmdbMF1dO1xuICAgICAgICB9XG4gICAgICAgIC8vIE5vcm1saXplIHRoZSBzaWduYXR1cmUgYW5kIGxvb2t1cCB0aGUgZnVuY3Rpb25cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5mdW5jdGlvbnNbRnVuY3Rpb25GcmFnbWVudC5mcm9tU3RyaW5nKG5hbWVPclNpZ25hdHVyZU9yU2lnaGFzaCkuZm9ybWF0KCldO1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcIm5vIG1hdGNoaW5nIGZ1bmN0aW9uXCIsIFwic2lnbmF0dXJlXCIsIG5hbWVPclNpZ25hdHVyZU9yU2lnaGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLy8gRmluZCBhbiBldmVudCBkZWZpbml0aW9uIGJ5IGFueSBtZWFucyBuZWNlc3NhcnkgKHVubGVzcyBpdCBpcyBhbWJpZ3VvdXMpXG4gICAgZ2V0RXZlbnQobmFtZU9yU2lnbmF0dXJlT3JUb3BpYykge1xuICAgICAgICBpZiAoaXNIZXhTdHJpbmcobmFtZU9yU2lnbmF0dXJlT3JUb3BpYykpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvcGljaGFzaCA9IG5hbWVPclNpZ25hdHVyZU9yVG9waWMudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiB0aGlzLmV2ZW50cykge1xuICAgICAgICAgICAgICAgIGlmICh0b3BpY2hhc2ggPT09IHRoaXMuZ2V0RXZlbnRUb3BpYyhuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ldmVudHNbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcIm5vIG1hdGNoaW5nIGV2ZW50XCIsIFwidG9waWNoYXNoXCIsIHRvcGljaGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSXQgaXMgYSBiYXJlIG5hbWUsIGxvb2sgdXAgdGhlIGZ1bmN0aW9uICh3aWxsIHJldHVybiBudWxsIGlmIGFtYmlndW91cylcbiAgICAgICAgaWYgKG5hbWVPclNpZ25hdHVyZU9yVG9waWMuaW5kZXhPZihcIihcIikgPT09IC0xKSB7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gbmFtZU9yU2lnbmF0dXJlT3JUb3BpYy50cmltKCk7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGluZyA9IE9iamVjdC5rZXlzKHRoaXMuZXZlbnRzKS5maWx0ZXIoKGYpID0+IChmLnNwbGl0KFwiKFwiIC8qIGZpeDopICovKVswXSA9PT0gbmFtZSkpO1xuICAgICAgICAgICAgaWYgKG1hdGNoaW5nLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJubyBtYXRjaGluZyBldmVudFwiLCBcIm5hbWVcIiwgbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChtYXRjaGluZy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcIm11bHRpcGxlIG1hdGNoaW5nIGV2ZW50c1wiLCBcIm5hbWVcIiwgbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ldmVudHNbbWF0Y2hpbmdbMF1dO1xuICAgICAgICB9XG4gICAgICAgIC8vIE5vcm1saXplIHRoZSBzaWduYXR1cmUgYW5kIGxvb2t1cCB0aGUgZnVuY3Rpb25cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5ldmVudHNbRXZlbnRGcmFnbWVudC5mcm9tU3RyaW5nKG5hbWVPclNpZ25hdHVyZU9yVG9waWMpLmZvcm1hdCgpXTtcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJubyBtYXRjaGluZyBldmVudFwiLCBcInNpZ25hdHVyZVwiLCBuYW1lT3JTaWduYXR1cmVPclRvcGljKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvLyBHZXQgdGhlIHNpZ2hhc2ggKHRoZSBieXRlczQgc2VsZWN0b3IpIHVzZWQgYnkgU29saWRpdHkgdG8gaWRlbnRpZnkgYSBmdW5jdGlvblxuICAgIGdldFNpZ2hhc2goZnVuY3Rpb25GcmFnbWVudCkge1xuICAgICAgICBpZiAodHlwZW9mIChmdW5jdGlvbkZyYWdtZW50KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgZnVuY3Rpb25GcmFnbWVudCA9IHRoaXMuZ2V0RnVuY3Rpb24oZnVuY3Rpb25GcmFnbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdldFN0YXRpYyh0aGlzLmNvbnN0cnVjdG9yLCBcImdldFNpZ2hhc2hcIikoZnVuY3Rpb25GcmFnbWVudCk7XG4gICAgfVxuICAgIC8vIEdldCB0aGUgdG9waWMgKHRoZSBieXRlczMyIGhhc2gpIHVzZWQgYnkgU29saWRpdHkgdG8gaWRlbnRpZnkgYW4gZXZlbnRcbiAgICBnZXRFdmVudFRvcGljKGV2ZW50RnJhZ21lbnQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAoZXZlbnRGcmFnbWVudCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGV2ZW50RnJhZ21lbnQgPSB0aGlzLmdldEV2ZW50KGV2ZW50RnJhZ21lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnZXRTdGF0aWModGhpcy5jb25zdHJ1Y3RvciwgXCJnZXRFdmVudFRvcGljXCIpKGV2ZW50RnJhZ21lbnQpO1xuICAgIH1cbiAgICBfZGVjb2RlUGFyYW1zKHBhcmFtcywgZGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWJpQ29kZXIuZGVjb2RlKHBhcmFtcywgZGF0YSk7XG4gICAgfVxuICAgIF9lbmNvZGVQYXJhbXMocGFyYW1zLCB2YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FiaUNvZGVyLmVuY29kZShwYXJhbXMsIHZhbHVlcyk7XG4gICAgfVxuICAgIGVuY29kZURlcGxveSh2YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuY29kZVBhcmFtcyh0aGlzLmRlcGxveS5pbnB1dHMsIHZhbHVlcyB8fCBbXSk7XG4gICAgfVxuICAgIC8vIERlY29kZSB0aGUgZGF0YSBmb3IgYSBmdW5jdGlvbiBjYWxsIChlLmcuIHR4LmRhdGEpXG4gICAgZGVjb2RlRnVuY3Rpb25EYXRhKGZ1bmN0aW9uRnJhZ21lbnQsIGRhdGEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAoZnVuY3Rpb25GcmFnbWVudCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uRnJhZ21lbnQgPSB0aGlzLmdldEZ1bmN0aW9uKGZ1bmN0aW9uRnJhZ21lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gYXJyYXlpZnkoZGF0YSk7XG4gICAgICAgIGlmIChoZXhsaWZ5KGJ5dGVzLnNsaWNlKDAsIDQpKSAhPT0gdGhpcy5nZXRTaWdoYXNoKGZ1bmN0aW9uRnJhZ21lbnQpKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKGBkYXRhIHNpZ25hdHVyZSBkb2VzIG5vdCBtYXRjaCBmdW5jdGlvbiAke2Z1bmN0aW9uRnJhZ21lbnQubmFtZX0uYCwgXCJkYXRhXCIsIGhleGxpZnkoYnl0ZXMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZGVjb2RlUGFyYW1zKGZ1bmN0aW9uRnJhZ21lbnQuaW5wdXRzLCBieXRlcy5zbGljZSg0KSk7XG4gICAgfVxuICAgIC8vIEVuY29kZSB0aGUgZGF0YSBmb3IgYSBmdW5jdGlvbiBjYWxsIChlLmcuIHR4LmRhdGEpXG4gICAgZW5jb2RlRnVuY3Rpb25EYXRhKGZ1bmN0aW9uRnJhZ21lbnQsIHZhbHVlcykge1xuICAgICAgICBpZiAodHlwZW9mIChmdW5jdGlvbkZyYWdtZW50KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgZnVuY3Rpb25GcmFnbWVudCA9IHRoaXMuZ2V0RnVuY3Rpb24oZnVuY3Rpb25GcmFnbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhleGxpZnkoY29uY2F0KFtcbiAgICAgICAgICAgIHRoaXMuZ2V0U2lnaGFzaChmdW5jdGlvbkZyYWdtZW50KSxcbiAgICAgICAgICAgIHRoaXMuX2VuY29kZVBhcmFtcyhmdW5jdGlvbkZyYWdtZW50LmlucHV0cywgdmFsdWVzIHx8IFtdKVxuICAgICAgICBdKSk7XG4gICAgfVxuICAgIC8vIERlY29kZSB0aGUgcmVzdWx0IGZyb20gYSBmdW5jdGlvbiBjYWxsIChlLmcuIGZyb20gZXRoX2NhbGwpXG4gICAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoZnVuY3Rpb25GcmFnbWVudCwgZGF0YSkge1xuICAgICAgICBpZiAodHlwZW9mIChmdW5jdGlvbkZyYWdtZW50KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgZnVuY3Rpb25GcmFnbWVudCA9IHRoaXMuZ2V0RnVuY3Rpb24oZnVuY3Rpb25GcmFnbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGJ5dGVzID0gYXJyYXlpZnkoZGF0YSk7XG4gICAgICAgIGxldCByZWFzb24gPSBudWxsO1xuICAgICAgICBsZXQgZXJyb3JTaWduYXR1cmUgPSBudWxsO1xuICAgICAgICBzd2l0Y2ggKGJ5dGVzLmxlbmd0aCAlIHRoaXMuX2FiaUNvZGVyLl9nZXRXb3JkU2l6ZSgpKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FiaUNvZGVyLmRlY29kZShmdW5jdGlvbkZyYWdtZW50Lm91dHB1dHMsIGJ5dGVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBpZiAoaGV4bGlmeShieXRlcy5zbGljZSgwLCA0KSkgPT09IFwiMHgwOGMzNzlhMFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yU2lnbmF0dXJlID0gXCJFcnJvcihzdHJpbmcpXCI7XG4gICAgICAgICAgICAgICAgICAgIHJlYXNvbiA9IHRoaXMuX2FiaUNvZGVyLmRlY29kZShbXCJzdHJpbmdcIl0sIGJ5dGVzLnNsaWNlKDQpKVswXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0Vycm9yKFwiY2FsbCByZXZlcnQgZXhjZXB0aW9uXCIsIExvZ2dlci5lcnJvcnMuQ0FMTF9FWENFUFRJT04sIHtcbiAgICAgICAgICAgIG1ldGhvZDogZnVuY3Rpb25GcmFnbWVudC5mb3JtYXQoKSxcbiAgICAgICAgICAgIGVycm9yU2lnbmF0dXJlOiBlcnJvclNpZ25hdHVyZSxcbiAgICAgICAgICAgIGVycm9yQXJnczogW3JlYXNvbl0sXG4gICAgICAgICAgICByZWFzb246IHJlYXNvblxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gRW5jb2RlIHRoZSByZXN1bHQgZm9yIGEgZnVuY3Rpb24gY2FsbCAoZS5nLiBmb3IgZXRoX2NhbGwpXG4gICAgZW5jb2RlRnVuY3Rpb25SZXN1bHQoZnVuY3Rpb25GcmFnbWVudCwgdmFsdWVzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgKGZ1bmN0aW9uRnJhZ21lbnQpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBmdW5jdGlvbkZyYWdtZW50ID0gdGhpcy5nZXRGdW5jdGlvbihmdW5jdGlvbkZyYWdtZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGV4bGlmeSh0aGlzLl9hYmlDb2Rlci5lbmNvZGUoZnVuY3Rpb25GcmFnbWVudC5vdXRwdXRzLCB2YWx1ZXMgfHwgW10pKTtcbiAgICB9XG4gICAgLy8gQ3JlYXRlIHRoZSBmaWx0ZXIgZm9yIHRoZSBldmVudCB3aXRoIHNlYXJjaCBjcml0ZXJpYSAoZS5nLiBmb3IgZXRoX2ZpbHRlckxvZylcbiAgICBlbmNvZGVGaWx0ZXJUb3BpY3MoZXZlbnRGcmFnbWVudCwgdmFsdWVzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgKGV2ZW50RnJhZ21lbnQpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBldmVudEZyYWdtZW50ID0gdGhpcy5nZXRFdmVudChldmVudEZyYWdtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWVzLmxlbmd0aCA+IGV2ZW50RnJhZ21lbnQuaW5wdXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJ0b28gbWFueSBhcmd1bWVudHMgZm9yIFwiICsgZXZlbnRGcmFnbWVudC5mb3JtYXQoKSwgTG9nZ2VyLmVycm9ycy5VTkVYUEVDVEVEX0FSR1VNRU5ULCB7XG4gICAgICAgICAgICAgICAgYXJndW1lbnQ6IFwidmFsdWVzXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRvcGljcyA9IFtdO1xuICAgICAgICBpZiAoIWV2ZW50RnJhZ21lbnQuYW5vbnltb3VzKSB7XG4gICAgICAgICAgICB0b3BpY3MucHVzaCh0aGlzLmdldEV2ZW50VG9waWMoZXZlbnRGcmFnbWVudCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVuY29kZVRvcGljID0gKHBhcmFtLCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHBhcmFtLnR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGFyYW0udHlwZSA9PT0gXCJieXRlc1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtlY2NhazI1NihoZXhsaWZ5KHZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDaGVjayBhZGRyZXNzZXMgYXJlIHZhbGlkXG4gICAgICAgICAgICBpZiAocGFyYW0udHlwZSA9PT0gXCJhZGRyZXNzXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hYmlDb2Rlci5lbmNvZGUoW1wiYWRkcmVzc1wiXSwgW3ZhbHVlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaGV4WmVyb1BhZChoZXhsaWZ5KHZhbHVlKSwgMzIpO1xuICAgICAgICB9O1xuICAgICAgICB2YWx1ZXMuZm9yRWFjaCgodmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBsZXQgcGFyYW0gPSBldmVudEZyYWdtZW50LmlucHV0c1tpbmRleF07XG4gICAgICAgICAgICBpZiAoIXBhcmFtLmluZGV4ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiY2Fubm90IGZpbHRlciBub24taW5kZXhlZCBwYXJhbWV0ZXJzOyBtdXN0IGJlIG51bGxcIiwgKFwiY29udHJhY3QuXCIgKyBwYXJhbS5uYW1lKSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRvcGljcy5wdXNoKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGFyYW0uYmFzZVR5cGUgPT09IFwiYXJyYXlcIiB8fCBwYXJhbS5iYXNlVHlwZSA9PT0gXCJ0dXBsZVwiKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImZpbHRlcmluZyB3aXRoIHR1cGxlcyBvciBhcnJheXMgbm90IHN1cHBvcnRlZFwiLCAoXCJjb250cmFjdC5cIiArIHBhcmFtLm5hbWUpLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHRvcGljcy5wdXNoKHZhbHVlLm1hcCgodmFsdWUpID0+IGVuY29kZVRvcGljKHBhcmFtLCB2YWx1ZSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRvcGljcy5wdXNoKGVuY29kZVRvcGljKHBhcmFtLCB2YWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gVHJpbSBvZmYgdHJhaWxpbmcgbnVsbHNcbiAgICAgICAgd2hpbGUgKHRvcGljcy5sZW5ndGggJiYgdG9waWNzW3RvcGljcy5sZW5ndGggLSAxXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdG9waWNzLnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3BpY3M7XG4gICAgfVxuICAgIGVuY29kZUV2ZW50TG9nKGV2ZW50RnJhZ21lbnQsIHZhbHVlcykge1xuICAgICAgICBpZiAodHlwZW9mIChldmVudEZyYWdtZW50KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgZXZlbnRGcmFnbWVudCA9IHRoaXMuZ2V0RXZlbnQoZXZlbnRGcmFnbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9waWNzID0gW107XG4gICAgICAgIGNvbnN0IGRhdGFUeXBlcyA9IFtdO1xuICAgICAgICBjb25zdCBkYXRhVmFsdWVzID0gW107XG4gICAgICAgIGlmICghZXZlbnRGcmFnbWVudC5hbm9ueW1vdXMpIHtcbiAgICAgICAgICAgIHRvcGljcy5wdXNoKHRoaXMuZ2V0RXZlbnRUb3BpYyhldmVudEZyYWdtZW50KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlcy5sZW5ndGggIT09IGV2ZW50RnJhZ21lbnQuaW5wdXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImV2ZW50IGFyZ3VtZW50cy92YWx1ZXMgbWlzbWF0Y2hcIiwgXCJ2YWx1ZXNcIiwgdmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgICBldmVudEZyYWdtZW50LmlucHV0cy5mb3JFYWNoKChwYXJhbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChwYXJhbS5pbmRleGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtLnR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9waWNzLnB1c2goaWQodmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocGFyYW0udHlwZSA9PT0gXCJieXRlc1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvcGljcy5wdXNoKGtlY2NhazI1Nih2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwYXJhbS5iYXNlVHlwZSA9PT0gXCJ0dXBsZVwiIHx8IHBhcmFtLmJhc2VUeXBlID09PSBcImFycmF5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQFRPT0RcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm90IGltcGxlbWVudGVkXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdG9waWNzLnB1c2godGhpcy5fYWJpQ29kZXIuZW5jb2RlKFtwYXJhbS50eXBlXSwgW3ZhbHVlXSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRhdGFUeXBlcy5wdXNoKHBhcmFtKTtcbiAgICAgICAgICAgICAgICBkYXRhVmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IHRoaXMuX2FiaUNvZGVyLmVuY29kZShkYXRhVHlwZXMsIGRhdGFWYWx1ZXMpLFxuICAgICAgICAgICAgdG9waWNzOiB0b3BpY3NcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gRGVjb2RlIGEgZmlsdGVyIGZvciB0aGUgZXZlbnQgYW5kIHRoZSBzZWFyY2ggY3JpdGVyaWFcbiAgICBkZWNvZGVFdmVudExvZyhldmVudEZyYWdtZW50LCBkYXRhLCB0b3BpY3MpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAoZXZlbnRGcmFnbWVudCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGV2ZW50RnJhZ21lbnQgPSB0aGlzLmdldEV2ZW50KGV2ZW50RnJhZ21lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b3BpY3MgIT0gbnVsbCAmJiAhZXZlbnRGcmFnbWVudC5hbm9ueW1vdXMpIHtcbiAgICAgICAgICAgIGxldCB0b3BpY0hhc2ggPSB0aGlzLmdldEV2ZW50VG9waWMoZXZlbnRGcmFnbWVudCk7XG4gICAgICAgICAgICBpZiAoIWlzSGV4U3RyaW5nKHRvcGljc1swXSwgMzIpIHx8IHRvcGljc1swXS50b0xvd2VyQ2FzZSgpICE9PSB0b3BpY0hhc2gpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImZyYWdtZW50L3RvcGljIG1pc21hdGNoXCIsIExvZ2dlci5lcnJvcnMuSU5WQUxJRF9BUkdVTUVOVCwgeyBhcmd1bWVudDogXCJ0b3BpY3NbMF1cIiwgZXhwZWN0ZWQ6IHRvcGljSGFzaCwgdmFsdWU6IHRvcGljc1swXSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRvcGljcyA9IHRvcGljcy5zbGljZSgxKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgaW5kZXhlZCA9IFtdO1xuICAgICAgICBsZXQgbm9uSW5kZXhlZCA9IFtdO1xuICAgICAgICBsZXQgZHluYW1pYyA9IFtdO1xuICAgICAgICBldmVudEZyYWdtZW50LmlucHV0cy5mb3JFYWNoKChwYXJhbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChwYXJhbS5pbmRleGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtLnR5cGUgPT09IFwic3RyaW5nXCIgfHwgcGFyYW0udHlwZSA9PT0gXCJieXRlc1wiIHx8IHBhcmFtLmJhc2VUeXBlID09PSBcInR1cGxlXCIgfHwgcGFyYW0uYmFzZVR5cGUgPT09IFwiYXJyYXlcIikge1xuICAgICAgICAgICAgICAgICAgICBpbmRleGVkLnB1c2goUGFyYW1UeXBlLmZyb21PYmplY3QoeyB0eXBlOiBcImJ5dGVzMzJcIiwgbmFtZTogcGFyYW0ubmFtZSB9KSk7XG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWMucHVzaCh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ZWQucHVzaChwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWMucHVzaChmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbm9uSW5kZXhlZC5wdXNoKHBhcmFtKTtcbiAgICAgICAgICAgICAgICBkeW5hbWljLnB1c2goZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHJlc3VsdEluZGV4ZWQgPSAodG9waWNzICE9IG51bGwpID8gdGhpcy5fYWJpQ29kZXIuZGVjb2RlKGluZGV4ZWQsIGNvbmNhdCh0b3BpY3MpKSA6IG51bGw7XG4gICAgICAgIGxldCByZXN1bHROb25JbmRleGVkID0gdGhpcy5fYWJpQ29kZXIuZGVjb2RlKG5vbkluZGV4ZWQsIGRhdGEsIHRydWUpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGxldCBub25JbmRleGVkSW5kZXggPSAwLCBpbmRleGVkSW5kZXggPSAwO1xuICAgICAgICBldmVudEZyYWdtZW50LmlucHV0cy5mb3JFYWNoKChwYXJhbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChwYXJhbS5pbmRleGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdEluZGV4ZWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRbaW5kZXhdID0gbmV3IEluZGV4ZWQoeyBfaXNJbmRleGVkOiB0cnVlLCBoYXNoOiBudWxsIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChkeW5hbWljW2luZGV4XSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRbaW5kZXhdID0gbmV3IEluZGV4ZWQoeyBfaXNJbmRleGVkOiB0cnVlLCBoYXNoOiByZXN1bHRJbmRleGVkW2luZGV4ZWRJbmRleCsrXSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbaW5kZXhdID0gcmVzdWx0SW5kZXhlZFtpbmRleGVkSW5kZXgrK107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbaW5kZXhdID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRbaW5kZXhdID0gcmVzdWx0Tm9uSW5kZXhlZFtub25JbmRleGVkSW5kZXgrK107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRbaW5kZXhdID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQWRkIHRoZSBrZXl3b3JkIGFyZ3VtZW50IGlmIG5hbWVkIGFuZCBzYWZlXG4gICAgICAgICAgICBpZiAocGFyYW0ubmFtZSAmJiByZXN1bHRbcGFyYW0ubmFtZV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcmVzdWx0W2luZGV4XTtcbiAgICAgICAgICAgICAgICAvLyBNYWtlIGVycm9yIG5hbWVkIHZhbHVlcyB0aHJvdyBvbiBhY2Nlc3NcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzdWx0LCBwYXJhbS5uYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IHsgdGhyb3cgd3JhcEFjY2Vzc0Vycm9yKGBwcm9wZXJ0eSAke0pTT04uc3RyaW5naWZ5KHBhcmFtLm5hbWUpfWAsIHZhbHVlKTsgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtwYXJhbS5uYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIE1ha2UgYWxsIGVycm9yIGluZGV4ZWQgdmFsdWVzIHRocm93IG9uIGFjY2Vzc1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSByZXN1bHRbaV07XG4gICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXN1bHQsIGksIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiB7IHRocm93IHdyYXBBY2Nlc3NFcnJvcihgaW5kZXggJHtpfWAsIHZhbHVlKTsgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3QuZnJlZXplKHJlc3VsdCk7XG4gICAgfVxuICAgIC8vIEdpdmVuIGEgdHJhbnNhY3Rpb24sIGZpbmQgdGhlIG1hdGNoaW5nIGZ1bmN0aW9uIGZyYWdtZW50IChpZiBhbnkpIGFuZFxuICAgIC8vIGRldGVybWluZSBhbGwgaXRzIHByb3BlcnRpZXMgYW5kIGNhbGwgcGFyYW1ldGVyc1xuICAgIHBhcnNlVHJhbnNhY3Rpb24odHgpIHtcbiAgICAgICAgbGV0IGZyYWdtZW50ID0gdGhpcy5nZXRGdW5jdGlvbih0eC5kYXRhLnN1YnN0cmluZygwLCAxMCkudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIGlmICghZnJhZ21lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgVHJhbnNhY3Rpb25EZXNjcmlwdGlvbih7XG4gICAgICAgICAgICBhcmdzOiB0aGlzLl9hYmlDb2Rlci5kZWNvZGUoZnJhZ21lbnQuaW5wdXRzLCBcIjB4XCIgKyB0eC5kYXRhLnN1YnN0cmluZygxMCkpLFxuICAgICAgICAgICAgZnVuY3Rpb25GcmFnbWVudDogZnJhZ21lbnQsXG4gICAgICAgICAgICBuYW1lOiBmcmFnbWVudC5uYW1lLFxuICAgICAgICAgICAgc2lnbmF0dXJlOiBmcmFnbWVudC5mb3JtYXQoKSxcbiAgICAgICAgICAgIHNpZ2hhc2g6IHRoaXMuZ2V0U2lnaGFzaChmcmFnbWVudCksXG4gICAgICAgICAgICB2YWx1ZTogQmlnTnVtYmVyLmZyb20odHgudmFsdWUgfHwgXCIwXCIpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gR2l2ZW4gYW4gZXZlbnQgbG9nLCBmaW5kIHRoZSBtYXRjaGluZyBldmVudCBmcmFnbWVudCAoaWYgYW55KSBhbmRcbiAgICAvLyBkZXRlcm1pbmUgYWxsIGl0cyBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXNcbiAgICBwYXJzZUxvZyhsb2cpIHtcbiAgICAgICAgbGV0IGZyYWdtZW50ID0gdGhpcy5nZXRFdmVudChsb2cudG9waWNzWzBdKTtcbiAgICAgICAgaWYgKCFmcmFnbWVudCB8fCBmcmFnbWVudC5hbm9ueW1vdXMpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIEBUT0RPOiBJZiBhbm9ueW1vdXMsIGFuZCB0aGUgb25seSBtZXRob2QsIGFuZCB0aGUgaW5wdXQgY291bnQgbWF0Y2hlcywgc2hvdWxkIHdlIHBhcnNlP1xuICAgICAgICAvLyAgICAgICAgUHJvYmFibHkgbm90LCBiZWNhdXNlIGp1c3QgYmVjYXVzZSBpdCBpcyB0aGUgb25seSBldmVudCBpbiB0aGUgQUJJIGRvZXNcbiAgICAgICAgLy8gICAgICAgIG5vdCBtZWFuIHdlIGhhdmUgdGhlIGZ1bGwgQUJJOyBtYXliZSBqc3V0IGEgZnJhZ21lbnQ/XG4gICAgICAgIHJldHVybiBuZXcgTG9nRGVzY3JpcHRpb24oe1xuICAgICAgICAgICAgZXZlbnRGcmFnbWVudDogZnJhZ21lbnQsXG4gICAgICAgICAgICBuYW1lOiBmcmFnbWVudC5uYW1lLFxuICAgICAgICAgICAgc2lnbmF0dXJlOiBmcmFnbWVudC5mb3JtYXQoKSxcbiAgICAgICAgICAgIHRvcGljOiB0aGlzLmdldEV2ZW50VG9waWMoZnJhZ21lbnQpLFxuICAgICAgICAgICAgYXJnczogdGhpcy5kZWNvZGVFdmVudExvZyhmcmFnbWVudCwgbG9nLmRhdGEsIGxvZy50b3BpY3MpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKlxuICAgIHN0YXRpYyBmcm9tKHZhbHVlOiBBcnJheTxGcmFnbWVudCB8IHN0cmluZyB8IEpzb25BYmk+IHwgc3RyaW5nIHwgSW50ZXJmYWNlKSB7XG4gICAgICAgIGlmIChJbnRlcmZhY2UuaXNJbnRlcmZhY2UodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZih2YWx1ZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW50ZXJmYWNlKEpTT04ucGFyc2UodmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEludGVyZmFjZSh2YWx1ZSk7XG4gICAgfVxuICAgICovXG4gICAgc3RhdGljIGlzSW50ZXJmYWNlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5faXNJbnRlcmZhY2UpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVyZmFjZS5qcy5tYXAiLCIvKlxuICAgIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiAgICB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiAgICB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAgICBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuLyoqXG4gKiBAZmlsZSBjb250cmFjdC5qc1xuICpcbiAqIFRvIGluaXRpYWxpemUgYSBjb250cmFjdCB1c2U6XG4gKlxuICogIHZhciBDb250cmFjdCA9IHJlcXVpcmUoJ3dlYjMtZXRoLWNvbnRyYWN0Jyk7XG4gKiAgQ29udHJhY3Quc2V0UHJvdmlkZXIoJ3dzOi8vbG9jYWxob3N0Ojg1NDYnKTtcbiAqICB2YXIgY29udHJhY3QgPSBuZXcgQ29udHJhY3QoYWJpLCBhZGRyZXNzLCAuLi4pO1xuICpcbiAqIEBhdXRob3IgRmFiaWFuIFZvZ2Vsc3RlbGxlciA8ZmFiaWFuQGV0aGVyZXVtLm9yZz5cbiAqIEBkYXRlIDIwMTdcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgY29yZSA9IHJlcXVpcmUoJ3dlYjMtY29yZScpO1xudmFyIE1ldGhvZCA9IHJlcXVpcmUoJ3dlYjMtY29yZS1tZXRob2QnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJ3dlYjMtdXRpbHMnKTtcbnZhciBTdWJzY3JpcHRpb24gPSByZXF1aXJlKCd3ZWIzLWNvcmUtc3Vic2NyaXB0aW9ucycpLnN1YnNjcmlwdGlvbjtcbnZhciBmb3JtYXR0ZXJzID0gcmVxdWlyZSgnd2ViMy1jb3JlLWhlbHBlcnMnKS5mb3JtYXR0ZXJzO1xudmFyIGVycm9ycyA9IHJlcXVpcmUoJ3dlYjMtY29yZS1oZWxwZXJzJykuZXJyb3JzO1xudmFyIHByb21pRXZlbnQgPSByZXF1aXJlKCd3ZWIzLWNvcmUtcHJvbWlldmVudCcpO1xudmFyIGFiaSA9IHJlcXVpcmUoJ3dlYjMtZXRoLWFiaScpO1xuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIGNyZWF0ZSBuZXcgY29udHJhY3QgaW5zdGFuY2VcbiAqXG4gKiBAbWV0aG9kIENvbnRyYWN0XG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IGpzb25JbnRlcmZhY2VcbiAqIEBwYXJhbSB7U3RyaW5nfSBhZGRyZXNzXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICovXG52YXIgQ29udHJhY3QgPSBmdW5jdGlvbiBDb250cmFjdChqc29uSW50ZXJmYWNlLCBhZGRyZXNzLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcywgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIENvbnRyYWN0KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BsZWFzZSB1c2UgdGhlIFwibmV3XCIga2V5d29yZCB0byBpbnN0YW50aWF0ZSBhIHdlYjMuZXRoLkNvbnRyYWN0KCkgb2JqZWN0IScpO1xuICAgIH1cbiAgICB0aGlzLnNldFByb3ZpZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb3JlLnBhY2thZ2VJbml0KF90aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBfdGhpcy5jbGVhclN1YnNjcmlwdGlvbnMgPSBfdGhpcy5fcmVxdWVzdE1hbmFnZXIuY2xlYXJTdWJzY3JpcHRpb25zO1xuICAgIH07XG4gICAgLy8gc2V0cyBfcmVxdWVzdG1hbmFnZXJcbiAgICBjb3JlLnBhY2thZ2VJbml0KHRoaXMsIFt0aGlzLmNvbnN0cnVjdG9yXSk7XG4gICAgdGhpcy5jbGVhclN1YnNjcmlwdGlvbnMgPSB0aGlzLl9yZXF1ZXN0TWFuYWdlci5jbGVhclN1YnNjcmlwdGlvbnM7XG4gICAgaWYgKCFqc29uSW50ZXJmYWNlIHx8ICEoQXJyYXkuaXNBcnJheShqc29uSW50ZXJmYWNlKSkpIHtcbiAgICAgICAgdGhyb3cgZXJyb3JzLkNvbnRyYWN0TWlzc2luZ0FCSUVycm9yKCk7XG4gICAgfVxuICAgIC8vIGNyZWF0ZSB0aGUgb3B0aW9ucyBvYmplY3RcbiAgICB0aGlzLm9wdGlvbnMgPSB7fTtcbiAgICB2YXIgbGFzdEFyZyA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcbiAgICBpZiAoISFsYXN0QXJnICYmIHR5cGVvZiBsYXN0QXJnID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShsYXN0QXJnKSkge1xuICAgICAgICBvcHRpb25zID0gbGFzdEFyZztcbiAgICAgICAgdGhpcy5vcHRpb25zID0geyAuLi50aGlzLm9wdGlvbnMsIC4uLnRoaXMuX2dldE9yU2V0RGVmYXVsdE9wdGlvbnMob3B0aW9ucykgfTtcbiAgICAgICAgaWYgKCEhYWRkcmVzcyAmJiB0eXBlb2YgYWRkcmVzcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGFkZHJlc3MgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIHNldCBhZGRyZXNzXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMub3B0aW9ucywgJ2FkZHJlc3MnLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fYWRkcmVzcyA9IHV0aWxzLnRvQ2hlY2tzdW1BZGRyZXNzKGZvcm1hdHRlcnMuaW5wdXRBZGRyZXNzRm9ybWF0dGVyKHZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9hZGRyZXNzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLy8gYWRkIG1ldGhvZCBhbmQgZXZlbnQgc2lnbmF0dXJlcywgd2hlbiB0aGUganNvbkludGVyZmFjZSBnZXRzIHNldFxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLm9wdGlvbnMsICdqc29uSW50ZXJmYWNlJywge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgX3RoaXMubWV0aG9kcyA9IHt9O1xuICAgICAgICAgICAgX3RoaXMuZXZlbnRzID0ge307XG4gICAgICAgICAgICBfdGhpcy5fanNvbkludGVyZmFjZSA9IHZhbHVlLm1hcChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZ1bmMsIGZ1bmNOYW1lO1xuICAgICAgICAgICAgICAgIC8vIG1ha2UgY29uc3RhbnQgYW5kIHBheWFibGUgYmFja3dhcmRzIGNvbXBhdGlibGVcbiAgICAgICAgICAgICAgICBtZXRob2QuY29uc3RhbnQgPSAobWV0aG9kLnN0YXRlTXV0YWJpbGl0eSA9PT0gXCJ2aWV3XCIgfHwgbWV0aG9kLnN0YXRlTXV0YWJpbGl0eSA9PT0gXCJwdXJlXCIgfHwgbWV0aG9kLmNvbnN0YW50KTtcbiAgICAgICAgICAgICAgICBtZXRob2QucGF5YWJsZSA9IChtZXRob2Quc3RhdGVNdXRhYmlsaXR5ID09PSBcInBheWFibGVcIiB8fCBtZXRob2QucGF5YWJsZSk7XG4gICAgICAgICAgICAgICAgaWYgKG1ldGhvZC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmNOYW1lID0gdXRpbHMuX2pzb25JbnRlcmZhY2VNZXRob2RUb1N0cmluZyhtZXRob2QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBmdW5jdGlvblxuICAgICAgICAgICAgICAgIGlmIChtZXRob2QudHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Quc2lnbmF0dXJlID0gYWJpLmVuY29kZUZ1bmN0aW9uU2lnbmF0dXJlKGZ1bmNOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuYyA9IF90aGlzLl9jcmVhdGVUeE9iamVjdC5iaW5kKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBfdGhpc1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkIG1ldGhvZCBvbmx5IGlmIG5vdCBvbmUgYWxyZWFkeSBleGlzdHNcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5tZXRob2RzW21ldGhvZC5uYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubWV0aG9kc1ttZXRob2QubmFtZV0gPSBmdW5jO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhc2NhZGVGdW5jID0gX3RoaXMuX2NyZWF0ZVR4T2JqZWN0LmJpbmQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudDogX3RoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE1ldGhvZDogX3RoaXMubWV0aG9kc1ttZXRob2QubmFtZV1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubWV0aG9kc1ttZXRob2QubmFtZV0gPSBjYXNjYWRlRnVuYztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBkZWZpbml0ZWx5IGFkZCB0aGUgbWV0aG9kIGJhc2VkIG9uIGl0cyBzaWduYXR1cmVcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubWV0aG9kc1ttZXRob2Quc2lnbmF0dXJlXSA9IGZ1bmM7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZCBtZXRob2QgYnkgbmFtZVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5tZXRob2RzW2Z1bmNOYW1lXSA9IGZ1bmM7XG4gICAgICAgICAgICAgICAgICAgIC8vIGV2ZW50XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1ldGhvZC50eXBlID09PSAnZXZlbnQnKSB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZC5zaWduYXR1cmUgPSBhYmkuZW5jb2RlRXZlbnRTaWduYXR1cmUoZnVuY05hbWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSBfdGhpcy5fb24uYmluZChfdGhpcywgbWV0aG9kLnNpZ25hdHVyZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZCBtZXRob2Qgb25seSBpZiBub3QgYWxyZWFkeSBleGlzdHNcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5ldmVudHNbbWV0aG9kLm5hbWVdIHx8IF90aGlzLmV2ZW50c1ttZXRob2QubmFtZV0ubmFtZSA9PT0gJ2JvdW5kICcpXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5ldmVudHNbbWV0aG9kLm5hbWVdID0gZXZlbnQ7XG4gICAgICAgICAgICAgICAgICAgIC8vIGRlZmluaXRlbHkgYWRkIHRoZSBtZXRob2QgYmFzZWQgb24gaXRzIHNpZ25hdHVyZVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5ldmVudHNbbWV0aG9kLnNpZ25hdHVyZV0gPSBldmVudDtcbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkIGV2ZW50IGJ5IG5hbWVcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZXZlbnRzW2Z1bmNOYW1lXSA9IGV2ZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbWV0aG9kO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBhZGQgYWxsRXZlbnRzXG4gICAgICAgICAgICBfdGhpcy5ldmVudHMuYWxsRXZlbnRzID0gX3RoaXMuX29uLmJpbmQoX3RoaXMsICdhbGxldmVudHMnKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5fanNvbkludGVyZmFjZTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuX2pzb25JbnRlcmZhY2U7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvLyBnZXQgZGVmYXVsdCBhY2NvdW50IGZyb20gdGhlIENsYXNzXG4gICAgdmFyIGRlZmF1bHRBY2NvdW50ID0gdGhpcy5jb25zdHJ1Y3Rvci5kZWZhdWx0QWNjb3VudDtcbiAgICB2YXIgZGVmYXVsdEJsb2NrID0gdGhpcy5jb25zdHJ1Y3Rvci5kZWZhdWx0QmxvY2sgfHwgJ2xhdGVzdCc7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdoYW5kbGVSZXZlcnQnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuaGFuZGxlUmV2ZXJ0ID09PSBmYWxzZSB8fCBfdGhpcy5vcHRpb25zLmhhbmRsZVJldmVydCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5vcHRpb25zLmhhbmRsZVJldmVydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmhhbmRsZVJldmVydDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICBfdGhpcy5vcHRpb25zLmhhbmRsZVJldmVydCA9IHZhbDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZGVmYXVsdENvbW1vbicsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMub3B0aW9ucy5jb21tb24gfHwgdGhpcy5jb25zdHJ1Y3Rvci5kZWZhdWx0Q29tbW9uO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIF90aGlzLm9wdGlvbnMuY29tbW9uID0gdmFsO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdkZWZhdWx0SGFyZGZvcmsnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLm9wdGlvbnMuaGFyZGZvcmsgfHwgdGhpcy5jb25zdHJ1Y3Rvci5kZWZhdWx0SGFyZGZvcms7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgX3RoaXMub3B0aW9ucy5oYXJkZm9yayA9IHZhbDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZGVmYXVsdENoYWluJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5vcHRpb25zLmNoYWluIHx8IHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdENoYWluO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIF90aGlzLm9wdGlvbnMuY2hhaW4gPSB2YWw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3RyYW5zYWN0aW9uUG9sbGluZ1RpbWVvdXQnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMudHJhbnNhY3Rpb25Qb2xsaW5nVGltZW91dCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5vcHRpb25zLnRyYW5zYWN0aW9uUG9sbGluZ1RpbWVvdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMub3B0aW9ucy50cmFuc2FjdGlvblBvbGxpbmdUaW1lb3V0IHx8IHRoaXMuY29uc3RydWN0b3IudHJhbnNhY3Rpb25Qb2xsaW5nVGltZW91dDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICBfdGhpcy5vcHRpb25zLnRyYW5zYWN0aW9uUG9sbGluZ1RpbWVvdXQgPSB2YWw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3RyYW5zYWN0aW9uQ29uZmlybWF0aW9uQmxvY2tzJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLnRyYW5zYWN0aW9uQ29uZmlybWF0aW9uQmxvY2tzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLm9wdGlvbnMudHJhbnNhY3Rpb25Db25maXJtYXRpb25CbG9ja3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMub3B0aW9ucy50cmFuc2FjdGlvbkNvbmZpcm1hdGlvbkJsb2NrcyB8fCB0aGlzLmNvbnN0cnVjdG9yLnRyYW5zYWN0aW9uQ29uZmlybWF0aW9uQmxvY2tzO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIF90aGlzLm9wdGlvbnMudHJhbnNhY3Rpb25Db25maXJtYXRpb25CbG9ja3MgPSB2YWw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3RyYW5zYWN0aW9uQmxvY2tUaW1lb3V0Jywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLnRyYW5zYWN0aW9uQmxvY2tUaW1lb3V0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLm9wdGlvbnMudHJhbnNhY3Rpb25CbG9ja1RpbWVvdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMub3B0aW9ucy50cmFuc2FjdGlvbkJsb2NrVGltZW91dCB8fCB0aGlzLmNvbnN0cnVjdG9yLnRyYW5zYWN0aW9uQmxvY2tUaW1lb3V0O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIF90aGlzLm9wdGlvbnMudHJhbnNhY3Rpb25CbG9ja1RpbWVvdXQgPSB2YWw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2Jsb2NrSGVhZGVyVGltZW91dCcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5ibG9ja0hlYWRlclRpbWVvdXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMub3B0aW9ucy5ibG9ja0hlYWRlclRpbWVvdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMub3B0aW9ucy5ibG9ja0hlYWRlclRpbWVvdXQgfHwgdGhpcy5jb25zdHJ1Y3Rvci5ibG9ja0hlYWRlclRpbWVvdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgX3RoaXMub3B0aW9ucy5ibG9ja0hlYWRlclRpbWVvdXQgPSB2YWw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2RlZmF1bHRBY2NvdW50Jywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0QWNjb3VudDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdEFjY291bnQgPSB1dGlscy50b0NoZWNrc3VtQWRkcmVzcyhmb3JtYXR0ZXJzLmlucHV0QWRkcmVzc0Zvcm1hdHRlcih2YWwpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2RlZmF1bHRCbG9jaycsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdEJsb2NrO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIGRlZmF1bHRCbG9jayA9IHZhbDtcbiAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvLyBwcm9wZXJ0aWVzXG4gICAgdGhpcy5tZXRob2RzID0ge307XG4gICAgdGhpcy5ldmVudHMgPSB7fTtcbiAgICB0aGlzLl9hZGRyZXNzID0gbnVsbDtcbiAgICB0aGlzLl9qc29uSW50ZXJmYWNlID0gW107XG4gICAgLy8gc2V0IGdldHRlci9zZXR0ZXIgcHJvcGVydGllc1xuICAgIHRoaXMub3B0aW9ucy5hZGRyZXNzID0gYWRkcmVzcztcbiAgICB0aGlzLm9wdGlvbnMuanNvbkludGVyZmFjZSA9IGpzb25JbnRlcmZhY2U7XG59O1xuLyoqXG4gKiBTZXRzIHRoZSBuZXcgcHJvdmlkZXIsIGNyZWF0ZXMgYSBuZXcgcmVxdWVzdE1hbmFnZXIsIHJlZ2lzdGVycyB0aGUgXCJkYXRhXCIgbGlzdGVuZXIgb24gdGhlIHByb3ZpZGVyIGFuZCBzZXRzIHRoZVxuICogYWNjb3VudHMgbW9kdWxlIGZvciB0aGUgQ29udHJhY3QgY2xhc3MuXG4gKlxuICogQG1ldGhvZCBzZXRQcm92aWRlclxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfHByb3ZpZGVyfSBwcm92aWRlclxuICogQHBhcmFtIHtBY2NvdW50c30gYWNjb3VudHNcbiAqXG4gKiBAcmV0dXJucyB2b2lkXG4gKi9cbkNvbnRyYWN0LnNldFByb3ZpZGVyID0gZnVuY3Rpb24gKHByb3ZpZGVyLCBhY2NvdW50cykge1xuICAgIC8vIENvbnRyYWN0LmN1cnJlbnRQcm92aWRlciA9IHByb3ZpZGVyO1xuICAgIGNvcmUucGFja2FnZUluaXQodGhpcywgW3Byb3ZpZGVyXSk7XG4gICAgdGhpcy5fZXRoQWNjb3VudHMgPSBhY2NvdW50cztcbn07XG4vKipcbiAqIEdldCB0aGUgY2FsbGJhY2sgYW5kIG1vZGlmeSB0aGUgYXJyYXkgaWYgbmVjZXNzYXJ5XG4gKlxuICogQG1ldGhvZCBfZ2V0Q2FsbGJhY2tcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3NcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSB0aGUgY2FsbGJhY2tcbiAqL1xuQ29udHJhY3QucHJvdG90eXBlLl9nZXRDYWxsYmFjayA9IGZ1bmN0aW9uIGdldENhbGxiYWNrKGFyZ3MpIHtcbiAgICBpZiAoYXJncyAmJiAhIWFyZ3NbYXJncy5sZW5ndGggLSAxXSAmJiB0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBhcmdzLnBvcCgpOyAvLyBtb2RpZnkgdGhlIGFyZ3MgYXJyYXkhXG4gICAgfVxufTtcbi8qKlxuICogQ2hlY2tzIHRoYXQgbm8gbGlzdGVuZXIgd2l0aCBuYW1lIFwibmV3TGlzdGVuZXJcIiBvciBcInJlbW92ZUxpc3RlbmVyXCIgaXMgYWRkZWQuXG4gKlxuICogQG1ldGhvZCBfY2hlY2tMaXN0ZW5lclxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHJldHVybiB7T2JqZWN0fSB0aGUgY29udHJhY3QgaW5zdGFuY2VcbiAqL1xuQ29udHJhY3QucHJvdG90eXBlLl9jaGVja0xpc3RlbmVyID0gZnVuY3Rpb24gKHR5cGUsIGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50ID09PSB0eXBlKSB7XG4gICAgICAgIHRocm93IGVycm9ycy5Db250cmFjdFJlc2VydmVkRXZlbnRFcnJvcih0eXBlKTtcbiAgICB9XG59O1xuLyoqXG4gKiBVc2UgZGVmYXVsdCB2YWx1ZXMsIGlmIG9wdGlvbnMgYXJlIG5vdCBhdmFpbGFibGVcbiAqXG4gKiBAbWV0aG9kIF9nZXRPclNldERlZmF1bHRPcHRpb25zXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyB0aGUgb3B0aW9ucyBnaXZlZCBieSB0aGUgdXNlclxuICogQHJldHVybiB7T2JqZWN0fSB0aGUgb3B0aW9ucyB3aXRoIGdhcHMgZmlsbGVkIGJ5IGRlZmF1bHRzXG4gKi9cbkNvbnRyYWN0LnByb3RvdHlwZS5fZ2V0T3JTZXREZWZhdWx0T3B0aW9ucyA9IGZ1bmN0aW9uIGdldE9yU2V0RGVmYXVsdE9wdGlvbnMob3B0aW9ucykge1xuICAgIHZhciBnYXNQcmljZSA9IG9wdGlvbnMuZ2FzUHJpY2UgPyBTdHJpbmcob3B0aW9ucy5nYXNQcmljZSkgOiBudWxsO1xuICAgIHZhciBmcm9tID0gb3B0aW9ucy5mcm9tID8gdXRpbHMudG9DaGVja3N1bUFkZHJlc3MoZm9ybWF0dGVycy5pbnB1dEFkZHJlc3NGb3JtYXR0ZXIob3B0aW9ucy5mcm9tKSkgOiBudWxsO1xuICAgIG9wdGlvbnMuZGF0YSA9IG9wdGlvbnMuZGF0YSB8fCB0aGlzLm9wdGlvbnMuZGF0YTtcbiAgICBvcHRpb25zLmZyb20gPSBmcm9tIHx8IHRoaXMub3B0aW9ucy5mcm9tO1xuICAgIG9wdGlvbnMuZ2FzUHJpY2UgPSBnYXNQcmljZSB8fCB0aGlzLm9wdGlvbnMuZ2FzUHJpY2U7XG4gICAgb3B0aW9ucy5nYXMgPSBvcHRpb25zLmdhcyB8fCBvcHRpb25zLmdhc0xpbWl0IHx8IHRoaXMub3B0aW9ucy5nYXM7XG4gICAgLy8gVE9ETyByZXBsYWNlIHdpdGggb25seSBnYXNMaW1pdD9cbiAgICBkZWxldGUgb3B0aW9ucy5nYXNMaW1pdDtcbiAgICByZXR1cm4gb3B0aW9ucztcbn07XG4vKipcbiAqIFNob3VsZCBiZSB1c2VkIHRvIGVuY29kZSBpbmRleGVkIHBhcmFtcyBhbmQgb3B0aW9ucyB0byBvbmUgZmluYWwgb2JqZWN0XG4gKlxuICogQG1ldGhvZCBfZW5jb2RlRXZlbnRBQklcbiAqIEBwYXJhbSB7T2JqZWN0fSBldmVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge09iamVjdH0gZXZlcnl0aGluZyBjb21iaW5lZCB0b2dldGhlciBhbmQgZW5jb2RlZFxuICovXG5Db250cmFjdC5wcm90b3R5cGUuX2VuY29kZUV2ZW50QUJJID0gZnVuY3Rpb24gKGV2ZW50LCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgdmFyIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyIHx8IHt9LCByZXN1bHQgPSB7fTtcbiAgICBbJ2Zyb21CbG9jaycsICd0b0Jsb2NrJ10uZmlsdGVyKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zW2ZdICE9PSB1bmRlZmluZWQ7XG4gICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoZikge1xuICAgICAgICByZXN1bHRbZl0gPSBmb3JtYXR0ZXJzLmlucHV0QmxvY2tOdW1iZXJGb3JtYXR0ZXIob3B0aW9uc1tmXSk7XG4gICAgfSk7XG4gICAgLy8gdXNlIGdpdmVuIHRvcGljc1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMudG9waWNzKSkge1xuICAgICAgICByZXN1bHQudG9waWNzID0gb3B0aW9ucy50b3BpY3M7XG4gICAgICAgIC8vIGNyZWF0ZSB0b3BpY3MgYmFzZWQgb24gZmlsdGVyXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXN1bHQudG9waWNzID0gW107XG4gICAgICAgIC8vIGFkZCBldmVudCBzaWduYXR1cmVcbiAgICAgICAgaWYgKGV2ZW50ICYmICFldmVudC5hbm9ueW1vdXMgJiYgZXZlbnQubmFtZSAhPT0gJ0FMTEVWRU5UUycpIHtcbiAgICAgICAgICAgIHJlc3VsdC50b3BpY3MucHVzaChldmVudC5zaWduYXR1cmUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGFkZCBldmVudCB0b3BpY3MgKGluZGV4ZWQgYXJndW1lbnRzKVxuICAgICAgICBpZiAoZXZlbnQubmFtZSAhPT0gJ0FMTEVWRU5UUycpIHtcbiAgICAgICAgICAgIHZhciBpbmRleGVkVG9waWNzID0gZXZlbnQuaW5wdXRzLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpLmluZGV4ZWQgPT09IHRydWU7XG4gICAgICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBmaWx0ZXJbaS5uYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vd2ViMy5qcy9pc3N1ZXMvMzQ0XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogZGVhbCBwcm9wZXJseSB3aXRoIGNvbXBvbmVudHNcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLm1hcChmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFiaS5lbmNvZGVQYXJhbWV0ZXIoaS50eXBlLCB2KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhYmkuZW5jb2RlUGFyYW1ldGVyKGkudHlwZSwgdmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXN1bHQudG9waWNzID0gcmVzdWx0LnRvcGljcy5jb25jYXQoaW5kZXhlZFRvcGljcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXN1bHQudG9waWNzLmxlbmd0aClcbiAgICAgICAgICAgIGRlbGV0ZSByZXN1bHQudG9waWNzO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLmFkZHJlc3MpIHtcbiAgICAgICAgcmVzdWx0LmFkZHJlc3MgPSB0aGlzLm9wdGlvbnMuYWRkcmVzcy50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbi8qKlxuICogU2hvdWxkIGJlIHVzZWQgdG8gZGVjb2RlIGluZGV4ZWQgcGFyYW1zIGFuZCBvcHRpb25zXG4gKlxuICogQG1ldGhvZCBfZGVjb2RlRXZlbnRBQklcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJlc3VsdCBvYmplY3Qgd2l0aCBkZWNvZGVkIGluZGV4ZWQgJiYgbm90IGluZGV4ZWQgcGFyYW1zXG4gKi9cbkNvbnRyYWN0LnByb3RvdHlwZS5fZGVjb2RlRXZlbnRBQkkgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciBldmVudCA9IHRoaXM7XG4gICAgZGF0YS5kYXRhID0gZGF0YS5kYXRhIHx8ICcnO1xuICAgIGRhdGEudG9waWNzID0gZGF0YS50b3BpY3MgfHwgW107XG4gICAgdmFyIHJlc3VsdCA9IGZvcm1hdHRlcnMub3V0cHV0TG9nRm9ybWF0dGVyKGRhdGEpO1xuICAgIC8vIGlmIGFsbEV2ZW50cyBnZXQgdGhlIHJpZ2h0IGV2ZW50XG4gICAgaWYgKGV2ZW50Lm5hbWUgPT09ICdBTExFVkVOVFMnKSB7XG4gICAgICAgIGV2ZW50ID0gZXZlbnQuanNvbkludGVyZmFjZS5maW5kKGZ1bmN0aW9uIChpbnRmKSB7XG4gICAgICAgICAgICByZXR1cm4gKGludGYuc2lnbmF0dXJlID09PSBkYXRhLnRvcGljc1swXSk7XG4gICAgICAgIH0pIHx8IHsgYW5vbnltb3VzOiB0cnVlIH07XG4gICAgfVxuICAgIC8vIGNyZWF0ZSBlbXB0eSBpbnB1dHMgaWYgbm9uZSBhcmUgcHJlc2VudCAoZS5nLiBhbm9ueW1vdXMgZXZlbnRzIG9uIGFsbEV2ZW50cylcbiAgICBldmVudC5pbnB1dHMgPSBldmVudC5pbnB1dHMgfHwgW107XG4gICAgLy8gSGFuZGxlIGNhc2Ugd2hlcmUgYW4gZXZlbnQgc2lnbmF0dXJlIHNoYWRvd3MgdGhlIGN1cnJlbnQgQUJJIHdpdGggbm9uLWlkZW50aWNhbFxuICAgIC8vIGFyZyBpbmRleGluZy4gSWYgIyBvZiB0b3BpY3MgZG9lc24ndCBtYXRjaCwgZXZlbnQgaXMgYW5vbi5cbiAgICBpZiAoIWV2ZW50LmFub255bW91cykge1xuICAgICAgICBsZXQgaW5kZXhlZElucHV0cyA9IDA7XG4gICAgICAgIGV2ZW50LmlucHV0cy5mb3JFYWNoKGlucHV0ID0+IGlucHV0LmluZGV4ZWQgPyBpbmRleGVkSW5wdXRzKysgOiBudWxsKTtcbiAgICAgICAgaWYgKGluZGV4ZWRJbnB1dHMgPiAwICYmIChkYXRhLnRvcGljcy5sZW5ndGggIT09IGluZGV4ZWRJbnB1dHMgKyAxKSkge1xuICAgICAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgICAgICAgYW5vbnltb3VzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGlucHV0czogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGFyZ1RvcGljcyA9IGV2ZW50LmFub255bW91cyA/IGRhdGEudG9waWNzIDogZGF0YS50b3BpY3Muc2xpY2UoMSk7XG4gICAgcmVzdWx0LnJldHVyblZhbHVlcyA9IGFiaS5kZWNvZGVMb2coZXZlbnQuaW5wdXRzLCBkYXRhLmRhdGEsIGFyZ1RvcGljcyk7XG4gICAgZGVsZXRlIHJlc3VsdC5yZXR1cm5WYWx1ZXMuX19sZW5ndGhfXztcbiAgICAvLyBhZGQgbmFtZVxuICAgIHJlc3VsdC5ldmVudCA9IGV2ZW50Lm5hbWU7XG4gICAgLy8gYWRkIHNpZ25hdHVyZVxuICAgIHJlc3VsdC5zaWduYXR1cmUgPSAoZXZlbnQuYW5vbnltb3VzIHx8ICFkYXRhLnRvcGljc1swXSkgPyBudWxsIDogZGF0YS50b3BpY3NbMF07XG4gICAgLy8gbW92ZSB0aGUgZGF0YSBhbmQgdG9waWNzIHRvIFwicmF3XCJcbiAgICByZXN1bHQucmF3ID0ge1xuICAgICAgICBkYXRhOiByZXN1bHQuZGF0YSxcbiAgICAgICAgdG9waWNzOiByZXN1bHQudG9waWNzXG4gICAgfTtcbiAgICBkZWxldGUgcmVzdWx0LmRhdGE7XG4gICAgZGVsZXRlIHJlc3VsdC50b3BpY3M7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG4vKipcbiAqIEVuY29kZXMgYW4gQUJJIGZvciBhIG1ldGhvZCwgaW5jbHVkaW5nIHNpZ25hdHVyZSBvciB0aGUgbWV0aG9kLlxuICogT3Igd2hlbiBjb25zdHJ1Y3RvciBlbmNvZGVzIG9ubHkgdGhlIGNvbnN0cnVjdG9yIHBhcmFtZXRlcnMuXG4gKlxuICogQG1ldGhvZCBfZW5jb2RlTWV0aG9kQUJJXG4gKiBAcGFyYW0ge01peGVkfSBhcmdzIHRoZSBhcmd1bWVudHMgdG8gZW5jb2RlXG4gKiBAcGFyYW0ge1N0cmluZ30gdGhlIGVuY29kZWQgQUJJXG4gKi9cbkNvbnRyYWN0LnByb3RvdHlwZS5fZW5jb2RlTWV0aG9kQUJJID0gZnVuY3Rpb24gX2VuY29kZU1ldGhvZEFCSSgpIHtcbiAgICB2YXIgbWV0aG9kU2lnbmF0dXJlID0gdGhpcy5fbWV0aG9kLnNpZ25hdHVyZSwgYXJncyA9IHRoaXMuYXJndW1lbnRzIHx8IFtdO1xuICAgIHZhciBzaWduYXR1cmUgPSBmYWxzZSwgcGFyYW1zQUJJID0gdGhpcy5fcGFyZW50Lm9wdGlvbnMuanNvbkludGVyZmFjZS5maWx0ZXIoZnVuY3Rpb24gKGpzb24pIHtcbiAgICAgICAgcmV0dXJuICgobWV0aG9kU2lnbmF0dXJlID09PSAnY29uc3RydWN0b3InICYmIGpzb24udHlwZSA9PT0gbWV0aG9kU2lnbmF0dXJlKSB8fFxuICAgICAgICAgICAgKChqc29uLnNpZ25hdHVyZSA9PT0gbWV0aG9kU2lnbmF0dXJlIHx8IGpzb24uc2lnbmF0dXJlID09PSBtZXRob2RTaWduYXR1cmUucmVwbGFjZSgnMHgnLCAnJykgfHwganNvbi5uYW1lID09PSBtZXRob2RTaWduYXR1cmUpICYmIGpzb24udHlwZSA9PT0gJ2Z1bmN0aW9uJykpO1xuICAgIH0pLm1hcChmdW5jdGlvbiAoanNvbikge1xuICAgICAgICB2YXIgaW5wdXRMZW5ndGggPSAoQXJyYXkuaXNBcnJheShqc29uLmlucHV0cykpID8ganNvbi5pbnB1dHMubGVuZ3RoIDogMDtcbiAgICAgICAgaWYgKGlucHV0TGVuZ3RoICE9PSBhcmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgbnVtYmVyIG9mIGFyZ3VtZW50cyBpcyBub3QgbWF0Y2hpbmcgdGhlIG1ldGhvZHMgcmVxdWlyZWQgbnVtYmVyLiBZb3UgbmVlZCB0byBwYXNzICcgKyBpbnB1dExlbmd0aCArICcgYXJndW1lbnRzLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChqc29uLnR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHNpZ25hdHVyZSA9IGpzb24uc2lnbmF0dXJlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGpzb24uaW5wdXRzKSA/IGpzb24uaW5wdXRzIDogW107XG4gICAgfSkubWFwKGZ1bmN0aW9uIChpbnB1dHMpIHtcbiAgICAgICAgcmV0dXJuIGFiaS5lbmNvZGVQYXJhbWV0ZXJzKGlucHV0cywgYXJncykucmVwbGFjZSgnMHgnLCAnJyk7XG4gICAgfSlbMF0gfHwgJyc7XG4gICAgLy8gcmV0dXJuIGNvbnN0cnVjdG9yXG4gICAgaWYgKG1ldGhvZFNpZ25hdHVyZSA9PT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICBpZiAoIXRoaXMuX2RlcGxveURhdGEpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBjb250cmFjdCBoYXMgbm8gY29udHJhY3QgZGF0YSBvcHRpb24gc2V0LiBUaGlzIGlzIG5lY2Vzc2FyeSB0byBhcHBlbmQgdGhlIGNvbnN0cnVjdG9yIHBhcmFtZXRlcnMuJyk7XG4gICAgICAgIGlmICghdGhpcy5fZGVwbG95RGF0YS5zdGFydHNXaXRoKCcweCcpKSB7XG4gICAgICAgICAgICB0aGlzLl9kZXBsb3lEYXRhID0gJzB4JyArIHRoaXMuX2RlcGxveURhdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlcGxveURhdGEgKyBwYXJhbXNBQkk7XG4gICAgfVxuICAgIC8vIHJldHVybiBtZXRob2RcbiAgICB2YXIgcmV0dXJuVmFsdWUgPSAoc2lnbmF0dXJlKSA/IHNpZ25hdHVyZSArIHBhcmFtc0FCSSA6IHBhcmFtc0FCSTtcbiAgICBpZiAoIXJldHVyblZhbHVlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGRuXFwndCBmaW5kIGEgbWF0Y2hpbmcgY29udHJhY3QgbWV0aG9kIG5hbWVkIFwiJyArIHRoaXMuX21ldGhvZC5uYW1lICsgJ1wiLicpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG59O1xuLyoqXG4gKiBEZWNvZGUgbWV0aG9kIHJldHVybiB2YWx1ZXNcbiAqXG4gKiBAbWV0aG9kIF9kZWNvZGVNZXRob2RSZXR1cm5cbiAqIEBwYXJhbSB7QXJyYXl9IG91dHB1dHNcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXR1cm5WYWx1ZXNcbiAqIEByZXR1cm4ge09iamVjdH0gZGVjb2RlZCBvdXRwdXQgcmV0dXJuIHZhbHVlc1xuICovXG5Db250cmFjdC5wcm90b3R5cGUuX2RlY29kZU1ldGhvZFJldHVybiA9IGZ1bmN0aW9uIChvdXRwdXRzLCByZXR1cm5WYWx1ZXMpIHtcbiAgICBpZiAoIXJldHVyblZhbHVlcykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuVmFsdWVzID0gcmV0dXJuVmFsdWVzLmxlbmd0aCA+PSAyID8gcmV0dXJuVmFsdWVzLnNsaWNlKDIpIDogcmV0dXJuVmFsdWVzO1xuICAgIHZhciByZXN1bHQgPSBhYmkuZGVjb2RlUGFyYW1ldGVycyhvdXRwdXRzLCByZXR1cm5WYWx1ZXMpO1xuICAgIGlmIChyZXN1bHQuX19sZW5ndGhfXyA9PT0gMSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0WzBdO1xuICAgIH1cbiAgICBkZWxldGUgcmVzdWx0Ll9fbGVuZ3RoX187XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG4vKipcbiAqIERlcGxveXMgYSBjb250cmFjdCBhbmQgZmlyZSBldmVudHMgYmFzZWQgb24gaXRzIHN0YXRlOiB0cmFuc2FjdGlvbkhhc2gsIHJlY2VpcHRcbiAqXG4gKiBBbGwgZXZlbnQgbGlzdGVuZXJzIHdpbGwgYmUgcmVtb3ZlZCwgb25jZSB0aGUgbGFzdCBwb3NzaWJsZSBldmVudCBpcyBmaXJlZCAoXCJlcnJvclwiLCBvciBcInJlY2VpcHRcIilcbiAqXG4gKiBAbWV0aG9kIGRlcGxveVxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtPYmplY3R9IEV2ZW50RW1pdHRlciBwb3NzaWJsZSBldmVudHMgYXJlIFwiZXJyb3JcIiwgXCJ0cmFuc2FjdGlvbkhhc2hcIiBhbmQgXCJyZWNlaXB0XCJcbiAqL1xuQ29udHJhY3QucHJvdG90eXBlLmRlcGxveSA9IGZ1bmN0aW9uIChvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMuYXJndW1lbnRzID0gb3B0aW9ucy5hcmd1bWVudHMgfHwgW107XG4gICAgb3B0aW9ucyA9IHRoaXMuX2dldE9yU2V0RGVmYXVsdE9wdGlvbnMob3B0aW9ucyk7XG4gICAgLy8gdGhyb3cgZXJyb3IsIGlmIG5vIFwiZGF0YVwiIGlzIHNwZWNpZmllZFxuICAgIGlmICghb3B0aW9ucy5kYXRhKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnJvcnMuQ29udHJhY3RNaXNzaW5nRGVwbG95RGF0YUVycm9yKCkpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycm9ycy5Db250cmFjdE1pc3NpbmdEZXBsb3lEYXRhRXJyb3IoKTtcbiAgICB9XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gdGhpcy5vcHRpb25zLmpzb25JbnRlcmZhY2UuZmluZCgobWV0aG9kKSA9PiB7XG4gICAgICAgIHJldHVybiAobWV0aG9kLnR5cGUgPT09ICdjb25zdHJ1Y3RvcicpO1xuICAgIH0pIHx8IHt9O1xuICAgIGNvbnN0cnVjdG9yLnNpZ25hdHVyZSA9ICdjb25zdHJ1Y3Rvcic7XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZVR4T2JqZWN0LmFwcGx5KHtcbiAgICAgICAgbWV0aG9kOiBjb25zdHJ1Y3RvcixcbiAgICAgICAgcGFyZW50OiB0aGlzLFxuICAgICAgICBkZXBsb3lEYXRhOiBvcHRpb25zLmRhdGEsXG4gICAgICAgIF9ldGhBY2NvdW50czogdGhpcy5jb25zdHJ1Y3Rvci5fZXRoQWNjb3VudHNcbiAgICB9LCBvcHRpb25zLmFyZ3VtZW50cyk7XG59O1xuLyoqXG4gKiBHZXRzIHRoZSBldmVudCBzaWduYXR1cmUgYW5kIG91dHB1dEZvcm1hdHRlcnNcbiAqXG4gKiBAbWV0aG9kIF9nZW5lcmF0ZUV2ZW50T3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IGV2ZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge09iamVjdH0gdGhlIGV2ZW50IG9wdGlvbnMgb2JqZWN0XG4gKi9cbkNvbnRyYWN0LnByb3RvdHlwZS5fZ2VuZXJhdGVFdmVudE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgIC8vIGdldCB0aGUgY2FsbGJhY2tcbiAgICB2YXIgY2FsbGJhY2sgPSB0aGlzLl9nZXRDYWxsYmFjayhhcmdzKTtcbiAgICAvLyBnZXQgdGhlIG9wdGlvbnNcbiAgICB2YXIgb3B0aW9ucyA9ICghIWFyZ3NbYXJncy5sZW5ndGggLSAxXSAmJiB0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdKSA9PT0gJ29iamVjdCcgPyBhcmdzLnBvcCgpIDoge307XG4gICAgdmFyIGV2ZW50TmFtZSA9ICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycpID8gYXJnc1swXSA6ICdhbGxldmVudHMnO1xuICAgIHZhciBldmVudCA9IChldmVudE5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2FsbGV2ZW50cycpID8ge1xuICAgICAgICBuYW1lOiAnQUxMRVZFTlRTJyxcbiAgICAgICAganNvbkludGVyZmFjZTogdGhpcy5vcHRpb25zLmpzb25JbnRlcmZhY2VcbiAgICB9IDogdGhpcy5vcHRpb25zLmpzb25JbnRlcmZhY2UuZmluZChmdW5jdGlvbiAoanNvbikge1xuICAgICAgICByZXR1cm4gKGpzb24udHlwZSA9PT0gJ2V2ZW50JyAmJiAoanNvbi5uYW1lID09PSBldmVudE5hbWUgfHwganNvbi5zaWduYXR1cmUgPT09ICcweCcgKyBldmVudE5hbWUucmVwbGFjZSgnMHgnLCAnJykpKTtcbiAgICB9KTtcbiAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgIHRocm93IGVycm9ycy5Db250cmFjdEV2ZW50RG9lc05vdEV4aXN0RXJyb3IoZXZlbnROYW1lKTtcbiAgICB9XG4gICAgaWYgKCF1dGlscy5pc0FkZHJlc3ModGhpcy5vcHRpb25zLmFkZHJlc3MpKSB7XG4gICAgICAgIHRocm93IGVycm9ycy5Db250cmFjdE5vQWRkcmVzc0RlZmluZWRFcnJvcigpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBwYXJhbXM6IHRoaXMuX2VuY29kZUV2ZW50QUJJKGV2ZW50LCBvcHRpb25zKSxcbiAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICBjYWxsYmFjazogY2FsbGJhY2tcbiAgICB9O1xufTtcbi8qKlxuICogQWRkcyBldmVudCBsaXN0ZW5lcnMgYW5kIGNyZWF0ZXMgYSBzdWJzY3JpcHRpb24sIGFuZCByZW1vdmUgaXQgb25jZSBpdHMgZmlyZWQuXG4gKlxuICogQG1ldGhvZCBjbG9uZVxuICogQHJldHVybiB7T2JqZWN0fSB0aGUgZXZlbnQgc3Vic2NyaXB0aW9uXG4gKi9cbkNvbnRyYWN0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5vcHRpb25zLmpzb25JbnRlcmZhY2UsIHRoaXMub3B0aW9ucy5hZGRyZXNzLCB0aGlzLm9wdGlvbnMpO1xufTtcbi8qKlxuICogQWRkcyBldmVudCBsaXN0ZW5lcnMgYW5kIGNyZWF0ZXMgYSBzdWJzY3JpcHRpb24sIGFuZCByZW1vdmUgaXQgb25jZSBpdHMgZmlyZWQuXG4gKlxuICogQG1ldGhvZCBvbmNlXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7T2JqZWN0fSB0aGUgZXZlbnQgc3Vic2NyaXB0aW9uXG4gKi9cbkNvbnRyYWN0LnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gKGV2ZW50LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAvLyBnZXQgdGhlIGNhbGxiYWNrXG4gICAgY2FsbGJhY2sgPSB0aGlzLl9nZXRDYWxsYmFjayhhcmdzKTtcbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgIHRocm93IGVycm9ycy5Db250cmFjdE9uY2VSZXF1aXJlc0NhbGxiYWNrRXJyb3IoKTtcbiAgICB9XG4gICAgLy8gZG9uJ3QgYWxsb3cgZnJvbUJsb2NrXG4gICAgaWYgKG9wdGlvbnMpXG4gICAgICAgIGRlbGV0ZSBvcHRpb25zLmZyb21CbG9jaztcbiAgICAvLyBkb24ndCByZXR1cm4gYXMgb25jZSBzaG91bGRuJ3QgcHJvdmlkZSBcIm9uXCJcbiAgICB0aGlzLl9vbihldmVudCwgb3B0aW9ucywgZnVuY3Rpb24gKGVyciwgcmVzLCBzdWIpIHtcbiAgICAgICAgc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgcmVzLCBzdWIpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG4vKipcbiAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIGFuZCBjcmVhdGVzIGEgc3Vic2NyaXB0aW9uLlxuICpcbiAqIEBtZXRob2QgX29uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IHRoZSBldmVudCBzdWJzY3JpcHRpb25cbiAqL1xuQ29udHJhY3QucHJvdG90eXBlLl9vbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3ViT3B0aW9ucyA9IHRoaXMuX2dlbmVyYXRlRXZlbnRPcHRpb25zLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHN1Yk9wdGlvbnMucGFyYW1zICYmIHN1Yk9wdGlvbnMucGFyYW1zLnRvQmxvY2spIHtcbiAgICAgICAgZGVsZXRlIHN1Yk9wdGlvbnMucGFyYW1zLnRvQmxvY2s7XG4gICAgICAgIGNvbnNvbGUud2FybignSW52YWxpZCBvcHRpb246IHRvQmxvY2suIFVzZSBnZXRQYXN0RXZlbnRzIGZvciBzcGVjaWZpYyByYW5nZS4nKTtcbiAgICB9XG4gICAgLy8gcHJldmVudCB0aGUgZXZlbnQgXCJuZXdMaXN0ZW5lclwiIGFuZCBcInJlbW92ZUxpc3RlbmVyXCIgZnJvbSBiZWluZyBvdmVyd3JpdHRlblxuICAgIHRoaXMuX2NoZWNrTGlzdGVuZXIoJ25ld0xpc3RlbmVyJywgc3ViT3B0aW9ucy5ldmVudC5uYW1lKTtcbiAgICB0aGlzLl9jaGVja0xpc3RlbmVyKCdyZW1vdmVMaXN0ZW5lcicsIHN1Yk9wdGlvbnMuZXZlbnQubmFtZSk7XG4gICAgLy8gVE9ETyBjaGVjayBpZiBsaXN0ZW5lciBhbHJlYWR5IGV4aXN0cz8gYW5kIHJldXNlIHN1YnNjcmlwdGlvbiBpZiBvcHRpb25zIGFyZSB0aGUgc2FtZS5cbiAgICAvLyBjcmVhdGUgbmV3IHN1YnNjcmlwdGlvblxuICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKHtcbiAgICAgICAgc3Vic2NyaXB0aW9uOiB7XG4gICAgICAgICAgICBwYXJhbXM6IDEsXG4gICAgICAgICAgICBpbnB1dEZvcm1hdHRlcjogW2Zvcm1hdHRlcnMuaW5wdXRMb2dGb3JtYXR0ZXJdLFxuICAgICAgICAgICAgb3V0cHV0Rm9ybWF0dGVyOiB0aGlzLl9kZWNvZGVFdmVudEFCSS5iaW5kKHN1Yk9wdGlvbnMuZXZlbnQpLFxuICAgICAgICAgICAgLy8gRFVCTElDQVRFLCBhbHNvIGluIHdlYjMtZXRoXG4gICAgICAgICAgICBzdWJzY3JpcHRpb25IYW5kbGVyOiBmdW5jdGlvbiAob3V0cHV0KSB7XG4gICAgICAgICAgICAgICAgaWYgKG91dHB1dC5yZW1vdmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnY2hhbmdlZCcsIG91dHB1dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2RhdGEnLCBvdXRwdXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFjayhudWxsLCBvdXRwdXQsIHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdHlwZTogJ2V0aCcsXG4gICAgICAgIHJlcXVlc3RNYW5hZ2VyOiB0aGlzLl9yZXF1ZXN0TWFuYWdlclxuICAgIH0pO1xuICAgIHN1YnNjcmlwdGlvbi5zdWJzY3JpYmUoJ2xvZ3MnLCBzdWJPcHRpb25zLnBhcmFtcywgc3ViT3B0aW9ucy5jYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7IH0pO1xuICAgIHJldHVybiBzdWJzY3JpcHRpb247XG59O1xuLyoqXG4gKiBHZXQgcGFzdCBldmVudHMgZnJvbSBjb250cmFjdHNcbiAqXG4gKiBAbWV0aG9kIGdldFBhc3RFdmVudHNcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtPYmplY3R9IHRoZSBwcm9taWV2ZW50XG4gKi9cbkNvbnRyYWN0LnByb3RvdHlwZS5nZXRQYXN0RXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJPcHRpb25zID0gdGhpcy5fZ2VuZXJhdGVFdmVudE9wdGlvbnMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB2YXIgZ2V0UGFzdExvZ3MgPSBuZXcgTWV0aG9kKHtcbiAgICAgICAgbmFtZTogJ2dldFBhc3RMb2dzJyxcbiAgICAgICAgY2FsbDogJ2V0aF9nZXRMb2dzJyxcbiAgICAgICAgcGFyYW1zOiAxLFxuICAgICAgICBpbnB1dEZvcm1hdHRlcjogW2Zvcm1hdHRlcnMuaW5wdXRMb2dGb3JtYXR0ZXJdLFxuICAgICAgICBvdXRwdXRGb3JtYXR0ZXI6IHRoaXMuX2RlY29kZUV2ZW50QUJJLmJpbmQoc3ViT3B0aW9ucy5ldmVudClcbiAgICB9KTtcbiAgICBnZXRQYXN0TG9ncy5zZXRSZXF1ZXN0TWFuYWdlcih0aGlzLl9yZXF1ZXN0TWFuYWdlcik7XG4gICAgdmFyIGNhbGwgPSBnZXRQYXN0TG9ncy5idWlsZENhbGwoKTtcbiAgICBnZXRQYXN0TG9ncyA9IG51bGw7XG4gICAgcmV0dXJuIGNhbGwoc3ViT3B0aW9ucy5wYXJhbXMsIHN1Yk9wdGlvbnMuY2FsbGJhY2spO1xufTtcbi8qKlxuICogcmV0dXJucyB0aGUgYW4gb2JqZWN0IHdpdGggY2FsbCwgc2VuZCwgZXN0aW1hdGUgZnVuY3Rpb25zXG4gKlxuICogQG1ldGhvZCBfY3JlYXRlVHhPYmplY3RcbiAqIEByZXR1cm5zIHtPYmplY3R9IGFuIG9iamVjdCB3aXRoIGZ1bmN0aW9ucyB0byBjYWxsIHRoZSBtZXRob2RzXG4gKi9cbkNvbnRyYWN0LnByb3RvdHlwZS5fY3JlYXRlVHhPYmplY3QgPSBmdW5jdGlvbiBfY3JlYXRlVHhPYmplY3QoKSB7XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgIHZhciB0eE9iamVjdCA9IHt9O1xuICAgIGlmICh0aGlzLm1ldGhvZC50eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHR4T2JqZWN0LmNhbGwgPSB0aGlzLnBhcmVudC5fZXhlY3V0ZU1ldGhvZC5iaW5kKHR4T2JqZWN0LCAnY2FsbCcpO1xuICAgICAgICB0eE9iamVjdC5jYWxsLnJlcXVlc3QgPSB0aGlzLnBhcmVudC5fZXhlY3V0ZU1ldGhvZC5iaW5kKHR4T2JqZWN0LCAnY2FsbCcsIHRydWUpOyAvLyB0byBtYWtlIGJhdGNoIHJlcXVlc3RzXG4gICAgfVxuICAgIHR4T2JqZWN0LnNlbmQgPSB0aGlzLnBhcmVudC5fZXhlY3V0ZU1ldGhvZC5iaW5kKHR4T2JqZWN0LCAnc2VuZCcpO1xuICAgIHR4T2JqZWN0LnNlbmQucmVxdWVzdCA9IHRoaXMucGFyZW50Ll9leGVjdXRlTWV0aG9kLmJpbmQodHhPYmplY3QsICdzZW5kJywgdHJ1ZSk7IC8vIHRvIG1ha2UgYmF0Y2ggcmVxdWVzdHNcbiAgICB0eE9iamVjdC5lbmNvZGVBQkkgPSB0aGlzLnBhcmVudC5fZW5jb2RlTWV0aG9kQUJJLmJpbmQodHhPYmplY3QpO1xuICAgIHR4T2JqZWN0LmVzdGltYXRlR2FzID0gdGhpcy5wYXJlbnQuX2V4ZWN1dGVNZXRob2QuYmluZCh0eE9iamVjdCwgJ2VzdGltYXRlJyk7XG4gICAgdHhPYmplY3QuY3JlYXRlQWNjZXNzTGlzdCA9IHRoaXMucGFyZW50Ll9leGVjdXRlTWV0aG9kLmJpbmQodHhPYmplY3QsICdjcmVhdGVBY2Nlc3NMaXN0Jyk7XG4gICAgaWYgKGFyZ3MgJiYgdGhpcy5tZXRob2QuaW5wdXRzICYmIGFyZ3MubGVuZ3RoICE9PSB0aGlzLm1ldGhvZC5pbnB1dHMubGVuZ3RoKSB7XG4gICAgICAgIGlmICh0aGlzLm5leHRNZXRob2QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5leHRNZXRob2QuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZXJyb3JzLkludmFsaWROdW1iZXJPZlBhcmFtcyhhcmdzLmxlbmd0aCwgdGhpcy5tZXRob2QuaW5wdXRzLmxlbmd0aCwgdGhpcy5tZXRob2QubmFtZSk7XG4gICAgfVxuICAgIHR4T2JqZWN0LmFyZ3VtZW50cyA9IGFyZ3MgfHwgW107XG4gICAgdHhPYmplY3QuX21ldGhvZCA9IHRoaXMubWV0aG9kO1xuICAgIHR4T2JqZWN0Ll9wYXJlbnQgPSB0aGlzLnBhcmVudDtcbiAgICB0eE9iamVjdC5fZXRoQWNjb3VudHMgPSB0aGlzLnBhcmVudC5jb25zdHJ1Y3Rvci5fZXRoQWNjb3VudHMgfHwgdGhpcy5fZXRoQWNjb3VudHM7XG4gICAgaWYgKHRoaXMuZGVwbG95RGF0YSkge1xuICAgICAgICB0eE9iamVjdC5fZGVwbG95RGF0YSA9IHRoaXMuZGVwbG95RGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIHR4T2JqZWN0O1xufTtcbi8qKlxuICogR2VuZXJhdGVzIHRoZSBvcHRpb25zIGZvciB0aGUgZXhlY3V0ZSBjYWxsXG4gKlxuICogQG1ldGhvZCBfcHJvY2Vzc0V4ZWN1dGVBcmd1bWVudHNcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3NcbiAqIEBwYXJhbSB7UHJvbWlzZX0gZGVmZXJcbiAqL1xuQ29udHJhY3QucHJvdG90eXBlLl9wcm9jZXNzRXhlY3V0ZUFyZ3VtZW50cyA9IGZ1bmN0aW9uIF9wcm9jZXNzRXhlY3V0ZUFyZ3VtZW50cyhhcmdzLCBkZWZlcikge1xuICAgIHZhciBwcm9jZXNzZWRBcmdzID0ge307XG4gICAgcHJvY2Vzc2VkQXJncy50eXBlID0gYXJncy5zaGlmdCgpO1xuICAgIC8vIGdldCB0aGUgY2FsbGJhY2tcbiAgICBwcm9jZXNzZWRBcmdzLmNhbGxiYWNrID0gdGhpcy5fcGFyZW50Ll9nZXRDYWxsYmFjayhhcmdzKTtcbiAgICAvLyBnZXQgYmxvY2sgbnVtYmVyIHRvIHVzZSBmb3IgY2FsbFxuICAgIGlmIChwcm9jZXNzZWRBcmdzLnR5cGUgPT09ICdjYWxsJyAmJiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gIT09IHRydWUgJiYgKHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gPT09ICdzdHJpbmcnIHx8IGlzRmluaXRlKGFyZ3NbYXJncy5sZW5ndGggLSAxXSkpKVxuICAgICAgICBwcm9jZXNzZWRBcmdzLmRlZmF1bHRCbG9jayA9IGFyZ3MucG9wKCk7XG4gICAgLy8gZ2V0IHRoZSBvcHRpb25zXG4gICAgcHJvY2Vzc2VkQXJncy5vcHRpb25zID0gKCEhYXJnc1thcmdzLmxlbmd0aCAtIDFdICYmIHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0pID09PSAnb2JqZWN0JyA/IGFyZ3MucG9wKCkgOiB7fTtcbiAgICAvLyBnZXQgdGhlIGdlbmVyYXRlUmVxdWVzdCBhcmd1bWVudCBmb3IgYmF0Y2ggcmVxdWVzdHNcbiAgICBwcm9jZXNzZWRBcmdzLmdlbmVyYXRlUmVxdWVzdCA9IChhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gPT09IHRydWUpID8gYXJncy5wb3AoKSA6IGZhbHNlO1xuICAgIHByb2Nlc3NlZEFyZ3Mub3B0aW9ucyA9IHRoaXMuX3BhcmVudC5fZ2V0T3JTZXREZWZhdWx0T3B0aW9ucyhwcm9jZXNzZWRBcmdzLm9wdGlvbnMpO1xuICAgIHByb2Nlc3NlZEFyZ3Mub3B0aW9ucy5kYXRhID0gdGhpcy5lbmNvZGVBQkkoKTtcbiAgICAvLyBhZGQgY29udHJhY3QgYWRkcmVzc1xuICAgIGlmICghdGhpcy5fZGVwbG95RGF0YSAmJiAhdXRpbHMuaXNBZGRyZXNzKHRoaXMuX3BhcmVudC5vcHRpb25zLmFkZHJlc3MpKVxuICAgICAgICB0aHJvdyBlcnJvcnMuQ29udHJhY3ROb0FkZHJlc3NEZWZpbmVkRXJyb3IoKTtcbiAgICBpZiAoIXRoaXMuX2RlcGxveURhdGEpXG4gICAgICAgIHByb2Nlc3NlZEFyZ3Mub3B0aW9ucy50byA9IHRoaXMuX3BhcmVudC5vcHRpb25zLmFkZHJlc3M7XG4gICAgLy8gcmV0dXJuIGVycm9yLCBpZiBubyBcImRhdGFcIiBpcyBzcGVjaWZpZWRcbiAgICBpZiAoIXByb2Nlc3NlZEFyZ3Mub3B0aW9ucy5kYXRhKVxuICAgICAgICByZXR1cm4gdXRpbHMuX2ZpcmVFcnJvcihuZXcgRXJyb3IoJ0NvdWxkblxcJ3QgZmluZCBhIG1hdGNoaW5nIGNvbnRyYWN0IG1ldGhvZCwgb3IgdGhlIG51bWJlciBvZiBwYXJhbWV0ZXJzIGlzIHdyb25nLicpLCBkZWZlci5ldmVudEVtaXR0ZXIsIGRlZmVyLnJlamVjdCwgcHJvY2Vzc2VkQXJncy5jYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb2Nlc3NlZEFyZ3M7XG59O1xuLyoqXG4gKiBFeGVjdXRlcyBhIGNhbGwsIHRyYW5zYWN0IG9yIGVzdGltYXRlR2FzIG9uIGEgY29udHJhY3QgZnVuY3Rpb25cbiAqXG4gKiBAbWV0aG9kIF9leGVjdXRlTWV0aG9kXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZSB0aGUgdHlwZSB0aGlzIGV4ZWN1dGUgZnVuY3Rpb24gc2hvdWxkIGV4ZWN1dGVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gbWFrZVJlcXVlc3QgaWYgdHJ1ZSwgaXQgc2ltcGx5IHJldHVybnMgdGhlIHJlcXVlc3QgcGFyYW1ldGVycywgcmF0aGVyIHRoYW4gZXhlY3V0aW5nIGl0XG4gKi9cbkNvbnRyYWN0LnByb3RvdHlwZS5fZXhlY3V0ZU1ldGhvZCA9IGZ1bmN0aW9uIF9leGVjdXRlTWV0aG9kKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXMsIGFyZ3MgPSB0aGlzLl9wYXJlbnQuX3Byb2Nlc3NFeGVjdXRlQXJndW1lbnRzLmNhbGwodGhpcywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSwgZGVmZXIpLCBkZWZlciA9IHByb21pRXZlbnQoKGFyZ3MudHlwZSAhPT0gJ3NlbmQnKSksIGV0aEFjY291bnRzID0gX3RoaXMuY29uc3RydWN0b3IuX2V0aEFjY291bnRzIHx8IF90aGlzLl9ldGhBY2NvdW50cztcbiAgICAvLyBzaW1wbGUgcmV0dXJuIHJlcXVlc3QgZm9yIGJhdGNoIHJlcXVlc3RzXG4gICAgaWYgKGFyZ3MuZ2VuZXJhdGVSZXF1ZXN0KSB7XG4gICAgICAgIHZhciBwYXlsb2FkID0ge1xuICAgICAgICAgICAgcGFyYW1zOiBbZm9ybWF0dGVycy5pbnB1dENhbGxGb3JtYXR0ZXIuY2FsbCh0aGlzLl9wYXJlbnQsIGFyZ3Mub3B0aW9ucyldLFxuICAgICAgICAgICAgY2FsbGJhY2s6IGFyZ3MuY2FsbGJhY2tcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGFyZ3MudHlwZSA9PT0gJ2NhbGwnKSB7XG4gICAgICAgICAgICBwYXlsb2FkLnBhcmFtcy5wdXNoKGZvcm1hdHRlcnMuaW5wdXREZWZhdWx0QmxvY2tOdW1iZXJGb3JtYXR0ZXIuY2FsbCh0aGlzLl9wYXJlbnQsIGFyZ3MuZGVmYXVsdEJsb2NrKSk7XG4gICAgICAgICAgICBwYXlsb2FkLm1ldGhvZCA9ICdldGhfY2FsbCc7XG4gICAgICAgICAgICBwYXlsb2FkLmZvcm1hdCA9IHRoaXMuX3BhcmVudC5fZGVjb2RlTWV0aG9kUmV0dXJuLmJpbmQobnVsbCwgdGhpcy5fbWV0aG9kLm91dHB1dHMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGF5bG9hZC5tZXRob2QgPSAnZXRoX3NlbmRUcmFuc2FjdGlvbic7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBheWxvYWQ7XG4gICAgfVxuICAgIHN3aXRjaCAoYXJncy50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2NyZWF0ZUFjY2Vzc0xpc3QnOlxuICAgICAgICAgICAgLy8gcmV0dXJuIGVycm9yLCBpZiBubyBcImZyb21cIiBpcyBzcGVjaWZpZWRcbiAgICAgICAgICAgIGlmICghdXRpbHMuaXNBZGRyZXNzKGFyZ3Mub3B0aW9ucy5mcm9tKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1dGlscy5fZmlyZUVycm9yKGVycm9ycy5Db250cmFjdE5vRnJvbUFkZHJlc3NEZWZpbmVkRXJyb3IoKSwgZGVmZXIuZXZlbnRFbWl0dGVyLCBkZWZlci5yZWplY3QsIGFyZ3MuY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNyZWF0ZUFjY2Vzc0xpc3QgPSAobmV3IE1ldGhvZCh7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2NyZWF0ZUFjY2Vzc0xpc3QnLFxuICAgICAgICAgICAgICAgIGNhbGw6ICdldGhfY3JlYXRlQWNjZXNzTGlzdCcsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiAyLFxuICAgICAgICAgICAgICAgIGlucHV0Rm9ybWF0dGVyOiBbZm9ybWF0dGVycy5pbnB1dFRyYW5zYWN0aW9uRm9ybWF0dGVyLCBmb3JtYXR0ZXJzLmlucHV0RGVmYXVsdEJsb2NrTnVtYmVyRm9ybWF0dGVyXSxcbiAgICAgICAgICAgICAgICByZXF1ZXN0TWFuYWdlcjogX3RoaXMuX3BhcmVudC5fcmVxdWVzdE1hbmFnZXIsXG4gICAgICAgICAgICAgICAgYWNjb3VudHM6IGV0aEFjY291bnRzLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRBY2NvdW50OiBfdGhpcy5fcGFyZW50LmRlZmF1bHRBY2NvdW50LFxuICAgICAgICAgICAgICAgIGRlZmF1bHRCbG9jazogX3RoaXMuX3BhcmVudC5kZWZhdWx0QmxvY2tcbiAgICAgICAgICAgIH0pKS5jcmVhdGVGdW5jdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUFjY2Vzc0xpc3QoYXJncy5vcHRpb25zLCBhcmdzLmNhbGxiYWNrKTtcbiAgICAgICAgY2FzZSAnZXN0aW1hdGUnOlxuICAgICAgICAgICAgdmFyIGVzdGltYXRlR2FzID0gKG5ldyBNZXRob2Qoe1xuICAgICAgICAgICAgICAgIG5hbWU6ICdlc3RpbWF0ZUdhcycsXG4gICAgICAgICAgICAgICAgY2FsbDogJ2V0aF9lc3RpbWF0ZUdhcycsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiAxLFxuICAgICAgICAgICAgICAgIGlucHV0Rm9ybWF0dGVyOiBbZm9ybWF0dGVycy5pbnB1dENhbGxGb3JtYXR0ZXJdLFxuICAgICAgICAgICAgICAgIG91dHB1dEZvcm1hdHRlcjogdXRpbHMuaGV4VG9OdW1iZXIsXG4gICAgICAgICAgICAgICAgcmVxdWVzdE1hbmFnZXI6IF90aGlzLl9wYXJlbnQuX3JlcXVlc3RNYW5hZ2VyLFxuICAgICAgICAgICAgICAgIGFjY291bnRzOiBldGhBY2NvdW50cyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0QWNjb3VudDogX3RoaXMuX3BhcmVudC5kZWZhdWx0QWNjb3VudCxcbiAgICAgICAgICAgICAgICBkZWZhdWx0QmxvY2s6IF90aGlzLl9wYXJlbnQuZGVmYXVsdEJsb2NrXG4gICAgICAgICAgICB9KSkuY3JlYXRlRnVuY3Rpb24oKTtcbiAgICAgICAgICAgIHJldHVybiBlc3RpbWF0ZUdhcyhhcmdzLm9wdGlvbnMsIGFyZ3MuY2FsbGJhY2spO1xuICAgICAgICBjYXNlICdjYWxsJzpcbiAgICAgICAgICAgIC8vIFRPRE8gY2hlY2sgZXJyb3JzOiBtaXNzaW5nIFwiZnJvbVwiIHNob3VsZCBnaXZlIGVycm9yIG9uIGRlcGxveSBhbmQgc2VuZCwgY2FsbCA/XG4gICAgICAgICAgICB2YXIgY2FsbCA9IChuZXcgTWV0aG9kKHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnY2FsbCcsXG4gICAgICAgICAgICAgICAgY2FsbDogJ2V0aF9jYWxsJyxcbiAgICAgICAgICAgICAgICBwYXJhbXM6IDIsXG4gICAgICAgICAgICAgICAgaW5wdXRGb3JtYXR0ZXI6IFtmb3JtYXR0ZXJzLmlucHV0Q2FsbEZvcm1hdHRlciwgZm9ybWF0dGVycy5pbnB1dERlZmF1bHRCbG9ja051bWJlckZvcm1hdHRlcl0sXG4gICAgICAgICAgICAgICAgLy8gYWRkIG91dHB1dCBmb3JtYXR0ZXIgZm9yIGRlY29kaW5nXG4gICAgICAgICAgICAgICAgb3V0cHV0Rm9ybWF0dGVyOiBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5fcGFyZW50Ll9kZWNvZGVNZXRob2RSZXR1cm4oX3RoaXMuX21ldGhvZC5vdXRwdXRzLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVxdWVzdE1hbmFnZXI6IF90aGlzLl9wYXJlbnQuX3JlcXVlc3RNYW5hZ2VyLFxuICAgICAgICAgICAgICAgIGFjY291bnRzOiBldGhBY2NvdW50cyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0QWNjb3VudDogX3RoaXMuX3BhcmVudC5kZWZhdWx0QWNjb3VudCxcbiAgICAgICAgICAgICAgICBkZWZhdWx0QmxvY2s6IF90aGlzLl9wYXJlbnQuZGVmYXVsdEJsb2NrLFxuICAgICAgICAgICAgICAgIGhhbmRsZVJldmVydDogX3RoaXMuX3BhcmVudC5oYW5kbGVSZXZlcnQsXG4gICAgICAgICAgICAgICAgYWJpQ29kZXI6IGFiaVxuICAgICAgICAgICAgfSkpLmNyZWF0ZUZ1bmN0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm4gY2FsbChhcmdzLm9wdGlvbnMsIGFyZ3MuZGVmYXVsdEJsb2NrLCBhcmdzLmNhbGxiYWNrKTtcbiAgICAgICAgY2FzZSAnc2VuZCc6XG4gICAgICAgICAgICAvLyByZXR1cm4gZXJyb3IsIGlmIG5vIFwiZnJvbVwiIGlzIHNwZWNpZmllZFxuICAgICAgICAgICAgaWYgKCF1dGlscy5pc0FkZHJlc3MoYXJncy5vcHRpb25zLmZyb20pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHV0aWxzLl9maXJlRXJyb3IoZXJyb3JzLkNvbnRyYWN0Tm9Gcm9tQWRkcmVzc0RlZmluZWRFcnJvcigpLCBkZWZlci5ldmVudEVtaXR0ZXIsIGRlZmVyLnJlamVjdCwgYXJncy5jYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX21ldGhvZC5wYXlhYmxlID09PSAnYm9vbGVhbicgJiYgIXRoaXMuX21ldGhvZC5wYXlhYmxlICYmIGFyZ3Mub3B0aW9ucy52YWx1ZSAmJiBhcmdzLm9wdGlvbnMudmFsdWUgPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHV0aWxzLl9maXJlRXJyb3IobmV3IEVycm9yKCdDYW4gbm90IHNlbmQgdmFsdWUgdG8gbm9uLXBheWFibGUgY29udHJhY3QgbWV0aG9kIG9yIGNvbnN0cnVjdG9yJyksIGRlZmVyLmV2ZW50RW1pdHRlciwgZGVmZXIucmVqZWN0LCBhcmdzLmNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSByZWNlaXB0IGxvZ3MgYXJlIGRlY29kZWRcbiAgICAgICAgICAgIHZhciBleHRyYUZvcm1hdHRlcnMgPSB7XG4gICAgICAgICAgICAgICAgcmVjZWlwdEZvcm1hdHRlcjogZnVuY3Rpb24gKHJlY2VpcHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVjZWlwdC5sb2dzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVjb2RlIGxvZ3NcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudHMgPSByZWNlaXB0LmxvZ3MubWFwKChsb2cpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuX3BhcmVudC5fZGVjb2RlRXZlbnRBQkkuY2FsbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdBTExFVkVOVFMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29uSW50ZXJmYWNlOiBfdGhpcy5fcGFyZW50Lm9wdGlvbnMuanNvbkludGVyZmFjZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGxvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1ha2UgbG9nIG5hbWVzIGtleXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpcHQuZXZlbnRzID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2LmV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmID4gMSBvZiB0aGUgc2FtZSBldmVudCwgZG9uJ3Qgb3ZlcndyaXRlIGFueSBleGlzdGluZyBldmVudHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlY2VpcHQuZXZlbnRzW2V2LmV2ZW50XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVjZWlwdC5ldmVudHNbZXYuZXZlbnRdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpcHQuZXZlbnRzW2V2LmV2ZW50XS5wdXNoKGV2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpcHQuZXZlbnRzW2V2LmV2ZW50XSA9IFtyZWNlaXB0LmV2ZW50c1tldi5ldmVudF0sIGV2XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpcHQuZXZlbnRzW2V2LmV2ZW50XSA9IGV2O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNlaXB0LmV2ZW50c1tjb3VudF0gPSBldjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZWNlaXB0LmxvZ3M7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlY2VpcHQ7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb250cmFjdERlcGxveUZvcm1hdHRlcjogZnVuY3Rpb24gKHJlY2VpcHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0NvbnRyYWN0ID0gX3RoaXMuX3BhcmVudC5jbG9uZSgpO1xuICAgICAgICAgICAgICAgICAgICBuZXdDb250cmFjdC5vcHRpb25zLmFkZHJlc3MgPSByZWNlaXB0LmNvbnRyYWN0QWRkcmVzcztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld0NvbnRyYWN0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgc2VuZFRyYW5zYWN0aW9uID0gKG5ldyBNZXRob2Qoe1xuICAgICAgICAgICAgICAgIG5hbWU6ICdzZW5kVHJhbnNhY3Rpb24nLFxuICAgICAgICAgICAgICAgIGNhbGw6ICdldGhfc2VuZFRyYW5zYWN0aW9uJyxcbiAgICAgICAgICAgICAgICBwYXJhbXM6IDEsXG4gICAgICAgICAgICAgICAgaW5wdXRGb3JtYXR0ZXI6IFtmb3JtYXR0ZXJzLmlucHV0VHJhbnNhY3Rpb25Gb3JtYXR0ZXJdLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RNYW5hZ2VyOiBfdGhpcy5fcGFyZW50Ll9yZXF1ZXN0TWFuYWdlcixcbiAgICAgICAgICAgICAgICBhY2NvdW50czogX3RoaXMuY29uc3RydWN0b3IuX2V0aEFjY291bnRzIHx8IF90aGlzLl9ldGhBY2NvdW50cyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0QWNjb3VudDogX3RoaXMuX3BhcmVudC5kZWZhdWx0QWNjb3VudCxcbiAgICAgICAgICAgICAgICBkZWZhdWx0QmxvY2s6IF90aGlzLl9wYXJlbnQuZGVmYXVsdEJsb2NrLFxuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uQmxvY2tUaW1lb3V0OiBfdGhpcy5fcGFyZW50LnRyYW5zYWN0aW9uQmxvY2tUaW1lb3V0LFxuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uQ29uZmlybWF0aW9uQmxvY2tzOiBfdGhpcy5fcGFyZW50LnRyYW5zYWN0aW9uQ29uZmlybWF0aW9uQmxvY2tzLFxuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uUG9sbGluZ1RpbWVvdXQ6IF90aGlzLl9wYXJlbnQudHJhbnNhY3Rpb25Qb2xsaW5nVGltZW91dCxcbiAgICAgICAgICAgICAgICBkZWZhdWx0Q29tbW9uOiBfdGhpcy5fcGFyZW50LmRlZmF1bHRDb21tb24sXG4gICAgICAgICAgICAgICAgZGVmYXVsdENoYWluOiBfdGhpcy5fcGFyZW50LmRlZmF1bHRDaGFpbixcbiAgICAgICAgICAgICAgICBkZWZhdWx0SGFyZGZvcms6IF90aGlzLl9wYXJlbnQuZGVmYXVsdEhhcmRmb3JrLFxuICAgICAgICAgICAgICAgIGhhbmRsZVJldmVydDogX3RoaXMuX3BhcmVudC5oYW5kbGVSZXZlcnQsXG4gICAgICAgICAgICAgICAgZXh0cmFGb3JtYXR0ZXJzOiBleHRyYUZvcm1hdHRlcnMsXG4gICAgICAgICAgICAgICAgYWJpQ29kZXI6IGFiaVxuICAgICAgICAgICAgfSkpLmNyZWF0ZUZ1bmN0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm4gc2VuZFRyYW5zYWN0aW9uKGFyZ3Mub3B0aW9ucywgYXJncy5jYWxsYmFjayk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBcIicgKyBhcmdzLnR5cGUgKyAnXCIgbm90IGltcGxlbWVudGVkLicpO1xuICAgIH1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IENvbnRyYWN0O1xuIiwiLypcbiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gICAgd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbi8qKlxuICogQGZpbGUgaWJhbi5qc1xuICpcbiAqIERldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS93aWtpL3dpa2kvSUNBUDotSW50ZXItZXhjaGFuZ2UtQ2xpZW50LUFkZHJlc3MtUHJvdG9jb2xcbiAqXG4gKiBAYXV0aG9yIE1hcmVrIEtvdGV3aWN6IDxtYXJla0BwYXJpdHkuaW8+XG4gKiBAZGF0ZSAyMDE1XG4gKi9cblwidXNlIHN0cmljdFwiO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCd3ZWIzLXV0aWxzJyk7XG5jb25zdCBCaWdOdW1iZXIgPSByZXF1aXJlKCdibi5qcycpO1xuY29uc3QgbGVmdFBhZCA9IGZ1bmN0aW9uIChzdHJpbmcsIGJ5dGVzKSB7XG4gICAgbGV0IHJlc3VsdCA9IHN0cmluZztcbiAgICB3aGlsZSAocmVzdWx0Lmxlbmd0aCA8IGJ5dGVzICogMikge1xuICAgICAgICByZXN1bHQgPSAnMCcgKyByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuLyoqXG4gKiBQcmVwYXJlIGFuIElCQU4gZm9yIG1vZCA5NyBjb21wdXRhdGlvbiBieSBtb3ZpbmcgdGhlIGZpcnN0IDQgY2hhcnMgdG8gdGhlIGVuZCBhbmQgdHJhbnNmb3JtaW5nIHRoZSBsZXR0ZXJzIHRvXG4gKiBudW1iZXJzIChBID0gMTAsIEIgPSAxMSwgLi4uLCBaID0gMzUpLCBhcyBzcGVjaWZpZWQgaW4gSVNPMTM2MTYuXG4gKlxuICogQG1ldGhvZCBpc28xMzYxNlByZXBhcmVcbiAqIEBwYXJhbSB7U3RyaW5nfSBpYmFuIHRoZSBJQkFOXG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgcHJlcGFyZWQgSUJBTlxuICovXG5jb25zdCBpc28xMzYxNlByZXBhcmUgPSBmdW5jdGlvbiAoaWJhbikge1xuICAgIGNvbnN0IEEgPSAnQScuY2hhckNvZGVBdCgwKTtcbiAgICBjb25zdCBaID0gJ1onLmNoYXJDb2RlQXQoMCk7XG4gICAgaWJhbiA9IGliYW4udG9VcHBlckNhc2UoKTtcbiAgICBpYmFuID0gaWJhbi5zdWJzdHIoNCkgKyBpYmFuLnN1YnN0cigwLCA0KTtcbiAgICByZXR1cm4gaWJhbi5zcGxpdCgnJykubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgICAgIGNvbnN0IGNvZGUgPSBuLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgIGlmIChjb2RlID49IEEgJiYgY29kZSA8PSBaKSB7XG4gICAgICAgICAgICAvLyBBID0gMTAsIEIgPSAxMSwgLi4uIFogPSAzNVxuICAgICAgICAgICAgcmV0dXJuIGNvZGUgLSBBICsgMTA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgfVxuICAgIH0pLmpvaW4oJycpO1xufTtcbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgTU9EIDk3IDEwIG9mIHRoZSBwYXNzZWQgSUJBTiBhcyBzcGVjaWZpZWQgaW4gSVNPNzA2NC5cbiAqXG4gKiBAbWV0aG9kIG1vZDk3MTBcbiAqIEBwYXJhbSB7U3RyaW5nfSBpYmFuXG4gKiBAcmV0dXJucyB7TnVtYmVyfVxuICovXG5jb25zdCBtb2Q5NzEwID0gZnVuY3Rpb24gKGliYW4pIHtcbiAgICBsZXQgcmVtYWluZGVyID0gaWJhbjtcbiAgICBsZXQgYmxvY2s7XG4gICAgd2hpbGUgKHJlbWFpbmRlci5sZW5ndGggPiAyKSB7XG4gICAgICAgIGJsb2NrID0gcmVtYWluZGVyLnNsaWNlKDAsIDkpO1xuICAgICAgICByZW1haW5kZXIgPSBwYXJzZUludChibG9jaywgMTApICUgOTcgKyByZW1haW5kZXIuc2xpY2UoYmxvY2subGVuZ3RoKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlSW50KHJlbWFpbmRlciwgMTApICUgOTc7XG59O1xuLyoqXG4gKiBUaGlzIHByb3RvdHlwZSBzaG91bGQgYmUgdXNlZCB0byBjcmVhdGUgaWJhbiBvYmplY3QgZnJvbSBpYmFuIGNvcnJlY3Qgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGliYW5cbiAqL1xuY2xhc3MgSWJhbiB7XG4gICAgY29uc3RydWN0b3IoaWJhbikge1xuICAgICAgICB0aGlzLl9pYmFuID0gaWJhbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIHVzZWQgdG8gY3JlYXRlIGFuIGV0aGVyZXVtIGFkZHJlc3MgZnJvbSBhIGRpcmVjdCBpYmFuIGFkZHJlc3NcbiAgICAgKlxuICAgICAqIEBtZXRob2QgdG9BZGRyZXNzXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGliYW4gYWRkcmVzc1xuICAgICAqIEByZXR1cm4ge1N0cmluZ30gdGhlIGV0aGVyZXVtIGFkZHJlc3NcbiAgICAgKi9cbiAgICBzdGF0aWMgdG9BZGRyZXNzKGliKSB7XG4gICAgICAgIGliID0gbmV3IEliYW4oaWIpO1xuICAgICAgICBpZiAoIWliLmlzRGlyZWN0KCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSUJBTiBpcyBpbmRpcmVjdCBhbmQgY2FuXFwndCBiZSBjb252ZXJ0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaWIudG9BZGRyZXNzKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSB1c2VkIHRvIGNyZWF0ZSBpYmFuIGFkZHJlc3MgZnJvbSBhbiBldGhlcmV1bSBhZGRyZXNzXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHRvSWJhblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBhZGRyZXNzXG4gICAgICogQHJldHVybiB7U3RyaW5nfSB0aGUgSUJBTiBhZGRyZXNzXG4gICAgICovXG4gICAgc3RhdGljIHRvSWJhbihhZGRyZXNzKSB7XG4gICAgICAgIHJldHVybiBJYmFuLmZyb21BZGRyZXNzKGFkZHJlc3MpLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSB1c2VkIHRvIGNyZWF0ZSBpYmFuIG9iamVjdCBmcm9tIGFuIGV0aGVyZXVtIGFkZHJlc3NcbiAgICAgKlxuICAgICAqIEBtZXRob2QgZnJvbUFkZHJlc3NcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYWRkcmVzc1xuICAgICAqIEByZXR1cm4ge0liYW59IHRoZSBJQkFOIG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tQWRkcmVzcyhhZGRyZXNzKSB7XG4gICAgICAgIGlmICghdXRpbHMuaXNBZGRyZXNzKGFkZHJlc3MpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb3ZpZGVkIGFkZHJlc3MgaXMgbm90IGEgdmFsaWQgYWRkcmVzczogJyArIGFkZHJlc3MpO1xuICAgICAgICB9XG4gICAgICAgIGFkZHJlc3MgPSBhZGRyZXNzLnJlcGxhY2UoJzB4JywgJycpLnJlcGxhY2UoJzBYJywgJycpO1xuICAgICAgICBjb25zdCBhc0JuID0gbmV3IEJpZ051bWJlcihhZGRyZXNzLCAxNik7XG4gICAgICAgIGNvbnN0IGJhc2UzNiA9IGFzQm4udG9TdHJpbmcoMzYpO1xuICAgICAgICBjb25zdCBwYWRkZWQgPSBsZWZ0UGFkKGJhc2UzNiwgMTUpO1xuICAgICAgICByZXR1cm4gSWJhbi5mcm9tQmJhbihwYWRkZWQudG9VcHBlckNhc2UoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgdGhlIHBhc3NlZCBCQkFOIHRvIGFuIElCQU4gZm9yIHRoaXMgY291bnRyeSBzcGVjaWZpY2F0aW9uLlxuICAgICAqIFBsZWFzZSBub3RlIHRoYXQgPGk+XCJnZW5lcmF0aW9uIG9mIHRoZSBJQkFOIHNoYWxsIGJlIHRoZSBleGNsdXNpdmUgcmVzcG9uc2liaWxpdHkgb2YgdGhlIGJhbmsvYnJhbmNoIHNlcnZpY2luZyB0aGUgYWNjb3VudFwiPC9pPi5cbiAgICAgKiBUaGlzIG1ldGhvZCBpbXBsZW1lbnRzIHRoZSBwcmVmZXJyZWQgYWxnb3JpdGhtIGRlc2NyaWJlZCBpbiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0ludGVybmF0aW9uYWxfQmFua19BY2NvdW50X051bWJlciNHZW5lcmF0aW5nX0lCQU5fY2hlY2tfZGlnaXRzXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGZyb21CYmFuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGJiYW4gdGhlIEJCQU4gdG8gY29udmVydCB0byBJQkFOXG4gICAgICogQHJldHVybnMge0liYW59IHRoZSBJQkFOIG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tQmJhbihiYmFuKSB7XG4gICAgICAgIGNvbnN0IGNvdW50cnlDb2RlID0gJ1hFJztcbiAgICAgICAgY29uc3QgcmVtYWluZGVyID0gbW9kOTcxMChpc28xMzYxNlByZXBhcmUoY291bnRyeUNvZGUgKyAnMDAnICsgYmJhbikpO1xuICAgICAgICBjb25zdCBjaGVja0RpZ2l0ID0gKCcwJyArICg5OCAtIHJlbWFpbmRlcikpLnNsaWNlKC0yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBJYmFuKGNvdW50cnlDb2RlICsgY2hlY2tEaWdpdCArIGJiYW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTaG91bGQgYmUgdXNlZCB0byBjcmVhdGUgSUJBTiBvYmplY3QgZm9yIGdpdmVuIGluc3RpdHV0aW9uIGFuZCBpZGVudGlmaWVyXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGNyZWF0ZUluZGlyZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMsIHJlcXVpcmVkIG9wdGlvbnMgYXJlIFwiaW5zdGl0dXRpb25cIiBhbmQgXCJpZGVudGlmaWVyXCJcbiAgICAgKiBAcmV0dXJuIHtJYmFufSB0aGUgSUJBTiBvYmplY3RcbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlSW5kaXJlY3Qob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gSWJhbi5mcm9tQmJhbignRVRIJyArIG9wdGlvbnMuaW5zdGl0dXRpb24gKyBvcHRpb25zLmlkZW50aWZpZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgdXNlZCB0byBjaGVjayBpZiBnaXZlbiBzdHJpbmcgaXMgdmFsaWQgaWJhbiBvYmplY3RcbiAgICAgKlxuICAgICAqIEBtZXRob2QgaXNWYWxpZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpYmFuIHN0cmluZ1xuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgaXQgaXMgdmFsaWQgSUJBTlxuICAgICAqL1xuICAgIHN0YXRpYyBpc1ZhbGlkKGliYW4pIHtcbiAgICAgICAgY29uc3QgaSA9IG5ldyBJYmFuKGliYW4pO1xuICAgICAgICByZXR1cm4gaS5pc1ZhbGlkKCk7XG4gICAgfVxuICAgIDtcbiAgICAvKipcbiAgICAgKiBTaG91bGQgYmUgY2FsbGVkIHRvIGNoZWNrIGlmIGliYW4gaXMgY29ycmVjdFxuICAgICAqXG4gICAgICogQG1ldGhvZCBpc1ZhbGlkXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IHRydWUgaWYgaXQgaXMsIG90aGVyd2lzZSBmYWxzZVxuICAgICAqL1xuICAgIGlzVmFsaWQoKSB7XG4gICAgICAgIHJldHVybiAvXlhFWzAtOV17Mn0oRVRIWzAtOUEtWl17MTN9fFswLTlBLVpdezMwLDMxfSkkLy50ZXN0KHRoaXMuX2liYW4pICYmXG4gICAgICAgICAgICBtb2Q5NzEwKGlzbzEzNjE2UHJlcGFyZSh0aGlzLl9pYmFuKSkgPT09IDE7XG4gICAgfVxuICAgIDtcbiAgICAvKipcbiAgICAgKiBTaG91bGQgYmUgY2FsbGVkIHRvIGNoZWNrIGlmIGliYW4gbnVtYmVyIGlzIGRpcmVjdFxuICAgICAqXG4gICAgICogQG1ldGhvZCBpc0RpcmVjdFxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSB0cnVlIGlmIGl0IGlzLCBvdGhlcndpc2UgZmFsc2VcbiAgICAgKi9cbiAgICBpc0RpcmVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2liYW4ubGVuZ3RoID09PSAzNCB8fCB0aGlzLl9pYmFuLmxlbmd0aCA9PT0gMzU7XG4gICAgfVxuICAgIDtcbiAgICAvKipcbiAgICAgKiBTaG91bGQgYmUgY2FsbGVkIHRvIGNoZWNrIGlmIGliYW4gbnVtYmVyIGlmIGluZGlyZWN0XG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGlzSW5kaXJlY3RcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpZiBpdCBpcywgb3RoZXJ3aXNlIGZhbHNlXG4gICAgICovXG4gICAgaXNJbmRpcmVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2liYW4ubGVuZ3RoID09PSAyMDtcbiAgICB9XG4gICAgO1xuICAgIC8qKlxuICAgICAqIFNob3VsZCBiZSBjYWxsZWQgdG8gZ2V0IGliYW4gY2hlY2tzdW1cbiAgICAgKiBVc2VzIHRoZSBtb2QtOTctMTAgY2hlY2tzdW1taW5nIHByb3RvY29sIChJU08vSUVDIDcwNjQ6MjAwMylcbiAgICAgKlxuICAgICAqIEBtZXRob2QgY2hlY2tzdW1cbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBjaGVja3N1bVxuICAgICAqL1xuICAgIGNoZWNrc3VtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faWJhbi5zdWJzdHIoMiwgMik7XG4gICAgfVxuICAgIDtcbiAgICAvKipcbiAgICAgKiBTaG91bGQgYmUgY2FsbGVkIHRvIGdldCBpbnN0aXR1dGlvbiBpZGVudGlmaWVyXG4gICAgICogZWcuIFhSRUdcbiAgICAgKlxuICAgICAqIEBtZXRob2QgaW5zdGl0dXRpb25cbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBpbnN0aXR1dGlvbiBpZGVudGlmaWVyXG4gICAgICovXG4gICAgaW5zdGl0dXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzSW5kaXJlY3QoKSA/IHRoaXMuX2liYW4uc3Vic3RyKDcsIDQpIDogJyc7XG4gICAgfVxuICAgIDtcbiAgICAvKipcbiAgICAgKiBTaG91bGQgYmUgY2FsbGVkIHRvIGdldCBjbGllbnQgaWRlbnRpZmllciB3aXRoaW4gaW5zdGl0dXRpb25cbiAgICAgKiBlZy4gR0FWT0ZZT1JLXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGNsaWVudFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IGNsaWVudCBpZGVudGlmaWVyXG4gICAgICovXG4gICAgY2xpZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0luZGlyZWN0KCkgPyB0aGlzLl9pYmFuLnN1YnN0cigxMSkgOiAnJztcbiAgICB9XG4gICAgO1xuICAgIC8qKlxuICAgICAqIFNob3VsZCBiZSBjYWxsZWQgdG8gZ2V0IGNsaWVudCBkaXJlY3QgYWRkcmVzc1xuICAgICAqXG4gICAgICogQG1ldGhvZCB0b0FkZHJlc3NcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBldGhlcmV1bSBhZGRyZXNzXG4gICAgICovXG4gICAgdG9BZGRyZXNzKCkge1xuICAgICAgICBpZiAodGhpcy5pc0RpcmVjdCgpKSB7XG4gICAgICAgICAgICBjb25zdCBiYXNlMzYgPSB0aGlzLl9pYmFuLnN1YnN0cig0KTtcbiAgICAgICAgICAgIGNvbnN0IGFzQm4gPSBuZXcgQmlnTnVtYmVyKGJhc2UzNiwgMzYpO1xuICAgICAgICAgICAgcmV0dXJuIHV0aWxzLnRvQ2hlY2tzdW1BZGRyZXNzKGFzQm4udG9TdHJpbmcoMTYsIDIwKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICA7XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pYmFuO1xuICAgIH1cbiAgICA7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEliYW47XG4iLCIoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVXRpbHNcbiAgZnVuY3Rpb24gYXNzZXJ0ICh2YWwsIG1zZykge1xuICAgIGlmICghdmFsKSB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG4gIH1cblxuICAvLyBDb3VsZCB1c2UgYGluaGVyaXRzYCBtb2R1bGUsIGJ1dCBkb24ndCB3YW50IHRvIG1vdmUgZnJvbSBzaW5nbGUgZmlsZVxuICAvLyBhcmNoaXRlY3R1cmUgeWV0LlxuICBmdW5jdGlvbiBpbmhlcml0cyAoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge307XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTtcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpO1xuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcjtcbiAgfVxuXG4gIC8vIEJOXG5cbiAgZnVuY3Rpb24gQk4gKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKEJOLmlzQk4obnVtYmVyKSkge1xuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB0aGlzLndvcmRzID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgICAvLyBSZWR1Y3Rpb24gY29udGV4dFxuICAgIHRoaXMucmVkID0gbnVsbDtcblxuICAgIGlmIChudW1iZXIgIT09IG51bGwpIHtcbiAgICAgIGlmIChiYXNlID09PSAnbGUnIHx8IGJhc2UgPT09ICdiZScpIHtcbiAgICAgICAgZW5kaWFuID0gYmFzZTtcbiAgICAgICAgYmFzZSA9IDEwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pbml0KG51bWJlciB8fCAwLCBiYXNlIHx8IDEwLCBlbmRpYW4gfHwgJ2JlJyk7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gQk47XG4gIH0gZWxzZSB7XG4gICAgZXhwb3J0cy5CTiA9IEJOO1xuICB9XG5cbiAgQk4uQk4gPSBCTjtcbiAgQk4ud29yZFNpemUgPSAyNjtcblxuICB2YXIgQnVmZmVyO1xuICB0cnkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LkJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIEJ1ZmZlciA9IHdpbmRvdy5CdWZmZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuXG4gIEJOLmlzQk4gPSBmdW5jdGlvbiBpc0JOIChudW0pIHtcbiAgICBpZiAobnVtIGluc3RhbmNlb2YgQk4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBudW0gIT09IG51bGwgJiYgdHlwZW9mIG51bSA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG51bS5jb25zdHJ1Y3Rvci53b3JkU2l6ZSA9PT0gQk4ud29yZFNpemUgJiYgQXJyYXkuaXNBcnJheShudW0ud29yZHMpO1xuICB9O1xuXG4gIEJOLm1heCA9IGZ1bmN0aW9uIG1heCAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpID4gMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLm1pbiA9IGZ1bmN0aW9uIG1pbiAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpIDwgMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdE51bWJlcihudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdEFycmF5KG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIGJhc2UgPSAxNjtcbiAgICB9XG4gICAgYXNzZXJ0KGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpO1xuXG4gICAgbnVtYmVyID0gbnVtYmVyLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBpZiAobnVtYmVyWzBdID09PSAnLScpIHtcbiAgICAgIHN0YXJ0Kys7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICBpZiAoc3RhcnQgPCBudW1iZXIubGVuZ3RoKSB7XG4gICAgICBpZiAoYmFzZSA9PT0gMTYpIHtcbiAgICAgICAgdGhpcy5fcGFyc2VIZXgobnVtYmVyLCBzdGFydCwgZW5kaWFuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3BhcnNlQmFzZShudW1iZXIsIGJhc2UsIHN0YXJ0KTtcbiAgICAgICAgaWYgKGVuZGlhbiA9PT0gJ2xlJykge1xuICAgICAgICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXROdW1iZXIgPSBmdW5jdGlvbiBfaW5pdE51bWJlciAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICBudW1iZXIgPSAtbnVtYmVyO1xuICAgIH1cbiAgICBpZiAobnVtYmVyIDwgMHg0MDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWyBudW1iZXIgJiAweDNmZmZmZmYgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9IGVsc2UgaWYgKG51bWJlciA8IDB4MTAwMDAwMDAwMDAwMDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbXG4gICAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgICAgKG51bWJlciAvIDB4NDAwMDAwMCkgJiAweDNmZmZmZmZcbiAgICAgIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChudW1iZXIgPCAweDIwMDAwMDAwMDAwMDAwKTsgLy8gMiBeIDUzICh1bnNhZmUpXG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmLFxuICAgICAgICAxXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAzO1xuICAgIH1cblxuICAgIGlmIChlbmRpYW4gIT09ICdsZScpIHJldHVybjtcblxuICAgIC8vIFJldmVyc2UgdGhlIGJ5dGVzXG4gICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdEFycmF5ID0gZnVuY3Rpb24gX2luaXRBcnJheSAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICAvLyBQZXJoYXBzIGEgVWludDhBcnJheVxuICAgIGFzc2VydCh0eXBlb2YgbnVtYmVyLmxlbmd0aCA9PT0gJ251bWJlcicpO1xuICAgIGlmIChudW1iZXIubGVuZ3RoIDw9IDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbIDAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKG51bWJlci5sZW5ndGggLyAzKTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIHZhciBqLCB3O1xuICAgIHZhciBvZmYgPSAwO1xuICAgIGlmIChlbmRpYW4gPT09ICdiZScpIHtcbiAgICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSAxLCBqID0gMDsgaSA+PSAwOyBpIC09IDMpIHtcbiAgICAgICAgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSAtIDFdIDw8IDgpIHwgKG51bWJlcltpIC0gMl0gPDwgMTYpO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gKHcgPj4+ICgyNiAtIG9mZikpICYgMHgzZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjQ7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbmRpYW4gPT09ICdsZScpIHtcbiAgICAgIGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbnVtYmVyLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgKyAxXSA8PCA4KSB8IChudW1iZXJbaSArIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlSGV4NEJpdHMgKHN0cmluZywgaW5kZXgpIHtcbiAgICB2YXIgYyA9IHN0cmluZy5jaGFyQ29kZUF0KGluZGV4KTtcbiAgICAvLyAnQScgLSAnRidcbiAgICBpZiAoYyA+PSA2NSAmJiBjIDw9IDcwKSB7XG4gICAgICByZXR1cm4gYyAtIDU1O1xuICAgIC8vICdhJyAtICdmJ1xuICAgIH0gZWxzZSBpZiAoYyA+PSA5NyAmJiBjIDw9IDEwMikge1xuICAgICAgcmV0dXJuIGMgLSA4NztcbiAgICAvLyAnMCcgLSAnOSdcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChjIC0gNDgpICYgMHhmO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlSGV4Qnl0ZSAoc3RyaW5nLCBsb3dlckJvdW5kLCBpbmRleCkge1xuICAgIHZhciByID0gcGFyc2VIZXg0Qml0cyhzdHJpbmcsIGluZGV4KTtcbiAgICBpZiAoaW5kZXggLSAxID49IGxvd2VyQm91bmQpIHtcbiAgICAgIHIgfD0gcGFyc2VIZXg0Qml0cyhzdHJpbmcsIGluZGV4IC0gMSkgPDwgNDtcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlSGV4ID0gZnVuY3Rpb24gX3BhcnNlSGV4IChudW1iZXIsIHN0YXJ0LCBlbmRpYW4pIHtcbiAgICAvLyBDcmVhdGUgcG9zc2libHkgYmlnZ2VyIGFycmF5IHRvIGVuc3VyZSB0aGF0IGl0IGZpdHMgdGhlIG51bWJlclxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKChudW1iZXIubGVuZ3RoIC0gc3RhcnQpIC8gNik7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICAvLyAyNC1iaXRzIGNodW5rc1xuICAgIHZhciBvZmYgPSAwO1xuICAgIHZhciBqID0gMDtcblxuICAgIHZhciB3O1xuICAgIGlmIChlbmRpYW4gPT09ICdiZScpIHtcbiAgICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSAxOyBpID49IHN0YXJ0OyBpIC09IDIpIHtcbiAgICAgICAgdyA9IHBhcnNlSGV4Qnl0ZShudW1iZXIsIHN0YXJ0LCBpKSA8PCBvZmY7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gdyAmIDB4M2ZmZmZmZjtcbiAgICAgICAgaWYgKG9mZiA+PSAxOCkge1xuICAgICAgICAgIG9mZiAtPSAxODtcbiAgICAgICAgICBqICs9IDE7XG4gICAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSB3ID4+PiAyNjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvZmYgKz0gODtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcGFyc2VMZW5ndGggPSBudW1iZXIubGVuZ3RoIC0gc3RhcnQ7XG4gICAgICBmb3IgKGkgPSBwYXJzZUxlbmd0aCAlIDIgPT09IDAgPyBzdGFydCArIDEgOiBzdGFydDsgaSA8IG51bWJlci5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICB3ID0gcGFyc2VIZXhCeXRlKG51bWJlciwgc3RhcnQsIGkpIDw8IG9mZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSB3ICYgMHgzZmZmZmZmO1xuICAgICAgICBpZiAob2ZmID49IDE4KSB7XG4gICAgICAgICAgb2ZmIC09IDE4O1xuICAgICAgICAgIGogKz0gMTtcbiAgICAgICAgICB0aGlzLndvcmRzW2pdIHw9IHcgPj4+IDI2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9mZiArPSA4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlQmFzZSAoc3RyLCBzdGFydCwgZW5kLCBtdWwpIHtcbiAgICB2YXIgciA9IDA7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA0ODtcblxuICAgICAgciAqPSBtdWw7XG5cbiAgICAgIC8vICdhJ1xuICAgICAgaWYgKGMgPj0gNDkpIHtcbiAgICAgICAgciArPSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3KSB7XG4gICAgICAgIHIgKz0gYyAtIDE3ICsgMHhhO1xuXG4gICAgICAvLyAnMCcgLSAnOSdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHIgKz0gYztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlQmFzZSA9IGZ1bmN0aW9uIF9wYXJzZUJhc2UgKG51bWJlciwgYmFzZSwgc3RhcnQpIHtcbiAgICAvLyBJbml0aWFsaXplIGFzIHplcm9cbiAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgdGhpcy5sZW5ndGggPSAxO1xuXG4gICAgLy8gRmluZCBsZW5ndGggb2YgbGltYiBpbiBiYXNlXG4gICAgZm9yICh2YXIgbGltYkxlbiA9IDAsIGxpbWJQb3cgPSAxOyBsaW1iUG93IDw9IDB4M2ZmZmZmZjsgbGltYlBvdyAqPSBiYXNlKSB7XG4gICAgICBsaW1iTGVuKys7XG4gICAgfVxuICAgIGxpbWJMZW4tLTtcbiAgICBsaW1iUG93ID0gKGxpbWJQb3cgLyBiYXNlKSB8IDA7XG5cbiAgICB2YXIgdG90YWwgPSBudW1iZXIubGVuZ3RoIC0gc3RhcnQ7XG4gICAgdmFyIG1vZCA9IHRvdGFsICUgbGltYkxlbjtcbiAgICB2YXIgZW5kID0gTWF0aC5taW4odG90YWwsIHRvdGFsIC0gbW9kKSArIHN0YXJ0O1xuXG4gICAgdmFyIHdvcmQgPSAwO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBsaW1iTGVuKSB7XG4gICAgICB3b3JkID0gcGFyc2VCYXNlKG51bWJlciwgaSwgaSArIGxpbWJMZW4sIGJhc2UpO1xuXG4gICAgICB0aGlzLmltdWxuKGxpbWJQb3cpO1xuICAgICAgaWYgKHRoaXMud29yZHNbMF0gKyB3b3JkIDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lhZGRuKHdvcmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtb2QgIT09IDApIHtcbiAgICAgIHZhciBwb3cgPSAxO1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIG51bWJlci5sZW5ndGgsIGJhc2UpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbW9kOyBpKyspIHtcbiAgICAgICAgcG93ICo9IGJhc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW11bG4ocG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5IChkZXN0KSB7XG4gICAgZGVzdC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZXN0LndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICB9XG4gICAgZGVzdC5sZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICBkZXN0Lm5lZ2F0aXZlID0gdGhpcy5uZWdhdGl2ZTtcbiAgICBkZXN0LnJlZCA9IHRoaXMucmVkO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lICgpIHtcbiAgICB2YXIgciA9IG5ldyBCTihudWxsKTtcbiAgICB0aGlzLmNvcHkocik7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9leHBhbmQgPSBmdW5jdGlvbiBfZXhwYW5kIChzaXplKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgc2l6ZSkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFJlbW92ZSBsZWFkaW5nIGAwYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3RyaXAgPSBmdW5jdGlvbiBzdHJpcCAoKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoID4gMSAmJiB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIHRoaXMubGVuZ3RoLS07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fbm9ybVNpZ24gPSBmdW5jdGlvbiBfbm9ybVNpZ24gKCkge1xuICAgIC8vIC0wID0gMFxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICByZXR1cm4gKHRoaXMucmVkID8gJzxCTi1SOiAnIDogJzxCTjogJykgKyB0aGlzLnRvU3RyaW5nKDE2KSArICc+JztcbiAgfTtcblxuICAvKlxuXG4gIHZhciB6ZXJvcyA9IFtdO1xuICB2YXIgZ3JvdXBTaXplcyA9IFtdO1xuICB2YXIgZ3JvdXBCYXNlcyA9IFtdO1xuXG4gIHZhciBzID0gJyc7XG4gIHZhciBpID0gLTE7XG4gIHdoaWxlICgrK2kgPCBCTi53b3JkU2l6ZSkge1xuICAgIHplcm9zW2ldID0gcztcbiAgICBzICs9ICcwJztcbiAgfVxuICBncm91cFNpemVzWzBdID0gMDtcbiAgZ3JvdXBTaXplc1sxXSA9IDA7XG4gIGdyb3VwQmFzZXNbMF0gPSAwO1xuICBncm91cEJhc2VzWzFdID0gMDtcbiAgdmFyIGJhc2UgPSAyIC0gMTtcbiAgd2hpbGUgKCsrYmFzZSA8IDM2ICsgMSkge1xuICAgIHZhciBncm91cFNpemUgPSAwO1xuICAgIHZhciBncm91cEJhc2UgPSAxO1xuICAgIHdoaWxlIChncm91cEJhc2UgPCAoMSA8PCBCTi53b3JkU2l6ZSkgLyBiYXNlKSB7XG4gICAgICBncm91cEJhc2UgKj0gYmFzZTtcbiAgICAgIGdyb3VwU2l6ZSArPSAxO1xuICAgIH1cbiAgICBncm91cFNpemVzW2Jhc2VdID0gZ3JvdXBTaXplO1xuICAgIGdyb3VwQmFzZXNbYmFzZV0gPSBncm91cEJhc2U7XG4gIH1cblxuICAqL1xuXG4gIHZhciB6ZXJvcyA9IFtcbiAgICAnJyxcbiAgICAnMCcsXG4gICAgJzAwJyxcbiAgICAnMDAwJyxcbiAgICAnMDAwMCcsXG4gICAgJzAwMDAwJyxcbiAgICAnMDAwMDAwJyxcbiAgICAnMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCdcbiAgXTtcblxuICB2YXIgZ3JvdXBTaXplcyA9IFtcbiAgICAwLCAwLFxuICAgIDI1LCAxNiwgMTIsIDExLCAxMCwgOSwgOCxcbiAgICA4LCA3LCA3LCA3LCA3LCA2LCA2LFxuICAgIDYsIDYsIDYsIDYsIDYsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1XG4gIF07XG5cbiAgdmFyIGdyb3VwQmFzZXMgPSBbXG4gICAgMCwgMCxcbiAgICAzMzU1NDQzMiwgNDMwNDY3MjEsIDE2Nzc3MjE2LCA0ODgyODEyNSwgNjA0NjYxNzYsIDQwMzUzNjA3LCAxNjc3NzIxNixcbiAgICA0MzA0NjcyMSwgMTAwMDAwMDAsIDE5NDg3MTcxLCAzNTgzMTgwOCwgNjI3NDg1MTcsIDc1Mjk1MzYsIDExMzkwNjI1LFxuICAgIDE2Nzc3MjE2LCAyNDEzNzU2OSwgMzQwMTIyMjQsIDQ3MDQ1ODgxLCA2NDAwMDAwMCwgNDA4NDEwMSwgNTE1MzYzMixcbiAgICA2NDM2MzQzLCA3OTYyNjI0LCA5NzY1NjI1LCAxMTg4MTM3NiwgMTQzNDg5MDcsIDE3MjEwMzY4LCAyMDUxMTE0OSxcbiAgICAyNDMwMDAwMCwgMjg2MjkxNTEsIDMzNTU0NDMyLCAzOTEzNTM5MywgNDU0MzU0MjQsIDUyNTIxODc1LCA2MDQ2NjE3NlxuICBdO1xuXG4gIEJOLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nIChiYXNlLCBwYWRkaW5nKSB7XG4gICAgYmFzZSA9IGJhc2UgfHwgMTA7XG4gICAgcGFkZGluZyA9IHBhZGRpbmcgfCAwIHx8IDE7XG5cbiAgICB2YXIgb3V0O1xuICAgIGlmIChiYXNlID09PSAxNiB8fCBiYXNlID09PSAnaGV4Jykge1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgb2ZmID0gMDtcbiAgICAgIHZhciBjYXJyeSA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldO1xuICAgICAgICB2YXIgd29yZCA9ICgoKHcgPDwgb2ZmKSB8IGNhcnJ5KSAmIDB4ZmZmZmZmKS50b1N0cmluZygxNik7XG4gICAgICAgIGNhcnJ5ID0gKHcgPj4+ICgyNCAtIG9mZikpICYgMHhmZmZmZmY7XG4gICAgICAgIGlmIChjYXJyeSAhPT0gMCB8fCBpICE9PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1s2IC0gd29yZC5sZW5ndGhdICsgd29yZCArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSB3b3JkICsgb3V0O1xuICAgICAgICB9XG4gICAgICAgIG9mZiArPSAyO1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICAgIG91dCA9IGNhcnJ5LnRvU3RyaW5nKDE2KSArIG91dDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChvdXQubGVuZ3RoICUgcGFkZGluZyAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnLScgKyBvdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KSB7XG4gICAgICAvLyB2YXIgZ3JvdXBTaXplID0gTWF0aC5mbG9vcihCTi53b3JkU2l6ZSAqIE1hdGguTE4yIC8gTWF0aC5sb2coYmFzZSkpO1xuICAgICAgdmFyIGdyb3VwU2l6ZSA9IGdyb3VwU2l6ZXNbYmFzZV07XG4gICAgICAvLyB2YXIgZ3JvdXBCYXNlID0gTWF0aC5wb3coYmFzZSwgZ3JvdXBTaXplKTtcbiAgICAgIHZhciBncm91cEJhc2UgPSBncm91cEJhc2VzW2Jhc2VdO1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgYyA9IHRoaXMuY2xvbmUoKTtcbiAgICAgIGMubmVnYXRpdmUgPSAwO1xuICAgICAgd2hpbGUgKCFjLmlzWmVybygpKSB7XG4gICAgICAgIHZhciByID0gYy5tb2RuKGdyb3VwQmFzZSkudG9TdHJpbmcoYmFzZSk7XG4gICAgICAgIGMgPSBjLmlkaXZuKGdyb3VwQmFzZSk7XG5cbiAgICAgICAgaWYgKCFjLmlzWmVybygpKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbZ3JvdXBTaXplIC0gci5sZW5ndGhdICsgciArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSByICsgb3V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBhc3NlcnQoZmFsc2UsICdCYXNlIHNob3VsZCBiZSBiZXR3ZWVuIDIgYW5kIDM2Jyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIgKCkge1xuICAgIHZhciByZXQgPSB0aGlzLndvcmRzWzBdO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMikge1xuICAgICAgcmV0ICs9IHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDA7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA9PT0gMyAmJiB0aGlzLndvcmRzWzJdID09PSAweDAxKSB7XG4gICAgICAvLyBOT1RFOiBhdCB0aGlzIHN0YWdlIGl0IGlzIGtub3duIHRoYXQgdGhlIHRvcCBiaXQgaXMgc2V0XG4gICAgICByZXQgKz0gMHgxMDAwMDAwMDAwMDAwMCArICh0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gMikge1xuICAgICAgYXNzZXJ0KGZhbHNlLCAnTnVtYmVyIGNhbiBvbmx5IHNhZmVseSBzdG9yZSB1cCB0byA1MyBiaXRzJyk7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgPyAtcmV0IDogcmV0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKDE2KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbiB0b0J1ZmZlciAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpO1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEJ1ZmZlciwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShBcnJheSwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5TGlrZSA9IGZ1bmN0aW9uIHRvQXJyYXlMaWtlIChBcnJheVR5cGUsIGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0aGlzLmJ5dGVMZW5ndGgoKTtcbiAgICB2YXIgcmVxTGVuZ3RoID0gbGVuZ3RoIHx8IE1hdGgubWF4KDEsIGJ5dGVMZW5ndGgpO1xuICAgIGFzc2VydChieXRlTGVuZ3RoIDw9IHJlcUxlbmd0aCwgJ2J5dGUgYXJyYXkgbG9uZ2VyIHRoYW4gZGVzaXJlZCBsZW5ndGgnKTtcbiAgICBhc3NlcnQocmVxTGVuZ3RoID4gMCwgJ1JlcXVlc3RlZCBhcnJheSBsZW5ndGggPD0gMCcpO1xuXG4gICAgdGhpcy5zdHJpcCgpO1xuICAgIHZhciBsaXR0bGVFbmRpYW4gPSBlbmRpYW4gPT09ICdsZSc7XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheVR5cGUocmVxTGVuZ3RoKTtcblxuICAgIHZhciBiLCBpO1xuICAgIHZhciBxID0gdGhpcy5jbG9uZSgpO1xuICAgIGlmICghbGl0dGxlRW5kaWFuKSB7XG4gICAgICAvLyBBc3N1bWUgYmlnLWVuZGlhblxuICAgICAgZm9yIChpID0gMDsgaSA8IHJlcUxlbmd0aCAtIGJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyAhcS5pc1plcm8oKTsgaSsrKSB7XG4gICAgICAgIGIgPSBxLmFuZGxuKDB4ZmYpO1xuICAgICAgICBxLml1c2hybig4KTtcblxuICAgICAgICByZXNbcmVxTGVuZ3RoIC0gaSAtIDFdID0gYjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW2ldID0gYjtcbiAgICAgIH1cblxuICAgICAgZm9yICg7IGkgPCByZXFMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgaWYgKE1hdGguY2x6MzIpIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHJldHVybiAzMiAtIE1hdGguY2x6MzIodyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHZhciB0ID0gdztcbiAgICAgIHZhciByID0gMDtcbiAgICAgIGlmICh0ID49IDB4MTAwMCkge1xuICAgICAgICByICs9IDEzO1xuICAgICAgICB0ID4+Pj0gMTM7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDQwKSB7XG4gICAgICAgIHIgKz0gNztcbiAgICAgICAgdCA+Pj49IDc7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDgpIHtcbiAgICAgICAgciArPSA0O1xuICAgICAgICB0ID4+Pj0gNDtcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4MDIpIHtcbiAgICAgICAgciArPSAyO1xuICAgICAgICB0ID4+Pj0gMjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByICsgdDtcbiAgICB9O1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl96ZXJvQml0cyA9IGZ1bmN0aW9uIF96ZXJvQml0cyAodykge1xuICAgIC8vIFNob3J0LWN1dFxuICAgIGlmICh3ID09PSAwKSByZXR1cm4gMjY7XG5cbiAgICB2YXIgdCA9IHc7XG4gICAgdmFyIHIgPSAwO1xuICAgIGlmICgodCAmIDB4MWZmZikgPT09IDApIHtcbiAgICAgIHIgKz0gMTM7XG4gICAgICB0ID4+Pj0gMTM7XG4gICAgfVxuICAgIGlmICgodCAmIDB4N2YpID09PSAwKSB7XG4gICAgICByICs9IDc7XG4gICAgICB0ID4+Pj0gNztcbiAgICB9XG4gICAgaWYgKCh0ICYgMHhmKSA9PT0gMCkge1xuICAgICAgciArPSA0O1xuICAgICAgdCA+Pj49IDQ7XG4gICAgfVxuICAgIGlmICgodCAmIDB4MykgPT09IDApIHtcbiAgICAgIHIgKz0gMjtcbiAgICAgIHQgPj4+PSAyO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDEpID09PSAwKSB7XG4gICAgICByKys7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIC8vIFJldHVybiBudW1iZXIgb2YgdXNlZCBiaXRzIGluIGEgQk5cbiAgQk4ucHJvdG90eXBlLmJpdExlbmd0aCA9IGZ1bmN0aW9uIGJpdExlbmd0aCAoKSB7XG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV07XG4gICAgdmFyIGhpID0gdGhpcy5fY291bnRCaXRzKHcpO1xuICAgIHJldHVybiAodGhpcy5sZW5ndGggLSAxKSAqIDI2ICsgaGk7XG4gIH07XG5cbiAgZnVuY3Rpb24gdG9CaXRBcnJheSAobnVtKSB7XG4gICAgdmFyIHcgPSBuZXcgQXJyYXkobnVtLmJpdExlbmd0aCgpKTtcblxuICAgIGZvciAodmFyIGJpdCA9IDA7IGJpdCA8IHcubGVuZ3RoOyBiaXQrKykge1xuICAgICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgICAgd1tiaXRdID0gKG51bS53b3Jkc1tvZmZdICYgKDEgPDwgd2JpdCkpID4+PiB3Yml0O1xuICAgIH1cblxuICAgIHJldHVybiB3O1xuICB9XG5cbiAgLy8gTnVtYmVyIG9mIHRyYWlsaW5nIHplcm8gYml0c1xuICBCTi5wcm90b3R5cGUuemVyb0JpdHMgPSBmdW5jdGlvbiB6ZXJvQml0cyAoKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiAwO1xuXG4gICAgdmFyIHIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGIgPSB0aGlzLl96ZXJvQml0cyh0aGlzLndvcmRzW2ldKTtcbiAgICAgIHIgKz0gYjtcbiAgICAgIGlmIChiICE9PSAyNikgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ieXRlTGVuZ3RoID0gZnVuY3Rpb24gYnl0ZUxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmJpdExlbmd0aCgpIC8gOCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvVHdvcyA9IGZ1bmN0aW9uIHRvVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWJzKCkuaW5vdG4od2lkdGgpLmlhZGRuKDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tVHdvcyA9IGZ1bmN0aW9uIGZyb21Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLnRlc3RuKHdpZHRoIC0gMSkpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vdG4od2lkdGgpLmlhZGRuKDEpLmluZWcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNOZWcgPSBmdW5jdGlvbiBpc05lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubmVnYXRpdmUgIT09IDA7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYFxuICBCTi5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmluZWcoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW5lZyA9IGZ1bmN0aW9uIGluZWcgKCkge1xuICAgIGlmICghdGhpcy5pc1plcm8oKSkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdW9yID0gZnVuY3Rpb24gaXVvciAobnVtKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldIHwgbnVtLndvcmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlvciA9IGZ1bmN0aW9uIGlvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVvcihudW0pO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5vciA9IGZ1bmN0aW9uIG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pb3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVvciA9IGZ1bmN0aW9uIHVvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdW9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdWFuZCA9IGZ1bmN0aW9uIGl1YW5kIChudW0pIHtcbiAgICAvLyBiID0gbWluLWxlbmd0aChudW0sIHRoaXMpXG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSAmIG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGIubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaWFuZCA9IGZ1bmN0aW9uIGlhbmQgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1YW5kKG51bSk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hbmQgPSBmdW5jdGlvbiBhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYW5kKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51YW5kID0gZnVuY3Rpb24gdWFuZCAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdWFuZCh0aGlzKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1eG9yID0gZnVuY3Rpb24gaXV4b3IgKG51bSkge1xuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYTtcbiAgICB2YXIgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldIF4gYi53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcyAhPT0gYSkge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5peG9yID0gZnVuY3Rpb24gaXhvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXV4b3IobnVtKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIHhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5peG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml4b3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnV4b3IgPSBmdW5jdGlvbiB1eG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1eG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1eG9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIE5vdCBgYHRoaXNgYCB3aXRoIGBgd2lkdGhgYCBiaXR3aWR0aFxuICBCTi5wcm90b3R5cGUuaW5vdG4gPSBmdW5jdGlvbiBpbm90biAod2lkdGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIHdpZHRoID09PSAnbnVtYmVyJyAmJiB3aWR0aCA+PSAwKTtcblxuICAgIHZhciBieXRlc05lZWRlZCA9IE1hdGguY2VpbCh3aWR0aCAvIDI2KSB8IDA7XG4gICAgdmFyIGJpdHNMZWZ0ID0gd2lkdGggJSAyNjtcblxuICAgIC8vIEV4dGVuZCB0aGUgYnVmZmVyIHdpdGggbGVhZGluZyB6ZXJvZXNcbiAgICB0aGlzLl9leHBhbmQoYnl0ZXNOZWVkZWQpO1xuXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgYnl0ZXNOZWVkZWQtLTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgY29tcGxldGUgd29yZHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzTmVlZGVkOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgdGhlIHJlc2lkdWVcbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAoMHgzZmZmZmZmID4+ICgyNiAtIGJpdHNMZWZ0KSk7XG4gICAgfVxuXG4gICAgLy8gQW5kIHJlbW92ZSBsZWFkaW5nIHplcm9lc1xuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm5vdG4gPSBmdW5jdGlvbiBub3RuICh3aWR0aCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5vdG4od2lkdGgpO1xuICB9O1xuXG4gIC8vIFNldCBgYml0YCBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNldG4gPSBmdW5jdGlvbiBzZXRuIChiaXQsIHZhbCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG5cbiAgICB2YXIgb2ZmID0gKGJpdCAvIDI2KSB8IDA7XG4gICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgIHRoaXMuX2V4cGFuZChvZmYgKyAxKTtcblxuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMud29yZHNbb2ZmXSA9IHRoaXMud29yZHNbb2ZmXSB8ICgxIDw8IHdiaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gJiB+KDEgPDwgd2JpdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAobnVtKSB7XG4gICAgdmFyIHI7XG5cbiAgICAvLyBuZWdhdGl2ZSArIHBvc2l0aXZlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuXG4gICAgLy8gcG9zaXRpdmUgKyBuZWdhdGl2ZVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICAgIHZhciBhLCBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9IHIgPj4+IDI2O1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAvLyBDb3B5IHRoZSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIH0gZWxzZSBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIEFkZCBgbnVtYCB0byBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAobnVtKSB7XG4gICAgdmFyIHJlcztcbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwICYmIHRoaXMubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXMgPSB0aGlzLnN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0gZWxzZSBpZiAobnVtLm5lZ2F0aXZlID09PSAwICYmIHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gbnVtLnN1Yih0aGlzKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGQobnVtKTtcblxuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYWRkKHRoaXMpO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAobnVtKSB7XG4gICAgLy8gdGhpcyAtICgtbnVtKSA9IHRoaXMgKyBudW1cbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgdmFyIHIgPSB0aGlzLmlhZGQobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcblxuICAgIC8vIC10aGlzIC0gbnVtID0gLSh0aGlzICsgbnVtKVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGQobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlXG4gICAgdmFyIGNtcCA9IHRoaXMuY21wKG51bSk7XG5cbiAgICAvLyBPcHRpbWl6YXRpb24gLSB6ZXJvaWZ5XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIGEgPiBiXG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGNtcCA+IDApIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSAtIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgY2FycnkgIT09IDAgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBDb3B5IHJlc3Qgb2YgdGhlIHdvcmRzXG4gICAgaWYgKGNhcnJ5ID09PSAwICYmIGkgPCBhLmxlbmd0aCAmJiBhICE9PSB0aGlzKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSk7XG5cbiAgICBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWIobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBzbWFsbE11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgdmFyIGxlbiA9IChzZWxmLmxlbmd0aCArIG51bS5sZW5ndGgpIHwgMDtcbiAgICBvdXQubGVuZ3RoID0gbGVuO1xuICAgIGxlbiA9IChsZW4gLSAxKSB8IDA7XG5cbiAgICAvLyBQZWVsIG9uZSBpdGVyYXRpb24gKGNvbXBpbGVyIGNhbid0IGRvIGl0LCBiZWNhdXNlIG9mIGNvZGUgY29tcGxleGl0eSlcbiAgICB2YXIgYSA9IHNlbGYud29yZHNbMF0gfCAwO1xuICAgIHZhciBiID0gbnVtLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICB2YXIgY2FycnkgPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgIG91dC53b3Jkc1swXSA9IGxvO1xuXG4gICAgZm9yICh2YXIgayA9IDE7IGsgPCBsZW47IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBjYXJyeSA+Pj4gMjY7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IChrIC0gaikgfCAwO1xuICAgICAgICBhID0gc2VsZi53b3Jkc1tpXSB8IDA7XG4gICAgICAgIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICByID0gYSAqIGIgKyByd29yZDtcbiAgICAgICAgbmNhcnJ5ICs9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkIHwgMDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5IHwgMDtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeSB8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5sZW5ndGgtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH1cblxuICAvLyBUT0RPKGluZHV0bnkpOiBpdCBtYXkgYmUgcmVhc29uYWJsZSB0byBvbWl0IGl0IGZvciB1c2VycyB3aG8gZG9uJ3QgbmVlZFxuICAvLyB0byB3b3JrIHdpdGggMjU2LWJpdCBudW1iZXJzLCBvdGhlcndpc2UgaXQgZ2l2ZXMgMjAlIGltcHJvdmVtZW50IGZvciAyNTYtYml0XG4gIC8vIG11bHRpcGxpY2F0aW9uIChsaWtlIGVsbGlwdGljIHNlY3AyNTZrMSkuXG4gIHZhciBjb21iMTBNdWxUbyA9IGZ1bmN0aW9uIGNvbWIxME11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIHZhciBhID0gc2VsZi53b3JkcztcbiAgICB2YXIgYiA9IG51bS53b3JkcztcbiAgICB2YXIgbyA9IG91dC53b3JkcztcbiAgICB2YXIgYyA9IDA7XG4gICAgdmFyIGxvO1xuICAgIHZhciBtaWQ7XG4gICAgdmFyIGhpO1xuICAgIHZhciBhMCA9IGFbMF0gfCAwO1xuICAgIHZhciBhbDAgPSBhMCAmIDB4MWZmZjtcbiAgICB2YXIgYWgwID0gYTAgPj4+IDEzO1xuICAgIHZhciBhMSA9IGFbMV0gfCAwO1xuICAgIHZhciBhbDEgPSBhMSAmIDB4MWZmZjtcbiAgICB2YXIgYWgxID0gYTEgPj4+IDEzO1xuICAgIHZhciBhMiA9IGFbMl0gfCAwO1xuICAgIHZhciBhbDIgPSBhMiAmIDB4MWZmZjtcbiAgICB2YXIgYWgyID0gYTIgPj4+IDEzO1xuICAgIHZhciBhMyA9IGFbM10gfCAwO1xuICAgIHZhciBhbDMgPSBhMyAmIDB4MWZmZjtcbiAgICB2YXIgYWgzID0gYTMgPj4+IDEzO1xuICAgIHZhciBhNCA9IGFbNF0gfCAwO1xuICAgIHZhciBhbDQgPSBhNCAmIDB4MWZmZjtcbiAgICB2YXIgYWg0ID0gYTQgPj4+IDEzO1xuICAgIHZhciBhNSA9IGFbNV0gfCAwO1xuICAgIHZhciBhbDUgPSBhNSAmIDB4MWZmZjtcbiAgICB2YXIgYWg1ID0gYTUgPj4+IDEzO1xuICAgIHZhciBhNiA9IGFbNl0gfCAwO1xuICAgIHZhciBhbDYgPSBhNiAmIDB4MWZmZjtcbiAgICB2YXIgYWg2ID0gYTYgPj4+IDEzO1xuICAgIHZhciBhNyA9IGFbN10gfCAwO1xuICAgIHZhciBhbDcgPSBhNyAmIDB4MWZmZjtcbiAgICB2YXIgYWg3ID0gYTcgPj4+IDEzO1xuICAgIHZhciBhOCA9IGFbOF0gfCAwO1xuICAgIHZhciBhbDggPSBhOCAmIDB4MWZmZjtcbiAgICB2YXIgYWg4ID0gYTggPj4+IDEzO1xuICAgIHZhciBhOSA9IGFbOV0gfCAwO1xuICAgIHZhciBhbDkgPSBhOSAmIDB4MWZmZjtcbiAgICB2YXIgYWg5ID0gYTkgPj4+IDEzO1xuICAgIHZhciBiMCA9IGJbMF0gfCAwO1xuICAgIHZhciBibDAgPSBiMCAmIDB4MWZmZjtcbiAgICB2YXIgYmgwID0gYjAgPj4+IDEzO1xuICAgIHZhciBiMSA9IGJbMV0gfCAwO1xuICAgIHZhciBibDEgPSBiMSAmIDB4MWZmZjtcbiAgICB2YXIgYmgxID0gYjEgPj4+IDEzO1xuICAgIHZhciBiMiA9IGJbMl0gfCAwO1xuICAgIHZhciBibDIgPSBiMiAmIDB4MWZmZjtcbiAgICB2YXIgYmgyID0gYjIgPj4+IDEzO1xuICAgIHZhciBiMyA9IGJbM10gfCAwO1xuICAgIHZhciBibDMgPSBiMyAmIDB4MWZmZjtcbiAgICB2YXIgYmgzID0gYjMgPj4+IDEzO1xuICAgIHZhciBiNCA9IGJbNF0gfCAwO1xuICAgIHZhciBibDQgPSBiNCAmIDB4MWZmZjtcbiAgICB2YXIgYmg0ID0gYjQgPj4+IDEzO1xuICAgIHZhciBiNSA9IGJbNV0gfCAwO1xuICAgIHZhciBibDUgPSBiNSAmIDB4MWZmZjtcbiAgICB2YXIgYmg1ID0gYjUgPj4+IDEzO1xuICAgIHZhciBiNiA9IGJbNl0gfCAwO1xuICAgIHZhciBibDYgPSBiNiAmIDB4MWZmZjtcbiAgICB2YXIgYmg2ID0gYjYgPj4+IDEzO1xuICAgIHZhciBiNyA9IGJbN10gfCAwO1xuICAgIHZhciBibDcgPSBiNyAmIDB4MWZmZjtcbiAgICB2YXIgYmg3ID0gYjcgPj4+IDEzO1xuICAgIHZhciBiOCA9IGJbOF0gfCAwO1xuICAgIHZhciBibDggPSBiOCAmIDB4MWZmZjtcbiAgICB2YXIgYmg4ID0gYjggPj4+IDEzO1xuICAgIHZhciBiOSA9IGJbOV0gfCAwO1xuICAgIHZhciBibDkgPSBiOSAmIDB4MWZmZjtcbiAgICB2YXIgYmg5ID0gYjkgPj4+IDEzO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0gc2VsZi5uZWdhdGl2ZSBeIG51bS5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0gMTk7XG4gICAgLyogayA9IDAgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDAsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMCwgYmgwKTtcbiAgICB2YXIgdzAgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcwID4+PiAyNikpIHwgMDtcbiAgICB3MCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDEsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDEpKSB8IDA7XG4gICAgdmFyIHcxID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MSA+Pj4gMjYpKSB8IDA7XG4gICAgdzEgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwyLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDIsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDIsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMikpIHwgMDtcbiAgICB2YXIgdzIgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcyID4+PiAyNikpIHwgMDtcbiAgICB3MiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDMgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDMsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMykpIHwgMDtcbiAgICB2YXIgdzMgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHczID4+PiAyNikpIHwgMDtcbiAgICB3MyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDQgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDQsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNCwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDQpKSB8IDA7XG4gICAgdmFyIHc0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NCA+Pj4gMjYpKSB8IDA7XG4gICAgdzQgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw1LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDUsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDUsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNSkpIHwgMDtcbiAgICB2YXIgdzUgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc1ID4+PiAyNikpIHwgMDtcbiAgICB3NSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDYgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDYsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNiwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNiwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNikpIHwgMDtcbiAgICB2YXIgdzYgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc2ID4+PiAyNikpIHwgMDtcbiAgICB3NiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDcgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDcsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDcpKSB8IDA7XG4gICAgdmFyIHc3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NyA+Pj4gMjYpKSB8IDA7XG4gICAgdzcgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw4LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDgsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDgsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOCkpIHwgMDtcbiAgICB2YXIgdzggPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc4ID4+PiAyNikpIHwgMDtcbiAgICB3OCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDkgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzkgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc5ID4+PiAyNikpIHwgMDtcbiAgICB3OSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDEpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTAgPj4+IDI2KSkgfCAwO1xuICAgIHcxMCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDExICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDIpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTEgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMSA+Pj4gMjYpKSB8IDA7XG4gICAgdzExICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTIgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMyk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgzKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwzKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgzKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTIgPj4+IDI2KSkgfCAwO1xuICAgIHcxMiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDQpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEzID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTMgPj4+IDI2KSkgfCAwO1xuICAgIHcxMyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDUpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTQgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNCA+Pj4gMjYpKSB8IDA7XG4gICAgdzE0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTUgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNik7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg2KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw2KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg2KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTUgPj4+IDI2KSkgfCAwO1xuICAgIHcxNSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDcpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTYgPj4+IDI2KSkgfCAwO1xuICAgIHcxNiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDgpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTcgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNyA+Pj4gMjYpKSB8IDA7XG4gICAgdzE3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTggKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg5KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw5KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg5KTtcbiAgICB2YXIgdzE4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTggPj4+IDI2KSkgfCAwO1xuICAgIHcxOCAmPSAweDNmZmZmZmY7XG4gICAgb1swXSA9IHcwO1xuICAgIG9bMV0gPSB3MTtcbiAgICBvWzJdID0gdzI7XG4gICAgb1szXSA9IHczO1xuICAgIG9bNF0gPSB3NDtcbiAgICBvWzVdID0gdzU7XG4gICAgb1s2XSA9IHc2O1xuICAgIG9bN10gPSB3NztcbiAgICBvWzhdID0gdzg7XG4gICAgb1s5XSA9IHc5O1xuICAgIG9bMTBdID0gdzEwO1xuICAgIG9bMTFdID0gdzExO1xuICAgIG9bMTJdID0gdzEyO1xuICAgIG9bMTNdID0gdzEzO1xuICAgIG9bMTRdID0gdzE0O1xuICAgIG9bMTVdID0gdzE1O1xuICAgIG9bMTZdID0gdzE2O1xuICAgIG9bMTddID0gdzE3O1xuICAgIG9bMThdID0gdzE4O1xuICAgIGlmIChjICE9PSAwKSB7XG4gICAgICBvWzE5XSA9IGM7XG4gICAgICBvdXQubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgLy8gUG9seWZpbGwgY29tYlxuICBpZiAoIU1hdGguaW11bCkge1xuICAgIGNvbWIxME11bFRvID0gc21hbGxNdWxUbztcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpZ011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aDtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgdmFyIGhuY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgb3V0Lmxlbmd0aCAtIDE7IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBobmNhcnJ5O1xuICAgICAgaG5jYXJyeSA9IDA7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IGsgLSBqO1xuICAgICAgICB2YXIgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICB2YXIgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHZhciByID0gYSAqIGI7XG5cbiAgICAgICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArICgociAvIDB4NDAwMDAwMCkgfCAwKSkgfCAwO1xuICAgICAgICBsbyA9IChsbyArIHJ3b3JkKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAobG8gPj4+IDI2KSkgfCAwO1xuXG4gICAgICAgIGhuY2FycnkgKz0gbmNhcnJ5ID4+PiAyNjtcbiAgICAgICAgbmNhcnJ5ICY9IDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkO1xuICAgICAgY2FycnkgPSBuY2Fycnk7XG4gICAgICBuY2FycnkgPSBobmNhcnJ5O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgZnVuY3Rpb24ganVtYm9NdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgZmZ0bSA9IG5ldyBGRlRNKCk7XG4gICAgcmV0dXJuIGZmdG0ubXVscChzZWxmLCBudW0sIG91dCk7XG4gIH1cblxuICBCTi5wcm90b3R5cGUubXVsVG8gPSBmdW5jdGlvbiBtdWxUbyAobnVtLCBvdXQpIHtcbiAgICB2YXIgcmVzO1xuICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aCArIG51bS5sZW5ndGg7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxMCAmJiBudW0ubGVuZ3RoID09PSAxMCkge1xuICAgICAgcmVzID0gY29tYjEwTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgNjMpIHtcbiAgICAgIHJlcyA9IHNtYWxsTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgMTAyNCkge1xuICAgICAgcmVzID0gYmlnTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvb2xleS1UdWtleSBhbGdvcml0aG0gZm9yIEZGVFxuICAvLyBzbGlnaHRseSByZXZpc2l0ZWQgdG8gcmVseSBvbiBsb29waW5nIGluc3RlYWQgb2YgcmVjdXJzaW9uXG5cbiAgZnVuY3Rpb24gRkZUTSAoeCwgeSkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIEZGVE0ucHJvdG90eXBlLm1ha2VSQlQgPSBmdW5jdGlvbiBtYWtlUkJUIChOKSB7XG4gICAgdmFyIHQgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGwgPSBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyhOKSAtIDE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHRbaV0gPSB0aGlzLnJldkJpbihpLCBsLCBOKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGJpbmFyeS1yZXZlcnNlZCByZXByZXNlbnRhdGlvbiBvZiBgeGBcbiAgRkZUTS5wcm90b3R5cGUucmV2QmluID0gZnVuY3Rpb24gcmV2QmluICh4LCBsLCBOKSB7XG4gICAgaWYgKHggPT09IDAgfHwgeCA9PT0gTiAtIDEpIHJldHVybiB4O1xuXG4gICAgdmFyIHJiID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgcmIgfD0gKHggJiAxKSA8PCAobCAtIGkgLSAxKTtcbiAgICAgIHggPj49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJiO1xuICB9O1xuXG4gIC8vIFBlcmZvcm1zIFwidHdlZWRsaW5nXCIgcGhhc2UsIHRoZXJlZm9yZSAnZW11bGF0aW5nJ1xuICAvLyBiZWhhdmlvdXIgb2YgdGhlIHJlY3Vyc2l2ZSBhbGdvcml0aG1cbiAgRkZUTS5wcm90b3R5cGUucGVybXV0ZSA9IGZ1bmN0aW9uIHBlcm11dGUgKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcnR3c1tpXSA9IHJ3c1tyYnRbaV1dO1xuICAgICAgaXR3c1tpXSA9IGl3c1tyYnRbaV1dO1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiB0cmFuc2Zvcm0gKHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOLCByYnQpIHtcbiAgICB0aGlzLnBlcm11dGUocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTik7XG5cbiAgICBmb3IgKHZhciBzID0gMTsgcyA8IE47IHMgPDw9IDEpIHtcbiAgICAgIHZhciBsID0gcyA8PCAxO1xuXG4gICAgICB2YXIgcnR3ZGYgPSBNYXRoLmNvcygyICogTWF0aC5QSSAvIGwpO1xuICAgICAgdmFyIGl0d2RmID0gTWF0aC5zaW4oMiAqIE1hdGguUEkgLyBsKTtcblxuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBOOyBwICs9IGwpIHtcbiAgICAgICAgdmFyIHJ0d2RmXyA9IHJ0d2RmO1xuICAgICAgICB2YXIgaXR3ZGZfID0gaXR3ZGY7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzOyBqKyspIHtcbiAgICAgICAgICB2YXIgcmUgPSBydHdzW3AgKyBqXTtcbiAgICAgICAgICB2YXIgaWUgPSBpdHdzW3AgKyBqXTtcblxuICAgICAgICAgIHZhciBybyA9IHJ0d3NbcCArIGogKyBzXTtcbiAgICAgICAgICB2YXIgaW8gPSBpdHdzW3AgKyBqICsgc107XG5cbiAgICAgICAgICB2YXIgcnggPSBydHdkZl8gKiBybyAtIGl0d2RmXyAqIGlvO1xuXG4gICAgICAgICAgaW8gPSBydHdkZl8gKiBpbyArIGl0d2RmXyAqIHJvO1xuICAgICAgICAgIHJvID0gcng7XG5cbiAgICAgICAgICBydHdzW3AgKyBqXSA9IHJlICsgcm87XG4gICAgICAgICAgaXR3c1twICsgal0gPSBpZSArIGlvO1xuXG4gICAgICAgICAgcnR3c1twICsgaiArIHNdID0gcmUgLSBybztcbiAgICAgICAgICBpdHdzW3AgKyBqICsgc10gPSBpZSAtIGlvO1xuXG4gICAgICAgICAgLyoganNoaW50IG1heGRlcHRoIDogZmFsc2UgKi9cbiAgICAgICAgICBpZiAoaiAhPT0gbCkge1xuICAgICAgICAgICAgcnggPSBydHdkZiAqIHJ0d2RmXyAtIGl0d2RmICogaXR3ZGZfO1xuXG4gICAgICAgICAgICBpdHdkZl8gPSBydHdkZiAqIGl0d2RmXyArIGl0d2RmICogcnR3ZGZfO1xuICAgICAgICAgICAgcnR3ZGZfID0gcng7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmd1ZXNzTGVuMTNiID0gZnVuY3Rpb24gZ3Vlc3NMZW4xM2IgKG4sIG0pIHtcbiAgICB2YXIgTiA9IE1hdGgubWF4KG0sIG4pIHwgMTtcbiAgICB2YXIgb2RkID0gTiAmIDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoTiA9IE4gLyAyIHwgMDsgTjsgTiA9IE4gPj4+IDEpIHtcbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4gMSA8PCBpICsgMSArIG9kZDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb25qdWdhdGUgPSBmdW5jdGlvbiBjb25qdWdhdGUgKHJ3cywgaXdzLCBOKSB7XG4gICAgaWYgKE4gPD0gMSkgcmV0dXJuO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7XG4gICAgICB2YXIgdCA9IHJ3c1tpXTtcblxuICAgICAgcndzW2ldID0gcndzW04gLSBpIC0gMV07XG4gICAgICByd3NbTiAtIGkgLSAxXSA9IHQ7XG5cbiAgICAgIHQgPSBpd3NbaV07XG5cbiAgICAgIGl3c1tpXSA9IC1pd3NbTiAtIGkgLSAxXTtcbiAgICAgIGl3c1tOIC0gaSAtIDFdID0gLXQ7XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLm5vcm1hbGl6ZTEzYiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZTEzYiAod3MsIE4pIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHcgPSBNYXRoLnJvdW5kKHdzWzIgKiBpICsgMV0gLyBOKSAqIDB4MjAwMCArXG4gICAgICAgIE1hdGgucm91bmQod3NbMiAqIGldIC8gTikgK1xuICAgICAgICBjYXJyeTtcblxuICAgICAgd3NbaV0gPSB3ICYgMHgzZmZmZmZmO1xuXG4gICAgICBpZiAodyA8IDB4NDAwMDAwMCkge1xuICAgICAgICBjYXJyeSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJyeSA9IHcgLyAweDQwMDAwMDAgfCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3cztcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb252ZXJ0MTNiID0gZnVuY3Rpb24gY29udmVydDEzYiAod3MsIGxlbiwgcndzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjYXJyeSA9IGNhcnJ5ICsgKHdzW2ldIHwgMCk7XG5cbiAgICAgIHJ3c1syICogaV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgICByd3NbMiAqIGkgKyAxXSA9IGNhcnJ5ICYgMHgxZmZmOyBjYXJyeSA9IGNhcnJ5ID4+PiAxMztcbiAgICB9XG5cbiAgICAvLyBQYWQgd2l0aCB6ZXJvZXNcbiAgICBmb3IgKGkgPSAyICogbGVuOyBpIDwgTjsgKytpKSB7XG4gICAgICByd3NbaV0gPSAwO1xuICAgIH1cblxuICAgIGFzc2VydChjYXJyeSA9PT0gMCk7XG4gICAgYXNzZXJ0KChjYXJyeSAmIH4weDFmZmYpID09PSAwKTtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5zdHViID0gZnVuY3Rpb24gc3R1YiAoTikge1xuICAgIHZhciBwaCA9IG5ldyBBcnJheShOKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcGhbaV0gPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBwaDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5tdWxwID0gZnVuY3Rpb24gbXVscCAoeCwgeSwgb3V0KSB7XG4gICAgdmFyIE4gPSAyICogdGhpcy5ndWVzc0xlbjEzYih4Lmxlbmd0aCwgeS5sZW5ndGgpO1xuXG4gICAgdmFyIHJidCA9IHRoaXMubWFrZVJCVChOKTtcblxuICAgIHZhciBfID0gdGhpcy5zdHViKE4pO1xuXG4gICAgdmFyIHJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgcndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgaXdzdCA9IG5ldyBBcnJheShOKTtcblxuICAgIHZhciBucndzID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBucndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbml3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgcm13cyA9IG91dC53b3JkcztcbiAgICBybXdzLmxlbmd0aCA9IE47XG5cbiAgICB0aGlzLmNvbnZlcnQxM2IoeC53b3JkcywgeC5sZW5ndGgsIHJ3cywgTik7XG4gICAgdGhpcy5jb252ZXJ0MTNiKHkud29yZHMsIHkubGVuZ3RoLCBucndzLCBOKTtcblxuICAgIHRoaXMudHJhbnNmb3JtKHJ3cywgXywgcndzdCwgaXdzdCwgTiwgcmJ0KTtcbiAgICB0aGlzLnRyYW5zZm9ybShucndzLCBfLCBucndzdCwgbml3c3QsIE4sIHJidCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgdmFyIHJ4ID0gcndzdFtpXSAqIG5yd3N0W2ldIC0gaXdzdFtpXSAqIG5pd3N0W2ldO1xuICAgICAgaXdzdFtpXSA9IHJ3c3RbaV0gKiBuaXdzdFtpXSArIGl3c3RbaV0gKiBucndzdFtpXTtcbiAgICAgIHJ3c3RbaV0gPSByeDtcbiAgICB9XG5cbiAgICB0aGlzLmNvbmp1Z2F0ZShyd3N0LCBpd3N0LCBOKTtcbiAgICB0aGlzLnRyYW5zZm9ybShyd3N0LCBpd3N0LCBybXdzLCBfLCBOLCByYnQpO1xuICAgIHRoaXMuY29uanVnYXRlKHJtd3MsIF8sIE4pO1xuICAgIHRoaXMubm9ybWFsaXplMTNiKHJtd3MsIE4pO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0geC5uZWdhdGl2ZSBeIHkubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHgubGVuZ3RoICsgeS5sZW5ndGg7XG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIE11bHRpcGx5IGB0aGlzYCBieSBgbnVtYFxuICBCTi5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChudW0pIHtcbiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICAgIG91dC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCArIG51bS5sZW5ndGgpO1xuICAgIHJldHVybiB0aGlzLm11bFRvKG51bSwgb3V0KTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBlbXBsb3lpbmcgRkZUXG4gIEJOLnByb3RvdHlwZS5tdWxmID0gZnVuY3Rpb24gbXVsZiAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gSW4tcGxhY2UgTXVsdGlwbGljYXRpb25cbiAgQk4ucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLm11bFRvKG51bSwgdGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmltdWxuID0gZnVuY3Rpb24gaW11bG4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG5cbiAgICAvLyBDYXJyeVxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKiBudW07XG4gICAgICB2YXIgbG8gPSAodyAmIDB4M2ZmZmZmZikgKyAoY2FycnkgJiAweDNmZmZmZmYpO1xuICAgICAgY2FycnkgPj49IDI2O1xuICAgICAgY2FycnkgKz0gKHcgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgIC8vIE5PVEU6IGxvIGlzIDI3Yml0IG1heGltdW1cbiAgICAgIGNhcnJ5ICs9IGxvID4+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm11bG4gPSBmdW5jdGlvbiBtdWxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltdWxuKG51bSk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKCkge1xuICAgIHJldHVybiB0aGlzLm11bCh0aGlzKTtcbiAgfTtcblxuICAvLyBgdGhpc2AgKiBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKHRoaXMuY2xvbmUoKSk7XG4gIH07XG5cbiAgLy8gTWF0aC5wb3coYHRoaXNgLCBgbnVtYClcbiAgQk4ucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAobnVtKSB7XG4gICAgdmFyIHcgPSB0b0JpdEFycmF5KG51bSk7XG4gICAgaWYgKHcubGVuZ3RoID09PSAwKSByZXR1cm4gbmV3IEJOKDEpO1xuXG4gICAgLy8gU2tpcCBsZWFkaW5nIHplcm9lc1xuICAgIHZhciByZXMgPSB0aGlzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdy5sZW5ndGg7IGkrKywgcmVzID0gcmVzLnNxcigpKSB7XG4gICAgICBpZiAod1tpXSAhPT0gMCkgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKCsraSA8IHcubGVuZ3RoKSB7XG4gICAgICBmb3IgKHZhciBxID0gcmVzLnNxcigpOyBpIDwgdy5sZW5ndGg7IGkrKywgcSA9IHEuc3FyKCkpIHtcbiAgICAgICAgaWYgKHdbaV0gPT09IDApIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHJlcy5tdWwocSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0IGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXNobG4gPSBmdW5jdGlvbiBpdXNobG4gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG4gICAgdmFyIGNhcnJ5TWFzayA9ICgweDNmZmZmZmYgPj4+ICgyNiAtIHIpKSA8PCAoMjYgLSByKTtcbiAgICB2YXIgaTtcblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbmV3Q2FycnkgPSB0aGlzLndvcmRzW2ldICYgY2FycnlNYXNrO1xuICAgICAgICB2YXIgYyA9ICgodGhpcy53b3Jkc1tpXSB8IDApIC0gbmV3Q2FycnkpIDw8IHI7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjIHwgY2Fycnk7XG4gICAgICAgIGNhcnJ5ID0gbmV3Q2FycnkgPj4+ICgyNiAtIHIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FycnkpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgICB0aGlzLmxlbmd0aCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzICE9PSAwKSB7XG4gICAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIHNdID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IHM7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sZW5ndGggKz0gcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hsbiA9IGZ1bmN0aW9uIGlzaGxuIChiaXRzKSB7XG4gICAgLy8gVE9ETyhpbmR1dG55KTogaW1wbGVtZW50IG1lXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodCBpbi1wbGFjZVxuICAvLyBOT1RFOiBgaGludGAgaXMgYSBsb3dlc3QgYml0IGJlZm9yZSB0cmFpbGluZyB6ZXJvZXNcbiAgLy8gTk9URTogaWYgYGV4dGVuZGVkYCBpcyBwcmVzZW50IC0gaXQgd2lsbCBiZSBmaWxsZWQgd2l0aCBkZXN0cm95ZWQgYml0c1xuICBCTi5wcm90b3R5cGUuaXVzaHJuID0gZnVuY3Rpb24gaXVzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgaDtcbiAgICBpZiAoaGludCkge1xuICAgICAgaCA9IChoaW50IC0gKGhpbnQgJSAyNikpIC8gMjY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGggPSAwO1xuICAgIH1cblxuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gTWF0aC5taW4oKGJpdHMgLSByKSAvIDI2LCB0aGlzLmxlbmd0aCk7XG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgdmFyIG1hc2tlZFdvcmRzID0gZXh0ZW5kZWQ7XG5cbiAgICBoIC09IHM7XG4gICAgaCA9IE1hdGgubWF4KDAsIGgpO1xuXG4gICAgLy8gRXh0ZW5kZWQgbW9kZSwgY29weSBtYXNrZWQgcGFydFxuICAgIGlmIChtYXNrZWRXb3Jkcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgbWFza2VkV29yZHMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgICAgfVxuICAgICAgbWFza2VkV29yZHMubGVuZ3RoID0gcztcbiAgICB9XG5cbiAgICBpZiAocyA9PT0gMCkge1xuICAgICAgLy8gTm8tb3AsIHdlIHNob3VsZCBub3QgbW92ZSBhbnl0aGluZyBhdCBhbGxcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gcykge1xuICAgICAgdGhpcy5sZW5ndGggLT0gcztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2kgKyBzXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMCAmJiAoY2FycnkgIT09IDAgfHwgaSA+PSBoKTsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IChjYXJyeSA8PCAoMjYgLSByKSkgfCAod29yZCA+Pj4gcik7XG4gICAgICBjYXJyeSA9IHdvcmQgJiBtYXNrO1xuICAgIH1cblxuICAgIC8vIFB1c2ggY2FycmllZCBiaXRzIGFzIGEgbWFza1xuICAgIGlmIChtYXNrZWRXb3JkcyAmJiBjYXJyeSAhPT0gMCkge1xuICAgICAgbWFza2VkV29yZHMud29yZHNbbWFza2VkV29yZHMubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hybiA9IGZ1bmN0aW9uIGlzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNocm4oYml0cywgaGludCwgZXh0ZW5kZWQpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnRcbiAgQk4ucHJvdG90eXBlLnNobG4gPSBmdW5jdGlvbiBzaGxuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hsbihiaXRzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXNobG4gPSBmdW5jdGlvbiB1c2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0XG4gIEJOLnByb3RvdHlwZS5zaHJuID0gZnVuY3Rpb24gc2hybiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNocm4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaHJuID0gZnVuY3Rpb24gdXNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hybihiaXRzKTtcbiAgfTtcblxuICAvLyBUZXN0IGlmIG4gYml0IGlzIHNldFxuICBCTi5wcm90b3R5cGUudGVzdG4gPSBmdW5jdGlvbiB0ZXN0biAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInICYmIGJpdCA+PSAwKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBDaGVjayBiaXQgYW5kIHJldHVyblxuICAgIHZhciB3ID0gdGhpcy53b3Jkc1tzXTtcblxuICAgIHJldHVybiAhISh3ICYgcSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyIChpbi1wbGFjZSlcbiAgQk4ucHJvdG90eXBlLmltYXNrbiA9IGZ1bmN0aW9uIGltYXNrbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcblxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAnaW1hc2tuIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZSBudW1iZXJzJyk7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHMrKztcbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1pbihzLCB0aGlzLmxlbmd0aCk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gJj0gbWFzaztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlclxuICBCTi5wcm90b3R5cGUubWFza24gPSBmdW5jdGlvbiBtYXNrbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW1hc2tuKGJpdHMpO1xuICB9O1xuXG4gIC8vIEFkZCBwbGFpbiBudW1iZXIgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pYWRkbiA9IGZ1bmN0aW9uIGlhZGRuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pc3VibigtbnVtKTtcblxuICAgIC8vIFBvc3NpYmxlIHNpZ24gY2hhbmdlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiAodGhpcy53b3Jkc1swXSB8IDApIDwgbnVtKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gPSBudW0gLSAodGhpcy53b3Jkc1swXSB8IDApO1xuICAgICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pc3VibihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aG91dCBjaGVja3NcbiAgICByZXR1cm4gdGhpcy5faWFkZG4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lhZGRuID0gZnVuY3Rpb24gX2lhZGRuIChudW0pIHtcbiAgICB0aGlzLndvcmRzWzBdICs9IG51bTtcblxuICAgIC8vIENhcnJ5XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldID49IDB4NDAwMDAwMDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldIC09IDB4NDAwMDAwMDtcbiAgICAgIGlmIChpID09PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0rKztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSArIDEpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgcGxhaW4gbnVtYmVyIGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pc3VibiA9IGZ1bmN0aW9uIGlzdWJuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pYWRkbigtbnVtKTtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZG4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy53b3Jkc1swXSAtPSBudW07XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA8IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAtdGhpcy53b3Jkc1swXTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYXJyeVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldIDwgMDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gKz0gMHg0MDAwMDAwO1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSAtPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFkZG4gPSBmdW5jdGlvbiBhZGRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnN1Ym4gPSBmdW5jdGlvbiBzdWJuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWJuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhYnMgPSBmdW5jdGlvbiBpYWJzICgpIHtcbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hYnMgPSBmdW5jdGlvbiBhYnMgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFicygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faXNobG5zdWJtdWwgPSBmdW5jdGlvbiBfaXNobG5zdWJtdWwgKG51bSwgbXVsLCBzaGlmdCkge1xuICAgIHZhciBsZW4gPSBudW0ubGVuZ3RoICsgc2hpZnQ7XG4gICAgdmFyIGk7XG5cbiAgICB0aGlzLl9leHBhbmQobGVuKTtcblxuICAgIHZhciB3O1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgdmFyIHJpZ2h0ID0gKG51bS53b3Jkc1tpXSB8IDApICogbXVsO1xuICAgICAgdyAtPSByaWdodCAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gKHcgPj4gMjYpIC0gKChyaWdodCAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgdGhpcy5sZW5ndGggLSBzaGlmdDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSA9PT0gMCkgcmV0dXJuIHRoaXMuc3RyaXAoKTtcblxuICAgIC8vIFN1YnRyYWN0aW9uIG92ZXJmbG93XG4gICAgYXNzZXJ0KGNhcnJ5ID09PSAtMSk7XG4gICAgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3ID0gLSh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICB0aGlzLm5lZ2F0aXZlID0gMTtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl93b3JkRGl2ID0gZnVuY3Rpb24gX3dvcmREaXYgKG51bSwgbW9kZSkge1xuICAgIHZhciBzaGlmdCA9IHRoaXMubGVuZ3RoIC0gbnVtLmxlbmd0aDtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtO1xuXG4gICAgLy8gTm9ybWFsaXplXG4gICAgdmFyIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgdmFyIGJoaUJpdHMgPSB0aGlzLl9jb3VudEJpdHMoYmhpKTtcbiAgICBzaGlmdCA9IDI2IC0gYmhpQml0cztcbiAgICBpZiAoc2hpZnQgIT09IDApIHtcbiAgICAgIGIgPSBiLnVzaGxuKHNoaWZ0KTtcbiAgICAgIGEuaXVzaGxuKHNoaWZ0KTtcbiAgICAgIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBxdW90aWVudFxuICAgIHZhciBtID0gYS5sZW5ndGggLSBiLmxlbmd0aDtcbiAgICB2YXIgcTtcblxuICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgcSA9IG5ldyBCTihudWxsKTtcbiAgICAgIHEubGVuZ3RoID0gbSArIDE7XG4gICAgICBxLndvcmRzID0gbmV3IEFycmF5KHEubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcS5sZW5ndGg7IGkrKykge1xuICAgICAgICBxLndvcmRzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGlmZiA9IGEuY2xvbmUoKS5faXNobG5zdWJtdWwoYiwgMSwgbSk7XG4gICAgaWYgKGRpZmYubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIGEgPSBkaWZmO1xuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1ttXSA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IG0gLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgdmFyIHFqID0gKGEud29yZHNbYi5sZW5ndGggKyBqXSB8IDApICogMHg0MDAwMDAwICtcbiAgICAgICAgKGEud29yZHNbYi5sZW5ndGggKyBqIC0gMV0gfCAwKTtcblxuICAgICAgLy8gTk9URTogKHFqIC8gYmhpKSBpcyAoMHgzZmZmZmZmICogMHg0MDAwMDAwICsgMHgzZmZmZmZmKSAvIDB4MjAwMDAwMCBtYXhcbiAgICAgIC8vICgweDdmZmZmZmYpXG4gICAgICBxaiA9IE1hdGgubWluKChxaiAvIGJoaSkgfCAwLCAweDNmZmZmZmYpO1xuXG4gICAgICBhLl9pc2hsbnN1Ym11bChiLCBxaiwgaik7XG4gICAgICB3aGlsZSAoYS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBxai0tO1xuICAgICAgICBhLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgYS5faXNobG5zdWJtdWwoYiwgMSwgaik7XG4gICAgICAgIGlmICghYS5pc1plcm8oKSkge1xuICAgICAgICAgIGEubmVnYXRpdmUgXj0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1tqXSA9IHFqO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocSkge1xuICAgICAgcS5zdHJpcCgpO1xuICAgIH1cbiAgICBhLnN0cmlwKCk7XG5cbiAgICAvLyBEZW5vcm1hbGl6ZVxuICAgIGlmIChtb2RlICE9PSAnZGl2JyAmJiBzaGlmdCAhPT0gMCkge1xuICAgICAgYS5pdXNocm4oc2hpZnQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkaXY6IHEgfHwgbnVsbCxcbiAgICAgIG1vZDogYVxuICAgIH07XG4gIH07XG5cbiAgLy8gTk9URTogMSkgYG1vZGVgIGNhbiBiZSBzZXQgdG8gYG1vZGAgdG8gcmVxdWVzdCBtb2Qgb25seSxcbiAgLy8gICAgICAgdG8gYGRpdmAgdG8gcmVxdWVzdCBkaXYgb25seSwgb3IgYmUgYWJzZW50IHRvXG4gIC8vICAgICAgIHJlcXVlc3QgYm90aCBkaXYgJiBtb2RcbiAgLy8gICAgICAgMikgYHBvc2l0aXZlYCBpcyB0cnVlIGlmIHVuc2lnbmVkIG1vZCBpcyByZXF1ZXN0ZWRcbiAgQk4ucHJvdG90eXBlLmRpdm1vZCA9IGZ1bmN0aW9uIGRpdm1vZCAobnVtLCBtb2RlLCBwb3NpdGl2ZSkge1xuICAgIGFzc2VydCghbnVtLmlzWmVybygpKTtcblxuICAgIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IG5ldyBCTigwKSxcbiAgICAgICAgbW9kOiBuZXcgQk4oMClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGRpdiwgbW9kLCByZXM7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0sIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgIT09ICdkaXYnKSB7XG4gICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgICBtb2QuaWFkZChudW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiByZXMubW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICgodGhpcy5uZWdhdGl2ZSAmIG51bS5uZWdhdGl2ZSkgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlzdWIobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHJlcy5kaXYsXG4gICAgICAgIG1vZDogbW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmUgYXQgdGhpcyBwb2ludFxuXG4gICAgLy8gU3RyaXAgYm90aCBudW1iZXJzIHRvIGFwcHJveGltYXRlIHNoaWZ0IHZhbHVlXG4gICAgaWYgKG51bS5sZW5ndGggPiB0aGlzLmxlbmd0aCB8fCB0aGlzLmNtcChudW0pIDwgMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogdGhpc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBWZXJ5IHNob3J0IHJlZHVjdGlvblxuICAgIGlmIChudW0ubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAobW9kZSA9PT0gJ2RpdicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICAgIG1vZDogbnVsbFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kZSA9PT0gJ21vZCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IG51bGwsXG4gICAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RuKG51bS53b3Jkc1swXSkpXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fd29yZERpdihudW0sIG1vZGUpO1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgIC8gYG51bWBcbiAgQk4ucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uIGRpdiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ2RpdicsIGZhbHNlKS5kaXY7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgJSBgbnVtYFxuICBCTi5wcm90b3R5cGUubW9kID0gZnVuY3Rpb24gbW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgZmFsc2UpLm1vZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW1vZCA9IGZ1bmN0aW9uIHVtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCB0cnVlKS5tb2Q7XG4gIH07XG5cbiAgLy8gRmluZCBSb3VuZChgdGhpc2AgLyBgbnVtYClcbiAgQk4ucHJvdG90eXBlLmRpdlJvdW5kID0gZnVuY3Rpb24gZGl2Um91bmQgKG51bSkge1xuICAgIHZhciBkbSA9IHRoaXMuZGl2bW9kKG51bSk7XG5cbiAgICAvLyBGYXN0IGNhc2UgLSBleGFjdCBkaXZpc2lvblxuICAgIGlmIChkbS5tb2QuaXNaZXJvKCkpIHJldHVybiBkbS5kaXY7XG5cbiAgICB2YXIgbW9kID0gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0ubW9kLmlzdWIobnVtKSA6IGRtLm1vZDtcblxuICAgIHZhciBoYWxmID0gbnVtLnVzaHJuKDEpO1xuICAgIHZhciByMiA9IG51bS5hbmRsbigxKTtcbiAgICB2YXIgY21wID0gbW9kLmNtcChoYWxmKTtcblxuICAgIC8vIFJvdW5kIGRvd25cbiAgICBpZiAoY21wIDwgMCB8fCByMiA9PT0gMSAmJiBjbXAgPT09IDApIHJldHVybiBkbS5kaXY7XG5cbiAgICAvLyBSb3VuZCB1cFxuICAgIHJldHVybiBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5kaXYuaXN1Ym4oMSkgOiBkbS5kaXYuaWFkZG4oMSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm1vZG4gPSBmdW5jdGlvbiBtb2RuIChudW0pIHtcbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG4gICAgdmFyIHAgPSAoMSA8PCAyNikgJSBudW07XG5cbiAgICB2YXIgYWNjID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgYWNjID0gKHAgKiBhY2MgKyAodGhpcy53b3Jkc1tpXSB8IDApKSAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIGRpdmlzaW9uIGJ5IG51bWJlclxuICBCTi5wcm90b3R5cGUuaWRpdm4gPSBmdW5jdGlvbiBpZGl2biAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICsgY2FycnkgKiAweDQwMDAwMDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKHcgLyBudW0pIHwgMDtcbiAgICAgIGNhcnJ5ID0gdyAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5kaXZuID0gZnVuY3Rpb24gZGl2biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pZGl2bihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lZ2NkID0gZnVuY3Rpb24gZWdjZCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIHggPSB0aGlzO1xuICAgIHZhciB5ID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKHgubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHggPSB4LnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSB4LmNsb25lKCk7XG4gICAgfVxuXG4gICAgLy8gQSAqIHggKyBCICogeSA9IHhcbiAgICB2YXIgQSA9IG5ldyBCTigxKTtcbiAgICB2YXIgQiA9IG5ldyBCTigwKTtcblxuICAgIC8vIEMgKiB4ICsgRCAqIHkgPSB5XG4gICAgdmFyIEMgPSBuZXcgQk4oMCk7XG4gICAgdmFyIEQgPSBuZXcgQk4oMSk7XG5cbiAgICB2YXIgZyA9IDA7XG5cbiAgICB3aGlsZSAoeC5pc0V2ZW4oKSAmJiB5LmlzRXZlbigpKSB7XG4gICAgICB4Lml1c2hybigxKTtcbiAgICAgIHkuaXVzaHJuKDEpO1xuICAgICAgKytnO1xuICAgIH1cblxuICAgIHZhciB5cCA9IHkuY2xvbmUoKTtcbiAgICB2YXIgeHAgPSB4LmNsb25lKCk7XG5cbiAgICB3aGlsZSAoIXguaXNaZXJvKCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7ICh4LndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgeC5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEEuaXNPZGQoKSB8fCBCLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEEuaWFkZCh5cCk7XG4gICAgICAgICAgICBCLmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEEuaXVzaHJuKDEpO1xuICAgICAgICAgIEIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7ICh5LndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgeS5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEMuaXNPZGQoKSB8fCBELmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEMuaWFkZCh5cCk7XG4gICAgICAgICAgICBELmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEMuaXVzaHJuKDEpO1xuICAgICAgICAgIEQuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh4LmNtcCh5KSA+PSAwKSB7XG4gICAgICAgIHguaXN1Yih5KTtcbiAgICAgICAgQS5pc3ViKEMpO1xuICAgICAgICBCLmlzdWIoRCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5LmlzdWIoeCk7XG4gICAgICAgIEMuaXN1YihBKTtcbiAgICAgICAgRC5pc3ViKEIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhOiBDLFxuICAgICAgYjogRCxcbiAgICAgIGdjZDogeS5pdXNobG4oZylcbiAgICB9O1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgcmVkdWNlZCBpbmNhcm5hdGlvbiBvZiB0aGUgYmluYXJ5IEVFQVxuICAvLyBhYm92ZSwgZGVzaWduYXRlZCB0byBpbnZlcnQgbWVtYmVycyBvZiB0aGVcbiAgLy8gX3ByaW1lXyBmaWVsZHMgRihwKSBhdCBhIG1heGltYWwgc3BlZWRcbiAgQk4ucHJvdG90eXBlLl9pbnZtcCA9IGZ1bmN0aW9uIF9pbnZtcCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIGEgPSB0aGlzO1xuICAgIHZhciBiID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGEgPSBhLnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgdmFyIHgxID0gbmV3IEJOKDEpO1xuICAgIHZhciB4MiA9IG5ldyBCTigwKTtcblxuICAgIHZhciBkZWx0YSA9IGIuY2xvbmUoKTtcblxuICAgIHdoaWxlIChhLmNtcG4oMSkgPiAwICYmIGIuY21wbigxKSA+IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7IChhLndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgYS5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgxLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgxLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgxLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoYi53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIGIuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmICh4Mi5pc09kZCgpKSB7XG4gICAgICAgICAgICB4Mi5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4Mi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGEuY21wKGIpID49IDApIHtcbiAgICAgICAgYS5pc3ViKGIpO1xuICAgICAgICB4MS5pc3ViKHgyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGIuaXN1YihhKTtcbiAgICAgICAgeDIuaXN1Yih4MSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlcztcbiAgICBpZiAoYS5jbXBuKDEpID09PSAwKSB7XG4gICAgICByZXMgPSB4MTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0geDI7XG4gICAgfVxuXG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQocCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ2NkID0gZnVuY3Rpb24gZ2NkIChudW0pIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIG51bS5hYnMoKTtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gdGhpcy5hYnMoKTtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtLmNsb25lKCk7XG4gICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgYi5uZWdhdGl2ZSA9IDA7XG5cbiAgICAvLyBSZW1vdmUgY29tbW9uIGZhY3RvciBvZiB0d29cbiAgICBmb3IgKHZhciBzaGlmdCA9IDA7IGEuaXNFdmVuKCkgJiYgYi5pc0V2ZW4oKTsgc2hpZnQrKykge1xuICAgICAgYS5pdXNocm4oMSk7XG4gICAgICBiLml1c2hybigxKTtcbiAgICB9XG5cbiAgICBkbyB7XG4gICAgICB3aGlsZSAoYS5pc0V2ZW4oKSkge1xuICAgICAgICBhLml1c2hybigxKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChiLmlzRXZlbigpKSB7XG4gICAgICAgIGIuaXVzaHJuKDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgciA9IGEuY21wKGIpO1xuICAgICAgaWYgKHIgPCAwKSB7XG4gICAgICAgIC8vIFN3YXAgYGFgIGFuZCBgYmAgdG8gbWFrZSBgYWAgYWx3YXlzIGJpZ2dlciB0aGFuIGBiYFxuICAgICAgICB2YXIgdCA9IGE7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBiID0gdDtcbiAgICAgIH0gZWxzZSBpZiAociA9PT0gMCB8fCBiLmNtcG4oMSkgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGEuaXN1YihiKTtcbiAgICB9IHdoaWxlICh0cnVlKTtcblxuICAgIHJldHVybiBiLml1c2hsbihzaGlmdCk7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IG51bWJlciBpbiB0aGUgZmllbGQgRihudW0pXG4gIEJOLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZWdjZChudW0pLmEudW1vZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc0V2ZW4gPSBmdW5jdGlvbiBpc0V2ZW4gKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uIGlzT2RkICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMTtcbiAgfTtcblxuICAvLyBBbmQgZmlyc3Qgd29yZCBhbmQgbnVtXG4gIEJOLnByb3RvdHlwZS5hbmRsbiA9IGZ1bmN0aW9uIGFuZGxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy53b3Jkc1swXSAmIG51bTtcbiAgfTtcblxuICAvLyBJbmNyZW1lbnQgYXQgdGhlIGJpdCBwb3NpdGlvbiBpbi1saW5lXG4gIEJOLnByb3RvdHlwZS5iaW5jbiA9IGZ1bmN0aW9uIGJpbmNuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicpO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHRoaXMuX2V4cGFuZChzICsgMSk7XG4gICAgICB0aGlzLndvcmRzW3NdIHw9IHE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgYml0IGFuZCBwcm9wYWdhdGUsIGlmIG5lZWRlZFxuICAgIHZhciBjYXJyeSA9IHE7XG4gICAgZm9yICh2YXIgaSA9IHM7IGNhcnJ5ICE9PSAwICYmIGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdyArPSBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+Pj4gMjY7XG4gICAgICB3ICY9IDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc1plcm8gPSBmdW5jdGlvbiBpc1plcm8gKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbXBuID0gZnVuY3Rpb24gY21wbiAobnVtKSB7XG4gICAgdmFyIG5lZ2F0aXZlID0gbnVtIDwgMDtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmICFuZWdhdGl2ZSkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG5lZ2F0aXZlKSByZXR1cm4gMTtcblxuICAgIHRoaXMuc3RyaXAoKTtcblxuICAgIHZhciByZXM7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMSkge1xuICAgICAgcmVzID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG5lZ2F0aXZlKSB7XG4gICAgICAgIG51bSA9IC1udW07XG4gICAgICB9XG5cbiAgICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmLCAnTnVtYmVyIGlzIHRvbyBiaWcnKTtcblxuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzWzBdIHwgMDtcbiAgICAgIHJlcyA9IHcgPT09IG51bSA/IDAgOiB3IDwgbnVtID8gLTEgOiAxO1xuICAgIH1cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIC1yZXMgfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gQ29tcGFyZSB0d28gbnVtYmVycyBhbmQgcmV0dXJuOlxuICAvLyAxIC0gaWYgYHRoaXNgID4gYG51bWBcbiAgLy8gMCAtIGlmIGB0aGlzYCA9PSBgbnVtYFxuICAvLyAtMSAtIGlmIGB0aGlzYCA8IGBudW1gXG4gIEJOLnByb3RvdHlwZS5jbXAgPSBmdW5jdGlvbiBjbXAgKG51bSkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIDE7XG5cbiAgICB2YXIgcmVzID0gdGhpcy51Y21wKG51bSk7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIFVuc2lnbmVkIGNvbXBhcmlzb25cbiAgQk4ucHJvdG90eXBlLnVjbXAgPSBmdW5jdGlvbiB1Y21wIChudW0pIHtcbiAgICAvLyBBdCB0aGlzIHBvaW50IGJvdGggbnVtYmVycyBoYXZlIHRoZSBzYW1lIHNpZ25cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gMTtcbiAgICBpZiAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSByZXR1cm4gLTE7XG5cbiAgICB2YXIgcmVzID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGEgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHZhciBiID0gbnVtLndvcmRzW2ldIHwgMDtcblxuICAgICAgaWYgKGEgPT09IGIpIGNvbnRpbnVlO1xuICAgICAgaWYgKGEgPCBiKSB7XG4gICAgICAgIHJlcyA9IC0xO1xuICAgICAgfSBlbHNlIGlmIChhID4gYikge1xuICAgICAgICByZXMgPSAxO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0biA9IGZ1bmN0aW9uIGd0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAxO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndCA9IGZ1bmN0aW9uIGd0IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlbiA9IGZ1bmN0aW9uIGd0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndGUgPSBmdW5jdGlvbiBndGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID49IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0biA9IGZ1bmN0aW9uIGx0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHQgPSBmdW5jdGlvbiBsdCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IC0xO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGVuID0gZnVuY3Rpb24gbHRlbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ZSA9IGZ1bmN0aW9uIGx0ZSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPD0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZXFuID0gZnVuY3Rpb24gZXFuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAwO1xuICB9O1xuXG4gIC8vXG4gIC8vIEEgcmVkdWNlIGNvbnRleHQsIGNvdWxkIGJlIHVzaW5nIG1vbnRnb21lcnkgb3Igc29tZXRoaW5nIGJldHRlciwgZGVwZW5kaW5nXG4gIC8vIG9uIHRoZSBgbWAgaXRzZWxmLlxuICAvL1xuICBCTi5yZWQgPSBmdW5jdGlvbiByZWQgKG51bSkge1xuICAgIHJldHVybiBuZXcgUmVkKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvUmVkID0gZnVuY3Rpb24gdG9SZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIHJldHVybiBjdHguY29udmVydFRvKHRoaXMpLl9mb3JjZVJlZChjdHgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tUmVkID0gZnVuY3Rpb24gZnJvbVJlZCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAnZnJvbVJlZCB3b3JrcyBvbmx5IHdpdGggbnVtYmVycyBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIHJldHVybiB0aGlzLnJlZC5jb252ZXJ0RnJvbSh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2ZvcmNlUmVkID0gZnVuY3Rpb24gX2ZvcmNlUmVkIChjdHgpIHtcbiAgICB0aGlzLnJlZCA9IGN0eDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZm9yY2VSZWQgPSBmdW5jdGlvbiBmb3JjZVJlZCAoY3R4KSB7XG4gICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkQWRkID0gZnVuY3Rpb24gcmVkQWRkIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJQWRkID0gZnVuY3Rpb24gcmVkSUFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSUFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaWFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTdWIgPSBmdW5jdGlvbiByZWRTdWIgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElTdWIgPSBmdW5jdGlvbiByZWRJU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFNobCA9IGZ1bmN0aW9uIHJlZFNobCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU2hsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zaGwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkTXVsID0gZnVuY3Rpb24gcmVkTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubXVsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElNdWwgPSBmdW5jdGlvbiByZWRJTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTcXIgPSBmdW5jdGlvbiByZWRTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FyKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3FyID0gZnVuY3Rpb24gcmVkSVNxciAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXNxcih0aGlzKTtcbiAgfTtcblxuICAvLyBTcXVhcmUgcm9vdCBvdmVyIHBcbiAgQk4ucHJvdG90eXBlLnJlZFNxcnQgPSBmdW5jdGlvbiByZWRTcXJ0ICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXJ0IHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zcXJ0KHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJbnZtID0gZnVuY3Rpb24gcmVkSW52bSAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSW52bSB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW52bSh0aGlzKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgICUgYHJlZCBtb2R1bG9gXG4gIEJOLnByb3RvdHlwZS5yZWROZWcgPSBmdW5jdGlvbiByZWROZWcgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE5lZyB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubmVnKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRQb3cgPSBmdW5jdGlvbiByZWRQb3cgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCAmJiAhbnVtLnJlZCwgJ3JlZFBvdyhub3JtYWxOdW0pJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnBvdyh0aGlzLCBudW0pO1xuICB9O1xuXG4gIC8vIFByaW1lIG51bWJlcnMgd2l0aCBlZmZpY2llbnQgcmVkdWN0aW9uXG4gIHZhciBwcmltZXMgPSB7XG4gICAgazI1NjogbnVsbCxcbiAgICBwMjI0OiBudWxsLFxuICAgIHAxOTI6IG51bGwsXG4gICAgcDI1NTE5OiBudWxsXG4gIH07XG5cbiAgLy8gUHNldWRvLU1lcnNlbm5lIHByaW1lXG4gIGZ1bmN0aW9uIE1QcmltZSAobmFtZSwgcCkge1xuICAgIC8vIFAgPSAyIF4gTiAtIEtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMucCA9IG5ldyBCTihwLCAxNik7XG4gICAgdGhpcy5uID0gdGhpcy5wLmJpdExlbmd0aCgpO1xuICAgIHRoaXMuayA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5uKS5pc3ViKHRoaXMucCk7XG5cbiAgICB0aGlzLnRtcCA9IHRoaXMuX3RtcCgpO1xuICB9XG5cbiAgTVByaW1lLnByb3RvdHlwZS5fdG1wID0gZnVuY3Rpb24gX3RtcCAoKSB7XG4gICAgdmFyIHRtcCA9IG5ldyBCTihudWxsKTtcbiAgICB0bXAud29yZHMgPSBuZXcgQXJyYXkoTWF0aC5jZWlsKHRoaXMubiAvIDEzKSk7XG4gICAgcmV0dXJuIHRtcDtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmlyZWR1Y2UgPSBmdW5jdGlvbiBpcmVkdWNlIChudW0pIHtcbiAgICAvLyBBc3N1bWVzIHRoYXQgYG51bWAgaXMgbGVzcyB0aGFuIGBQXjJgXG4gICAgLy8gbnVtID0gSEkgKiAoMiBeIE4gLSBLKSArIEhJICogSyArIExPID0gSEkgKiBLICsgTE8gKG1vZCBQKVxuICAgIHZhciByID0gbnVtO1xuICAgIHZhciBybGVuO1xuXG4gICAgZG8ge1xuICAgICAgdGhpcy5zcGxpdChyLCB0aGlzLnRtcCk7XG4gICAgICByID0gdGhpcy5pbXVsSyhyKTtcbiAgICAgIHIgPSByLmlhZGQodGhpcy50bXApO1xuICAgICAgcmxlbiA9IHIuYml0TGVuZ3RoKCk7XG4gICAgfSB3aGlsZSAocmxlbiA+IHRoaXMubik7XG5cbiAgICB2YXIgY21wID0gcmxlbiA8IHRoaXMubiA/IC0xIDogci51Y21wKHRoaXMucCk7XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgci53b3Jkc1swXSA9IDA7XG4gICAgICByLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChjbXAgPiAwKSB7XG4gICAgICByLmlzdWIodGhpcy5wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHIuc3RyaXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyByIGlzIEJOIHY0IGluc3RhbmNlXG4gICAgICAgIHIuc3RyaXAoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHIgaXMgQk4gdjUgaW5zdGFuY2VcbiAgICAgICAgci5fc3RyaXAoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXQpIHtcbiAgICBpbnB1dC5pdXNocm4odGhpcy5uLCAwLCBvdXQpO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgcmV0dXJuIG51bS5pbXVsKHRoaXMuayk7XG4gIH07XG5cbiAgZnVuY3Rpb24gSzI1NiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ2syNTYnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmYzJmJyk7XG4gIH1cbiAgaW5oZXJpdHMoSzI1NiwgTVByaW1lKTtcblxuICBLMjU2LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0cHV0KSB7XG4gICAgLy8gMjU2ID0gOSAqIDI2ICsgMjJcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmO1xuXG4gICAgdmFyIG91dExlbiA9IE1hdGgubWluKGlucHV0Lmxlbmd0aCwgOSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdXRMZW47IGkrKykge1xuICAgICAgb3V0cHV0LndvcmRzW2ldID0gaW5wdXQud29yZHNbaV07XG4gICAgfVxuICAgIG91dHB1dC5sZW5ndGggPSBvdXRMZW47XG5cbiAgICBpZiAoaW5wdXQubGVuZ3RoIDw9IDkpIHtcbiAgICAgIGlucHV0LndvcmRzWzBdID0gMDtcbiAgICAgIGlucHV0Lmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU2hpZnQgYnkgOSBsaW1ic1xuICAgIHZhciBwcmV2ID0gaW5wdXQud29yZHNbOV07XG4gICAgb3V0cHV0LndvcmRzW291dHB1dC5sZW5ndGgrK10gPSBwcmV2ICYgbWFzaztcblxuICAgIGZvciAoaSA9IDEwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBuZXh0ID0gaW5wdXQud29yZHNbaV0gfCAwO1xuICAgICAgaW5wdXQud29yZHNbaSAtIDEwXSA9ICgobmV4dCAmIG1hc2spIDw8IDQpIHwgKHByZXYgPj4+IDIyKTtcbiAgICAgIHByZXYgPSBuZXh0O1xuICAgIH1cbiAgICBwcmV2ID4+Pj0gMjI7XG4gICAgaW5wdXQud29yZHNbaSAtIDEwXSA9IHByZXY7XG4gICAgaWYgKHByZXYgPT09IDAgJiYgaW5wdXQubGVuZ3RoID4gMTApIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSAxMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDk7XG4gICAgfVxuICB9O1xuXG4gIEsyNTYucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEwMDAwMDNkMSA9IFsgMHg0MCwgMHgzZDEgXVxuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoXSA9IDA7XG4gICAgbnVtLndvcmRzW251bS5sZW5ndGggKyAxXSA9IDA7XG4gICAgbnVtLmxlbmd0aCArPSAyO1xuXG4gICAgLy8gYm91bmRlZCBhdDogMHg0MCAqIDB4M2ZmZmZmZiArIDB4M2QwID0gMHgxMDAwMDAzOTBcbiAgICB2YXIgbG8gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IG51bS53b3Jkc1tpXSB8IDA7XG4gICAgICBsbyArPSB3ICogMHgzZDE7XG4gICAgICBudW0ud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICAgIGxvID0gdyAqIDB4NDAgKyAoKGxvIC8gMHg0MDAwMDAwKSB8IDApO1xuICAgIH1cblxuICAgIC8vIEZhc3QgbGVuZ3RoIHJlZHVjdGlvblxuICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICBudW0ubGVuZ3RoLS07XG4gICAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgICBudW0ubGVuZ3RoLS07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgZnVuY3Rpb24gUDIyNCAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AyMjQnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDIyNCwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMTkyICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDE5MicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYnKTtcbiAgfVxuICBpbmhlcml0cyhQMTkyLCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAyNTUxOSAoKSB7XG4gICAgLy8gMiBeIDI1NSAtIDE5XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJzI1NTE5JyxcbiAgICAgICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDI1NTE5LCBNUHJpbWUpO1xuXG4gIFAyNTUxOS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTNcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGkgPSAobnVtLndvcmRzW2ldIHwgMCkgKiAweDEzICsgY2Fycnk7XG4gICAgICB2YXIgbG8gPSBoaSAmIDB4M2ZmZmZmZjtcbiAgICAgIGhpID4+Pj0gMjY7XG5cbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvO1xuICAgICAgY2FycnkgPSBoaTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBudW0ud29yZHNbbnVtLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIC8vIEV4cG9ydGVkIG1vc3RseSBmb3IgdGVzdGluZyBwdXJwb3NlcywgdXNlIHBsYWluIG5hbWUgaW5zdGVhZFxuICBCTi5fcHJpbWUgPSBmdW5jdGlvbiBwcmltZSAobmFtZSkge1xuICAgIC8vIENhY2hlZCB2ZXJzaW9uIG9mIHByaW1lXG4gICAgaWYgKHByaW1lc1tuYW1lXSkgcmV0dXJuIHByaW1lc1tuYW1lXTtcblxuICAgIHZhciBwcmltZTtcbiAgICBpZiAobmFtZSA9PT0gJ2syNTYnKSB7XG4gICAgICBwcmltZSA9IG5ldyBLMjU2KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDIyNCcpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyMjQoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMTkyJykge1xuICAgICAgcHJpbWUgPSBuZXcgUDE5MigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyNTUxOScpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyNTUxOSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcHJpbWUgJyArIG5hbWUpO1xuICAgIH1cbiAgICBwcmltZXNbbmFtZV0gPSBwcmltZTtcblxuICAgIHJldHVybiBwcmltZTtcbiAgfTtcblxuICAvL1xuICAvLyBCYXNlIHJlZHVjdGlvbiBlbmdpbmVcbiAgLy9cbiAgZnVuY3Rpb24gUmVkIChtKSB7XG4gICAgaWYgKHR5cGVvZiBtID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHByaW1lID0gQk4uX3ByaW1lKG0pO1xuICAgICAgdGhpcy5tID0gcHJpbWUucDtcbiAgICAgIHRoaXMucHJpbWUgPSBwcmltZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG0uZ3RuKDEpLCAnbW9kdWx1cyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAxJyk7XG4gICAgICB0aGlzLm0gPSBtO1xuICAgICAgdGhpcy5wcmltZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MSA9IGZ1bmN0aW9uIF92ZXJpZnkxIChhKSB7XG4gICAgYXNzZXJ0KGEubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkyID0gZnVuY3Rpb24gX3ZlcmlmeTIgKGEsIGIpIHtcbiAgICBhc3NlcnQoKGEubmVnYXRpdmUgfCBiLm5lZ2F0aXZlKSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkICYmIGEucmVkID09PSBiLnJlZCxcbiAgICAgICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbW9kID0gZnVuY3Rpb24gaW1vZCAoYSkge1xuICAgIGlmICh0aGlzLnByaW1lKSByZXR1cm4gdGhpcy5wcmltZS5pcmVkdWNlKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgICByZXR1cm4gYS51bW9kKHRoaXMubSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnIChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubS5zdWIoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaWFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaXN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc2hsID0gZnVuY3Rpb24gc2hsIChhLCBudW0pIHtcbiAgICB0aGlzLl92ZXJpZnkxKGEpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS51c2hsbihudW0pKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEuaW11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5tdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKGEsIGEuY2xvbmUoKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwoYSwgYSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXJ0ID0gZnVuY3Rpb24gc3FydCAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIG1vZDMgPSB0aGlzLm0uYW5kbG4oMyk7XG4gICAgYXNzZXJ0KG1vZDMgJSAyID09PSAxKTtcblxuICAgIC8vIEZhc3QgY2FzZVxuICAgIGlmIChtb2QzID09PSAzKSB7XG4gICAgICB2YXIgcG93ID0gdGhpcy5tLmFkZChuZXcgQk4oMSkpLml1c2hybigyKTtcbiAgICAgIHJldHVybiB0aGlzLnBvdyhhLCBwb3cpO1xuICAgIH1cblxuICAgIC8vIFRvbmVsbGktU2hhbmtzIGFsZ29yaXRobSAoVG90YWxseSB1bm9wdGltaXplZCBhbmQgc2xvdylcbiAgICAvL1xuICAgIC8vIEZpbmQgUSBhbmQgUywgdGhhdCBRICogMiBeIFMgPSAoUCAtIDEpXG4gICAgdmFyIHEgPSB0aGlzLm0uc3VibigxKTtcbiAgICB2YXIgcyA9IDA7XG4gICAgd2hpbGUgKCFxLmlzWmVybygpICYmIHEuYW5kbG4oMSkgPT09IDApIHtcbiAgICAgIHMrKztcbiAgICAgIHEuaXVzaHJuKDEpO1xuICAgIH1cbiAgICBhc3NlcnQoIXEuaXNaZXJvKCkpO1xuXG4gICAgdmFyIG9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB2YXIgbk9uZSA9IG9uZS5yZWROZWcoKTtcblxuICAgIC8vIEZpbmQgcXVhZHJhdGljIG5vbi1yZXNpZHVlXG4gICAgLy8gTk9URTogTWF4IGlzIHN1Y2ggYmVjYXVzZSBvZiBnZW5lcmFsaXplZCBSaWVtYW5uIGh5cG90aGVzaXMuXG4gICAgdmFyIGxwb3cgPSB0aGlzLm0uc3VibigxKS5pdXNocm4oMSk7XG4gICAgdmFyIHogPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgeiA9IG5ldyBCTigyICogeiAqIHopLnRvUmVkKHRoaXMpO1xuXG4gICAgd2hpbGUgKHRoaXMucG93KHosIGxwb3cpLmNtcChuT25lKSAhPT0gMCkge1xuICAgICAgei5yZWRJQWRkKG5PbmUpO1xuICAgIH1cblxuICAgIHZhciBjID0gdGhpcy5wb3coeiwgcSk7XG4gICAgdmFyIHIgPSB0aGlzLnBvdyhhLCBxLmFkZG4oMSkuaXVzaHJuKDEpKTtcbiAgICB2YXIgdCA9IHRoaXMucG93KGEsIHEpO1xuICAgIHZhciBtID0gcztcbiAgICB3aGlsZSAodC5jbXAob25lKSAhPT0gMCkge1xuICAgICAgdmFyIHRtcCA9IHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgdG1wLmNtcChvbmUpICE9PSAwOyBpKyspIHtcbiAgICAgICAgdG1wID0gdG1wLnJlZFNxcigpO1xuICAgICAgfVxuICAgICAgYXNzZXJ0KGkgPCBtKTtcbiAgICAgIHZhciBiID0gdGhpcy5wb3coYywgbmV3IEJOKDEpLml1c2hsbihtIC0gaSAtIDEpKTtcblxuICAgICAgciA9IHIucmVkTXVsKGIpO1xuICAgICAgYyA9IGIucmVkU3FyKCk7XG4gICAgICB0ID0gdC5yZWRNdWwoYyk7XG4gICAgICBtID0gaTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgdmFyIGludiA9IGEuX2ludm1wKHRoaXMubSk7XG4gICAgaWYgKGludi5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgaW52Lm5lZ2F0aXZlID0gMDtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KS5yZWROZWcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpO1xuICAgIH1cbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAoYSwgbnVtKSB7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICBpZiAobnVtLmNtcG4oMSkgPT09IDApIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgd2luZG93U2l6ZSA9IDQ7XG4gICAgdmFyIHduZCA9IG5ldyBBcnJheSgxIDw8IHdpbmRvd1NpemUpO1xuICAgIHduZFswXSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB3bmRbMV0gPSBhO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgd25kLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3bmRbaV0gPSB0aGlzLm11bCh3bmRbaSAtIDFdLCBhKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzID0gd25kWzBdO1xuICAgIHZhciBjdXJyZW50ID0gMDtcbiAgICB2YXIgY3VycmVudExlbiA9IDA7XG4gICAgdmFyIHN0YXJ0ID0gbnVtLmJpdExlbmd0aCgpICUgMjY7XG4gICAgaWYgKHN0YXJ0ID09PSAwKSB7XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIGZvciAoaSA9IG51bS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSBudW0ud29yZHNbaV07XG4gICAgICBmb3IgKHZhciBqID0gc3RhcnQgLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgICB2YXIgYml0ID0gKHdvcmQgPj4gaikgJiAxO1xuICAgICAgICBpZiAocmVzICE9PSB3bmRbMF0pIHtcbiAgICAgICAgICByZXMgPSB0aGlzLnNxcihyZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJpdCA9PT0gMCAmJiBjdXJyZW50ID09PSAwKSB7XG4gICAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50IDw8PSAxO1xuICAgICAgICBjdXJyZW50IHw9IGJpdDtcbiAgICAgICAgY3VycmVudExlbisrO1xuICAgICAgICBpZiAoY3VycmVudExlbiAhPT0gd2luZG93U2l6ZSAmJiAoaSAhPT0gMCB8fCBqICE9PSAwKSkgY29udGludWU7XG5cbiAgICAgICAgcmVzID0gdGhpcy5tdWwocmVzLCB3bmRbY3VycmVudF0pO1xuICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgY3VycmVudCA9IDA7XG4gICAgICB9XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHZhciByID0gbnVtLnVtb2QodGhpcy5tKTtcblxuICAgIHJldHVybiByID09PSBudW0gPyByLmNsb25lKCkgOiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHJlcyA9IG51bS5jbG9uZSgpO1xuICAgIHJlcy5yZWQgPSBudWxsO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy9cbiAgLy8gTW9udGdvbWVyeSBtZXRob2QgZW5naW5lXG4gIC8vXG5cbiAgQk4ubW9udCA9IGZ1bmN0aW9uIG1vbnQgKG51bSkge1xuICAgIHJldHVybiBuZXcgTW9udChudW0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIE1vbnQgKG0pIHtcbiAgICBSZWQuY2FsbCh0aGlzLCBtKTtcblxuICAgIHRoaXMuc2hpZnQgPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgaWYgKHRoaXMuc2hpZnQgJSAyNiAhPT0gMCkge1xuICAgICAgdGhpcy5zaGlmdCArPSAyNiAtICh0aGlzLnNoaWZ0ICUgMjYpO1xuICAgIH1cblxuICAgIHRoaXMuciA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5zaGlmdCk7XG4gICAgdGhpcy5yMiA9IHRoaXMuaW1vZCh0aGlzLnIuc3FyKCkpO1xuICAgIHRoaXMucmludiA9IHRoaXMuci5faW52bXAodGhpcy5tKTtcblxuICAgIHRoaXMubWludiA9IHRoaXMucmludi5tdWwodGhpcy5yKS5pc3VibigxKS5kaXYodGhpcy5tKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLm1pbnYudW1vZCh0aGlzLnIpO1xuICAgIHRoaXMubWludiA9IHRoaXMuci5zdWIodGhpcy5taW52KTtcbiAgfVxuICBpbmhlcml0cyhNb250LCBSZWQpO1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChudW0udXNobG4odGhpcy5zaGlmdCkpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByID0gdGhpcy5pbW9kKG51bS5tdWwodGhpcy5yaW52KSk7XG4gICAgci5yZWQgPSBudWxsO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkge1xuICAgICAgYS53b3Jkc1swXSA9IDA7XG4gICAgICBhLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICB2YXIgdCA9IGEuaW11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcblxuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigwKS5fZm9yY2VSZWQodGhpcyk7XG5cbiAgICB2YXIgdCA9IGEubXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICAvLyAoQVIpXi0xICogUl4yID0gKEFeLTEgKiBSXi0xKSAqIFJeMiA9IEFeLTEgKiBSXG4gICAgdmFyIHJlcyA9IHRoaXMuaW1vZChhLl9pbnZtcCh0aGlzLm0pLm11bCh0aGlzLnIyKSk7XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG59KSh0eXBlb2YgbW9kdWxlID09PSAndW5kZWZpbmVkJyB8fCBtb2R1bGUsIHRoaXMpO1xuIiwiLypcbiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gICAgd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbi8qKiBAZmlsZSBodHRwcHJvdmlkZXIuanNcbiAqIEBhdXRob3JzOlxuICogICBNYXJlayBLb3Rld2ljeiA8bWFyZWtAcGFyaXR5LmlvPlxuICogICBNYXJpYW4gT2FuY2VhXG4gKiAgIEZhYmlhbiBWb2dlbHN0ZWxsZXIgPGZhYmlhbkBldGhlcmV1bS5vcmc+XG4gKiBAZGF0ZSAyMDE1XG4gKi9cbnZhciBlcnJvcnMgPSByZXF1aXJlKCd3ZWIzLWNvcmUtaGVscGVycycpLmVycm9ycztcbnZhciBYSFIyID0gcmVxdWlyZSgneGhyMi1jb29raWVzJykuWE1MSHR0cFJlcXVlc3Q7IC8vIGpzaGludCBpZ25vcmU6IGxpbmVcbnZhciBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xudmFyIGh0dHBzID0gcmVxdWlyZSgnaHR0cHMnKTtcbi8qKlxuICogSHR0cFByb3ZpZGVyIHNob3VsZCBiZSB1c2VkIHRvIHNlbmQgcnBjIGNhbGxzIG92ZXIgaHR0cFxuICovXG52YXIgSHR0cFByb3ZpZGVyID0gZnVuY3Rpb24gSHR0cFByb3ZpZGVyKGhvc3QsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB0aGlzLndpdGhDcmVkZW50aWFscyA9IG9wdGlvbnMud2l0aENyZWRlbnRpYWxzIHx8IGZhbHNlO1xuICAgIHRoaXMudGltZW91dCA9IG9wdGlvbnMudGltZW91dCB8fCAwO1xuICAgIHRoaXMuaGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycztcbiAgICB0aGlzLmFnZW50ID0gb3B0aW9ucy5hZ2VudDtcbiAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgIC8vIGtlZXBBbGl2ZSBpcyB0cnVlIHVubGVzcyBleHBsaWNpdGx5IHNldCB0byBmYWxzZVxuICAgIGNvbnN0IGtlZXBBbGl2ZSA9IG9wdGlvbnMua2VlcEFsaXZlICE9PSBmYWxzZTtcbiAgICB0aGlzLmhvc3QgPSBob3N0IHx8ICdodHRwOi8vbG9jYWxob3N0Ojg1NDUnO1xuICAgIGlmICghdGhpcy5hZ2VudCkge1xuICAgICAgICBpZiAodGhpcy5ob3N0LnN1YnN0cmluZygwLCA1KSA9PT0gXCJodHRwc1wiKSB7XG4gICAgICAgICAgICB0aGlzLmh0dHBzQWdlbnQgPSBuZXcgaHR0cHMuQWdlbnQoeyBrZWVwQWxpdmUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmh0dHBBZ2VudCA9IG5ldyBodHRwLkFnZW50KHsga2VlcEFsaXZlIH0pO1xuICAgICAgICB9XG4gICAgfVxufTtcbkh0dHBQcm92aWRlci5wcm90b3R5cGUuX3ByZXBhcmVSZXF1ZXN0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXF1ZXN0O1xuICAgIC8vIHRoZSBjdXJyZW50IHJ1bnRpbWUgaXMgYSBicm93c2VyXG4gICAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVxdWVzdCA9IG5ldyBYSFIyKCk7XG4gICAgICAgIHZhciBhZ2VudHMgPSB7IGh0dHBzQWdlbnQ6IHRoaXMuaHR0cHNBZ2VudCwgaHR0cEFnZW50OiB0aGlzLmh0dHBBZ2VudCwgYmFzZVVybDogdGhpcy5iYXNlVXJsIH07XG4gICAgICAgIGlmICh0aGlzLmFnZW50KSB7XG4gICAgICAgICAgICBhZ2VudHMuaHR0cHNBZ2VudCA9IHRoaXMuYWdlbnQuaHR0cHM7XG4gICAgICAgICAgICBhZ2VudHMuaHR0cEFnZW50ID0gdGhpcy5hZ2VudC5odHRwO1xuICAgICAgICAgICAgYWdlbnRzLmJhc2VVcmwgPSB0aGlzLmFnZW50LmJhc2VVcmw7XG4gICAgICAgIH1cbiAgICAgICAgcmVxdWVzdC5ub2RlanNTZXQoYWdlbnRzKTtcbiAgICB9XG4gICAgcmVxdWVzdC5vcGVuKCdQT1NUJywgdGhpcy5ob3N0LCB0cnVlKTtcbiAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgcmVxdWVzdC50aW1lb3V0ID0gdGhpcy50aW1lb3V0O1xuICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdGhpcy53aXRoQ3JlZGVudGlhbHM7XG4gICAgaWYgKHRoaXMuaGVhZGVycykge1xuICAgICAgICB0aGlzLmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGVhZGVyKSB7XG4gICAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyLm5hbWUsIGhlYWRlci52YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVxdWVzdDtcbn07XG4vKipcbiAqIFNob3VsZCBiZSB1c2VkIHRvIG1ha2UgYXN5bmMgcmVxdWVzdFxuICpcbiAqIEBtZXRob2Qgc2VuZFxuICogQHBhcmFtIHtPYmplY3R9IHBheWxvYWRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIHRyaWdnZXJlZCBvbiBlbmQgd2l0aCAoZXJyLCByZXN1bHQpXG4gKi9cbkh0dHBQcm92aWRlci5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChwYXlsb2FkLCBjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIHJlcXVlc3QgPSB0aGlzLl9wcmVwYXJlUmVxdWVzdCgpO1xuICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAocmVxdWVzdC5yZWFkeVN0YXRlID09PSA0ICYmIHJlcXVlc3QudGltZW91dCAhPT0gMSkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHJlcXVlc3QucmVzcG9uc2VUZXh0O1xuICAgICAgICAgICAgdmFyIGVycm9yID0gbnVsbDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gSlNPTi5wYXJzZShyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBlcnJvciA9IGVycm9ycy5JbnZhbGlkUmVzcG9uc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgIGNhbGxiYWNrKGVycm9ycy5Db25uZWN0aW9uVGltZW91dCh0aGlzLnRpbWVvdXQpKTtcbiAgICB9O1xuICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3Quc2VuZChKU09OLnN0cmluZ2lmeShwYXlsb2FkKSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICBjYWxsYmFjayhlcnJvcnMuSW52YWxpZENvbm5lY3Rpb24odGhpcy5ob3N0KSk7XG4gICAgfVxufTtcbkh0dHBQcm92aWRlci5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAvL05PIE9QXG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBkZXNpcmVkIGJvb2xlYW4uXG4gKlxuICogQG1ldGhvZCBzdXBwb3J0c1N1YnNjcmlwdGlvbnNcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5IdHRwUHJvdmlkZXIucHJvdG90eXBlLnN1cHBvcnRzU3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBIdHRwUHJvdmlkZXI7XG4iLCIvKlxuICAgIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiAgICB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiAgICB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAgICBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuLyoqIEBmaWxlIGluZGV4LmpzXG4gKiBAYXV0aG9yczpcbiAqICAgRmFiaWFuIFZvZ2Vsc3RlbGxlciA8ZmFiaWFuQGV0aGVyZXVtLm9yZz5cbiAqIEBkYXRlIDIwMTdcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZXJyb3JzID0gcmVxdWlyZSgnd2ViMy1jb3JlLWhlbHBlcnMnKS5lcnJvcnM7XG52YXIgb2JvZSA9IHJlcXVpcmUoJ29ib2UnKTtcbnZhciBJcGNQcm92aWRlciA9IGZ1bmN0aW9uIElwY1Byb3ZpZGVyKHBhdGgsIG5ldCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy5yZXNwb25zZUNhbGxiYWNrcyA9IHt9O1xuICAgIHRoaXMubm90aWZpY2F0aW9uQ2FsbGJhY2tzID0gW107XG4gICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgIHRoaXMuY29ubmVjdGlvbiA9IG5ldC5jb25uZWN0KHsgcGF0aDogdGhpcy5wYXRoIH0pO1xuICAgIHRoaXMuYWRkRGVmYXVsdEV2ZW50cygpO1xuICAgIC8vIExJU1RFTiBGT1IgQ09OTkVDVElPTiBSRVNQT05TRVNcbiAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgIC8qanNoaW50IG1heGNvbXBsZXhpdHk6IDYgKi9cbiAgICAgICAgdmFyIGlkID0gbnVsbDtcbiAgICAgICAgLy8gZ2V0IHRoZSBpZCB3aGljaCBtYXRjaGVzIHRoZSByZXR1cm5lZCBpZFxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XG4gICAgICAgICAgICByZXN1bHQuZm9yRWFjaChmdW5jdGlvbiAobG9hZCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5yZXNwb25zZUNhbGxiYWNrc1tsb2FkLmlkXSlcbiAgICAgICAgICAgICAgICAgICAgaWQgPSBsb2FkLmlkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZCA9IHJlc3VsdC5pZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBub3RpZmljYXRpb25cbiAgICAgICAgaWYgKCFpZCAmJiByZXN1bHQubWV0aG9kLmluZGV4T2YoJ19zdWJzY3JpcHRpb24nKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIF90aGlzLm5vdGlmaWNhdGlvbkNhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlc3VsdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIGZpcmUgdGhlIGNhbGxiYWNrXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoX3RoaXMucmVzcG9uc2VDYWxsYmFja3NbaWRdKSB7XG4gICAgICAgICAgICBfdGhpcy5yZXNwb25zZUNhbGxiYWNrc1tpZF0obnVsbCwgcmVzdWx0KTtcbiAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5yZXNwb25zZUNhbGxiYWNrc1tpZF07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIHVzZSBvYm9lLmpzIGZvciBTb2NrZXRzXG4gICAgaWYgKG5ldC5jb25zdHJ1Y3Rvci5uYW1lID09PSAnU29ja2V0Jykge1xuICAgICAgICBvYm9lKHRoaXMuY29ubmVjdGlvbilcbiAgICAgICAgICAgIC5kb25lKGNhbGxiYWNrKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbi5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBfdGhpcy5fcGFyc2VSZXNwb25zZShkYXRhLnRvU3RyaW5nKCkpLmZvckVhY2goY2FsbGJhY2spO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xuLyoqXG5XaWxsIGFkZCB0aGUgZXJyb3IgYW5kIGVuZCBldmVudCB0byB0aW1lb3V0IGV4aXN0aW5nIGNhbGxzXG5cbkBtZXRob2QgYWRkRGVmYXVsdEV2ZW50c1xuKi9cbklwY1Byb3ZpZGVyLnByb3RvdHlwZS5hZGREZWZhdWx0RXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy5jb25uZWN0aW9uLm9uKCdjb25uZWN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5jb25uZWN0ZWQgPSB0cnVlO1xuICAgIH0pO1xuICAgIHRoaXMuY29ubmVjdGlvbi5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgIH0pO1xuICAgIHRoaXMuY29ubmVjdGlvbi5vbignZXJyb3InLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLl90aW1lb3V0KCk7XG4gICAgfSk7XG4gICAgdGhpcy5jb25uZWN0aW9uLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLl90aW1lb3V0KCk7XG4gICAgfSk7XG4gICAgdGhpcy5jb25uZWN0aW9uLm9uKCd0aW1lb3V0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5fdGltZW91dCgpO1xuICAgIH0pO1xufTtcbi8qKlxuIFdpbGwgcGFyc2UgdGhlIHJlc3BvbnNlIGFuZCBtYWtlIGFuIGFycmF5IG91dCBvZiBpdC5cblxuIE5PVEUsIHRoaXMgZXhpc3RzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSByZWFzb25zLlxuXG4gQG1ldGhvZCBfcGFyc2VSZXNwb25zZVxuIEBwYXJhbSB7U3RyaW5nfSBkYXRhXG4gKi9cbklwY1Byb3ZpZGVyLnByb3RvdHlwZS5fcGFyc2VSZXNwb25zZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcywgcmV0dXJuVmFsdWVzID0gW107XG4gICAgLy8gREUtQ0hVTktFUlxuICAgIHZhciBkZWNodW5rZWREYXRhID0gZGF0YVxuICAgICAgICAucmVwbGFjZSgvXFx9W1xcblxccl0/XFx7L2csICd9fC0tfHsnKSAvLyB9e1xuICAgICAgICAucmVwbGFjZSgvXFx9XFxdW1xcblxccl0/XFxbXFx7L2csICd9XXwtLXxbeycpIC8vIH1dW3tcbiAgICAgICAgLnJlcGxhY2UoL1xcfVtcXG5cXHJdP1xcW1xcey9nLCAnfXwtLXxbeycpIC8vIH1be1xuICAgICAgICAucmVwbGFjZSgvXFx9XFxdW1xcblxccl0/XFx7L2csICd9XXwtLXx7JykgLy8gfV17XG4gICAgICAgIC5zcGxpdCgnfC0tfCcpO1xuICAgIGRlY2h1bmtlZERhdGEuZm9yRWFjaChmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAvLyBwcmVwZW5kIHRoZSBsYXN0IGNodW5rXG4gICAgICAgIGlmIChfdGhpcy5sYXN0Q2h1bmspXG4gICAgICAgICAgICBkYXRhID0gX3RoaXMubGFzdENodW5rICsgZGF0YTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bGw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBfdGhpcy5sYXN0Q2h1bmsgPSBkYXRhO1xuICAgICAgICAgICAgLy8gc3RhcnQgdGltZW91dCB0byBjYW5jZWwgYWxsIHJlcXVlc3RzXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMubGFzdENodW5rVGltZW91dCk7XG4gICAgICAgICAgICBfdGhpcy5sYXN0Q2h1bmtUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3RpbWVvdXQoKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcnMuSW52YWxpZFJlc3BvbnNlKGRhdGEpO1xuICAgICAgICAgICAgfSwgMTAwMCAqIDE1KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBjYW5jZWwgdGltZW91dCBhbmQgc2V0IGNodW5rIHRvIG51bGxcbiAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmxhc3RDaHVua1RpbWVvdXQpO1xuICAgICAgICBfdGhpcy5sYXN0Q2h1bmsgPSBudWxsO1xuICAgICAgICBpZiAocmVzdWx0KVxuICAgICAgICAgICAgcmV0dXJuVmFsdWVzLnB1c2gocmVzdWx0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0dXJuVmFsdWVzO1xufTtcbi8qKlxuR2V0IHRoZSBhZGRzIGEgY2FsbGJhY2sgdG8gdGhlIHJlc3BvbnNlQ2FsbGJhY2tzIG9iamVjdCxcbndoaWNoIHdpbGwgYmUgY2FsbGVkIGlmIGEgcmVzcG9uc2UgbWF0Y2hpbmcgdGhlIHJlc3BvbnNlIElkIHdpbGwgYXJyaXZlLlxuXG5AbWV0aG9kIF9hZGRSZXNwb25zZUNhbGxiYWNrXG4qL1xuSXBjUHJvdmlkZXIucHJvdG90eXBlLl9hZGRSZXNwb25zZUNhbGxiYWNrID0gZnVuY3Rpb24gKHBheWxvYWQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGlkID0gcGF5bG9hZC5pZCB8fCBwYXlsb2FkWzBdLmlkO1xuICAgIHZhciBtZXRob2QgPSBwYXlsb2FkLm1ldGhvZCB8fCBwYXlsb2FkWzBdLm1ldGhvZDtcbiAgICB0aGlzLnJlc3BvbnNlQ2FsbGJhY2tzW2lkXSA9IGNhbGxiYWNrO1xuICAgIHRoaXMucmVzcG9uc2VDYWxsYmFja3NbaWRdLm1ldGhvZCA9IG1ldGhvZDtcbn07XG4vKipcblRpbWVvdXQgYWxsIHJlcXVlc3RzIHdoZW4gdGhlIGVuZC9lcnJvciBldmVudCBpcyBmaXJlZFxuXG5AbWV0aG9kIF90aW1lb3V0XG4qL1xuSXBjUHJvdmlkZXIucHJvdG90eXBlLl90aW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnJlc3BvbnNlQ2FsbGJhY2tzKSB7XG4gICAgICAgIGlmICh0aGlzLnJlc3BvbnNlQ2FsbGJhY2tzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIHRoaXMucmVzcG9uc2VDYWxsYmFja3Nba2V5XShlcnJvcnMuSW52YWxpZENvbm5lY3Rpb24oJ29uIElQQycpKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnJlc3BvbnNlQ2FsbGJhY2tzW2tleV07XG4gICAgICAgIH1cbiAgICB9XG59O1xuLyoqXG4gVHJ5IHRvIHJlY29ubmVjdFxuXG4gQG1ldGhvZCByZWNvbm5lY3RcbiAqL1xuSXBjUHJvdmlkZXIucHJvdG90eXBlLnJlY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNvbm5lY3Rpb24uY29ubmVjdCh7IHBhdGg6IHRoaXMucGF0aCB9KTtcbn07XG5JcGNQcm92aWRlci5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChwYXlsb2FkLCBjYWxsYmFjaykge1xuICAgIC8vIHRyeSByZWNvbm5lY3QsIHdoZW4gY29ubmVjdGlvbiBpcyBnb25lXG4gICAgaWYgKCF0aGlzLmNvbm5lY3Rpb24ud3JpdGFibGUpXG4gICAgICAgIHRoaXMuY29ubmVjdGlvbi5jb25uZWN0KHsgcGF0aDogdGhpcy5wYXRoIH0pO1xuICAgIHRoaXMuY29ubmVjdGlvbi53cml0ZShKU09OLnN0cmluZ2lmeShwYXlsb2FkKSk7XG4gICAgdGhpcy5fYWRkUmVzcG9uc2VDYWxsYmFjayhwYXlsb2FkLCBjYWxsYmFjayk7XG59O1xuLyoqXG5TdWJzY3JpYmVzIHRvIHByb3ZpZGVyIGV2ZW50cy5wcm92aWRlclxuXG5AbWV0aG9kIG9uXG5AcGFyYW0ge1N0cmluZ30gdHlwZSAgICAnbm90aWZpY2F0aW9uJywgJ2Nvbm5lY3QnLCAnZXJyb3InLCAnZW5kJyBvciAnZGF0YSdcbkBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrICAgdGhlIGNhbGxiYWNrIHRvIGNhbGxcbiovXG5JcGNQcm92aWRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBzZWNvbmQgcGFyYW1ldGVyIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnZGF0YSc6XG4gICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbkNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvLyBhZGRzIGVycm9yLCBlbmQsIHRpbWVvdXQsIGNvbm5lY3RcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbi5vbih0eXBlLCBjYWxsYmFjayk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59O1xuLyoqXG4gU3Vic2NyaWJlcyB0byBwcm92aWRlciBldmVudHMucHJvdmlkZXJcblxuIEBtZXRob2Qgb25cbiBAcGFyYW0ge1N0cmluZ30gdHlwZSAgICAnY29ubmVjdCcsICdlcnJvcicsICdlbmQnIG9yICdkYXRhJ1xuIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrICAgdGhlIGNhbGxiYWNrIHRvIGNhbGxcbiAqL1xuSXBjUHJvdmlkZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBzZWNvbmQgcGFyYW1ldGVyIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB0aGlzLmNvbm5lY3Rpb24ub25jZSh0eXBlLCBjYWxsYmFjayk7XG59O1xuLyoqXG5SZW1vdmVzIGV2ZW50IGxpc3RlbmVyXG5cbkBtZXRob2QgcmVtb3ZlTGlzdGVuZXJcbkBwYXJhbSB7U3RyaW5nfSB0eXBlICAgICdkYXRhJywgJ2Nvbm5lY3QnLCAnZXJyb3InLCAnZW5kJyBvciAnZGF0YSdcbkBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrICAgdGhlIGNhbGxiYWNrIHRvIGNhbGxcbiovXG5JcGNQcm92aWRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdkYXRhJzpcbiAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9uQ2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGNiLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIGlmIChjYiA9PT0gY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm5vdGlmaWNhdGlvbkNhbGxiYWNrcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbi5yZW1vdmVMaXN0ZW5lcih0eXBlLCBjYWxsYmFjayk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59O1xuLyoqXG5SZW1vdmVzIGFsbCBldmVudCBsaXN0ZW5lcnNcblxuQG1ldGhvZCByZW1vdmVBbGxMaXN0ZW5lcnNcbkBwYXJhbSB7U3RyaW5nfSB0eXBlICAgICdkYXRhJywgJ2Nvbm5lY3QnLCAnZXJyb3InLCAnZW5kJyBvciAnZGF0YSdcbiovXG5JcGNQcm92aWRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnZGF0YSc6XG4gICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbkNhbGxiYWNrcyA9IFtdO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24ucmVtb3ZlQWxsTGlzdGVuZXJzKHR5cGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxufTtcbi8qKlxuUmVzZXRzIHRoZSBwcm92aWRlcnMsIGNsZWFycyBhbGwgY2FsbGJhY2tzXG5cbkBtZXRob2QgcmVzZXRcbiovXG5JcGNQcm92aWRlci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fdGltZW91dCgpO1xuICAgIHRoaXMubm90aWZpY2F0aW9uQ2FsbGJhY2tzID0gW107XG4gICAgdGhpcy5jb25uZWN0aW9uLnJlbW92ZUFsbExpc3RlbmVycygnZXJyb3InKTtcbiAgICB0aGlzLmNvbm5lY3Rpb24ucmVtb3ZlQWxsTGlzdGVuZXJzKCdlbmQnKTtcbiAgICB0aGlzLmNvbm5lY3Rpb24ucmVtb3ZlQWxsTGlzdGVuZXJzKCd0aW1lb3V0Jyk7XG4gICAgdGhpcy5hZGREZWZhdWx0RXZlbnRzKCk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBkZXNpcmVkIGJvb2xlYW4uXG4gKlxuICogQG1ldGhvZCBzdXBwb3J0c1N1YnNjcmlwdGlvbnNcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5JcGNQcm92aWRlci5wcm90b3R5cGUuc3VwcG9ydHNTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0cnVlO1xufTtcbm1vZHVsZS5leHBvcnRzID0gSXBjUHJvdmlkZXI7XG4iLCJ2YXIgaXNOb2RlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyA/IHByb2Nlc3MgOiAwKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nO1xudmFyIGlzUk4gPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJztcbnZhciBfYnRvYSA9IG51bGw7XG52YXIgaGVscGVycyA9IG51bGw7XG5pZiAoaXNOb2RlIHx8IGlzUk4pIHtcbiAgICBfYnRvYSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHN0cikudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgIH07XG4gICAgdmFyIHVybCA9IHJlcXVpcmUoJ3VybCcpO1xuICAgIGlmICh1cmwuVVJMKSB7XG4gICAgICAgIC8vIFVzZSB0aGUgbmV3IE5vZGUgNisgQVBJIGZvciBwYXJzaW5nIFVSTHMgdGhhdCBzdXBwb3J0cyB1c2VybmFtZS9wYXNzd29yZFxuICAgICAgICB2YXIgbmV3VVJMID0gdXJsLlVSTDtcbiAgICAgICAgaGVscGVycyA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgbmV3VVJMKHVybCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBXZWIzIHN1cHBvcnRzIE5vZGUuanMgNSwgc28gZmFsbCBiYWNrIHRvIHRoZSBsZWdhY3kgVVJMIEFQSSBpZiBuZWNlc3NhcnlcbiAgICAgICAgaGVscGVycyA9IHJlcXVpcmUoJ3VybCcpLnBhcnNlO1xuICAgIH1cbn1cbmVsc2Uge1xuICAgIF9idG9hID0gYnRvYS5iaW5kKHdpbmRvdyk7XG4gICAgaGVscGVycyA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVUkwodXJsKTtcbiAgICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgcGFyc2VVUkw6IGhlbHBlcnMsXG4gICAgYnRvYTogX2J0b2Fcbn07XG4iLCIvKlxuIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKi9cbi8qKlxuICogQGZpbGUgV2Vic29ja2V0UHJvdmlkZXIuanNcbiAqIEBhdXRob3JzOiBTYW11ZWwgRnVydGVyIDxzYW11ZWxAZXRoZXJldW0ub3JnPiwgRmFiaWFuIFZvZ2Vsc3RlbGxlciA8ZmFiaWFuQGV0aGVyZXVtLm9yZz5cbiAqIEBkYXRlIDIwMTlcbiAqL1xuJ3VzZSBzdHJpY3QnO1xudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50ZW1pdHRlcjMnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi9oZWxwZXJzLmpzJyk7XG52YXIgZXJyb3JzID0gcmVxdWlyZSgnd2ViMy1jb3JlLWhlbHBlcnMnKS5lcnJvcnM7XG52YXIgV3MgPSByZXF1aXJlKCd3ZWJzb2NrZXQnKS53M2N3ZWJzb2NrZXQ7XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBXZWJzb2NrZXRQcm92aWRlciA9IGZ1bmN0aW9uIFdlYnNvY2tldFByb3ZpZGVyKHVybCwgb3B0aW9ucykge1xuICAgIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHRoaXMudXJsID0gdXJsO1xuICAgIHRoaXMuX2N1c3RvbVRpbWVvdXQgPSBvcHRpb25zLnRpbWVvdXQgfHwgMTAwMCAqIDE1O1xuICAgIHRoaXMuaGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycyB8fCB7fTtcbiAgICB0aGlzLnByb3RvY29sID0gb3B0aW9ucy5wcm90b2NvbCB8fCB1bmRlZmluZWQ7XG4gICAgdGhpcy5yZWNvbm5lY3RPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIGF1dG86IGZhbHNlLFxuICAgICAgICBkZWxheTogNTAwMCxcbiAgICAgICAgbWF4QXR0ZW1wdHM6IGZhbHNlLFxuICAgICAgICBvblRpbWVvdXQ6IGZhbHNlXG4gICAgfSwgb3B0aW9ucy5yZWNvbm5lY3QpO1xuICAgIHRoaXMuY2xpZW50Q29uZmlnID0gb3B0aW9ucy5jbGllbnRDb25maWcgfHwgdW5kZWZpbmVkOyAvLyBBbGxvdyBhIGN1c3RvbSBjbGllbnQgY29uZmlndXJhdGlvblxuICAgIHRoaXMucmVxdWVzdE9wdGlvbnMgPSBvcHRpb25zLnJlcXVlc3RPcHRpb25zIHx8IHVuZGVmaW5lZDsgLy8gQWxsb3cgYSBjdXN0b20gcmVxdWVzdCBvcHRpb25zIChodHRwczovL2dpdGh1Yi5jb20vdGhldHVydGxlMzIvV2ViU29ja2V0LU5vZGUvYmxvYi9tYXN0ZXIvZG9jcy9XZWJTb2NrZXRDbGllbnQubWQjY29ubmVjdHJlcXVlc3R1cmwtcmVxdWVzdGVkcHJvdG9jb2xzLW9yaWdpbi1oZWFkZXJzLXJlcXVlc3RvcHRpb25zKVxuICAgIHRoaXMuREFUQSA9ICdkYXRhJztcbiAgICB0aGlzLkNMT1NFID0gJ2Nsb3NlJztcbiAgICB0aGlzLkVSUk9SID0gJ2Vycm9yJztcbiAgICB0aGlzLkNPTk5FQ1QgPSAnY29ubmVjdCc7XG4gICAgdGhpcy5SRUNPTk5FQ1QgPSAncmVjb25uZWN0JztcbiAgICB0aGlzLmNvbm5lY3Rpb24gPSBudWxsO1xuICAgIHRoaXMucmVxdWVzdFF1ZXVlID0gbmV3IE1hcCgpO1xuICAgIHRoaXMucmVzcG9uc2VRdWV1ZSA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLnJlY29ubmVjdEF0dGVtcHRzID0gMDtcbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgIC8vIFRoZSB3M2N3ZWJzb2NrZXQgaW1wbGVtZW50YXRpb24gZG9lcyBub3Qgc3VwcG9ydCBCYXNpYyBBdXRoXG4gICAgLy8gdXNlcm5hbWUvcGFzc3dvcmQgaW4gdGhlIFVSTC4gU28gZ2VuZXJhdGUgdGhlIGJhc2ljIGF1dGggaGVhZGVyLCBhbmRcbiAgICAvLyBwYXNzIHRocm91Z2ggd2l0aCBhbnkgYWRkaXRpb25hbCBoZWFkZXJzIHN1cHBsaWVkIGluIGNvbnN0cnVjdG9yXG4gICAgdmFyIHBhcnNlZFVSTCA9IGhlbHBlcnMucGFyc2VVUkwodXJsKTtcbiAgICBpZiAocGFyc2VkVVJMLnVzZXJuYW1lICYmIHBhcnNlZFVSTC5wYXNzd29yZCkge1xuICAgICAgICB0aGlzLmhlYWRlcnMuYXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgaGVscGVycy5idG9hKHBhcnNlZFVSTC51c2VybmFtZSArICc6JyArIHBhcnNlZFVSTC5wYXNzd29yZCk7XG4gICAgfVxuICAgIC8vIFdoZW4gYWxsIG5vZGUgY29yZSBpbXBsZW1lbnRhdGlvbnMgdGhhdCBkbyBub3QgaGF2ZSB0aGVcbiAgICAvLyBXSEFUV0cgY29tcGF0aWJsZSBVUkwgcGFyc2VyIGdvIG91dCBvZiBzZXJ2aWNlIHRoaXMgbGluZSBjYW4gYmUgcmVtb3ZlZC5cbiAgICBpZiAocGFyc2VkVVJMLmF1dGgpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLmF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGhlbHBlcnMuYnRvYShwYXJzZWRVUkwuYXV0aCk7XG4gICAgfVxuICAgIC8vIG1ha2UgcHJvcGVydHkgYGNvbm5lY3RlZGAgd2hpY2ggd2lsbCByZXR1cm4gdGhlIGN1cnJlbnQgY29ubmVjdGlvbiBzdGF0dXNcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2Nvbm5lY3RlZCcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uICYmIHRoaXMuY29ubmVjdGlvbi5yZWFkeVN0YXRlID09PSB0aGlzLmNvbm5lY3Rpb24uT1BFTjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHRoaXMuY29ubmVjdCgpO1xufTtcbi8vIEluaGVyaXQgZnJvbSBFdmVudEVtaXR0ZXJcbldlYnNvY2tldFByb3ZpZGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXZlbnRFbWl0dGVyLnByb3RvdHlwZSk7XG5XZWJzb2NrZXRQcm92aWRlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBXZWJzb2NrZXRQcm92aWRlcjtcbi8qKlxuICogQ29ubmVjdHMgdG8gdGhlIGNvbmZpZ3VyZWQgbm9kZVxuICpcbiAqIEBtZXRob2QgY29ubmVjdFxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5XZWJzb2NrZXRQcm92aWRlci5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNvbm5lY3Rpb24gPSBuZXcgV3ModGhpcy51cmwsIHRoaXMucHJvdG9jb2wsIHVuZGVmaW5lZCwgdGhpcy5oZWFkZXJzLCB0aGlzLnJlcXVlc3RPcHRpb25zLCB0aGlzLmNsaWVudENvbmZpZyk7XG4gICAgdGhpcy5fYWRkU29ja2V0TGlzdGVuZXJzKCk7XG59O1xuLyoqXG4gKiBMaXN0ZW5lciBmb3IgdGhlIGBkYXRhYCBldmVudCBvZiB0aGUgdW5kZXJseWluZyBXZWJTb2NrZXQgb2JqZWN0XG4gKlxuICogQG1ldGhvZCBfb25NZXNzYWdlXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbldlYnNvY2tldFByb3ZpZGVyLnByb3RvdHlwZS5fb25NZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMuX3BhcnNlUmVzcG9uc2UoKHR5cGVvZiBlLmRhdGEgPT09ICdzdHJpbmcnKSA/IGUuZGF0YSA6ICcnKS5mb3JFYWNoKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgaWYgKHJlc3VsdC5tZXRob2QgJiYgcmVzdWx0Lm1ldGhvZC5pbmRleE9mKCdfc3Vic2NyaXB0aW9uJykgIT09IC0xKSB7XG4gICAgICAgICAgICBfdGhpcy5lbWl0KF90aGlzLkRBVEEsIHJlc3VsdCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlkID0gcmVzdWx0LmlkO1xuICAgICAgICAvLyBnZXQgdGhlIGlkIHdoaWNoIG1hdGNoZXMgdGhlIHJldHVybmVkIGlkXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICAgICAgICAgIGlkID0gcmVzdWx0WzBdLmlkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfdGhpcy5yZXNwb25zZVF1ZXVlLmhhcyhpZCkpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5yZXNwb25zZVF1ZXVlLmdldChpZCkuY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnJlc3BvbnNlUXVldWUuZ2V0KGlkKS5jYWxsYmFjayhmYWxzZSwgcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLnJlc3BvbnNlUXVldWUuZGVsZXRlKGlkKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcbi8qKlxuICogTGlzdGVuZXIgZm9yIHRoZSBgb3BlbmAgZXZlbnQgb2YgdGhlIHVuZGVybHlpbmcgV2ViU29ja2V0IG9iamVjdFxuICpcbiAqIEBtZXRob2QgX29uQ29ubmVjdFxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5XZWJzb2NrZXRQcm92aWRlci5wcm90b3R5cGUuX29uQ29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVtaXQodGhpcy5DT05ORUNUKTtcbiAgICB0aGlzLnJlY29ubmVjdEF0dGVtcHRzID0gMDtcbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgIGlmICh0aGlzLnJlcXVlc3RRdWV1ZS5zaXplID4gMCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnJlcXVlc3RRdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uIChyZXF1ZXN0LCBrZXkpIHtcbiAgICAgICAgICAgIF90aGlzLnNlbmQocmVxdWVzdC5wYXlsb2FkLCByZXF1ZXN0LmNhbGxiYWNrKTtcbiAgICAgICAgICAgIF90aGlzLnJlcXVlc3RRdWV1ZS5kZWxldGUoa2V5KTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcbi8qKlxuICogTGlzdGVuZXIgZm9yIHRoZSBgY2xvc2VgIGV2ZW50IG9mIHRoZSB1bmRlcmx5aW5nIFdlYlNvY2tldCBvYmplY3RcbiAqXG4gKiBAbWV0aG9kIF9vbkNsb3NlXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbldlYnNvY2tldFByb3ZpZGVyLnByb3RvdHlwZS5fb25DbG9zZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgaWYgKHRoaXMucmVjb25uZWN0T3B0aW9ucy5hdXRvICYmICghWzEwMDAsIDEwMDFdLmluY2x1ZGVzKGV2ZW50LmNvZGUpIHx8IGV2ZW50Lndhc0NsZWFuID09PSBmYWxzZSkpIHtcbiAgICAgICAgdGhpcy5yZWNvbm5lY3QoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmVtaXQodGhpcy5DTE9TRSwgZXZlbnQpO1xuICAgIGlmICh0aGlzLnJlcXVlc3RRdWV1ZS5zaXplID4gMCkge1xuICAgICAgICB0aGlzLnJlcXVlc3RRdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uIChyZXF1ZXN0LCBrZXkpIHtcbiAgICAgICAgICAgIHJlcXVlc3QuY2FsbGJhY2soZXJyb3JzLkNvbm5lY3Rpb25Ob3RPcGVuRXJyb3IoZXZlbnQpKTtcbiAgICAgICAgICAgIF90aGlzLnJlcXVlc3RRdWV1ZS5kZWxldGUoa2V5KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnJlc3BvbnNlUXVldWUuc2l6ZSA+IDApIHtcbiAgICAgICAgdGhpcy5yZXNwb25zZVF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKHJlcXVlc3QsIGtleSkge1xuICAgICAgICAgICAgcmVxdWVzdC5jYWxsYmFjayhlcnJvcnMuSW52YWxpZENvbm5lY3Rpb24oJ29uIFdTJywgZXZlbnQpKTtcbiAgICAgICAgICAgIF90aGlzLnJlc3BvbnNlUXVldWUuZGVsZXRlKGtleSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLl9yZW1vdmVTb2NrZXRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xufTtcbi8qKlxuICogV2lsbCBhZGQgdGhlIHJlcXVpcmVkIHNvY2tldCBsaXN0ZW5lcnNcbiAqXG4gKiBAbWV0aG9kIF9hZGRTb2NrZXRMaXN0ZW5lcnNcbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuV2Vic29ja2V0UHJvdmlkZXIucHJvdG90eXBlLl9hZGRTb2NrZXRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jb25uZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB0aGlzLl9vbk1lc3NhZ2UuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5jb25uZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ29wZW4nLCB0aGlzLl9vbkNvbm5lY3QuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5jb25uZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgdGhpcy5fb25DbG9zZS5iaW5kKHRoaXMpKTtcbn07XG4vKipcbiAqIFdpbGwgcmVtb3ZlIGFsbCBzb2NrZXQgbGlzdGVuZXJzXG4gKlxuICogQG1ldGhvZCBfcmVtb3ZlU29ja2V0TGlzdGVuZXJzXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbldlYnNvY2tldFByb3ZpZGVyLnByb3RvdHlwZS5fcmVtb3ZlU29ja2V0TGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY29ubmVjdGlvbi5yZW1vdmVFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgdGhpcy5fb25NZXNzYWdlKTtcbiAgICB0aGlzLmNvbm5lY3Rpb24ucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3BlbicsIHRoaXMuX29uQ29ubmVjdCk7XG4gICAgdGhpcy5jb25uZWN0aW9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgdGhpcy5fb25DbG9zZSk7XG59O1xuLyoqXG4gKiBXaWxsIHBhcnNlIHRoZSByZXNwb25zZSBhbmQgbWFrZSBhbiBhcnJheSBvdXQgb2YgaXQuXG4gKlxuICogQG1ldGhvZCBfcGFyc2VSZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhXG4gKlxuICogQHJldHVybnMge0FycmF5fVxuICovXG5XZWJzb2NrZXRQcm92aWRlci5wcm90b3R5cGUuX3BhcnNlUmVzcG9uc2UgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciBfdGhpcyA9IHRoaXMsIHJldHVyblZhbHVlcyA9IFtdO1xuICAgIC8vIERFLUNIVU5LRVJcbiAgICB2YXIgZGVjaHVua2VkRGF0YSA9IGRhdGFcbiAgICAgICAgLnJlcGxhY2UoL1xcfVtcXG5cXHJdP1xcey9nLCAnfXwtLXx7JykgLy8gfXtcbiAgICAgICAgLnJlcGxhY2UoL1xcfVxcXVtcXG5cXHJdP1xcW1xcey9nLCAnfV18LS18W3snKSAvLyB9XVt7XG4gICAgICAgIC5yZXBsYWNlKC9cXH1bXFxuXFxyXT9cXFtcXHsvZywgJ318LS18W3snKSAvLyB9W3tcbiAgICAgICAgLnJlcGxhY2UoL1xcfVxcXVtcXG5cXHJdP1xcey9nLCAnfV18LS18eycpIC8vIH1de1xuICAgICAgICAuc3BsaXQoJ3wtLXwnKTtcbiAgICBkZWNodW5rZWREYXRhLmZvckVhY2goZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgLy8gcHJlcGVuZCB0aGUgbGFzdCBjaHVua1xuICAgICAgICBpZiAoX3RoaXMubGFzdENodW5rKVxuICAgICAgICAgICAgZGF0YSA9IF90aGlzLmxhc3RDaHVuayArIGRhdGE7XG4gICAgICAgIHZhciByZXN1bHQgPSBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgX3RoaXMubGFzdENodW5rID0gZGF0YTtcbiAgICAgICAgICAgIC8vIHN0YXJ0IHRpbWVvdXQgdG8gY2FuY2VsIGFsbCByZXF1ZXN0c1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmxhc3RDaHVua1RpbWVvdXQpO1xuICAgICAgICAgICAgX3RoaXMubGFzdENodW5rVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5yZWNvbm5lY3RPcHRpb25zLmF1dG8gJiYgX3RoaXMucmVjb25uZWN0T3B0aW9ucy5vblRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdChfdGhpcy5FUlJPUiwgZXJyb3JzLkNvbm5lY3Rpb25UaW1lb3V0KF90aGlzLl9jdXN0b21UaW1lb3V0KSk7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLnJlcXVlc3RRdWV1ZS5zaXplID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZXF1ZXN0UXVldWUuZm9yRWFjaChmdW5jdGlvbiAocmVxdWVzdCwga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmNhbGxiYWNrKGVycm9ycy5Db25uZWN0aW9uVGltZW91dChfdGhpcy5fY3VzdG9tVGltZW91dCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVxdWVzdFF1ZXVlLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBfdGhpcy5fY3VzdG9tVGltZW91dCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2FuY2VsIHRpbWVvdXQgYW5kIHNldCBjaHVuayB0byBudWxsXG4gICAgICAgIGNsZWFyVGltZW91dChfdGhpcy5sYXN0Q2h1bmtUaW1lb3V0KTtcbiAgICAgICAgX3RoaXMubGFzdENodW5rID0gbnVsbDtcbiAgICAgICAgaWYgKHJlc3VsdClcbiAgICAgICAgICAgIHJldHVyblZhbHVlcy5wdXNoKHJlc3VsdCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldHVyblZhbHVlcztcbn07XG4vKipcbiAqIERvZXMgY2hlY2sgaWYgdGhlIHByb3ZpZGVyIGlzIGNvbm5lY3RpbmcgYW5kIHdpbGwgYWRkIGl0IHRvIHRoZSBxdWV1ZSBvciB3aWxsIHNlbmQgaXQgZGlyZWN0bHlcbiAqXG4gKiBAbWV0aG9kIHNlbmRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGF5bG9hZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuV2Vic29ja2V0UHJvdmlkZXIucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAocGF5bG9hZCwgY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBpZCA9IHBheWxvYWQuaWQ7XG4gICAgdmFyIHJlcXVlc3QgPSB7IHBheWxvYWQ6IHBheWxvYWQsIGNhbGxiYWNrOiBjYWxsYmFjayB9O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHBheWxvYWQpKSB7XG4gICAgICAgIGlkID0gcGF5bG9hZFswXS5pZDtcbiAgICB9XG4gICAgaWYgKHRoaXMuY29ubmVjdGlvbi5yZWFkeVN0YXRlID09PSB0aGlzLmNvbm5lY3Rpb24uQ09OTkVDVElORyB8fCB0aGlzLnJlY29ubmVjdGluZykge1xuICAgICAgICB0aGlzLnJlcXVlc3RRdWV1ZS5zZXQoaWQsIHJlcXVlc3QpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLmNvbm5lY3Rpb24ucmVhZHlTdGF0ZSAhPT0gdGhpcy5jb25uZWN0aW9uLk9QRU4pIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0UXVldWUuZGVsZXRlKGlkKTtcbiAgICAgICAgdGhpcy5lbWl0KHRoaXMuRVJST1IsIGVycm9ycy5Db25uZWN0aW9uTm90T3BlbkVycm9yKCkpO1xuICAgICAgICByZXF1ZXN0LmNhbGxiYWNrKGVycm9ycy5Db25uZWN0aW9uTm90T3BlbkVycm9yKCkpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMucmVzcG9uc2VRdWV1ZS5zZXQoaWQsIHJlcXVlc3QpO1xuICAgIHRoaXMucmVxdWVzdFF1ZXVlLmRlbGV0ZShpZCk7XG4gICAgdHJ5IHtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uLnNlbmQoSlNPTi5zdHJpbmdpZnkocmVxdWVzdC5wYXlsb2FkKSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXF1ZXN0LmNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgX3RoaXMucmVzcG9uc2VRdWV1ZS5kZWxldGUoaWQpO1xuICAgIH1cbn07XG4vKipcbiAqIFJlc2V0cyB0aGUgcHJvdmlkZXJzLCBjbGVhcnMgYWxsIGNhbGxiYWNrc1xuICpcbiAqIEBtZXRob2QgcmVzZXRcbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuV2Vic29ja2V0UHJvdmlkZXIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucmVzcG9uc2VRdWV1ZS5jbGVhcigpO1xuICAgIHRoaXMucmVxdWVzdFF1ZXVlLmNsZWFyKCk7XG4gICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLl9yZW1vdmVTb2NrZXRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLl9hZGRTb2NrZXRMaXN0ZW5lcnMoKTtcbn07XG4vKipcbiAqIENsb3NlcyB0aGUgY3VycmVudCBjb25uZWN0aW9uIHdpdGggdGhlIGdpdmVuIGNvZGUgYW5kIHJlYXNvbiBhcmd1bWVudHNcbiAqXG4gKiBAbWV0aG9kIGRpc2Nvbm5lY3RcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZVxuICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvblxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5XZWJzb2NrZXRQcm92aWRlci5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uIChjb2RlLCByZWFzb24pIHtcbiAgICB0aGlzLl9yZW1vdmVTb2NrZXRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLmNvbm5lY3Rpb24uY2xvc2UoY29kZSB8fCAxMDAwLCByZWFzb24pO1xufTtcbi8qKlxuICogUmV0dXJucyB0aGUgZGVzaXJlZCBib29sZWFuLlxuICpcbiAqIEBtZXRob2Qgc3VwcG9ydHNTdWJzY3JpcHRpb25zXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbldlYnNvY2tldFByb3ZpZGVyLnByb3RvdHlwZS5zdXBwb3J0c1N1YnNjcmlwdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG4gKiBSZW1vdmVzIHRoZSBsaXN0ZW5lcnMgYW5kIHJlY29ubmVjdHMgdG8gdGhlIHNvY2tldC5cbiAqXG4gKiBAbWV0aG9kIHJlY29ubmVjdFxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5XZWJzb2NrZXRQcm92aWRlci5wcm90b3R5cGUucmVjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy5yZWNvbm5lY3RpbmcgPSB0cnVlO1xuICAgIGlmICh0aGlzLnJlc3BvbnNlUXVldWUuc2l6ZSA+IDApIHtcbiAgICAgICAgdGhpcy5yZXNwb25zZVF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKHJlcXVlc3QsIGtleSkge1xuICAgICAgICAgICAgcmVxdWVzdC5jYWxsYmFjayhlcnJvcnMuUGVuZGluZ1JlcXVlc3RzT25SZWNvbm5lY3RpbmdFcnJvcigpKTtcbiAgICAgICAgICAgIF90aGlzLnJlc3BvbnNlUXVldWUuZGVsZXRlKGtleSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoIXRoaXMucmVjb25uZWN0T3B0aW9ucy5tYXhBdHRlbXB0cyB8fFxuICAgICAgICB0aGlzLnJlY29ubmVjdEF0dGVtcHRzIDwgdGhpcy5yZWNvbm5lY3RPcHRpb25zLm1heEF0dGVtcHRzKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMucmVjb25uZWN0QXR0ZW1wdHMrKztcbiAgICAgICAgICAgIF90aGlzLl9yZW1vdmVTb2NrZXRMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIF90aGlzLmVtaXQoX3RoaXMuUkVDT05ORUNULCBfdGhpcy5yZWNvbm5lY3RBdHRlbXB0cyk7XG4gICAgICAgICAgICBfdGhpcy5jb25uZWN0KCk7XG4gICAgICAgIH0sIHRoaXMucmVjb25uZWN0T3B0aW9ucy5kZWxheSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5lbWl0KHRoaXMuRVJST1IsIGVycm9ycy5NYXhBdHRlbXB0c1JlYWNoZWRPblJlY29ubmVjdGluZ0Vycm9yKCkpO1xuICAgIHRoaXMucmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgaWYgKHRoaXMucmVxdWVzdFF1ZXVlLnNpemUgPiAwKSB7XG4gICAgICAgIHRoaXMucmVxdWVzdFF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKHJlcXVlc3QsIGtleSkge1xuICAgICAgICAgICAgcmVxdWVzdC5jYWxsYmFjayhlcnJvcnMuTWF4QXR0ZW1wdHNSZWFjaGVkT25SZWNvbm5lY3RpbmdFcnJvcigpKTtcbiAgICAgICAgICAgIF90aGlzLnJlcXVlc3RRdWV1ZS5kZWxldGUoa2V5KTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcbm1vZHVsZS5leHBvcnRzID0gV2Vic29ja2V0UHJvdmlkZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5XG4gICwgcHJlZml4ID0gJ34nO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIHRvIGNyZWF0ZSBhIHN0b3JhZ2UgZm9yIG91ciBgRUVgIG9iamVjdHMuXG4gKiBBbiBgRXZlbnRzYCBpbnN0YW5jZSBpcyBhIHBsYWluIG9iamVjdCB3aG9zZSBwcm9wZXJ0aWVzIGFyZSBldmVudCBuYW1lcy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIEV2ZW50cygpIHt9XG5cbi8vXG4vLyBXZSB0cnkgdG8gbm90IGluaGVyaXQgZnJvbSBgT2JqZWN0LnByb3RvdHlwZWAuIEluIHNvbWUgZW5naW5lcyBjcmVhdGluZyBhblxuLy8gaW5zdGFuY2UgaW4gdGhpcyB3YXkgaXMgZmFzdGVyIHRoYW4gY2FsbGluZyBgT2JqZWN0LmNyZWF0ZShudWxsKWAgZGlyZWN0bHkuXG4vLyBJZiBgT2JqZWN0LmNyZWF0ZShudWxsKWAgaXMgbm90IHN1cHBvcnRlZCB3ZSBwcmVmaXggdGhlIGV2ZW50IG5hbWVzIHdpdGggYVxuLy8gY2hhcmFjdGVyIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBidWlsdC1pbiBvYmplY3QgcHJvcGVydGllcyBhcmUgbm90XG4vLyBvdmVycmlkZGVuIG9yIHVzZWQgYXMgYW4gYXR0YWNrIHZlY3Rvci5cbi8vXG5pZiAoT2JqZWN0LmNyZWF0ZSkge1xuICBFdmVudHMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAvL1xuICAvLyBUaGlzIGhhY2sgaXMgbmVlZGVkIGJlY2F1c2UgdGhlIGBfX3Byb3RvX19gIHByb3BlcnR5IGlzIHN0aWxsIGluaGVyaXRlZCBpblxuICAvLyBzb21lIG9sZCBicm93c2VycyBsaWtlIEFuZHJvaWQgNCwgaVBob25lIDUuMSwgT3BlcmEgMTEgYW5kIFNhZmFyaSA1LlxuICAvL1xuICBpZiAoIW5ldyBFdmVudHMoKS5fX3Byb3RvX18pIHByZWZpeCA9IGZhbHNlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudGF0aW9uIG9mIGEgc2luZ2xlIGV2ZW50IGxpc3RlbmVyLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvbmNlPWZhbHNlXSBTcGVjaWZ5IGlmIHRoZSBsaXN0ZW5lciBpcyBhIG9uZS10aW1lIGxpc3RlbmVyLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBFRShmbiwgY29udGV4dCwgb25jZSkge1xuICB0aGlzLmZuID0gZm47XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMub25jZSA9IG9uY2UgfHwgZmFsc2U7XG59XG5cbi8qKlxuICogQWRkIGEgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHtFdmVudEVtaXR0ZXJ9IGVtaXR0ZXIgUmVmZXJlbmNlIHRvIHRoZSBgRXZlbnRFbWl0dGVyYCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9uY2UgU3BlY2lmeSBpZiB0aGUgbGlzdGVuZXIgaXMgYSBvbmUtdGltZSBsaXN0ZW5lci5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBhZGRMaXN0ZW5lcihlbWl0dGVyLCBldmVudCwgZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lciA9IG5ldyBFRShmbiwgY29udGV4dCB8fCBlbWl0dGVyLCBvbmNlKVxuICAgICwgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIWVtaXR0ZXIuX2V2ZW50c1tldnRdKSBlbWl0dGVyLl9ldmVudHNbZXZ0XSA9IGxpc3RlbmVyLCBlbWl0dGVyLl9ldmVudHNDb3VudCsrO1xuICBlbHNlIGlmICghZW1pdHRlci5fZXZlbnRzW2V2dF0uZm4pIGVtaXR0ZXIuX2V2ZW50c1tldnRdLnB1c2gobGlzdGVuZXIpO1xuICBlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldnRdID0gW2VtaXR0ZXIuX2V2ZW50c1tldnRdLCBsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIGVtaXR0ZXI7XG59XG5cbi8qKlxuICogQ2xlYXIgZXZlbnQgYnkgbmFtZS5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50RW1pdHRlcn0gZW1pdHRlciBSZWZlcmVuY2UgdG8gdGhlIGBFdmVudEVtaXR0ZXJgIGluc3RhbmNlLlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2dCBUaGUgRXZlbnQgbmFtZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNsZWFyRXZlbnQoZW1pdHRlciwgZXZ0KSB7XG4gIGlmICgtLWVtaXR0ZXIuX2V2ZW50c0NvdW50ID09PSAwKSBlbWl0dGVyLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gIGVsc2UgZGVsZXRlIGVtaXR0ZXIuX2V2ZW50c1tldnRdO1xufVxuXG4vKipcbiAqIE1pbmltYWwgYEV2ZW50RW1pdHRlcmAgaW50ZXJmYWNlIHRoYXQgaXMgbW9sZGVkIGFnYWluc3QgdGhlIE5vZGUuanNcbiAqIGBFdmVudEVtaXR0ZXJgIGludGVyZmFjZS5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gYW4gYXJyYXkgbGlzdGluZyB0aGUgZXZlbnRzIGZvciB3aGljaCB0aGUgZW1pdHRlciBoYXMgcmVnaXN0ZXJlZFxuICogbGlzdGVuZXJzLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgdmFyIG5hbWVzID0gW11cbiAgICAsIGV2ZW50c1xuICAgICwgbmFtZTtcblxuICBpZiAodGhpcy5fZXZlbnRzQ291bnQgPT09IDApIHJldHVybiBuYW1lcztcblxuICBmb3IgKG5hbWUgaW4gKGV2ZW50cyA9IHRoaXMuX2V2ZW50cykpIHtcbiAgICBpZiAoaGFzLmNhbGwoZXZlbnRzLCBuYW1lKSkgbmFtZXMucHVzaChwcmVmaXggPyBuYW1lLnNsaWNlKDEpIDogbmFtZSk7XG4gIH1cblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHJldHVybiBuYW1lcy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhldmVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBuYW1lcztcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBsaXN0ZW5lcnMgcmVnaXN0ZXJlZCBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSByZWdpc3RlcmVkIGxpc3RlbmVycy5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnMoZXZlbnQpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnRcbiAgICAsIGhhbmRsZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKCFoYW5kbGVycykgcmV0dXJuIFtdO1xuICBpZiAoaGFuZGxlcnMuZm4pIHJldHVybiBbaGFuZGxlcnMuZm5dO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gaGFuZGxlcnMubGVuZ3RoLCBlZSA9IG5ldyBBcnJheShsKTsgaSA8IGw7IGkrKykge1xuICAgIGVlW2ldID0gaGFuZGxlcnNbaV0uZm47XG4gIH1cblxuICByZXR1cm4gZWU7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgbnVtYmVyIG9mIGxpc3RlbmVycyBsaXN0ZW5pbmcgdG8gYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgbnVtYmVyIG9mIGxpc3RlbmVycy5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gbGlzdGVuZXJDb3VudChldmVudCkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudFxuICAgICwgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKCFsaXN0ZW5lcnMpIHJldHVybiAwO1xuICBpZiAobGlzdGVuZXJzLmZuKSByZXR1cm4gMTtcbiAgcmV0dXJuIGxpc3RlbmVycy5sZW5ndGg7XG59O1xuXG4vKipcbiAqIENhbGxzIGVhY2ggb2YgdGhlIGxpc3RlbmVycyByZWdpc3RlcmVkIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGV2ZW50IGhhZCBsaXN0ZW5lcnMsIGVsc2UgYGZhbHNlYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdChldmVudCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiBmYWxzZTtcblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF1cbiAgICAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGFyZ3NcbiAgICAsIGk7XG5cbiAgaWYgKGxpc3RlbmVycy5mbikge1xuICAgIGlmIChsaXN0ZW5lcnMub25jZSkgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzLmZuLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gICAgc3dpdGNoIChsZW4pIHtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0KSwgdHJ1ZTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSksIHRydWU7XG4gICAgICBjYXNlIDM6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyKSwgdHJ1ZTtcbiAgICAgIGNhc2UgNDogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzKSwgdHJ1ZTtcbiAgICAgIGNhc2UgNTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzLCBhNCksIHRydWU7XG4gICAgICBjYXNlIDY6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQsIGE1KSwgdHJ1ZTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAxLCBhcmdzID0gbmV3IEFycmF5KGxlbiAtMSk7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZuLmFwcGx5KGxpc3RlbmVycy5jb250ZXh0LCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aFxuICAgICAgLCBqO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobGlzdGVuZXJzW2ldLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyc1tpXS5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgICAgc3dpdGNoIChsZW4pIHtcbiAgICAgICAgY2FzZSAxOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCk7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSk7IGJyZWFrO1xuICAgICAgICBjYXNlIDM6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSwgYTIpOyBicmVhaztcbiAgICAgICAgY2FzZSA0OiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEsIGEyLCBhMyk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmICghYXJncykgZm9yIChqID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaiAtIDFdID0gYXJndW1lbnRzW2pdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpc3RlbmVyc1tpXS5mbi5hcHBseShsaXN0ZW5lcnNbaV0uY29udGV4dCwgYXJncyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIEFkZCBhIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gW2NvbnRleHQ9dGhpc10gVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gb24oZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHJldHVybiBhZGRMaXN0ZW5lcih0aGlzLCBldmVudCwgZm4sIGNvbnRleHQsIGZhbHNlKTtcbn07XG5cbi8qKlxuICogQWRkIGEgb25lLXRpbWUgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBbY29udGV4dD10aGlzXSBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UoZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHJldHVybiBhZGRMaXN0ZW5lcih0aGlzLCBldmVudCwgZm4sIGNvbnRleHQsIHRydWUpO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgdGhlIGxpc3RlbmVycyBvZiBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIE9ubHkgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgdGhhdCBtYXRjaCB0aGlzIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBjb250ZXh0IE9ubHkgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgdGhhdCBoYXZlIHRoaXMgY29udGV4dC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBPbmx5IHJlbW92ZSBvbmUtdGltZSBsaXN0ZW5lcnMuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihldmVudCwgZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgcmV0dXJuIHRoaXM7XG4gIGlmICghZm4pIHtcbiAgICBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKGxpc3RlbmVycy5mbikge1xuICAgIGlmIChcbiAgICAgIGxpc3RlbmVycy5mbiA9PT0gZm4gJiZcbiAgICAgICghb25jZSB8fCBsaXN0ZW5lcnMub25jZSkgJiZcbiAgICAgICghY29udGV4dCB8fCBsaXN0ZW5lcnMuY29udGV4dCA9PT0gY29udGV4dClcbiAgICApIHtcbiAgICAgIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGV2ZW50cyA9IFtdLCBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChcbiAgICAgICAgbGlzdGVuZXJzW2ldLmZuICE9PSBmbiB8fFxuICAgICAgICAob25jZSAmJiAhbGlzdGVuZXJzW2ldLm9uY2UpIHx8XG4gICAgICAgIChjb250ZXh0ICYmIGxpc3RlbmVyc1tpXS5jb250ZXh0ICE9PSBjb250ZXh0KVxuICAgICAgKSB7XG4gICAgICAgIGV2ZW50cy5wdXNoKGxpc3RlbmVyc1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBSZXNldCB0aGUgYXJyYXksIG9yIHJlbW92ZSBpdCBjb21wbGV0ZWx5IGlmIHdlIGhhdmUgbm8gbW9yZSBsaXN0ZW5lcnMuXG4gICAgLy9cbiAgICBpZiAoZXZlbnRzLmxlbmd0aCkgdGhpcy5fZXZlbnRzW2V2dF0gPSBldmVudHMubGVuZ3RoID09PSAxID8gZXZlbnRzWzBdIDogZXZlbnRzO1xuICAgIGVsc2UgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbGwgbGlzdGVuZXJzLCBvciB0aG9zZSBvZiB0aGUgc3BlY2lmaWVkIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBbZXZlbnRdIFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyhldmVudCkge1xuICB2YXIgZXZ0O1xuXG4gIGlmIChldmVudCkge1xuICAgIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG4gICAgaWYgKHRoaXMuX2V2ZW50c1tldnRdKSBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy9cbi8vIEFsaWFzIG1ldGhvZHMgbmFtZXMgYmVjYXVzZSBwZW9wbGUgcm9sbCBsaWtlIHRoYXQuXG4vL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUub247XG5cbi8vXG4vLyBFeHBvc2UgdGhlIHByZWZpeC5cbi8vXG5FdmVudEVtaXR0ZXIucHJlZml4ZWQgPSBwcmVmaXg7XG5cbi8vXG4vLyBBbGxvdyBgRXZlbnRFbWl0dGVyYCB0byBiZSBpbXBvcnRlZCBhcyBtb2R1bGUgbmFtZXNwYWNlLlxuLy9cbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbi8vXG4vLyBFeHBvc2UgdGhlIG1vZHVsZS5cbi8vXG5pZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBtb2R1bGUpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG59XG4iLCIvKlxuIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKi9cbi8qKlxuICogQGZpbGUgdXRpbHMuanNcbiAqIEBhdXRob3IgTWFyZWsgS290ZXdpY3ogPG1hcmVrQHBhcml0eS5pbz5cbiAqIEBhdXRob3IgRmFiaWFuIFZvZ2Vsc3RlbGxlciA8ZmFiaWFuQGV0aGVyZXVtLm9yZz5cbiAqIEBkYXRlIDIwMTdcbiAqL1xudmFyIGV0aGpzVW5pdCA9IHJlcXVpcmUoJ2V0aGpzLXVuaXQnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMuanMnKTtcbnZhciBzb2xpZGl0eVNoYTMgPSByZXF1aXJlKCcuL3NvbGlkaXR5U2hhMy5qcycpO1xudmFyIHJhbmRvbWJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKTtcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG4vKipcbiAqIEZpcmVzIGFuIGVycm9yIGluIGFuIGV2ZW50IGVtaXR0ZXIgYW5kIGNhbGxiYWNrIGFuZCByZXR1cm5zIHRoZSBldmVudGVtaXR0ZXJcbiAqXG4gKiBAbWV0aG9kIF9maXJlRXJyb3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBlcnJvciBhIHN0cmluZywgYSBlcnJvciwgb3IgYW4gb2JqZWN0IHdpdGgge21lc3NhZ2UsIGRhdGF9XG4gKiBAcGFyYW0ge09iamVjdH0gZW1pdHRlclxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHBhcmFtIHthbnl9IG9wdGlvbmFsRGF0YVxuICogQHJldHVybiB7T2JqZWN0fSB0aGUgZW1pdHRlclxuICovXG52YXIgX2ZpcmVFcnJvciA9IGZ1bmN0aW9uIChlcnJvciwgZW1pdHRlciwgcmVqZWN0LCBjYWxsYmFjaywgb3B0aW9uYWxEYXRhKSB7XG4gICAgLypqc2hpbnQgbWF4Y29tcGxleGl0eTogMTAgKi9cbiAgICAvLyBhZGQgZGF0YSBpZiBnaXZlblxuICAgIGlmICghIWVycm9yICYmIHR5cGVvZiBlcnJvciA9PT0gJ29iamVjdCcgJiYgIShlcnJvciBpbnN0YW5jZW9mIEVycm9yKSAmJiBlcnJvci5kYXRhKSB7XG4gICAgICAgIGlmICghIWVycm9yLmRhdGEgJiYgdHlwZW9mIGVycm9yLmRhdGEgPT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkoZXJyb3IuZGF0YSkpIHtcbiAgICAgICAgICAgIGVycm9yLmRhdGEgPSBKU09OLnN0cmluZ2lmeShlcnJvci5kYXRhLCBudWxsLCAyKTtcbiAgICAgICAgfVxuICAgICAgICBlcnJvciA9IGVycm9yLm1lc3NhZ2UgKyBcIlxcblwiICsgZXJyb3IuZGF0YTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCBvcHRpb25hbERhdGEpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlamVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBzdXBwcmVzcyB1bmNhdGNoZWQgZXJyb3IgaWYgYW4gZXJyb3IgbGlzdGVuZXIgaXMgcHJlc2VudFxuICAgICAgICAvLyBPUiBzdXBwcmVzcyB1bmNhdGNoZWQgZXJyb3IgaWYgYW4gY2FsbGJhY2sgbGlzdGVuZXIgaXMgcHJlc2VudFxuICAgICAgICBpZiAoZW1pdHRlciAmJlxuICAgICAgICAgICAgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgICAgICAgIGVtaXR0ZXIubGlzdGVuZXJzKCdlcnJvcicpLmxlbmd0aCkgfHwgdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBlbWl0dGVyLmNhdGNoKGZ1bmN0aW9uICgpIHsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVqZWN0IGxhdGVyLCB0byBiZSBhYmxlIHRvIHJldHVybiBlbWl0dGVyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSwgMSk7XG4gICAgfVxuICAgIGlmIChlbWl0dGVyICYmIHR5cGVvZiBlbWl0dGVyLmVtaXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gZW1pdCBsYXRlciwgdG8gYmUgYWJsZSB0byByZXR1cm4gZW1pdHRlclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGVtaXR0ZXIuZW1pdCgnZXJyb3InLCBlcnJvciwgb3B0aW9uYWxEYXRhKTtcbiAgICAgICAgICAgIGVtaXR0ZXIucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgIH0sIDEpO1xuICAgIH1cbiAgICByZXR1cm4gZW1pdHRlcjtcbn07XG4vKipcbiAqIFNob3VsZCBiZSB1c2VkIHRvIGNyZWF0ZSBmdWxsIGZ1bmN0aW9uL2V2ZW50IG5hbWUgZnJvbSBqc29uIGFiaVxuICpcbiAqIEBtZXRob2QgX2pzb25JbnRlcmZhY2VNZXRob2RUb1N0cmluZ1xuICogQHBhcmFtIHtPYmplY3R9IGpzb25cbiAqIEByZXR1cm4ge1N0cmluZ30gZnVsbCBmdW5jdGlvbi9ldmVudCBuYW1lXG4gKi9cbnZhciBfanNvbkludGVyZmFjZU1ldGhvZFRvU3RyaW5nID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBpZiAoISFqc29uICYmIHR5cGVvZiBqc29uID09PSAnb2JqZWN0JyAmJiBqc29uLm5hbWUgJiYganNvbi5uYW1lLmluZGV4T2YoJygnKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIGpzb24ubmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIGpzb24ubmFtZSArICcoJyArIF9mbGF0dGVuVHlwZXMoZmFsc2UsIGpzb24uaW5wdXRzKS5qb2luKCcsJykgKyAnKSc7XG59O1xuLyoqXG4gKiBTaG91bGQgYmUgdXNlZCB0byBmbGF0dGVuIGpzb24gYWJpIGlucHV0cy9vdXRwdXRzIGludG8gYW4gYXJyYXkgb2YgdHlwZS1yZXByZXNlbnRpbmctc3RyaW5nc1xuICpcbiAqIEBtZXRob2QgX2ZsYXR0ZW5UeXBlc1xuICogQHBhcmFtIHtib29sfSBpbmNsdWRlVHVwbGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBwdXRzXG4gKiBAcmV0dXJuIHtBcnJheX0gcGFyYW1ldGVycyBhcyBzdHJpbmdzXG4gKi9cbnZhciBfZmxhdHRlblR5cGVzID0gZnVuY3Rpb24gKGluY2x1ZGVUdXBsZSwgcHV0cykge1xuICAgIC8vIGNvbnNvbGUubG9nKFwiZW50ZXJlZCBfZmxhdHRlblR5cGVzLiBpbnB1dHMvb3V0cHV0czogXCIgKyBwdXRzKVxuICAgIHZhciB0eXBlcyA9IFtdO1xuICAgIHB1dHMuZm9yRWFjaChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbS5jb21wb25lbnRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKHBhcmFtLnR5cGUuc3Vic3RyaW5nKDAsIDUpICE9PSAndHVwbGUnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb21wb25lbnRzIGZvdW5kIGJ1dCB0eXBlIGlzIG5vdCB0dXBsZTsgcmVwb3J0IG9uIEdpdEh1YicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHN1ZmZpeCA9ICcnO1xuICAgICAgICAgICAgdmFyIGFycmF5QnJhY2tldCA9IHBhcmFtLnR5cGUuaW5kZXhPZignWycpO1xuICAgICAgICAgICAgaWYgKGFycmF5QnJhY2tldCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgc3VmZml4ID0gcGFyYW0udHlwZS5zdWJzdHJpbmcoYXJyYXlCcmFja2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBfZmxhdHRlblR5cGVzKGluY2x1ZGVUdXBsZSwgcGFyYW0uY29tcG9uZW50cyk7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcInJlc3VsdCBzaG91bGQgaGF2ZSB0aGluZ3M6IFwiICsgcmVzdWx0KVxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSAmJiBpbmNsdWRlVHVwbGUpIHtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImluY2x1ZGUgdHVwbGUgd29yZCwgYW5kIGl0cyBhbiBhcnJheS4gam9pbmluZy4uLjogXCIgKyByZXN1bHQudHlwZXMpXG4gICAgICAgICAgICAgICAgdHlwZXMucHVzaCgndHVwbGUoJyArIHJlc3VsdC5qb2luKCcsJykgKyAnKScgKyBzdWZmaXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWluY2x1ZGVUdXBsZSkge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiZG9uJ3QgaW5jbHVkZSB0dXBsZSwgYnV0IGl0cyBhbiBhcnJheS4gam9pbmluZy4uLjogXCIgKyByZXN1bHQpXG4gICAgICAgICAgICAgICAgdHlwZXMucHVzaCgnKCcgKyByZXN1bHQuam9pbignLCcpICsgJyknICsgc3VmZml4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiaXRzIGEgc2luZ2xlIHR5cGUgd2l0aGluIGEgdHVwbGU6IFwiICsgcmVzdWx0LnR5cGVzKVxuICAgICAgICAgICAgICAgIHR5cGVzLnB1c2goJygnICsgcmVzdWx0ICsgJyknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiaXRzIGEgdHlwZSBhbmQgbm90IGRpcmVjdGx5IGluIGEgdHVwbGU6IFwiICsgcGFyYW0udHlwZSlcbiAgICAgICAgICAgIHR5cGVzLnB1c2gocGFyYW0udHlwZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdHlwZXM7XG59O1xuLyoqXG4gKiBSZXR1cm5zIGEgcmFuZG9tIGhleCBzdHJpbmcgYnkgdGhlIGdpdmVuIGJ5dGVzIHNpemVcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gc2l6ZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xudmFyIHJhbmRvbUhleCA9IGZ1bmN0aW9uIChzaXplKSB7XG4gICAgcmV0dXJuICcweCcgKyByYW5kb21ieXRlcyhzaXplKS50b1N0cmluZygnaGV4Jyk7XG59O1xuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIGdldCBhc2NpaSBmcm9tIGl0J3MgaGV4IHJlcHJlc2VudGF0aW9uXG4gKlxuICogQG1ldGhvZCBoZXhUb0FzY2lpXG4gKiBAcGFyYW0ge1N0cmluZ30gaGV4XG4gKiBAcmV0dXJucyB7U3RyaW5nfSBhc2NpaSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgaGV4IHZhbHVlXG4gKi9cbnZhciBoZXhUb0FzY2lpID0gZnVuY3Rpb24gKGhleCkge1xuICAgIGlmICghdXRpbHMuaXNIZXhTdHJpY3QoaGV4KSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgcGFyYW1ldGVyIG11c3QgYmUgYSB2YWxpZCBIRVggc3RyaW5nLicpO1xuICAgIHZhciBzdHIgPSBcIlwiO1xuICAgIHZhciBpID0gMCwgbCA9IGhleC5sZW5ndGg7XG4gICAgaWYgKGhleC5zdWJzdHJpbmcoMCwgMikgPT09ICcweCcpIHtcbiAgICAgICAgaSA9IDI7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgbDsgaSArPSAyKSB7XG4gICAgICAgIHZhciBjb2RlID0gcGFyc2VJbnQoaGV4LnN1YnN0cihpLCAyKSwgMTYpO1xuICAgICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn07XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gZ2V0IGhleCByZXByZXNlbnRhdGlvbiAocHJlZml4ZWQgYnkgMHgpIG9mIGFzY2lpIHN0cmluZ1xuICpcbiAqIEBtZXRob2QgYXNjaWlUb0hleFxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybnMge1N0cmluZ30gaGV4IHJlcHJlc2VudGF0aW9uIG9mIGlucHV0IHN0cmluZ1xuICovXG52YXIgYXNjaWlUb0hleCA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICBpZiAoIXN0cilcbiAgICAgICAgcmV0dXJuIFwiMHgwMFwiO1xuICAgIHZhciBoZXggPSBcIlwiO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIHZhciBuID0gY29kZS50b1N0cmluZygxNik7XG4gICAgICAgIGhleCArPSBuLmxlbmd0aCA8IDIgPyAnMCcgKyBuIDogbjtcbiAgICB9XG4gICAgcmV0dXJuIFwiMHhcIiArIGhleDtcbn07XG4vKipcbiAqIFJldHVybnMgdmFsdWUgb2YgdW5pdCBpbiBXZWlcbiAqXG4gKiBAbWV0aG9kIGdldFVuaXRWYWx1ZVxuICogQHBhcmFtIHtTdHJpbmd9IHVuaXQgdGhlIHVuaXQgdG8gY29udmVydCB0bywgZGVmYXVsdCBldGhlclxuICogQHJldHVybnMge0JOfSB2YWx1ZSBvZiB0aGUgdW5pdCAoaW4gV2VpKVxuICogQHRocm93cyBlcnJvciBpZiB0aGUgdW5pdCBpcyBub3QgY29ycmVjdDp3XG4gKi9cbnZhciBnZXRVbml0VmFsdWUgPSBmdW5jdGlvbiAodW5pdCkge1xuICAgIHVuaXQgPSB1bml0ID8gdW5pdC50b0xvd2VyQ2FzZSgpIDogJ2V0aGVyJztcbiAgICBpZiAoIWV0aGpzVW5pdC51bml0TWFwW3VuaXRdKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyB1bml0IFwiJyArIHVuaXQgKyAnXCIgZG9lc25cXCd0IGV4aXN0LCBwbGVhc2UgdXNlIHRoZSBvbmUgb2YgdGhlIGZvbGxvd2luZyB1bml0cycgKyBKU09OLnN0cmluZ2lmeShldGhqc1VuaXQudW5pdE1hcCwgbnVsbCwgMikpO1xuICAgIH1cbiAgICByZXR1cm4gdW5pdDtcbn07XG4vKipcbiAqIFRha2VzIGEgbnVtYmVyIG9mIHdlaSBhbmQgY29udmVydHMgaXQgdG8gYW55IG90aGVyIGV0aGVyIHVuaXQuXG4gKlxuICogUG9zc2libGUgdW5pdHMgYXJlOlxuICogICBTSSBTaG9ydCAgIFNJIEZ1bGwgICAgICAgIEVmZmlneSAgICAgICBPdGhlclxuICogLSBrd2VpICAgICAgIGZlbXRvZXRoZXIgICAgIGJhYmJhZ2VcbiAqIC0gbXdlaSAgICAgICBwaWNvZXRoZXIgICAgICBsb3ZlbGFjZVxuICogLSBnd2VpICAgICAgIG5hbm9ldGhlciAgICAgIHNoYW5ub24gICAgICBuYW5vXG4gKiAtIC0tICAgICAgICAgbWljcm9ldGhlciAgICAgc3phYm8gICAgICAgIG1pY3JvXG4gKiAtIC0tICAgICAgICAgbWlsbGlldGhlciAgICAgZmlubmV5ICAgICAgIG1pbGxpXG4gKiAtIGV0aGVyICAgICAgLS0gICAgICAgICAgICAgLS1cbiAqIC0ga2V0aGVyICAgICAgICAgICAgICAgICAgICAtLSAgICAgICAgICAgZ3JhbmRcbiAqIC0gbWV0aGVyXG4gKiAtIGdldGhlclxuICogLSB0ZXRoZXJcbiAqXG4gKiBAbWV0aG9kIGZyb21XZWlcbiAqIEBwYXJhbSB7TnVtYmVyfFN0cmluZ30gbnVtYmVyIGNhbiBiZSBhIG51bWJlciwgbnVtYmVyIHN0cmluZyBvciBhIEhFWCBvZiBhIGRlY2ltYWxcbiAqIEBwYXJhbSB7U3RyaW5nfSB1bml0IHRoZSB1bml0IHRvIGNvbnZlcnQgdG8sIGRlZmF1bHQgZXRoZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xPYmplY3R9IFdoZW4gZ2l2ZW4gYSBCTiBvYmplY3QgaXQgcmV0dXJucyBvbmUgYXMgd2VsbCwgb3RoZXJ3aXNlIGEgbnVtYmVyXG4gKi9cbnZhciBmcm9tV2VpID0gZnVuY3Rpb24gKG51bWJlciwgdW5pdCkge1xuICAgIHVuaXQgPSBnZXRVbml0VmFsdWUodW5pdCk7XG4gICAgaWYgKCF1dGlscy5pc0JOKG51bWJlcikgJiYgISh0eXBlb2YgbnVtYmVyID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQbGVhc2UgcGFzcyBudW1iZXJzIGFzIHN0cmluZ3Mgb3IgQk4gb2JqZWN0cyB0byBhdm9pZCBwcmVjaXNpb24gZXJyb3JzLicpO1xuICAgIH1cbiAgICByZXR1cm4gdXRpbHMuaXNCTihudW1iZXIpID8gZXRoanNVbml0LmZyb21XZWkobnVtYmVyLCB1bml0KSA6IGV0aGpzVW5pdC5mcm9tV2VpKG51bWJlciwgdW5pdCkudG9TdHJpbmcoMTApO1xufTtcbi8qKlxuICogVGFrZXMgYSBudW1iZXIgb2YgYSB1bml0IGFuZCBjb252ZXJ0cyBpdCB0byB3ZWkuXG4gKlxuICogUG9zc2libGUgdW5pdHMgYXJlOlxuICogICBTSSBTaG9ydCAgIFNJIEZ1bGwgICAgICAgIEVmZmlneSAgICAgICBPdGhlclxuICogLSBrd2VpICAgICAgIGZlbXRvZXRoZXIgICAgIGJhYmJhZ2VcbiAqIC0gbXdlaSAgICAgICBwaWNvZXRoZXIgICAgICBsb3ZlbGFjZVxuICogLSBnd2VpICAgICAgIG5hbm9ldGhlciAgICAgIHNoYW5ub24gICAgICBuYW5vXG4gKiAtIC0tICAgICAgICAgbWljcm9ldGhlciAgICAgc3phYm8gICAgICAgIG1pY3JvXG4gKiAtIC0tICAgICAgICAgbWljcm9ldGhlciAgICAgc3phYm8gICAgICAgIG1pY3JvXG4gKiAtIC0tICAgICAgICAgbWlsbGlldGhlciAgICAgZmlubmV5ICAgICAgIG1pbGxpXG4gKiAtIGV0aGVyICAgICAgLS0gICAgICAgICAgICAgLS1cbiAqIC0ga2V0aGVyICAgICAgICAgICAgICAgICAgICAtLSAgICAgICAgICAgZ3JhbmRcbiAqIC0gbWV0aGVyXG4gKiAtIGdldGhlclxuICogLSB0ZXRoZXJcbiAqXG4gKiBAbWV0aG9kIHRvV2VpXG4gKiBAcGFyYW0ge051bWJlcnxTdHJpbmd8Qk59IG51bWJlciBjYW4gYmUgYSBudW1iZXIsIG51bWJlciBzdHJpbmcgb3IgYSBIRVggb2YgYSBkZWNpbWFsXG4gKiBAcGFyYW0ge1N0cmluZ30gdW5pdCB0aGUgdW5pdCB0byBjb252ZXJ0IGZyb20sIGRlZmF1bHQgZXRoZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xPYmplY3R9IFdoZW4gZ2l2ZW4gYSBCTiBvYmplY3QgaXQgcmV0dXJucyBvbmUgYXMgd2VsbCwgb3RoZXJ3aXNlIGEgbnVtYmVyXG4gKi9cbnZhciB0b1dlaSA9IGZ1bmN0aW9uIChudW1iZXIsIHVuaXQpIHtcbiAgICB1bml0ID0gZ2V0VW5pdFZhbHVlKHVuaXQpO1xuICAgIGlmICghdXRpbHMuaXNCTihudW1iZXIpICYmICEodHlwZW9mIG51bWJlciA9PT0gJ3N0cmluZycpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIHBhc3MgbnVtYmVycyBhcyBzdHJpbmdzIG9yIEJOIG9iamVjdHMgdG8gYXZvaWQgcHJlY2lzaW9uIGVycm9ycy4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHV0aWxzLmlzQk4obnVtYmVyKSA/IGV0aGpzVW5pdC50b1dlaShudW1iZXIsIHVuaXQpIDogZXRoanNVbml0LnRvV2VpKG51bWJlciwgdW5pdCkudG9TdHJpbmcoMTApO1xufTtcbi8qKlxuICogQ29udmVydHMgdG8gYSBjaGVja3N1bSBhZGRyZXNzXG4gKlxuICogQG1ldGhvZCB0b0NoZWNrc3VtQWRkcmVzc1xuICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3MgdGhlIGdpdmVuIEhFWCBhZGRyZXNzXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbnZhciB0b0NoZWNrc3VtQWRkcmVzcyA9IGZ1bmN0aW9uIChhZGRyZXNzKSB7XG4gICAgaWYgKHR5cGVvZiBhZGRyZXNzID09PSAndW5kZWZpbmVkJylcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIGlmICghL14oMHgpP1swLTlhLWZdezQwfSQvaS50ZXN0KGFkZHJlc3MpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dpdmVuIGFkZHJlc3MgXCInICsgYWRkcmVzcyArICdcIiBpcyBub3QgYSB2YWxpZCBFdGhlcmV1bSBhZGRyZXNzLicpO1xuICAgIGFkZHJlc3MgPSBhZGRyZXNzLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXjB4L2ksICcnKTtcbiAgICB2YXIgYWRkcmVzc0hhc2ggPSB1dGlscy5zaGEzKGFkZHJlc3MpLnJlcGxhY2UoL14weC9pLCAnJyk7XG4gICAgdmFyIGNoZWNrc3VtQWRkcmVzcyA9ICcweCc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhZGRyZXNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIElmIGl0aCBjaGFyYWN0ZXIgaXMgOCB0byBmIHRoZW4gbWFrZSBpdCB1cHBlcmNhc2VcbiAgICAgICAgaWYgKHBhcnNlSW50KGFkZHJlc3NIYXNoW2ldLCAxNikgPiA3KSB7XG4gICAgICAgICAgICBjaGVja3N1bUFkZHJlc3MgKz0gYWRkcmVzc1tpXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2hlY2tzdW1BZGRyZXNzICs9IGFkZHJlc3NbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNoZWNrc3VtQWRkcmVzcztcbn07XG4vKipcbiAqIFJldHVybnMgLTEgaWYgYTxiLCAxIGlmIGE+YjsgMCBpZiBhID09IGIuXG4gKiBGb3IgbW9yZSBkZXRhaWxzIG9uIHRoaXMgdHlwZSBvZiBmdW5jdGlvbiwgc2VlXG4gKiBkZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvc29ydFxuICpcbiAqIEBtZXRob2QgY29tcGFyZUJsb2NrTnVtYmVyc1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcnxCTn0gYVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcnxCTn0gYlxuICpcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IC0xLCAwLCBvciAxXG4gKi9cbnZhciBjb21wYXJlQmxvY2tOdW1iZXJzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYSA9PSBiKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBlbHNlIGlmICgoXCJnZW5lc2lzXCIgPT0gYSB8fCBcImVhcmxpZXN0XCIgPT0gYSB8fCAwID09IGEpICYmIChcImdlbmVzaXNcIiA9PSBiIHx8IFwiZWFybGllc3RcIiA9PSBiIHx8IDAgPT0gYikpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGVsc2UgaWYgKFwiZ2VuZXNpc1wiID09IGEgfHwgXCJlYXJsaWVzdFwiID09IGEpIHtcbiAgICAgICAgLy8gYiAhPT0gYSwgdGh1cyBhIDwgYlxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGVsc2UgaWYgKFwiZ2VuZXNpc1wiID09IGIgfHwgXCJlYXJsaWVzdFwiID09IGIpIHtcbiAgICAgICAgLy8gYiAhPT0gYSwgdGh1cyBhID4gYlxuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYSA9PSBcImxhdGVzdFwiKSB7XG4gICAgICAgIGlmIChiID09IFwicGVuZGluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBiICE9PSAoXCJwZW5kaW5nXCIgT1IgXCJsYXRlc3RcIiksIHRodXMgYSA+IGJcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGIgPT09IFwibGF0ZXN0XCIpIHtcbiAgICAgICAgaWYgKGEgPT0gXCJwZW5kaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gYiAhPT0gKFwicGVuZGluZ1wiIE9SIFwibGF0ZXN0XCIpLCB0aHVzIGEgPiBiXG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoYSA9PSBcInBlbmRpbmdcIikge1xuICAgICAgICAvLyBiICg9PSBPUiA8KSBcImxhdGVzdFwiLCB0aHVzIGEgPiBiXG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICBlbHNlIGlmIChiID09IFwicGVuZGluZ1wiKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCBibkEgPSBuZXcgQk4oYSk7XG4gICAgICAgIGxldCBibkIgPSBuZXcgQk4oYik7XG4gICAgICAgIGlmIChibkEubHQoYm5CKSkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGJuQS5lcShibkIpKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgfVxufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIF9maXJlRXJyb3I6IF9maXJlRXJyb3IsXG4gICAgX2pzb25JbnRlcmZhY2VNZXRob2RUb1N0cmluZzogX2pzb25JbnRlcmZhY2VNZXRob2RUb1N0cmluZyxcbiAgICBfZmxhdHRlblR5cGVzOiBfZmxhdHRlblR5cGVzLFxuICAgIC8vIGV4dHJhY3REaXNwbGF5TmFtZTogZXh0cmFjdERpc3BsYXlOYW1lLFxuICAgIC8vIGV4dHJhY3RUeXBlTmFtZTogZXh0cmFjdFR5cGVOYW1lLFxuICAgIHJhbmRvbUhleDogcmFuZG9tSGV4LFxuICAgIEJOOiB1dGlscy5CTixcbiAgICBpc0JOOiB1dGlscy5pc0JOLFxuICAgIGlzQmlnTnVtYmVyOiB1dGlscy5pc0JpZ051bWJlcixcbiAgICBpc0hleDogdXRpbHMuaXNIZXgsXG4gICAgaXNIZXhTdHJpY3Q6IHV0aWxzLmlzSGV4U3RyaWN0LFxuICAgIHNoYTM6IHV0aWxzLnNoYTMsXG4gICAgc2hhM1JhdzogdXRpbHMuc2hhM1JhdyxcbiAgICBrZWNjYWsyNTY6IHV0aWxzLnNoYTMsXG4gICAgc29saWRpdHlTaGEzOiBzb2xpZGl0eVNoYTMuc29saWRpdHlTaGEzLFxuICAgIHNvbGlkaXR5U2hhM1Jhdzogc29saWRpdHlTaGEzLnNvbGlkaXR5U2hhM1JhdyxcbiAgICBlbmNvZGVQYWNrZWQ6IHNvbGlkaXR5U2hhMy5lbmNvZGVQYWNrZWQsXG4gICAgaXNBZGRyZXNzOiB1dGlscy5pc0FkZHJlc3MsXG4gICAgY2hlY2tBZGRyZXNzQ2hlY2tzdW06IHV0aWxzLmNoZWNrQWRkcmVzc0NoZWNrc3VtLFxuICAgIHRvQ2hlY2tzdW1BZGRyZXNzOiB0b0NoZWNrc3VtQWRkcmVzcyxcbiAgICB0b0hleDogdXRpbHMudG9IZXgsXG4gICAgdG9CTjogdXRpbHMudG9CTixcbiAgICBieXRlc1RvSGV4OiB1dGlscy5ieXRlc1RvSGV4LFxuICAgIGhleFRvQnl0ZXM6IHV0aWxzLmhleFRvQnl0ZXMsXG4gICAgaGV4VG9OdW1iZXJTdHJpbmc6IHV0aWxzLmhleFRvTnVtYmVyU3RyaW5nLFxuICAgIGhleFRvTnVtYmVyOiB1dGlscy5oZXhUb051bWJlcixcbiAgICB0b0RlY2ltYWw6IHV0aWxzLmhleFRvTnVtYmVyLFxuICAgIG51bWJlclRvSGV4OiB1dGlscy5udW1iZXJUb0hleCxcbiAgICBmcm9tRGVjaW1hbDogdXRpbHMubnVtYmVyVG9IZXgsXG4gICAgaGV4VG9VdGY4OiB1dGlscy5oZXhUb1V0ZjgsXG4gICAgaGV4VG9TdHJpbmc6IHV0aWxzLmhleFRvVXRmOCxcbiAgICB0b1V0Zjg6IHV0aWxzLmhleFRvVXRmOCxcbiAgICBzdHJpcEhleFByZWZpeDogdXRpbHMuc3RyaXBIZXhQcmVmaXgsXG4gICAgdXRmOFRvSGV4OiB1dGlscy51dGY4VG9IZXgsXG4gICAgc3RyaW5nVG9IZXg6IHV0aWxzLnV0ZjhUb0hleCxcbiAgICBmcm9tVXRmODogdXRpbHMudXRmOFRvSGV4LFxuICAgIGhleFRvQXNjaWk6IGhleFRvQXNjaWksXG4gICAgdG9Bc2NpaTogaGV4VG9Bc2NpaSxcbiAgICBhc2NpaVRvSGV4OiBhc2NpaVRvSGV4LFxuICAgIGZyb21Bc2NpaTogYXNjaWlUb0hleCxcbiAgICB1bml0TWFwOiBldGhqc1VuaXQudW5pdE1hcCxcbiAgICB0b1dlaTogdG9XZWksXG4gICAgZnJvbVdlaTogZnJvbVdlaSxcbiAgICBwYWRMZWZ0OiB1dGlscy5sZWZ0UGFkLFxuICAgIGxlZnRQYWQ6IHV0aWxzLmxlZnRQYWQsXG4gICAgcGFkUmlnaHQ6IHV0aWxzLnJpZ2h0UGFkLFxuICAgIHJpZ2h0UGFkOiB1dGlscy5yaWdodFBhZCxcbiAgICB0b1R3b3NDb21wbGVtZW50OiB1dGlscy50b1R3b3NDb21wbGVtZW50LFxuICAgIGlzQmxvb206IHV0aWxzLmlzQmxvb20sXG4gICAgaXNVc2VyRXRoZXJldW1BZGRyZXNzSW5CbG9vbTogdXRpbHMuaXNVc2VyRXRoZXJldW1BZGRyZXNzSW5CbG9vbSxcbiAgICBpc0NvbnRyYWN0QWRkcmVzc0luQmxvb206IHV0aWxzLmlzQ29udHJhY3RBZGRyZXNzSW5CbG9vbSxcbiAgICBpc1RvcGljOiB1dGlscy5pc1RvcGljLFxuICAgIGlzVG9waWNJbkJsb29tOiB1dGlscy5pc1RvcGljSW5CbG9vbSxcbiAgICBpc0luQmxvb206IHV0aWxzLmlzSW5CbG9vbSxcbiAgICBjb21wYXJlQmxvY2tOdW1iZXJzOiBjb21wYXJlQmxvY2tOdW1iZXJzLFxuICAgIHRvTnVtYmVyOiB1dGlscy50b051bWJlclxufTtcbiIsIi8qXG4gVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxuIHdlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxuIHdlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuIGFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuLyoqXG4gKiBAZmlsZSBzb2xpZGl0eVNoYTMuanNcbiAqIEBhdXRob3IgRmFiaWFuIFZvZ2Vsc3RlbGxlciA8ZmFiaWFuQGV0aGVyZXVtLm9yZz5cbiAqIEBkYXRlIDIwMTdcbiAqL1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMuanMnKTtcbnZhciBfZWxlbWVudGFyeU5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIC8qanNoaW50IG1heGNvbXBsZXhpdHk6ZmFsc2UgKi9cbiAgICBpZiAobmFtZS5zdGFydHNXaXRoKCdpbnRbJykpIHtcbiAgICAgICAgcmV0dXJuICdpbnQyNTYnICsgbmFtZS5zbGljZSgzKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobmFtZSA9PT0gJ2ludCcpIHtcbiAgICAgICAgcmV0dXJuICdpbnQyNTYnO1xuICAgIH1cbiAgICBlbHNlIGlmIChuYW1lLnN0YXJ0c1dpdGgoJ3VpbnRbJykpIHtcbiAgICAgICAgcmV0dXJuICd1aW50MjU2JyArIG5hbWUuc2xpY2UoNCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG5hbWUgPT09ICd1aW50Jykge1xuICAgICAgICByZXR1cm4gJ3VpbnQyNTYnO1xuICAgIH1cbiAgICBlbHNlIGlmIChuYW1lLnN0YXJ0c1dpdGgoJ2ZpeGVkWycpKSB7XG4gICAgICAgIHJldHVybiAnZml4ZWQxMjh4MTI4JyArIG5hbWUuc2xpY2UoNSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG5hbWUgPT09ICdmaXhlZCcpIHtcbiAgICAgICAgcmV0dXJuICdmaXhlZDEyOHgxMjgnO1xuICAgIH1cbiAgICBlbHNlIGlmIChuYW1lLnN0YXJ0c1dpdGgoJ3VmaXhlZFsnKSkge1xuICAgICAgICByZXR1cm4gJ3VmaXhlZDEyOHgxMjgnICsgbmFtZS5zbGljZSg2KTtcbiAgICB9XG4gICAgZWxzZSBpZiAobmFtZSA9PT0gJ3VmaXhlZCcpIHtcbiAgICAgICAgcmV0dXJuICd1Zml4ZWQxMjh4MTI4JztcbiAgICB9XG4gICAgcmV0dXJuIG5hbWU7XG59O1xuLy8gUGFyc2UgTiBmcm9tIHR5cGU8Tj5cbnZhciBfcGFyc2VUeXBlTiA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgdmFyIHR5cGVzaXplID0gL15cXEQrKFxcZCspLiokLy5leGVjKHR5cGUpO1xuICAgIHJldHVybiB0eXBlc2l6ZSA/IHBhcnNlSW50KHR5cGVzaXplWzFdLCAxMCkgOiBudWxsO1xufTtcbi8vIFBhcnNlIE4gZnJvbSB0eXBlWzxOPl1cbnZhciBfcGFyc2VUeXBlTkFycmF5ID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICB2YXIgYXJyYXlTaXplID0gL15cXEQrXFxkKlxcWyhcXGQrKVxcXSQvLmV4ZWModHlwZSk7XG4gICAgcmV0dXJuIGFycmF5U2l6ZSA/IHBhcnNlSW50KGFycmF5U2l6ZVsxXSwgMTApIDogbnVsbDtcbn07XG52YXIgX3BhcnNlTnVtYmVyID0gZnVuY3Rpb24gKGFyZykge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIGFyZztcbiAgICBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzSGV4U3RyaWN0KGFyZykpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQk4oYXJnLnJlcGxhY2UoLzB4L2ksICcnKSwgMTYpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBCTihhcmcsIDEwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gbmV3IEJOKGFyZyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHV0aWxzLmlzQmlnTnVtYmVyKGFyZykpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCTihhcmcudG9TdHJpbmcoMTApKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodXRpbHMuaXNCTihhcmcpKSB7XG4gICAgICAgIHJldHVybiBhcmc7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYXJnICsgJyBpcyBub3QgYSBudW1iZXInKTtcbiAgICB9XG59O1xudmFyIF9zb2xpZGl0eVBhY2sgPSBmdW5jdGlvbiAodHlwZSwgdmFsdWUsIGFycmF5U2l6ZSkge1xuICAgIC8qanNoaW50IG1heGNvbXBsZXhpdHk6ZmFsc2UgKi9cbiAgICB2YXIgc2l6ZSwgbnVtO1xuICAgIHR5cGUgPSBfZWxlbWVudGFyeU5hbWUodHlwZSk7XG4gICAgaWYgKHR5cGUgPT09ICdieXRlcycpIHtcbiAgICAgICAgaWYgKHZhbHVlLnJlcGxhY2UoL14weC9pLCAnJykubGVuZ3RoICUgMiAhPT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGJ5dGVzIGNoYXJhY3RlcnMgJyArIHZhbHVlLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdXRpbHMudXRmOFRvSGV4KHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSA9PT0gJ2Jvb2wnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA/ICcwMScgOiAnMDAnO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlLnN0YXJ0c1dpdGgoJ2FkZHJlc3MnKSkge1xuICAgICAgICBpZiAoYXJyYXlTaXplKSB7XG4gICAgICAgICAgICBzaXplID0gNjQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzaXplID0gNDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF1dGlscy5pc0FkZHJlc3ModmFsdWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodmFsdWUgKyAnIGlzIG5vdCBhIHZhbGlkIGFkZHJlc3MsIG9yIHRoZSBjaGVja3N1bSBpcyBpbnZhbGlkLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1dGlscy5sZWZ0UGFkKHZhbHVlLnRvTG93ZXJDYXNlKCksIHNpemUpO1xuICAgIH1cbiAgICBzaXplID0gX3BhcnNlVHlwZU4odHlwZSk7XG4gICAgaWYgKHR5cGUuc3RhcnRzV2l0aCgnYnl0ZXMnKSkge1xuICAgICAgICBpZiAoIXNpemUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYnl0ZXNbXSBub3QgeWV0IHN1cHBvcnRlZCBpbiBzb2xpZGl0eScpO1xuICAgICAgICB9XG4gICAgICAgIC8vIG11c3QgYmUgMzIgYnl0ZSBzbGljZXMgd2hlbiBpbiBhbiBhcnJheVxuICAgICAgICBpZiAoYXJyYXlTaXplKSB7XG4gICAgICAgICAgICBzaXplID0gMzI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNpemUgPCAxIHx8IHNpemUgPiAzMiB8fCBzaXplIDwgdmFsdWUucmVwbGFjZSgvXjB4L2ksICcnKS5sZW5ndGggLyAyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYnl0ZXMnICsgc2l6ZSArICcgZm9yICcgKyB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHV0aWxzLnJpZ2h0UGFkKHZhbHVlLCBzaXplICogMik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUuc3RhcnRzV2l0aCgndWludCcpKSB7XG4gICAgICAgIGlmICgoc2l6ZSAlIDgpIHx8IChzaXplIDwgOCkgfHwgKHNpemUgPiAyNTYpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdWludCcgKyBzaXplICsgJyBzaXplJyk7XG4gICAgICAgIH1cbiAgICAgICAgbnVtID0gX3BhcnNlTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgaWYgKG51bS5iaXRMZW5ndGgoKSA+IHNpemUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU3VwcGxpZWQgdWludCBleGNlZWRzIHdpZHRoOiAnICsgc2l6ZSArICcgdnMgJyArIG51bS5iaXRMZW5ndGgoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bS5sdChuZXcgQk4oMCkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N1cHBsaWVkIHVpbnQgJyArIG51bS50b1N0cmluZygpICsgJyBpcyBuZWdhdGl2ZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaXplID8gdXRpbHMubGVmdFBhZChudW0udG9TdHJpbmcoJ2hleCcpLCBzaXplIC8gOCAqIDIpIDogbnVtO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlLnN0YXJ0c1dpdGgoJ2ludCcpKSB7XG4gICAgICAgIGlmICgoc2l6ZSAlIDgpIHx8IChzaXplIDwgOCkgfHwgKHNpemUgPiAyNTYpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW50JyArIHNpemUgKyAnIHNpemUnKTtcbiAgICAgICAgfVxuICAgICAgICBudW0gPSBfcGFyc2VOdW1iZXIodmFsdWUpO1xuICAgICAgICBpZiAobnVtLmJpdExlbmd0aCgpID4gc2l6ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdXBwbGllZCBpbnQgZXhjZWVkcyB3aWR0aDogJyArIHNpemUgKyAnIHZzICcgKyBudW0uYml0TGVuZ3RoKCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChudW0ubHQobmV3IEJOKDApKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bS50b1R3b3Moc2l6ZSkudG9TdHJpbmcoJ2hleCcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNpemUgPyB1dGlscy5sZWZ0UGFkKG51bS50b1N0cmluZygnaGV4JyksIHNpemUgLyA4ICogMikgOiBudW07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIEZJWE1FOiBzdXBwb3J0IGFsbCBvdGhlciB0eXBlc1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIG9yIGludmFsaWQgdHlwZTogJyArIHR5cGUpO1xuICAgIH1cbn07XG52YXIgX3Byb2Nlc3NTb2xpZGl0eUVuY29kZVBhY2tlZEFyZ3MgPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgLypqc2hpbnQgbWF4Y29tcGxleGl0eTpmYWxzZSAqL1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBdXRvZGV0ZWN0aW9uIG9mIGFycmF5IHR5cGVzIGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG4gICAgfVxuICAgIHZhciB0eXBlLCB2YWx1ZSA9ICcnO1xuICAgIHZhciBoZXhBcmcsIGFycmF5U2l6ZTtcbiAgICAvLyBpZiB0eXBlIGlzIGdpdmVuXG4gICAgaWYgKCEhYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIChhcmcuaGFzT3duUHJvcGVydHkoJ3YnKSB8fCBhcmcuaGFzT3duUHJvcGVydHkoJ3QnKSB8fCBhcmcuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgfHwgYXJnLmhhc093blByb3BlcnR5KCd0eXBlJykpKSB7XG4gICAgICAgIHR5cGUgPSBhcmcuaGFzT3duUHJvcGVydHkoJ3QnKSA/IGFyZy50IDogYXJnLnR5cGU7XG4gICAgICAgIHZhbHVlID0gYXJnLmhhc093blByb3BlcnR5KCd2JykgPyBhcmcudiA6IGFyZy52YWx1ZTtcbiAgICAgICAgLy8gb3RoZXJ3aXNlIHRyeSB0byBndWVzcyB0aGUgdHlwZVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdHlwZSA9IHV0aWxzLnRvSGV4KGFyZywgdHJ1ZSk7XG4gICAgICAgIHZhbHVlID0gdXRpbHMudG9IZXgoYXJnKTtcbiAgICAgICAgaWYgKCF0eXBlLnN0YXJ0c1dpdGgoJ2ludCcpICYmICF0eXBlLnN0YXJ0c1dpdGgoJ3VpbnQnKSkge1xuICAgICAgICAgICAgdHlwZSA9ICdieXRlcyc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCh0eXBlLnN0YXJ0c1dpdGgoJ2ludCcpIHx8IHR5cGUuc3RhcnRzV2l0aCgndWludCcpKSAmJiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICEvXigtKT8weC9pLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gbmV3IEJOKHZhbHVlKTtcbiAgICB9XG4gICAgLy8gZ2V0IHRoZSBhcnJheSBzaXplXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGFycmF5U2l6ZSA9IF9wYXJzZVR5cGVOQXJyYXkodHlwZSk7XG4gICAgICAgIGlmIChhcnJheVNpemUgJiYgdmFsdWUubGVuZ3RoICE9PSBhcnJheVNpemUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0eXBlICsgJyBpcyBub3QgbWF0Y2hpbmcgdGhlIGdpdmVuIGFycmF5ICcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlTaXplID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBoZXhBcmcgPSB2YWx1ZS5tYXAoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zb2xpZGl0eVBhY2sodHlwZSwgdmFsLCBhcnJheVNpemUpLnRvU3RyaW5nKCdoZXgnKS5yZXBsYWNlKCcweCcsICcnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBoZXhBcmcuam9pbignJyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBoZXhBcmcgPSBfc29saWRpdHlQYWNrKHR5cGUsIHZhbHVlLCBhcnJheVNpemUpO1xuICAgICAgICByZXR1cm4gaGV4QXJnLnRvU3RyaW5nKCdoZXgnKS5yZXBsYWNlKCcweCcsICcnKTtcbiAgICB9XG59O1xuLyoqXG4gKiBIYXNoZXMgc29saWRpdHkgdmFsdWVzIHRvIGEgc2hhMyBoYXNoIHVzaW5nIGtlY2NhayAyNTZcbiAqXG4gKiBAbWV0aG9kIHNvbGlkaXR5U2hhM1xuICogQHJldHVybiB7T2JqZWN0fSB0aGUgc2hhM1xuICovXG52YXIgc29saWRpdHlTaGEzID0gZnVuY3Rpb24gKCkge1xuICAgIC8qanNoaW50IG1heGNvbXBsZXhpdHk6ZmFsc2UgKi9cbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgdmFyIGhleEFyZ3MgPSBhcmdzLm1hcChfcHJvY2Vzc1NvbGlkaXR5RW5jb2RlUGFja2VkQXJncyk7XG4gICAgLy8gY29uc29sZS5sb2coYXJncywgaGV4QXJncyk7XG4gICAgLy8gY29uc29sZS5sb2coJzB4JysgaGV4QXJncy5qb2luKCcnKSk7XG4gICAgcmV0dXJuIHV0aWxzLnNoYTMoJzB4JyArIGhleEFyZ3Muam9pbignJykpO1xufTtcbi8qKlxuICogSGFzaGVzIHNvbGlkaXR5IHZhbHVlcyB0byBhIHNoYTMgaGFzaCB1c2luZyBrZWNjYWsgMjU2IGJ1dCBkb2VzIHJldHVybiB0aGUgaGFzaCBvZiB2YWx1ZSBgbnVsbGAgaW5zdGVhZCBvZiBgbnVsbGBcbiAqXG4gKiBAbWV0aG9kIHNvbGlkaXR5U2hhM1Jhd1xuICogQHJldHVybiB7T2JqZWN0fSB0aGUgc2hhM1xuICovXG52YXIgc29saWRpdHlTaGEzUmF3ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1dGlscy5zaGEzUmF3KCcweCcgKyBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLm1hcChfcHJvY2Vzc1NvbGlkaXR5RW5jb2RlUGFja2VkQXJncykuam9pbignJykpO1xufTtcbi8qKlxuICogRW5jb2RlIHBhY2tlZCBhcmdzIHRvIGhleFxuICpcbiAqIEBtZXRob2QgZW5jb2RlUGFja2VkXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSBoZXggZW5jb2RlZCBhcmd1bWVudHNcbiAqL1xudmFyIGVuY29kZVBhY2tlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAvKmpzaGludCBtYXhjb21wbGV4aXR5OmZhbHNlICovXG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgIHZhciBoZXhBcmdzID0gYXJncy5tYXAoX3Byb2Nlc3NTb2xpZGl0eUVuY29kZVBhY2tlZEFyZ3MpO1xuICAgIHJldHVybiAnMHgnICsgaGV4QXJncy5qb2luKCcnKS50b0xvd2VyQ2FzZSgpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHNvbGlkaXR5U2hhMzogc29saWRpdHlTaGEzLFxuICAgIHNvbGlkaXR5U2hhM1Jhdzogc29saWRpdHlTaGEzUmF3LFxuICAgIGVuY29kZVBhY2tlZDogZW5jb2RlUGFja2VkXG59O1xuIiwiLypcbiBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICovXG4vKipcbiAqIEBmaWxlIHV0aWxzLmpzXG4gKiBAYXV0aG9yIEZhYmlhbiBWb2dlbHN0ZWxsZXIgPGZhYmlhbkBldGhlcmV1bS5vcmc+XG4gKiBAZGF0ZSAyMDE3XG4gKi9cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgbnVtYmVyVG9CTiA9IHJlcXVpcmUoJ251bWJlci10by1ibicpO1xudmFyIHV0ZjggPSByZXF1aXJlKCd1dGY4Jyk7XG52YXIgZXRoZXJldW1qc1V0aWwgPSByZXF1aXJlKCdldGhlcmV1bWpzLXV0aWwnKTtcbnZhciBldGhlcmV1bUJsb29tRmlsdGVycyA9IHJlcXVpcmUoJ2V0aGVyZXVtLWJsb29tLWZpbHRlcnMnKTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIG9iamVjdCBpcyBCTiwgb3RoZXJ3aXNlIGZhbHNlXG4gKlxuICogQG1ldGhvZCBpc0JOXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG52YXIgaXNCTiA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICByZXR1cm4gQk4uaXNCTihvYmplY3QpO1xufTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIG9iamVjdCBpcyBCaWdOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICpcbiAqIEBtZXRob2QgaXNCaWdOdW1iZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbnZhciBpc0JpZ051bWJlciA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ICYmIG9iamVjdC5jb25zdHJ1Y3RvciAmJiBvYmplY3QuY29uc3RydWN0b3IubmFtZSA9PT0gJ0JpZ051bWJlcic7XG59O1xuLyoqXG4gKiBUYWtlcyBhbiBpbnB1dCBhbmQgdHJhbnNmb3JtcyBpdCBpbnRvIGFuIEJOXG4gKlxuICogQG1ldGhvZCB0b0JOXG4gKiBAcGFyYW0ge051bWJlcnxTdHJpbmd8Qk59IG51bWJlciwgc3RyaW5nLCBIRVggc3RyaW5nIG9yIEJOXG4gKiBAcmV0dXJuIHtCTn0gQk5cbiAqL1xudmFyIHRvQk4gPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIG51bWJlclRvQk4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGUgKyAnIEdpdmVuIHZhbHVlOiBcIicgKyBudW1iZXIgKyAnXCInKTtcbiAgICB9XG59O1xuLyoqXG4gKiBUYWtlcyBhbmQgaW5wdXQgdHJhbnNmb3JtcyBpdCBpbnRvIEJOIGFuZCBpZiBpdCBpcyBuZWdhdGl2ZSB2YWx1ZSwgaW50byB0d28ncyBjb21wbGVtZW50XG4gKlxuICogQG1ldGhvZCB0b1R3b3NDb21wbGVtZW50XG4gKiBAcGFyYW0ge051bWJlcnxTdHJpbmd8Qk59IG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG52YXIgdG9Ud29zQ29tcGxlbWVudCA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICByZXR1cm4gJzB4JyArIHRvQk4obnVtYmVyKS50b1R3b3MoMjU2KS50b1N0cmluZygxNiwgNjQpO1xufTtcbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBzdHJpbmcgaXMgYW4gYWRkcmVzc1xuICpcbiAqIEBtZXRob2QgaXNBZGRyZXNzXG4gKiBAcGFyYW0ge1N0cmluZ30gYWRkcmVzcyB0aGUgZ2l2ZW4gSEVYIGFkZHJlc3NcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbnZhciBpc0FkZHJlc3MgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICAgIC8vIGNoZWNrIGlmIGl0IGhhcyB0aGUgYmFzaWMgcmVxdWlyZW1lbnRzIG9mIGFuIGFkZHJlc3NcbiAgICBpZiAoIS9eKDB4KT9bMC05YS1mXXs0MH0kL2kudGVzdChhZGRyZXNzKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIC8vIElmIGl0J3MgQUxMIGxvd2VyY2FzZSBvciBBTEwgdXBwcGVyY2FzZVxuICAgIH1cbiAgICBlbHNlIGlmICgvXigweHwwWCk/WzAtOWEtZl17NDB9JC8udGVzdChhZGRyZXNzKSB8fCAvXigweHwwWCk/WzAtOUEtRl17NDB9JC8udGVzdChhZGRyZXNzKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgLy8gT3RoZXJ3aXNlIGNoZWNrIGVhY2ggY2FzZVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNoZWNrQWRkcmVzc0NoZWNrc3VtKGFkZHJlc3MpO1xuICAgIH1cbn07XG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gc3RyaW5nIGlzIGEgY2hlY2tzdW1tZWQgYWRkcmVzc1xuICpcbiAqIEBtZXRob2QgY2hlY2tBZGRyZXNzQ2hlY2tzdW1cbiAqIEBwYXJhbSB7U3RyaW5nfSBhZGRyZXNzIHRoZSBnaXZlbiBIRVggYWRkcmVzc1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xudmFyIGNoZWNrQWRkcmVzc0NoZWNrc3VtID0gZnVuY3Rpb24gKGFkZHJlc3MpIHtcbiAgICAvLyBDaGVjayBlYWNoIGNhc2VcbiAgICBhZGRyZXNzID0gYWRkcmVzcy5yZXBsYWNlKC9eMHgvaSwgJycpO1xuICAgIHZhciBhZGRyZXNzSGFzaCA9IHNoYTMoYWRkcmVzcy50b0xvd2VyQ2FzZSgpKS5yZXBsYWNlKC9eMHgvaSwgJycpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDA7IGkrKykge1xuICAgICAgICAvLyB0aGUgbnRoIGxldHRlciBzaG91bGQgYmUgdXBwZXJjYXNlIGlmIHRoZSBudGggZGlnaXQgb2YgY2FzZW1hcCBpcyAxXG4gICAgICAgIGlmICgocGFyc2VJbnQoYWRkcmVzc0hhc2hbaV0sIDE2KSA+IDcgJiYgYWRkcmVzc1tpXS50b1VwcGVyQ2FzZSgpICE9PSBhZGRyZXNzW2ldKSB8fCAocGFyc2VJbnQoYWRkcmVzc0hhc2hbaV0sIDE2KSA8PSA3ICYmIGFkZHJlc3NbaV0udG9Mb3dlckNhc2UoKSAhPT0gYWRkcmVzc1tpXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gcGFkIHN0cmluZyB0byBleHBlY3RlZCBsZW5ndGhcbiAqXG4gKiBAbWV0aG9kIGxlZnRQYWRcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgdG8gYmUgcGFkZGVkXG4gKiBAcGFyYW0ge051bWJlcn0gY2hhcnMgdGhhdCByZXN1bHQgc3RyaW5nIHNob3VsZCBoYXZlXG4gKiBAcGFyYW0ge1N0cmluZ30gc2lnbiwgYnkgZGVmYXVsdCAwXG4gKiBAcmV0dXJucyB7U3RyaW5nfSByaWdodCBhbGlnbmVkIHN0cmluZ1xuICovXG52YXIgbGVmdFBhZCA9IGZ1bmN0aW9uIChzdHJpbmcsIGNoYXJzLCBzaWduKSB7XG4gICAgdmFyIGhhc1ByZWZpeCA9IC9eMHgvaS50ZXN0KHN0cmluZykgfHwgdHlwZW9mIHN0cmluZyA9PT0gJ251bWJlcic7XG4gICAgc3RyaW5nID0gc3RyaW5nLnRvU3RyaW5nKDE2KS5yZXBsYWNlKC9eMHgvaSwgJycpO1xuICAgIHZhciBwYWRkaW5nID0gKGNoYXJzIC0gc3RyaW5nLmxlbmd0aCArIDEgPj0gMCkgPyBjaGFycyAtIHN0cmluZy5sZW5ndGggKyAxIDogMDtcbiAgICByZXR1cm4gKGhhc1ByZWZpeCA/ICcweCcgOiAnJykgKyBuZXcgQXJyYXkocGFkZGluZykuam9pbihzaWduID8gc2lnbiA6IFwiMFwiKSArIHN0cmluZztcbn07XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gcGFkIHN0cmluZyB0byBleHBlY3RlZCBsZW5ndGhcbiAqXG4gKiBAbWV0aG9kIHJpZ2h0UGFkXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIHRvIGJlIHBhZGRlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGNoYXJzIHRoYXQgcmVzdWx0IHN0cmluZyBzaG91bGQgaGF2ZVxuICogQHBhcmFtIHtTdHJpbmd9IHNpZ24sIGJ5IGRlZmF1bHQgMFxuICogQHJldHVybnMge1N0cmluZ30gcmlnaHQgYWxpZ25lZCBzdHJpbmdcbiAqL1xudmFyIHJpZ2h0UGFkID0gZnVuY3Rpb24gKHN0cmluZywgY2hhcnMsIHNpZ24pIHtcbiAgICB2YXIgaGFzUHJlZml4ID0gL14weC9pLnRlc3Qoc3RyaW5nKSB8fCB0eXBlb2Ygc3RyaW5nID09PSAnbnVtYmVyJztcbiAgICBzdHJpbmcgPSBzdHJpbmcudG9TdHJpbmcoMTYpLnJlcGxhY2UoL14weC9pLCAnJyk7XG4gICAgdmFyIHBhZGRpbmcgPSAoY2hhcnMgLSBzdHJpbmcubGVuZ3RoICsgMSA+PSAwKSA/IGNoYXJzIC0gc3RyaW5nLmxlbmd0aCArIDEgOiAwO1xuICAgIHJldHVybiAoaGFzUHJlZml4ID8gJzB4JyA6ICcnKSArIHN0cmluZyArIChuZXcgQXJyYXkocGFkZGluZykuam9pbihzaWduID8gc2lnbiA6IFwiMFwiKSk7XG59O1xuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIGdldCBoZXggcmVwcmVzZW50YXRpb24gKHByZWZpeGVkIGJ5IDB4KSBvZiB1dGY4IHN0cmluZ1xuICpcbiAqIEBtZXRob2QgdXRmOFRvSGV4XG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBoZXggcmVwcmVzZW50YXRpb24gb2YgaW5wdXQgc3RyaW5nXG4gKi9cbnZhciB1dGY4VG9IZXggPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgc3RyID0gdXRmOC5lbmNvZGUoc3RyKTtcbiAgICB2YXIgaGV4ID0gXCJcIjtcbiAgICAvLyByZW1vdmUgXFx1MDAwMCBwYWRkaW5nIGZyb20gZWl0aGVyIHNpZGVcbiAgICBzdHIgPSBzdHIucmVwbGFjZSgvXig/OlxcdTAwMDApKi8sICcnKTtcbiAgICBzdHIgPSBzdHIuc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIik7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UoL14oPzpcXHUwMDAwKSovLCAnJyk7XG4gICAgc3RyID0gc3RyLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIC8vIGlmIChjb2RlICE9PSAwKSB7XG4gICAgICAgIHZhciBuID0gY29kZS50b1N0cmluZygxNik7XG4gICAgICAgIGhleCArPSBuLmxlbmd0aCA8IDIgPyAnMCcgKyBuIDogbjtcbiAgICAgICAgLy8gfVxuICAgIH1cbiAgICByZXR1cm4gXCIweFwiICsgaGV4O1xufTtcbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBnZXQgdXRmOCBmcm9tIGl0J3MgaGV4IHJlcHJlc2VudGF0aW9uXG4gKlxuICogQG1ldGhvZCBoZXhUb1V0ZjhcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZXhcbiAqIEByZXR1cm5zIHtTdHJpbmd9IGFzY2lpIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBoZXggdmFsdWVcbiAqL1xudmFyIGhleFRvVXRmOCA9IGZ1bmN0aW9uIChoZXgpIHtcbiAgICBpZiAoIWlzSGV4U3RyaWN0KGhleCkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHBhcmFtZXRlciBcIicgKyBoZXggKyAnXCIgbXVzdCBiZSBhIHZhbGlkIEhFWCBzdHJpbmcuJyk7XG4gICAgdmFyIHN0ciA9IFwiXCI7XG4gICAgdmFyIGNvZGUgPSAwO1xuICAgIGhleCA9IGhleC5yZXBsYWNlKC9eMHgvaSwgJycpO1xuICAgIC8vIHJlbW92ZSAwMCBwYWRkaW5nIGZyb20gZWl0aGVyIHNpZGVcbiAgICBoZXggPSBoZXgucmVwbGFjZSgvXig/OjAwKSovLCAnJyk7XG4gICAgaGV4ID0gaGV4LnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpO1xuICAgIGhleCA9IGhleC5yZXBsYWNlKC9eKD86MDApKi8sICcnKTtcbiAgICBoZXggPSBoZXguc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIik7XG4gICAgdmFyIGwgPSBoZXgubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSArPSAyKSB7XG4gICAgICAgIGNvZGUgPSBwYXJzZUludChoZXguc3Vic3RyKGksIDIpLCAxNik7XG4gICAgICAgIC8vIGlmIChjb2RlICE9PSAwKSB7XG4gICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuICAgICAgICAvLyB9XG4gICAgfVxuICAgIHJldHVybiB1dGY4LmRlY29kZShzdHIpO1xufTtcbi8qKlxuICogQ29udmVydHMgdmFsdWUgdG8gaXQncyBudW1iZXIgcmVwcmVzZW50YXRpb25cbiAqXG4gKiBAbWV0aG9kIGhleFRvTnVtYmVyXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ8Qk59IHZhbHVlXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbnZhciBoZXhUb051bWJlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhaXNIZXhTdHJpY3QodmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignR2l2ZW4gdmFsdWUgXCInICsgdmFsdWUgKyAnXCIgaXMgbm90IGEgdmFsaWQgaGV4IHN0cmluZy4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRvQk4odmFsdWUpLnRvTnVtYmVyKCk7XG59O1xuLyoqXG4gKiBDb252ZXJ0cyB2YWx1ZSB0byBpdCdzIGRlY2ltYWwgcmVwcmVzZW50YXRpb24gaW4gc3RyaW5nXG4gKlxuICogQG1ldGhvZCBoZXhUb051bWJlclN0cmluZ1xuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfEJOfSB2YWx1ZVxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG52YXIgaGV4VG9OdW1iZXJTdHJpbmcgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlKVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgIWlzSGV4U3RyaWN0KHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dpdmVuIHZhbHVlIFwiJyArIHZhbHVlICsgJ1wiIGlzIG5vdCBhIHZhbGlkIGhleCBzdHJpbmcuJyk7XG4gICAgfVxuICAgIHJldHVybiB0b0JOKHZhbHVlKS50b1N0cmluZygxMCk7XG59O1xuLyoqXG4gKiBDb252ZXJ0cyB2YWx1ZSB0byBpdCdzIGhleCByZXByZXNlbnRhdGlvblxuICpcbiAqIEBtZXRob2QgbnVtYmVyVG9IZXhcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcnxCTn0gdmFsdWVcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xudmFyIG51bWJlclRvSGV4ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKCh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmICghaXNGaW5pdGUodmFsdWUpICYmICFpc0hleFN0cmljdCh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHaXZlbiBpbnB1dCBcIicgKyB2YWx1ZSArICdcIiBpcyBub3QgYSBudW1iZXIuJyk7XG4gICAgfVxuICAgIHZhciBudW1iZXIgPSB0b0JOKHZhbHVlKTtcbiAgICB2YXIgcmVzdWx0ID0gbnVtYmVyLnRvU3RyaW5nKDE2KTtcbiAgICByZXR1cm4gbnVtYmVyLmx0KG5ldyBCTigwKSkgPyAnLTB4JyArIHJlc3VsdC5zdWJzdHIoMSkgOiAnMHgnICsgcmVzdWx0O1xufTtcbi8qKlxuICogQ29udmVydCBhIGJ5dGUgYXJyYXkgdG8gYSBoZXggc3RyaW5nXG4gKlxuICogTm90ZTogSW1wbGVtZW50YXRpb24gZnJvbSBjcnlwdG8tanNcbiAqXG4gKiBAbWV0aG9kIGJ5dGVzVG9IZXhcbiAqIEBwYXJhbSB7QXJyYXl9IGJ5dGVzXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSBoZXggc3RyaW5nXG4gKi9cbnZhciBieXRlc1RvSGV4ID0gZnVuY3Rpb24gKGJ5dGVzKSB7XG4gICAgZm9yICh2YXIgaGV4ID0gW10sIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLyoganNoaW50IGlnbm9yZTpzdGFydCAqL1xuICAgICAgICBoZXgucHVzaCgoYnl0ZXNbaV0gPj4+IDQpLnRvU3RyaW5nKDE2KSk7XG4gICAgICAgIGhleC5wdXNoKChieXRlc1tpXSAmIDB4RikudG9TdHJpbmcoMTYpKTtcbiAgICAgICAgLyoganNoaW50IGlnbm9yZTplbmQgKi9cbiAgICB9XG4gICAgcmV0dXJuICcweCcgKyBoZXguam9pbihcIlwiKTtcbn07XG4vKipcbiAqIENvbnZlcnQgYSBoZXggc3RyaW5nIHRvIGEgYnl0ZSBhcnJheVxuICpcbiAqIE5vdGU6IEltcGxlbWVudGF0aW9uIGZyb20gY3J5cHRvLWpzXG4gKlxuICogQG1ldGhvZCBoZXhUb0J5dGVzXG4gKiBAcGFyYW0ge3N0cmluZ30gaGV4XG4gKiBAcmV0dXJuIHtBcnJheX0gdGhlIGJ5dGUgYXJyYXlcbiAqL1xudmFyIGhleFRvQnl0ZXMgPSBmdW5jdGlvbiAoaGV4KSB7XG4gICAgaGV4ID0gaGV4LnRvU3RyaW5nKDE2KTtcbiAgICBpZiAoIWlzSGV4U3RyaWN0KGhleCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHaXZlbiB2YWx1ZSBcIicgKyBoZXggKyAnXCIgaXMgbm90IGEgdmFsaWQgaGV4IHN0cmluZy4nKTtcbiAgICB9XG4gICAgaGV4ID0gaGV4LnJlcGxhY2UoL14weC9pLCAnJyk7XG4gICAgZm9yICh2YXIgYnl0ZXMgPSBbXSwgYyA9IDA7IGMgPCBoZXgubGVuZ3RoOyBjICs9IDIpXG4gICAgICAgIGJ5dGVzLnB1c2gocGFyc2VJbnQoaGV4LnN1YnN0cihjLCAyKSwgMTYpKTtcbiAgICByZXR1cm4gYnl0ZXM7XG59O1xuLyoqXG4gKiBBdXRvIGNvbnZlcnRzIGFueSBnaXZlbiB2YWx1ZSBpbnRvIGl0J3MgaGV4IHJlcHJlc2VudGF0aW9uLlxuICpcbiAqIEFuZCBldmVuIHN0cmluZ2lmeXMgb2JqZWN0cyBiZWZvcmUuXG4gKlxuICogQG1ldGhvZCB0b0hleFxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfEJOfE9iamVjdHxCdWZmZXJ9IHZhbHVlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHJldHVyblR5cGVcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xudmFyIHRvSGV4ID0gZnVuY3Rpb24gKHZhbHVlLCByZXR1cm5UeXBlKSB7XG4gICAgLypqc2hpbnQgbWF4Y29tcGxleGl0eTogZmFsc2UgKi9cbiAgICBpZiAoaXNBZGRyZXNzKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gcmV0dXJuVHlwZSA/ICdhZGRyZXNzJyA6ICcweCcgKyB2YWx1ZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL14weC9pLCAnJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gcmV0dXJuVHlwZSA/ICdib29sJyA6IHZhbHVlID8gJzB4MDEnIDogJzB4MDAnO1xuICAgIH1cbiAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gJzB4JyArIHZhbHVlLnRvU3RyaW5nKCdoZXgnKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgISF2YWx1ZSAmJiAhaXNCaWdOdW1iZXIodmFsdWUpICYmICFpc0JOKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gcmV0dXJuVHlwZSA/ICdzdHJpbmcnIDogdXRmOFRvSGV4KEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gICAgfVxuICAgIC8vIGlmIGl0cyBhIG5lZ2F0aXZlIG51bWJlciwgcGFzcyBpdCB0aHJvdWdoIG51bWJlclRvSGV4XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHZhbHVlLmluZGV4T2YoJy0weCcpID09PSAwIHx8IHZhbHVlLmluZGV4T2YoJy0wWCcpID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuVHlwZSA/ICdpbnQyNTYnIDogbnVtYmVyVG9IZXgodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlLmluZGV4T2YoJzB4JykgPT09IDAgfHwgdmFsdWUuaW5kZXhPZignMFgnKSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHJldHVyblR5cGUgPyAnYnl0ZXMnIDogdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWlzRmluaXRlKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHJldHVyblR5cGUgPyAnc3RyaW5nJyA6IHV0ZjhUb0hleCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldHVyblR5cGUgPyAodmFsdWUgPCAwID8gJ2ludDI1NicgOiAndWludDI1NicpIDogbnVtYmVyVG9IZXgodmFsdWUpO1xufTtcbi8qKlxuICogQ2hlY2sgaWYgc3RyaW5nIGlzIEhFWCwgcmVxdWlyZXMgYSAweCBpbiBmcm9udFxuICpcbiAqIEBtZXRob2QgaXNIZXhTdHJpY3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZXggdG8gYmUgY2hlY2tlZFxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbnZhciBpc0hleFN0cmljdCA9IGZ1bmN0aW9uIChoZXgpIHtcbiAgICByZXR1cm4gKCh0eXBlb2YgaGV4ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgaGV4ID09PSAnbnVtYmVyJykgJiYgL14oLSk/MHhbMC05YS1mXSokL2kudGVzdChoZXgpKTtcbn07XG4vKipcbiAqIENoZWNrIGlmIHN0cmluZyBpcyBIRVhcbiAqXG4gKiBAbWV0aG9kIGlzSGV4XG4gKiBAcGFyYW0ge1N0cmluZ30gaGV4IHRvIGJlIGNoZWNrZWRcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG52YXIgaXNIZXggPSBmdW5jdGlvbiAoaGV4KSB7XG4gICAgcmV0dXJuICgodHlwZW9mIGhleCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGhleCA9PT0gJ251bWJlcicpICYmIC9eKC0weHwweCk/WzAtOWEtZl0qJC9pLnRlc3QoaGV4KSk7XG59O1xuLyoqXG4gKiBSZW1vdmUgMHggcHJlZml4IGZyb20gc3RyaW5nXG4gKlxuICogQG1ldGhvZCBzdHJpcEhleFByZWZpeFxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciB0byBiZSBjaGVja2VkXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG52YXIgc3RyaXBIZXhQcmVmaXggPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgaWYgKHN0ciAhPT0gMCAmJiBpc0hleChzdHIpKVxuICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoL14oLSk/MHgvaSwgJyQxJyk7XG4gICAgcmV0dXJuIHN0cjtcbn07XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBnaXZlbiBzdHJpbmcgaXMgYSB2YWxpZCBFdGhlcmV1bSBibG9jayBoZWFkZXIgYmxvb20uXG4gKlxuICogQG1ldGhvZCBpc0Jsb29tXG4gKiBAcGFyYW0ge1N0cmluZ30gYmxvb20gZW5jb2RlZCBibG9vbSBmaWx0ZXJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbnZhciBpc0Jsb29tID0gZnVuY3Rpb24gKGJsb29tKSB7XG4gICAgcmV0dXJuIGV0aGVyZXVtQmxvb21GaWx0ZXJzLmlzQmxvb20oYmxvb20pO1xufTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBldGhlcmV1bSB1c2VycyBhZGRyZXNzIGlzIHBhcnQgb2YgdGhlIGdpdmVuIGJsb29tXG4gKiBub3RlOiBmYWxzZSBwb3NpdGl2ZXMgYXJlIHBvc3NpYmxlLlxuICpcbiAqIEBtZXRob2QgaXNVc2VyRXRoZXJldW1BZGRyZXNzSW5CbG9vbVxuICogQHBhcmFtIHtTdHJpbmd9IGV0aGVyZXVtQWRkcmVzcyBlbmNvZGVkIGJsb29tIGZpbHRlclxuICogQHBhcmFtIHtTdHJpbmd9IGJsb29tIGV0aGVyZXVtIGFkZHJlc3NzXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG52YXIgaXNVc2VyRXRoZXJldW1BZGRyZXNzSW5CbG9vbSA9IGZ1bmN0aW9uIChibG9vbSwgZXRoZXJldW1BZGRyZXNzKSB7XG4gICAgcmV0dXJuIGV0aGVyZXVtQmxvb21GaWx0ZXJzLmlzVXNlckV0aGVyZXVtQWRkcmVzc0luQmxvb20oYmxvb20sIGV0aGVyZXVtQWRkcmVzcyk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGNvbnRyYWN0IGFkZHJlc3MgaXMgcGFydCBvZiB0aGUgZ2l2ZW4gYmxvb21cbiAqIG5vdGU6IGZhbHNlIHBvc2l0aXZlcyBhcmUgcG9zc2libGUuXG4gKlxuICogQG1ldGhvZCBpc1VzZXJFdGhlcmV1bUFkZHJlc3NJbkJsb29tXG4gKiBAcGFyYW0ge1N0cmluZ30gYmxvb20gZW5jb2RlZCBibG9vbSBmaWx0ZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBjb250cmFjdEFkZHJlc3MgY29udHJhY3QgYWRkcmVzc3NcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbnZhciBpc0NvbnRyYWN0QWRkcmVzc0luQmxvb20gPSBmdW5jdGlvbiAoYmxvb20sIGNvbnRyYWN0QWRkcmVzcykge1xuICAgIHJldHVybiBldGhlcmV1bUJsb29tRmlsdGVycy5pc0NvbnRyYWN0QWRkcmVzc0luQmxvb20oYmxvb20sIGNvbnRyYWN0QWRkcmVzcyk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgZ2l2ZW4gc3RyaW5nIGlzIGEgdmFsaWQgbG9nIHRvcGljLlxuICpcbiAqIEBtZXRob2QgaXNUb3BpY1xuICogQHBhcmFtIHtTdHJpbmd9IHRvcGljIGVuY29kZWQgdG9waWNcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbnZhciBpc1RvcGljID0gZnVuY3Rpb24gKHRvcGljKSB7XG4gICAgcmV0dXJuIGV0aGVyZXVtQmxvb21GaWx0ZXJzLmlzVG9waWModG9waWMpO1xufTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSB0b3BpYyBpcyBwYXJ0IG9mIHRoZSBnaXZlbiBibG9vbVxuICogbm90ZTogZmFsc2UgcG9zaXRpdmVzIGFyZSBwb3NzaWJsZS5cbiAqXG4gKiBAbWV0aG9kIGlzVG9waWNJbkJsb29tXG4gKiBAcGFyYW0ge1N0cmluZ30gYmxvb20gZW5jb2RlZCBibG9vbSBmaWx0ZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSB0b3BpYyBlbmNvZGVkIHRvcGljXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG52YXIgaXNUb3BpY0luQmxvb20gPSBmdW5jdGlvbiAoYmxvb20sIHRvcGljKSB7XG4gICAgcmV0dXJuIGV0aGVyZXVtQmxvb21GaWx0ZXJzLmlzVG9waWNJbkJsb29tKGJsb29tLCB0b3BpYyk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHZhbHVlIGlzIHBhcnQgb2YgdGhlIGdpdmVuIGJsb29tXG4gKiBub3RlOiBmYWxzZSBwb3NpdGl2ZXMgYXJlIHBvc3NpYmxlLlxuICpcbiAqIEBtZXRob2QgaXNJbkJsb29tXG4gKiBAcGFyYW0ge1N0cmluZ30gYmxvb20gZW5jb2RlZCBibG9vbSBmaWx0ZXJcbiAqIEBwYXJhbSB7U3RyaW5nIHwgVWludDhBcnJheX0gdG9waWMgZW5jb2RlZCB2YWx1ZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xudmFyIGlzSW5CbG9vbSA9IGZ1bmN0aW9uIChibG9vbSwgdG9waWMpIHtcbiAgICByZXR1cm4gZXRoZXJldW1CbG9vbUZpbHRlcnMuaXNJbkJsb29tKGJsb29tLCB0b3BpYyk7XG59O1xuLyoqXG4gKiBIYXNoZXMgdmFsdWVzIHRvIGEgc2hhMyBoYXNoIHVzaW5nIGtlY2NhayAyNTZcbiAqXG4gKiBUbyBoYXNoIGEgSEVYIHN0cmluZyB0aGUgaGV4IG11c3QgaGF2ZSAweCBpbiBmcm9udC5cbiAqXG4gKiBAbWV0aG9kIHNoYTNcbiAqIEByZXR1cm4ge1N0cmluZ30gdGhlIHNoYTMgc3RyaW5nXG4gKi9cbnZhciBTSEEzX05VTExfUyA9ICcweGM1ZDI0NjAxODZmNzIzM2M5MjdlN2RiMmRjYzcwM2MwZTUwMGI2NTNjYTgyMjczYjdiZmFkODA0NWQ4NWE0NzAnO1xudmFyIHNoYTMgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAoaXNCTih2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAoaXNIZXhTdHJpY3QodmFsdWUpICYmIC9eMHgvaS50ZXN0KCh2YWx1ZSkudG9TdHJpbmcoKSkpIHtcbiAgICAgICAgdmFsdWUgPSBldGhlcmV1bWpzVXRpbC50b0J1ZmZlcih2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gQXNzdW1lIHZhbHVlIGlzIGFuIGFyYml0cmFyeSBzdHJpbmdcbiAgICAgICAgdmFsdWUgPSBCdWZmZXIuZnJvbSh2YWx1ZSwgJ3V0Zi04Jyk7XG4gICAgfVxuICAgIHZhciByZXR1cm5WYWx1ZSA9IGV0aGVyZXVtanNVdGlsLmJ1ZmZlclRvSGV4KGV0aGVyZXVtanNVdGlsLmtlY2NhazI1Nih2YWx1ZSkpO1xuICAgIGlmIChyZXR1cm5WYWx1ZSA9PT0gU0hBM19OVUxMX1MpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gICAgfVxufTtcbi8vIGV4cG9zZSB0aGUgdW5kZXIgdGhlIGhvb2Qga2VjY2FrMjU2XG5zaGEzLl9IYXNoID0gZXRoZXJldW1qc1V0aWwua2VjY2FrMjU2O1xuLyoqXG4gKiBAbWV0aG9kIHNoYTNSYXdcbiAqXG4gKiBAcGFyYW0gdmFsdWVcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG52YXIgc2hhM1JhdyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhbHVlID0gc2hhMyh2YWx1ZSk7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBTSEEzX05VTExfUztcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufTtcbi8qKlxuICogQXV0byBjb252ZXJ0cyBhbnkgZ2l2ZW4gdmFsdWUgaW50byBpdCdzIGhleCByZXByZXNlbnRhdGlvbixcbiAqIHRoZW4gY29udmVydHMgaGV4IHRvIG51bWJlci5cbiAqXG4gKiBAbWV0aG9kIHRvTnVtYmVyXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ8Qk59IHZhbHVlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cbnZhciB0b051bWJlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInID8gdmFsdWUgOiBoZXhUb051bWJlcih0b0hleCh2YWx1ZSkpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIEJOOiBCTixcbiAgICBpc0JOOiBpc0JOLFxuICAgIGlzQmlnTnVtYmVyOiBpc0JpZ051bWJlcixcbiAgICB0b0JOOiB0b0JOLFxuICAgIGlzQWRkcmVzczogaXNBZGRyZXNzLFxuICAgIGlzQmxvb206IGlzQmxvb20sXG4gICAgaXNVc2VyRXRoZXJldW1BZGRyZXNzSW5CbG9vbTogaXNVc2VyRXRoZXJldW1BZGRyZXNzSW5CbG9vbSxcbiAgICBpc0NvbnRyYWN0QWRkcmVzc0luQmxvb206IGlzQ29udHJhY3RBZGRyZXNzSW5CbG9vbSxcbiAgICBpc1RvcGljOiBpc1RvcGljLFxuICAgIGlzVG9waWNJbkJsb29tOiBpc1RvcGljSW5CbG9vbSxcbiAgICBpc0luQmxvb206IGlzSW5CbG9vbSxcbiAgICBjaGVja0FkZHJlc3NDaGVja3N1bTogY2hlY2tBZGRyZXNzQ2hlY2tzdW0sXG4gICAgdXRmOFRvSGV4OiB1dGY4VG9IZXgsXG4gICAgaGV4VG9VdGY4OiBoZXhUb1V0ZjgsXG4gICAgaGV4VG9OdW1iZXI6IGhleFRvTnVtYmVyLFxuICAgIGhleFRvTnVtYmVyU3RyaW5nOiBoZXhUb051bWJlclN0cmluZyxcbiAgICBudW1iZXJUb0hleDogbnVtYmVyVG9IZXgsXG4gICAgdG9IZXg6IHRvSGV4LFxuICAgIGhleFRvQnl0ZXM6IGhleFRvQnl0ZXMsXG4gICAgYnl0ZXNUb0hleDogYnl0ZXNUb0hleCxcbiAgICBpc0hleDogaXNIZXgsXG4gICAgaXNIZXhTdHJpY3Q6IGlzSGV4U3RyaWN0LFxuICAgIHN0cmlwSGV4UHJlZml4OiBzdHJpcEhleFByZWZpeCxcbiAgICBsZWZ0UGFkOiBsZWZ0UGFkLFxuICAgIHJpZ2h0UGFkOiByaWdodFBhZCxcbiAgICB0b1R3b3NDb21wbGVtZW50OiB0b1R3b3NDb21wbGVtZW50LFxuICAgIHNoYTM6IHNoYTMsXG4gICAgc2hhM1Jhdzogc2hhM1JhdyxcbiAgICB0b051bWJlcjogdG9OdW1iZXJcbn07XG4iLCIoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVXRpbHNcbiAgZnVuY3Rpb24gYXNzZXJ0ICh2YWwsIG1zZykge1xuICAgIGlmICghdmFsKSB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG4gIH1cblxuICAvLyBDb3VsZCB1c2UgYGluaGVyaXRzYCBtb2R1bGUsIGJ1dCBkb24ndCB3YW50IHRvIG1vdmUgZnJvbSBzaW5nbGUgZmlsZVxuICAvLyBhcmNoaXRlY3R1cmUgeWV0LlxuICBmdW5jdGlvbiBpbmhlcml0cyAoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge307XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTtcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpO1xuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcjtcbiAgfVxuXG4gIC8vIEJOXG5cbiAgZnVuY3Rpb24gQk4gKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKEJOLmlzQk4obnVtYmVyKSkge1xuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB0aGlzLndvcmRzID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgICAvLyBSZWR1Y3Rpb24gY29udGV4dFxuICAgIHRoaXMucmVkID0gbnVsbDtcblxuICAgIGlmIChudW1iZXIgIT09IG51bGwpIHtcbiAgICAgIGlmIChiYXNlID09PSAnbGUnIHx8IGJhc2UgPT09ICdiZScpIHtcbiAgICAgICAgZW5kaWFuID0gYmFzZTtcbiAgICAgICAgYmFzZSA9IDEwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pbml0KG51bWJlciB8fCAwLCBiYXNlIHx8IDEwLCBlbmRpYW4gfHwgJ2JlJyk7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gQk47XG4gIH0gZWxzZSB7XG4gICAgZXhwb3J0cy5CTiA9IEJOO1xuICB9XG5cbiAgQk4uQk4gPSBCTjtcbiAgQk4ud29yZFNpemUgPSAyNjtcblxuICB2YXIgQnVmZmVyO1xuICB0cnkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LkJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIEJ1ZmZlciA9IHdpbmRvdy5CdWZmZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuXG4gIEJOLmlzQk4gPSBmdW5jdGlvbiBpc0JOIChudW0pIHtcbiAgICBpZiAobnVtIGluc3RhbmNlb2YgQk4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBudW0gIT09IG51bGwgJiYgdHlwZW9mIG51bSA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG51bS5jb25zdHJ1Y3Rvci53b3JkU2l6ZSA9PT0gQk4ud29yZFNpemUgJiYgQXJyYXkuaXNBcnJheShudW0ud29yZHMpO1xuICB9O1xuXG4gIEJOLm1heCA9IGZ1bmN0aW9uIG1heCAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpID4gMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLm1pbiA9IGZ1bmN0aW9uIG1pbiAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpIDwgMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdE51bWJlcihudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdEFycmF5KG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIGJhc2UgPSAxNjtcbiAgICB9XG4gICAgYXNzZXJ0KGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpO1xuXG4gICAgbnVtYmVyID0gbnVtYmVyLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBpZiAobnVtYmVyWzBdID09PSAnLScpIHtcbiAgICAgIHN0YXJ0Kys7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICBpZiAoc3RhcnQgPCBudW1iZXIubGVuZ3RoKSB7XG4gICAgICBpZiAoYmFzZSA9PT0gMTYpIHtcbiAgICAgICAgdGhpcy5fcGFyc2VIZXgobnVtYmVyLCBzdGFydCwgZW5kaWFuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3BhcnNlQmFzZShudW1iZXIsIGJhc2UsIHN0YXJ0KTtcbiAgICAgICAgaWYgKGVuZGlhbiA9PT0gJ2xlJykge1xuICAgICAgICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXROdW1iZXIgPSBmdW5jdGlvbiBfaW5pdE51bWJlciAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICBudW1iZXIgPSAtbnVtYmVyO1xuICAgIH1cbiAgICBpZiAobnVtYmVyIDwgMHg0MDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWyBudW1iZXIgJiAweDNmZmZmZmYgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9IGVsc2UgaWYgKG51bWJlciA8IDB4MTAwMDAwMDAwMDAwMDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbXG4gICAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgICAgKG51bWJlciAvIDB4NDAwMDAwMCkgJiAweDNmZmZmZmZcbiAgICAgIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChudW1iZXIgPCAweDIwMDAwMDAwMDAwMDAwKTsgLy8gMiBeIDUzICh1bnNhZmUpXG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmLFxuICAgICAgICAxXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAzO1xuICAgIH1cblxuICAgIGlmIChlbmRpYW4gIT09ICdsZScpIHJldHVybjtcblxuICAgIC8vIFJldmVyc2UgdGhlIGJ5dGVzXG4gICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdEFycmF5ID0gZnVuY3Rpb24gX2luaXRBcnJheSAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICAvLyBQZXJoYXBzIGEgVWludDhBcnJheVxuICAgIGFzc2VydCh0eXBlb2YgbnVtYmVyLmxlbmd0aCA9PT0gJ251bWJlcicpO1xuICAgIGlmIChudW1iZXIubGVuZ3RoIDw9IDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbIDAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKG51bWJlci5sZW5ndGggLyAzKTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIHZhciBqLCB3O1xuICAgIHZhciBvZmYgPSAwO1xuICAgIGlmIChlbmRpYW4gPT09ICdiZScpIHtcbiAgICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSAxLCBqID0gMDsgaSA+PSAwOyBpIC09IDMpIHtcbiAgICAgICAgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSAtIDFdIDw8IDgpIHwgKG51bWJlcltpIC0gMl0gPDwgMTYpO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gKHcgPj4+ICgyNiAtIG9mZikpICYgMHgzZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjQ7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbmRpYW4gPT09ICdsZScpIHtcbiAgICAgIGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbnVtYmVyLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgKyAxXSA8PCA4KSB8IChudW1iZXJbaSArIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlSGV4NEJpdHMgKHN0cmluZywgaW5kZXgpIHtcbiAgICB2YXIgYyA9IHN0cmluZy5jaGFyQ29kZUF0KGluZGV4KTtcbiAgICAvLyAnQScgLSAnRidcbiAgICBpZiAoYyA+PSA2NSAmJiBjIDw9IDcwKSB7XG4gICAgICByZXR1cm4gYyAtIDU1O1xuICAgIC8vICdhJyAtICdmJ1xuICAgIH0gZWxzZSBpZiAoYyA+PSA5NyAmJiBjIDw9IDEwMikge1xuICAgICAgcmV0dXJuIGMgLSA4NztcbiAgICAvLyAnMCcgLSAnOSdcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChjIC0gNDgpICYgMHhmO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlSGV4Qnl0ZSAoc3RyaW5nLCBsb3dlckJvdW5kLCBpbmRleCkge1xuICAgIHZhciByID0gcGFyc2VIZXg0Qml0cyhzdHJpbmcsIGluZGV4KTtcbiAgICBpZiAoaW5kZXggLSAxID49IGxvd2VyQm91bmQpIHtcbiAgICAgIHIgfD0gcGFyc2VIZXg0Qml0cyhzdHJpbmcsIGluZGV4IC0gMSkgPDwgNDtcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlSGV4ID0gZnVuY3Rpb24gX3BhcnNlSGV4IChudW1iZXIsIHN0YXJ0LCBlbmRpYW4pIHtcbiAgICAvLyBDcmVhdGUgcG9zc2libHkgYmlnZ2VyIGFycmF5IHRvIGVuc3VyZSB0aGF0IGl0IGZpdHMgdGhlIG51bWJlclxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKChudW1iZXIubGVuZ3RoIC0gc3RhcnQpIC8gNik7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICAvLyAyNC1iaXRzIGNodW5rc1xuICAgIHZhciBvZmYgPSAwO1xuICAgIHZhciBqID0gMDtcblxuICAgIHZhciB3O1xuICAgIGlmIChlbmRpYW4gPT09ICdiZScpIHtcbiAgICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSAxOyBpID49IHN0YXJ0OyBpIC09IDIpIHtcbiAgICAgICAgdyA9IHBhcnNlSGV4Qnl0ZShudW1iZXIsIHN0YXJ0LCBpKSA8PCBvZmY7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gdyAmIDB4M2ZmZmZmZjtcbiAgICAgICAgaWYgKG9mZiA+PSAxOCkge1xuICAgICAgICAgIG9mZiAtPSAxODtcbiAgICAgICAgICBqICs9IDE7XG4gICAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSB3ID4+PiAyNjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvZmYgKz0gODtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcGFyc2VMZW5ndGggPSBudW1iZXIubGVuZ3RoIC0gc3RhcnQ7XG4gICAgICBmb3IgKGkgPSBwYXJzZUxlbmd0aCAlIDIgPT09IDAgPyBzdGFydCArIDEgOiBzdGFydDsgaSA8IG51bWJlci5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICB3ID0gcGFyc2VIZXhCeXRlKG51bWJlciwgc3RhcnQsIGkpIDw8IG9mZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSB3ICYgMHgzZmZmZmZmO1xuICAgICAgICBpZiAob2ZmID49IDE4KSB7XG4gICAgICAgICAgb2ZmIC09IDE4O1xuICAgICAgICAgIGogKz0gMTtcbiAgICAgICAgICB0aGlzLndvcmRzW2pdIHw9IHcgPj4+IDI2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9mZiArPSA4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlQmFzZSAoc3RyLCBzdGFydCwgZW5kLCBtdWwpIHtcbiAgICB2YXIgciA9IDA7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA0ODtcblxuICAgICAgciAqPSBtdWw7XG5cbiAgICAgIC8vICdhJ1xuICAgICAgaWYgKGMgPj0gNDkpIHtcbiAgICAgICAgciArPSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3KSB7XG4gICAgICAgIHIgKz0gYyAtIDE3ICsgMHhhO1xuXG4gICAgICAvLyAnMCcgLSAnOSdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHIgKz0gYztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlQmFzZSA9IGZ1bmN0aW9uIF9wYXJzZUJhc2UgKG51bWJlciwgYmFzZSwgc3RhcnQpIHtcbiAgICAvLyBJbml0aWFsaXplIGFzIHplcm9cbiAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgdGhpcy5sZW5ndGggPSAxO1xuXG4gICAgLy8gRmluZCBsZW5ndGggb2YgbGltYiBpbiBiYXNlXG4gICAgZm9yICh2YXIgbGltYkxlbiA9IDAsIGxpbWJQb3cgPSAxOyBsaW1iUG93IDw9IDB4M2ZmZmZmZjsgbGltYlBvdyAqPSBiYXNlKSB7XG4gICAgICBsaW1iTGVuKys7XG4gICAgfVxuICAgIGxpbWJMZW4tLTtcbiAgICBsaW1iUG93ID0gKGxpbWJQb3cgLyBiYXNlKSB8IDA7XG5cbiAgICB2YXIgdG90YWwgPSBudW1iZXIubGVuZ3RoIC0gc3RhcnQ7XG4gICAgdmFyIG1vZCA9IHRvdGFsICUgbGltYkxlbjtcbiAgICB2YXIgZW5kID0gTWF0aC5taW4odG90YWwsIHRvdGFsIC0gbW9kKSArIHN0YXJ0O1xuXG4gICAgdmFyIHdvcmQgPSAwO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBsaW1iTGVuKSB7XG4gICAgICB3b3JkID0gcGFyc2VCYXNlKG51bWJlciwgaSwgaSArIGxpbWJMZW4sIGJhc2UpO1xuXG4gICAgICB0aGlzLmltdWxuKGxpbWJQb3cpO1xuICAgICAgaWYgKHRoaXMud29yZHNbMF0gKyB3b3JkIDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lhZGRuKHdvcmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtb2QgIT09IDApIHtcbiAgICAgIHZhciBwb3cgPSAxO1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIG51bWJlci5sZW5ndGgsIGJhc2UpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbW9kOyBpKyspIHtcbiAgICAgICAgcG93ICo9IGJhc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW11bG4ocG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5IChkZXN0KSB7XG4gICAgZGVzdC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZXN0LndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICB9XG4gICAgZGVzdC5sZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICBkZXN0Lm5lZ2F0aXZlID0gdGhpcy5uZWdhdGl2ZTtcbiAgICBkZXN0LnJlZCA9IHRoaXMucmVkO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lICgpIHtcbiAgICB2YXIgciA9IG5ldyBCTihudWxsKTtcbiAgICB0aGlzLmNvcHkocik7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9leHBhbmQgPSBmdW5jdGlvbiBfZXhwYW5kIChzaXplKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgc2l6ZSkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFJlbW92ZSBsZWFkaW5nIGAwYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3RyaXAgPSBmdW5jdGlvbiBzdHJpcCAoKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoID4gMSAmJiB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIHRoaXMubGVuZ3RoLS07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fbm9ybVNpZ24gPSBmdW5jdGlvbiBfbm9ybVNpZ24gKCkge1xuICAgIC8vIC0wID0gMFxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICByZXR1cm4gKHRoaXMucmVkID8gJzxCTi1SOiAnIDogJzxCTjogJykgKyB0aGlzLnRvU3RyaW5nKDE2KSArICc+JztcbiAgfTtcblxuICAvKlxuXG4gIHZhciB6ZXJvcyA9IFtdO1xuICB2YXIgZ3JvdXBTaXplcyA9IFtdO1xuICB2YXIgZ3JvdXBCYXNlcyA9IFtdO1xuXG4gIHZhciBzID0gJyc7XG4gIHZhciBpID0gLTE7XG4gIHdoaWxlICgrK2kgPCBCTi53b3JkU2l6ZSkge1xuICAgIHplcm9zW2ldID0gcztcbiAgICBzICs9ICcwJztcbiAgfVxuICBncm91cFNpemVzWzBdID0gMDtcbiAgZ3JvdXBTaXplc1sxXSA9IDA7XG4gIGdyb3VwQmFzZXNbMF0gPSAwO1xuICBncm91cEJhc2VzWzFdID0gMDtcbiAgdmFyIGJhc2UgPSAyIC0gMTtcbiAgd2hpbGUgKCsrYmFzZSA8IDM2ICsgMSkge1xuICAgIHZhciBncm91cFNpemUgPSAwO1xuICAgIHZhciBncm91cEJhc2UgPSAxO1xuICAgIHdoaWxlIChncm91cEJhc2UgPCAoMSA8PCBCTi53b3JkU2l6ZSkgLyBiYXNlKSB7XG4gICAgICBncm91cEJhc2UgKj0gYmFzZTtcbiAgICAgIGdyb3VwU2l6ZSArPSAxO1xuICAgIH1cbiAgICBncm91cFNpemVzW2Jhc2VdID0gZ3JvdXBTaXplO1xuICAgIGdyb3VwQmFzZXNbYmFzZV0gPSBncm91cEJhc2U7XG4gIH1cblxuICAqL1xuXG4gIHZhciB6ZXJvcyA9IFtcbiAgICAnJyxcbiAgICAnMCcsXG4gICAgJzAwJyxcbiAgICAnMDAwJyxcbiAgICAnMDAwMCcsXG4gICAgJzAwMDAwJyxcbiAgICAnMDAwMDAwJyxcbiAgICAnMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCdcbiAgXTtcblxuICB2YXIgZ3JvdXBTaXplcyA9IFtcbiAgICAwLCAwLFxuICAgIDI1LCAxNiwgMTIsIDExLCAxMCwgOSwgOCxcbiAgICA4LCA3LCA3LCA3LCA3LCA2LCA2LFxuICAgIDYsIDYsIDYsIDYsIDYsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1XG4gIF07XG5cbiAgdmFyIGdyb3VwQmFzZXMgPSBbXG4gICAgMCwgMCxcbiAgICAzMzU1NDQzMiwgNDMwNDY3MjEsIDE2Nzc3MjE2LCA0ODgyODEyNSwgNjA0NjYxNzYsIDQwMzUzNjA3LCAxNjc3NzIxNixcbiAgICA0MzA0NjcyMSwgMTAwMDAwMDAsIDE5NDg3MTcxLCAzNTgzMTgwOCwgNjI3NDg1MTcsIDc1Mjk1MzYsIDExMzkwNjI1LFxuICAgIDE2Nzc3MjE2LCAyNDEzNzU2OSwgMzQwMTIyMjQsIDQ3MDQ1ODgxLCA2NDAwMDAwMCwgNDA4NDEwMSwgNTE1MzYzMixcbiAgICA2NDM2MzQzLCA3OTYyNjI0LCA5NzY1NjI1LCAxMTg4MTM3NiwgMTQzNDg5MDcsIDE3MjEwMzY4LCAyMDUxMTE0OSxcbiAgICAyNDMwMDAwMCwgMjg2MjkxNTEsIDMzNTU0NDMyLCAzOTEzNTM5MywgNDU0MzU0MjQsIDUyNTIxODc1LCA2MDQ2NjE3NlxuICBdO1xuXG4gIEJOLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nIChiYXNlLCBwYWRkaW5nKSB7XG4gICAgYmFzZSA9IGJhc2UgfHwgMTA7XG4gICAgcGFkZGluZyA9IHBhZGRpbmcgfCAwIHx8IDE7XG5cbiAgICB2YXIgb3V0O1xuICAgIGlmIChiYXNlID09PSAxNiB8fCBiYXNlID09PSAnaGV4Jykge1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgb2ZmID0gMDtcbiAgICAgIHZhciBjYXJyeSA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldO1xuICAgICAgICB2YXIgd29yZCA9ICgoKHcgPDwgb2ZmKSB8IGNhcnJ5KSAmIDB4ZmZmZmZmKS50b1N0cmluZygxNik7XG4gICAgICAgIGNhcnJ5ID0gKHcgPj4+ICgyNCAtIG9mZikpICYgMHhmZmZmZmY7XG4gICAgICAgIGlmIChjYXJyeSAhPT0gMCB8fCBpICE9PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1s2IC0gd29yZC5sZW5ndGhdICsgd29yZCArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSB3b3JkICsgb3V0O1xuICAgICAgICB9XG4gICAgICAgIG9mZiArPSAyO1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICAgIG91dCA9IGNhcnJ5LnRvU3RyaW5nKDE2KSArIG91dDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChvdXQubGVuZ3RoICUgcGFkZGluZyAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnLScgKyBvdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KSB7XG4gICAgICAvLyB2YXIgZ3JvdXBTaXplID0gTWF0aC5mbG9vcihCTi53b3JkU2l6ZSAqIE1hdGguTE4yIC8gTWF0aC5sb2coYmFzZSkpO1xuICAgICAgdmFyIGdyb3VwU2l6ZSA9IGdyb3VwU2l6ZXNbYmFzZV07XG4gICAgICAvLyB2YXIgZ3JvdXBCYXNlID0gTWF0aC5wb3coYmFzZSwgZ3JvdXBTaXplKTtcbiAgICAgIHZhciBncm91cEJhc2UgPSBncm91cEJhc2VzW2Jhc2VdO1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgYyA9IHRoaXMuY2xvbmUoKTtcbiAgICAgIGMubmVnYXRpdmUgPSAwO1xuICAgICAgd2hpbGUgKCFjLmlzWmVybygpKSB7XG4gICAgICAgIHZhciByID0gYy5tb2RuKGdyb3VwQmFzZSkudG9TdHJpbmcoYmFzZSk7XG4gICAgICAgIGMgPSBjLmlkaXZuKGdyb3VwQmFzZSk7XG5cbiAgICAgICAgaWYgKCFjLmlzWmVybygpKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbZ3JvdXBTaXplIC0gci5sZW5ndGhdICsgciArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSByICsgb3V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBhc3NlcnQoZmFsc2UsICdCYXNlIHNob3VsZCBiZSBiZXR3ZWVuIDIgYW5kIDM2Jyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIgKCkge1xuICAgIHZhciByZXQgPSB0aGlzLndvcmRzWzBdO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMikge1xuICAgICAgcmV0ICs9IHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDA7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA9PT0gMyAmJiB0aGlzLndvcmRzWzJdID09PSAweDAxKSB7XG4gICAgICAvLyBOT1RFOiBhdCB0aGlzIHN0YWdlIGl0IGlzIGtub3duIHRoYXQgdGhlIHRvcCBiaXQgaXMgc2V0XG4gICAgICByZXQgKz0gMHgxMDAwMDAwMDAwMDAwMCArICh0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gMikge1xuICAgICAgYXNzZXJ0KGZhbHNlLCAnTnVtYmVyIGNhbiBvbmx5IHNhZmVseSBzdG9yZSB1cCB0byA1MyBiaXRzJyk7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgPyAtcmV0IDogcmV0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKDE2KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbiB0b0J1ZmZlciAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpO1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEJ1ZmZlciwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShBcnJheSwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5TGlrZSA9IGZ1bmN0aW9uIHRvQXJyYXlMaWtlIChBcnJheVR5cGUsIGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0aGlzLmJ5dGVMZW5ndGgoKTtcbiAgICB2YXIgcmVxTGVuZ3RoID0gbGVuZ3RoIHx8IE1hdGgubWF4KDEsIGJ5dGVMZW5ndGgpO1xuICAgIGFzc2VydChieXRlTGVuZ3RoIDw9IHJlcUxlbmd0aCwgJ2J5dGUgYXJyYXkgbG9uZ2VyIHRoYW4gZGVzaXJlZCBsZW5ndGgnKTtcbiAgICBhc3NlcnQocmVxTGVuZ3RoID4gMCwgJ1JlcXVlc3RlZCBhcnJheSBsZW5ndGggPD0gMCcpO1xuXG4gICAgdGhpcy5zdHJpcCgpO1xuICAgIHZhciBsaXR0bGVFbmRpYW4gPSBlbmRpYW4gPT09ICdsZSc7XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheVR5cGUocmVxTGVuZ3RoKTtcblxuICAgIHZhciBiLCBpO1xuICAgIHZhciBxID0gdGhpcy5jbG9uZSgpO1xuICAgIGlmICghbGl0dGxlRW5kaWFuKSB7XG4gICAgICAvLyBBc3N1bWUgYmlnLWVuZGlhblxuICAgICAgZm9yIChpID0gMDsgaSA8IHJlcUxlbmd0aCAtIGJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyAhcS5pc1plcm8oKTsgaSsrKSB7XG4gICAgICAgIGIgPSBxLmFuZGxuKDB4ZmYpO1xuICAgICAgICBxLml1c2hybig4KTtcblxuICAgICAgICByZXNbcmVxTGVuZ3RoIC0gaSAtIDFdID0gYjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW2ldID0gYjtcbiAgICAgIH1cblxuICAgICAgZm9yICg7IGkgPCByZXFMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgaWYgKE1hdGguY2x6MzIpIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHJldHVybiAzMiAtIE1hdGguY2x6MzIodyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHZhciB0ID0gdztcbiAgICAgIHZhciByID0gMDtcbiAgICAgIGlmICh0ID49IDB4MTAwMCkge1xuICAgICAgICByICs9IDEzO1xuICAgICAgICB0ID4+Pj0gMTM7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDQwKSB7XG4gICAgICAgIHIgKz0gNztcbiAgICAgICAgdCA+Pj49IDc7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDgpIHtcbiAgICAgICAgciArPSA0O1xuICAgICAgICB0ID4+Pj0gNDtcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4MDIpIHtcbiAgICAgICAgciArPSAyO1xuICAgICAgICB0ID4+Pj0gMjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByICsgdDtcbiAgICB9O1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl96ZXJvQml0cyA9IGZ1bmN0aW9uIF96ZXJvQml0cyAodykge1xuICAgIC8vIFNob3J0LWN1dFxuICAgIGlmICh3ID09PSAwKSByZXR1cm4gMjY7XG5cbiAgICB2YXIgdCA9IHc7XG4gICAgdmFyIHIgPSAwO1xuICAgIGlmICgodCAmIDB4MWZmZikgPT09IDApIHtcbiAgICAgIHIgKz0gMTM7XG4gICAgICB0ID4+Pj0gMTM7XG4gICAgfVxuICAgIGlmICgodCAmIDB4N2YpID09PSAwKSB7XG4gICAgICByICs9IDc7XG4gICAgICB0ID4+Pj0gNztcbiAgICB9XG4gICAgaWYgKCh0ICYgMHhmKSA9PT0gMCkge1xuICAgICAgciArPSA0O1xuICAgICAgdCA+Pj49IDQ7XG4gICAgfVxuICAgIGlmICgodCAmIDB4MykgPT09IDApIHtcbiAgICAgIHIgKz0gMjtcbiAgICAgIHQgPj4+PSAyO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDEpID09PSAwKSB7XG4gICAgICByKys7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIC8vIFJldHVybiBudW1iZXIgb2YgdXNlZCBiaXRzIGluIGEgQk5cbiAgQk4ucHJvdG90eXBlLmJpdExlbmd0aCA9IGZ1bmN0aW9uIGJpdExlbmd0aCAoKSB7XG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV07XG4gICAgdmFyIGhpID0gdGhpcy5fY291bnRCaXRzKHcpO1xuICAgIHJldHVybiAodGhpcy5sZW5ndGggLSAxKSAqIDI2ICsgaGk7XG4gIH07XG5cbiAgZnVuY3Rpb24gdG9CaXRBcnJheSAobnVtKSB7XG4gICAgdmFyIHcgPSBuZXcgQXJyYXkobnVtLmJpdExlbmd0aCgpKTtcblxuICAgIGZvciAodmFyIGJpdCA9IDA7IGJpdCA8IHcubGVuZ3RoOyBiaXQrKykge1xuICAgICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgICAgd1tiaXRdID0gKG51bS53b3Jkc1tvZmZdICYgKDEgPDwgd2JpdCkpID4+PiB3Yml0O1xuICAgIH1cblxuICAgIHJldHVybiB3O1xuICB9XG5cbiAgLy8gTnVtYmVyIG9mIHRyYWlsaW5nIHplcm8gYml0c1xuICBCTi5wcm90b3R5cGUuemVyb0JpdHMgPSBmdW5jdGlvbiB6ZXJvQml0cyAoKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiAwO1xuXG4gICAgdmFyIHIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGIgPSB0aGlzLl96ZXJvQml0cyh0aGlzLndvcmRzW2ldKTtcbiAgICAgIHIgKz0gYjtcbiAgICAgIGlmIChiICE9PSAyNikgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ieXRlTGVuZ3RoID0gZnVuY3Rpb24gYnl0ZUxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmJpdExlbmd0aCgpIC8gOCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvVHdvcyA9IGZ1bmN0aW9uIHRvVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWJzKCkuaW5vdG4od2lkdGgpLmlhZGRuKDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tVHdvcyA9IGZ1bmN0aW9uIGZyb21Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLnRlc3RuKHdpZHRoIC0gMSkpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vdG4od2lkdGgpLmlhZGRuKDEpLmluZWcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNOZWcgPSBmdW5jdGlvbiBpc05lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubmVnYXRpdmUgIT09IDA7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYFxuICBCTi5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmluZWcoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW5lZyA9IGZ1bmN0aW9uIGluZWcgKCkge1xuICAgIGlmICghdGhpcy5pc1plcm8oKSkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdW9yID0gZnVuY3Rpb24gaXVvciAobnVtKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldIHwgbnVtLndvcmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlvciA9IGZ1bmN0aW9uIGlvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVvcihudW0pO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5vciA9IGZ1bmN0aW9uIG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pb3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVvciA9IGZ1bmN0aW9uIHVvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdW9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdWFuZCA9IGZ1bmN0aW9uIGl1YW5kIChudW0pIHtcbiAgICAvLyBiID0gbWluLWxlbmd0aChudW0sIHRoaXMpXG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSAmIG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGIubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaWFuZCA9IGZ1bmN0aW9uIGlhbmQgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1YW5kKG51bSk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hbmQgPSBmdW5jdGlvbiBhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYW5kKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51YW5kID0gZnVuY3Rpb24gdWFuZCAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdWFuZCh0aGlzKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1eG9yID0gZnVuY3Rpb24gaXV4b3IgKG51bSkge1xuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYTtcbiAgICB2YXIgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldIF4gYi53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcyAhPT0gYSkge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5peG9yID0gZnVuY3Rpb24gaXhvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXV4b3IobnVtKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIHhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5peG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml4b3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnV4b3IgPSBmdW5jdGlvbiB1eG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1eG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1eG9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIE5vdCBgYHRoaXNgYCB3aXRoIGBgd2lkdGhgYCBiaXR3aWR0aFxuICBCTi5wcm90b3R5cGUuaW5vdG4gPSBmdW5jdGlvbiBpbm90biAod2lkdGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIHdpZHRoID09PSAnbnVtYmVyJyAmJiB3aWR0aCA+PSAwKTtcblxuICAgIHZhciBieXRlc05lZWRlZCA9IE1hdGguY2VpbCh3aWR0aCAvIDI2KSB8IDA7XG4gICAgdmFyIGJpdHNMZWZ0ID0gd2lkdGggJSAyNjtcblxuICAgIC8vIEV4dGVuZCB0aGUgYnVmZmVyIHdpdGggbGVhZGluZyB6ZXJvZXNcbiAgICB0aGlzLl9leHBhbmQoYnl0ZXNOZWVkZWQpO1xuXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgYnl0ZXNOZWVkZWQtLTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgY29tcGxldGUgd29yZHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzTmVlZGVkOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgdGhlIHJlc2lkdWVcbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAoMHgzZmZmZmZmID4+ICgyNiAtIGJpdHNMZWZ0KSk7XG4gICAgfVxuXG4gICAgLy8gQW5kIHJlbW92ZSBsZWFkaW5nIHplcm9lc1xuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm5vdG4gPSBmdW5jdGlvbiBub3RuICh3aWR0aCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5vdG4od2lkdGgpO1xuICB9O1xuXG4gIC8vIFNldCBgYml0YCBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNldG4gPSBmdW5jdGlvbiBzZXRuIChiaXQsIHZhbCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG5cbiAgICB2YXIgb2ZmID0gKGJpdCAvIDI2KSB8IDA7XG4gICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgIHRoaXMuX2V4cGFuZChvZmYgKyAxKTtcblxuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMud29yZHNbb2ZmXSA9IHRoaXMud29yZHNbb2ZmXSB8ICgxIDw8IHdiaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gJiB+KDEgPDwgd2JpdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAobnVtKSB7XG4gICAgdmFyIHI7XG5cbiAgICAvLyBuZWdhdGl2ZSArIHBvc2l0aXZlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuXG4gICAgLy8gcG9zaXRpdmUgKyBuZWdhdGl2ZVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICAgIHZhciBhLCBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9IHIgPj4+IDI2O1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAvLyBDb3B5IHRoZSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIH0gZWxzZSBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIEFkZCBgbnVtYCB0byBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAobnVtKSB7XG4gICAgdmFyIHJlcztcbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwICYmIHRoaXMubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXMgPSB0aGlzLnN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0gZWxzZSBpZiAobnVtLm5lZ2F0aXZlID09PSAwICYmIHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gbnVtLnN1Yih0aGlzKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGQobnVtKTtcblxuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYWRkKHRoaXMpO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAobnVtKSB7XG4gICAgLy8gdGhpcyAtICgtbnVtKSA9IHRoaXMgKyBudW1cbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgdmFyIHIgPSB0aGlzLmlhZGQobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcblxuICAgIC8vIC10aGlzIC0gbnVtID0gLSh0aGlzICsgbnVtKVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGQobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlXG4gICAgdmFyIGNtcCA9IHRoaXMuY21wKG51bSk7XG5cbiAgICAvLyBPcHRpbWl6YXRpb24gLSB6ZXJvaWZ5XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIGEgPiBiXG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGNtcCA+IDApIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSAtIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgY2FycnkgIT09IDAgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBDb3B5IHJlc3Qgb2YgdGhlIHdvcmRzXG4gICAgaWYgKGNhcnJ5ID09PSAwICYmIGkgPCBhLmxlbmd0aCAmJiBhICE9PSB0aGlzKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSk7XG5cbiAgICBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWIobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBzbWFsbE11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgdmFyIGxlbiA9IChzZWxmLmxlbmd0aCArIG51bS5sZW5ndGgpIHwgMDtcbiAgICBvdXQubGVuZ3RoID0gbGVuO1xuICAgIGxlbiA9IChsZW4gLSAxKSB8IDA7XG5cbiAgICAvLyBQZWVsIG9uZSBpdGVyYXRpb24gKGNvbXBpbGVyIGNhbid0IGRvIGl0LCBiZWNhdXNlIG9mIGNvZGUgY29tcGxleGl0eSlcbiAgICB2YXIgYSA9IHNlbGYud29yZHNbMF0gfCAwO1xuICAgIHZhciBiID0gbnVtLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICB2YXIgY2FycnkgPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgIG91dC53b3Jkc1swXSA9IGxvO1xuXG4gICAgZm9yICh2YXIgayA9IDE7IGsgPCBsZW47IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBjYXJyeSA+Pj4gMjY7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IChrIC0gaikgfCAwO1xuICAgICAgICBhID0gc2VsZi53b3Jkc1tpXSB8IDA7XG4gICAgICAgIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICByID0gYSAqIGIgKyByd29yZDtcbiAgICAgICAgbmNhcnJ5ICs9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkIHwgMDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5IHwgMDtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeSB8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5sZW5ndGgtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH1cblxuICAvLyBUT0RPKGluZHV0bnkpOiBpdCBtYXkgYmUgcmVhc29uYWJsZSB0byBvbWl0IGl0IGZvciB1c2VycyB3aG8gZG9uJ3QgbmVlZFxuICAvLyB0byB3b3JrIHdpdGggMjU2LWJpdCBudW1iZXJzLCBvdGhlcndpc2UgaXQgZ2l2ZXMgMjAlIGltcHJvdmVtZW50IGZvciAyNTYtYml0XG4gIC8vIG11bHRpcGxpY2F0aW9uIChsaWtlIGVsbGlwdGljIHNlY3AyNTZrMSkuXG4gIHZhciBjb21iMTBNdWxUbyA9IGZ1bmN0aW9uIGNvbWIxME11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIHZhciBhID0gc2VsZi53b3JkcztcbiAgICB2YXIgYiA9IG51bS53b3JkcztcbiAgICB2YXIgbyA9IG91dC53b3JkcztcbiAgICB2YXIgYyA9IDA7XG4gICAgdmFyIGxvO1xuICAgIHZhciBtaWQ7XG4gICAgdmFyIGhpO1xuICAgIHZhciBhMCA9IGFbMF0gfCAwO1xuICAgIHZhciBhbDAgPSBhMCAmIDB4MWZmZjtcbiAgICB2YXIgYWgwID0gYTAgPj4+IDEzO1xuICAgIHZhciBhMSA9IGFbMV0gfCAwO1xuICAgIHZhciBhbDEgPSBhMSAmIDB4MWZmZjtcbiAgICB2YXIgYWgxID0gYTEgPj4+IDEzO1xuICAgIHZhciBhMiA9IGFbMl0gfCAwO1xuICAgIHZhciBhbDIgPSBhMiAmIDB4MWZmZjtcbiAgICB2YXIgYWgyID0gYTIgPj4+IDEzO1xuICAgIHZhciBhMyA9IGFbM10gfCAwO1xuICAgIHZhciBhbDMgPSBhMyAmIDB4MWZmZjtcbiAgICB2YXIgYWgzID0gYTMgPj4+IDEzO1xuICAgIHZhciBhNCA9IGFbNF0gfCAwO1xuICAgIHZhciBhbDQgPSBhNCAmIDB4MWZmZjtcbiAgICB2YXIgYWg0ID0gYTQgPj4+IDEzO1xuICAgIHZhciBhNSA9IGFbNV0gfCAwO1xuICAgIHZhciBhbDUgPSBhNSAmIDB4MWZmZjtcbiAgICB2YXIgYWg1ID0gYTUgPj4+IDEzO1xuICAgIHZhciBhNiA9IGFbNl0gfCAwO1xuICAgIHZhciBhbDYgPSBhNiAmIDB4MWZmZjtcbiAgICB2YXIgYWg2ID0gYTYgPj4+IDEzO1xuICAgIHZhciBhNyA9IGFbN10gfCAwO1xuICAgIHZhciBhbDcgPSBhNyAmIDB4MWZmZjtcbiAgICB2YXIgYWg3ID0gYTcgPj4+IDEzO1xuICAgIHZhciBhOCA9IGFbOF0gfCAwO1xuICAgIHZhciBhbDggPSBhOCAmIDB4MWZmZjtcbiAgICB2YXIgYWg4ID0gYTggPj4+IDEzO1xuICAgIHZhciBhOSA9IGFbOV0gfCAwO1xuICAgIHZhciBhbDkgPSBhOSAmIDB4MWZmZjtcbiAgICB2YXIgYWg5ID0gYTkgPj4+IDEzO1xuICAgIHZhciBiMCA9IGJbMF0gfCAwO1xuICAgIHZhciBibDAgPSBiMCAmIDB4MWZmZjtcbiAgICB2YXIgYmgwID0gYjAgPj4+IDEzO1xuICAgIHZhciBiMSA9IGJbMV0gfCAwO1xuICAgIHZhciBibDEgPSBiMSAmIDB4MWZmZjtcbiAgICB2YXIgYmgxID0gYjEgPj4+IDEzO1xuICAgIHZhciBiMiA9IGJbMl0gfCAwO1xuICAgIHZhciBibDIgPSBiMiAmIDB4MWZmZjtcbiAgICB2YXIgYmgyID0gYjIgPj4+IDEzO1xuICAgIHZhciBiMyA9IGJbM10gfCAwO1xuICAgIHZhciBibDMgPSBiMyAmIDB4MWZmZjtcbiAgICB2YXIgYmgzID0gYjMgPj4+IDEzO1xuICAgIHZhciBiNCA9IGJbNF0gfCAwO1xuICAgIHZhciBibDQgPSBiNCAmIDB4MWZmZjtcbiAgICB2YXIgYmg0ID0gYjQgPj4+IDEzO1xuICAgIHZhciBiNSA9IGJbNV0gfCAwO1xuICAgIHZhciBibDUgPSBiNSAmIDB4MWZmZjtcbiAgICB2YXIgYmg1ID0gYjUgPj4+IDEzO1xuICAgIHZhciBiNiA9IGJbNl0gfCAwO1xuICAgIHZhciBibDYgPSBiNiAmIDB4MWZmZjtcbiAgICB2YXIgYmg2ID0gYjYgPj4+IDEzO1xuICAgIHZhciBiNyA9IGJbN10gfCAwO1xuICAgIHZhciBibDcgPSBiNyAmIDB4MWZmZjtcbiAgICB2YXIgYmg3ID0gYjcgPj4+IDEzO1xuICAgIHZhciBiOCA9IGJbOF0gfCAwO1xuICAgIHZhciBibDggPSBiOCAmIDB4MWZmZjtcbiAgICB2YXIgYmg4ID0gYjggPj4+IDEzO1xuICAgIHZhciBiOSA9IGJbOV0gfCAwO1xuICAgIHZhciBibDkgPSBiOSAmIDB4MWZmZjtcbiAgICB2YXIgYmg5ID0gYjkgPj4+IDEzO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0gc2VsZi5uZWdhdGl2ZSBeIG51bS5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0gMTk7XG4gICAgLyogayA9IDAgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDAsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMCwgYmgwKTtcbiAgICB2YXIgdzAgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcwID4+PiAyNikpIHwgMDtcbiAgICB3MCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDEsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDEpKSB8IDA7XG4gICAgdmFyIHcxID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MSA+Pj4gMjYpKSB8IDA7XG4gICAgdzEgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwyLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDIsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDIsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMikpIHwgMDtcbiAgICB2YXIgdzIgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcyID4+PiAyNikpIHwgMDtcbiAgICB3MiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDMgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDMsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMykpIHwgMDtcbiAgICB2YXIgdzMgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHczID4+PiAyNikpIHwgMDtcbiAgICB3MyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDQgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDQsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNCwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDQpKSB8IDA7XG4gICAgdmFyIHc0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NCA+Pj4gMjYpKSB8IDA7XG4gICAgdzQgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw1LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDUsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDUsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNSkpIHwgMDtcbiAgICB2YXIgdzUgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc1ID4+PiAyNikpIHwgMDtcbiAgICB3NSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDYgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDYsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNiwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNiwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNikpIHwgMDtcbiAgICB2YXIgdzYgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc2ID4+PiAyNikpIHwgMDtcbiAgICB3NiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDcgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDcsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDcpKSB8IDA7XG4gICAgdmFyIHc3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NyA+Pj4gMjYpKSB8IDA7XG4gICAgdzcgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw4LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDgsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDgsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOCkpIHwgMDtcbiAgICB2YXIgdzggPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc4ID4+PiAyNikpIHwgMDtcbiAgICB3OCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDkgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzkgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc5ID4+PiAyNikpIHwgMDtcbiAgICB3OSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDEpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTAgPj4+IDI2KSkgfCAwO1xuICAgIHcxMCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDExICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDIpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTEgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMSA+Pj4gMjYpKSB8IDA7XG4gICAgdzExICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTIgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMyk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgzKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwzKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgzKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTIgPj4+IDI2KSkgfCAwO1xuICAgIHcxMiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDQpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEzID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTMgPj4+IDI2KSkgfCAwO1xuICAgIHcxMyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDUpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTQgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNCA+Pj4gMjYpKSB8IDA7XG4gICAgdzE0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTUgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNik7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg2KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw2KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg2KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTUgPj4+IDI2KSkgfCAwO1xuICAgIHcxNSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDcpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTYgPj4+IDI2KSkgfCAwO1xuICAgIHcxNiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDgpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTcgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNyA+Pj4gMjYpKSB8IDA7XG4gICAgdzE3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTggKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg5KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw5KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg5KTtcbiAgICB2YXIgdzE4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTggPj4+IDI2KSkgfCAwO1xuICAgIHcxOCAmPSAweDNmZmZmZmY7XG4gICAgb1swXSA9IHcwO1xuICAgIG9bMV0gPSB3MTtcbiAgICBvWzJdID0gdzI7XG4gICAgb1szXSA9IHczO1xuICAgIG9bNF0gPSB3NDtcbiAgICBvWzVdID0gdzU7XG4gICAgb1s2XSA9IHc2O1xuICAgIG9bN10gPSB3NztcbiAgICBvWzhdID0gdzg7XG4gICAgb1s5XSA9IHc5O1xuICAgIG9bMTBdID0gdzEwO1xuICAgIG9bMTFdID0gdzExO1xuICAgIG9bMTJdID0gdzEyO1xuICAgIG9bMTNdID0gdzEzO1xuICAgIG9bMTRdID0gdzE0O1xuICAgIG9bMTVdID0gdzE1O1xuICAgIG9bMTZdID0gdzE2O1xuICAgIG9bMTddID0gdzE3O1xuICAgIG9bMThdID0gdzE4O1xuICAgIGlmIChjICE9PSAwKSB7XG4gICAgICBvWzE5XSA9IGM7XG4gICAgICBvdXQubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgLy8gUG9seWZpbGwgY29tYlxuICBpZiAoIU1hdGguaW11bCkge1xuICAgIGNvbWIxME11bFRvID0gc21hbGxNdWxUbztcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpZ011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aDtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgdmFyIGhuY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgb3V0Lmxlbmd0aCAtIDE7IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBobmNhcnJ5O1xuICAgICAgaG5jYXJyeSA9IDA7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IGsgLSBqO1xuICAgICAgICB2YXIgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICB2YXIgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHZhciByID0gYSAqIGI7XG5cbiAgICAgICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArICgociAvIDB4NDAwMDAwMCkgfCAwKSkgfCAwO1xuICAgICAgICBsbyA9IChsbyArIHJ3b3JkKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAobG8gPj4+IDI2KSkgfCAwO1xuXG4gICAgICAgIGhuY2FycnkgKz0gbmNhcnJ5ID4+PiAyNjtcbiAgICAgICAgbmNhcnJ5ICY9IDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkO1xuICAgICAgY2FycnkgPSBuY2Fycnk7XG4gICAgICBuY2FycnkgPSBobmNhcnJ5O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgZnVuY3Rpb24ganVtYm9NdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgZmZ0bSA9IG5ldyBGRlRNKCk7XG4gICAgcmV0dXJuIGZmdG0ubXVscChzZWxmLCBudW0sIG91dCk7XG4gIH1cblxuICBCTi5wcm90b3R5cGUubXVsVG8gPSBmdW5jdGlvbiBtdWxUbyAobnVtLCBvdXQpIHtcbiAgICB2YXIgcmVzO1xuICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aCArIG51bS5sZW5ndGg7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxMCAmJiBudW0ubGVuZ3RoID09PSAxMCkge1xuICAgICAgcmVzID0gY29tYjEwTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgNjMpIHtcbiAgICAgIHJlcyA9IHNtYWxsTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgMTAyNCkge1xuICAgICAgcmVzID0gYmlnTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvb2xleS1UdWtleSBhbGdvcml0aG0gZm9yIEZGVFxuICAvLyBzbGlnaHRseSByZXZpc2l0ZWQgdG8gcmVseSBvbiBsb29waW5nIGluc3RlYWQgb2YgcmVjdXJzaW9uXG5cbiAgZnVuY3Rpb24gRkZUTSAoeCwgeSkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIEZGVE0ucHJvdG90eXBlLm1ha2VSQlQgPSBmdW5jdGlvbiBtYWtlUkJUIChOKSB7XG4gICAgdmFyIHQgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGwgPSBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyhOKSAtIDE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHRbaV0gPSB0aGlzLnJldkJpbihpLCBsLCBOKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGJpbmFyeS1yZXZlcnNlZCByZXByZXNlbnRhdGlvbiBvZiBgeGBcbiAgRkZUTS5wcm90b3R5cGUucmV2QmluID0gZnVuY3Rpb24gcmV2QmluICh4LCBsLCBOKSB7XG4gICAgaWYgKHggPT09IDAgfHwgeCA9PT0gTiAtIDEpIHJldHVybiB4O1xuXG4gICAgdmFyIHJiID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgcmIgfD0gKHggJiAxKSA8PCAobCAtIGkgLSAxKTtcbiAgICAgIHggPj49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJiO1xuICB9O1xuXG4gIC8vIFBlcmZvcm1zIFwidHdlZWRsaW5nXCIgcGhhc2UsIHRoZXJlZm9yZSAnZW11bGF0aW5nJ1xuICAvLyBiZWhhdmlvdXIgb2YgdGhlIHJlY3Vyc2l2ZSBhbGdvcml0aG1cbiAgRkZUTS5wcm90b3R5cGUucGVybXV0ZSA9IGZ1bmN0aW9uIHBlcm11dGUgKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcnR3c1tpXSA9IHJ3c1tyYnRbaV1dO1xuICAgICAgaXR3c1tpXSA9IGl3c1tyYnRbaV1dO1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiB0cmFuc2Zvcm0gKHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOLCByYnQpIHtcbiAgICB0aGlzLnBlcm11dGUocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTik7XG5cbiAgICBmb3IgKHZhciBzID0gMTsgcyA8IE47IHMgPDw9IDEpIHtcbiAgICAgIHZhciBsID0gcyA8PCAxO1xuXG4gICAgICB2YXIgcnR3ZGYgPSBNYXRoLmNvcygyICogTWF0aC5QSSAvIGwpO1xuICAgICAgdmFyIGl0d2RmID0gTWF0aC5zaW4oMiAqIE1hdGguUEkgLyBsKTtcblxuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBOOyBwICs9IGwpIHtcbiAgICAgICAgdmFyIHJ0d2RmXyA9IHJ0d2RmO1xuICAgICAgICB2YXIgaXR3ZGZfID0gaXR3ZGY7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzOyBqKyspIHtcbiAgICAgICAgICB2YXIgcmUgPSBydHdzW3AgKyBqXTtcbiAgICAgICAgICB2YXIgaWUgPSBpdHdzW3AgKyBqXTtcblxuICAgICAgICAgIHZhciBybyA9IHJ0d3NbcCArIGogKyBzXTtcbiAgICAgICAgICB2YXIgaW8gPSBpdHdzW3AgKyBqICsgc107XG5cbiAgICAgICAgICB2YXIgcnggPSBydHdkZl8gKiBybyAtIGl0d2RmXyAqIGlvO1xuXG4gICAgICAgICAgaW8gPSBydHdkZl8gKiBpbyArIGl0d2RmXyAqIHJvO1xuICAgICAgICAgIHJvID0gcng7XG5cbiAgICAgICAgICBydHdzW3AgKyBqXSA9IHJlICsgcm87XG4gICAgICAgICAgaXR3c1twICsgal0gPSBpZSArIGlvO1xuXG4gICAgICAgICAgcnR3c1twICsgaiArIHNdID0gcmUgLSBybztcbiAgICAgICAgICBpdHdzW3AgKyBqICsgc10gPSBpZSAtIGlvO1xuXG4gICAgICAgICAgLyoganNoaW50IG1heGRlcHRoIDogZmFsc2UgKi9cbiAgICAgICAgICBpZiAoaiAhPT0gbCkge1xuICAgICAgICAgICAgcnggPSBydHdkZiAqIHJ0d2RmXyAtIGl0d2RmICogaXR3ZGZfO1xuXG4gICAgICAgICAgICBpdHdkZl8gPSBydHdkZiAqIGl0d2RmXyArIGl0d2RmICogcnR3ZGZfO1xuICAgICAgICAgICAgcnR3ZGZfID0gcng7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmd1ZXNzTGVuMTNiID0gZnVuY3Rpb24gZ3Vlc3NMZW4xM2IgKG4sIG0pIHtcbiAgICB2YXIgTiA9IE1hdGgubWF4KG0sIG4pIHwgMTtcbiAgICB2YXIgb2RkID0gTiAmIDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoTiA9IE4gLyAyIHwgMDsgTjsgTiA9IE4gPj4+IDEpIHtcbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4gMSA8PCBpICsgMSArIG9kZDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb25qdWdhdGUgPSBmdW5jdGlvbiBjb25qdWdhdGUgKHJ3cywgaXdzLCBOKSB7XG4gICAgaWYgKE4gPD0gMSkgcmV0dXJuO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7XG4gICAgICB2YXIgdCA9IHJ3c1tpXTtcblxuICAgICAgcndzW2ldID0gcndzW04gLSBpIC0gMV07XG4gICAgICByd3NbTiAtIGkgLSAxXSA9IHQ7XG5cbiAgICAgIHQgPSBpd3NbaV07XG5cbiAgICAgIGl3c1tpXSA9IC1pd3NbTiAtIGkgLSAxXTtcbiAgICAgIGl3c1tOIC0gaSAtIDFdID0gLXQ7XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLm5vcm1hbGl6ZTEzYiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZTEzYiAod3MsIE4pIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHcgPSBNYXRoLnJvdW5kKHdzWzIgKiBpICsgMV0gLyBOKSAqIDB4MjAwMCArXG4gICAgICAgIE1hdGgucm91bmQod3NbMiAqIGldIC8gTikgK1xuICAgICAgICBjYXJyeTtcblxuICAgICAgd3NbaV0gPSB3ICYgMHgzZmZmZmZmO1xuXG4gICAgICBpZiAodyA8IDB4NDAwMDAwMCkge1xuICAgICAgICBjYXJyeSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJyeSA9IHcgLyAweDQwMDAwMDAgfCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3cztcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb252ZXJ0MTNiID0gZnVuY3Rpb24gY29udmVydDEzYiAod3MsIGxlbiwgcndzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjYXJyeSA9IGNhcnJ5ICsgKHdzW2ldIHwgMCk7XG5cbiAgICAgIHJ3c1syICogaV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgICByd3NbMiAqIGkgKyAxXSA9IGNhcnJ5ICYgMHgxZmZmOyBjYXJyeSA9IGNhcnJ5ID4+PiAxMztcbiAgICB9XG5cbiAgICAvLyBQYWQgd2l0aCB6ZXJvZXNcbiAgICBmb3IgKGkgPSAyICogbGVuOyBpIDwgTjsgKytpKSB7XG4gICAgICByd3NbaV0gPSAwO1xuICAgIH1cblxuICAgIGFzc2VydChjYXJyeSA9PT0gMCk7XG4gICAgYXNzZXJ0KChjYXJyeSAmIH4weDFmZmYpID09PSAwKTtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5zdHViID0gZnVuY3Rpb24gc3R1YiAoTikge1xuICAgIHZhciBwaCA9IG5ldyBBcnJheShOKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcGhbaV0gPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBwaDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5tdWxwID0gZnVuY3Rpb24gbXVscCAoeCwgeSwgb3V0KSB7XG4gICAgdmFyIE4gPSAyICogdGhpcy5ndWVzc0xlbjEzYih4Lmxlbmd0aCwgeS5sZW5ndGgpO1xuXG4gICAgdmFyIHJidCA9IHRoaXMubWFrZVJCVChOKTtcblxuICAgIHZhciBfID0gdGhpcy5zdHViKE4pO1xuXG4gICAgdmFyIHJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgcndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgaXdzdCA9IG5ldyBBcnJheShOKTtcblxuICAgIHZhciBucndzID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBucndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbml3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgcm13cyA9IG91dC53b3JkcztcbiAgICBybXdzLmxlbmd0aCA9IE47XG5cbiAgICB0aGlzLmNvbnZlcnQxM2IoeC53b3JkcywgeC5sZW5ndGgsIHJ3cywgTik7XG4gICAgdGhpcy5jb252ZXJ0MTNiKHkud29yZHMsIHkubGVuZ3RoLCBucndzLCBOKTtcblxuICAgIHRoaXMudHJhbnNmb3JtKHJ3cywgXywgcndzdCwgaXdzdCwgTiwgcmJ0KTtcbiAgICB0aGlzLnRyYW5zZm9ybShucndzLCBfLCBucndzdCwgbml3c3QsIE4sIHJidCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgdmFyIHJ4ID0gcndzdFtpXSAqIG5yd3N0W2ldIC0gaXdzdFtpXSAqIG5pd3N0W2ldO1xuICAgICAgaXdzdFtpXSA9IHJ3c3RbaV0gKiBuaXdzdFtpXSArIGl3c3RbaV0gKiBucndzdFtpXTtcbiAgICAgIHJ3c3RbaV0gPSByeDtcbiAgICB9XG5cbiAgICB0aGlzLmNvbmp1Z2F0ZShyd3N0LCBpd3N0LCBOKTtcbiAgICB0aGlzLnRyYW5zZm9ybShyd3N0LCBpd3N0LCBybXdzLCBfLCBOLCByYnQpO1xuICAgIHRoaXMuY29uanVnYXRlKHJtd3MsIF8sIE4pO1xuICAgIHRoaXMubm9ybWFsaXplMTNiKHJtd3MsIE4pO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0geC5uZWdhdGl2ZSBeIHkubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHgubGVuZ3RoICsgeS5sZW5ndGg7XG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIE11bHRpcGx5IGB0aGlzYCBieSBgbnVtYFxuICBCTi5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChudW0pIHtcbiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICAgIG91dC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCArIG51bS5sZW5ndGgpO1xuICAgIHJldHVybiB0aGlzLm11bFRvKG51bSwgb3V0KTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBlbXBsb3lpbmcgRkZUXG4gIEJOLnByb3RvdHlwZS5tdWxmID0gZnVuY3Rpb24gbXVsZiAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gSW4tcGxhY2UgTXVsdGlwbGljYXRpb25cbiAgQk4ucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLm11bFRvKG51bSwgdGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmltdWxuID0gZnVuY3Rpb24gaW11bG4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG5cbiAgICAvLyBDYXJyeVxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKiBudW07XG4gICAgICB2YXIgbG8gPSAodyAmIDB4M2ZmZmZmZikgKyAoY2FycnkgJiAweDNmZmZmZmYpO1xuICAgICAgY2FycnkgPj49IDI2O1xuICAgICAgY2FycnkgKz0gKHcgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgIC8vIE5PVEU6IGxvIGlzIDI3Yml0IG1heGltdW1cbiAgICAgIGNhcnJ5ICs9IGxvID4+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm11bG4gPSBmdW5jdGlvbiBtdWxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltdWxuKG51bSk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKCkge1xuICAgIHJldHVybiB0aGlzLm11bCh0aGlzKTtcbiAgfTtcblxuICAvLyBgdGhpc2AgKiBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKHRoaXMuY2xvbmUoKSk7XG4gIH07XG5cbiAgLy8gTWF0aC5wb3coYHRoaXNgLCBgbnVtYClcbiAgQk4ucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAobnVtKSB7XG4gICAgdmFyIHcgPSB0b0JpdEFycmF5KG51bSk7XG4gICAgaWYgKHcubGVuZ3RoID09PSAwKSByZXR1cm4gbmV3IEJOKDEpO1xuXG4gICAgLy8gU2tpcCBsZWFkaW5nIHplcm9lc1xuICAgIHZhciByZXMgPSB0aGlzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdy5sZW5ndGg7IGkrKywgcmVzID0gcmVzLnNxcigpKSB7XG4gICAgICBpZiAod1tpXSAhPT0gMCkgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKCsraSA8IHcubGVuZ3RoKSB7XG4gICAgICBmb3IgKHZhciBxID0gcmVzLnNxcigpOyBpIDwgdy5sZW5ndGg7IGkrKywgcSA9IHEuc3FyKCkpIHtcbiAgICAgICAgaWYgKHdbaV0gPT09IDApIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHJlcy5tdWwocSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0IGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXNobG4gPSBmdW5jdGlvbiBpdXNobG4gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG4gICAgdmFyIGNhcnJ5TWFzayA9ICgweDNmZmZmZmYgPj4+ICgyNiAtIHIpKSA8PCAoMjYgLSByKTtcbiAgICB2YXIgaTtcblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbmV3Q2FycnkgPSB0aGlzLndvcmRzW2ldICYgY2FycnlNYXNrO1xuICAgICAgICB2YXIgYyA9ICgodGhpcy53b3Jkc1tpXSB8IDApIC0gbmV3Q2FycnkpIDw8IHI7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjIHwgY2Fycnk7XG4gICAgICAgIGNhcnJ5ID0gbmV3Q2FycnkgPj4+ICgyNiAtIHIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FycnkpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgICB0aGlzLmxlbmd0aCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzICE9PSAwKSB7XG4gICAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIHNdID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IHM7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sZW5ndGggKz0gcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hsbiA9IGZ1bmN0aW9uIGlzaGxuIChiaXRzKSB7XG4gICAgLy8gVE9ETyhpbmR1dG55KTogaW1wbGVtZW50IG1lXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodCBpbi1wbGFjZVxuICAvLyBOT1RFOiBgaGludGAgaXMgYSBsb3dlc3QgYml0IGJlZm9yZSB0cmFpbGluZyB6ZXJvZXNcbiAgLy8gTk9URTogaWYgYGV4dGVuZGVkYCBpcyBwcmVzZW50IC0gaXQgd2lsbCBiZSBmaWxsZWQgd2l0aCBkZXN0cm95ZWQgYml0c1xuICBCTi5wcm90b3R5cGUuaXVzaHJuID0gZnVuY3Rpb24gaXVzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgaDtcbiAgICBpZiAoaGludCkge1xuICAgICAgaCA9IChoaW50IC0gKGhpbnQgJSAyNikpIC8gMjY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGggPSAwO1xuICAgIH1cblxuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gTWF0aC5taW4oKGJpdHMgLSByKSAvIDI2LCB0aGlzLmxlbmd0aCk7XG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgdmFyIG1hc2tlZFdvcmRzID0gZXh0ZW5kZWQ7XG5cbiAgICBoIC09IHM7XG4gICAgaCA9IE1hdGgubWF4KDAsIGgpO1xuXG4gICAgLy8gRXh0ZW5kZWQgbW9kZSwgY29weSBtYXNrZWQgcGFydFxuICAgIGlmIChtYXNrZWRXb3Jkcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgbWFza2VkV29yZHMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgICAgfVxuICAgICAgbWFza2VkV29yZHMubGVuZ3RoID0gcztcbiAgICB9XG5cbiAgICBpZiAocyA9PT0gMCkge1xuICAgICAgLy8gTm8tb3AsIHdlIHNob3VsZCBub3QgbW92ZSBhbnl0aGluZyBhdCBhbGxcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gcykge1xuICAgICAgdGhpcy5sZW5ndGggLT0gcztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2kgKyBzXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMCAmJiAoY2FycnkgIT09IDAgfHwgaSA+PSBoKTsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IChjYXJyeSA8PCAoMjYgLSByKSkgfCAod29yZCA+Pj4gcik7XG4gICAgICBjYXJyeSA9IHdvcmQgJiBtYXNrO1xuICAgIH1cblxuICAgIC8vIFB1c2ggY2FycmllZCBiaXRzIGFzIGEgbWFza1xuICAgIGlmIChtYXNrZWRXb3JkcyAmJiBjYXJyeSAhPT0gMCkge1xuICAgICAgbWFza2VkV29yZHMud29yZHNbbWFza2VkV29yZHMubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hybiA9IGZ1bmN0aW9uIGlzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNocm4oYml0cywgaGludCwgZXh0ZW5kZWQpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnRcbiAgQk4ucHJvdG90eXBlLnNobG4gPSBmdW5jdGlvbiBzaGxuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hsbihiaXRzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXNobG4gPSBmdW5jdGlvbiB1c2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0XG4gIEJOLnByb3RvdHlwZS5zaHJuID0gZnVuY3Rpb24gc2hybiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNocm4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaHJuID0gZnVuY3Rpb24gdXNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hybihiaXRzKTtcbiAgfTtcblxuICAvLyBUZXN0IGlmIG4gYml0IGlzIHNldFxuICBCTi5wcm90b3R5cGUudGVzdG4gPSBmdW5jdGlvbiB0ZXN0biAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInICYmIGJpdCA+PSAwKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBDaGVjayBiaXQgYW5kIHJldHVyblxuICAgIHZhciB3ID0gdGhpcy53b3Jkc1tzXTtcblxuICAgIHJldHVybiAhISh3ICYgcSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyIChpbi1wbGFjZSlcbiAgQk4ucHJvdG90eXBlLmltYXNrbiA9IGZ1bmN0aW9uIGltYXNrbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcblxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAnaW1hc2tuIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZSBudW1iZXJzJyk7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHMrKztcbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1pbihzLCB0aGlzLmxlbmd0aCk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gJj0gbWFzaztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlclxuICBCTi5wcm90b3R5cGUubWFza24gPSBmdW5jdGlvbiBtYXNrbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW1hc2tuKGJpdHMpO1xuICB9O1xuXG4gIC8vIEFkZCBwbGFpbiBudW1iZXIgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pYWRkbiA9IGZ1bmN0aW9uIGlhZGRuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pc3VibigtbnVtKTtcblxuICAgIC8vIFBvc3NpYmxlIHNpZ24gY2hhbmdlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiAodGhpcy53b3Jkc1swXSB8IDApIDwgbnVtKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gPSBudW0gLSAodGhpcy53b3Jkc1swXSB8IDApO1xuICAgICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pc3VibihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aG91dCBjaGVja3NcbiAgICByZXR1cm4gdGhpcy5faWFkZG4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lhZGRuID0gZnVuY3Rpb24gX2lhZGRuIChudW0pIHtcbiAgICB0aGlzLndvcmRzWzBdICs9IG51bTtcblxuICAgIC8vIENhcnJ5XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldID49IDB4NDAwMDAwMDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldIC09IDB4NDAwMDAwMDtcbiAgICAgIGlmIChpID09PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0rKztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSArIDEpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgcGxhaW4gbnVtYmVyIGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pc3VibiA9IGZ1bmN0aW9uIGlzdWJuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pYWRkbigtbnVtKTtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZG4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy53b3Jkc1swXSAtPSBudW07XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA8IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAtdGhpcy53b3Jkc1swXTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYXJyeVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldIDwgMDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gKz0gMHg0MDAwMDAwO1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSAtPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFkZG4gPSBmdW5jdGlvbiBhZGRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnN1Ym4gPSBmdW5jdGlvbiBzdWJuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWJuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhYnMgPSBmdW5jdGlvbiBpYWJzICgpIHtcbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hYnMgPSBmdW5jdGlvbiBhYnMgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFicygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faXNobG5zdWJtdWwgPSBmdW5jdGlvbiBfaXNobG5zdWJtdWwgKG51bSwgbXVsLCBzaGlmdCkge1xuICAgIHZhciBsZW4gPSBudW0ubGVuZ3RoICsgc2hpZnQ7XG4gICAgdmFyIGk7XG5cbiAgICB0aGlzLl9leHBhbmQobGVuKTtcblxuICAgIHZhciB3O1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgdmFyIHJpZ2h0ID0gKG51bS53b3Jkc1tpXSB8IDApICogbXVsO1xuICAgICAgdyAtPSByaWdodCAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gKHcgPj4gMjYpIC0gKChyaWdodCAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgdGhpcy5sZW5ndGggLSBzaGlmdDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSA9PT0gMCkgcmV0dXJuIHRoaXMuc3RyaXAoKTtcblxuICAgIC8vIFN1YnRyYWN0aW9uIG92ZXJmbG93XG4gICAgYXNzZXJ0KGNhcnJ5ID09PSAtMSk7XG4gICAgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3ID0gLSh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICB0aGlzLm5lZ2F0aXZlID0gMTtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl93b3JkRGl2ID0gZnVuY3Rpb24gX3dvcmREaXYgKG51bSwgbW9kZSkge1xuICAgIHZhciBzaGlmdCA9IHRoaXMubGVuZ3RoIC0gbnVtLmxlbmd0aDtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtO1xuXG4gICAgLy8gTm9ybWFsaXplXG4gICAgdmFyIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgdmFyIGJoaUJpdHMgPSB0aGlzLl9jb3VudEJpdHMoYmhpKTtcbiAgICBzaGlmdCA9IDI2IC0gYmhpQml0cztcbiAgICBpZiAoc2hpZnQgIT09IDApIHtcbiAgICAgIGIgPSBiLnVzaGxuKHNoaWZ0KTtcbiAgICAgIGEuaXVzaGxuKHNoaWZ0KTtcbiAgICAgIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBxdW90aWVudFxuICAgIHZhciBtID0gYS5sZW5ndGggLSBiLmxlbmd0aDtcbiAgICB2YXIgcTtcblxuICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgcSA9IG5ldyBCTihudWxsKTtcbiAgICAgIHEubGVuZ3RoID0gbSArIDE7XG4gICAgICBxLndvcmRzID0gbmV3IEFycmF5KHEubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcS5sZW5ndGg7IGkrKykge1xuICAgICAgICBxLndvcmRzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGlmZiA9IGEuY2xvbmUoKS5faXNobG5zdWJtdWwoYiwgMSwgbSk7XG4gICAgaWYgKGRpZmYubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIGEgPSBkaWZmO1xuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1ttXSA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IG0gLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgdmFyIHFqID0gKGEud29yZHNbYi5sZW5ndGggKyBqXSB8IDApICogMHg0MDAwMDAwICtcbiAgICAgICAgKGEud29yZHNbYi5sZW5ndGggKyBqIC0gMV0gfCAwKTtcblxuICAgICAgLy8gTk9URTogKHFqIC8gYmhpKSBpcyAoMHgzZmZmZmZmICogMHg0MDAwMDAwICsgMHgzZmZmZmZmKSAvIDB4MjAwMDAwMCBtYXhcbiAgICAgIC8vICgweDdmZmZmZmYpXG4gICAgICBxaiA9IE1hdGgubWluKChxaiAvIGJoaSkgfCAwLCAweDNmZmZmZmYpO1xuXG4gICAgICBhLl9pc2hsbnN1Ym11bChiLCBxaiwgaik7XG4gICAgICB3aGlsZSAoYS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBxai0tO1xuICAgICAgICBhLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgYS5faXNobG5zdWJtdWwoYiwgMSwgaik7XG4gICAgICAgIGlmICghYS5pc1plcm8oKSkge1xuICAgICAgICAgIGEubmVnYXRpdmUgXj0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1tqXSA9IHFqO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocSkge1xuICAgICAgcS5zdHJpcCgpO1xuICAgIH1cbiAgICBhLnN0cmlwKCk7XG5cbiAgICAvLyBEZW5vcm1hbGl6ZVxuICAgIGlmIChtb2RlICE9PSAnZGl2JyAmJiBzaGlmdCAhPT0gMCkge1xuICAgICAgYS5pdXNocm4oc2hpZnQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkaXY6IHEgfHwgbnVsbCxcbiAgICAgIG1vZDogYVxuICAgIH07XG4gIH07XG5cbiAgLy8gTk9URTogMSkgYG1vZGVgIGNhbiBiZSBzZXQgdG8gYG1vZGAgdG8gcmVxdWVzdCBtb2Qgb25seSxcbiAgLy8gICAgICAgdG8gYGRpdmAgdG8gcmVxdWVzdCBkaXYgb25seSwgb3IgYmUgYWJzZW50IHRvXG4gIC8vICAgICAgIHJlcXVlc3QgYm90aCBkaXYgJiBtb2RcbiAgLy8gICAgICAgMikgYHBvc2l0aXZlYCBpcyB0cnVlIGlmIHVuc2lnbmVkIG1vZCBpcyByZXF1ZXN0ZWRcbiAgQk4ucHJvdG90eXBlLmRpdm1vZCA9IGZ1bmN0aW9uIGRpdm1vZCAobnVtLCBtb2RlLCBwb3NpdGl2ZSkge1xuICAgIGFzc2VydCghbnVtLmlzWmVybygpKTtcblxuICAgIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IG5ldyBCTigwKSxcbiAgICAgICAgbW9kOiBuZXcgQk4oMClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGRpdiwgbW9kLCByZXM7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0sIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgIT09ICdkaXYnKSB7XG4gICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgICBtb2QuaWFkZChudW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiByZXMubW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICgodGhpcy5uZWdhdGl2ZSAmIG51bS5uZWdhdGl2ZSkgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlzdWIobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHJlcy5kaXYsXG4gICAgICAgIG1vZDogbW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmUgYXQgdGhpcyBwb2ludFxuXG4gICAgLy8gU3RyaXAgYm90aCBudW1iZXJzIHRvIGFwcHJveGltYXRlIHNoaWZ0IHZhbHVlXG4gICAgaWYgKG51bS5sZW5ndGggPiB0aGlzLmxlbmd0aCB8fCB0aGlzLmNtcChudW0pIDwgMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogdGhpc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBWZXJ5IHNob3J0IHJlZHVjdGlvblxuICAgIGlmIChudW0ubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAobW9kZSA9PT0gJ2RpdicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICAgIG1vZDogbnVsbFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kZSA9PT0gJ21vZCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IG51bGwsXG4gICAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RuKG51bS53b3Jkc1swXSkpXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fd29yZERpdihudW0sIG1vZGUpO1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgIC8gYG51bWBcbiAgQk4ucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uIGRpdiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ2RpdicsIGZhbHNlKS5kaXY7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgJSBgbnVtYFxuICBCTi5wcm90b3R5cGUubW9kID0gZnVuY3Rpb24gbW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgZmFsc2UpLm1vZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW1vZCA9IGZ1bmN0aW9uIHVtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCB0cnVlKS5tb2Q7XG4gIH07XG5cbiAgLy8gRmluZCBSb3VuZChgdGhpc2AgLyBgbnVtYClcbiAgQk4ucHJvdG90eXBlLmRpdlJvdW5kID0gZnVuY3Rpb24gZGl2Um91bmQgKG51bSkge1xuICAgIHZhciBkbSA9IHRoaXMuZGl2bW9kKG51bSk7XG5cbiAgICAvLyBGYXN0IGNhc2UgLSBleGFjdCBkaXZpc2lvblxuICAgIGlmIChkbS5tb2QuaXNaZXJvKCkpIHJldHVybiBkbS5kaXY7XG5cbiAgICB2YXIgbW9kID0gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0ubW9kLmlzdWIobnVtKSA6IGRtLm1vZDtcblxuICAgIHZhciBoYWxmID0gbnVtLnVzaHJuKDEpO1xuICAgIHZhciByMiA9IG51bS5hbmRsbigxKTtcbiAgICB2YXIgY21wID0gbW9kLmNtcChoYWxmKTtcblxuICAgIC8vIFJvdW5kIGRvd25cbiAgICBpZiAoY21wIDwgMCB8fCByMiA9PT0gMSAmJiBjbXAgPT09IDApIHJldHVybiBkbS5kaXY7XG5cbiAgICAvLyBSb3VuZCB1cFxuICAgIHJldHVybiBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5kaXYuaXN1Ym4oMSkgOiBkbS5kaXYuaWFkZG4oMSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm1vZG4gPSBmdW5jdGlvbiBtb2RuIChudW0pIHtcbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG4gICAgdmFyIHAgPSAoMSA8PCAyNikgJSBudW07XG5cbiAgICB2YXIgYWNjID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgYWNjID0gKHAgKiBhY2MgKyAodGhpcy53b3Jkc1tpXSB8IDApKSAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIGRpdmlzaW9uIGJ5IG51bWJlclxuICBCTi5wcm90b3R5cGUuaWRpdm4gPSBmdW5jdGlvbiBpZGl2biAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICsgY2FycnkgKiAweDQwMDAwMDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKHcgLyBudW0pIHwgMDtcbiAgICAgIGNhcnJ5ID0gdyAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5kaXZuID0gZnVuY3Rpb24gZGl2biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pZGl2bihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lZ2NkID0gZnVuY3Rpb24gZWdjZCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIHggPSB0aGlzO1xuICAgIHZhciB5ID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKHgubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHggPSB4LnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSB4LmNsb25lKCk7XG4gICAgfVxuXG4gICAgLy8gQSAqIHggKyBCICogeSA9IHhcbiAgICB2YXIgQSA9IG5ldyBCTigxKTtcbiAgICB2YXIgQiA9IG5ldyBCTigwKTtcblxuICAgIC8vIEMgKiB4ICsgRCAqIHkgPSB5XG4gICAgdmFyIEMgPSBuZXcgQk4oMCk7XG4gICAgdmFyIEQgPSBuZXcgQk4oMSk7XG5cbiAgICB2YXIgZyA9IDA7XG5cbiAgICB3aGlsZSAoeC5pc0V2ZW4oKSAmJiB5LmlzRXZlbigpKSB7XG4gICAgICB4Lml1c2hybigxKTtcbiAgICAgIHkuaXVzaHJuKDEpO1xuICAgICAgKytnO1xuICAgIH1cblxuICAgIHZhciB5cCA9IHkuY2xvbmUoKTtcbiAgICB2YXIgeHAgPSB4LmNsb25lKCk7XG5cbiAgICB3aGlsZSAoIXguaXNaZXJvKCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7ICh4LndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgeC5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEEuaXNPZGQoKSB8fCBCLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEEuaWFkZCh5cCk7XG4gICAgICAgICAgICBCLmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEEuaXVzaHJuKDEpO1xuICAgICAgICAgIEIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7ICh5LndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgeS5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEMuaXNPZGQoKSB8fCBELmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEMuaWFkZCh5cCk7XG4gICAgICAgICAgICBELmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEMuaXVzaHJuKDEpO1xuICAgICAgICAgIEQuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh4LmNtcCh5KSA+PSAwKSB7XG4gICAgICAgIHguaXN1Yih5KTtcbiAgICAgICAgQS5pc3ViKEMpO1xuICAgICAgICBCLmlzdWIoRCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5LmlzdWIoeCk7XG4gICAgICAgIEMuaXN1YihBKTtcbiAgICAgICAgRC5pc3ViKEIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhOiBDLFxuICAgICAgYjogRCxcbiAgICAgIGdjZDogeS5pdXNobG4oZylcbiAgICB9O1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgcmVkdWNlZCBpbmNhcm5hdGlvbiBvZiB0aGUgYmluYXJ5IEVFQVxuICAvLyBhYm92ZSwgZGVzaWduYXRlZCB0byBpbnZlcnQgbWVtYmVycyBvZiB0aGVcbiAgLy8gX3ByaW1lXyBmaWVsZHMgRihwKSBhdCBhIG1heGltYWwgc3BlZWRcbiAgQk4ucHJvdG90eXBlLl9pbnZtcCA9IGZ1bmN0aW9uIF9pbnZtcCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIGEgPSB0aGlzO1xuICAgIHZhciBiID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGEgPSBhLnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgdmFyIHgxID0gbmV3IEJOKDEpO1xuICAgIHZhciB4MiA9IG5ldyBCTigwKTtcblxuICAgIHZhciBkZWx0YSA9IGIuY2xvbmUoKTtcblxuICAgIHdoaWxlIChhLmNtcG4oMSkgPiAwICYmIGIuY21wbigxKSA+IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7IChhLndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgYS5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgxLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgxLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgxLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoYi53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIGIuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmICh4Mi5pc09kZCgpKSB7XG4gICAgICAgICAgICB4Mi5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4Mi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGEuY21wKGIpID49IDApIHtcbiAgICAgICAgYS5pc3ViKGIpO1xuICAgICAgICB4MS5pc3ViKHgyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGIuaXN1YihhKTtcbiAgICAgICAgeDIuaXN1Yih4MSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlcztcbiAgICBpZiAoYS5jbXBuKDEpID09PSAwKSB7XG4gICAgICByZXMgPSB4MTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0geDI7XG4gICAgfVxuXG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQocCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ2NkID0gZnVuY3Rpb24gZ2NkIChudW0pIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIG51bS5hYnMoKTtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gdGhpcy5hYnMoKTtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtLmNsb25lKCk7XG4gICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgYi5uZWdhdGl2ZSA9IDA7XG5cbiAgICAvLyBSZW1vdmUgY29tbW9uIGZhY3RvciBvZiB0d29cbiAgICBmb3IgKHZhciBzaGlmdCA9IDA7IGEuaXNFdmVuKCkgJiYgYi5pc0V2ZW4oKTsgc2hpZnQrKykge1xuICAgICAgYS5pdXNocm4oMSk7XG4gICAgICBiLml1c2hybigxKTtcbiAgICB9XG5cbiAgICBkbyB7XG4gICAgICB3aGlsZSAoYS5pc0V2ZW4oKSkge1xuICAgICAgICBhLml1c2hybigxKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChiLmlzRXZlbigpKSB7XG4gICAgICAgIGIuaXVzaHJuKDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgciA9IGEuY21wKGIpO1xuICAgICAgaWYgKHIgPCAwKSB7XG4gICAgICAgIC8vIFN3YXAgYGFgIGFuZCBgYmAgdG8gbWFrZSBgYWAgYWx3YXlzIGJpZ2dlciB0aGFuIGBiYFxuICAgICAgICB2YXIgdCA9IGE7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBiID0gdDtcbiAgICAgIH0gZWxzZSBpZiAociA9PT0gMCB8fCBiLmNtcG4oMSkgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGEuaXN1YihiKTtcbiAgICB9IHdoaWxlICh0cnVlKTtcblxuICAgIHJldHVybiBiLml1c2hsbihzaGlmdCk7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IG51bWJlciBpbiB0aGUgZmllbGQgRihudW0pXG4gIEJOLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZWdjZChudW0pLmEudW1vZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc0V2ZW4gPSBmdW5jdGlvbiBpc0V2ZW4gKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uIGlzT2RkICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMTtcbiAgfTtcblxuICAvLyBBbmQgZmlyc3Qgd29yZCBhbmQgbnVtXG4gIEJOLnByb3RvdHlwZS5hbmRsbiA9IGZ1bmN0aW9uIGFuZGxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy53b3Jkc1swXSAmIG51bTtcbiAgfTtcblxuICAvLyBJbmNyZW1lbnQgYXQgdGhlIGJpdCBwb3NpdGlvbiBpbi1saW5lXG4gIEJOLnByb3RvdHlwZS5iaW5jbiA9IGZ1bmN0aW9uIGJpbmNuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicpO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHRoaXMuX2V4cGFuZChzICsgMSk7XG4gICAgICB0aGlzLndvcmRzW3NdIHw9IHE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgYml0IGFuZCBwcm9wYWdhdGUsIGlmIG5lZWRlZFxuICAgIHZhciBjYXJyeSA9IHE7XG4gICAgZm9yICh2YXIgaSA9IHM7IGNhcnJ5ICE9PSAwICYmIGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdyArPSBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+Pj4gMjY7XG4gICAgICB3ICY9IDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc1plcm8gPSBmdW5jdGlvbiBpc1plcm8gKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbXBuID0gZnVuY3Rpb24gY21wbiAobnVtKSB7XG4gICAgdmFyIG5lZ2F0aXZlID0gbnVtIDwgMDtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmICFuZWdhdGl2ZSkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG5lZ2F0aXZlKSByZXR1cm4gMTtcblxuICAgIHRoaXMuc3RyaXAoKTtcblxuICAgIHZhciByZXM7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMSkge1xuICAgICAgcmVzID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG5lZ2F0aXZlKSB7XG4gICAgICAgIG51bSA9IC1udW07XG4gICAgICB9XG5cbiAgICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmLCAnTnVtYmVyIGlzIHRvbyBiaWcnKTtcblxuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzWzBdIHwgMDtcbiAgICAgIHJlcyA9IHcgPT09IG51bSA/IDAgOiB3IDwgbnVtID8gLTEgOiAxO1xuICAgIH1cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIC1yZXMgfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gQ29tcGFyZSB0d28gbnVtYmVycyBhbmQgcmV0dXJuOlxuICAvLyAxIC0gaWYgYHRoaXNgID4gYG51bWBcbiAgLy8gMCAtIGlmIGB0aGlzYCA9PSBgbnVtYFxuICAvLyAtMSAtIGlmIGB0aGlzYCA8IGBudW1gXG4gIEJOLnByb3RvdHlwZS5jbXAgPSBmdW5jdGlvbiBjbXAgKG51bSkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIDE7XG5cbiAgICB2YXIgcmVzID0gdGhpcy51Y21wKG51bSk7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIFVuc2lnbmVkIGNvbXBhcmlzb25cbiAgQk4ucHJvdG90eXBlLnVjbXAgPSBmdW5jdGlvbiB1Y21wIChudW0pIHtcbiAgICAvLyBBdCB0aGlzIHBvaW50IGJvdGggbnVtYmVycyBoYXZlIHRoZSBzYW1lIHNpZ25cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gMTtcbiAgICBpZiAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSByZXR1cm4gLTE7XG5cbiAgICB2YXIgcmVzID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGEgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHZhciBiID0gbnVtLndvcmRzW2ldIHwgMDtcblxuICAgICAgaWYgKGEgPT09IGIpIGNvbnRpbnVlO1xuICAgICAgaWYgKGEgPCBiKSB7XG4gICAgICAgIHJlcyA9IC0xO1xuICAgICAgfSBlbHNlIGlmIChhID4gYikge1xuICAgICAgICByZXMgPSAxO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0biA9IGZ1bmN0aW9uIGd0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAxO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndCA9IGZ1bmN0aW9uIGd0IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlbiA9IGZ1bmN0aW9uIGd0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndGUgPSBmdW5jdGlvbiBndGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID49IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0biA9IGZ1bmN0aW9uIGx0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHQgPSBmdW5jdGlvbiBsdCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IC0xO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGVuID0gZnVuY3Rpb24gbHRlbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ZSA9IGZ1bmN0aW9uIGx0ZSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPD0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZXFuID0gZnVuY3Rpb24gZXFuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAwO1xuICB9O1xuXG4gIC8vXG4gIC8vIEEgcmVkdWNlIGNvbnRleHQsIGNvdWxkIGJlIHVzaW5nIG1vbnRnb21lcnkgb3Igc29tZXRoaW5nIGJldHRlciwgZGVwZW5kaW5nXG4gIC8vIG9uIHRoZSBgbWAgaXRzZWxmLlxuICAvL1xuICBCTi5yZWQgPSBmdW5jdGlvbiByZWQgKG51bSkge1xuICAgIHJldHVybiBuZXcgUmVkKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvUmVkID0gZnVuY3Rpb24gdG9SZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIHJldHVybiBjdHguY29udmVydFRvKHRoaXMpLl9mb3JjZVJlZChjdHgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tUmVkID0gZnVuY3Rpb24gZnJvbVJlZCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAnZnJvbVJlZCB3b3JrcyBvbmx5IHdpdGggbnVtYmVycyBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIHJldHVybiB0aGlzLnJlZC5jb252ZXJ0RnJvbSh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2ZvcmNlUmVkID0gZnVuY3Rpb24gX2ZvcmNlUmVkIChjdHgpIHtcbiAgICB0aGlzLnJlZCA9IGN0eDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZm9yY2VSZWQgPSBmdW5jdGlvbiBmb3JjZVJlZCAoY3R4KSB7XG4gICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkQWRkID0gZnVuY3Rpb24gcmVkQWRkIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJQWRkID0gZnVuY3Rpb24gcmVkSUFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSUFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaWFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTdWIgPSBmdW5jdGlvbiByZWRTdWIgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElTdWIgPSBmdW5jdGlvbiByZWRJU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFNobCA9IGZ1bmN0aW9uIHJlZFNobCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU2hsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zaGwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkTXVsID0gZnVuY3Rpb24gcmVkTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubXVsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElNdWwgPSBmdW5jdGlvbiByZWRJTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTcXIgPSBmdW5jdGlvbiByZWRTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FyKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3FyID0gZnVuY3Rpb24gcmVkSVNxciAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXNxcih0aGlzKTtcbiAgfTtcblxuICAvLyBTcXVhcmUgcm9vdCBvdmVyIHBcbiAgQk4ucHJvdG90eXBlLnJlZFNxcnQgPSBmdW5jdGlvbiByZWRTcXJ0ICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXJ0IHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zcXJ0KHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJbnZtID0gZnVuY3Rpb24gcmVkSW52bSAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSW52bSB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW52bSh0aGlzKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgICUgYHJlZCBtb2R1bG9gXG4gIEJOLnByb3RvdHlwZS5yZWROZWcgPSBmdW5jdGlvbiByZWROZWcgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE5lZyB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubmVnKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRQb3cgPSBmdW5jdGlvbiByZWRQb3cgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCAmJiAhbnVtLnJlZCwgJ3JlZFBvdyhub3JtYWxOdW0pJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnBvdyh0aGlzLCBudW0pO1xuICB9O1xuXG4gIC8vIFByaW1lIG51bWJlcnMgd2l0aCBlZmZpY2llbnQgcmVkdWN0aW9uXG4gIHZhciBwcmltZXMgPSB7XG4gICAgazI1NjogbnVsbCxcbiAgICBwMjI0OiBudWxsLFxuICAgIHAxOTI6IG51bGwsXG4gICAgcDI1NTE5OiBudWxsXG4gIH07XG5cbiAgLy8gUHNldWRvLU1lcnNlbm5lIHByaW1lXG4gIGZ1bmN0aW9uIE1QcmltZSAobmFtZSwgcCkge1xuICAgIC8vIFAgPSAyIF4gTiAtIEtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMucCA9IG5ldyBCTihwLCAxNik7XG4gICAgdGhpcy5uID0gdGhpcy5wLmJpdExlbmd0aCgpO1xuICAgIHRoaXMuayA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5uKS5pc3ViKHRoaXMucCk7XG5cbiAgICB0aGlzLnRtcCA9IHRoaXMuX3RtcCgpO1xuICB9XG5cbiAgTVByaW1lLnByb3RvdHlwZS5fdG1wID0gZnVuY3Rpb24gX3RtcCAoKSB7XG4gICAgdmFyIHRtcCA9IG5ldyBCTihudWxsKTtcbiAgICB0bXAud29yZHMgPSBuZXcgQXJyYXkoTWF0aC5jZWlsKHRoaXMubiAvIDEzKSk7XG4gICAgcmV0dXJuIHRtcDtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmlyZWR1Y2UgPSBmdW5jdGlvbiBpcmVkdWNlIChudW0pIHtcbiAgICAvLyBBc3N1bWVzIHRoYXQgYG51bWAgaXMgbGVzcyB0aGFuIGBQXjJgXG4gICAgLy8gbnVtID0gSEkgKiAoMiBeIE4gLSBLKSArIEhJICogSyArIExPID0gSEkgKiBLICsgTE8gKG1vZCBQKVxuICAgIHZhciByID0gbnVtO1xuICAgIHZhciBybGVuO1xuXG4gICAgZG8ge1xuICAgICAgdGhpcy5zcGxpdChyLCB0aGlzLnRtcCk7XG4gICAgICByID0gdGhpcy5pbXVsSyhyKTtcbiAgICAgIHIgPSByLmlhZGQodGhpcy50bXApO1xuICAgICAgcmxlbiA9IHIuYml0TGVuZ3RoKCk7XG4gICAgfSB3aGlsZSAocmxlbiA+IHRoaXMubik7XG5cbiAgICB2YXIgY21wID0gcmxlbiA8IHRoaXMubiA/IC0xIDogci51Y21wKHRoaXMucCk7XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgci53b3Jkc1swXSA9IDA7XG4gICAgICByLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChjbXAgPiAwKSB7XG4gICAgICByLmlzdWIodGhpcy5wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHIuc3RyaXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyByIGlzIEJOIHY0IGluc3RhbmNlXG4gICAgICAgIHIuc3RyaXAoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHIgaXMgQk4gdjUgaW5zdGFuY2VcbiAgICAgICAgci5fc3RyaXAoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXQpIHtcbiAgICBpbnB1dC5pdXNocm4odGhpcy5uLCAwLCBvdXQpO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgcmV0dXJuIG51bS5pbXVsKHRoaXMuayk7XG4gIH07XG5cbiAgZnVuY3Rpb24gSzI1NiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ2syNTYnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmYzJmJyk7XG4gIH1cbiAgaW5oZXJpdHMoSzI1NiwgTVByaW1lKTtcblxuICBLMjU2LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0cHV0KSB7XG4gICAgLy8gMjU2ID0gOSAqIDI2ICsgMjJcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmO1xuXG4gICAgdmFyIG91dExlbiA9IE1hdGgubWluKGlucHV0Lmxlbmd0aCwgOSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdXRMZW47IGkrKykge1xuICAgICAgb3V0cHV0LndvcmRzW2ldID0gaW5wdXQud29yZHNbaV07XG4gICAgfVxuICAgIG91dHB1dC5sZW5ndGggPSBvdXRMZW47XG5cbiAgICBpZiAoaW5wdXQubGVuZ3RoIDw9IDkpIHtcbiAgICAgIGlucHV0LndvcmRzWzBdID0gMDtcbiAgICAgIGlucHV0Lmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU2hpZnQgYnkgOSBsaW1ic1xuICAgIHZhciBwcmV2ID0gaW5wdXQud29yZHNbOV07XG4gICAgb3V0cHV0LndvcmRzW291dHB1dC5sZW5ndGgrK10gPSBwcmV2ICYgbWFzaztcblxuICAgIGZvciAoaSA9IDEwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBuZXh0ID0gaW5wdXQud29yZHNbaV0gfCAwO1xuICAgICAgaW5wdXQud29yZHNbaSAtIDEwXSA9ICgobmV4dCAmIG1hc2spIDw8IDQpIHwgKHByZXYgPj4+IDIyKTtcbiAgICAgIHByZXYgPSBuZXh0O1xuICAgIH1cbiAgICBwcmV2ID4+Pj0gMjI7XG4gICAgaW5wdXQud29yZHNbaSAtIDEwXSA9IHByZXY7XG4gICAgaWYgKHByZXYgPT09IDAgJiYgaW5wdXQubGVuZ3RoID4gMTApIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSAxMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDk7XG4gICAgfVxuICB9O1xuXG4gIEsyNTYucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEwMDAwMDNkMSA9IFsgMHg0MCwgMHgzZDEgXVxuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoXSA9IDA7XG4gICAgbnVtLndvcmRzW251bS5sZW5ndGggKyAxXSA9IDA7XG4gICAgbnVtLmxlbmd0aCArPSAyO1xuXG4gICAgLy8gYm91bmRlZCBhdDogMHg0MCAqIDB4M2ZmZmZmZiArIDB4M2QwID0gMHgxMDAwMDAzOTBcbiAgICB2YXIgbG8gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IG51bS53b3Jkc1tpXSB8IDA7XG4gICAgICBsbyArPSB3ICogMHgzZDE7XG4gICAgICBudW0ud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICAgIGxvID0gdyAqIDB4NDAgKyAoKGxvIC8gMHg0MDAwMDAwKSB8IDApO1xuICAgIH1cblxuICAgIC8vIEZhc3QgbGVuZ3RoIHJlZHVjdGlvblxuICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICBudW0ubGVuZ3RoLS07XG4gICAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgICBudW0ubGVuZ3RoLS07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgZnVuY3Rpb24gUDIyNCAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AyMjQnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDIyNCwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMTkyICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDE5MicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYnKTtcbiAgfVxuICBpbmhlcml0cyhQMTkyLCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAyNTUxOSAoKSB7XG4gICAgLy8gMiBeIDI1NSAtIDE5XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJzI1NTE5JyxcbiAgICAgICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDI1NTE5LCBNUHJpbWUpO1xuXG4gIFAyNTUxOS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTNcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGkgPSAobnVtLndvcmRzW2ldIHwgMCkgKiAweDEzICsgY2Fycnk7XG4gICAgICB2YXIgbG8gPSBoaSAmIDB4M2ZmZmZmZjtcbiAgICAgIGhpID4+Pj0gMjY7XG5cbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvO1xuICAgICAgY2FycnkgPSBoaTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBudW0ud29yZHNbbnVtLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIC8vIEV4cG9ydGVkIG1vc3RseSBmb3IgdGVzdGluZyBwdXJwb3NlcywgdXNlIHBsYWluIG5hbWUgaW5zdGVhZFxuICBCTi5fcHJpbWUgPSBmdW5jdGlvbiBwcmltZSAobmFtZSkge1xuICAgIC8vIENhY2hlZCB2ZXJzaW9uIG9mIHByaW1lXG4gICAgaWYgKHByaW1lc1tuYW1lXSkgcmV0dXJuIHByaW1lc1tuYW1lXTtcblxuICAgIHZhciBwcmltZTtcbiAgICBpZiAobmFtZSA9PT0gJ2syNTYnKSB7XG4gICAgICBwcmltZSA9IG5ldyBLMjU2KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDIyNCcpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyMjQoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMTkyJykge1xuICAgICAgcHJpbWUgPSBuZXcgUDE5MigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyNTUxOScpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyNTUxOSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcHJpbWUgJyArIG5hbWUpO1xuICAgIH1cbiAgICBwcmltZXNbbmFtZV0gPSBwcmltZTtcblxuICAgIHJldHVybiBwcmltZTtcbiAgfTtcblxuICAvL1xuICAvLyBCYXNlIHJlZHVjdGlvbiBlbmdpbmVcbiAgLy9cbiAgZnVuY3Rpb24gUmVkIChtKSB7XG4gICAgaWYgKHR5cGVvZiBtID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHByaW1lID0gQk4uX3ByaW1lKG0pO1xuICAgICAgdGhpcy5tID0gcHJpbWUucDtcbiAgICAgIHRoaXMucHJpbWUgPSBwcmltZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG0uZ3RuKDEpLCAnbW9kdWx1cyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAxJyk7XG4gICAgICB0aGlzLm0gPSBtO1xuICAgICAgdGhpcy5wcmltZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MSA9IGZ1bmN0aW9uIF92ZXJpZnkxIChhKSB7XG4gICAgYXNzZXJ0KGEubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkyID0gZnVuY3Rpb24gX3ZlcmlmeTIgKGEsIGIpIHtcbiAgICBhc3NlcnQoKGEubmVnYXRpdmUgfCBiLm5lZ2F0aXZlKSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkICYmIGEucmVkID09PSBiLnJlZCxcbiAgICAgICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbW9kID0gZnVuY3Rpb24gaW1vZCAoYSkge1xuICAgIGlmICh0aGlzLnByaW1lKSByZXR1cm4gdGhpcy5wcmltZS5pcmVkdWNlKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgICByZXR1cm4gYS51bW9kKHRoaXMubSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnIChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubS5zdWIoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaWFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaXN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc2hsID0gZnVuY3Rpb24gc2hsIChhLCBudW0pIHtcbiAgICB0aGlzLl92ZXJpZnkxKGEpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS51c2hsbihudW0pKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEuaW11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5tdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKGEsIGEuY2xvbmUoKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwoYSwgYSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXJ0ID0gZnVuY3Rpb24gc3FydCAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIG1vZDMgPSB0aGlzLm0uYW5kbG4oMyk7XG4gICAgYXNzZXJ0KG1vZDMgJSAyID09PSAxKTtcblxuICAgIC8vIEZhc3QgY2FzZVxuICAgIGlmIChtb2QzID09PSAzKSB7XG4gICAgICB2YXIgcG93ID0gdGhpcy5tLmFkZChuZXcgQk4oMSkpLml1c2hybigyKTtcbiAgICAgIHJldHVybiB0aGlzLnBvdyhhLCBwb3cpO1xuICAgIH1cblxuICAgIC8vIFRvbmVsbGktU2hhbmtzIGFsZ29yaXRobSAoVG90YWxseSB1bm9wdGltaXplZCBhbmQgc2xvdylcbiAgICAvL1xuICAgIC8vIEZpbmQgUSBhbmQgUywgdGhhdCBRICogMiBeIFMgPSAoUCAtIDEpXG4gICAgdmFyIHEgPSB0aGlzLm0uc3VibigxKTtcbiAgICB2YXIgcyA9IDA7XG4gICAgd2hpbGUgKCFxLmlzWmVybygpICYmIHEuYW5kbG4oMSkgPT09IDApIHtcbiAgICAgIHMrKztcbiAgICAgIHEuaXVzaHJuKDEpO1xuICAgIH1cbiAgICBhc3NlcnQoIXEuaXNaZXJvKCkpO1xuXG4gICAgdmFyIG9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB2YXIgbk9uZSA9IG9uZS5yZWROZWcoKTtcblxuICAgIC8vIEZpbmQgcXVhZHJhdGljIG5vbi1yZXNpZHVlXG4gICAgLy8gTk9URTogTWF4IGlzIHN1Y2ggYmVjYXVzZSBvZiBnZW5lcmFsaXplZCBSaWVtYW5uIGh5cG90aGVzaXMuXG4gICAgdmFyIGxwb3cgPSB0aGlzLm0uc3VibigxKS5pdXNocm4oMSk7XG4gICAgdmFyIHogPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgeiA9IG5ldyBCTigyICogeiAqIHopLnRvUmVkKHRoaXMpO1xuXG4gICAgd2hpbGUgKHRoaXMucG93KHosIGxwb3cpLmNtcChuT25lKSAhPT0gMCkge1xuICAgICAgei5yZWRJQWRkKG5PbmUpO1xuICAgIH1cblxuICAgIHZhciBjID0gdGhpcy5wb3coeiwgcSk7XG4gICAgdmFyIHIgPSB0aGlzLnBvdyhhLCBxLmFkZG4oMSkuaXVzaHJuKDEpKTtcbiAgICB2YXIgdCA9IHRoaXMucG93KGEsIHEpO1xuICAgIHZhciBtID0gcztcbiAgICB3aGlsZSAodC5jbXAob25lKSAhPT0gMCkge1xuICAgICAgdmFyIHRtcCA9IHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgdG1wLmNtcChvbmUpICE9PSAwOyBpKyspIHtcbiAgICAgICAgdG1wID0gdG1wLnJlZFNxcigpO1xuICAgICAgfVxuICAgICAgYXNzZXJ0KGkgPCBtKTtcbiAgICAgIHZhciBiID0gdGhpcy5wb3coYywgbmV3IEJOKDEpLml1c2hsbihtIC0gaSAtIDEpKTtcblxuICAgICAgciA9IHIucmVkTXVsKGIpO1xuICAgICAgYyA9IGIucmVkU3FyKCk7XG4gICAgICB0ID0gdC5yZWRNdWwoYyk7XG4gICAgICBtID0gaTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgdmFyIGludiA9IGEuX2ludm1wKHRoaXMubSk7XG4gICAgaWYgKGludi5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgaW52Lm5lZ2F0aXZlID0gMDtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KS5yZWROZWcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpO1xuICAgIH1cbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAoYSwgbnVtKSB7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICBpZiAobnVtLmNtcG4oMSkgPT09IDApIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgd2luZG93U2l6ZSA9IDQ7XG4gICAgdmFyIHduZCA9IG5ldyBBcnJheSgxIDw8IHdpbmRvd1NpemUpO1xuICAgIHduZFswXSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB3bmRbMV0gPSBhO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgd25kLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3bmRbaV0gPSB0aGlzLm11bCh3bmRbaSAtIDFdLCBhKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzID0gd25kWzBdO1xuICAgIHZhciBjdXJyZW50ID0gMDtcbiAgICB2YXIgY3VycmVudExlbiA9IDA7XG4gICAgdmFyIHN0YXJ0ID0gbnVtLmJpdExlbmd0aCgpICUgMjY7XG4gICAgaWYgKHN0YXJ0ID09PSAwKSB7XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIGZvciAoaSA9IG51bS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSBudW0ud29yZHNbaV07XG4gICAgICBmb3IgKHZhciBqID0gc3RhcnQgLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgICB2YXIgYml0ID0gKHdvcmQgPj4gaikgJiAxO1xuICAgICAgICBpZiAocmVzICE9PSB3bmRbMF0pIHtcbiAgICAgICAgICByZXMgPSB0aGlzLnNxcihyZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJpdCA9PT0gMCAmJiBjdXJyZW50ID09PSAwKSB7XG4gICAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50IDw8PSAxO1xuICAgICAgICBjdXJyZW50IHw9IGJpdDtcbiAgICAgICAgY3VycmVudExlbisrO1xuICAgICAgICBpZiAoY3VycmVudExlbiAhPT0gd2luZG93U2l6ZSAmJiAoaSAhPT0gMCB8fCBqICE9PSAwKSkgY29udGludWU7XG5cbiAgICAgICAgcmVzID0gdGhpcy5tdWwocmVzLCB3bmRbY3VycmVudF0pO1xuICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgY3VycmVudCA9IDA7XG4gICAgICB9XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHZhciByID0gbnVtLnVtb2QodGhpcy5tKTtcblxuICAgIHJldHVybiByID09PSBudW0gPyByLmNsb25lKCkgOiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHJlcyA9IG51bS5jbG9uZSgpO1xuICAgIHJlcy5yZWQgPSBudWxsO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy9cbiAgLy8gTW9udGdvbWVyeSBtZXRob2QgZW5naW5lXG4gIC8vXG5cbiAgQk4ubW9udCA9IGZ1bmN0aW9uIG1vbnQgKG51bSkge1xuICAgIHJldHVybiBuZXcgTW9udChudW0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIE1vbnQgKG0pIHtcbiAgICBSZWQuY2FsbCh0aGlzLCBtKTtcblxuICAgIHRoaXMuc2hpZnQgPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgaWYgKHRoaXMuc2hpZnQgJSAyNiAhPT0gMCkge1xuICAgICAgdGhpcy5zaGlmdCArPSAyNiAtICh0aGlzLnNoaWZ0ICUgMjYpO1xuICAgIH1cblxuICAgIHRoaXMuciA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5zaGlmdCk7XG4gICAgdGhpcy5yMiA9IHRoaXMuaW1vZCh0aGlzLnIuc3FyKCkpO1xuICAgIHRoaXMucmludiA9IHRoaXMuci5faW52bXAodGhpcy5tKTtcblxuICAgIHRoaXMubWludiA9IHRoaXMucmludi5tdWwodGhpcy5yKS5pc3VibigxKS5kaXYodGhpcy5tKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLm1pbnYudW1vZCh0aGlzLnIpO1xuICAgIHRoaXMubWludiA9IHRoaXMuci5zdWIodGhpcy5taW52KTtcbiAgfVxuICBpbmhlcml0cyhNb250LCBSZWQpO1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChudW0udXNobG4odGhpcy5zaGlmdCkpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByID0gdGhpcy5pbW9kKG51bS5tdWwodGhpcy5yaW52KSk7XG4gICAgci5yZWQgPSBudWxsO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkge1xuICAgICAgYS53b3Jkc1swXSA9IDA7XG4gICAgICBhLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICB2YXIgdCA9IGEuaW11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcblxuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigwKS5fZm9yY2VSZWQodGhpcyk7XG5cbiAgICB2YXIgdCA9IGEubXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICAvLyAoQVIpXi0xICogUl4yID0gKEFeLTEgKiBSXi0xKSAqIFJeMiA9IEFeLTEgKiBSXG4gICAgdmFyIHJlcyA9IHRoaXMuaW1vZChhLl9pbnZtcCh0aGlzLm0pLm11bCh0aGlzLnIyKSk7XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG59KSh0eXBlb2YgbW9kdWxlID09PSAndW5kZWZpbmVkJyB8fCBtb2R1bGUsIHRoaXMpO1xuIiwidmFyIF9nbG9iYWxUaGlzO1xuaWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0Jykge1xuXHRfZ2xvYmFsVGhpcyA9IGdsb2JhbFRoaXM7XG59IGVsc2Uge1xuXHR0cnkge1xuXHRcdF9nbG9iYWxUaGlzID0gcmVxdWlyZSgnZXM1LWV4dC9nbG9iYWwnKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0fSBmaW5hbGx5IHtcblx0XHRpZiAoIV9nbG9iYWxUaGlzICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7IF9nbG9iYWxUaGlzID0gd2luZG93OyB9XG5cdFx0aWYgKCFfZ2xvYmFsVGhpcykgeyB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBkZXRlcm1pbmUgZ2xvYmFsIHRoaXMnKTsgfVxuXHR9XG59XG5cbnZhciBOYXRpdmVXZWJTb2NrZXQgPSBfZ2xvYmFsVGhpcy5XZWJTb2NrZXQgfHwgX2dsb2JhbFRoaXMuTW96V2ViU29ja2V0O1xudmFyIHdlYnNvY2tldF92ZXJzaW9uID0gcmVxdWlyZSgnLi92ZXJzaW9uJyk7XG5cblxuLyoqXG4gKiBFeHBvc2UgYSBXM0MgV2ViU29ja2V0IGNsYXNzIHdpdGgganVzdCBvbmUgb3IgdHdvIGFyZ3VtZW50cy5cbiAqL1xuZnVuY3Rpb24gVzNDV2ViU29ja2V0KHVyaSwgcHJvdG9jb2xzKSB7XG5cdHZhciBuYXRpdmVfaW5zdGFuY2U7XG5cblx0aWYgKHByb3RvY29scykge1xuXHRcdG5hdGl2ZV9pbnN0YW5jZSA9IG5ldyBOYXRpdmVXZWJTb2NrZXQodXJpLCBwcm90b2NvbHMpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdG5hdGl2ZV9pbnN0YW5jZSA9IG5ldyBOYXRpdmVXZWJTb2NrZXQodXJpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiAnbmF0aXZlX2luc3RhbmNlJyBpcyBhbiBpbnN0YW5jZSBvZiBuYXRpdmVXZWJTb2NrZXQgKHRoZSBicm93c2VyJ3MgV2ViU29ja2V0XG5cdCAqIGNsYXNzKS4gU2luY2UgaXQgaXMgYW4gT2JqZWN0IGl0IHdpbGwgYmUgcmV0dXJuZWQgYXMgaXQgaXMgd2hlbiBjcmVhdGluZyBhblxuXHQgKiBpbnN0YW5jZSBvZiBXM0NXZWJTb2NrZXQgdmlhICduZXcgVzNDV2ViU29ja2V0KCknLlxuXHQgKlxuXHQgKiBFQ01BU2NyaXB0IDU6IGh0dHA6Ly9iY2xhcnkuY29tLzIwMDQvMTEvMDcvI2EtMTMuMi4yXG5cdCAqL1xuXHRyZXR1cm4gbmF0aXZlX2luc3RhbmNlO1xufVxuaWYgKE5hdGl2ZVdlYlNvY2tldCkge1xuXHRbJ0NPTk5FQ1RJTkcnLCAnT1BFTicsICdDTE9TSU5HJywgJ0NMT1NFRCddLmZvckVhY2goZnVuY3Rpb24ocHJvcCkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXM0NXZWJTb2NrZXQsIHByb3AsIHtcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBOYXRpdmVXZWJTb2NrZXRbcHJvcF07IH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgICd3M2N3ZWJzb2NrZXQnIDogTmF0aXZlV2ViU29ja2V0ID8gVzNDV2ViU29ja2V0IDogbnVsbCxcbiAgICAndmVyc2lvbicgICAgICA6IHdlYnNvY2tldF92ZXJzaW9uXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJ2ZvcmVhY2gnKTtcbnZhciBhdmFpbGFibGVUeXBlZEFycmF5cyA9IHJlcXVpcmUoJ2F2YWlsYWJsZS10eXBlZC1hcnJheXMnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG5cbnZhciAkdG9TdHJpbmcgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcnKTtcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJ2hhcy10b3N0cmluZ3RhZy9zaGFtcycpKCk7XG5cbnZhciBnID0gdHlwZW9mIGdsb2JhbFRoaXMgPT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogZ2xvYmFsVGhpcztcbnZhciB0eXBlZEFycmF5cyA9IGF2YWlsYWJsZVR5cGVkQXJyYXlzKCk7XG5cbnZhciAkc2xpY2UgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuc2xpY2UnKTtcbnZhciB0b1N0clRhZ3MgPSB7fTtcbnZhciBnT1BEID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvaGVscGVycy9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjsgLy8gcmVxdWlyZSgnZ2V0cHJvdG90eXBlb2YnKTtcbmlmIChoYXNUb1N0cmluZ1RhZyAmJiBnT1BEICYmIGdldFByb3RvdHlwZU9mKSB7XG5cdGZvckVhY2godHlwZWRBcnJheXMsIGZ1bmN0aW9uICh0eXBlZEFycmF5KSB7XG5cdFx0aWYgKHR5cGVvZiBnW3R5cGVkQXJyYXldID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHR2YXIgYXJyID0gbmV3IGdbdHlwZWRBcnJheV0oKTtcblx0XHRcdGlmIChTeW1ib2wudG9TdHJpbmdUYWcgaW4gYXJyKSB7XG5cdFx0XHRcdHZhciBwcm90byA9IGdldFByb3RvdHlwZU9mKGFycik7XG5cdFx0XHRcdHZhciBkZXNjcmlwdG9yID0gZ09QRChwcm90bywgU3ltYm9sLnRvU3RyaW5nVGFnKTtcblx0XHRcdFx0aWYgKCFkZXNjcmlwdG9yKSB7XG5cdFx0XHRcdFx0dmFyIHN1cGVyUHJvdG8gPSBnZXRQcm90b3R5cGVPZihwcm90byk7XG5cdFx0XHRcdFx0ZGVzY3JpcHRvciA9IGdPUEQoc3VwZXJQcm90bywgU3ltYm9sLnRvU3RyaW5nVGFnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0b1N0clRhZ3NbdHlwZWRBcnJheV0gPSBkZXNjcmlwdG9yLmdldDtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG52YXIgdHJ5VHlwZWRBcnJheXMgPSBmdW5jdGlvbiB0cnlBbGxUeXBlZEFycmF5cyh2YWx1ZSkge1xuXHR2YXIgZm91bmROYW1lID0gZmFsc2U7XG5cdGZvckVhY2godG9TdHJUYWdzLCBmdW5jdGlvbiAoZ2V0dGVyLCB0eXBlZEFycmF5KSB7XG5cdFx0aWYgKCFmb3VuZE5hbWUpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHZhciBuYW1lID0gZ2V0dGVyLmNhbGwodmFsdWUpO1xuXHRcdFx0XHRpZiAobmFtZSA9PT0gdHlwZWRBcnJheSkge1xuXHRcdFx0XHRcdGZvdW5kTmFtZSA9IG5hbWU7XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGUpIHt9XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGZvdW5kTmFtZTtcbn07XG5cbnZhciBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCdpcy10eXBlZC1hcnJheScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkge1xuXHRpZiAoIWlzVHlwZWRBcnJheSh2YWx1ZSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICghaGFzVG9TdHJpbmdUYWcgfHwgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsdWUpKSB7IHJldHVybiAkc2xpY2UoJHRvU3RyaW5nKHZhbHVlKSwgOCwgLTEpOyB9XG5cdHJldHVybiB0cnlUeXBlZEFycmF5cyh2YWx1ZSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==
(self.webpackChunkmy_swap=self.webpackChunkmy_swap||[]).push([[6023],{96023:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o}),t(35666);var r=t(14113);function c(e,n,t,r,c,a,o){try{var i=e[a](o),u=i.value}catch(e){return void t(e)}i.done?n(u):Promise.resolve(u).then(r,c)}function a(e){return function(){var n=this,t=arguments;return new Promise((function(r,a){var o=e.apply(n,t);function i(e){c(o,r,a,i,u,"next",e)}function u(e){c(o,r,a,i,u,"throw",e)}i(void 0)}))}}t(44431),t(5942),t(51206);const o=function(e){var n,c=e.infuraKey,o=e.rpc,i=e.bridge,u=e.preferred,l=e.label,s=e.iconSrc,f=e.svg,h=e.networkId,d=(0,r.g)(r.a).blockPollingInterval;if(!(c||o&&o[h]))throw new Error('A "infuraKey" or a "rpc" object with a parameter of '.concat(h," must be included in the WalletConnect initialization object"));return{name:l||"WalletConnect",svg:f||'\n  <svg \n    height="25" \n    viewBox="0 0 40 25" \n    width="40" \n    xmlns="http://www.w3.org/2000/svg"\n  >\n  <path d="m8.19180572 4.83416816c6.52149658-6.38508884 17.09493158-6.38508884 23.61642788 0l.7848727.76845565c.3260748.31925442.3260748.83686816 0 1.15612272l-2.6848927 2.62873374c-.1630375.15962734-.4273733.15962734-.5904108 0l-1.0800779-1.05748639c-4.5495589-4.45439756-11.9258514-4.45439756-16.4754105 0l-1.1566741 1.13248068c-.1630376.15962721-.4273735.15962721-.5904108 0l-2.68489263-2.62873375c-.32607483-.31925456-.32607483-.83686829 0-1.15612272zm29.16903948 5.43649934 2.3895596 2.3395862c.3260732.319253.3260751.8368636.0000041 1.1561187l-10.7746894 10.5494845c-.3260726.3192568-.8547443.3192604-1.1808214.0000083-.0000013-.0000013-.0000029-.0000029-.0000042-.0000043l-7.6472191-7.4872762c-.0815187-.0798136-.2136867-.0798136-.2952053 0-.0000006.0000005-.000001.000001-.0000015.0000014l-7.6470562 7.4872708c-.3260715.3192576-.8547434.319263-1.1808215.0000116-.0000019-.0000018-.0000039-.0000037-.0000059-.0000058l-10.7749893-10.5496247c-.32607469-.3192544-.32607469-.8368682 0-1.1561226l2.38956395-2.3395823c.3260747-.31925446.85474652-.31925446 1.18082136 0l7.64733029 7.4873809c.0815188.0798136.2136866.0798136.2952054 0 .0000012-.0000012.0000023-.0000023.0000035-.0000032l7.6469471-7.4873777c.3260673-.31926181.8547392-.31927378 1.1808214-.0000267.0000046.0000045.0000091.000009.0000135.0000135l7.6473203 7.4873909c.0815186.0798135.2136866.0798135.2952053 0l7.6471967-7.4872433c.3260748-.31925458.8547465-.31925458 1.1808213 0z" \n        fill="#3b99fc"/>\n  </svg>\n',iconSrc:s,wallet:(n=a(regeneratorRuntime.mark((function e(n){var r,u,l,s,f,p,w,m,g;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(8847),t.e(7359),t.e(7895),t.e(7994),t.e(3714),t.e(8090),t.e(9606),t.e(9835),t.e(9225),t.e(596)]).then(t.bind(t,49225));case 2:return r=e.sent.default,e.next=5,Promise.all([t.e(8847),t.e(7359),t.e(7895),t.e(7994),t.e(3714),t.e(8090),t.e(9606),t.e(9831),t.e(9835),t.e(9536),t.e(2485),t.e(3496)]).then(t.bind(t,72485));case 5:if(u=e.sent,l=u.default,s=n.resetWalletState,f=n.networkName,p=n.getBalance,w=o&&o[h]?o[h]:"https://".concat(f(h),".infura.io/v3/").concat(c),m=r({rpcUrl:w}),!c||!o){e.next=12;break}throw new Error("WalletConnect requires  an Infura ID or a custom RPC object but not both.");case 12:return(g=new l({infuraId:c,rpc:o,chainId:h,bridge:i,pollingInterval:d})).autoRefreshOnNetworkChange=!1,g.wc.on("disconnect",(function(){s({disconnected:!0,walletName:"WalletConnect"})})),e.abrupt("return",{provider:g,interface:{name:"WalletConnect",connect:function(){return new Promise((function(e,n){g.enable().then(e).catch((function(){return n({message:"This dapp needs access to your account information."})}))}))},address:{onChange:function(e){g.send("eth_accounts").then((function(n){return n[0]&&e(n[0])})),g.on("accountsChanged",(function(n){return e(n[0])}))}},network:{onChange:function(e){g.send("eth_chainId").then(e),g.on("chainChanged",e)}},balance:{get:function(){var e=a(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(g.wc._accounts[0]){e.next=2;break}return e.abrupt("return",null);case 2:return e.abrupt("return",p(m,g.wc._accounts[0]));case 3:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}()},disconnect:function(){g.wc.killSession(),g.stop()}}});case 16:case"end":return e.stop()}}),e)}))),function(e){return n.apply(this,arguments)}),type:"sdk",desktop:!0,mobile:!0,preferred:u}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL2JuYy1vbmJvYXJkL2Rpc3QvZXNtL3dhbGxldC1jb25uZWN0LTRkODk0Y2QxLmpzIl0sIm5hbWVzIjpbImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsInJlc29sdmUiLCJyZWplY3QiLCJfbmV4dCIsIl90aHJvdyIsImtleSIsImFyZyIsImluZm8iLCJ2YWx1ZSIsImVycm9yIiwiZG9uZSIsIlByb21pc2UiLCJ0aGVuIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJmbiIsInNlbGYiLCJ0aGlzIiwiYXJncyIsImFyZ3VtZW50cyIsImFwcGx5IiwiZXJyIiwidW5kZWZpbmVkIiwib3B0aW9ucyIsIl93YWxsZXQiLCJpbmZ1cmFLZXkiLCJycGMiLCJicmlkZ2UiLCJwcmVmZXJyZWQiLCJsYWJlbCIsImljb25TcmMiLCJzdmciLCJuZXR3b3JrSWQiLCJwb2xsaW5nSW50ZXJ2YWwiLCJnIiwiYSIsImJsb2NrUG9sbGluZ0ludGVydmFsIiwiRXJyb3IiLCJjb25jYXQiLCJuYW1lIiwid2FsbGV0IiwicmVnZW5lcmF0b3JSdW50aW1lIiwibWFyayIsIl9jYWxsZWUyIiwiaGVscGVycyIsImNyZWF0ZVByb3ZpZGVyIiwiX3lpZWxkJGltcG9ydCIsIldhbGxldENvbm5lY3RQcm92aWRlciIsInJlc2V0V2FsbGV0U3RhdGUiLCJuZXR3b3JrTmFtZSIsImdldEJhbGFuY2UiLCJycGNVcmwiLCJiYWxhbmNlUHJvdmlkZXIiLCJwcm92aWRlciIsIndyYXAiLCJfY29udGV4dDIiLCJwcmV2IiwibmV4dCIsInNlbnQiLCJpbmZ1cmFJZCIsImNoYWluSWQiLCJhdXRvUmVmcmVzaE9uTmV0d29ya0NoYW5nZSIsIndjIiwib24iLCJkaXNjb25uZWN0ZWQiLCJ3YWxsZXROYW1lIiwiYWJydXB0IiwiY29ubmVjdCIsImVuYWJsZSIsIm1lc3NhZ2UiLCJhZGRyZXNzIiwib25DaGFuZ2UiLCJmdW5jIiwic2VuZCIsImFjY291bnRzIiwibmV0d29yayIsImJhbGFuY2UiLCJnZXQiLCJfZ2V0IiwiX2NhbGxlZSIsIl9jb250ZXh0IiwiX2FjY291bnRzIiwic3RvcCIsImRpc2Nvbm5lY3QiLCJraWxsU2Vzc2lvbiIsIl94IiwidHlwZSIsImRlc2t0b3AiLCJtb2JpbGUiXSwibWFwcGluZ3MiOiJ5SkFBQSxTQUFTQSxFQUFtQkMsRUFBS0MsRUFBU0MsRUFBUUMsRUFBT0MsRUFBUUMsRUFBS0MsR0FBTyxJQUFNLElBQUlDLEVBQU9QLEVBQUlLLEdBQUtDLEdBQVVFLEVBQVFELEVBQUtDLE1BQVMsTUFBT0MsR0FBd0IsWUFBZlAsRUFBT08sR0FBc0JGLEVBQUtHLEtBQVFULEVBQVFPLEdBQWlCRyxRQUFRVixRQUFRTyxHQUFPSSxLQUFLVCxFQUFPQyxHQUU3UCxTQUFTUyxFQUFrQkMsR0FBTSxPQUFPLFdBQWMsSUFBSUMsRUFBT0MsS0FBTUMsRUFBT0MsVUFBVyxPQUFPLElBQUlQLFNBQVEsU0FBVVYsRUFBU0MsR0FBVSxJQUFJRixFQUFNYyxFQUFHSyxNQUFNSixFQUFNRSxHQUFPLFNBQVNkLEVBQU1LLEdBQVNULEVBQW1CQyxFQUFLQyxFQUFTQyxFQUFRQyxFQUFPQyxFQUFRLE9BQVFJLEdBQVUsU0FBU0osRUFBT2dCLEdBQU9yQixFQUFtQkMsRUFBS0MsRUFBU0MsRUFBUUMsRUFBT0MsRUFBUSxRQUFTZ0IsR0FBUWpCLE9BQU1rQixPLDBCQXNLalgsUUE3SkEsU0FBdUJDLEdBQ3JCLElBcUJRQyxFQXJCSkMsRUFBWUYsRUFBUUUsVUFDcEJDLEVBQU1ILEVBQVFHLElBQ2RDLEVBQVNKLEVBQVFJLE9BQ2pCQyxFQUFZTCxFQUFRSyxVQUNwQkMsRUFBUU4sRUFBUU0sTUFDaEJDLEVBQVVQLEVBQVFPLFFBQ2xCQyxFQUFNUixFQUFRUSxJQUNkQyxFQUFZVCxFQUFRUyxVQUNwQkMsR0FBa0IsSUFBQUMsR0FBZ0IsRUFBQUMsR0FBS0MscUJBRTNDLEtBQUtYLEdBQ0VDLEdBQVFBLEVBQUlNLElBQ2YsTUFBTSxJQUFJSyxNQUFNLHVEQUEyREMs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QUsvQm1FLEtBQU0sTUFDTkMsU0FBUyxFQUNUQyxRQUFRLEVBQ1I1RCxVQUFXQSIsImZpbGUiOiI2MDIzLm1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9XG5cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7IH0gZnVuY3Rpb24gX3Rocm93KGVycikgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfVxuXG5pbXBvcnQgJ3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSc7XG5pbXBvcnQgeyBnIGFzIGdldF9zdG9yZV92YWx1ZSwgYSBhcyBhcHAgfSBmcm9tICcuL29uYm9hcmQtYTM5NzdiODguanMnO1xuaW1wb3J0ICdiaWdudW1iZXIuanMnO1xuaW1wb3J0ICdibmMtc2RrJztcbmltcG9ydCAnYm93c2VyJztcbnZhciB3YWxsZXRDb25uZWN0SWNvbiA9IFwiXFxuICA8c3ZnIFxcbiAgICBoZWlnaHQ9XFxcIjI1XFxcIiBcXG4gICAgdmlld0JveD1cXFwiMCAwIDQwIDI1XFxcIiBcXG4gICAgd2lkdGg9XFxcIjQwXFxcIiBcXG4gICAgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIlxcbiAgPlxcbiAgPHBhdGggZD1cXFwibTguMTkxODA1NzIgNC44MzQxNjgxNmM2LjUyMTQ5NjU4LTYuMzg1MDg4ODQgMTcuMDk0OTMxNTgtNi4zODUwODg4NCAyMy42MTY0Mjc4OCAwbC43ODQ4NzI3Ljc2ODQ1NTY1Yy4zMjYwNzQ4LjMxOTI1NDQyLjMyNjA3NDguODM2ODY4MTYgMCAxLjE1NjEyMjcybC0yLjY4NDg5MjcgMi42Mjg3MzM3NGMtLjE2MzAzNzUuMTU5NjI3MzQtLjQyNzM3MzMuMTU5NjI3MzQtLjU5MDQxMDggMGwtMS4wODAwNzc5LTEuMDU3NDg2MzljLTQuNTQ5NTU4OS00LjQ1NDM5NzU2LTExLjkyNTg1MTQtNC40NTQzOTc1Ni0xNi40NzU0MTA1IDBsLTEuMTU2Njc0MSAxLjEzMjQ4MDY4Yy0uMTYzMDM3Ni4xNTk2MjcyMS0uNDI3MzczNS4xNTk2MjcyMS0uNTkwNDEwOCAwbC0yLjY4NDg5MjYzLTIuNjI4NzMzNzVjLS4zMjYwNzQ4My0uMzE5MjU0NTYtLjMyNjA3NDgzLS44MzY4NjgyOSAwLTEuMTU2MTIyNzJ6bTI5LjE2OTAzOTQ4IDUuNDM2NDk5MzQgMi4zODk1NTk2IDIuMzM5NTg2MmMuMzI2MDczMi4zMTkyNTMuMzI2MDc1MS44MzY4NjM2LjAwMDAwNDEgMS4xNTYxMTg3bC0xMC43NzQ2ODk0IDEwLjU0OTQ4NDVjLS4zMjYwNzI2LjMxOTI1NjgtLjg1NDc0NDMuMzE5MjYwNC0xLjE4MDgyMTQuMDAwMDA4My0uMDAwMDAxMy0uMDAwMDAxMy0uMDAwMDAyOS0uMDAwMDAyOS0uMDAwMDA0Mi0uMDAwMDA0M2wtNy42NDcyMTkxLTcuNDg3Mjc2MmMtLjA4MTUxODctLjA3OTgxMzYtLjIxMzY4NjctLjA3OTgxMzYtLjI5NTIwNTMgMC0uMDAwMDAwNi4wMDAwMDA1LS4wMDAwMDEuMDAwMDAxLS4wMDAwMDE1LjAwMDAwMTRsLTcuNjQ3MDU2MiA3LjQ4NzI3MDhjLS4zMjYwNzE1LjMxOTI1NzYtLjg1NDc0MzQuMzE5MjYzLTEuMTgwODIxNS4wMDAwMTE2LS4wMDAwMDE5LS4wMDAwMDE4LS4wMDAwMDM5LS4wMDAwMDM3LS4wMDAwMDU5LS4wMDAwMDU4bC0xMC43NzQ5ODkzLTEwLjU0OTYyNDdjLS4zMjYwNzQ2OS0uMzE5MjU0NC0uMzI2MDc0NjktLjgzNjg2ODIgMC0xLjE1NjEyMjZsMi4zODk1NjM5NS0yLjMzOTU4MjNjLjMyNjA3NDctLjMxOTI1NDQ2Ljg1NDc0NjUyLS4zMTkyNTQ0NiAxLjE4MDgyMTM2IDBsNy42NDczMzAyOSA3LjQ4NzM4MDljLjA4MTUxODguMDc5ODEzNi4yMTM2ODY2LjA3OTgxMzYuMjk1MjA1NCAwIC4wMDAwMDEyLS4wMDAwMDEyLjAwMDAwMjMtLjAwMDAwMjMuMDAwMDAzNS0uMDAwMDAzMmw3LjY0Njk0NzEtNy40ODczNzc3Yy4zMjYwNjczLS4zMTkyNjE4MS44NTQ3MzkyLS4zMTkyNzM3OCAxLjE4MDgyMTQtLjAwMDAyNjcuMDAwMDA0Ni4wMDAwMDQ1LjAwMDAwOTEuMDAwMDA5LjAwMDAxMzUuMDAwMDEzNWw3LjY0NzMyMDMgNy40ODczOTA5Yy4wODE1MTg2LjA3OTgxMzUuMjEzNjg2Ni4wNzk4MTM1LjI5NTIwNTMgMGw3LjY0NzE5NjctNy40ODcyNDMzYy4zMjYwNzQ4LS4zMTkyNTQ1OC44NTQ3NDY1LS4zMTkyNTQ1OCAxLjE4MDgyMTMgMHpcXFwiIFxcbiAgICAgICAgZmlsbD1cXFwiIzNiOTlmY1xcXCIvPlxcbiAgPC9zdmc+XFxuXCI7XG5cbmZ1bmN0aW9uIHdhbGxldENvbm5lY3Qob3B0aW9ucykge1xuICB2YXIgaW5mdXJhS2V5ID0gb3B0aW9ucy5pbmZ1cmFLZXksXG4gICAgICBycGMgPSBvcHRpb25zLnJwYyxcbiAgICAgIGJyaWRnZSA9IG9wdGlvbnMuYnJpZGdlLFxuICAgICAgcHJlZmVycmVkID0gb3B0aW9ucy5wcmVmZXJyZWQsXG4gICAgICBsYWJlbCA9IG9wdGlvbnMubGFiZWwsXG4gICAgICBpY29uU3JjID0gb3B0aW9ucy5pY29uU3JjLFxuICAgICAgc3ZnID0gb3B0aW9ucy5zdmcsXG4gICAgICBuZXR3b3JrSWQgPSBvcHRpb25zLm5ldHdvcmtJZDtcbiAgdmFyIHBvbGxpbmdJbnRlcnZhbCA9IGdldF9zdG9yZV92YWx1ZShhcHApLmJsb2NrUG9sbGluZ0ludGVydmFsO1xuXG4gIGlmICghaW5mdXJhS2V5KSB7XG4gICAgaWYgKCFycGMgfHwgIXJwY1tuZXR3b3JrSWRdKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIFxcXCJpbmZ1cmFLZXlcXFwiIG9yIGEgXFxcInJwY1xcXCIgb2JqZWN0IHdpdGggYSBwYXJhbWV0ZXIgb2YgXCIuY29uY2F0KG5ldHdvcmtJZCwgXCIgbXVzdCBiZSBpbmNsdWRlZCBpbiB0aGUgV2FsbGV0Q29ubmVjdCBpbml0aWFsaXphdGlvbiBvYmplY3RcIikpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogbGFiZWwgfHwgJ1dhbGxldENvbm5lY3QnLFxuICAgIHN2Zzogc3ZnIHx8IHdhbGxldENvbm5lY3RJY29uLFxuICAgIGljb25TcmM6IGljb25TcmMsXG4gICAgd2FsbGV0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3dhbGxldCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoaGVscGVycykge1xuICAgICAgICB2YXIgY3JlYXRlUHJvdmlkZXIsIF95aWVsZCRpbXBvcnQsIFdhbGxldENvbm5lY3RQcm92aWRlciwgcmVzZXRXYWxsZXRTdGF0ZSwgbmV0d29ya05hbWUsIGdldEJhbGFuY2UsIHJwY1VybCwgYmFsYW5jZVByb3ZpZGVyLCBwcm92aWRlcjtcblxuICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0Mikge1xuICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW1wb3J0KCcuL3Byb3ZpZGVyRW5naW5lLThiZGFmNDUyLmpzJyk7XG5cbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGNyZWF0ZVByb3ZpZGVyID0gX2NvbnRleHQyLnNlbnRbXCJkZWZhdWx0XCJdO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW1wb3J0KCdAd2FsbGV0Y29ubmVjdC93ZWIzLXByb3ZpZGVyJyk7XG5cbiAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIF95aWVsZCRpbXBvcnQgPSBfY29udGV4dDIuc2VudDtcbiAgICAgICAgICAgICAgICBXYWxsZXRDb25uZWN0UHJvdmlkZXIgPSBfeWllbGQkaW1wb3J0W1wiZGVmYXVsdFwiXTtcbiAgICAgICAgICAgICAgICByZXNldFdhbGxldFN0YXRlID0gaGVscGVycy5yZXNldFdhbGxldFN0YXRlLCBuZXR3b3JrTmFtZSA9IGhlbHBlcnMubmV0d29ya05hbWUsIGdldEJhbGFuY2UgPSBoZWxwZXJzLmdldEJhbGFuY2U7XG4gICAgICAgICAgICAgICAgcnBjVXJsID0gcnBjICYmIHJwY1tuZXR3b3JrSWRdID8gcnBjW25ldHdvcmtJZF0gOiBcImh0dHBzOi8vXCIuY29uY2F0KG5ldHdvcmtOYW1lKG5ldHdvcmtJZCksIFwiLmluZnVyYS5pby92My9cIikuY29uY2F0KGluZnVyYUtleSk7XG4gICAgICAgICAgICAgICAgYmFsYW5jZVByb3ZpZGVyID0gY3JlYXRlUHJvdmlkZXIoe1xuICAgICAgICAgICAgICAgICAgcnBjVXJsOiBycGNVcmxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmICghKGluZnVyYUtleSAmJiBycGMpKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEyO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXYWxsZXRDb25uZWN0IHJlcXVpcmVzICBhbiBJbmZ1cmEgSUQgb3IgYSBjdXN0b20gUlBDIG9iamVjdCBidXQgbm90IGJvdGguJyk7XG5cbiAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICBwcm92aWRlciA9IG5ldyBXYWxsZXRDb25uZWN0UHJvdmlkZXIoe1xuICAgICAgICAgICAgICAgICAgaW5mdXJhSWQ6IGluZnVyYUtleSxcbiAgICAgICAgICAgICAgICAgIHJwYzogcnBjLFxuICAgICAgICAgICAgICAgICAgY2hhaW5JZDogbmV0d29ya0lkLFxuICAgICAgICAgICAgICAgICAgYnJpZGdlOiBicmlkZ2UsXG4gICAgICAgICAgICAgICAgICBwb2xsaW5nSW50ZXJ2YWw6IHBvbGxpbmdJbnRlcnZhbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyLmF1dG9SZWZyZXNoT25OZXR3b3JrQ2hhbmdlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcHJvdmlkZXIud2Mub24oJ2Rpc2Nvbm5lY3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICByZXNldFdhbGxldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgZGlzY29ubmVjdGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB3YWxsZXROYW1lOiAnV2FsbGV0Q29ubmVjdCdcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KFwicmV0dXJuXCIsIHtcbiAgICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlcixcbiAgICAgICAgICAgICAgICAgIFwiaW50ZXJmYWNlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1dhbGxldENvbm5lY3QnLFxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0OiBmdW5jdGlvbiBjb25uZWN0KCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlci5lbmFibGUoKS50aGVuKHJlc29sdmUpW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnVGhpcyBkYXBwIG5lZWRzIGFjY2VzcyB0byB5b3VyIGFjY291bnQgaW5mb3JtYXRpb24uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGZ1bmMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyLnNlbmQoJ2V0aF9hY2NvdW50cycpLnRoZW4oZnVuY3Rpb24gKGFjY291bnRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhY2NvdW50c1swXSAmJiBmdW5jKGFjY291bnRzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXIub24oJ2FjY291bnRzQ2hhbmdlZCcsIGZ1bmN0aW9uIChhY2NvdW50cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuYyhhY2NvdW50c1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG5ldHdvcms6IHtcbiAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZnVuYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXIuc2VuZCgnZXRoX2NoYWluSWQnKS50aGVuKGZ1bmMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXIub24oJ2NoYWluQ2hhbmdlZCcsIGZ1bmMpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYmFsYW5jZToge1xuICAgICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9nZXQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvdmlkZXIud2MuX2FjY291bnRzWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgbnVsbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgZ2V0QmFsYW5jZShiYWxhbmNlUHJvdmlkZXIsIHByb3ZpZGVyLndjLl9hY2NvdW50c1swXSkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2dldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0O1xuICAgICAgICAgICAgICAgICAgICAgIH0oKVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkaXNjb25uZWN0OiBmdW5jdGlvbiBkaXNjb25uZWN0KCkge1xuICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyLndjLmtpbGxTZXNzaW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXIuc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgX2NhbGxlZTIpO1xuICAgICAgfSkpO1xuXG4gICAgICBmdW5jdGlvbiB3YWxsZXQoX3gpIHtcbiAgICAgICAgcmV0dXJuIF93YWxsZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHdhbGxldDtcbiAgICB9KCksXG4gICAgdHlwZTogJ3NkaycsXG4gICAgZGVza3RvcDogdHJ1ZSxcbiAgICBtb2JpbGU6IHRydWUsXG4gICAgcHJlZmVycmVkOiBwcmVmZXJyZWRcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2FsbGV0Q29ubmVjdDsiXSwic291cmNlUm9vdCI6IiJ9
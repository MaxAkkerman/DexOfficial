(self.webpackChunkmy_swap=self.webpackChunkmy_swap||[]).push([[144],{50144:function(t,r,e){"use strict";var i=this&&this.__createBinding||(Object.create?function(t,r,e,i){void 0===i&&(i=e),Object.defineProperty(t,i,{enumerable:!0,get:function(){return r[e]}})}:function(t,r,e,i){void 0===i&&(i=e),t[i]=r[e]}),n=this&&this.__setModuleDefault||(Object.create?function(t,r){Object.defineProperty(t,"default",{enumerable:!0,value:r})}:function(t,r){t.default=r}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var r={};if(null!=t)for(var e in t)"default"!==e&&Object.prototype.hasOwnProperty.call(t,e)&&i(r,t,e);return n(r,t),r};Object.defineProperty(r,"__esModule",{value:!0}),r.recoverTypedSignature_v4=r.recoverTypedSignature=r.signTypedData_v4=r.signTypedData=r.recoverTypedMessage=r.signTypedMessage=r.getEncryptionPublicKey=r.decryptSafely=r.decrypt=r.encryptSafely=r.encrypt=r.recoverTypedSignatureLegacy=r.signTypedDataLegacy=r.typedSignatureHash=r.extractPublicKey=r.recoverPersonalSignature=r.personalSign=r.normalize=r.concatSig=r.TypedDataUtils=r.TYPED_MESSAGE_SCHEMA=void 0;const f=o(e(17499)),s=o(e(31250)),u=o(e(59215)),a=o(e(16885)),h={type:"object",properties:{types:{type:"object",additionalProperties:{type:"array",items:{type:"object",properties:{name:{type:"string"},type:{type:"string"}},required:["name","type"]}}},primaryType:{type:"string"},domain:{type:"object"},message:{type:"object"}},required:["types","primaryType","domain","message"]};r.TYPED_MESSAGE_SCHEMA=h;const l={encodeData(t,r,e,i=!0){const n=["bytes32"],o=[this.hashType(t,e)];if(i){const u=(t,r,n)=>{if(void 0!==e[r])return["bytes32",null==n?"0x0000000000000000000000000000000000000000000000000000000000000000":f.keccak(this.encodeData(r,n,e,i))];if(void 0===n)throw new Error(`missing value for field ${t} of type ${r}`);if("bytes"===r)return["bytes32",f.keccak(n)];if("string"===r)return"string"==typeof n&&(n=Buffer.from(n,"utf8")),["bytes32",f.keccak(n)];if(r.lastIndexOf("]")===r.length-1){const e=r.slice(0,r.lastIndexOf("[")),i=n.map((r=>u(t,e,r)));return["bytes32",f.keccak(s.rawEncode(i.map((([t])=>t)),i.map((([,t])=>t))))]}return[r,n]};for(const i of e[t]){const[t,e]=u(i.name,i.type,r[i.name]);n.push(t),o.push(e)}}else for(const s of e[t]){let t=r[s.name];if(void 0!==t)if("bytes"===s.type)n.push("bytes32"),t=f.keccak(t),o.push(t);else if("string"===s.type)n.push("bytes32"),"string"==typeof t&&(t=Buffer.from(t,"utf8")),t=f.keccak(t),o.push(t);else if(void 0!==e[s.type])n.push("bytes32"),t=f.keccak(this.encodeData(s.type,t,e,i)),o.push(t);else{if(s.type.lastIndexOf("]")===s.type.length-1)throw new Error("Arrays are unimplemented in encodeData; use V4 extension");n.push(s.type),o.push(t)}}return s.rawEncode(n,o)},encodeType(t,r){let e="",i=this.findTypeDependencies(t,r).filter((r=>r!==t));i=[t].concat(i.sort());for(const t of i){if(!r[t])throw new Error(`No type definition specified: ${t}`);e+=`${t}(${r[t].map((({name:t,type:r})=>`${r} ${t}`)).join(",")})`}return e},findTypeDependencies(t,r,e=[]){if([t]=t.match(/^\w*/u),e.includes(t)||void 0===r[t])return e;e.push(t);for(const i of r[t])for(const t of this.findTypeDependencies(i.type,r,e))!e.includes(t)&&e.push(t);return e},hashStruct(t,r,e,i=!0){return f.keccak(this.encodeData(t,r,e,i))},hashType(t,r){return f.keccak(this.encodeType(t,r))},sanitizeData(t){const r={};for(const e in h.properties)t[e]&&(r[e]=t[e]);return"types"in r&&(r.types=Object.assign({EIP712Domain:[]},r.types)),r},sign(t,r=!0){const e=this.sanitizeData(t),i=[Buffer.from("1901","hex")];return i.push(this.hashStruct("EIP712Domain",e.domain,e.types,r)),"EIP712Domain"!==e.primaryType&&i.push(this.hashStruct(e.primaryType,e.message,e.types,r)),f.keccak(Buffer.concat(i))}};function c(t,r,e){const i=f.fromSigned(r),n=f.fromSigned(e),o=f.bufferToInt(t),s=_(f.toUnsigned(i).toString("hex"),64),u=_(f.toUnsigned(n).toString("hex"),64),a=f.stripHexPrefix(f.intToHex(o));return f.addHexPrefix(s.concat(u,a)).toString("hex")}function d(t,r){const e=M(r.data),i=f.ecsign(e,t);return f.bufferToHex(c(i.v,i.r,i.s))}function p(t){const r=A(M(t.data),t.sig),e=f.publicToAddress(r);return f.bufferToHex(e)}function m(t,r,e){switch(e){case"x25519-xsalsa20-poly1305":{if("string"!=typeof r.data)throw new Error('Cannot detect secret message, message params should be of the form {data: "secret message"} ');const e=u.box.keyPair();let i;try{i=a.decodeBase64(t)}catch(t){throw new Error("Bad public key")}const n=a.decodeUTF8(r.data),o=u.randomBytes(u.box.nonceLength),f=u.box(n,o,i,e.secretKey);return{version:"x25519-xsalsa20-poly1305",nonce:a.encodeBase64(o),ephemPublicKey:a.encodeBase64(e.publicKey),ciphertext:a.encodeBase64(f)}}default:throw new Error("Encryption type/version not supported")}}function y(t,r){switch(t.version){case"x25519-xsalsa20-poly1305":{const e=B(r),i=u.box.keyPair.fromSecretKey(e).secretKey,n=a.decodeBase64(t.nonce),o=a.decodeBase64(t.ciphertext),f=a.decodeBase64(t.ephemPublicKey),s=u.box.open(o,n,f,i);let h;try{h=a.encodeUTF8(s)}catch(t){throw new Error("Decryption failed.")}if(h)return h;throw new Error("Decryption failed.")}default:throw new Error("Encryption type/version not supported.")}}function g(t,r){const e=l.sign(r.data,!1),i=f.ecsign(e,t);return f.bufferToHex(c(i.v,i.r,i.s))}function v(t,r){const e=l.sign(r.data),i=f.ecsign(e,t);return f.bufferToHex(c(i.v,i.r,i.s))}function w(t){const r=A(l.sign(t.data,!1),t.sig),e=f.publicToAddress(r);return f.bufferToHex(e)}function b(t){const r=A(l.sign(t.data),t.sig),e=f.publicToAddress(r);return f.bufferToHex(e)}function M(t){const r=new Error("Expect argument to be non-empty array");if("object"!=typeof t||!("length"in t)||!t.length)throw r;const e=t.map((function(t){return"bytes"===t.type?f.toBuffer(t.value):t.value})),i=t.map((function(t){return t.type})),n=t.map((function(t){if(!t.name)throw r;return`${t.type} ${t.name}`}));return s.soliditySHA3(["bytes32","bytes32"],[s.soliditySHA3(new Array(t.length).fill("string"),n),s.soliditySHA3(i,e)])}function A(t,r){const e=f.toBuffer(r),i=f.fromRpcSig(e);return f.ecrecover(t,i.v,i.r,i.s)}function x(t){const r=f.toBuffer(t.data);return A(f.hashPersonalMessage(r),t.sig)}function _(t,r){let e=`${t}`;for(;e.length<r;)e=`0${e}`;return e}function B(t){const r=Buffer.from(t,"hex").toString("base64");return a.decodeBase64(r)}r.TypedDataUtils=l,r.concatSig=c,r.normalize=function(t){if(t){if("number"==typeof t){const r=f.toBuffer(t);t=f.bufferToHex(r)}if("string"!=typeof t){let r="eth-sig-util.normalize() requires hex string or integer input.";throw r+=` received ${typeof t}: ${t}`,new Error(r)}return f.addHexPrefix(t.toLowerCase())}},r.personalSign=function(t,r){const e=f.toBuffer(r.data),i=f.hashPersonalMessage(e),n=f.ecsign(i,t);return f.bufferToHex(c(n.v,n.r,n.s))},r.recoverPersonalSignature=function(t){const r=x(t),e=f.publicToAddress(r);return f.bufferToHex(e)},r.extractPublicKey=function(t){return`0x${x(t).toString("hex")}`},r.typedSignatureHash=function(t){const r=M(t);return f.bufferToHex(r)},r.signTypedDataLegacy=d,r.recoverTypedSignatureLegacy=p,r.encrypt=m,r.encryptSafely=function(t,r,e){const{data:i}=r;if(!i)throw new Error("Cannot encrypt empty msg.data");if("object"==typeof i&&"toJSON"in i)throw new Error("Cannot encrypt with toJSON property.  Please remove toJSON property");const n={data:i,padding:""},o=Buffer.byteLength(JSON.stringify(n),"utf-8")%2048;let f=0;return o>0&&(f=2048-o-16),n.padding="0".repeat(f),m(t,{data:JSON.stringify(n)},e)},r.decrypt=y,r.decryptSafely=function(t,r){return JSON.parse(y(t,r)).data},r.getEncryptionPublicKey=function(t){const r=B(t),e=u.box.keyPair.fromSecretKey(r).publicKey;return a.encodeBase64(e)},r.signTypedMessage=function(t,r,e="V4"){switch(e){case"V1":return d(t,r);case"V3":return g(t,r);case"V4":default:return v(t,r)}},r.recoverTypedMessage=function(t,r="V4"){switch(r){case"V1":return p(t);case"V3":return w(t);case"V4":default:return b(t)}},r.signTypedData=g,r.signTypedData_v4=v,r.recoverTypedSignature=w,r.recoverTypedSignature_v4=b},89817:function(t,r,e){!function(t,r){"use strict";function i(t,r){if(!t)throw new Error(r||"Assertion failed")}function n(t,r){t.super_=r;var e=function(){};e.prototype=r.prototype,t.prototype=new e,t.prototype.constructor=t}function o(t,r,e){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==r&&"be"!==r||(e=r,r=10),this._init(t||0,r||10,e||"be"))}var f;"object"==typeof t?t.exports=o:r.BN=o,o.BN=o,o.wordSize=26;try{f="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:e(89568).Buffer}catch(t){}function s(t,r){var e=t.charCodeAt(r);return e>=65&&e<=70?e-55:e>=97&&e<=102?e-87:e-48&15}function u(t,r,e){var i=s(t,e);return e-1>=r&&(i|=s(t,e-1)<<4),i}function a(t,r,e,i){for(var n=0,o=Math.min(t.length,e),f=r;f<o;f++){var s=t.charCodeAt(f)-48;n*=i,n+=s>=49?s-49+10:s>=17?s-17+10:s}return n}o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,r){return t.cmp(r)>0?t:r},o.min=function(t,r){return t.cmp(r)<0?t:r},o.prototype._init=function(t,r,e){if("number"==typeof t)return this._initNumber(t,r,e);if("object"==typeof t)return this._initArray(t,r,e);"hex"===r&&(r=16),i(r===(0|r)&&r>=2&&r<=36);var n=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&(n++,this.negative=1),n<t.length&&(16===r?this._parseHex(t,n,e):(this._parseBase(t,r,n),"le"===e&&this._initArray(this.toArray(),r,e)))},o.prototype._initNumber=function(t,r,e){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(i(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===e&&this._initArray(this.toArray(),r,e)},o.prototype._initArray=function(t,r,e){if(i("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var o,f,s=0;if("be"===e)for(n=t.length-1,o=0;n>=0;n-=3)f=t[n]|t[n-1]<<8|t[n-2]<<16,this.words[o]|=f<<s&67108863,this.words[o+1]=f>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);else if("le"===e)for(n=0,o=0;n<t.length;n+=3)f=t[n]|t[n+1]<<8|t[n+2]<<16,this.words[o]|=f<<s&67108863,this.words[o+1]=f>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);return this.strip()},o.prototype._parseHex=function(t,r,e){this.length=Math.ceil((t.length-r)/6),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var n,o=0,f=0;if("be"===e)for(i=t.length-1;i>=r;i-=2)n=u(t,r,i)<<o,this.words[f]|=67108863&n,o>=18?(o-=18,f+=1,this.words[f]|=n>>>26):o+=8;else for(i=(t.length-r)%2==0?r+1:r;i<t.length;i+=2)n=u(t,r,i)<<o,this.words[f]|=67108863&n,o>=18?(o-=18,f+=1,this.words[f]|=n>>>26):o+=8;this.strip()},o.prototype._parseBase=function(t,r,e){this.words=[0],this.length=1;for(var i=0,n=1;n<=67108863;n*=r)i++;i--,n=n/r|0;for(var o=t.length-e,f=o%i,s=Math.min(o,o-f)+e,u=0,h=e;h<s;h+=i)u=a(t,h,h+i,r),this.imuln(n),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==f){var l=1;for(u=a(t,h,t.length,r),h=0;h<f;h++)l*=r;this.imuln(l),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}this.strip()},o.prototype.copy=function(t){t.words=new Array(this.length);for(var r=0;r<this.length;r++)t.words[r]=this.words[r];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},o.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var h=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],l=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],c=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function d(t,r,e){e.negative=r.negative^t.negative;var i=t.length+r.length|0;e.length=i,i=i-1|0;var n=0|t.words[0],o=0|r.words[0],f=n*o,s=67108863&f,u=f/67108864|0;e.words[0]=s;for(var a=1;a<i;a++){for(var h=u>>>26,l=67108863&u,c=Math.min(a,r.length-1),d=Math.max(0,a-t.length+1);d<=c;d++){var p=a-d|0;h+=(f=(n=0|t.words[p])*(o=0|r.words[d])+l)/67108864|0,l=67108863&f}e.words[a]=0|l,u=0|h}return 0!==u?e.words[a]=0|u:e.length--,e.strip()}o.prototype.toString=function(t,r){var e;if(r=0|r||1,16===(t=t||10)||"hex"===t){e="";for(var n=0,o=0,f=0;f<this.length;f++){var s=this.words[f],u=(16777215&(s<<n|o)).toString(16);e=0!=(o=s>>>24-n&16777215)||f!==this.length-1?h[6-u.length]+u+e:u+e,(n+=2)>=26&&(n-=26,f--)}for(0!==o&&(e=o.toString(16)+e);e.length%r!=0;)e="0"+e;return 0!==this.negative&&(e="-"+e),e}if(t===(0|t)&&t>=2&&t<=36){var a=l[t],d=c[t];e="";var p=this.clone();for(p.negative=0;!p.isZero();){var m=p.modn(d).toString(t);e=(p=p.idivn(d)).isZero()?m+e:h[a-m.length]+m+e}for(this.isZero()&&(e="0"+e);e.length%r!=0;)e="0"+e;return 0!==this.negative&&(e="-"+e),e}i(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&i(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16)},o.prototype.toBuffer=function(t,r){return i(void 0!==f),this.toArrayLike(f,t,r)},o.prototype.toArray=function(t,r){return this.toArrayLike(Array,t,r)},o.prototype.toArrayLike=function(t,r,e){var n=this.byteLength(),o=e||Math.max(1,n);i(n<=o,"byte array longer than desired length"),i(o>0,"Requested array length <= 0"),this.strip();var f,s,u="le"===r,a=new t(o),h=this.clone();if(u){for(s=0;!h.isZero();s++)f=h.andln(255),h.iushrn(8),a[s]=f;for(;s<o;s++)a[s]=0}else{for(s=0;s<o-n;s++)a[s]=0;for(s=0;!h.isZero();s++)f=h.andln(255),h.iushrn(8),a[o-s-1]=f}return a},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var r=t,e=0;return r>=4096&&(e+=13,r>>>=13),r>=64&&(e+=7,r>>>=7),r>=8&&(e+=4,r>>>=4),r>=2&&(e+=2,r>>>=2),e+r},o.prototype._zeroBits=function(t){if(0===t)return 26;var r=t,e=0;return 0==(8191&r)&&(e+=13,r>>>=13),0==(127&r)&&(e+=7,r>>>=7),0==(15&r)&&(e+=4,r>>>=4),0==(3&r)&&(e+=2,r>>>=2),0==(1&r)&&e++,e},o.prototype.bitLength=function(){var t=this.words[this.length-1],r=this._countBits(t);return 26*(this.length-1)+r},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,r=0;r<this.length;r++){var e=this._zeroBits(this.words[r]);if(t+=e,26!==e)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var r=0;r<t.length;r++)this.words[r]=this.words[r]|t.words[r];return this.strip()},o.prototype.ior=function(t){return i(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var r;r=this.length>t.length?t:this;for(var e=0;e<r.length;e++)this.words[e]=this.words[e]&t.words[e];return this.length=r.length,this.strip()},o.prototype.iand=function(t){return i(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var r,e;this.length>t.length?(r=this,e=t):(r=t,e=this);for(var i=0;i<e.length;i++)this.words[i]=r.words[i]^e.words[i];if(this!==r)for(;i<r.length;i++)this.words[i]=r.words[i];return this.length=r.length,this.strip()},o.prototype.ixor=function(t){return i(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){i("number"==typeof t&&t>=0);var r=0|Math.ceil(t/26),e=t%26;this._expand(r),e>0&&r--;for(var n=0;n<r;n++)this.words[n]=67108863&~this.words[n];return e>0&&(this.words[n]=~this.words[n]&67108863>>26-e),this.strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,r){i("number"==typeof t&&t>=0);var e=t/26|0,n=t%26;return this._expand(e+1),this.words[e]=r?this.words[e]|1<<n:this.words[e]&~(1<<n),this.strip()},o.prototype.iadd=function(t){var r,e,i;if(0!==this.negative&&0===t.negative)return this.negative=0,r=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,r=this.isub(t),t.negative=1,r._normSign();this.length>t.length?(e=this,i=t):(e=t,i=this);for(var n=0,o=0;o<i.length;o++)r=(0|e.words[o])+(0|i.words[o])+n,this.words[o]=67108863&r,n=r>>>26;for(;0!==n&&o<e.length;o++)r=(0|e.words[o])+n,this.words[o]=67108863&r,n=r>>>26;if(this.length=e.length,0!==n)this.words[this.length]=n,this.length++;else if(e!==this)for(;o<e.length;o++)this.words[o]=e.words[o];return this},o.prototype.add=function(t){var r;return 0!==t.negative&&0===this.negative?(t.negative=0,r=this.sub(t),t.negative^=1,r):0===t.negative&&0!==this.negative?(this.negative=0,r=t.sub(this),this.negative=1,r):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var r=this.iadd(t);return t.negative=1,r._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var e,i,n=this.cmp(t);if(0===n)return this.negative=0,this.length=1,this.words[0]=0,this;n>0?(e=this,i=t):(e=t,i=this);for(var o=0,f=0;f<i.length;f++)o=(r=(0|e.words[f])-(0|i.words[f])+o)>>26,this.words[f]=67108863&r;for(;0!==o&&f<e.length;f++)o=(r=(0|e.words[f])+o)>>26,this.words[f]=67108863&r;if(0===o&&f<e.length&&e!==this)for(;f<e.length;f++)this.words[f]=e.words[f];return this.length=Math.max(this.length,f),e!==this&&(this.negative=1),this.strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var p=function(t,r,e){var i,n,o,f=t.words,s=r.words,u=e.words,a=0,h=0|f[0],l=8191&h,c=h>>>13,d=0|f[1],p=8191&d,m=d>>>13,y=0|f[2],g=8191&y,v=y>>>13,w=0|f[3],b=8191&w,M=w>>>13,A=0|f[4],x=8191&A,_=A>>>13,B=0|f[5],E=8191&B,k=B>>>13,S=0|f[6],K=8191&S,U=S>>>13,T=0|f[7],L=8191&T,P=T>>>13,C=0|f[8],R=8191&C,I=C>>>13,N=0|f[9],O=8191&N,z=N>>>13,H=0|s[0],Z=8191&H,j=H>>>13,D=0|s[1],V=8191&D,Y=D>>>13,W=0|s[2],q=8191&W,$=W>>>13,F=0|s[3],J=8191&F,G=F>>>13,X=0|s[4],Q=8191&X,tt=X>>>13,rt=0|s[5],et=8191&rt,it=rt>>>13,nt=0|s[6],ot=8191&nt,ft=nt>>>13,st=0|s[7],ut=8191&st,at=st>>>13,ht=0|s[8],lt=8191&ht,ct=ht>>>13,dt=0|s[9],pt=8191&dt,mt=dt>>>13;e.negative=t.negative^r.negative,e.length=19;var yt=(a+(i=Math.imul(l,Z))|0)+((8191&(n=(n=Math.imul(l,j))+Math.imul(c,Z)|0))<<13)|0;a=((o=Math.imul(c,j))+(n>>>13)|0)+(yt>>>26)|0,yt&=67108863,i=Math.imul(p,Z),n=(n=Math.imul(p,j))+Math.imul(m,Z)|0,o=Math.imul(m,j);var gt=(a+(i=i+Math.imul(l,V)|0)|0)+((8191&(n=(n=n+Math.imul(l,Y)|0)+Math.imul(c,V)|0))<<13)|0;a=((o=o+Math.imul(c,Y)|0)+(n>>>13)|0)+(gt>>>26)|0,gt&=67108863,i=Math.imul(g,Z),n=(n=Math.imul(g,j))+Math.imul(v,Z)|0,o=Math.imul(v,j),i=i+Math.imul(p,V)|0,n=(n=n+Math.imul(p,Y)|0)+Math.imul(m,V)|0,o=o+Math.imul(m,Y)|0;var vt=(a+(i=i+Math.imul(l,q)|0)|0)+((8191&(n=(n=n+Math.imul(l,$)|0)+Math.imul(c,q)|0))<<13)|0;a=((o=o+Math.imul(c,$)|0)+(n>>>13)|0)+(vt>>>26)|0,vt&=67108863,i=Math.imul(b,Z),n=(n=Math.imul(b,j))+Math.imul(M,Z)|0,o=Math.imul(M,j),i=i+Math.imul(g,V)|0,n=(n=n+Math.imul(g,Y)|0)+Math.imul(v,V)|0,o=o+Math.imul(v,Y)|0,i=i+Math.imul(p,q)|0,n=(n=n+Math.imul(p,$)|0)+Math.imul(m,q)|0,o=o+Math.imul(m,$)|0;var wt=(a+(i=i+Math.imul(l,J)|0)|0)+((8191&(n=(n=n+Math.imul(l,G)|0)+Math.imul(c,J)|0))<<13)|0;a=((o=o+Math.imul(c,G)|0)+(n>>>13)|0)+(wt>>>26)|0,wt&=67108863,i=Math.imul(x,Z),n=(n=Math.imul(x,j))+Math.imul(_,Z)|0,o=Math.imul(_,j),i=i+Math.imul(b,V)|0,n=(n=n+Math.imul(b,Y)|0)+Math.imul(M,V)|0,o=o+Math.imul(M,Y)|0,i=i+Math.imul(g,q)|0,n=(n=n+Math.imul(g,$)|0)+Math.imul(v,q)|0,o=o+Math.imul(v,$)|0,i=i+Math.imul(p,J)|0,n=(n=n+Math.imul(p,G)|0)+Math.imul(m,J)|0,o=o+Math.imul(m,G)|0;var bt=(a+(i=i+Math.imul(l,Q)|0)|0)+((8191&(n=(n=n+Math.imul(l,tt)|0)+Math.imul(c,Q)|0))<<13)|0;a=((o=o+Math.imul(c,tt)|0)+(n>>>13)|0)+(bt>>>26)|0,bt&=67108863,i=Math.imul(E,Z),n=(n=Math.imul(E,j))+Math.imul(k,Z)|0,o=Math.imul(k,j),i=i+Math.imul(x,V)|0,n=(n=n+Math.imul(x,Y)|0)+Math.imul(_,V)|0,o=o+Math.imul(_,Y)|0,i=i+Math.imul(b,q)|0,n=(n=n+Math.imul(b,$)|0)+Math.imul(M,q)|0,o=o+Math.imul(M,$)|0,i=i+Math.imul(g,J)|0,n=(n=n+Math.imul(g,G)|0)+Math.imul(v,J)|0,o=o+Math.imul(v,G)|0,i=i+Math.imul(p,Q)|0,n=(n=n+Math.imul(p,tt)|0)+Math.imul(m,Q)|0,o=o+Math.imul(m,tt)|0;var Mt=(a+(i=i+Math.imul(l,et)|0)|0)+((8191&(n=(n=n+Math.imul(l,it)|0)+Math.imul(c,et)|0))<<13)|0;a=((o=o+Math.imul(c,it)|0)+(n>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,i=Math.imul(K,Z),n=(n=Math.imul(K,j))+Math.imul(U,Z)|0,o=Math.imul(U,j),i=i+Math.imul(E,V)|0,n=(n=n+Math.imul(E,Y)|0)+Math.imul(k,V)|0,o=o+Math.imul(k,Y)|0,i=i+Math.imul(x,q)|0,n=(n=n+Math.imul(x,$)|0)+Math.imul(_,q)|0,o=o+Math.imul(_,$)|0,i=i+Math.imul(b,J)|0,n=(n=n+Math.imul(b,G)|0)+Math.imul(M,J)|0,o=o+Math.imul(M,G)|0,i=i+Math.imul(g,Q)|0,n=(n=n+Math.imul(g,tt)|0)+Math.imul(v,Q)|0,o=o+Math.imul(v,tt)|0,i=i+Math.imul(p,et)|0,n=(n=n+Math.imul(p,it)|0)+Math.imul(m,et)|0,o=o+Math.imul(m,it)|0;var At=(a+(i=i+Math.imul(l,ot)|0)|0)+((8191&(n=(n=n+Math.imul(l,ft)|0)+Math.imul(c,ot)|0))<<13)|0;a=((o=o+Math.imul(c,ft)|0)+(n>>>13)|0)+(At>>>26)|0,At&=67108863,i=Math.imul(L,Z),n=(n=Math.imul(L,j))+Math.imul(P,Z)|0,o=Math.imul(P,j),i=i+Math.imul(K,V)|0,n=(n=n+Math.imul(K,Y)|0)+Math.imul(U,V)|0,o=o+Math.imul(U,Y)|0,i=i+Math.imul(E,q)|0,n=(n=n+Math.imul(E,$)|0)+Math.imul(k,q)|0,o=o+Math.imul(k,$)|0,i=i+Math.imul(x,J)|0,n=(n=n+Math.imul(x,G)|0)+Math.imul(_,J)|0,o=o+Math.imul(_,G)|0,i=i+Math.imul(b,Q)|0,n=(n=n+Math.imul(b,tt)|0)+Math.imul(M,Q)|0,o=o+Math.imul(M,tt)|0,i=i+Math.imul(g,et)|0,n=(n=n+Math.imul(g,it)|0)+Math.imul(v,et)|0,o=o+Math.imul(v,it)|0,i=i+Math.imul(p,ot)|0,n=(n=n+Math.imul(p,ft)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,ft)|0;var xt=(a+(i=i+Math.imul(l,ut)|0)|0)+((8191&(n=(n=n+Math.imul(l,at)|0)+Math.imul(c,ut)|0))<<13)|0;a=((o=o+Math.imul(c,at)|0)+(n>>>13)|0)+(xt>>>26)|0,xt&=67108863,i=Math.imul(R,Z),n=(n=Math.imul(R,j))+Math.imul(I,Z)|0,o=Math.imul(I,j),i=i+Math.imul(L,V)|0,n=(n=n+Math.imul(L,Y)|0)+Math.imul(P,V)|0,o=o+Math.imul(P,Y)|0,i=i+Math.imul(K,q)|0,n=(n=n+Math.imul(K,$)|0)+Math.imul(U,q)|0,o=o+Math.imul(U,$)|0,i=i+Math.imul(E,J)|0,n=(n=n+Math.imul(E,G)|0)+Math.imul(k,J)|0,o=o+Math.imul(k,G)|0,i=i+Math.imul(x,Q)|0,n=(n=n+Math.imul(x,tt)|0)+Math.imul(_,Q)|0,o=o+Math.imul(_,tt)|0,i=i+Math.imul(b,et)|0,n=(n=n+Math.imul(b,it)|0)+Math.imul(M,et)|0,o=o+Math.imul(M,it)|0,i=i+Math.imul(g,ot)|0,n=(n=n+Math.imul(g,ft)|0)+Math.imul(v,ot)|0,o=o+Math.imul(v,ft)|0,i=i+Math.imul(p,ut)|0,n=(n=n+Math.imul(p,at)|0)+Math.imul(m,ut)|0,o=o+Math.imul(m,at)|0;var _t=(a+(i=i+Math.imul(l,lt)|0)|0)+((8191&(n=(n=n+Math.imul(l,ct)|0)+Math.imul(c,lt)|0))<<13)|0;a=((o=o+Math.imul(c,ct)|0)+(n>>>13)|0)+(_t>>>26)|0,_t&=67108863,i=Math.imul(O,Z),n=(n=Math.imul(O,j))+Math.imul(z,Z)|0,o=Math.imul(z,j),i=i+Math.imul(R,V)|0,n=(n=n+Math.imul(R,Y)|0)+Math.imul(I,V)|0,o=o+Math.imul(I,Y)|0,i=i+Math.imul(L,q)|0,n=(n=n+Math.imul(L,$)|0)+Math.imul(P,q)|0,o=o+Math.imul(P,$)|0,i=i+Math.imul(K,J)|0,n=(n=n+Math.imul(K,G)|0)+Math.imul(U,J)|0,o=o+Math.imul(U,G)|0,i=i+Math.imul(E,Q)|0,n=(n=n+Math.imul(E,tt)|0)+Math.imul(k,Q)|0,o=o+Math.imul(k,tt)|0,i=i+Math.imul(x,et)|0,n=(n=n+Math.imul(x,it)|0)+Math.imul(_,et)|0,o=o+Math.imul(_,it)|0,i=i+Math.imul(b,ot)|0,n=(n=n+Math.imul(b,ft)|0)+Math.imul(M,ot)|0,o=o+Math.imul(M,ft)|0,i=i+Math.imul(g,ut)|0,n=(n=n+Math.imul(g,at)|0)+Math.imul(v,ut)|0,o=o+Math.imul(v,at)|0,i=i+Math.imul(p,lt)|0,n=(n=n+Math.imul(p,ct)|0)+Math.imul(m,lt)|0,o=o+Math.imul(m,ct)|0;var Bt=(a+(i=i+Math.imul(l,pt)|0)|0)+((8191&(n=(n=n+Math.imul(l,mt)|0)+Math.imul(c,pt)|0))<<13)|0;a=((o=o+Math.imul(c,mt)|0)+(n>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,i=Math.imul(O,V),n=(n=Math.imul(O,Y))+Math.imul(z,V)|0,o=Math.imul(z,Y),i=i+Math.imul(R,q)|0,n=(n=n+Math.imul(R,$)|0)+Math.imul(I,q)|0,o=o+Math.imul(I,$)|0,i=i+Math.imul(L,J)|0,n=(n=n+Math.imul(L,G)|0)+Math.imul(P,J)|0,o=o+Math.imul(P,G)|0,i=i+Math.imul(K,Q)|0,n=(n=n+Math.imul(K,tt)|0)+Math.imul(U,Q)|0,o=o+Math.imul(U,tt)|0,i=i+Math.imul(E,et)|0,n=(n=n+Math.imul(E,it)|0)+Math.imul(k,et)|0,o=o+Math.imul(k,it)|0,i=i+Math.imul(x,ot)|0,n=(n=n+Math.imul(x,ft)|0)+Math.imul(_,ot)|0,o=o+Math.imul(_,ft)|0,i=i+Math.imul(b,ut)|0,n=(n=n+Math.imul(b,at)|0)+Math.imul(M,ut)|0,o=o+Math.imul(M,at)|0,i=i+Math.imul(g,lt)|0,n=(n=n+Math.imul(g,ct)|0)+Math.imul(v,lt)|0,o=o+Math.imul(v,ct)|0;var Et=(a+(i=i+Math.imul(p,pt)|0)|0)+((8191&(n=(n=n+Math.imul(p,mt)|0)+Math.imul(m,pt)|0))<<13)|0;a=((o=o+Math.imul(m,mt)|0)+(n>>>13)|0)+(Et>>>26)|0,Et&=67108863,i=Math.imul(O,q),n=(n=Math.imul(O,$))+Math.imul(z,q)|0,o=Math.imul(z,$),i=i+Math.imul(R,J)|0,n=(n=n+Math.imul(R,G)|0)+Math.imul(I,J)|0,o=o+Math.imul(I,G)|0,i=i+Math.imul(L,Q)|0,n=(n=n+Math.imul(L,tt)|0)+Math.imul(P,Q)|0,o=o+Math.imul(P,tt)|0,i=i+Math.imul(K,et)|0,n=(n=n+Math.imul(K,it)|0)+Math.imul(U,et)|0,o=o+Math.imul(U,it)|0,i=i+Math.imul(E,ot)|0,n=(n=n+Math.imul(E,ft)|0)+Math.imul(k,ot)|0,o=o+Math.imul(k,ft)|0,i=i+Math.imul(x,ut)|0,n=(n=n+Math.imul(x,at)|0)+Math.imul(_,ut)|0,o=o+Math.imul(_,at)|0,i=i+Math.imul(b,lt)|0,n=(n=n+Math.imul(b,ct)|0)+Math.imul(M,lt)|0,o=o+Math.imul(M,ct)|0;var kt=(a+(i=i+Math.imul(g,pt)|0)|0)+((8191&(n=(n=n+Math.imul(g,mt)|0)+Math.imul(v,pt)|0))<<13)|0;a=((o=o+Math.imul(v,mt)|0)+(n>>>13)|0)+(kt>>>26)|0,kt&=67108863,i=Math.imul(O,J),n=(n=Math.imul(O,G))+Math.imul(z,J)|0,o=Math.imul(z,G),i=i+Math.imul(R,Q)|0,n=(n=n+Math.imul(R,tt)|0)+Math.imul(I,Q)|0,o=o+Math.imul(I,tt)|0,i=i+Math.imul(L,et)|0,n=(n=n+Math.imul(L,it)|0)+Math.imul(P,et)|0,o=o+Math.imul(P,it)|0,i=i+Math.imul(K,ot)|0,n=(n=n+Math.imul(K,ft)|0)+Math.imul(U,ot)|0,o=o+Math.imul(U,ft)|0,i=i+Math.imul(E,ut)|0,n=(n=n+Math.imul(E,at)|0)+Math.imul(k,ut)|0,o=o+Math.imul(k,at)|0,i=i+Math.imul(x,lt)|0,n=(n=n+Math.imul(x,ct)|0)+Math.imul(_,lt)|0,o=o+Math.imul(_,ct)|0;var St=(a+(i=i+Math.imul(b,pt)|0)|0)+((8191&(n=(n=n+Math.imul(b,mt)|0)+Math.imul(M,pt)|0))<<13)|0;a=((o=o+Math.imul(M,mt)|0)+(n>>>13)|0)+(St>>>26)|0,St&=67108863,i=Math.imul(O,Q),n=(n=Math.imul(O,tt))+Math.imul(z,Q)|0,o=Math.imul(z,tt),i=i+Math.imul(R,et)|0,n=(n=n+Math.imul(R,it)|0)+Math.imul(I,et)|0,o=o+Math.imul(I,it)|0,i=i+Math.imul(L,ot)|0,n=(n=n+Math.imul(L,ft)|0)+Math.imul(P,ot)|0,o=o+Math.imul(P,ft)|0,i=i+Math.imul(K,ut)|0,n=(n=n+Math.imul(K,at)|0)+Math.imul(U,ut)|0,o=o+Math.imul(U,at)|0,i=i+Math.imul(E,lt)|0,n=(n=n+Math.imul(E,ct)|0)+Math.imul(k,lt)|0,o=o+Math.imul(k,ct)|0;var Kt=(a+(i=i+Math.imul(x,pt)|0)|0)+((8191&(n=(n=n+Math.imul(x,mt)|0)+Math.imul(_,pt)|0))<<13)|0;a=((o=o+Math.imul(_,mt)|0)+(n>>>13)|0)+(Kt>>>26)|0,Kt&=67108863,i=Math.imul(O,et),n=(n=Math.imul(O,it))+Math.imul(z,et)|0,o=Math.imul(z,it),i=i+Math.imul(R,ot)|0,n=(n=n+Math.imul(R,ft)|0)+Math.imul(I,ot)|0,o=o+Math.imul(I,ft)|0,i=i+Math.imul(L,ut)|0,n=(n=n+Math.imul(L,at)|0)+Math.imul(P,ut)|0,o=o+Math.imul(P,at)|0,i=i+Math.imul(K,lt)|0,n=(n=n+Math.imul(K,ct)|0)+Math.imul(U,lt)|0,o=o+Math.imul(U,ct)|0;var Ut=(a+(i=i+Math.imul(E,pt)|0)|0)+((8191&(n=(n=n+Math.imul(E,mt)|0)+Math.imul(k,pt)|0))<<13)|0;a=((o=o+Math.imul(k,mt)|0)+(n>>>13)|0)+(Ut>>>26)|0,Ut&=67108863,i=Math.imul(O,ot),n=(n=Math.imul(O,ft))+Math.imul(z,ot)|0,o=Math.imul(z,ft),i=i+Math.imul(R,ut)|0,n=(n=n+Math.imul(R,at)|0)+Math.imul(I,ut)|0,o=o+Math.imul(I,at)|0,i=i+Math.imul(L,lt)|0,n=(n=n+Math.imul(L,ct)|0)+Math.imul(P,lt)|0,o=o+Math.imul(P,ct)|0;var Tt=(a+(i=i+Math.imul(K,pt)|0)|0)+((8191&(n=(n=n+Math.imul(K,mt)|0)+Math.imul(U,pt)|0))<<13)|0;a=((o=o+Math.imul(U,mt)|0)+(n>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,i=Math.imul(O,ut),n=(n=Math.imul(O,at))+Math.imul(z,ut)|0,o=Math.imul(z,at),i=i+Math.imul(R,lt)|0,n=(n=n+Math.imul(R,ct)|0)+Math.imul(I,lt)|0,o=o+Math.imul(I,ct)|0;var Lt=(a+(i=i+Math.imul(L,pt)|0)|0)+((8191&(n=(n=n+Math.imul(L,mt)|0)+Math.imul(P,pt)|0))<<13)|0;a=((o=o+Math.imul(P,mt)|0)+(n>>>13)|0)+(Lt>>>26)|0,Lt&=67108863,i=Math.imul(O,lt),n=(n=Math.imul(O,ct))+Math.imul(z,lt)|0,o=Math.imul(z,ct);var Pt=(a+(i=i+Math.imul(R,pt)|0)|0)+((8191&(n=(n=n+Math.imul(R,mt)|0)+Math.imul(I,pt)|0))<<13)|0;a=((o=o+Math.imul(I,mt)|0)+(n>>>13)|0)+(Pt>>>26)|0,Pt&=67108863;var Ct=(a+(i=Math.imul(O,pt))|0)+((8191&(n=(n=Math.imul(O,mt))+Math.imul(z,pt)|0))<<13)|0;return a=((o=Math.imul(z,mt))+(n>>>13)|0)+(Ct>>>26)|0,Ct&=67108863,u[0]=yt,u[1]=gt,u[2]=vt,u[3]=wt,u[4]=bt,u[5]=Mt,u[6]=At,u[7]=xt,u[8]=_t,u[9]=Bt,u[10]=Et,u[11]=kt,u[12]=St,u[13]=Kt,u[14]=Ut,u[15]=Tt,u[16]=Lt,u[17]=Pt,u[18]=Ct,0!==a&&(u[19]=a,e.length++),e};function m(t,r,e){return(new y).mulp(t,r,e)}function y(t,r){this.x=t,this.y=r}Math.imul||(p=d),o.prototype.mulTo=function(t,r){var e=this.length+t.length;return 10===this.length&&10===t.length?p(this,t,r):e<63?d(this,t,r):e<1024?function(t,r,e){e.negative=r.negative^t.negative,e.length=t.length+r.length;for(var i=0,n=0,o=0;o<e.length-1;o++){var f=n;n=0;for(var s=67108863&i,u=Math.min(o,r.length-1),a=Math.max(0,o-t.length+1);a<=u;a++){var h=o-a,l=(0|t.words[h])*(0|r.words[a]),c=67108863&l;s=67108863&(c=c+s|0),n+=(f=(f=f+(l/67108864|0)|0)+(c>>>26)|0)>>>26,f&=67108863}e.words[o]=s,i=f,f=n}return 0!==i?e.words[o]=i:e.length--,e.strip()}(this,t,r):m(this,t,r)},y.prototype.makeRBT=function(t){for(var r=new Array(t),e=o.prototype._countBits(t)-1,i=0;i<t;i++)r[i]=this.revBin(i,e,t);return r},y.prototype.revBin=function(t,r,e){if(0===t||t===e-1)return t;for(var i=0,n=0;n<r;n++)i|=(1&t)<<r-n-1,t>>=1;return i},y.prototype.permute=function(t,r,e,i,n,o){for(var f=0;f<o;f++)i[f]=r[t[f]],n[f]=e[t[f]]},y.prototype.transform=function(t,r,e,i,n,o){this.permute(o,t,r,e,i,n);for(var f=1;f<n;f<<=1)for(var s=f<<1,u=Math.cos(2*Math.PI/s),a=Math.sin(2*Math.PI/s),h=0;h<n;h+=s)for(var l=u,c=a,d=0;d<f;d++){var p=e[h+d],m=i[h+d],y=e[h+d+f],g=i[h+d+f],v=l*y-c*g;g=l*g+c*y,y=v,e[h+d]=p+y,i[h+d]=m+g,e[h+d+f]=p-y,i[h+d+f]=m-g,d!==s&&(v=u*l-a*c,c=u*c+a*l,l=v)}},y.prototype.guessLen13b=function(t,r){var e=1|Math.max(r,t),i=1&e,n=0;for(e=e/2|0;e;e>>>=1)n++;return 1<<n+1+i},y.prototype.conjugate=function(t,r,e){if(!(e<=1))for(var i=0;i<e/2;i++){var n=t[i];t[i]=t[e-i-1],t[e-i-1]=n,n=r[i],r[i]=-r[e-i-1],r[e-i-1]=-n}},y.prototype.normalize13b=function(t,r){for(var e=0,i=0;i<r/2;i++){var n=8192*Math.round(t[2*i+1]/r)+Math.round(t[2*i]/r)+e;t[i]=67108863&n,e=n<67108864?0:n/67108864|0}return t},y.prototype.convert13b=function(t,r,e,n){for(var o=0,f=0;f<r;f++)o+=0|t[f],e[2*f]=8191&o,o>>>=13,e[2*f+1]=8191&o,o>>>=13;for(f=2*r;f<n;++f)e[f]=0;i(0===o),i(0==(-8192&o))},y.prototype.stub=function(t){for(var r=new Array(t),e=0;e<t;e++)r[e]=0;return r},y.prototype.mulp=function(t,r,e){var i=2*this.guessLen13b(t.length,r.length),n=this.makeRBT(i),o=this.stub(i),f=new Array(i),s=new Array(i),u=new Array(i),a=new Array(i),h=new Array(i),l=new Array(i),c=e.words;c.length=i,this.convert13b(t.words,t.length,f,i),this.convert13b(r.words,r.length,a,i),this.transform(f,o,s,u,i,n),this.transform(a,o,h,l,i,n);for(var d=0;d<i;d++){var p=s[d]*h[d]-u[d]*l[d];u[d]=s[d]*l[d]+u[d]*h[d],s[d]=p}return this.conjugate(s,u,i),this.transform(s,u,c,o,i,n),this.conjugate(c,o,i),this.normalize13b(c,i),e.negative=t.negative^r.negative,e.length=t.length+r.length,e.strip()},o.prototype.mul=function(t){var r=new o(null);return r.words=new Array(this.length+t.length),this.mulTo(t,r)},o.prototype.mulf=function(t){var r=new o(null);return r.words=new Array(this.length+t.length),m(this,t,r)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){i("number"==typeof t),i(t<67108864);for(var r=0,e=0;e<this.length;e++){var n=(0|this.words[e])*t,o=(67108863&n)+(67108863&r);r>>=26,r+=n/67108864|0,r+=o>>>26,this.words[e]=67108863&o}return 0!==r&&(this.words[e]=r,this.length++),this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var r=function(t){for(var r=new Array(t.bitLength()),e=0;e<r.length;e++){var i=e/26|0,n=e%26;r[e]=(t.words[i]&1<<n)>>>n}return r}(t);if(0===r.length)return new o(1);for(var e=this,i=0;i<r.length&&0===r[i];i++,e=e.sqr());if(++i<r.length)for(var n=e.sqr();i<r.length;i++,n=n.sqr())0!==r[i]&&(e=e.mul(n));return e},o.prototype.iushln=function(t){i("number"==typeof t&&t>=0);var r,e=t%26,n=(t-e)/26,o=67108863>>>26-e<<26-e;if(0!==e){var f=0;for(r=0;r<this.length;r++){var s=this.words[r]&o,u=(0|this.words[r])-s<<e;this.words[r]=u|f,f=s>>>26-e}f&&(this.words[r]=f,this.length++)}if(0!==n){for(r=this.length-1;r>=0;r--)this.words[r+n]=this.words[r];for(r=0;r<n;r++)this.words[r]=0;this.length+=n}return this.strip()},o.prototype.ishln=function(t){return i(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,r,e){var n;i("number"==typeof t&&t>=0),n=r?(r-r%26)/26:0;var o=t%26,f=Math.min((t-o)/26,this.length),s=67108863^67108863>>>o<<o,u=e;if(n-=f,n=Math.max(0,n),u){for(var a=0;a<f;a++)u.words[a]=this.words[a];u.length=f}if(0===f);else if(this.length>f)for(this.length-=f,a=0;a<this.length;a++)this.words[a]=this.words[a+f];else this.words[0]=0,this.length=1;var h=0;for(a=this.length-1;a>=0&&(0!==h||a>=n);a--){var l=0|this.words[a];this.words[a]=h<<26-o|l>>>o,h=l&s}return u&&0!==h&&(u.words[u.length++]=h),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},o.prototype.ishrn=function(t,r,e){return i(0===this.negative),this.iushrn(t,r,e)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){i("number"==typeof t&&t>=0);var r=t%26,e=(t-r)/26,n=1<<r;return!(this.length<=e||!(this.words[e]&n))},o.prototype.imaskn=function(t){i("number"==typeof t&&t>=0);var r=t%26,e=(t-r)/26;if(i(0===this.negative,"imaskn works only with positive numbers"),this.length<=e)return this;if(0!==r&&e++,this.length=Math.min(e,this.length),0!==r){var n=67108863^67108863>>>r<<r;this.words[this.length-1]&=n}return this.strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return i("number"==typeof t),i(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var r=0;r<this.length&&this.words[r]>=67108864;r++)this.words[r]-=67108864,r===this.length-1?this.words[r+1]=1:this.words[r+1]++;return this.length=Math.max(this.length,r+1),this},o.prototype.isubn=function(t){if(i("number"==typeof t),i(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var r=0;r<this.length&&this.words[r]<0;r++)this.words[r]+=67108864,this.words[r+1]-=1;return this.strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,r,e){var n,o,f=t.length+e;this._expand(f);var s=0;for(n=0;n<t.length;n++){o=(0|this.words[n+e])+s;var u=(0|t.words[n])*r;s=((o-=67108863&u)>>26)-(u/67108864|0),this.words[n+e]=67108863&o}for(;n<this.length-e;n++)s=(o=(0|this.words[n+e])+s)>>26,this.words[n+e]=67108863&o;if(0===s)return this.strip();for(i(-1===s),s=0,n=0;n<this.length;n++)s=(o=-(0|this.words[n])+s)>>26,this.words[n]=67108863&o;return this.negative=1,this.strip()},o.prototype._wordDiv=function(t,r){var e=(this.length,t.length),i=this.clone(),n=t,f=0|n.words[n.length-1];0!=(e=26-this._countBits(f))&&(n=n.ushln(e),i.iushln(e),f=0|n.words[n.length-1]);var s,u=i.length-n.length;if("mod"!==r){(s=new o(null)).length=u+1,s.words=new Array(s.length);for(var a=0;a<s.length;a++)s.words[a]=0}var h=i.clone()._ishlnsubmul(n,1,u);0===h.negative&&(i=h,s&&(s.words[u]=1));for(var l=u-1;l>=0;l--){var c=67108864*(0|i.words[n.length+l])+(0|i.words[n.length+l-1]);for(c=Math.min(c/f|0,67108863),i._ishlnsubmul(n,c,l);0!==i.negative;)c--,i.negative=0,i._ishlnsubmul(n,1,l),i.isZero()||(i.negative^=1);s&&(s.words[l]=c)}return s&&s.strip(),i.strip(),"div"!==r&&0!==e&&i.iushrn(e),{div:s||null,mod:i}},o.prototype.divmod=function(t,r,e){return i(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(s=this.neg().divmod(t,r),"mod"!==r&&(n=s.div.neg()),"div"!==r&&(f=s.mod.neg(),e&&0!==f.negative&&f.iadd(t)),{div:n,mod:f}):0===this.negative&&0!==t.negative?(s=this.divmod(t.neg(),r),"mod"!==r&&(n=s.div.neg()),{div:n,mod:s.mod}):0!=(this.negative&t.negative)?(s=this.neg().divmod(t.neg(),r),"div"!==r&&(f=s.mod.neg(),e&&0!==f.negative&&f.isub(t)),{div:s.div,mod:f}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===r?{div:this.divn(t.words[0]),mod:null}:"mod"===r?{div:null,mod:new o(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modn(t.words[0]))}:this._wordDiv(t,r);var n,f,s},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var r=this.divmod(t);if(r.mod.isZero())return r.div;var e=0!==r.div.negative?r.mod.isub(t):r.mod,i=t.ushrn(1),n=t.andln(1),o=e.cmp(i);return o<0||1===n&&0===o?r.div:0!==r.div.negative?r.div.isubn(1):r.div.iaddn(1)},o.prototype.modn=function(t){i(t<=67108863);for(var r=(1<<26)%t,e=0,n=this.length-1;n>=0;n--)e=(r*e+(0|this.words[n]))%t;return e},o.prototype.idivn=function(t){i(t<=67108863);for(var r=0,e=this.length-1;e>=0;e--){var n=(0|this.words[e])+67108864*r;this.words[e]=n/t|0,r=n%t}return this.strip()},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){i(0===t.negative),i(!t.isZero());var r=this,e=t.clone();r=0!==r.negative?r.umod(t):r.clone();for(var n=new o(1),f=new o(0),s=new o(0),u=new o(1),a=0;r.isEven()&&e.isEven();)r.iushrn(1),e.iushrn(1),++a;for(var h=e.clone(),l=r.clone();!r.isZero();){for(var c=0,d=1;0==(r.words[0]&d)&&c<26;++c,d<<=1);if(c>0)for(r.iushrn(c);c-- >0;)(n.isOdd()||f.isOdd())&&(n.iadd(h),f.isub(l)),n.iushrn(1),f.iushrn(1);for(var p=0,m=1;0==(e.words[0]&m)&&p<26;++p,m<<=1);if(p>0)for(e.iushrn(p);p-- >0;)(s.isOdd()||u.isOdd())&&(s.iadd(h),u.isub(l)),s.iushrn(1),u.iushrn(1);r.cmp(e)>=0?(r.isub(e),n.isub(s),f.isub(u)):(e.isub(r),s.isub(n),u.isub(f))}return{a:s,b:u,gcd:e.iushln(a)}},o.prototype._invmp=function(t){i(0===t.negative),i(!t.isZero());var r=this,e=t.clone();r=0!==r.negative?r.umod(t):r.clone();for(var n,f=new o(1),s=new o(0),u=e.clone();r.cmpn(1)>0&&e.cmpn(1)>0;){for(var a=0,h=1;0==(r.words[0]&h)&&a<26;++a,h<<=1);if(a>0)for(r.iushrn(a);a-- >0;)f.isOdd()&&f.iadd(u),f.iushrn(1);for(var l=0,c=1;0==(e.words[0]&c)&&l<26;++l,c<<=1);if(l>0)for(e.iushrn(l);l-- >0;)s.isOdd()&&s.iadd(u),s.iushrn(1);r.cmp(e)>=0?(r.isub(e),f.isub(s)):(e.isub(r),s.isub(f))}return(n=0===r.cmpn(1)?f:s).cmpn(0)<0&&n.iadd(t),n},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var r=this.clone(),e=t.clone();r.negative=0,e.negative=0;for(var i=0;r.isEven()&&e.isEven();i++)r.iushrn(1),e.iushrn(1);for(;;){for(;r.isEven();)r.iushrn(1);for(;e.isEven();)e.iushrn(1);var n=r.cmp(e);if(n<0){var o=r;r=e,e=o}else if(0===n||0===e.cmpn(1))break;r.isub(e)}return e.iushln(i)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){i("number"==typeof t);var r=t%26,e=(t-r)/26,n=1<<r;if(this.length<=e)return this._expand(e+1),this.words[e]|=n,this;for(var o=n,f=e;0!==o&&f<this.length;f++){var s=0|this.words[f];o=(s+=o)>>>26,s&=67108863,this.words[f]=s}return 0!==o&&(this.words[f]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var r,e=t<0;if(0!==this.negative&&!e)return-1;if(0===this.negative&&e)return 1;if(this.strip(),this.length>1)r=1;else{e&&(t=-t),i(t<=67108863,"Number is too big");var n=0|this.words[0];r=n===t?0:n<t?-1:1}return 0!==this.negative?0|-r:r},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var r=this.ucmp(t);return 0!==this.negative?0|-r:r},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var r=0,e=this.length-1;e>=0;e--){var i=0|this.words[e],n=0|t.words[e];if(i!==n){i<n?r=-1:i>n&&(r=1);break}}return r},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new x(t)},o.prototype.toRed=function(t){return i(!this.red,"Already a number in reduction context"),i(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return i(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return i(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return i(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return i(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return i(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return i(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return i(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return i(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return i(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return i(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return i(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return i(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return i(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return i(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return i(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var g={k256:null,p224:null,p192:null,p25519:null};function v(t,r){this.name=t,this.p=new o(r,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function w(){v.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function b(){v.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function M(){v.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function A(){v.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function x(t){if("string"==typeof t){var r=o._prime(t);this.m=r.p,this.prime=r}else i(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function _(t){x.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}v.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},v.prototype.ireduce=function(t){var r,e=t;do{this.split(e,this.tmp),r=(e=(e=this.imulK(e)).iadd(this.tmp)).bitLength()}while(r>this.n);var i=r<this.n?-1:e.ucmp(this.p);return 0===i?(e.words[0]=0,e.length=1):i>0?e.isub(this.p):void 0!==e.strip?e.strip():e._strip(),e},v.prototype.split=function(t,r){t.iushrn(this.n,0,r)},v.prototype.imulK=function(t){return t.imul(this.k)},n(w,v),w.prototype.split=function(t,r){for(var e=4194303,i=Math.min(t.length,9),n=0;n<i;n++)r.words[n]=t.words[n];if(r.length=i,t.length<=9)return t.words[0]=0,void(t.length=1);var o=t.words[9];for(r.words[r.length++]=o&e,n=10;n<t.length;n++){var f=0|t.words[n];t.words[n-10]=(f&e)<<4|o>>>22,o=f}o>>>=22,t.words[n-10]=o,0===o&&t.length>10?t.length-=10:t.length-=9},w.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var r=0,e=0;e<t.length;e++){var i=0|t.words[e];r+=977*i,t.words[e]=67108863&r,r=64*i+(r/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},n(b,v),n(M,v),n(A,v),A.prototype.imulK=function(t){for(var r=0,e=0;e<t.length;e++){var i=19*(0|t.words[e])+r,n=67108863&i;i>>>=26,t.words[e]=n,r=i}return 0!==r&&(t.words[t.length++]=r),t},o._prime=function(t){if(g[t])return g[t];var r;if("k256"===t)r=new w;else if("p224"===t)r=new b;else if("p192"===t)r=new M;else{if("p25519"!==t)throw new Error("Unknown prime "+t);r=new A}return g[t]=r,r},x.prototype._verify1=function(t){i(0===t.negative,"red works only with positives"),i(t.red,"red works only with red numbers")},x.prototype._verify2=function(t,r){i(0==(t.negative|r.negative),"red works only with positives"),i(t.red&&t.red===r.red,"red works only with red numbers")},x.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},x.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},x.prototype.add=function(t,r){this._verify2(t,r);var e=t.add(r);return e.cmp(this.m)>=0&&e.isub(this.m),e._forceRed(this)},x.prototype.iadd=function(t,r){this._verify2(t,r);var e=t.iadd(r);return e.cmp(this.m)>=0&&e.isub(this.m),e},x.prototype.sub=function(t,r){this._verify2(t,r);var e=t.sub(r);return e.cmpn(0)<0&&e.iadd(this.m),e._forceRed(this)},x.prototype.isub=function(t,r){this._verify2(t,r);var e=t.isub(r);return e.cmpn(0)<0&&e.iadd(this.m),e},x.prototype.shl=function(t,r){return this._verify1(t),this.imod(t.ushln(r))},x.prototype.imul=function(t,r){return this._verify2(t,r),this.imod(t.imul(r))},x.prototype.mul=function(t,r){return this._verify2(t,r),this.imod(t.mul(r))},x.prototype.isqr=function(t){return this.imul(t,t.clone())},x.prototype.sqr=function(t){return this.mul(t,t)},x.prototype.sqrt=function(t){if(t.isZero())return t.clone();var r=this.m.andln(3);if(i(r%2==1),3===r){var e=this.m.add(new o(1)).iushrn(2);return this.pow(t,e)}for(var n=this.m.subn(1),f=0;!n.isZero()&&0===n.andln(1);)f++,n.iushrn(1);i(!n.isZero());var s=new o(1).toRed(this),u=s.redNeg(),a=this.m.subn(1).iushrn(1),h=this.m.bitLength();for(h=new o(2*h*h).toRed(this);0!==this.pow(h,a).cmp(u);)h.redIAdd(u);for(var l=this.pow(h,n),c=this.pow(t,n.addn(1).iushrn(1)),d=this.pow(t,n),p=f;0!==d.cmp(s);){for(var m=d,y=0;0!==m.cmp(s);y++)m=m.redSqr();i(y<p);var g=this.pow(l,new o(1).iushln(p-y-1));c=c.redMul(g),l=g.redSqr(),d=d.redMul(l),p=y}return c},x.prototype.invm=function(t){var r=t._invmp(this.m);return 0!==r.negative?(r.negative=0,this.imod(r).redNeg()):this.imod(r)},x.prototype.pow=function(t,r){if(r.isZero())return new o(1).toRed(this);if(0===r.cmpn(1))return t.clone();var e=new Array(16);e[0]=new o(1).toRed(this),e[1]=t;for(var i=2;i<e.length;i++)e[i]=this.mul(e[i-1],t);var n=e[0],f=0,s=0,u=r.bitLength()%26;for(0===u&&(u=26),i=r.length-1;i>=0;i--){for(var a=r.words[i],h=u-1;h>=0;h--){var l=a>>h&1;n!==e[0]&&(n=this.sqr(n)),0!==l||0!==f?(f<<=1,f|=l,(4==++s||0===i&&0===h)&&(n=this.mul(n,e[f]),s=0,f=0)):s=0}u=26}return n},x.prototype.convertTo=function(t){var r=t.umod(this.m);return r===t?r.clone():r},x.prototype.convertFrom=function(t){var r=t.clone();return r.red=null,r},o.mont=function(t){return new _(t)},n(_,x),_.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},_.prototype.convertFrom=function(t){var r=this.imod(t.mul(this.rinv));return r.red=null,r},_.prototype.imul=function(t,r){if(t.isZero()||r.isZero())return t.words[0]=0,t.length=1,t;var e=t.imul(r),i=e.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=e.isub(i).iushrn(this.shift),o=n;return n.cmp(this.m)>=0?o=n.isub(this.m):n.cmpn(0)<0&&(o=n.iadd(this.m)),o._forceRed(this)},_.prototype.mul=function(t,r){if(t.isZero()||r.isZero())return new o(0)._forceRed(this);var e=t.mul(r),i=e.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=e.isub(i).iushrn(this.shift),f=n;return n.cmp(this.m)>=0?f=n.isub(this.m):n.cmpn(0)<0&&(f=n.iadd(this.m)),f._forceRed(this)},_.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t=e.nmd(t),this)},31250:(t,r,e)=>{t.exports=e(2909)},2909:(t,r,e)=>{const i=e(2603),n=e(89817);var o=function(){};function f(t){return t.startsWith("int[")?"int256"+t.slice(3):"int"===t?"int256":t.startsWith("uint[")?"uint256"+t.slice(4):"uint"===t?"uint256":t.startsWith("fixed[")?"fixed128x128"+t.slice(5):"fixed"===t?"fixed128x128":t.startsWith("ufixed[")?"ufixed128x128"+t.slice(6):"ufixed"===t?"ufixed128x128":t}function s(t){return parseInt(/^\D+(\d+)$/.exec(t)[1],10)}function u(t){var r=/^\D+(\d+)x(\d+)$/.exec(t);return[parseInt(r[1],10),parseInt(r[2],10)]}function a(t){var r=t.match(/(.*)\[(.*?)\]$/);return r?""===r[2]?"dynamic":parseInt(r[2],10):null}function h(t){var r=typeof t;if("string"===r)return i.isHexPrefixed(t)?new n(i.stripHexPrefix(t),16):new n(t,10);if("number"===r)return new n(t);if(t.toArray)return t;throw new Error("Argument is not a number")}function l(t){var r=/^(\w+)\((.*)\)$/.exec(t);if(3!==r.length)throw new Error("Invalid method signature");var e=/^(.+)\):\((.+)$/.exec(r[2]);if(null!==e&&3===e.length)return{method:r[1],args:e[1].split(","),retargs:e[2].split(",")};var i=r[2].split(",");return 1===i.length&&""===i[0]&&(i=[]),{method:r[1],args:i}}function c(t,r){var e,o,f,l;if("address"===t)return c("uint160",h(r));if("bool"===t)return c("uint8",r?1:0);if("string"===t)return c("bytes",Buffer.from(r,"utf8"));if(y(t)){if(void 0===r.length)throw new Error("Not an array?");if("dynamic"!==(e=a(t))&&0!==e&&r.length>e)throw new Error("Elements exceed array size: "+e);for(l in f=[],t=t.slice(0,t.lastIndexOf("[")),"string"==typeof r&&(r=JSON.parse(r)),r)f.push(c(t,r[l]));if("dynamic"===e){var d=c("uint256",r.length);f.unshift(d)}return Buffer.concat(f)}if("bytes"===t)return r=Buffer.from(r),f=Buffer.concat([c("uint256",r.length),r]),r.length%32!=0&&(f=Buffer.concat([f,i.zeros(32-r.length%32)])),f;if(t.startsWith("bytes")){if((e=s(t))<1||e>32)throw new Error("Invalid bytes<N> width: "+e);return i.setLengthRight(r,32)}if(t.startsWith("uint")){if((e=s(t))%8||e<8||e>256)throw new Error("Invalid uint<N> width: "+e);if((o=h(r)).bitLength()>e)throw new Error("Supplied uint exceeds width: "+e+" vs "+o.bitLength());if(o<0)throw new Error("Supplied uint is negative");return o.toArrayLike(Buffer,"be",32)}if(t.startsWith("int")){if((e=s(t))%8||e<8||e>256)throw new Error("Invalid int<N> width: "+e);if((o=h(r)).bitLength()>e)throw new Error("Supplied int exceeds width: "+e+" vs "+o.bitLength());return o.toTwos(256).toArrayLike(Buffer,"be",32)}if(t.startsWith("ufixed")){if(e=u(t),(o=h(r))<0)throw new Error("Supplied ufixed is negative");return c("uint256",o.mul(new n(2).pow(new n(e[1]))))}if(t.startsWith("fixed"))return e=u(t),c("int256",h(r).mul(new n(2).pow(new n(e[1]))));throw new Error("Unsupported or invalid type: "+t)}function d(t,r,e){var i,o,f,s;if("string"==typeof t&&(t=p(t)),"address"===t.name)return d(t.rawType,r,e).toArrayLike(Buffer,"be",20).toString("hex");if("bool"===t.name)return d(t.rawType,r,e).toString()===new n(1).toString();if("string"===t.name){var u=d(t.rawType,r,e);return Buffer.from(u,"utf8").toString()}if(t.isArray){for(f=[],i=t.size,"dynamic"===t.size&&(e=d("uint256",r,e).toNumber(),i=d("uint256",r,e).toNumber(),e+=32),s=0;s<i;s++){var a=d(t.subArray,r,e);f.push(a),e+=t.subArray.memoryUsage}return f}if("bytes"===t.name)return e=d("uint256",r,e).toNumber(),i=d("uint256",r,e).toNumber(),r.slice(e+32,e+32+i);if(t.name.startsWith("bytes"))return r.slice(e,e+t.size);if(t.name.startsWith("uint")){if((o=new n(r.slice(e,e+32),16,"be")).bitLength()>t.size)throw new Error("Decoded int exceeds width: "+t.size+" vs "+o.bitLength());return o}if(t.name.startsWith("int")){if((o=new n(r.slice(e,e+32),16,"be").fromTwos(256)).bitLength()>t.size)throw new Error("Decoded uint exceeds width: "+t.size+" vs "+o.bitLength());return o}if(t.name.startsWith("ufixed")){if(i=new n(2).pow(new n(t.size[1])),!(o=d("uint256",r,e)).mod(i).isZero())throw new Error("Decimals not supported yet");return o.div(i)}if(t.name.startsWith("fixed")){if(i=new n(2).pow(new n(t.size[1])),!(o=d("int256",r,e)).mod(i).isZero())throw new Error("Decimals not supported yet");return o.div(i)}throw new Error("Unsupported or invalid type: "+t.name)}function p(t){var r,e,i;if(y(t)){r=a(t);var n=t.slice(0,t.lastIndexOf("["));return n=p(n),{isArray:!0,name:t,size:r,memoryUsage:"dynamic"===r?32:n.memoryUsage*r,subArray:n}}switch(t){case"address":i="uint160";break;case"bool":i="uint8";break;case"string":i="bytes"}if(e={rawType:i,name:t,memoryUsage:32},t.startsWith("bytes")&&"bytes"!==t||t.startsWith("uint")||t.startsWith("int")?e.size=s(t):(t.startsWith("ufixed")||t.startsWith("fixed"))&&(e.size=u(t)),t.startsWith("bytes")&&"bytes"!==t&&(e.size<1||e.size>32))throw new Error("Invalid bytes<N> width: "+e.size);if((t.startsWith("uint")||t.startsWith("int"))&&(e.size%8||e.size<8||e.size>256))throw new Error("Invalid int/uint<N> width: "+e.size);return e}function m(t){return"string"===t||"bytes"===t||"dynamic"===a(t)}function y(t){return t.lastIndexOf("]")===t.length-1}function g(t,r){return t.startsWith("address")||t.startsWith("bytes")?"0x"+r.toString("hex"):r.toString()}o.eventID=function(t,r){var e=t+"("+r.map(f).join(",")+")";return i.keccak256(Buffer.from(e))},o.methodID=function(t,r){return o.eventID(t,r).slice(0,4)},o.rawEncode=function(t,r){var e=[],i=[],n=0;t.forEach((function(t){if(y(t)){var r=a(t);n+="dynamic"!==r?32*r:32}else n+=32}));for(var o=0;o<t.length;o++){var s=f(t[o]),u=c(s,r[o]);m(s)?(e.push(c("uint256",n)),i.push(u),n+=u.length):e.push(u)}return Buffer.concat(e.concat(i))},o.rawDecode=function(t,r){var e=[];r=Buffer.from(r);for(var i=0,n=0;n<t.length;n++){var o=p(f(t[n])),s=d(o,r,i);i+=o.memoryUsage,e.push(s)}return e},o.simpleEncode=function(t){var r=Array.prototype.slice.call(arguments).slice(1),e=l(t);if(r.length!==e.args.length)throw new Error("Argument count mismatch");return Buffer.concat([o.methodID(e.method,e.args),o.rawEncode(e.args,r)])},o.simpleDecode=function(t,r){var e=l(t);if(!e.retargs)throw new Error("No return values in method");return o.rawDecode(e.retargs,r)},o.stringify=function(t,r){var e=[];for(var i in t){var n=t[i],o=r[i];o=/^[^\[]+\[.*\]$/.test(n)?o.map((function(t){return g(n,t)})).join(", "):g(n,o),e.push(o)}return e},o.solidityHexValue=function(t,r,e){var n,f;if(y(t)){var u=t.replace(/\[.*?\]/,"");if(!y(u)){var l=a(t);if("dynamic"!==l&&0!==l&&r.length>l)throw new Error("Elements exceed array size: "+l)}var c=r.map((function(t){return o.solidityHexValue(u,t,256)}));return Buffer.concat(c)}if("bytes"===t)return r;if("string"===t)return Buffer.from(r,"utf8");if("bool"===t){e=e||8;var d=Array(e/4).join("0");return Buffer.from(r?d+"1":d+"0","hex")}if("address"===t){var p=20;return e&&(p=e/8),i.setLengthLeft(r,p)}if(t.startsWith("bytes")){if((n=s(t))<1||n>32)throw new Error("Invalid bytes<N> width: "+n);return i.setLengthRight(r,n)}if(t.startsWith("uint")){if((n=s(t))%8||n<8||n>256)throw new Error("Invalid uint<N> width: "+n);if((f=h(r)).bitLength()>n)throw new Error("Supplied uint exceeds width: "+n+" vs "+f.bitLength());return e=e||n,f.toArrayLike(Buffer,"be",e/8)}if(t.startsWith("int")){if((n=s(t))%8||n<8||n>256)throw new Error("Invalid int<N> width: "+n);if((f=h(r)).bitLength()>n)throw new Error("Supplied int exceeds width: "+n+" vs "+f.bitLength());return e=e||n,f.toTwos(n).toArrayLike(Buffer,"be",e/8)}throw new Error("Unsupported or invalid type: "+t)},o.solidityPack=function(t,r){if(t.length!==r.length)throw new Error("Number of types are not matching the values");for(var e=[],i=0;i<t.length;i++){var n=f(t[i]),s=r[i];e.push(o.solidityHexValue(n,s,null))}return Buffer.concat(e)},o.soliditySHA3=function(t,r){return i.keccak256(o.solidityPack(t,r))},o.soliditySHA256=function(t,r){return i.sha256(o.solidityPack(t,r))},o.solidityRIPEMD160=function(t,r){return i.ripemd160(o.solidityPack(t,r),!0)},o.fromSerpent=function(t){for(var r,e=[],i=0;i<t.length;i++){var n=t[i];if("s"===n)e.push("bytes");else if("b"===n){for(var o="bytes",f=i+1;f<t.length&&(r=t[f])>="0"&&r<="9";)o+=t[f]-"0",f++;i=f-1,e.push(o)}else if("i"===n)e.push("int256");else{if("a"!==n)throw new Error("Unsupported or invalid type: "+n);e.push("int256[]")}}return e},o.toSerpent=function(t){for(var r=[],e=0;e<t.length;e++){var i=t[e];if("bytes"===i)r.push("s");else if(i.startsWith("bytes"))r.push("b"+s(i));else if("int256"===i)r.push("i");else{if("int256[]"!==i)throw new Error("Unsupported or invalid type: "+i);r.push("a")}}return r.join("")},t.exports=o},190:(t,r,e)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.importPublic=r.privateToPublic=r.privateToAddress=r.publicToAddress=r.pubToAddress=r.isValidPublic=r.isValidPrivate=r.isPrecompiled=r.generateAddress2=r.generateAddress=r.isValidChecksumAddress=r.toChecksumAddress=r.isZeroAddress=r.isValidAddress=r.zeroAddress=void 0;var i=e(48583),n=e(80884),o=e(13337),f=e(89817),s=e(50648),u=e(19806);r.zeroAddress=function(){var t=s.zeros(20);return s.bufferToHex(t)},r.isValidAddress=function(t){return/^0x[0-9a-fA-F]{40}$/.test(t)},r.isZeroAddress=function(t){return r.zeroAddress()===s.addHexPrefix(t)},r.toChecksumAddress=function(t,r){t=n.stripHexPrefix(t).toLowerCase();for(var e=void 0!==r?r.toString()+"0x":"",i=u.keccak(e+t).toString("hex"),o="0x",f=0;f<t.length;f++)parseInt(i[f],16)>=8?o+=t[f].toUpperCase():o+=t[f];return o},r.isValidChecksumAddress=function(t,e){return r.isValidAddress(t)&&r.toChecksumAddress(t,e)===t},r.generateAddress=function(t,r){t=s.toBuffer(t);var e=new f(r);return e.isZero()?u.rlphash([t,null]).slice(-20):u.rlphash([t,Buffer.from(e.toArray())]).slice(-20)},r.generateAddress2=function(t,r,e){var n=s.toBuffer(t),o=s.toBuffer(r),f=s.toBuffer(e);return i(20===n.length),i(32===o.length),u.keccak256(Buffer.concat([Buffer.from("ff","hex"),n,o,u.keccak256(f)])).slice(-20)},r.isPrecompiled=function(t){var r=s.unpad(t);return 1===r.length&&r[0]>=1&&r[0]<=8},r.isValidPrivate=function(t){return o.privateKeyVerify(t)},r.isValidPublic=function(t,r){return void 0===r&&(r=!1),64===t.length?o.publicKeyVerify(Buffer.concat([Buffer.from([4]),t])):!!r&&o.publicKeyVerify(t)},r.pubToAddress=function(t,r){return void 0===r&&(r=!1),t=s.toBuffer(t),r&&64!==t.length&&(t=o.publicKeyConvert(t,!1).slice(1)),i(64===t.length),u.keccak(t).slice(-20)},r.publicToAddress=r.pubToAddress,r.privateToAddress=function(t){return r.publicToAddress(r.privateToPublic(t))},r.privateToPublic=function(t){return t=s.toBuffer(t),o.publicKeyCreate(t,!1).slice(1)},r.importPublic=function(t){return 64!==(t=s.toBuffer(t)).length&&(t=o.publicKeyConvert(t,!1).slice(1)),t}},50648:(t,r,e)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.baToJSON=r.addHexPrefix=r.toUnsigned=r.fromSigned=r.bufferToHex=r.bufferToInt=r.toBuffer=r.stripZeros=r.unpad=r.setLengthRight=r.setLength=r.setLengthLeft=r.zeros=void 0;var i=e(80884),n=e(89817);r.zeros=function(t){return Buffer.allocUnsafe(t).fill(0)},r.setLengthLeft=function(t,e,i){void 0===i&&(i=!1);var n=r.zeros(e);return t=r.toBuffer(t),i?t.length<e?(t.copy(n),n):t.slice(0,e):t.length<e?(t.copy(n,e-t.length),n):t.slice(-e)},r.setLength=r.setLengthLeft,r.setLengthRight=function(t,e){return r.setLength(t,e,!0)},r.unpad=function(t){for(var r=(t=i.stripHexPrefix(t))[0];t.length>0&&"0"===r.toString();)r=(t=t.slice(1))[0];return t},r.stripZeros=r.unpad,r.toBuffer=function(t){if(!Buffer.isBuffer(t))if(Array.isArray(t))t=Buffer.from(t);else if("string"==typeof t){if(!i.isHexString(t))throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: "+t);t=Buffer.from(i.padToEven(i.stripHexPrefix(t)),"hex")}else if("number"==typeof t)t=i.intToBuffer(t);else if(null==t)t=Buffer.allocUnsafe(0);else if(n.isBN(t))t=t.toArrayLike(Buffer);else{if(!t.toArray)throw new Error("invalid type");t=Buffer.from(t.toArray())}return t},r.bufferToInt=function(t){return new n(r.toBuffer(t)).toNumber()},r.bufferToHex=function(t){return"0x"+(t=r.toBuffer(t)).toString("hex")},r.fromSigned=function(t){return new n(t).fromTwos(256)},r.toUnsigned=function(t){return Buffer.from(t.toTwos(256).toArray())},r.addHexPrefix=function(t){return"string"!=typeof t||i.isHexPrefixed(t)?t:"0x"+t},r.baToJSON=function(t){if(Buffer.isBuffer(t))return"0x"+t.toString("hex");if(t instanceof Array){for(var e=[],i=0;i<t.length;i++)e.push(r.baToJSON(t[i]));return e}}},7235:(t,r,e)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.KECCAK256_RLP=r.KECCAK256_RLP_S=r.KECCAK256_RLP_ARRAY=r.KECCAK256_RLP_ARRAY_S=r.KECCAK256_NULL=r.KECCAK256_NULL_S=r.TWO_POW256=r.MAX_INTEGER=void 0;var i=e(89817);r.MAX_INTEGER=new i("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",16),r.TWO_POW256=new i("10000000000000000000000000000000000000000000000000000000000000000",16),r.KECCAK256_NULL_S="c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",r.KECCAK256_NULL=Buffer.from(r.KECCAK256_NULL_S,"hex"),r.KECCAK256_RLP_ARRAY_S="1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",r.KECCAK256_RLP_ARRAY=Buffer.from(r.KECCAK256_RLP_ARRAY_S,"hex"),r.KECCAK256_RLP_S="56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",r.KECCAK256_RLP=Buffer.from(r.KECCAK256_RLP_S,"hex")},19806:(t,r,e)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.rlphash=r.ripemd160=r.sha256=r.keccak256=r.keccak=void 0;var i=e(82192),n=i.keccak224,o=i.keccak384,f=i.keccak256,s=i.keccak512,u=e(23482),a=e(80884),h=e(51675),l=e(50648);r.keccak=function(t,r){switch(void 0===r&&(r=256),t="string"!=typeof t||a.isHexString(t)?l.toBuffer(t):Buffer.from(t,"utf8"),r||(r=256),r){case 224:return n(t);case 256:return f(t);case 384:return o(t);case 512:return s(t);default:throw new Error("Invald algorithm: keccak"+r)}},r.keccak256=function(t){return r.keccak(t)},r.sha256=function(t){return t=l.toBuffer(t),u("sha256").update(t).digest()},r.ripemd160=function(t,r){t=l.toBuffer(t);var e=u("rmd160").update(t).digest();return!0===r?l.setLength(e,32):e},r.rlphash=function(t){return r.keccak(h.encode(t))}},2603:function(t,r,e){"use strict";var i=this&&this.__createBinding||(Object.create?function(t,r,e,i){void 0===i&&(i=e),Object.defineProperty(t,i,{enumerable:!0,get:function(){return r[e]}})}:function(t,r,e,i){void 0===i&&(i=e),t[i]=r[e]}),n=this&&this.__exportStar||function(t,r){for(var e in t)"default"===e||r.hasOwnProperty(e)||i(r,t,e)};Object.defineProperty(r,"__esModule",{value:!0}),r.secp256k1=r.rlp=r.BN=void 0;var o=e(13337);r.secp256k1=o;var f=e(80884),s=e(89817);r.BN=s;var u=e(51675);r.rlp=u,Object.assign(r,f),n(e(7235),r),n(e(190),r),n(e(19806),r),n(e(53696),r),n(e(50648),r),n(e(35861),r)},35861:(t,r,e)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.defineProperties=void 0;var i=e(48583),n=e(80884),o=e(51675),f=e(50648);r.defineProperties=function(t,r,e){if(t.raw=[],t._fields=[],t.toJSON=function(r){if(void 0===r&&(r=!1),r){var e={};return t._fields.forEach((function(r){e[r]="0x"+t[r].toString("hex")})),e}return f.baToJSON(t.raw)},t.serialize=function(){return o.encode(t.raw)},r.forEach((function(r,e){function n(){return t.raw[e]}function o(n){"00"!==(n=f.toBuffer(n)).toString("hex")||r.allowZero||(n=Buffer.allocUnsafe(0)),r.allowLess&&r.length?(n=f.stripZeros(n),i(r.length>=n.length,"The field "+r.name+" must not have more "+r.length+" bytes")):r.allowZero&&0===n.length||!r.length||i(r.length===n.length,"The field "+r.name+" must have byte length of "+r.length),t.raw[e]=n}t._fields.push(r.name),Object.defineProperty(t,r.name,{enumerable:!0,configurable:!0,get:n,set:o}),r.default&&(t[r.name]=r.default),r.alias&&Object.defineProperty(t,r.alias,{enumerable:!1,configurable:!0,set:o,get:n})})),e)if("string"==typeof e&&(e=Buffer.from(n.stripHexPrefix(e),"hex")),Buffer.isBuffer(e)&&(e=o.decode(e)),Array.isArray(e)){if(e.length>t._fields.length)throw new Error("wrong number of fields in data");e.forEach((function(r,e){t[t._fields[e]]=f.toBuffer(r)}))}else{if("object"!=typeof e)throw new Error("invalid data");var s=Object.keys(e);r.forEach((function(r){-1!==s.indexOf(r.name)&&(t[r.name]=e[r.name]),-1!==s.indexOf(r.alias)&&(t[r.alias]=e[r.alias])}))}}},13337:(t,r,e)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.ecdhUnsafe=r.ecdh=r.recover=r.verify=r.sign=r.signatureImportLax=r.signatureImport=r.signatureExport=r.signatureNormalize=r.publicKeyCombine=r.publicKeyTweakMul=r.publicKeyTweakAdd=r.publicKeyVerify=r.publicKeyConvert=r.publicKeyCreate=r.privateKeyTweakMul=r.privateKeyTweakAdd=r.privateKeyModInverse=r.privateKeyNegate=r.privateKeyImport=r.privateKeyExport=r.privateKeyVerify=void 0;var i=e(95053),n=e(87396),o=e(41488);r.privateKeyVerify=function(t){return 32===t.length&&i.privateKeyVerify(Uint8Array.from(t))},r.privateKeyExport=function(t,r){if(32!==t.length)throw new RangeError("private key length is invalid");var e=n.privateKeyExport(t,r);return o.privateKeyExport(t,e,r)},r.privateKeyImport=function(t){if(null!==(t=o.privateKeyImport(t))&&32===t.length&&r.privateKeyVerify(t))return t;throw new Error("couldn't import from DER format")},r.privateKeyNegate=function(t){return Buffer.from(i.privateKeyNegate(Uint8Array.from(t)))},r.privateKeyModInverse=function(t){if(32!==t.length)throw new Error("private key length is invalid");return Buffer.from(n.privateKeyModInverse(Uint8Array.from(t)))},r.privateKeyTweakAdd=function(t,r){return Buffer.from(i.privateKeyTweakAdd(Uint8Array.from(t),r))},r.privateKeyTweakMul=function(t,r){return Buffer.from(i.privateKeyTweakMul(Uint8Array.from(t),Uint8Array.from(r)))},r.publicKeyCreate=function(t,r){return Buffer.from(i.publicKeyCreate(Uint8Array.from(t),r))},r.publicKeyConvert=function(t,r){return Buffer.from(i.publicKeyConvert(Uint8Array.from(t),r))},r.publicKeyVerify=function(t){return(33===t.length||65===t.length)&&i.publicKeyVerify(Uint8Array.from(t))},r.publicKeyTweakAdd=function(t,r,e){return Buffer.from(i.publicKeyTweakAdd(Uint8Array.from(t),Uint8Array.from(r),e))},r.publicKeyTweakMul=function(t,r,e){return Buffer.from(i.publicKeyTweakMul(Uint8Array.from(t),Uint8Array.from(r),e))},r.publicKeyCombine=function(t,r){var e=[];return t.forEach((function(t){e.push(Uint8Array.from(t))})),Buffer.from(i.publicKeyCombine(e,r))},r.signatureNormalize=function(t){return Buffer.from(i.signatureNormalize(Uint8Array.from(t)))},r.signatureExport=function(t){return Buffer.from(i.signatureExport(Uint8Array.from(t)))},r.signatureImport=function(t){return Buffer.from(i.signatureImport(Uint8Array.from(t)))},r.signatureImportLax=function(t){if(0===t.length)throw new RangeError("signature length is invalid");var r=o.signatureImportLax(t);if(null===r)throw new Error("couldn't parse DER signature");return n.signatureImport(r)},r.sign=function(t,r,e){if(null===e)throw new TypeError("options should be an Object");var n=void 0;if(e){if(n={},null===e.data)throw new TypeError("options.data should be a Buffer");if(e.data){if(32!=e.data.length)throw new RangeError("options.data length is invalid");n.data=new Uint8Array(e.data)}if(null===e.noncefn)throw new TypeError("options.noncefn should be a Function");e.noncefn&&(n.noncefn=function(t,r,i,n,o){var f=null!=i?Buffer.from(i):null,s=null!=n?Buffer.from(n):null,u=Buffer.from("");return e.noncefn&&(u=e.noncefn(Buffer.from(t),Buffer.from(r),f,s,o)),new Uint8Array(u)})}var o=i.ecdsaSign(Uint8Array.from(t),Uint8Array.from(r),n);return{signature:Buffer.from(o.signature),recovery:o.recid}},r.verify=function(t,r,e){return i.ecdsaVerify(Uint8Array.from(r),Uint8Array.from(t),e)},r.recover=function(t,r,e,n){return Buffer.from(i.ecdsaRecover(Uint8Array.from(r),e,Uint8Array.from(t),n))},r.ecdh=function(t,r){return Buffer.from(i.ecdh(Uint8Array.from(t),Uint8Array.from(r),{}))},r.ecdhUnsafe=function(t,r,e){if(33!==t.length&&65!==t.length)throw new RangeError("public key length is invalid");if(32!==r.length)throw new RangeError("private key length is invalid");return Buffer.from(n.ecdhUnsafe(Uint8Array.from(t),Uint8Array.from(r),e))}},41488:(t,r)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0});var e=Buffer.from([48,129,211,2,1,1,4,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,129,133,48,129,130,2,1,1,48,44,6,7,42,134,72,206,61,1,1,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,252,47,48,6,4,1,0,4,1,7,4,33,2,121,190,102,126,249,220,187,172,85,160,98,149,206,135,11,7,2,155,252,219,45,206,40,217,89,242,129,91,22,248,23,152,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,186,174,220,230,175,72,160,59,191,210,94,140,208,54,65,65,2,1,1,161,36,3,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),i=Buffer.from([48,130,1,19,2,1,1,4,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,129,165,48,129,162,2,1,1,48,44,6,7,42,134,72,206,61,1,1,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,252,47,48,6,4,1,0,4,1,7,4,65,4,121,190,102,126,249,220,187,172,85,160,98,149,206,135,11,7,2,155,252,219,45,206,40,217,89,242,129,91,22,248,23,152,72,58,218,119,38,163,196,101,93,164,251,252,14,17,8,168,253,23,180,72,166,133,84,25,156,71,208,143,251,16,212,184,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,186,174,220,230,175,72,160,59,191,210,94,140,208,54,65,65,2,1,1,161,68,3,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);r.privateKeyExport=function(t,r,n){void 0===n&&(n=!0);var o=Buffer.from(n?e:i);return t.copy(o,n?8:9),r.copy(o,n?181:214),o},r.privateKeyImport=function(t){var r=t.length,e=0;if(r<e+1||48!==t[e])return null;if(r<(e+=1)+1||!(128&t[e]))return null;var i=127&t[e];if(i<1||i>2)return null;if(r<(e+=1)+i)return null;var n=t[e+i-1]|(i>1?t[e+i-2]<<8:0);return r<(e+=i)+n||r<e+3||2!==t[e]||1!==t[e+1]||1!==t[e+2]||r<(e+=3)+2||4!==t[e]||t[e+1]>32||r<e+2+t[e+1]?null:t.slice(e+2,e+2+t[e+1])},r.signatureImportLax=function(t){var r=Buffer.alloc(32,0),e=Buffer.alloc(32,0),i=t.length,n=0;if(48!==t[n++])return null;var o=t[n++];if(128&o&&(n+=o-128)>i)return null;if(2!==t[n++])return null;var f=t[n++];if(128&f){if(n+(o=f-128)>i)return null;for(;o>0&&0===t[n];n+=1,o-=1);for(f=0;o>0;n+=1,o-=1)f=(f<<8)+t[n]}if(f>i-n)return null;var s=n;if(n+=f,2!==t[n++])return null;var u=t[n++];if(128&u){if(n+(o=u-128)>i)return null;for(;o>0&&0===t[n];n+=1,o-=1);for(u=0;o>0;n+=1,o-=1)u=(u<<8)+t[n]}if(u>i-n)return null;var a=n;for(n+=u;f>0&&0===t[s];f-=1,s+=1);if(f>32)return null;var h=t.slice(s,s+f);for(h.copy(r,32-h.length);u>0&&0===t[a];u-=1,a+=1);if(u>32)return null;var l=t.slice(a,a+u);return l.copy(e,32-l.length),{r,s:e}}},87396:(t,r,e)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0});var i=e(89817),n=new(0,e(86266).ec)("secp256k1"),o=n.curve;r.privateKeyExport=function(t,r){void 0===r&&(r=!0);var e=new i(t);if(e.ucmp(o.n)>=0)throw new Error("couldn't export to DER format");var s=n.g.mul(e);return f(s.getX(),s.getY(),r)},r.privateKeyModInverse=function(t){var r=new i(t);if(r.ucmp(o.n)>=0||r.isZero())throw new Error("private key range is invalid");return r.invm(o.n).toArrayLike(Buffer,"be",32)},r.signatureImport=function(t){var r=new i(t.r);r.ucmp(o.n)>=0&&(r=new i(0));var e=new i(t.s);return e.ucmp(o.n)>=0&&(e=new i(0)),Buffer.concat([r.toArrayLike(Buffer,"be",32),e.toArrayLike(Buffer,"be",32)])},r.ecdhUnsafe=function(t,r,e){void 0===e&&(e=!0);var s=n.keyFromPublic(t),u=new i(r);if(u.ucmp(o.n)>=0||u.isZero())throw new Error("scalar was invalid (zero or overflow)");var a=s.pub.mul(u);return f(a.getX(),a.getY(),e)};var f=function(t,r,e){var i;return e?((i=Buffer.alloc(33))[0]=r.isOdd()?3:2,t.toArrayLike(Buffer,"be",32).copy(i,1)):((i=Buffer.alloc(65))[0]=4,t.toArrayLike(Buffer,"be",32).copy(i,1),r.toArrayLike(Buffer,"be",32).copy(i,33)),i}},53696:(t,r,e)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.hashPersonalMessage=r.isValidSignature=r.fromRpcSig=r.toRpcSig=r.ecrecover=r.ecsign=void 0;var i=e(13337),n=e(89817),o=e(50648),f=e(19806);function s(t,r){return r?t-(2*r+35):t-27}function u(t){return 0===t||1===t}r.ecsign=function(t,r,e){var n=i.sign(t,r),o=n.recovery;return{r:n.signature.slice(0,32),s:n.signature.slice(32,64),v:e?o+(2*e+35):o+27}},r.ecrecover=function(t,r,e,n,f){var a=Buffer.concat([o.setLength(e,32),o.setLength(n,32)],64),h=s(r,f);if(!u(h))throw new Error("Invalid signature v value");var l=i.recover(t,a,h);return i.publicKeyConvert(l,!1).slice(1)},r.toRpcSig=function(t,r,e,i){if(!u(s(t,i)))throw new Error("Invalid signature v value");return o.bufferToHex(Buffer.concat([o.setLengthLeft(r,32),o.setLengthLeft(e,32),o.toBuffer(t)]))},r.fromRpcSig=function(t){var r=o.toBuffer(t);if(65!==r.length)throw new Error("Invalid signature length");var e=r[64];return e<27&&(e+=27),{v:e,r:r.slice(0,32),s:r.slice(32,64)}},r.isValidSignature=function(t,r,e,i,o){void 0===i&&(i=!0);var f=new n("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0",16),a=new n("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",16);if(32!==r.length||32!==e.length)return!1;if(!u(s(t,o)))return!1;var h=new n(r),l=new n(e);return!(h.isZero()||h.gt(a)||l.isZero()||l.gt(a)||i&&1===l.cmp(f))},r.hashPersonalMessage=function(t){var r=Buffer.from("Ethereum Signed Message:\n"+t.length.toString(),"utf-8");return f.keccak(Buffer.concat([r,t]))}},17499:(t,r,e)=>{"use strict";var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n=e(82192),o=n.keccak224,f=n.keccak384,s=n.keccak256,u=n.keccak512,a=e(35525),h=e(48583),l=e(51675),c=e(89817),d=e(23482),p=e(89509).Buffer;Object.assign(r,e(80884)),r.MAX_INTEGER=new c("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",16),r.TWO_POW256=new c("10000000000000000000000000000000000000000000000000000000000000000",16),r.KECCAK256_NULL_S="c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",r.SHA3_NULL_S=r.KECCAK256_NULL_S,r.KECCAK256_NULL=p.from(r.KECCAK256_NULL_S,"hex"),r.SHA3_NULL=r.KECCAK256_NULL,r.KECCAK256_RLP_ARRAY_S="1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",r.SHA3_RLP_ARRAY_S=r.KECCAK256_RLP_ARRAY_S,r.KECCAK256_RLP_ARRAY=p.from(r.KECCAK256_RLP_ARRAY_S,"hex"),r.SHA3_RLP_ARRAY=r.KECCAK256_RLP_ARRAY,r.KECCAK256_RLP_S="56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",r.SHA3_RLP_S=r.KECCAK256_RLP_S,r.KECCAK256_RLP=p.from(r.KECCAK256_RLP_S,"hex"),r.SHA3_RLP=r.KECCAK256_RLP,r.BN=c,r.rlp=l,r.secp256k1=a,r.zeros=function(t){return p.allocUnsafe(t).fill(0)},r.zeroAddress=function(){var t=r.zeros(20);return r.bufferToHex(t)},r.setLengthLeft=r.setLength=function(t,e,i){var n=r.zeros(e);return t=r.toBuffer(t),i?t.length<e?(t.copy(n),n):t.slice(0,e):t.length<e?(t.copy(n,e-t.length),n):t.slice(-e)},r.setLengthRight=function(t,e){return r.setLength(t,e,!0)},r.unpad=r.stripZeros=function(t){for(var e=(t=r.stripHexPrefix(t))[0];t.length>0&&"0"===e.toString();)e=(t=t.slice(1))[0];return t},r.toBuffer=function(t){if(!p.isBuffer(t))if(Array.isArray(t))t=p.from(t);else if("string"==typeof t)t=r.isHexString(t)?p.from(r.padToEven(r.stripHexPrefix(t)),"hex"):p.from(t);else if("number"==typeof t)t=r.intToBuffer(t);else if(null==t)t=p.allocUnsafe(0);else if(c.isBN(t))t=t.toArrayLike(p);else{if(!t.toArray)throw new Error("invalid type");t=p.from(t.toArray())}return t},r.bufferToInt=function(t){return new c(r.toBuffer(t)).toNumber()},r.bufferToHex=function(t){return"0x"+(t=r.toBuffer(t)).toString("hex")},r.fromSigned=function(t){return new c(t).fromTwos(256)},r.toUnsigned=function(t){return p.from(t.toTwos(256).toArray())},r.keccak=function(t,e){switch(t=r.toBuffer(t),e||(e=256),e){case 224:return o(t);case 256:return s(t);case 384:return f(t);case 512:return u(t);default:throw new Error("Invald algorithm: keccak"+e)}},r.keccak256=function(t){return r.keccak(t)},r.sha3=r.keccak,r.sha256=function(t){return t=r.toBuffer(t),d("sha256").update(t).digest()},r.ripemd160=function(t,e){t=r.toBuffer(t);var i=d("rmd160").update(t).digest();return!0===e?r.setLength(i,32):i},r.rlphash=function(t){return r.keccak(l.encode(t))},r.isValidPrivate=function(t){return a.privateKeyVerify(t)},r.isValidPublic=function(t,r){return 64===t.length?a.publicKeyVerify(p.concat([p.from([4]),t])):!!r&&a.publicKeyVerify(t)},r.pubToAddress=r.publicToAddress=function(t,e){return t=r.toBuffer(t),e&&64!==t.length&&(t=a.publicKeyConvert(t,!1).slice(1)),h(64===t.length),r.keccak(t).slice(-20)};var m=r.privateToPublic=function(t){return t=r.toBuffer(t),a.publicKeyCreate(t,!1).slice(1)};r.importPublic=function(t){return 64!==(t=r.toBuffer(t)).length&&(t=a.publicKeyConvert(t,!1).slice(1)),t},r.ecsign=function(t,r){var e=a.sign(t,r),i={};return i.r=e.signature.slice(0,32),i.s=e.signature.slice(32,64),i.v=e.recovery+27,i},r.hashPersonalMessage=function(t){var e=r.toBuffer("Ethereum Signed Message:\n"+t.length.toString());return r.keccak(p.concat([e,t]))},r.ecrecover=function(t,e,i,n){var o=p.concat([r.setLength(i,32),r.setLength(n,32)],64),f=e-27;if(0!==f&&1!==f)throw new Error("Invalid signature v value");var s=a.recover(t,o,f);return a.publicKeyConvert(s,!1).slice(1)},r.toRpcSig=function(t,e,i){if(27!==t&&28!==t)throw new Error("Invalid recovery id");return r.bufferToHex(p.concat([r.setLengthLeft(e,32),r.setLengthLeft(i,32),r.toBuffer(t-27)]))},r.fromRpcSig=function(t){if(65!==(t=r.toBuffer(t)).length)throw new Error("Invalid signature length");var e=t[64];return e<27&&(e+=27),{v:e,r:t.slice(0,32),s:t.slice(32,64)}},r.privateToAddress=function(t){return r.publicToAddress(m(t))},r.isValidAddress=function(t){return/^0x[0-9a-fA-F]{40}$/.test(t)},r.isZeroAddress=function(t){return r.zeroAddress()===r.addHexPrefix(t)},r.toChecksumAddress=function(t){t=r.stripHexPrefix(t).toLowerCase();for(var e=r.keccak(t).toString("hex"),i="0x",n=0;n<t.length;n++)parseInt(e[n],16)>=8?i+=t[n].toUpperCase():i+=t[n];return i},r.isValidChecksumAddress=function(t){return r.isValidAddress(t)&&r.toChecksumAddress(t)===t},r.generateAddress=function(t,e){return t=r.toBuffer(t),e=(e=new c(e)).isZero()?null:p.from(e.toArray()),r.rlphash([t,e]).slice(-20)},r.isPrecompiled=function(t){var e=r.unpad(t);return 1===e.length&&e[0]>=1&&e[0]<=8},r.addHexPrefix=function(t){return"string"!=typeof t||r.isHexPrefixed(t)?t:"0x"+t},r.isValidSignature=function(t,r,e,i){var n=new c("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0",16),o=new c("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",16);return!(32!==r.length||32!==e.length||27!==t&&28!==t||(r=new c(r),e=new c(e),r.isZero()||r.gt(o)||e.isZero()||e.gt(o)||!1===i&&1===new c(e).cmp(n)))},r.baToJSON=function(t){if(p.isBuffer(t))return"0x"+t.toString("hex");if(t instanceof Array){for(var e=[],i=0;i<t.length;i++)e.push(r.baToJSON(t[i]));return e}},r.defineProperties=function(t,e,n){if(t.raw=[],t._fields=[],t.toJSON=function(e){if(e){var i={};return t._fields.forEach((function(r){i[r]="0x"+t[r].toString("hex")})),i}return r.baToJSON(this.raw)},t.serialize=function(){return l.encode(t.raw)},e.forEach((function(e,i){function n(){return t.raw[i]}function o(n){"00"!==(n=r.toBuffer(n)).toString("hex")||e.allowZero||(n=p.allocUnsafe(0)),e.allowLess&&e.length?(n=r.stripZeros(n),h(e.length>=n.length,"The field "+e.name+" must not have more "+e.length+" bytes")):e.allowZero&&0===n.length||!e.length||h(e.length===n.length,"The field "+e.name+" must have byte length of "+e.length),t.raw[i]=n}t._fields.push(e.name),Object.defineProperty(t,e.name,{enumerable:!0,configurable:!0,get:n,set:o}),e.default&&(t[e.name]=e.default),e.alias&&Object.defineProperty(t,e.alias,{enumerable:!1,configurable:!0,set:o,get:n})})),n)if("string"==typeof n&&(n=p.from(r.stripHexPrefix(n),"hex")),p.isBuffer(n)&&(n=l.decode(n)),Array.isArray(n)){if(n.length>t._fields.length)throw new Error("wrong number of fields in data");n.forEach((function(e,i){t[t._fields[i]]=r.toBuffer(e)}))}else{if("object"!==(void 0===n?"undefined":i(n)))throw new Error("invalid data");var o=Object.keys(n);e.forEach((function(r){-1!==o.indexOf(r.name)&&(t[r.name]=n[r.name]),-1!==o.indexOf(r.alias)&&(t[r.alias]=n[r.alias])}))}}},35525:(t,r,e)=>{"use strict";var i=e(95053),n=e(33780),o=e(1029),f=function(t){return 32===t.length&&i.privateKeyVerify(Uint8Array.from(t))};t.exports={privateKeyVerify:f,privateKeyExport:function(t,r){if(32!==t.length)throw new RangeError("private key length is invalid");var e=n.privateKeyExport(t,r);return o.privateKeyExport(t,e,r)},privateKeyImport:function(t){if(null!==(t=o.privateKeyImport(t))&&32===t.length&&f(t))return t;throw new Error("couldn't import from DER format")},privateKeyNegate:function(t){return Buffer.from(i.privateKeyNegate(Uint8Array.from(t)))},privateKeyModInverse:function(t){if(32!==t.length)throw new Error("private key length is invalid");return Buffer.from(n.privateKeyModInverse(Uint8Array.from(t)))},privateKeyTweakAdd:function(t,r){return Buffer.from(i.privateKeyTweakAdd(Uint8Array.from(t),r))},privateKeyTweakMul:function(t,r){return Buffer.from(i.privateKeyTweakMul(Uint8Array.from(t),Uint8Array.from(r)))},publicKeyCreate:function(t,r){return Buffer.from(i.publicKeyCreate(Uint8Array.from(t),r))},publicKeyConvert:function(t,r){return Buffer.from(i.publicKeyConvert(Uint8Array.from(t),r))},publicKeyVerify:function(t){return(33===t.length||65===t.length)&&i.publicKeyVerify(Uint8Array.from(t))},publicKeyTweakAdd:function(t,r,e){return Buffer.from(i.publicKeyTweakAdd(Uint8Array.from(t),Uint8Array.from(r),e))},publicKeyTweakMul:function(t,r,e){return Buffer.from(i.publicKeyTweakMul(Uint8Array.from(t),Uint8Array.from(r),e))},publicKeyCombine:function(t,r){var e=[];return t.forEach((function(t){e.push(Uint8Array.from(t))})),Buffer.from(i.publicKeyCombine(e,r))},signatureNormalize:function(t){return Buffer.from(i.signatureNormalize(Uint8Array.from(t)))},signatureExport:function(t){return Buffer.from(i.signatureExport(Uint8Array.from(t)))},signatureImport:function(t){return Buffer.from(i.signatureImport(Uint8Array.from(t)))},signatureImportLax:function(t){if(0===t.length)throw new RangeError("signature length is invalid");var r=o.signatureImportLax(t);if(null===r)throw new Error("couldn't parse DER signature");return n.signatureImport(r)},sign:function(t,r,e){if(null===e)throw new TypeError("options should be an Object");var n=void 0;if(e){if(n={},null===e.data)throw new TypeError("options.data should be a Buffer");if(e.data){if(32!==e.data.length)throw new RangeError("options.data length is invalid");n.data=new Uint8Array(e.data)}if(null===e.noncefn)throw new TypeError("options.noncefn should be a Function");e.noncefn&&(n.noncefn=function(t,r,i,n,o){var f=null!=i?Buffer.from(i):null,s=null!=n?Buffer.from(n):null,u=Buffer.from("");return e.noncefn&&(u=e.noncefn(Buffer.from(t),Buffer.from(r),f,s,o)),Uint8Array.from(u)})}var o=i.ecdsaSign(Uint8Array.from(t),Uint8Array.from(r),n);return{signature:Buffer.from(o.signature),recovery:o.recid}},verify:function(t,r,e){return i.ecdsaVerify(Uint8Array.from(r),Uint8Array.from(t),e)},recover:function(t,r,e,n){return Buffer.from(i.ecdsaRecover(Uint8Array.from(r),e,Uint8Array.from(t),n))},ecdh:function(t,r){return Buffer.from(i.ecdh(Uint8Array.from(t),Uint8Array.from(r),{}))},ecdhUnsafe:function(t,r,e){if(33!==t.length&&65!==t.length)throw new RangeError("public key length is invalid");if(32!==r.length)throw new RangeError("private key length is invalid");return Buffer.from(n.ecdhUnsafe(Uint8Array.from(t),Uint8Array.from(r),e))}}},1029:(t,r)=>{"use strict";var e=Buffer.from([48,129,211,2,1,1,4,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,129,133,48,129,130,2,1,1,48,44,6,7,42,134,72,206,61,1,1,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,252,47,48,6,4,1,0,4,1,7,4,33,2,121,190,102,126,249,220,187,172,85,160,98,149,206,135,11,7,2,155,252,219,45,206,40,217,89,242,129,91,22,248,23,152,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,186,174,220,230,175,72,160,59,191,210,94,140,208,54,65,65,2,1,1,161,36,3,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),i=Buffer.from([48,130,1,19,2,1,1,4,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,129,165,48,129,162,2,1,1,48,44,6,7,42,134,72,206,61,1,1,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,252,47,48,6,4,1,0,4,1,7,4,65,4,121,190,102,126,249,220,187,172,85,160,98,149,206,135,11,7,2,155,252,219,45,206,40,217,89,242,129,91,22,248,23,152,72,58,218,119,38,163,196,101,93,164,251,252,14,17,8,168,253,23,180,72,166,133,84,25,156,71,208,143,251,16,212,184,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,186,174,220,230,175,72,160,59,191,210,94,140,208,54,65,65,2,1,1,161,68,3,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);r.privateKeyExport=function(t,r,n){var o=Buffer.from(n?e:i);return t.copy(o,n?8:9),r.copy(o,n?181:214),o},r.privateKeyImport=function(t){var r=t.length,e=0;if(r<e+1||48!==t[e])return null;if(r<(e+=1)+1||!(128&t[e]))return null;var i=127&t[e];if(i<1||i>2)return null;if(r<(e+=1)+i)return null;var n=t[e+i-1]|(i>1?t[e+i-2]<<8:0);return r<(e+=i)+n||r<e+3||2!==t[e]||1!==t[e+1]||1!==t[e+2]||r<(e+=3)+2||4!==t[e]||t[e+1]>32||r<e+2+t[e+1]?null:t.slice(e+2,e+2+t[e+1])},r.signatureImportLax=function(t){var r=Buffer.alloc(32,0),e=Buffer.alloc(32,0),i=t.length,n=0;if(48!==t[n++])return null;var o=t[n++];if(128&o&&(n+=o-128)>i)return null;if(2!==t[n++])return null;var f=t[n++];if(128&f){if(n+(o=f-128)>i)return null;for(;o>0&&0===t[n];n+=1,o-=1);for(f=0;o>0;n+=1,o-=1)f=(f<<8)+t[n]}if(f>i-n)return null;var s=n;if(n+=f,2!==t[n++])return null;var u=t[n++];if(128&u){if(n+(o=u-128)>i)return null;for(;o>0&&0===t[n];n+=1,o-=1);for(u=0;o>0;n+=1,o-=1)u=(u<<8)+t[n]}if(u>i-n)return null;var a=n;for(n+=u;f>0&&0===t[s];f-=1,s+=1);if(f>32)return null;var h=t.slice(s,s+f);for(h.copy(r,32-h.length);u>0&&0===t[a];u-=1,a+=1);if(u>32)return null;var l=t.slice(a,a+u);return l.copy(e,32-l.length),{r,s:e}}},33780:(t,r,e)=>{"use strict";var i=e(89817),n=new(0,e(86266).ec)("secp256k1"),o=n.curve;r.privateKeyExport=function(t,r){var e=new i(t);if(e.ucmp(o.n)>=0)throw new Error("couldn't export to DER format");var s=n.g.mul(e);return f(s.getX(),s.getY(),r)},r.privateKeyModInverse=function(t){var r=new i(t);if(r.ucmp(o.n)>=0||r.isZero())throw new Error("private key range is invalid");return r.invm(o.n).toArrayLike(Buffer,"be",32)},r.signatureImport=function(t){var r=new i(t.r);r.ucmp(o.n)>=0&&(r=new i(0));var e=new i(t.s);return e.ucmp(o.n)>=0&&(e=new i(0)),Buffer.concat([r.toArrayLike(Buffer,"be",32),e.toArrayLike(Buffer,"be",32)])},r.ecdhUnsafe=function(t,r,e){var s=n.keyFromPublic(t),u=new i(r);if(u.ucmp(o.n)>=0||u.isZero())throw new Error("scalar was invalid (zero or overflow)");var a=s.pub.mul(u);return f(a.getX(),a.getY(),e)};var f=function(t,r,e){var i=void 0;return e?((i=Buffer.alloc(33))[0]=r.isOdd()?3:2,t.toArrayLike(Buffer,"be",32).copy(i,1)):((i=Buffer.alloc(65))[0]=4,t.toArrayLike(Buffer,"be",32).copy(i,1),r.toArrayLike(Buffer,"be",32).copy(i,33)),i}},59215:(t,r,e)=>{!function(t){"use strict";var r=function(t){var r,e=new Float64Array(16);if(t)for(r=0;r<t.length;r++)e[r]=t[r];return e},i=function(){throw new Error("no PRNG")},n=new Uint8Array(16),o=new Uint8Array(32);o[0]=9;var f=r(),s=r([1]),u=r([56129,1]),a=r([30883,4953,19914,30187,55467,16705,2637,112,59544,30585,16505,36039,65139,11119,27886,20995]),h=r([61785,9906,39828,60374,45398,33411,5274,224,53552,61171,33010,6542,64743,22239,55772,9222]),l=r([54554,36645,11616,51542,42930,38181,51040,26924,56412,64982,57905,49316,21502,52590,14035,8553]),c=r([26200,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214]),d=r([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);function p(t,r,e,i){t[r]=e>>24&255,t[r+1]=e>>16&255,t[r+2]=e>>8&255,t[r+3]=255&e,t[r+4]=i>>24&255,t[r+5]=i>>16&255,t[r+6]=i>>8&255,t[r+7]=255&i}function m(t,r,e,i,n){var o,f=0;for(o=0;o<n;o++)f|=t[r+o]^e[i+o];return(1&f-1>>>8)-1}function y(t,r,e,i){return m(t,r,e,i,16)}function g(t,r,e,i){return m(t,r,e,i,32)}function v(t,r,e,i){!function(t,r,e,i){for(var n,o=255&i[0]|(255&i[1])<<8|(255&i[2])<<16|(255&i[3])<<24,f=255&e[0]|(255&e[1])<<8|(255&e[2])<<16|(255&e[3])<<24,s=255&e[4]|(255&e[5])<<8|(255&e[6])<<16|(255&e[7])<<24,u=255&e[8]|(255&e[9])<<8|(255&e[10])<<16|(255&e[11])<<24,a=255&e[12]|(255&e[13])<<8|(255&e[14])<<16|(255&e[15])<<24,h=255&i[4]|(255&i[5])<<8|(255&i[6])<<16|(255&i[7])<<24,l=255&r[0]|(255&r[1])<<8|(255&r[2])<<16|(255&r[3])<<24,c=255&r[4]|(255&r[5])<<8|(255&r[6])<<16|(255&r[7])<<24,d=255&r[8]|(255&r[9])<<8|(255&r[10])<<16|(255&r[11])<<24,p=255&r[12]|(255&r[13])<<8|(255&r[14])<<16|(255&r[15])<<24,m=255&i[8]|(255&i[9])<<8|(255&i[10])<<16|(255&i[11])<<24,y=255&e[16]|(255&e[17])<<8|(255&e[18])<<16|(255&e[19])<<24,g=255&e[20]|(255&e[21])<<8|(255&e[22])<<16|(255&e[23])<<24,v=255&e[24]|(255&e[25])<<8|(255&e[26])<<16|(255&e[27])<<24,w=255&e[28]|(255&e[29])<<8|(255&e[30])<<16|(255&e[31])<<24,b=255&i[12]|(255&i[13])<<8|(255&i[14])<<16|(255&i[15])<<24,M=o,A=f,x=s,_=u,B=a,E=h,k=l,S=c,K=d,U=p,T=m,L=y,P=g,C=v,R=w,I=b,N=0;N<20;N+=2)M^=(n=(P^=(n=(K^=(n=(B^=(n=M+P|0)<<7|n>>>25)+M|0)<<9|n>>>23)+B|0)<<13|n>>>19)+K|0)<<18|n>>>14,E^=(n=(A^=(n=(C^=(n=(U^=(n=E+A|0)<<7|n>>>25)+E|0)<<9|n>>>23)+U|0)<<13|n>>>19)+C|0)<<18|n>>>14,T^=(n=(k^=(n=(x^=(n=(R^=(n=T+k|0)<<7|n>>>25)+T|0)<<9|n>>>23)+R|0)<<13|n>>>19)+x|0)<<18|n>>>14,I^=(n=(L^=(n=(S^=(n=(_^=(n=I+L|0)<<7|n>>>25)+I|0)<<9|n>>>23)+_|0)<<13|n>>>19)+S|0)<<18|n>>>14,M^=(n=(_^=(n=(x^=(n=(A^=(n=M+_|0)<<7|n>>>25)+M|0)<<9|n>>>23)+A|0)<<13|n>>>19)+x|0)<<18|n>>>14,E^=(n=(B^=(n=(S^=(n=(k^=(n=E+B|0)<<7|n>>>25)+E|0)<<9|n>>>23)+k|0)<<13|n>>>19)+S|0)<<18|n>>>14,T^=(n=(U^=(n=(K^=(n=(L^=(n=T+U|0)<<7|n>>>25)+T|0)<<9|n>>>23)+L|0)<<13|n>>>19)+K|0)<<18|n>>>14,I^=(n=(R^=(n=(C^=(n=(P^=(n=I+R|0)<<7|n>>>25)+I|0)<<9|n>>>23)+P|0)<<13|n>>>19)+C|0)<<18|n>>>14;M=M+o|0,A=A+f|0,x=x+s|0,_=_+u|0,B=B+a|0,E=E+h|0,k=k+l|0,S=S+c|0,K=K+d|0,U=U+p|0,T=T+m|0,L=L+y|0,P=P+g|0,C=C+v|0,R=R+w|0,I=I+b|0,t[0]=M>>>0&255,t[1]=M>>>8&255,t[2]=M>>>16&255,t[3]=M>>>24&255,t[4]=A>>>0&255,t[5]=A>>>8&255,t[6]=A>>>16&255,t[7]=A>>>24&255,t[8]=x>>>0&255,t[9]=x>>>8&255,t[10]=x>>>16&255,t[11]=x>>>24&255,t[12]=_>>>0&255,t[13]=_>>>8&255,t[14]=_>>>16&255,t[15]=_>>>24&255,t[16]=B>>>0&255,t[17]=B>>>8&255,t[18]=B>>>16&255,t[19]=B>>>24&255,t[20]=E>>>0&255,t[21]=E>>>8&255,t[22]=E>>>16&255,t[23]=E>>>24&255,t[24]=k>>>0&255,t[25]=k>>>8&255,t[26]=k>>>16&255,t[27]=k>>>24&255,t[28]=S>>>0&255,t[29]=S>>>8&255,t[30]=S>>>16&255,t[31]=S>>>24&255,t[32]=K>>>0&255,t[33]=K>>>8&255,t[34]=K>>>16&255,t[35]=K>>>24&255,t[36]=U>>>0&255,t[37]=U>>>8&255,t[38]=U>>>16&255,t[39]=U>>>24&255,t[40]=T>>>0&255,t[41]=T>>>8&255,t[42]=T>>>16&255,t[43]=T>>>24&255,t[44]=L>>>0&255,t[45]=L>>>8&255,t[46]=L>>>16&255,t[47]=L>>>24&255,t[48]=P>>>0&255,t[49]=P>>>8&255,t[50]=P>>>16&255,t[51]=P>>>24&255,t[52]=C>>>0&255,t[53]=C>>>8&255,t[54]=C>>>16&255,t[55]=C>>>24&255,t[56]=R>>>0&255,t[57]=R>>>8&255,t[58]=R>>>16&255,t[59]=R>>>24&255,t[60]=I>>>0&255,t[61]=I>>>8&255,t[62]=I>>>16&255,t[63]=I>>>24&255}(t,r,e,i)}function w(t,r,e,i){!function(t,r,e,i){for(var n,o=255&i[0]|(255&i[1])<<8|(255&i[2])<<16|(255&i[3])<<24,f=255&e[0]|(255&e[1])<<8|(255&e[2])<<16|(255&e[3])<<24,s=255&e[4]|(255&e[5])<<8|(255&e[6])<<16|(255&e[7])<<24,u=255&e[8]|(255&e[9])<<8|(255&e[10])<<16|(255&e[11])<<24,a=255&e[12]|(255&e[13])<<8|(255&e[14])<<16|(255&e[15])<<24,h=255&i[4]|(255&i[5])<<8|(255&i[6])<<16|(255&i[7])<<24,l=255&r[0]|(255&r[1])<<8|(255&r[2])<<16|(255&r[3])<<24,c=255&r[4]|(255&r[5])<<8|(255&r[6])<<16|(255&r[7])<<24,d=255&r[8]|(255&r[9])<<8|(255&r[10])<<16|(255&r[11])<<24,p=255&r[12]|(255&r[13])<<8|(255&r[14])<<16|(255&r[15])<<24,m=255&i[8]|(255&i[9])<<8|(255&i[10])<<16|(255&i[11])<<24,y=255&e[16]|(255&e[17])<<8|(255&e[18])<<16|(255&e[19])<<24,g=255&e[20]|(255&e[21])<<8|(255&e[22])<<16|(255&e[23])<<24,v=255&e[24]|(255&e[25])<<8|(255&e[26])<<16|(255&e[27])<<24,w=255&e[28]|(255&e[29])<<8|(255&e[30])<<16|(255&e[31])<<24,b=255&i[12]|(255&i[13])<<8|(255&i[14])<<16|(255&i[15])<<24,M=0;M<20;M+=2)o^=(n=(g^=(n=(d^=(n=(a^=(n=o+g|0)<<7|n>>>25)+o|0)<<9|n>>>23)+a|0)<<13|n>>>19)+d|0)<<18|n>>>14,h^=(n=(f^=(n=(v^=(n=(p^=(n=h+f|0)<<7|n>>>25)+h|0)<<9|n>>>23)+p|0)<<13|n>>>19)+v|0)<<18|n>>>14,m^=(n=(l^=(n=(s^=(n=(w^=(n=m+l|0)<<7|n>>>25)+m|0)<<9|n>>>23)+w|0)<<13|n>>>19)+s|0)<<18|n>>>14,b^=(n=(y^=(n=(c^=(n=(u^=(n=b+y|0)<<7|n>>>25)+b|0)<<9|n>>>23)+u|0)<<13|n>>>19)+c|0)<<18|n>>>14,o^=(n=(u^=(n=(s^=(n=(f^=(n=o+u|0)<<7|n>>>25)+o|0)<<9|n>>>23)+f|0)<<13|n>>>19)+s|0)<<18|n>>>14,h^=(n=(a^=(n=(c^=(n=(l^=(n=h+a|0)<<7|n>>>25)+h|0)<<9|n>>>23)+l|0)<<13|n>>>19)+c|0)<<18|n>>>14,m^=(n=(p^=(n=(d^=(n=(y^=(n=m+p|0)<<7|n>>>25)+m|0)<<9|n>>>23)+y|0)<<13|n>>>19)+d|0)<<18|n>>>14,b^=(n=(w^=(n=(v^=(n=(g^=(n=b+w|0)<<7|n>>>25)+b|0)<<9|n>>>23)+g|0)<<13|n>>>19)+v|0)<<18|n>>>14;t[0]=o>>>0&255,t[1]=o>>>8&255,t[2]=o>>>16&255,t[3]=o>>>24&255,t[4]=h>>>0&255,t[5]=h>>>8&255,t[6]=h>>>16&255,t[7]=h>>>24&255,t[8]=m>>>0&255,t[9]=m>>>8&255,t[10]=m>>>16&255,t[11]=m>>>24&255,t[12]=b>>>0&255,t[13]=b>>>8&255,t[14]=b>>>16&255,t[15]=b>>>24&255,t[16]=l>>>0&255,t[17]=l>>>8&255,t[18]=l>>>16&255,t[19]=l>>>24&255,t[20]=c>>>0&255,t[21]=c>>>8&255,t[22]=c>>>16&255,t[23]=c>>>24&255,t[24]=d>>>0&255,t[25]=d>>>8&255,t[26]=d>>>16&255,t[27]=d>>>24&255,t[28]=p>>>0&255,t[29]=p>>>8&255,t[30]=p>>>16&255,t[31]=p>>>24&255}(t,r,e,i)}var b=new Uint8Array([101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107]);function M(t,r,e,i,n,o,f){var s,u,a=new Uint8Array(16),h=new Uint8Array(64);for(u=0;u<16;u++)a[u]=0;for(u=0;u<8;u++)a[u]=o[u];for(;n>=64;){for(v(h,a,f,b),u=0;u<64;u++)t[r+u]=e[i+u]^h[u];for(s=1,u=8;u<16;u++)s=s+(255&a[u])|0,a[u]=255&s,s>>>=8;n-=64,r+=64,i+=64}if(n>0)for(v(h,a,f,b),u=0;u<n;u++)t[r+u]=e[i+u]^h[u];return 0}function A(t,r,e,i,n){var o,f,s=new Uint8Array(16),u=new Uint8Array(64);for(f=0;f<16;f++)s[f]=0;for(f=0;f<8;f++)s[f]=i[f];for(;e>=64;){for(v(u,s,n,b),f=0;f<64;f++)t[r+f]=u[f];for(o=1,f=8;f<16;f++)o=o+(255&s[f])|0,s[f]=255&o,o>>>=8;e-=64,r+=64}if(e>0)for(v(u,s,n,b),f=0;f<e;f++)t[r+f]=u[f];return 0}function x(t,r,e,i,n){var o=new Uint8Array(32);w(o,i,n,b);for(var f=new Uint8Array(8),s=0;s<8;s++)f[s]=i[s+16];return A(t,r,e,f,o)}function _(t,r,e,i,n,o,f){var s=new Uint8Array(32);w(s,o,f,b);for(var u=new Uint8Array(8),a=0;a<8;a++)u[a]=o[a+16];return M(t,r,e,i,n,u,s)}var B=function(t){var r,e,i,n,o,f,s,u;this.buffer=new Uint8Array(16),this.r=new Uint16Array(10),this.h=new Uint16Array(10),this.pad=new Uint16Array(8),this.leftover=0,this.fin=0,r=255&t[0]|(255&t[1])<<8,this.r[0]=8191&r,e=255&t[2]|(255&t[3])<<8,this.r[1]=8191&(r>>>13|e<<3),i=255&t[4]|(255&t[5])<<8,this.r[2]=7939&(e>>>10|i<<6),n=255&t[6]|(255&t[7])<<8,this.r[3]=8191&(i>>>7|n<<9),o=255&t[8]|(255&t[9])<<8,this.r[4]=255&(n>>>4|o<<12),this.r[5]=o>>>1&8190,f=255&t[10]|(255&t[11])<<8,this.r[6]=8191&(o>>>14|f<<2),s=255&t[12]|(255&t[13])<<8,this.r[7]=8065&(f>>>11|s<<5),u=255&t[14]|(255&t[15])<<8,this.r[8]=8191&(s>>>8|u<<8),this.r[9]=u>>>5&127,this.pad[0]=255&t[16]|(255&t[17])<<8,this.pad[1]=255&t[18]|(255&t[19])<<8,this.pad[2]=255&t[20]|(255&t[21])<<8,this.pad[3]=255&t[22]|(255&t[23])<<8,this.pad[4]=255&t[24]|(255&t[25])<<8,this.pad[5]=255&t[26]|(255&t[27])<<8,this.pad[6]=255&t[28]|(255&t[29])<<8,this.pad[7]=255&t[30]|(255&t[31])<<8};function E(t,r,e,i,n,o){var f=new B(o);return f.update(e,i,n),f.finish(t,r),0}function k(t,r,e,i,n,o){var f=new Uint8Array(16);return E(f,0,e,i,n,o),y(t,r,f,0)}function S(t,r,e,i,n){var o;if(e<32)return-1;for(_(t,0,r,0,e,i,n),E(t,16,t,32,e-32,t),o=0;o<16;o++)t[o]=0;return 0}function K(t,r,e,i,n){var o,f=new Uint8Array(32);if(e<32)return-1;if(x(f,0,32,i,n),0!==k(r,16,r,32,e-32,f))return-1;for(_(t,0,r,0,e,i,n),o=0;o<32;o++)t[o]=0;return 0}function U(t,r){var e;for(e=0;e<16;e++)t[e]=0|r[e]}function T(t){var r,e,i=1;for(r=0;r<16;r++)e=t[r]+i+65535,i=Math.floor(e/65536),t[r]=e-65536*i;t[0]+=i-1+37*(i-1)}function L(t,r,e){for(var i,n=~(e-1),o=0;o<16;o++)i=n&(t[o]^r[o]),t[o]^=i,r[o]^=i}function P(t,e){var i,n,o,f=r(),s=r();for(i=0;i<16;i++)s[i]=e[i];for(T(s),T(s),T(s),n=0;n<2;n++){for(f[0]=s[0]-65517,i=1;i<15;i++)f[i]=s[i]-65535-(f[i-1]>>16&1),f[i-1]&=65535;f[15]=s[15]-32767-(f[14]>>16&1),o=f[15]>>16&1,f[14]&=65535,L(s,f,1-o)}for(i=0;i<16;i++)t[2*i]=255&s[i],t[2*i+1]=s[i]>>8}function C(t,r){var e=new Uint8Array(32),i=new Uint8Array(32);return P(e,t),P(i,r),g(e,0,i,0)}function R(t){var r=new Uint8Array(32);return P(r,t),1&r[0]}function I(t,r){var e;for(e=0;e<16;e++)t[e]=r[2*e]+(r[2*e+1]<<8);t[15]&=32767}function N(t,r,e){for(var i=0;i<16;i++)t[i]=r[i]+e[i]}function O(t,r,e){for(var i=0;i<16;i++)t[i]=r[i]-e[i]}function z(t,r,e){var i,n,o=0,f=0,s=0,u=0,a=0,h=0,l=0,c=0,d=0,p=0,m=0,y=0,g=0,v=0,w=0,b=0,M=0,A=0,x=0,_=0,B=0,E=0,k=0,S=0,K=0,U=0,T=0,L=0,P=0,C=0,R=0,I=e[0],N=e[1],O=e[2],z=e[3],H=e[4],Z=e[5],j=e[6],D=e[7],V=e[8],Y=e[9],W=e[10],q=e[11],$=e[12],F=e[13],J=e[14],G=e[15];o+=(i=r[0])*I,f+=i*N,s+=i*O,u+=i*z,a+=i*H,h+=i*Z,l+=i*j,c+=i*D,d+=i*V,p+=i*Y,m+=i*W,y+=i*q,g+=i*$,v+=i*F,w+=i*J,b+=i*G,f+=(i=r[1])*I,s+=i*N,u+=i*O,a+=i*z,h+=i*H,l+=i*Z,c+=i*j,d+=i*D,p+=i*V,m+=i*Y,y+=i*W,g+=i*q,v+=i*$,w+=i*F,b+=i*J,M+=i*G,s+=(i=r[2])*I,u+=i*N,a+=i*O,h+=i*z,l+=i*H,c+=i*Z,d+=i*j,p+=i*D,m+=i*V,y+=i*Y,g+=i*W,v+=i*q,w+=i*$,b+=i*F,M+=i*J,A+=i*G,u+=(i=r[3])*I,a+=i*N,h+=i*O,l+=i*z,c+=i*H,d+=i*Z,p+=i*j,m+=i*D,y+=i*V,g+=i*Y,v+=i*W,w+=i*q,b+=i*$,M+=i*F,A+=i*J,x+=i*G,a+=(i=r[4])*I,h+=i*N,l+=i*O,c+=i*z,d+=i*H,p+=i*Z,m+=i*j,y+=i*D,g+=i*V,v+=i*Y,w+=i*W,b+=i*q,M+=i*$,A+=i*F,x+=i*J,_+=i*G,h+=(i=r[5])*I,l+=i*N,c+=i*O,d+=i*z,p+=i*H,m+=i*Z,y+=i*j,g+=i*D,v+=i*V,w+=i*Y,b+=i*W,M+=i*q,A+=i*$,x+=i*F,_+=i*J,B+=i*G,l+=(i=r[6])*I,c+=i*N,d+=i*O,p+=i*z,m+=i*H,y+=i*Z,g+=i*j,v+=i*D,w+=i*V,b+=i*Y,M+=i*W,A+=i*q,x+=i*$,_+=i*F,B+=i*J,E+=i*G,c+=(i=r[7])*I,d+=i*N,p+=i*O,m+=i*z,y+=i*H,g+=i*Z,v+=i*j,w+=i*D,b+=i*V,M+=i*Y,A+=i*W,x+=i*q,_+=i*$,B+=i*F,E+=i*J,k+=i*G,d+=(i=r[8])*I,p+=i*N,m+=i*O,y+=i*z,g+=i*H,v+=i*Z,w+=i*j,b+=i*D,M+=i*V,A+=i*Y,x+=i*W,_+=i*q,B+=i*$,E+=i*F,k+=i*J,S+=i*G,p+=(i=r[9])*I,m+=i*N,y+=i*O,g+=i*z,v+=i*H,w+=i*Z,b+=i*j,M+=i*D,A+=i*V,x+=i*Y,_+=i*W,B+=i*q,E+=i*$,k+=i*F,S+=i*J,K+=i*G,m+=(i=r[10])*I,y+=i*N,g+=i*O,v+=i*z,w+=i*H,b+=i*Z,M+=i*j,A+=i*D,x+=i*V,_+=i*Y,B+=i*W,E+=i*q,k+=i*$,S+=i*F,K+=i*J,U+=i*G,y+=(i=r[11])*I,g+=i*N,v+=i*O,w+=i*z,b+=i*H,M+=i*Z,A+=i*j,x+=i*D,_+=i*V,B+=i*Y,E+=i*W,k+=i*q,S+=i*$,K+=i*F,U+=i*J,T+=i*G,g+=(i=r[12])*I,v+=i*N,w+=i*O,b+=i*z,M+=i*H,A+=i*Z,x+=i*j,_+=i*D,B+=i*V,E+=i*Y,k+=i*W,S+=i*q,K+=i*$,U+=i*F,T+=i*J,L+=i*G,v+=(i=r[13])*I,w+=i*N,b+=i*O,M+=i*z,A+=i*H,x+=i*Z,_+=i*j,B+=i*D,E+=i*V,k+=i*Y,S+=i*W,K+=i*q,U+=i*$,T+=i*F,L+=i*J,P+=i*G,w+=(i=r[14])*I,b+=i*N,M+=i*O,A+=i*z,x+=i*H,_+=i*Z,B+=i*j,E+=i*D,k+=i*V,S+=i*Y,K+=i*W,U+=i*q,T+=i*$,L+=i*F,P+=i*J,C+=i*G,b+=(i=r[15])*I,f+=38*(A+=i*O),s+=38*(x+=i*z),u+=38*(_+=i*H),a+=38*(B+=i*Z),h+=38*(E+=i*j),l+=38*(k+=i*D),c+=38*(S+=i*V),d+=38*(K+=i*Y),p+=38*(U+=i*W),m+=38*(T+=i*q),y+=38*(L+=i*$),g+=38*(P+=i*F),v+=38*(C+=i*J),w+=38*(R+=i*G),o=(i=(o+=38*(M+=i*N))+(n=1)+65535)-65536*(n=Math.floor(i/65536)),f=(i=f+n+65535)-65536*(n=Math.floor(i/65536)),s=(i=s+n+65535)-65536*(n=Math.floor(i/65536)),u=(i=u+n+65535)-65536*(n=Math.floor(i/65536)),a=(i=a+n+65535)-65536*(n=Math.floor(i/65536)),h=(i=h+n+65535)-65536*(n=Math.floor(i/65536)),l=(i=l+n+65535)-65536*(n=Math.floor(i/65536)),c=(i=c+n+65535)-65536*(n=Math.floor(i/65536)),d=(i=d+n+65535)-65536*(n=Math.floor(i/65536)),p=(i=p+n+65535)-65536*(n=Math.floor(i/65536)),m=(i=m+n+65535)-65536*(n=Math.floor(i/65536)),y=(i=y+n+65535)-65536*(n=Math.floor(i/65536)),g=(i=g+n+65535)-65536*(n=Math.floor(i/65536)),v=(i=v+n+65535)-65536*(n=Math.floor(i/65536)),w=(i=w+n+65535)-65536*(n=Math.floor(i/65536)),b=(i=b+n+65535)-65536*(n=Math.floor(i/65536)),o=(i=(o+=n-1+37*(n-1))+(n=1)+65535)-65536*(n=Math.floor(i/65536)),f=(i=f+n+65535)-65536*(n=Math.floor(i/65536)),s=(i=s+n+65535)-65536*(n=Math.floor(i/65536)),u=(i=u+n+65535)-65536*(n=Math.floor(i/65536)),a=(i=a+n+65535)-65536*(n=Math.floor(i/65536)),h=(i=h+n+65535)-65536*(n=Math.floor(i/65536)),l=(i=l+n+65535)-65536*(n=Math.floor(i/65536)),c=(i=c+n+65535)-65536*(n=Math.floor(i/65536)),d=(i=d+n+65535)-65536*(n=Math.floor(i/65536)),p=(i=p+n+65535)-65536*(n=Math.floor(i/65536)),m=(i=m+n+65535)-65536*(n=Math.floor(i/65536)),y=(i=y+n+65535)-65536*(n=Math.floor(i/65536)),g=(i=g+n+65535)-65536*(n=Math.floor(i/65536)),v=(i=v+n+65535)-65536*(n=Math.floor(i/65536)),w=(i=w+n+65535)-65536*(n=Math.floor(i/65536)),b=(i=b+n+65535)-65536*(n=Math.floor(i/65536)),o+=n-1+37*(n-1),t[0]=o,t[1]=f,t[2]=s,t[3]=u,t[4]=a,t[5]=h,t[6]=l,t[7]=c,t[8]=d,t[9]=p,t[10]=m,t[11]=y,t[12]=g,t[13]=v,t[14]=w,t[15]=b}function H(t,r){z(t,r,r)}function Z(t,e){var i,n=r();for(i=0;i<16;i++)n[i]=e[i];for(i=253;i>=0;i--)H(n,n),2!==i&&4!==i&&z(n,n,e);for(i=0;i<16;i++)t[i]=n[i]}function j(t,e){var i,n=r();for(i=0;i<16;i++)n[i]=e[i];for(i=250;i>=0;i--)H(n,n),1!==i&&z(n,n,e);for(i=0;i<16;i++)t[i]=n[i]}function D(t,e,i){var n,o,f=new Uint8Array(32),s=new Float64Array(80),a=r(),h=r(),l=r(),c=r(),d=r(),p=r();for(o=0;o<31;o++)f[o]=e[o];for(f[31]=127&e[31]|64,f[0]&=248,I(s,i),o=0;o<16;o++)h[o]=s[o],c[o]=a[o]=l[o]=0;for(a[0]=c[0]=1,o=254;o>=0;--o)L(a,h,n=f[o>>>3]>>>(7&o)&1),L(l,c,n),N(d,a,l),O(a,a,l),N(l,h,c),O(h,h,c),H(c,d),H(p,a),z(a,l,a),z(l,h,d),N(d,a,l),O(a,a,l),H(h,a),O(l,c,p),z(a,l,u),N(a,a,c),z(l,l,a),z(a,c,p),z(c,h,s),H(h,d),L(a,h,n),L(l,c,n);for(o=0;o<16;o++)s[o+16]=a[o],s[o+32]=l[o],s[o+48]=h[o],s[o+64]=c[o];var m=s.subarray(32),y=s.subarray(16);return Z(m,m),z(y,y,m),P(t,y),0}function V(t,r){return D(t,r,o)}function Y(t,r){return i(r,32),V(t,r)}function W(t,r,e){var i=new Uint8Array(32);return D(i,e,r),w(t,n,i,b)}B.prototype.blocks=function(t,r,e){for(var i,n,o,f,s,u,a,h,l,c,d,p,m,y,g,v,w,b,M,A=this.fin?0:2048,x=this.h[0],_=this.h[1],B=this.h[2],E=this.h[3],k=this.h[4],S=this.h[5],K=this.h[6],U=this.h[7],T=this.h[8],L=this.h[9],P=this.r[0],C=this.r[1],R=this.r[2],I=this.r[3],N=this.r[4],O=this.r[5],z=this.r[6],H=this.r[7],Z=this.r[8],j=this.r[9];e>=16;)c=l=0,c+=(x+=8191&(i=255&t[r+0]|(255&t[r+1])<<8))*P,c+=(_+=8191&(i>>>13|(n=255&t[r+2]|(255&t[r+3])<<8)<<3))*(5*j),c+=(B+=8191&(n>>>10|(o=255&t[r+4]|(255&t[r+5])<<8)<<6))*(5*Z),c+=(E+=8191&(o>>>7|(f=255&t[r+6]|(255&t[r+7])<<8)<<9))*(5*H),l=(c+=(k+=8191&(f>>>4|(s=255&t[r+8]|(255&t[r+9])<<8)<<12))*(5*z))>>>13,c&=8191,c+=(S+=s>>>1&8191)*(5*O),c+=(K+=8191&(s>>>14|(u=255&t[r+10]|(255&t[r+11])<<8)<<2))*(5*N),c+=(U+=8191&(u>>>11|(a=255&t[r+12]|(255&t[r+13])<<8)<<5))*(5*I),c+=(T+=8191&(a>>>8|(h=255&t[r+14]|(255&t[r+15])<<8)<<8))*(5*R),d=l+=(c+=(L+=h>>>5|A)*(5*C))>>>13,d+=x*C,d+=_*P,d+=B*(5*j),d+=E*(5*Z),l=(d+=k*(5*H))>>>13,d&=8191,d+=S*(5*z),d+=K*(5*O),d+=U*(5*N),d+=T*(5*I),l+=(d+=L*(5*R))>>>13,d&=8191,p=l,p+=x*R,p+=_*C,p+=B*P,p+=E*(5*j),l=(p+=k*(5*Z))>>>13,p&=8191,p+=S*(5*H),p+=K*(5*z),p+=U*(5*O),p+=T*(5*N),m=l+=(p+=L*(5*I))>>>13,m+=x*I,m+=_*R,m+=B*C,m+=E*P,l=(m+=k*(5*j))>>>13,m&=8191,m+=S*(5*Z),m+=K*(5*H),m+=U*(5*z),m+=T*(5*O),y=l+=(m+=L*(5*N))>>>13,y+=x*N,y+=_*I,y+=B*R,y+=E*C,l=(y+=k*P)>>>13,y&=8191,y+=S*(5*j),y+=K*(5*Z),y+=U*(5*H),y+=T*(5*z),g=l+=(y+=L*(5*O))>>>13,g+=x*O,g+=_*N,g+=B*I,g+=E*R,l=(g+=k*C)>>>13,g&=8191,g+=S*P,g+=K*(5*j),g+=U*(5*Z),g+=T*(5*H),v=l+=(g+=L*(5*z))>>>13,v+=x*z,v+=_*O,v+=B*N,v+=E*I,l=(v+=k*R)>>>13,v&=8191,v+=S*C,v+=K*P,v+=U*(5*j),v+=T*(5*Z),w=l+=(v+=L*(5*H))>>>13,w+=x*H,w+=_*z,w+=B*O,w+=E*N,l=(w+=k*I)>>>13,w&=8191,w+=S*R,w+=K*C,w+=U*P,w+=T*(5*j),b=l+=(w+=L*(5*Z))>>>13,b+=x*Z,b+=_*H,b+=B*z,b+=E*O,l=(b+=k*N)>>>13,b&=8191,b+=S*I,b+=K*R,b+=U*C,b+=T*P,M=l+=(b+=L*(5*j))>>>13,M+=x*j,M+=_*Z,M+=B*H,M+=E*z,l=(M+=k*O)>>>13,M&=8191,M+=S*N,M+=K*I,M+=U*R,M+=T*C,x=c=8191&(l=(l=((l+=(M+=L*P)>>>13)<<2)+l|0)+(c&=8191)|0),_=d+=l>>>=13,B=p&=8191,E=m&=8191,k=y&=8191,S=g&=8191,K=v&=8191,U=w&=8191,T=b&=8191,L=M&=8191,r+=16,e-=16;this.h[0]=x,this.h[1]=_,this.h[2]=B,this.h[3]=E,this.h[4]=k,this.h[5]=S,this.h[6]=K,this.h[7]=U,this.h[8]=T,this.h[9]=L},B.prototype.finish=function(t,r){var e,i,n,o,f=new Uint16Array(10);if(this.leftover){for(o=this.leftover,this.buffer[o++]=1;o<16;o++)this.buffer[o]=0;this.fin=1,this.blocks(this.buffer,0,16)}for(e=this.h[1]>>>13,this.h[1]&=8191,o=2;o<10;o++)this.h[o]+=e,e=this.h[o]>>>13,this.h[o]&=8191;for(this.h[0]+=5*e,e=this.h[0]>>>13,this.h[0]&=8191,this.h[1]+=e,e=this.h[1]>>>13,this.h[1]&=8191,this.h[2]+=e,f[0]=this.h[0]+5,e=f[0]>>>13,f[0]&=8191,o=1;o<10;o++)f[o]=this.h[o]+e,e=f[o]>>>13,f[o]&=8191;for(f[9]-=8192,i=(1^e)-1,o=0;o<10;o++)f[o]&=i;for(i=~i,o=0;o<10;o++)this.h[o]=this.h[o]&i|f[o];for(this.h[0]=65535&(this.h[0]|this.h[1]<<13),this.h[1]=65535&(this.h[1]>>>3|this.h[2]<<10),this.h[2]=65535&(this.h[2]>>>6|this.h[3]<<7),this.h[3]=65535&(this.h[3]>>>9|this.h[4]<<4),this.h[4]=65535&(this.h[4]>>>12|this.h[5]<<1|this.h[6]<<14),this.h[5]=65535&(this.h[6]>>>2|this.h[7]<<11),this.h[6]=65535&(this.h[7]>>>5|this.h[8]<<8),this.h[7]=65535&(this.h[8]>>>8|this.h[9]<<5),n=this.h[0]+this.pad[0],this.h[0]=65535&n,o=1;o<8;o++)n=(this.h[o]+this.pad[o]|0)+(n>>>16)|0,this.h[o]=65535&n;t[r+0]=this.h[0]>>>0&255,t[r+1]=this.h[0]>>>8&255,t[r+2]=this.h[1]>>>0&255,t[r+3]=this.h[1]>>>8&255,t[r+4]=this.h[2]>>>0&255,t[r+5]=this.h[2]>>>8&255,t[r+6]=this.h[3]>>>0&255,t[r+7]=this.h[3]>>>8&255,t[r+8]=this.h[4]>>>0&255,t[r+9]=this.h[4]>>>8&255,t[r+10]=this.h[5]>>>0&255,t[r+11]=this.h[5]>>>8&255,t[r+12]=this.h[6]>>>0&255,t[r+13]=this.h[6]>>>8&255,t[r+14]=this.h[7]>>>0&255,t[r+15]=this.h[7]>>>8&255},B.prototype.update=function(t,r,e){var i,n;if(this.leftover){for((n=16-this.leftover)>e&&(n=e),i=0;i<n;i++)this.buffer[this.leftover+i]=t[r+i];if(e-=n,r+=n,this.leftover+=n,this.leftover<16)return;this.blocks(this.buffer,0,16),this.leftover=0}if(e>=16&&(n=e-e%16,this.blocks(t,r,n),r+=n,e-=n),e){for(i=0;i<e;i++)this.buffer[this.leftover+i]=t[r+i];this.leftover+=e}};var q=S,$=K,F=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function J(t,r,e,i){for(var n,o,f,s,u,a,h,l,c,d,p,m,y,g,v,w,b,M,A,x,_,B,E,k,S,K,U=new Int32Array(16),T=new Int32Array(16),L=t[0],P=t[1],C=t[2],R=t[3],I=t[4],N=t[5],O=t[6],z=t[7],H=r[0],Z=r[1],j=r[2],D=r[3],V=r[4],Y=r[5],W=r[6],q=r[7],$=0;i>=128;){for(A=0;A<16;A++)x=8*A+$,U[A]=e[x+0]<<24|e[x+1]<<16|e[x+2]<<8|e[x+3],T[A]=e[x+4]<<24|e[x+5]<<16|e[x+6]<<8|e[x+7];for(A=0;A<80;A++)if(n=L,o=P,f=C,s=R,u=I,a=N,h=O,c=H,d=Z,p=j,m=D,y=V,g=Y,v=W,E=65535&(B=q),k=B>>>16,S=65535&(_=z),K=_>>>16,E+=65535&(B=(V>>>14|I<<18)^(V>>>18|I<<14)^(I>>>9|V<<23)),k+=B>>>16,S+=65535&(_=(I>>>14|V<<18)^(I>>>18|V<<14)^(V>>>9|I<<23)),K+=_>>>16,E+=65535&(B=V&Y^~V&W),k+=B>>>16,S+=65535&(_=I&N^~I&O),K+=_>>>16,E+=65535&(B=F[2*A+1]),k+=B>>>16,S+=65535&(_=F[2*A]),K+=_>>>16,_=U[A%16],k+=(B=T[A%16])>>>16,S+=65535&_,K+=_>>>16,S+=(k+=(E+=65535&B)>>>16)>>>16,E=65535&(B=M=65535&E|k<<16),k=B>>>16,S=65535&(_=b=65535&S|(K+=S>>>16)<<16),K=_>>>16,E+=65535&(B=(H>>>28|L<<4)^(L>>>2|H<<30)^(L>>>7|H<<25)),k+=B>>>16,S+=65535&(_=(L>>>28|H<<4)^(H>>>2|L<<30)^(H>>>7|L<<25)),K+=_>>>16,k+=(B=H&Z^H&j^Z&j)>>>16,S+=65535&(_=L&P^L&C^P&C),K+=_>>>16,l=65535&(S+=(k+=(E+=65535&B)>>>16)>>>16)|(K+=S>>>16)<<16,w=65535&E|k<<16,E=65535&(B=m),k=B>>>16,S=65535&(_=s),K=_>>>16,k+=(B=M)>>>16,S+=65535&(_=b),K+=_>>>16,P=n,C=o,R=f,I=s=65535&(S+=(k+=(E+=65535&B)>>>16)>>>16)|(K+=S>>>16)<<16,N=u,O=a,z=h,L=l,Z=c,j=d,D=p,V=m=65535&E|k<<16,Y=y,W=g,q=v,H=w,A%16==15)for(x=0;x<16;x++)_=U[x],E=65535&(B=T[x]),k=B>>>16,S=65535&_,K=_>>>16,_=U[(x+9)%16],E+=65535&(B=T[(x+9)%16]),k+=B>>>16,S+=65535&_,K+=_>>>16,b=U[(x+1)%16],E+=65535&(B=((M=T[(x+1)%16])>>>1|b<<31)^(M>>>8|b<<24)^(M>>>7|b<<25)),k+=B>>>16,S+=65535&(_=(b>>>1|M<<31)^(b>>>8|M<<24)^b>>>7),K+=_>>>16,b=U[(x+14)%16],k+=(B=((M=T[(x+14)%16])>>>19|b<<13)^(b>>>29|M<<3)^(M>>>6|b<<26))>>>16,S+=65535&(_=(b>>>19|M<<13)^(M>>>29|b<<3)^b>>>6),K+=_>>>16,K+=(S+=(k+=(E+=65535&B)>>>16)>>>16)>>>16,U[x]=65535&S|K<<16,T[x]=65535&E|k<<16;E=65535&(B=H),k=B>>>16,S=65535&(_=L),K=_>>>16,_=t[0],k+=(B=r[0])>>>16,S+=65535&_,K+=_>>>16,K+=(S+=(k+=(E+=65535&B)>>>16)>>>16)>>>16,t[0]=L=65535&S|K<<16,r[0]=H=65535&E|k<<16,E=65535&(B=Z),k=B>>>16,S=65535&(_=P),K=_>>>16,_=t[1],k+=(B=r[1])>>>16,S+=65535&_,K+=_>>>16,K+=(S+=(k+=(E+=65535&B)>>>16)>>>16)>>>16,t[1]=P=65535&S|K<<16,r[1]=Z=65535&E|k<<16,E=65535&(B=j),k=B>>>16,S=65535&(_=C),K=_>>>16,_=t[2],k+=(B=r[2])>>>16,S+=65535&_,K+=_>>>16,K+=(S+=(k+=(E+=65535&B)>>>16)>>>16)>>>16,t[2]=C=65535&S|K<<16,r[2]=j=65535&E|k<<16,E=65535&(B=D),k=B>>>16,S=65535&(_=R),K=_>>>16,_=t[3],k+=(B=r[3])>>>16,S+=65535&_,K+=_>>>16,K+=(S+=(k+=(E+=65535&B)>>>16)>>>16)>>>16,t[3]=R=65535&S|K<<16,r[3]=D=65535&E|k<<16,E=65535&(B=V),k=B>>>16,S=65535&(_=I),K=_>>>16,_=t[4],k+=(B=r[4])>>>16,S+=65535&_,K+=_>>>16,K+=(S+=(k+=(E+=65535&B)>>>16)>>>16)>>>16,t[4]=I=65535&S|K<<16,r[4]=V=65535&E|k<<16,E=65535&(B=Y),k=B>>>16,S=65535&(_=N),K=_>>>16,_=t[5],k+=(B=r[5])>>>16,S+=65535&_,K+=_>>>16,K+=(S+=(k+=(E+=65535&B)>>>16)>>>16)>>>16,t[5]=N=65535&S|K<<16,r[5]=Y=65535&E|k<<16,E=65535&(B=W),k=B>>>16,S=65535&(_=O),K=_>>>16,_=t[6],k+=(B=r[6])>>>16,S+=65535&_,K+=_>>>16,K+=(S+=(k+=(E+=65535&B)>>>16)>>>16)>>>16,t[6]=O=65535&S|K<<16,r[6]=W=65535&E|k<<16,E=65535&(B=q),k=B>>>16,S=65535&(_=z),K=_>>>16,_=t[7],k+=(B=r[7])>>>16,S+=65535&_,K+=_>>>16,K+=(S+=(k+=(E+=65535&B)>>>16)>>>16)>>>16,t[7]=z=65535&S|K<<16,r[7]=q=65535&E|k<<16,$+=128,i-=128}return i}function G(t,r,e){var i,n=new Int32Array(8),o=new Int32Array(8),f=new Uint8Array(256),s=e;for(n[0]=1779033703,n[1]=3144134277,n[2]=1013904242,n[3]=2773480762,n[4]=1359893119,n[5]=2600822924,n[6]=528734635,n[7]=1541459225,o[0]=4089235720,o[1]=2227873595,o[2]=4271175723,o[3]=1595750129,o[4]=2917565137,o[5]=725511199,o[6]=4215389547,o[7]=327033209,J(n,o,r,e),e%=128,i=0;i<e;i++)f[i]=r[s-e+i];for(f[e]=128,f[(e=256-128*(e<112?1:0))-9]=0,p(f,e-8,s/536870912|0,s<<3),J(n,o,f,e),i=0;i<8;i++)p(t,8*i,n[i],o[i]);return 0}function X(t,e){var i=r(),n=r(),o=r(),f=r(),s=r(),u=r(),a=r(),l=r(),c=r();O(i,t[1],t[0]),O(c,e[1],e[0]),z(i,i,c),N(n,t[0],t[1]),N(c,e[0],e[1]),z(n,n,c),z(o,t[3],e[3]),z(o,o,h),z(f,t[2],e[2]),N(f,f,f),O(s,n,i),O(u,f,o),N(a,f,o),N(l,n,i),z(t[0],s,u),z(t[1],l,a),z(t[2],a,u),z(t[3],s,l)}function Q(t,r,e){var i;for(i=0;i<4;i++)L(t[i],r[i],e)}function tt(t,e){var i=r(),n=r(),o=r();Z(o,e[2]),z(i,e[0],o),z(n,e[1],o),P(t,n),t[31]^=R(i)<<7}function rt(t,r,e){var i,n;for(U(t[0],f),U(t[1],s),U(t[2],s),U(t[3],f),n=255;n>=0;--n)Q(t,r,i=e[n/8|0]>>(7&n)&1),X(r,t),X(t,t),Q(t,r,i)}function et(t,e){var i=[r(),r(),r(),r()];U(i[0],l),U(i[1],c),U(i[2],s),z(i[3],l,c),rt(t,i,e)}function it(t,e,n){var o,f=new Uint8Array(64),s=[r(),r(),r(),r()];for(n||i(e,32),G(f,e,32),f[0]&=248,f[31]&=127,f[31]|=64,et(s,f),tt(t,s),o=0;o<32;o++)e[o+32]=t[o];return 0}var nt=new Float64Array([237,211,245,92,26,99,18,88,214,156,247,162,222,249,222,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16]);function ot(t,r){var e,i,n,o;for(i=63;i>=32;--i){for(e=0,n=i-32,o=i-12;n<o;++n)r[n]+=e-16*r[i]*nt[n-(i-32)],e=Math.floor((r[n]+128)/256),r[n]-=256*e;r[n]+=e,r[i]=0}for(e=0,n=0;n<32;n++)r[n]+=e-(r[31]>>4)*nt[n],e=r[n]>>8,r[n]&=255;for(n=0;n<32;n++)r[n]-=e*nt[n];for(i=0;i<32;i++)r[i+1]+=r[i]>>8,t[i]=255&r[i]}function ft(t){var r,e=new Float64Array(64);for(r=0;r<64;r++)e[r]=t[r];for(r=0;r<64;r++)t[r]=0;ot(t,e)}function st(t,e,i,n){var o,f,s=new Uint8Array(64),u=new Uint8Array(64),a=new Uint8Array(64),h=new Float64Array(64),l=[r(),r(),r(),r()];G(s,n,32),s[0]&=248,s[31]&=127,s[31]|=64;var c=i+64;for(o=0;o<i;o++)t[64+o]=e[o];for(o=0;o<32;o++)t[32+o]=s[32+o];for(G(a,t.subarray(32),i+32),ft(a),et(l,a),tt(t,l),o=32;o<64;o++)t[o]=n[o];for(G(u,t,i+64),ft(u),o=0;o<64;o++)h[o]=0;for(o=0;o<32;o++)h[o]=a[o];for(o=0;o<32;o++)for(f=0;f<32;f++)h[o+f]+=u[o]*s[f];return ot(t.subarray(32),h),c}function ut(t,e,i,n){var o,u=new Uint8Array(32),h=new Uint8Array(64),l=[r(),r(),r(),r()],c=[r(),r(),r(),r()];if(i<64)return-1;if(function(t,e){var i=r(),n=r(),o=r(),u=r(),h=r(),l=r(),c=r();return U(t[2],s),I(t[1],e),H(o,t[1]),z(u,o,a),O(o,o,t[2]),N(u,t[2],u),H(h,u),H(l,h),z(c,l,h),z(i,c,o),z(i,i,u),j(i,i),z(i,i,o),z(i,i,u),z(i,i,u),z(t[0],i,u),H(n,t[0]),z(n,n,u),C(n,o)&&z(t[0],t[0],d),H(n,t[0]),z(n,n,u),C(n,o)?-1:(R(t[0])===e[31]>>7&&O(t[0],f,t[0]),z(t[3],t[0],t[1]),0)}(c,n))return-1;for(o=0;o<i;o++)t[o]=e[o];for(o=0;o<32;o++)t[o+32]=n[o];if(G(h,t,i),ft(h),rt(l,c,h),et(c,e.subarray(32)),X(l,c),tt(u,l),i-=64,g(e,0,u,0)){for(o=0;o<i;o++)t[o]=0;return-1}for(o=0;o<i;o++)t[o]=e[o+64];return i}var at,ht=64,lt=32,ct=64;function dt(t,r){if(32!==t.length)throw new Error("bad key size");if(24!==r.length)throw new Error("bad nonce size")}function pt(){for(var t=0;t<arguments.length;t++)if(!(arguments[t]instanceof Uint8Array))throw new TypeError("unexpected type, use Uint8Array")}function mt(t){for(var r=0;r<t.length;r++)t[r]=0}t.lowlevel={crypto_core_hsalsa20:w,crypto_stream_xor:_,crypto_stream:x,crypto_stream_salsa20_xor:M,crypto_stream_salsa20:A,crypto_onetimeauth:E,crypto_onetimeauth_verify:k,crypto_verify_16:y,crypto_verify_32:g,crypto_secretbox:S,crypto_secretbox_open:K,crypto_scalarmult:D,crypto_scalarmult_base:V,crypto_box_beforenm:W,crypto_box_afternm:q,crypto_box:function(t,r,e,i,n,o){var f=new Uint8Array(32);return W(f,n,o),q(t,r,e,i,f)},crypto_box_open:function(t,r,e,i,n,o){var f=new Uint8Array(32);return W(f,n,o),$(t,r,e,i,f)},crypto_box_keypair:Y,crypto_hash:G,crypto_sign:st,crypto_sign_keypair:it,crypto_sign_open:ut,crypto_secretbox_KEYBYTES:32,crypto_secretbox_NONCEBYTES:24,crypto_secretbox_ZEROBYTES:32,crypto_secretbox_BOXZEROBYTES:16,crypto_scalarmult_BYTES:32,crypto_scalarmult_SCALARBYTES:32,crypto_box_PUBLICKEYBYTES:32,crypto_box_SECRETKEYBYTES:32,crypto_box_BEFORENMBYTES:32,crypto_box_NONCEBYTES:24,crypto_box_ZEROBYTES:32,crypto_box_BOXZEROBYTES:16,crypto_sign_BYTES:ht,crypto_sign_PUBLICKEYBYTES:lt,crypto_sign_SECRETKEYBYTES:ct,crypto_sign_SEEDBYTES:32,crypto_hash_BYTES:64,gf:r,D:a,L:nt,pack25519:P,unpack25519:I,M:z,A:N,S:H,Z:O,pow2523:j,add:X,set25519:U,modL:ot,scalarmult:rt,scalarbase:et},t.randomBytes=function(t){var r=new Uint8Array(t);return i(r,t),r},t.secretbox=function(t,r,e){pt(t,r,e),dt(e,r);for(var i=new Uint8Array(32+t.length),n=new Uint8Array(i.length),o=0;o<t.length;o++)i[o+32]=t[o];return S(n,i,i.length,r,e),n.subarray(16)},t.secretbox.open=function(t,r,e){pt(t,r,e),dt(e,r);for(var i=new Uint8Array(16+t.length),n=new Uint8Array(i.length),o=0;o<t.length;o++)i[o+16]=t[o];return i.length<32||0!==K(n,i,i.length,r,e)?null:n.subarray(32)},t.secretbox.keyLength=32,t.secretbox.nonceLength=24,t.secretbox.overheadLength=16,t.scalarMult=function(t,r){if(pt(t,r),32!==t.length)throw new Error("bad n size");if(32!==r.length)throw new Error("bad p size");var e=new Uint8Array(32);return D(e,t,r),e},t.scalarMult.base=function(t){if(pt(t),32!==t.length)throw new Error("bad n size");var r=new Uint8Array(32);return V(r,t),r},t.scalarMult.scalarLength=32,t.scalarMult.groupElementLength=32,t.box=function(r,e,i,n){var o=t.box.before(i,n);return t.secretbox(r,e,o)},t.box.before=function(t,r){pt(t,r),function(t,r){if(32!==t.length)throw new Error("bad public key size");if(32!==r.length)throw new Error("bad secret key size")}(t,r);var e=new Uint8Array(32);return W(e,t,r),e},t.box.after=t.secretbox,t.box.open=function(r,e,i,n){var o=t.box.before(i,n);return t.secretbox.open(r,e,o)},t.box.open.after=t.secretbox.open,t.box.keyPair=function(){var t=new Uint8Array(32),r=new Uint8Array(32);return Y(t,r),{publicKey:t,secretKey:r}},t.box.keyPair.fromSecretKey=function(t){if(pt(t),32!==t.length)throw new Error("bad secret key size");var r=new Uint8Array(32);return V(r,t),{publicKey:r,secretKey:new Uint8Array(t)}},t.box.publicKeyLength=32,t.box.secretKeyLength=32,t.box.sharedKeyLength=32,t.box.nonceLength=24,t.box.overheadLength=t.secretbox.overheadLength,t.sign=function(t,r){if(pt(t,r),r.length!==ct)throw new Error("bad secret key size");var e=new Uint8Array(ht+t.length);return st(e,t,t.length,r),e},t.sign.open=function(t,r){if(pt(t,r),r.length!==lt)throw new Error("bad public key size");var e=new Uint8Array(t.length),i=ut(e,t,t.length,r);if(i<0)return null;for(var n=new Uint8Array(i),o=0;o<n.length;o++)n[o]=e[o];return n},t.sign.detached=function(r,e){for(var i=t.sign(r,e),n=new Uint8Array(ht),o=0;o<n.length;o++)n[o]=i[o];return n},t.sign.detached.verify=function(t,r,e){if(pt(t,r,e),r.length!==ht)throw new Error("bad signature size");if(e.length!==lt)throw new Error("bad public key size");var i,n=new Uint8Array(ht+t.length),o=new Uint8Array(ht+t.length);for(i=0;i<ht;i++)n[i]=r[i];for(i=0;i<t.length;i++)n[i+ht]=t[i];return ut(o,n,n.length,e)>=0},t.sign.keyPair=function(){var t=new Uint8Array(lt),r=new Uint8Array(ct);return it(t,r),{publicKey:t,secretKey:r}},t.sign.keyPair.fromSecretKey=function(t){if(pt(t),t.length!==ct)throw new Error("bad secret key size");for(var r=new Uint8Array(lt),e=0;e<r.length;e++)r[e]=t[32+e];return{publicKey:r,secretKey:new Uint8Array(t)}},t.sign.keyPair.fromSeed=function(t){if(pt(t),32!==t.length)throw new Error("bad seed size");for(var r=new Uint8Array(lt),e=new Uint8Array(ct),i=0;i<32;i++)e[i]=t[i];return it(r,e,!0),{publicKey:r,secretKey:e}},t.sign.publicKeyLength=lt,t.sign.secretKeyLength=ct,t.sign.seedLength=32,t.sign.signatureLength=ht,t.hash=function(t){pt(t);var r=new Uint8Array(64);return G(r,t,t.length),r},t.hash.hashLength=64,t.verify=function(t,r){return pt(t,r),0!==t.length&&0!==r.length&&t.length===r.length&&0===m(t,0,r,0,t.length)},t.setPRNG=function(t){i=t},(at="undefined"!=typeof self?self.crypto||self.msCrypto:null)&&at.getRandomValues?t.setPRNG((function(t,r){var e,i=new Uint8Array(r);for(e=0;e<r;e+=65536)at.getRandomValues(i.subarray(e,e+Math.min(r-e,65536)));for(e=0;e<r;e++)t[e]=i[e];mt(i)})):(at=e(15100))&&at.randomBytes&&t.setPRNG((function(t,r){var e,i=at.randomBytes(r);for(e=0;e<r;e++)t[e]=i[e];mt(i)}))}(t.exports?t.exports:self.nacl=self.nacl||{})},80884:(t,r,e)=>{"use strict";var i=e(23944),n=e(49604);function o(t){var r=t;if("string"!=typeof r)throw new Error("[ethjs-util] while padding to even, value must be string, is currently "+typeof r+", while padToEven.");return r.length%2&&(r="0"+r),r}function f(t){return"0x"+t.toString(16)}t.exports={arrayContainsArray:function(t,r,e){if(!0!==Array.isArray(t))throw new Error("[ethjs-util] method arrayContainsArray requires input 'superset' to be an array got type '"+typeof t+"'");if(!0!==Array.isArray(r))throw new Error("[ethjs-util] method arrayContainsArray requires input 'subset' to be an array got type '"+typeof r+"'");return r[Boolean(e)?"some":"every"]((function(r){return t.indexOf(r)>=0}))},intToBuffer:function(t){var r=f(t);return new Buffer(o(r.slice(2)),"hex")},getBinarySize:function(t){if("string"!=typeof t)throw new Error("[ethjs-util] while getting binary size, method getBinarySize requires input 'str' to be type String, got '"+typeof t+"'.");return Buffer.byteLength(t,"utf8")},isHexPrefixed:i,stripHexPrefix:n,padToEven:o,intToHex:f,fromAscii:function(t){for(var r="",e=0;e<t.length;e++){var i=t.charCodeAt(e).toString(16);r+=i.length<2?"0"+i:i}return"0x"+r},fromUtf8:function(t){return"0x"+o(new Buffer(t,"utf8").toString("hex")).replace(/^0+|0+$/g,"")},toAscii:function(t){var r="",e=0,i=t.length;for("0x"===t.substring(0,2)&&(e=2);e<i;e+=2){var n=parseInt(t.substr(e,2),16);r+=String.fromCharCode(n)}return r},toUtf8:function(t){return new Buffer(o(n(t).replace(/^0+|0+$/g,"")),"hex").toString("utf8")},getKeys:function(t,r,e){if(!Array.isArray(t))throw new Error("[ethjs-util] method getKeys expecting type Array as 'params' input, got '"+typeof t+"'");if("string"!=typeof r)throw new Error("[ethjs-util] method getKeys expecting type String for input 'key' got '"+typeof r+"'.");for(var i=[],n=0;n<t.length;n++){var o=t[n][r];if(e&&!o)o="";else if("string"!=typeof o)throw new Error("invalid abi");i.push(o)}return i},isHexString:function(t,r){return!("string"!=typeof t||!t.match(/^0x[0-9A-Fa-f]*$/)||r&&t.length!==2+2*r)}}},23944:t=>{t.exports=function(t){if("string"!=typeof t)throw new Error("[is-hex-prefixed] value must be type 'string', is currently type "+typeof t+", while checking isHexPrefixed.");return"0x"===t.slice(0,2)}},49604:(t,r,e)=>{var i=e(23944);t.exports=function(t){return"string"!=typeof t?t:i(t)?t.slice(2):t}},16885:function(t){!function(r,e){"use strict";t.exports?t.exports=e():(r.nacl||(r.nacl={}),r.nacl.util=e())}(this,(function(){"use strict";var t={};function r(t){if(!/^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.test(t))throw new TypeError("invalid encoding")}return t.decodeUTF8=function(t){if("string"!=typeof t)throw new TypeError("expected string");var r,e=unescape(encodeURIComponent(t)),i=new Uint8Array(e.length);for(r=0;r<e.length;r++)i[r]=e.charCodeAt(r);return i},t.encodeUTF8=function(t){var r,e=[];for(r=0;r<t.length;r++)e.push(String.fromCharCode(t[r]));return decodeURIComponent(escape(e.join("")))},"undefined"==typeof atob?void 0!==Buffer.from?(t.encodeBase64=function(t){return Buffer.from(t).toString("base64")},t.decodeBase64=function(t){return r(t),new Uint8Array(Array.prototype.slice.call(Buffer.from(t,"base64"),0))}):(t.encodeBase64=function(t){return new Buffer(t).toString("base64")},t.decodeBase64=function(t){return r(t),new Uint8Array(Array.prototype.slice.call(new Buffer(t,"base64"),0))}):(t.encodeBase64=function(t){var r,e=[],i=t.length;for(r=0;r<i;r++)e.push(String.fromCharCode(t[r]));return btoa(e.join(""))},t.decodeBase64=function(t){r(t);var e,i=atob(t),n=new Uint8Array(i.length);for(e=0;e<i.length;e++)n[e]=i.charCodeAt(e);return n}),t}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
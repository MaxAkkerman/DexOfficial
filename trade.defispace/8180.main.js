(self.webpackChunkmy_swap=self.webpackChunkmy_swap||[]).push([[8180],{58180:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i}),t(35666);var r=t(14113);function a(e,n,t,r,a,c,i){try{var u=e[c](i),o=u.value}catch(e){return void t(e)}u.done?n(o):Promise.resolve(o).then(r,a)}function c(e){return function(){var n=this,t=arguments;return new Promise((function(r,c){var i=e.apply(n,t);function u(e){a(i,r,c,u,o,"next",e)}function o(e){a(i,r,c,u,o,"throw",e)}u(void 0)}))}}t(44431),t(5942),t(51206);const i=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{minimumBalance:"0"},n=e.minimumBalance,t=e.heading,a=e.description,i=e.icon,u=e.html,o=e.button;return function(){var e=c(regeneratorRuntime.mark((function e(c){var s,l,f,m;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(s=c.balance,l=c.BigNumber,f=c.stateSyncStatus,m=c.stateStore,null!==s){e.next=10;break}if(!f.balance){e.next=10;break}return e.prev=3,e.next=6,f.balance;case 6:e.next=10;break;case 8:e.prev=8,e.t0=e.catch(3);case 10:if(!l(m.balance.get()).lt(l(n))){e.next=12;break}return e.abrupt("return",{heading:t||"Get Some ETH",description:a||"Your current account has less than the necessary minimum balance of ".concat(l(n).div(l("1000000000000000000")).toString(10)," ETH."),eventCode:"nsfFail",icon:i||r.j,html:u,button:o});case 12:case"end":return e.stop()}}),e,null,[[3,8]])})));return function(n){return e.apply(this,arguments)}}()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1zd2FwLy4vbm9kZV9tb2R1bGVzL2JuYy1vbmJvYXJkL2Rpc3QvZXNtL2JhbGFuY2UtMjBiZmI1MzkuanMiXSwibmFtZXMiOlsiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwicmVzb2x2ZSIsInJlamVjdCIsIl9uZXh0IiwiX3Rocm93Iiwia2V5IiwiYXJnIiwiaW5mbyIsInZhbHVlIiwiZXJyb3IiLCJkb25lIiwiUHJvbWlzZSIsInRoZW4iLCJfYXN5bmNUb0dlbmVyYXRvciIsImZuIiwic2VsZiIsInRoaXMiLCJhcmdzIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJlcnIiLCJ1bmRlZmluZWQiLCJvcHRpb25zIiwibGVuZ3RoIiwibWluaW11bUJhbGFuY2UiLCJoZWFkaW5nIiwiZGVzY3JpcHRpb24iLCJpY29uIiwiaHRtbCIsImJ1dHRvbiIsIl9yZWYiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJtYXJrIiwiX2NhbGxlZSIsIlN0YXRlQW5kSGVscGVycyIsImJhbGFuY2UiLCJCaWdOdW1iZXIiLCJzdGF0ZVN5bmNTdGF0dXMiLCJzdGF0ZVN0b3JlIiwid3JhcCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJ0MCIsImdldCIsImx0IiwiYWJydXB0IiwiY29uY2F0IiwiZGl2IiwidG9TdHJpbmciLCJldmVudENvZGUiLCJzdG9wIiwiX3giXSwibWFwcGluZ3MiOiJ5SkFBQSxTQUFTQSxFQUFtQkMsRUFBS0MsRUFBU0MsRUFBUUMsRUFBT0MsRUFBUUMsRUFBS0MsR0FBTyxJQUFNLElBQUlDLEVBQU9QLEVBQUlLLEdBQUtDLEdBQVVFLEVBQVFELEVBQUtDLE1BQVMsTUFBT0MsR0FBd0IsWUFBZlAsRUFBT08sR0FBc0JGLEVBQUtHLEtBQVFULEVBQVFPLEdBQWlCRyxRQUFRVixRQUFRTyxHQUFPSSxLQUFLVCxFQUFPQyxHQUU3UCxTQUFTUyxFQUFrQkMsR0FBTSxPQUFPLFdBQWMsSUFBSUMsRUFBT0MsS0FBTUMsRUFBT0MsVUFBVyxPQUFPLElBQUlQLFNBQVEsU0FBVVYsRUFBU0MsR0FBVSxJQUFJRixFQUFNYyxFQUFHSyxNQUFNSixFQUFNRSxHQUFPLFNBQVNkLEVBQU1LLEdBQVNULEVBQW1CQyxFQUFLQyxFQUFTQyxFQUFRQyxFQUFPQyxFQUFRLE9BQVFJLEdBQVUsU0FBU0osRUFBT2dCLEdBQU9yQixFQUFtQkMsRUFBS0MsRUFBU0MsRUFBUUMsRUFBT0MsRUFBUSxRQUFTZ0IsR0FBUWpCLE9BQU1rQixPLDBCQThFalgsUUF0RUEsV0FDRSxJQUFJQyxFQUFVSixVQUFVSyxPQUFTLFFBQXNCRixJQUFqQkgsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLENBQ2hGTSxlQUFnQixLQUVkQSxFQUFpQkYsRUFBUUUsZUFDekJDLEVBQVVILEVBQVFHLFFBQ2xCQyxFQUFjSixFQUFRSSxZQUN0QkMsRUFBT0wsRUFBUUssS0FDZkMsRUFBT04sRUFBUU0sS0FDZkMsRUFBU1AsRUFBUU8sT0FDckIsT0FBb0IsV0FDbEIsSUFBSUMsRUFBT2pCLEVBQWdDa0IsbUJBQW1CQyxNQUFLLFNBQVNDLEVBQVFDLEdBQ2xGLElBQUlDLEVBQVNDLEVBQVdDLEVBQWlCQyxFQUN6QyxPQUFPUCxtQkFBbUJRLE1BQUssU0FBa0JDLEdBQy9DLE9BQ0UsT0FBUUEsRUFBU0MsS0FBT0QsRUFBU0UsTUFDL0IsS0FBSyxFQUdILEdBRkFQLEVBQVVELEVBQWdCQyxRQUFTQyxFQUFZRixFQUFnQkUsVUFBV0MsRUFBa0JILEVBQWdCRyxnQkFBaUJDLEVBQWFKLEVBQWdCSSxXQUV4SSxPQUFaSCxFQUFtQixDQUN2QkssRUFBU0UsS0FBTyxHQUNoQixNQUdGLElBQUtMLEVBQWdCRixRQUFTLENBQzVCSyxFQUFTRSxLQUFPLEdBQ2hCLE1BS0YsT0FGQUYsRUFBU0MsS0FBTyxFQUNoQkQsRUFBU0UsS0FBTyxFQUNUTCxFQUFnQkYsUUFFekIsS0FBSyxFQUNISyxFQUFTRSxLQUFPLEdBQ2hCLE1BRUYsS0FBSyxFQUNIRixFQUFTQyxLQUFPLEVBQ2hCRCxFQUFTRyxHQUFLSCxFQUFnQixNQUFFLEdBRWxDLEtBQUssR0FDSCxJQUFLSixFQUFVRSxFQUFXSCxRQUFRUyxPQUFPQyxHQUFHVCxFQUFVWixJQUFrQixDQUN0RWdCLEVBQVNFLEtBQU8sR0FDaEIsTUFHRixPQUFPRixFQUFTTSxPQUFPLFNBQVUsQ0FDL0JyQixRQUFTQSxHQUFXLGVBQ3BCQyxZQUFhQSxHQUFlLHVFQUF1RXFCLE9BQU9YLEVBQVVaLEdBQWdCd0IsSUFBSVosRUFBVSx3QkFBd0JhLFNBQVMsSUFBSyxTQUN4TEMsVUFBVyxVQUNYdkIsS0FBTUEsR0FBUSxJQUNkQyxLQUFNQSxFQUNOQyxPQUFRQSxJQUdaLEtBQUssR0FDTCxJQUFLLE1BQ0gsT0FBT1csRUFBU1csVUFHckJsQixFQUFTLEtBQU0sQ0FBQyxDQUFDLEVBQUcsU0FHekIsT0FBTyxTQUFVbUIsR0FDZixPQUFPdEIsRUFBS1gsTUFBTUgsS0FBTUUsWUF2RFIiLCJmaWxlIjoiODE4MC5tYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH1cblxuaW1wb3J0ICdyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUnO1xuaW1wb3J0IHsgaiBhcyBiYWxhbmNlSWNvbiB9IGZyb20gJy4vb25ib2FyZC1hMzk3N2I4OC5qcyc7XG5pbXBvcnQgJ2JpZ251bWJlci5qcyc7XG5pbXBvcnQgJ2JuYy1zZGsnO1xuaW1wb3J0ICdib3dzZXInO1xuXG5mdW5jdGlvbiBiYWxhbmNlKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge1xuICAgIG1pbmltdW1CYWxhbmNlOiAnMCdcbiAgfTtcbiAgdmFyIG1pbmltdW1CYWxhbmNlID0gb3B0aW9ucy5taW5pbXVtQmFsYW5jZSxcbiAgICAgIGhlYWRpbmcgPSBvcHRpb25zLmhlYWRpbmcsXG4gICAgICBkZXNjcmlwdGlvbiA9IG9wdGlvbnMuZGVzY3JpcHRpb24sXG4gICAgICBpY29uID0gb3B0aW9ucy5pY29uLFxuICAgICAgaHRtbCA9IG9wdGlvbnMuaHRtbCxcbiAgICAgIGJ1dHRvbiA9IG9wdGlvbnMuYnV0dG9uO1xuICByZXR1cm4gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShTdGF0ZUFuZEhlbHBlcnMpIHtcbiAgICAgIHZhciBiYWxhbmNlLCBCaWdOdW1iZXIsIHN0YXRlU3luY1N0YXR1cywgc3RhdGVTdG9yZTtcbiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgYmFsYW5jZSA9IFN0YXRlQW5kSGVscGVycy5iYWxhbmNlLCBCaWdOdW1iZXIgPSBTdGF0ZUFuZEhlbHBlcnMuQmlnTnVtYmVyLCBzdGF0ZVN5bmNTdGF0dXMgPSBTdGF0ZUFuZEhlbHBlcnMuc3RhdGVTeW5jU3RhdHVzLCBzdGF0ZVN0b3JlID0gU3RhdGVBbmRIZWxwZXJzLnN0YXRlU3RvcmU7XG5cbiAgICAgICAgICAgICAgaWYgKCEoYmFsYW5jZSA9PT0gbnVsbCkpIHtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoIXN0YXRlU3luY1N0YXR1cy5iYWxhbmNlKSB7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDM7XG4gICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2O1xuICAgICAgICAgICAgICByZXR1cm4gc3RhdGVTeW5jU3RhdHVzLmJhbGFuY2U7XG5cbiAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEwO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gODtcbiAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFtcImNhdGNoXCJdKDMpO1xuXG4gICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICBpZiAoIUJpZ051bWJlcihzdGF0ZVN0b3JlLmJhbGFuY2UuZ2V0KCkpLmx0KEJpZ051bWJlcihtaW5pbXVtQmFsYW5jZSkpKSB7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcInJldHVyblwiLCB7XG4gICAgICAgICAgICAgICAgaGVhZGluZzogaGVhZGluZyB8fCAnR2V0IFNvbWUgRVRIJyxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24gfHwgXCJZb3VyIGN1cnJlbnQgYWNjb3VudCBoYXMgbGVzcyB0aGFuIHRoZSBuZWNlc3NhcnkgbWluaW11bSBiYWxhbmNlIG9mIFwiLmNvbmNhdChCaWdOdW1iZXIobWluaW11bUJhbGFuY2UpLmRpdihCaWdOdW1iZXIoJzEwMDAwMDAwMDAwMDAwMDAwMDAnKSkudG9TdHJpbmcoMTApLCBcIiBFVEguXCIpLFxuICAgICAgICAgICAgICAgIGV2ZW50Q29kZTogJ25zZkZhaWwnLFxuICAgICAgICAgICAgICAgIGljb246IGljb24gfHwgYmFsYW5jZUljb24sXG4gICAgICAgICAgICAgICAgaHRtbDogaHRtbCxcbiAgICAgICAgICAgICAgICBidXR0b246IGJ1dHRvblxuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMywgOF1dKTtcbiAgICB9KSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKF94KSB7XG4gICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFsYW5jZTsiXSwic291cmNlUm9vdCI6IiJ9
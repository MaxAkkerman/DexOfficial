(self.webpackChunkmy_swap=self.webpackChunkmy_swap||[]).push([[215],{66312:(e,t,n)=>{const r=n(27293);e.exports=class extends r{constructor(e,t,n){super(),this.targets=t,this.options=n,this.connections=e,this.connected=!1,this.status="loading",this.interval=n.interval||5e3,this.name=n.name||"default",this.inSetup=!0,this.connect()}connect(e=0){if(this.connection&&"connected"===this.connection.status&&e>=this.connection.index);else if(0===this.targets.length);else{const{protocol:t,location:n}=this.targets[e];this.connection=this.connections[t](n,this.options),this.connection.on("error",(t=>this.connected?this.listenerCount("error")?this.emit("error",t):void console.warn("eth-provider - Uncaught connection error: "+t.message):this.connectionError(e,t))),this.connection.on("close",(()=>{this.connected=!1,this.emitClose(),this.closing||this.refresh()})),this.connection.on("connect",(()=>{this.connection.target=this.targets[e],this.connection.index=e,this.targets[e].status=this.connection.status,this.connected=!0,this.inSetup=!1,this.emit("connect")})),this.connection.on("data",(e=>this.emit("data",e))),this.connection.on("payload",(e=>this.emit("payload",e)))}}refresh(e=this.interval){clearTimeout(this.connectTimer),this.connectTimer=setTimeout((()=>this.connect()),e)}connectionError(e,t){this.targets[e].status=t,this.targets.length-1===e?(this.inSetup=!1,this.refresh()):this.connect(++e)}emitClose(){this.emit("close")}close(){this.closing=!0,this.connection&&this.connection.close&&!this.connection.closed?this.connection.close():this.emit("close"),clearTimeout(this.connectTimer),clearTimeout(this.setupTimer)}error(e,t,n=-1){this.emit("payload",{id:e.id,jsonrpc:e.jsonrpc,error:{message:t,code:n}})}send(e){this.inSetup?this.setupTimer=setTimeout((()=>this.send(e)),100):this.connection.closed?this.error(e,"Not connected",4900):this.connection.send(e)}}},215:(e,t,n)=>{const r=n(80433),i=n(35487),s=n(56746),o={ethereum:"undefined"!=typeof window&&void 0!==window.ethereum?window.ethereum:null,web3:"undefined"!=typeof window&&void 0!==window.web3?window.web3.currentProvider:null},c="undefined"!=typeof window&&void 0!==window.WebSocket?window.WebSocket:null,a="undefined"!=typeof window&&void 0!==window.XMLHttpRequest?window.XMLHttpRequest:null;o.ethereum&&(o.ethereum.__isProvider=!0);const h={injected:o.ethereum||n(57713)(o.web3),ipc:n(54195)("IPC connections are unavliable in the browser"),ws:n(37397)(c),http:n(84278)(a)};e.exports=(e,t)=>{!e||Array.isArray(e)||"object"!=typeof e||t||(t=e,e=void 0),e||(e=["injected","frame"]),t||(t={}),(e=[].concat(e)).forEach((e=>{if(e.startsWith("alchemy")&&!t.alchemyId)throw new Error("Alchemy was included as a connection target but no Alchemy project ID was passed in options e.g. { alchemyId: '123abc' }");if(e.startsWith("infura")&&!t.infuraId)throw new Error("Infura was included as a connection target but no Infura project ID was passed in options e.g. { infuraId: '123abc' }")}));const n=s(t);return i(h,r(e,n),t)}},84278:(e,t,n)=>{const r=n(27293),{v4:i}=n(42137);let s;class o extends r{constructor(e,t,n){super(),s=e,this.options=n,this.connected=!1,this.subscriptions=!1,this.status="loading",this.url=t,this.pollId=i(),setTimeout((()=>this.create()),0),this._emit=(...e)=>this.closed?null:this.emit(...e)}create(){if(!s)return this._emit("error",new Error("No HTTP transport available"));this.on("error",(()=>{this.connected&&this.close()})),this.init()}init(){this.send({jsonrpc:"2.0",method:"net_version",params:[],id:1},((e,t)=>{if(e)return this._emit("error",e);this.connected=!0,this._emit("connect"),this.send({jsonrpc:"2.0",id:1,method:"eth_pollSubscriptions",params:[this.pollId,"immediate"]},((e,t)=>{e||(this.subscriptions=!0,this.pollSubscriptions())}))}))}pollSubscriptions(){this.send({jsonrpc:"2.0",id:1,method:"eth_pollSubscriptions",params:[this.pollId]},((e,t)=>{if(e)return this.subscriptionTimeout=setTimeout((()=>this.pollSubscriptions()),1e4),this._emit("error",e);this.closed||(this.subscriptionTimeout=this.pollSubscriptions()),t&&t.map((e=>{let t;try{t=JSON.parse(e)}catch(e){t=!1}return t})).filter((e=>e)).forEach((e=>this._emit("payload",e)))}))}close(){this.closed=!0,this._emit("close"),clearTimeout(this.subscriptionTimeout),this.removeAllListeners()}filterStatus(e){if(e.status>=200&&e.status<300)return e;const t=new Error(e.statusText);throw t.res=e,t.message}error(e,t,n=-1){this._emit("payload",{id:e.id,jsonrpc:e.jsonrpc,error:{message:t,code:n}})}send(e,t){if(this.closed)return this.error(e,"Not connected");if("eth_subscribe"===e.method){if(!this.subscriptions)return this.error(e,"Subscriptions are not supported by this HTTP endpoint");e.pollId=this.pollId}const n=new s;let r=!1;const i=(i,s)=>{if(!r)if(n.abort(),r=!0,t)t(i,s);else{const{id:t,jsonrpc:n}=e,r=i?{id:t,jsonrpc:n,error:{message:i.message,code:i.code}}:{id:t,jsonrpc:n,result:s};this._emit("payload",r)}};n.open("POST",this.url,!0),n.setRequestHeader("Content-Type","application/json"),n.timeout=6e4,n.onerror=i,n.ontimeout=i,n.onreadystatechange=()=>{if(4===n.readyState)try{const e=JSON.parse(n.responseText);i(e.error,e.result)}catch(e){i(e)}},n.send(JSON.stringify(e))}}e.exports=e=>(t,n)=>new o(e,t,n)},57713:(e,t,n)=>{const r=n(27293);class i extends r{constructor(e,t){super(),e?setTimeout((()=>this.emit("error",new Error("Injected web3 provider is not currently supported"))),0):setTimeout((()=>this.emit("error",new Error("No injected provider found"))),0)}}e.exports=e=>t=>new i(e,t)},54195:(e,t,n)=>{const r=n(27293);class i extends r{constructor(e){super(),setTimeout((()=>this.emit("error",new Error(e))),0)}}e.exports=e=>()=>new i(e)},37397:(e,t,n)=>{const r=n(27293),i=n(48868);let s;class o extends r{constructor(e,t,n){super(),s=e,setTimeout((()=>this.create(t,n)),0)}create(e,t){s||this.emit("error",new Error("No WebSocket transport available"));try{this.socket=new s(e,[],{origin:t.origin})}catch(e){return this.emit("error",e)}this.socket.addEventListener("error",(e=>this.emit("error",e))),this.socket.addEventListener("open",(()=>{this.emit("connect"),this.socket.addEventListener("message",(e=>{const t="string"==typeof e.data?e.data:"";i(t,((e,t)=>{e||t.forEach((e=>{Array.isArray(e)?e.forEach((e=>this.emit("payload",e))):this.emit("payload",e)}))}))})),this.socket.addEventListener("close",(()=>this.onClose()))}))}onClose(){this.socket=null,this.closed=!0,this.emit("close"),this.removeAllListeners()}close(){this.socket?this.socket.close():this.onClose()}error(e,t,n=-1){this.emit("payload",{id:e.id,jsonrpc:e.jsonrpc,error:{message:t,code:n}})}send(e){this.socket&&this.socket.readyState===this.socket.CONNECTING?setTimeout((t=>this.send(e)),10):!this.socket||this.socket.readyState>1?(this.connected=!1,this.error(e,"Not connected")):this.socket.send(JSON.stringify(e))}}e.exports=e=>(t,n)=>new o(e,t,n)},27293:e=>{"use strict";var t,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function s(){s.init.call(this)}e.exports=s,e.exports.once=function(e,t){return new Promise((function(n,r){function i(){void 0!==s&&e.removeListener("error",s),n([].slice.call(arguments))}var s;"error"!==t&&(s=function(n){e.removeListener(t,i),r(n)},e.once("error",s)),e.once(t,i)}))},s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var o=10;function c(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function a(e){return void 0===e._maxListeners?s.defaultMaxListeners:e._maxListeners}function h(e,t,n,r){var i,s,o,h;if(c(n),void 0===(s=e._events)?(s=e._events=Object.create(null),e._eventsCount=0):(void 0!==s.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),s=e._events),o=s[t]),void 0===o)o=s[t]=n,++e._eventsCount;else if("function"==typeof o?o=s[t]=r?[n,o]:[o,n]:r?o.unshift(n):o.push(n),(i=a(e))>0&&o.length>i&&!o.warned){o.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=o.length,h=u,console&&console.warn&&console.warn(h)}return e}function u(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function l(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=u.bind(r);return i.listener=n,r.wrapFn=i,i}function p(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):f(i,i.length)}function d(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function f(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");o=e}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},s.prototype.getMaxListeners=function(){return a(this)},s.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var i="error"===e,s=this._events;if(void 0!==s)i=i&&void 0===s.error;else if(!i)return!1;if(i){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var c=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw c.context=o,c}var a=s[e];if(void 0===a)return!1;if("function"==typeof a)r(a,this,t);else{var h=a.length,u=f(a,h);for(n=0;n<h;++n)r(u[n],this,t)}return!0},s.prototype.addListener=function(e,t){return h(this,e,t,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(e,t){return h(this,e,t,!0)},s.prototype.once=function(e,t){return c(t),this.on(e,l(this,e,t)),this},s.prototype.prependOnceListener=function(e,t){return c(t),this.prependListener(e,l(this,e,t)),this},s.prototype.removeListener=function(e,t){var n,r,i,s,o;if(c(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,s=n.length-1;s>=0;s--)if(n[s]===t||n[s].listener===t){o=n[s].listener,i=s;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,o||t)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,s=Object.keys(n);for(r=0;r<s.length;++r)"removeListener"!==(i=s[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},s.prototype.listeners=function(e){return p(this,e,!0)},s.prototype.rawListeners=function(e){return p(this,e,!1)},s.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):d.call(e,t)},s.prototype.listenerCount=d,s.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},42137:(e,t,n)=>{"use strict";var r;n.r(t),n.d(t,{NIL:()=>A,parse:()=>m,stringify:()=>u,v1:()=>v,v3:()=>x,v4:()=>I,v5:()=>S,validate:()=>c,version:()=>T});var i=new Uint8Array(16);function s(){if(!r&&!(r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return r(i)}const o=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,c=function(e){return"string"==typeof e&&o.test(e)};for(var a=[],h=0;h<256;++h)a.push((h+256).toString(16).substr(1));const u=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(a[e[t+0]]+a[e[t+1]]+a[e[t+2]]+a[e[t+3]]+"-"+a[e[t+4]]+a[e[t+5]]+"-"+a[e[t+6]]+a[e[t+7]]+"-"+a[e[t+8]]+a[e[t+9]]+"-"+a[e[t+10]]+a[e[t+11]]+a[e[t+12]]+a[e[t+13]]+a[e[t+14]]+a[e[t+15]]).toLowerCase();if(!c(n))throw TypeError("Stringified UUID is invalid");return n};var l,p,d=0,f=0;const v=function(e,t,n){var r=t&&n||0,i=t||new Array(16),o=(e=e||{}).node||l,c=void 0!==e.clockseq?e.clockseq:p;if(null==o||null==c){var a=e.random||(e.rng||s)();null==o&&(o=l=[1|a[0],a[1],a[2],a[3],a[4],a[5]]),null==c&&(c=p=16383&(a[6]<<8|a[7]))}var h=void 0!==e.msecs?e.msecs:Date.now(),v=void 0!==e.nsecs?e.nsecs:f+1,m=h-d+(v-f)/1e4;if(m<0&&void 0===e.clockseq&&(c=c+1&16383),(m<0||h>d)&&void 0===e.nsecs&&(v=0),v>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");d=h,f=v,p=c;var y=(1e4*(268435455&(h+=122192928e5))+v)%4294967296;i[r++]=y>>>24&255,i[r++]=y>>>16&255,i[r++]=y>>>8&255,i[r++]=255&y;var w=h/4294967296*1e4&268435455;i[r++]=w>>>8&255,i[r++]=255&w,i[r++]=w>>>24&15|16,i[r++]=w>>>16&255,i[r++]=c>>>8|128,i[r++]=255&c;for(var b=0;b<6;++b)i[r+b]=o[b];return t||u(i)},m=function(e){if(!c(e))throw TypeError("Invalid UUID");var t,n=new Uint8Array(16);return n[0]=(t=parseInt(e.slice(0,8),16))>>>24,n[1]=t>>>16&255,n[2]=t>>>8&255,n[3]=255&t,n[4]=(t=parseInt(e.slice(9,13),16))>>>8,n[5]=255&t,n[6]=(t=parseInt(e.slice(14,18),16))>>>8,n[7]=255&t,n[8]=(t=parseInt(e.slice(19,23),16))>>>8,n[9]=255&t,n[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,n[11]=t/4294967296&255,n[12]=t>>>24&255,n[13]=t>>>16&255,n[14]=t>>>8&255,n[15]=255&t,n};function y(e,t,n){function r(e,r,i,s){if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));for(var t=[],n=0;n<e.length;++n)t.push(e.charCodeAt(n));return t}(e)),"string"==typeof r&&(r=m(r)),16!==r.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var o=new Uint8Array(16+e.length);if(o.set(r),o.set(e,r.length),(o=n(o))[6]=15&o[6]|t,o[8]=63&o[8]|128,i){s=s||0;for(var c=0;c<16;++c)i[s+c]=o[c];return i}return u(o)}try{r.name=e}catch(e){}return r.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",r.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",r}function w(e){return 14+(e+64>>>9<<4)+1}function b(e,t){var n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function g(e,t,n,r,i,s){return b((o=b(b(t,e),b(r,s)))<<(c=i)|o>>>32-c,n);var o,c}function _(e,t,n,r,i,s,o){return g(t&n|~t&r,e,t,i,s,o)}function L(e,t,n,r,i,s,o){return g(t&r|n&~r,e,t,i,s,o)}function C(e,t,n,r,i,s,o){return g(t^n^r,e,t,i,s,o)}function j(e,t,n,r,i,s,o){return g(n^(t|~r),e,t,i,s,o)}const x=y("v3",48,(function(e){if("string"==typeof e){var t=unescape(encodeURIComponent(e));e=new Uint8Array(t.length);for(var n=0;n<t.length;++n)e[n]=t.charCodeAt(n)}return function(e){for(var t=[],n=32*e.length,r="0123456789abcdef",i=0;i<n;i+=8){var s=e[i>>5]>>>i%32&255,o=parseInt(r.charAt(s>>>4&15)+r.charAt(15&s),16);t.push(o)}return t}(function(e,t){e[t>>5]|=128<<t%32,e[w(t)-1]=t;for(var n=1732584193,r=-271733879,i=-1732584194,s=271733878,o=0;o<e.length;o+=16){var c=n,a=r,h=i,u=s;n=_(n,r,i,s,e[o],7,-680876936),s=_(s,n,r,i,e[o+1],12,-389564586),i=_(i,s,n,r,e[o+2],17,606105819),r=_(r,i,s,n,e[o+3],22,-1044525330),n=_(n,r,i,s,e[o+4],7,-176418897),s=_(s,n,r,i,e[o+5],12,1200080426),i=_(i,s,n,r,e[o+6],17,-1473231341),r=_(r,i,s,n,e[o+7],22,-45705983),n=_(n,r,i,s,e[o+8],7,1770035416),s=_(s,n,r,i,e[o+9],12,-1958414417),i=_(i,s,n,r,e[o+10],17,-42063),r=_(r,i,s,n,e[o+11],22,-1990404162),n=_(n,r,i,s,e[o+12],7,1804603682),s=_(s,n,r,i,e[o+13],12,-40341101),i=_(i,s,n,r,e[o+14],17,-1502002290),n=L(n,r=_(r,i,s,n,e[o+15],22,1236535329),i,s,e[o+1],5,-165796510),s=L(s,n,r,i,e[o+6],9,-1069501632),i=L(i,s,n,r,e[o+11],14,643717713),r=L(r,i,s,n,e[o],20,-373897302),n=L(n,r,i,s,e[o+5],5,-701558691),s=L(s,n,r,i,e[o+10],9,38016083),i=L(i,s,n,r,e[o+15],14,-660478335),r=L(r,i,s,n,e[o+4],20,-405537848),n=L(n,r,i,s,e[o+9],5,568446438),s=L(s,n,r,i,e[o+14],9,-1019803690),i=L(i,s,n,r,e[o+3],14,-187363961),r=L(r,i,s,n,e[o+8],20,1163531501),n=L(n,r,i,s,e[o+13],5,-1444681467),s=L(s,n,r,i,e[o+2],9,-51403784),i=L(i,s,n,r,e[o+7],14,1735328473),n=C(n,r=L(r,i,s,n,e[o+12],20,-1926607734),i,s,e[o+5],4,-378558),s=C(s,n,r,i,e[o+8],11,-2022574463),i=C(i,s,n,r,e[o+11],16,1839030562),r=C(r,i,s,n,e[o+14],23,-35309556),n=C(n,r,i,s,e[o+1],4,-1530992060),s=C(s,n,r,i,e[o+4],11,1272893353),i=C(i,s,n,r,e[o+7],16,-155497632),r=C(r,i,s,n,e[o+10],23,-1094730640),n=C(n,r,i,s,e[o+13],4,681279174),s=C(s,n,r,i,e[o],11,-358537222),i=C(i,s,n,r,e[o+3],16,-722521979),r=C(r,i,s,n,e[o+6],23,76029189),n=C(n,r,i,s,e[o+9],4,-640364487),s=C(s,n,r,i,e[o+12],11,-421815835),i=C(i,s,n,r,e[o+15],16,530742520),n=j(n,r=C(r,i,s,n,e[o+2],23,-995338651),i,s,e[o],6,-198630844),s=j(s,n,r,i,e[o+7],10,1126891415),i=j(i,s,n,r,e[o+14],15,-1416354905),r=j(r,i,s,n,e[o+5],21,-57434055),n=j(n,r,i,s,e[o+12],6,1700485571),s=j(s,n,r,i,e[o+3],10,-1894986606),i=j(i,s,n,r,e[o+10],15,-1051523),r=j(r,i,s,n,e[o+1],21,-2054922799),n=j(n,r,i,s,e[o+8],6,1873313359),s=j(s,n,r,i,e[o+15],10,-30611744),i=j(i,s,n,r,e[o+6],15,-1560198380),r=j(r,i,s,n,e[o+13],21,1309151649),n=j(n,r,i,s,e[o+4],6,-145523070),s=j(s,n,r,i,e[o+11],10,-1120210379),i=j(i,s,n,r,e[o+2],15,718787259),r=j(r,i,s,n,e[o+9],21,-343485551),n=b(n,c),r=b(r,a),i=b(i,h),s=b(s,u)}return[n,r,i,s]}(function(e){if(0===e.length)return[];for(var t=8*e.length,n=new Uint32Array(w(t)),r=0;r<t;r+=8)n[r>>5]|=(255&e[r/8])<<r%32;return n}(e),8*e.length))})),I=function(e,t,n){var r=(e=e||{}).random||(e.rng||s)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(var i=0;i<16;++i)t[n+i]=r[i];return t}return u(r)};function k(e,t,n,r){switch(e){case 0:return t&n^~t&r;case 1:return t^n^r;case 2:return t&n^t&r^n&r;case 3:return t^n^r}}function E(e,t){return e<<t|e>>>32-t}const S=y("v5",80,(function(e){var t=[1518500249,1859775393,2400959708,3395469782],n=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){var r=unescape(encodeURIComponent(e));e=[];for(var i=0;i<r.length;++i)e.push(r.charCodeAt(i))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);for(var s=e.length/4+2,o=Math.ceil(s/16),c=new Array(o),a=0;a<o;++a){for(var h=new Uint32Array(16),u=0;u<16;++u)h[u]=e[64*a+4*u]<<24|e[64*a+4*u+1]<<16|e[64*a+4*u+2]<<8|e[64*a+4*u+3];c[a]=h}c[o-1][14]=8*(e.length-1)/Math.pow(2,32),c[o-1][14]=Math.floor(c[o-1][14]),c[o-1][15]=8*(e.length-1)&4294967295;for(var l=0;l<o;++l){for(var p=new Uint32Array(80),d=0;d<16;++d)p[d]=c[l][d];for(var f=16;f<80;++f)p[f]=E(p[f-3]^p[f-8]^p[f-14]^p[f-16],1);for(var v=n[0],m=n[1],y=n[2],w=n[3],b=n[4],g=0;g<80;++g){var _=Math.floor(g/20),L=E(v,5)+k(_,m,y,w)+b+t[_]+p[g]>>>0;b=w,w=y,y=E(m,30)>>>0,m=v,v=L}n[0]=n[0]+v>>>0,n[1]=n[1]+m>>>0,n[2]=n[2]+y>>>0,n[3]=n[3]+w>>>0,n[4]=n[4]+b>>>0}return[n[0]>>24&255,n[0]>>16&255,n[0]>>8&255,255&n[0],n[1]>>24&255,n[1]>>16&255,n[1]>>8&255,255&n[1],n[2]>>24&255,n[2]>>16&255,n[2]>>8&255,255&n[2],n[3]>>24&255,n[3]>>16&255,n[3]>>8&255,255&n[3],n[4]>>24&255,n[4]>>16&255,n[4]>>8&255,255&n[4]]})),A="00000000-0000-0000-0000-000000000000",T=function(e){if(!c(e))throw TypeError("Invalid UUID");return parseInt(e.substr(14,1),16)}},48868:e=>{let t,n;e.exports=(e,r)=>{const i=[];e.replace(/\}[\n\r]?\{/g,"}|--|{").replace(/\}\][\n\r]?\[\{/g,"}]|--|[{").replace(/\}[\n\r]?\[\{/g,"}|--|[{").replace(/\}\][\n\r]?\{/g,"}]|--|{").split("|--|").forEach((e=>{let s;t&&(e=t+e);try{s=JSON.parse(e)}catch(i){return t=e,clearTimeout(n),void(n=setTimeout((()=>r(new Error("Parse response timeout"))),15e3))}clearTimeout(n),t=null,s&&i.push(s)})),r(null,i)}},56746:e=>{e.exports=(e={})=>({injected:["injected"],frame:["ws://127.0.0.1:1248","http://127.0.0.1:1248"],direct:["ws://127.0.0.1:8546","http://127.0.0.1:8545"],infura:[`wss://mainnet.infura.io/ws/v3/${e.infuraId}`,`https://mainnet.infura.io/v3/${e.infuraId}`],alchemy:[`wss://eth-mainnet.ws.alchemyapi.io/v2/${e.alchemyId}`,`https://eth-mainnet.alchemyapi.io/v2/${e.alchemyId}`],infuraRopsten:[`wss://ropsten.infura.io/ws/v3/${e.infuraId}`,`https://ropsten.infura.io/v3/${e.infuraId}`],alchemyRopsten:[`wss://eth-ropsten.ws.alchemyapi.io/v2/${e.alchemyId}`,`https://eth-ropsten.alchemyapi.io/v2/${e.alchemyId}`],infuraRinkeby:[`wss://rinkeby.infura.io/ws/v3/${e.infuraId}`,`https://rinkeby.infura.io/v3/${e.infuraId}`],alchemyRinkeby:[`wss://eth-rinkeby.ws.alchemyapi.io/v2/${e.alchemyId}`,`https://eth-rinkeby.alchemyapi.io/v2/${e.alchemyId}`],infuraKovan:[`wss://kovan.infura.io/ws/v3/${e.infuraId}`,`https://kovan.infura.io/v3/${e.infuraId}`],alchemyKovan:[`wss://eth-kovan.ws.alchemyapi.io/v2/${e.alchemyId}`,`https://eth-kovan.alchemyapi.io/v2/${e.alchemyId}`],infuraGoerli:[`wss://goerli.infura.io/ws/v3/${e.infuraId}`,`https://goerli.infura.io/ws/v3/${e.infuraId}`],alchemyGoerli:[`wss://eth-goerli.ws.alchemyapi.io/v2/${e.alchemyId}`,`https://eth-goerli.alchemyapi.io/v2/${e.alchemyId}`],idChain:["wss://idchain.one/ws/"],xDai:["https://rpc.xdaichain.com","https://dai.poa.network"],matic:["https://rpc-mainnet.maticvigil.com"]})},35487:(e,t,n)=>{const r=n(27293),i=n(43202),s=n(66312),o=e=>{function t(t){e.status=t,e instanceof r&&e.emit("status",t)}async function n(){if(e.inSetup)return setTimeout(n,1e3);try{await e.send("eth_syncing")?(t("syncing"),setTimeout((()=>n()),5e3)):t("connected")}catch(e){t("disconnected")}}return t("loading"),n(),e.on("connect",(()=>n())),e.on("close",(()=>t("disconnected"))),e};e.exports=(e,t,n)=>{if(e.injected.__isProvider&&t.map((e=>e.type)).indexOf("injected")>-1)return delete e.injected.__isProvider,o(e.injected);const r=new i(new s(e,t,n));return r.setMaxListeners(128),o(r)}},80433:e=>{const t=e=>"injected"===e?"injected":e.endsWith(".ipc")?"ipc":e.startsWith("wss://")||e.startsWith("ws://")?"ws":e.startsWith("https://")||e.startsWith("http://")?"http":"";e.exports=(e,n)=>[].concat(...[].concat(e).map((e=>n[e]?n[e].map((n=>({type:e,location:n,protocol:t(n)}))):{type:"custom",location:e,protocol:t(e)}))).filter((e=>!(!e.protocol&&"injected"!==e.type&&(console.log('eth-provider | Invalid provider preset/location: "'+e.location+'"'),1))))},43202:(e,t,n)=>{const r=n(34670);e.exports=class extends r{constructor(e){super(),this.enable=this.enable.bind(this),this._send=this._send.bind(this),this.send=this.send.bind(this),this._sendBatch=this._sendBatch.bind(this),this.subscribe=this.subscribe.bind(this),this.unsubscribe=this.unsubscribe.bind(this),this.sendAsync=this.sendAsync.bind(this),this.sendAsyncBatch=this.sendAsyncBatch.bind(this),this.isConnected=this.isConnected.bind(this),this.close=this.close.bind(this),this.request=this.request.bind(this),this.connected=!1,this.nextId=0,this.promises={},this.subscriptions=[],this.connection=e,this.connection.on("connect",(()=>this.checkConnection())),this.connection.on("close",(()=>{this.connected=!1,this.emit("close"),this.emit("disconnect")})),this.connection.on("payload",(e=>{const{id:t,method:n,error:r,result:i}=e;void 0!==t?this.promises[t]&&(e.error?this.promises[t].reject(r):this.promises[t].resolve(i),delete this.promises[t]):n&&n.indexOf("_subscription")>-1&&(this.emit(e.params.subscription,e.params.result),this.emit(n,e.params),this.emit("message",{type:e.method,data:{subscription:e.params.subscription,result:e.params.result}}),this.emit("data",e))})),this.on("newListener",((e,t)=>{"chainChanged"===e&&!this.attemptedChainSubscription&&this.connected?this.startChainSubscription():"accountsChanged"===e&&!this.attemptedAccountsSubscription&&this.connected?this.startAccountsSubscription():"networkChanged"===e&&!this.attemptedNetworkSubscription&&this.connected&&(this.startNetworkSubscription(),console.warn("The networkChanged event is being deprecated, use chainChainged instead"))}))}async checkConnection(){try{this.emit("connect",await this._send("net_version")),this.connected=!0,this.listenerCount("networkChanged")&&!this.attemptedNetworkSubscription&&this.startNetworkSubscription(),this.listenerCount("chainChanged")&&!this.attemptedChainSubscription&&this.startNetworkSubscription(),this.listenerCount("accountsChanged")&&!this.attemptedAccountsSubscription&&this.startAccountsSubscription()}catch(e){this.connected=!1}}async startNetworkSubscription(){this.attemptedNetworkSubscription=!0;try{const e=await this.subscribe("eth_subscribe","networkChanged");this.on(e,(e=>this.emit("networkChanged",e)))}catch(e){console.warn("Unable to subscribe to networkChanged",e)}}async startChainSubscription(){this.attemptedChainSubscription=!0;try{const e=await this.subscribe("eth_subscribe","chainChanged");this.on(e,(e=>this.emit("chainChanged",e)))}catch(e){console.warn("Unable to subscribe to chainChanged",e)}}async startAccountsSubscription(){this.attemptedAccountsSubscription=!0;try{const e=await this.subscribe("eth_subscribe","accountsChanged");this.on(e,(e=>this.emit("accountsChanged",e)))}catch(e){console.warn("Unable to subscribe to accountsChanged",e)}}enable(){return new Promise(((e,t)=>{this._send("eth_accounts").then((n=>{if(n.length>0)this.accounts=n,this.coinbase=n[0],this.emit("enable"),e(n);else{const e=new Error("User Denied Full Provider");e.code=4001,t(e)}})).catch(t)}))}_send(e,t=[]){return new Promise(((n,r)=>{let i;"object"==typeof e&&null!==e?(i=e,i.params=i.params||[],i.jsonrpc="2.0",i.id=this.nextId++):i={jsonrpc:"2.0",id:this.nextId++,method:e,params:t},this.promises[i.id]={resolve:n,reject:r},i.method&&"string"==typeof i.method?i.params instanceof Array?this.connection.send(i):(this.promises[i.id].reject(new Error("Params is not a valid array.")),delete this.promises[i.id]):(this.promises[i.id].reject(new Error("Method is not a valid string.")),delete this.promises[i.id])}))}send(...e){return this._send(...e)}_sendBatch(e){return Promise.all(e.map((e=>this._send(e.method,e.params))))}subscribe(e,t,n=[]){return this._send(e,[t,...n]).then((e=>(this.subscriptions.push(e),e)))}unsubscribe(e,t){return this._send(e,[t]).then((e=>{if(e)return this.subscriptions=this.subscriptions.filter((e=>e!==t)),this.removeAllListeners(t),e}))}sendAsync(e,t){return t&&"function"==typeof t?e?(e.jsonrpc="2.0",e.id=e.id||this.nextId++,e instanceof Array?this.sendAsyncBatch(e,t):this._send(e.method,e.params).then((n=>{t(null,{id:e.id,jsonrpc:e.jsonrpc,result:n})})).catch((e=>{t(e)}))):t(new Error("Invalid Payload")):t(new Error("Invalid or undefined callback provided to sendAsync"))}sendAsyncBatch(e,t){return this._sendBatch(e).then((n=>{const r=n.map(((t,n)=>({id:e[n].id,jsonrpc:e[n].jsonrpc,result:t})));t(null,r)})).catch((e=>{t(e)}))}isConnected(){return this.connected}close(){this.connection&&this.connection.close&&this.connection.close(),this.connected=!1;const e=new Error("Provider closed, subscription lost, please subscribe again.");this.subscriptions.forEach((t=>this.emit(t,e))),this.subscriptions=[]}request(e){return this._send(e.method,e.params)}}},34670:e=>{"use strict";var t,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function s(){s.init.call(this)}e.exports=s,e.exports.once=function(e,t){return new Promise((function(n,r){function i(){void 0!==s&&e.removeListener("error",s),n([].slice.call(arguments))}var s;"error"!==t&&(s=function(n){e.removeListener(t,i),r(n)},e.once("error",s)),e.once(t,i)}))},s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var o=10;function c(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function a(e){return void 0===e._maxListeners?s.defaultMaxListeners:e._maxListeners}function h(e,t,n,r){var i,s,o,h;if(c(n),void 0===(s=e._events)?(s=e._events=Object.create(null),e._eventsCount=0):(void 0!==s.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),s=e._events),o=s[t]),void 0===o)o=s[t]=n,++e._eventsCount;else if("function"==typeof o?o=s[t]=r?[n,o]:[o,n]:r?o.unshift(n):o.push(n),(i=a(e))>0&&o.length>i&&!o.warned){o.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=o.length,h=u,console&&console.warn&&console.warn(h)}return e}function u(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function l(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=u.bind(r);return i.listener=n,r.wrapFn=i,i}function p(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):f(i,i.length)}function d(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function f(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");o=e}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},s.prototype.getMaxListeners=function(){return a(this)},s.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var i="error"===e,s=this._events;if(void 0!==s)i=i&&void 0===s.error;else if(!i)return!1;if(i){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var c=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw c.context=o,c}var a=s[e];if(void 0===a)return!1;if("function"==typeof a)r(a,this,t);else{var h=a.length,u=f(a,h);for(n=0;n<h;++n)r(u[n],this,t)}return!0},s.prototype.addListener=function(e,t){return h(this,e,t,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(e,t){return h(this,e,t,!0)},s.prototype.once=function(e,t){return c(t),this.on(e,l(this,e,t)),this},s.prototype.prependOnceListener=function(e,t){return c(t),this.prependListener(e,l(this,e,t)),this},s.prototype.removeListener=function(e,t){var n,r,i,s,o;if(c(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,s=n.length-1;s>=0;s--)if(n[s]===t||n[s].listener===t){o=n[s].listener,i=s;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,o||t)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,s=Object.keys(n);for(r=0;r<s.length;++r)"removeListener"!==(i=s[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},s.prototype.listeners=function(e){return p(this,e,!0)},s.prototype.rawListeners=function(e){return p(this,e,!1)},s.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):d.call(e,t)},s.prototype.listenerCount=d,s.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
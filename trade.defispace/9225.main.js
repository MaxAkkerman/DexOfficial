(self.webpackChunkmy_swap=self.webpackChunkmy_swap||[]).push([[9225],{49225:(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>p}),r(35666);var n=r(14113),i=(r(44431),r(5942),r(51206),r(12906)),o=r.n(i),s=r(74730),a=r.n(s),u=r(78747),f=r.n(u),h=r(78191),l=r.n(h),c=r(28260),d=r.n(c);const p=function(t){var e=t.getAccounts,r=t.signTransaction,i=t.rpcUrl,s=t.processMessage,u=t.processPersonalMessage,h=t.signMessage,c=t.signPersonalMessage,p=t.signTypedMessage,m=(0,n.g)(n.a).blockPollingInterval,g=e&&new(f())({getAccounts:e,signTransaction:r,processMessage:s,processPersonalMessage:u,signMessage:h,signPersonalMessage:c,signTypedMessage:p}),v=new(a())({rpcUrl:i.includes("http")?i:"https://".concat(i)}),y=new(o())({pollingInterval:m});return y.addProvider(new(l())),y.addProvider(new(d())),g&&y.addProvider(g),y.addProvider(v),y.start(),y.on("error",console.error),y}},3097:(t,e,r)=>{const{EthereumRpcError:n,EthereumProviderError:i}=r(87325),{serializeError:o,getMessageFromCode:s}=r(65019),a=r(35599),u=r(47881);t.exports={ethErrors:a,EthereumRpcError:n,EthereumProviderError:i,serializeError:o,getMessageFromCode:s,ERROR_CODES:u}},87325:(t,e,r)=>{const n=r(4445);class i extends Error{constructor(t,e,r){if(!Number.isInteger(t))throw new Error('"code" must be an integer.');if(!e||"string"!=typeof e)throw new Error('"message" must be a nonempty string.');super(e),this.code=t,void 0!==r&&(this.data=r)}serialize(){const t={code:this.code,message:this.message};return void 0!==this.data&&(t.data=this.data),this.stack&&(t.stack=this.stack),t}toString(){return n(this.serialize(),o,2)}}function o(t,e){if("[Circular]"!==e)return e}t.exports={EthereumRpcError:i,EthereumProviderError:class extends i{constructor(t,e,r){if(!function(t){return Number.isInteger(t)&&t>=1e3&&t<=4999}(t))throw new Error('"code" must be an integer such that: 1000 <= code <= 4999');super(t,e,r)}}}},47881:t=>{"use strict";t.exports=JSON.parse('{"rpc":{"invalidInput":-32000,"resourceNotFound":-32001,"resourceUnavailable":-32002,"transactionRejected":-32003,"methodNotSupported":-32004,"parse":-32700,"invalidRequest":-32600,"methodNotFound":-32601,"invalidParams":-32602,"internal":-32603},"provider":{"userRejectedRequest":4001,"unauthorized":4100,"unsupportedMethod":4200}}')},14412:t=>{"use strict";t.exports=JSON.parse('{"4001":{"standard":"EIP 1193","message":"User rejected the request."},"4100":{"standard":"EIP 1193","message":"The requested account and/or method has not been authorized by the user."},"4200":{"standard":"EIP 1193","message":"The requested method is not supported by this Ethereum provider."},"-32700":{"standard":"JSON RPC 2.0","message":"Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."},"-32600":{"standard":"JSON RPC 2.0","message":"The JSON sent is not a valid Request object."},"-32601":{"standard":"JSON RPC 2.0","message":"The method does not exist / is not available."},"-32602":{"standard":"JSON RPC 2.0","message":"Invalid method parameter(s)."},"-32603":{"standard":"JSON RPC 2.0","message":"Internal JSON-RPC error."},"-32000":{"standard":"EIP 1474","message":"Invalid input."},"-32001":{"standard":"EIP 1474","message":"Resource not found."},"-32002":{"standard":"EIP 1474","message":"Resource unavailable."},"-32003":{"standard":"EIP 1474","message":"Transaction rejected."},"-32004":{"standard":"EIP 1474","message":"Method not supported."}}')},35599:(t,e,r)=>{const{EthereumRpcError:n,EthereumProviderError:i}=r(87325),{getMessageFromCode:o}=r(65019),s=r(47881);function a(t,e){const[r,i]=f(e);return new n(t,r||o(t),i)}function u(t,e){const[r,n]=f(e);return new i(t,r||o(t),n)}function f(t){let e,r;return t&&("string"==typeof t?e=t:"object"!=typeof t||Array.isArray(t)||(e=t.message,r=t.data)),[e,r]}t.exports={rpc:{parse:t=>a(s.rpc.parse,t),invalidRequest:t=>a(s.rpc.invalidRequest,t),invalidParams:t=>a(s.rpc.invalidParams,t),methodNotFound:t=>a(s.rpc.methodNotFound,t),internal:t=>a(s.rpc.internal,t),server:t=>{if(!t||"object"!=typeof t||Array.isArray(t))throw new Error("Ethereum RPC Server errors must provide single object argument.");const{code:e}=t;if(!Number.isInteger(e)||e>-32005||e<-32099)throw new Error('"code" must be an integer such that: -32099 <= code <= -32005');return a(e,t)},invalidInput:t=>a(s.rpc.invalidInput,t),resourceNotFound:t=>a(s.rpc.resourceNotFound,t),resourceUnavailable:t=>a(s.rpc.resourceUnavailable,t),transactionRejected:t=>a(s.rpc.transactionRejected,t),methodNotSupported:t=>a(s.rpc.methodNotSupported,t)},provider:{userRejectedRequest:t=>u(s.provider.userRejectedRequest,t),unauthorized:t=>u(s.provider.unauthorized,t),unsupportedMethod:t=>u(s.provider.unsupportedMethod,t),custom:t=>{if(!t||"object"!=typeof t||Array.isArray(t))throw new Error("Ethereum Provider custom errors must provide single object argument.");const{code:e,message:r,data:n}=t;if(!r||"string"!=typeof r)throw new Error('"message" must be a nonempty string');return new i(e,r,n)}}}},65019:(t,e,r)=>{const n=r(14412),i=r(47881).rpc.internal,{EthereumRpcError:o}=r(87325),s="Unspecified server error.",a={code:i,message:u(i)};function u(t,e="Unspecified error message. This is a bug, please report it."){if(Number.isInteger(t)){const e=t.toString();if(n[e])return n[e].message;if(h(t))return s}return e}function f(t){if(!Number.isInteger(t))return!1;const e=t.toString();return!!n[e]||!!h(t)}function h(t){return t>=-32099&&t<=-32e3}function l(t){return t&&"object"==typeof t&&!Array.isArray(t)?Object.assign({},t):t}t.exports={getMessageFromCode:u,isValidCode:f,serializeError:function(t,e=a){if(!e||!Number.isInteger(e.code)||"string"!=typeof e.message)throw new Error("fallbackError must contain integer number code and string message.");if(t instanceof o)return t.serialize();const r={};return t&&f(t.code)?(r.code=t.code,t.message&&"string"==typeof t.message?(r.message=t.message,t.hasOwnProperty("data")&&(r.data=t.data)):(r.message=u(r.code),r.data={originalError:l(t)})):(r.code=e.code,r.message=t&&t.message?t.message:e.message,r.data={originalError:l(t)}),t&&t.stack&&(r.stack=t.stack),r},JSON_RPC_SERVER_ERROR_MESSAGE:s}},58908:(t,e,r)=>{var n;n="undefined"!=typeof window?window:void 0!==r.g?r.g:"undefined"!=typeof self?self:{},t.exports=n},27376:t=>{t.exports=function(t){if(!t)return!1;var r=e.call(t);return"[object Function]"===r||"function"==typeof t&&"[object RegExp]"!==r||"undefined"!=typeof window&&(t===window.setTimeout||t===window.alert||t===window.confirm||t===window.prompt)};var e=Object.prototype.toString},4947:t=>{var e=function(t){return t.replace(/^\s+|\s+$/g,"")};t.exports=function(t){if(!t)return{};for(var r,n={},i=e(t).split("\n"),o=0;o<i.length;o++){var s=i[o],a=s.indexOf(":"),u=e(s.slice(0,a)).toLowerCase(),f=e(s.slice(a+1));void 0===n[u]?n[u]=f:(r=n[u],"[object Array]"===Object.prototype.toString.call(r)?n[u].push(f):n[u]=[n[u],f])}return n}},12906:(t,e,r)=>{const n=r(17187).EventEmitter,i=r(89539).inherits,o=r(86918),s=r(75012),a=r(94005),u=r(94282),f=r(52698),h=(r(6496),r(39728)),l=function(){};function c(t){const e=this;n.call(e),e.setMaxListeners(30),t=t||{};const r={sendAsync:e._handleAsync.bind(e)},i=t.blockTrackerProvider||r;e._blockTracker=t.blockTracker||new s({provider:i,pollingInterval:t.pollingInterval||4e3,setSkipCacheFlag:!0}),e._ready=new f,e.currentBlock=null,e._providers=[]}t.exports=c,i(c,n),c.prototype.start=function(t=l){const e=this;e._ready.go(),e._blockTracker.on("latest",(t=>{e._getBlockByNumberWithRetry(t,((t,r)=>{if(t)return void this.emit("error",t);if(!r)return console.log(r),void this.emit("error",new Error("Could not find block"));const n=(i=r,{number:o.toBuffer(i.number),hash:o.toBuffer(i.hash),parentHash:o.toBuffer(i.parentHash),nonce:o.toBuffer(i.nonce),mixHash:o.toBuffer(i.mixHash),sha3Uncles:o.toBuffer(i.sha3Uncles),logsBloom:o.toBuffer(i.logsBloom),transactionsRoot:o.toBuffer(i.transactionsRoot),stateRoot:o.toBuffer(i.stateRoot),receiptsRoot:o.toBuffer(i.receiptRoot||i.receiptsRoot),miner:o.toBuffer(i.miner),difficulty:o.toBuffer(i.difficulty),totalDifficulty:o.toBuffer(i.totalDifficulty),size:o.toBuffer(i.size),extraData:o.toBuffer(i.extraData),gasLimit:o.toBuffer(i.gasLimit),gasUsed:o.toBuffer(i.gasUsed),timestamp:o.toBuffer(i.timestamp),transactions:i.transactions});var i;e._setCurrentBlock(n),e.emit("rawBlock",r),e.emit("latest",r)}))})),e._blockTracker.on("sync",e.emit.bind(e,"sync")),e._blockTracker.on("error",e.emit.bind(e,"error")),e._running=!0,e.emit("start")},c.prototype.stop=function(){const t=this;t._blockTracker.removeAllListeners(),t._running=!1,t.emit("stop")},c.prototype.isRunning=function(){return this._running},c.prototype.addProvider=function(t,e){"number"==typeof e?this._providers.splice(e,0,t):this._providers.push(t),t.setEngine(this)},c.prototype.removeProvider=function(t){const e=this._providers.indexOf(t);if(e<0)throw new Error("Provider not found.");this._providers.splice(e,1)},c.prototype.send=function(t){throw new Error("Web3ProviderEngine does not support synchronous requests.")},c.prototype.sendAsync=function(t,e){const r=this;r._ready.await((function(){Array.isArray(t)?a(t,r._handleAsync.bind(r),e):r._handleAsync(t,e)}))},c.prototype._getBlockByNumberWithRetry=function(t,e){const r=this;let n=5;return void i();function i(){r._getBlockByNumber(t,o)}function o(t,r){return t?e(t):r?void e(null,r):n>0?(n--,void setTimeout((function(){i()}),1e3)):void e(null,null)}},c.prototype._getBlockByNumber=function(t,e){const r=h({method:"eth_getBlockByNumber",params:[t,!1],skipCache:!0});this._handleAsync(r,((t,r)=>t?e(t):e(null,r.result)))},c.prototype._handleAsync=function(t,e){var r=this,n=-1,i=null,o=null,s=[];function a(r,n){o=r,i=n,u(s,(function(t,e){t?t(o,i,e):e()}),(function(){var r={id:t.id,jsonrpc:t.jsonrpc,result:i};null!=o?(r.error={message:o.stack||o.message||o,code:-32e3},e(o,r)):e(null,r)}))}!function e(i){if(n+=1,s.unshift(i),n>=r._providers.length)a(new Error('Request for method "'+t.method+'" not handled by any subprovider. Please check your subprovider configuration to ensure this method is handled.'));else try{r._providers[n].handleRequest(t,e,a)}catch(t){a(t)}}()},c.prototype._setCurrentBlock=function(t){this.currentBlock=t,this.emit("block",t)}},26949:function(t,e,r){!function(t,e){"use strict";function n(t,e){if(!t)throw new Error(e||"Assertion failed")}function i(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}function o(t,e,r){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(r=e,e=10),this._init(t||0,e||10,r||"be"))}var s;"object"==typeof t?t.exports=o:e.BN=o,o.BN=o,o.wordSize=26;try{s="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:r(24414).Buffer}catch(t){}function a(t,e){var r=t.charCodeAt(e);return r>=65&&r<=70?r-55:r>=97&&r<=102?r-87:r-48&15}function u(t,e,r){var n=a(t,r);return r-1>=e&&(n|=a(t,r-1)<<4),n}function f(t,e,r,n){for(var i=0,o=Math.min(t.length,r),s=e;s<o;s++){var a=t.charCodeAt(s)-48;i*=n,i+=a>=49?a-49+10:a>=17?a-17+10:a}return i}o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,e){return t.cmp(e)>0?t:e},o.min=function(t,e){return t.cmp(e)<0?t:e},o.prototype._init=function(t,e,r){if("number"==typeof t)return this._initNumber(t,e,r);if("object"==typeof t)return this._initArray(t,e,r);"hex"===e&&(e=16),n(e===(0|e)&&e>=2&&e<=36);var i=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&(i++,this.negative=1),i<t.length&&(16===e?this._parseHex(t,i,r):(this._parseBase(t,e,i),"le"===r&&this._initArray(this.toArray(),e,r)))},o.prototype._initNumber=function(t,e,r){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(n(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===r&&this._initArray(this.toArray(),e,r)},o.prototype._initArray=function(t,e,r){if(n("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var o,s,a=0;if("be"===r)for(i=t.length-1,o=0;i>=0;i-=3)s=t[i]|t[i-1]<<8|t[i-2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);else if("le"===r)for(i=0,o=0;i<t.length;i+=3)s=t[i]|t[i+1]<<8|t[i+2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);return this.strip()},o.prototype._parseHex=function(t,e,r){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var i,o=0,s=0;if("be"===r)for(n=t.length-1;n>=e;n-=2)i=u(t,e,n)<<o,this.words[s]|=67108863&i,o>=18?(o-=18,s+=1,this.words[s]|=i>>>26):o+=8;else for(n=(t.length-e)%2==0?e+1:e;n<t.length;n+=2)i=u(t,e,n)<<o,this.words[s]|=67108863&i,o>=18?(o-=18,s+=1,this.words[s]|=i>>>26):o+=8;this.strip()},o.prototype._parseBase=function(t,e,r){this.words=[0],this.length=1;for(var n=0,i=1;i<=67108863;i*=e)n++;n--,i=i/e|0;for(var o=t.length-r,s=o%n,a=Math.min(o,o-s)+r,u=0,h=r;h<a;h+=n)u=f(t,h,h+n,e),this.imuln(i),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==s){var l=1;for(u=f(t,h,t.length,e),h=0;h<s;h++)l*=e;this.imuln(l),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}this.strip()},o.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},o.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var h=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],l=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],c=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function d(t,e,r){r.negative=e.negative^t.negative;var n=t.length+e.length|0;r.length=n,n=n-1|0;var i=0|t.words[0],o=0|e.words[0],s=i*o,a=67108863&s,u=s/67108864|0;r.words[0]=a;for(var f=1;f<n;f++){for(var h=u>>>26,l=67108863&u,c=Math.min(f,e.length-1),d=Math.max(0,f-t.length+1);d<=c;d++){var p=f-d|0;h+=(s=(i=0|t.words[p])*(o=0|e.words[d])+l)/67108864|0,l=67108863&s}r.words[f]=0|l,u=0|h}return 0!==u?r.words[f]=0|u:r.length--,r.strip()}o.prototype.toString=function(t,e){var r;if(e=0|e||1,16===(t=t||10)||"hex"===t){r="";for(var i=0,o=0,s=0;s<this.length;s++){var a=this.words[s],u=(16777215&(a<<i|o)).toString(16);r=0!=(o=a>>>24-i&16777215)||s!==this.length-1?h[6-u.length]+u+r:u+r,(i+=2)>=26&&(i-=26,s--)}for(0!==o&&(r=o.toString(16)+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}if(t===(0|t)&&t>=2&&t<=36){var f=l[t],d=c[t];r="";var p=this.clone();for(p.negative=0;!p.isZero();){var m=p.modn(d).toString(t);r=(p=p.idivn(d)).isZero()?m+r:h[f-m.length]+m+r}for(this.isZero()&&(r="0"+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}n(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&n(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16)},o.prototype.toBuffer=function(t,e){return n(void 0!==s),this.toArrayLike(s,t,e)},o.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},o.prototype.toArrayLike=function(t,e,r){var i=this.byteLength(),o=r||Math.max(1,i);n(i<=o,"byte array longer than desired length"),n(o>0,"Requested array length <= 0"),this.strip();var s,a,u="le"===e,f=new t(o),h=this.clone();if(u){for(a=0;!h.isZero();a++)s=h.andln(255),h.iushrn(8),f[a]=s;for(;a<o;a++)f[a]=0}else{for(a=0;a<o-i;a++)f[a]=0;for(a=0;!h.isZero();a++)s=h.andln(255),h.iushrn(8),f[o-a-1]=s}return f},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var e=t,r=0;return e>=4096&&(r+=13,e>>>=13),e>=64&&(r+=7,e>>>=7),e>=8&&(r+=4,e>>>=4),e>=2&&(r+=2,e>>>=2),r+e},o.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,r=0;return 0==(8191&e)&&(r+=13,e>>>=13),0==(127&e)&&(r+=7,e>>>=7),0==(15&e)&&(r+=4,e>>>=4),0==(3&e)&&(r+=2,e>>>=2),0==(1&e)&&r++,r},o.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var r=this._zeroBits(this.words[e]);if(t+=r,26!==r)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},o.prototype.ior=function(t){return n(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var r=0;r<e.length;r++)this.words[r]=this.words[r]&t.words[r];return this.length=e.length,this.strip()},o.prototype.iand=function(t){return n(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var e,r;this.length>t.length?(e=this,r=t):(e=t,r=this);for(var n=0;n<r.length;n++)this.words[n]=e.words[n]^r.words[n];if(this!==e)for(;n<e.length;n++)this.words[n]=e.words[n];return this.length=e.length,this.strip()},o.prototype.ixor=function(t){return n(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){n("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),r=t%26;this._expand(e),r>0&&e--;for(var i=0;i<e;i++)this.words[i]=67108863&~this.words[i];return r>0&&(this.words[i]=~this.words[i]&67108863>>26-r),this.strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,e){n("number"==typeof t&&t>=0);var r=t/26|0,i=t%26;return this._expand(r+1),this.words[r]=e?this.words[r]|1<<i:this.words[r]&~(1<<i),this.strip()},o.prototype.iadd=function(t){var e,r,n;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(r=this,n=t):(r=t,n=this);for(var i=0,o=0;o<n.length;o++)e=(0|r.words[o])+(0|n.words[o])+i,this.words[o]=67108863&e,i=e>>>26;for(;0!==i&&o<r.length;o++)e=(0|r.words[o])+i,this.words[o]=67108863&e,i=e>>>26;if(this.length=r.length,0!==i)this.words[this.length]=i,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},o.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r,n,i=this.cmp(t);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(r=this,n=t):(r=t,n=this);for(var o=0,s=0;s<n.length;s++)o=(e=(0|r.words[s])-(0|n.words[s])+o)>>26,this.words[s]=67108863&e;for(;0!==o&&s<r.length;s++)o=(e=(0|r.words[s])+o)>>26,this.words[s]=67108863&e;if(0===o&&s<r.length&&r!==this)for(;s<r.length;s++)this.words[s]=r.words[s];return this.length=Math.max(this.length,s),r!==this&&(this.negative=1),this.strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var p=function(t,e,r){var n,i,o,s=t.words,a=e.words,u=r.words,f=0,h=0|s[0],l=8191&h,c=h>>>13,d=0|s[1],p=8191&d,m=d>>>13,g=0|s[2],v=8191&g,y=g>>>13,w=0|s[3],M=8191&w,b=w>>>13,_=0|s[4],A=8191&_,k=_>>>13,E=0|s[5],x=8191&E,B=E>>>13,T=0|s[6],S=8191&T,P=T>>>13,R=0|s[7],L=8191&R,K=R>>>13,C=0|s[8],U=8191&C,N=C>>>13,I=0|s[9],q=8191&I,H=I>>>13,O=0|a[0],z=8191&O,j=O>>>13,Z=0|a[1],D=8191&Z,V=Z>>>13,W=0|a[2],F=8191&W,J=W>>>13,X=0|a[3],G=8191&X,$=X>>>13,Y=0|a[4],Q=8191&Y,tt=Y>>>13,et=0|a[5],rt=8191&et,nt=et>>>13,it=0|a[6],ot=8191&it,st=it>>>13,at=0|a[7],ut=8191&at,ft=at>>>13,ht=0|a[8],lt=8191&ht,ct=ht>>>13,dt=0|a[9],pt=8191&dt,mt=dt>>>13;r.negative=t.negative^e.negative,r.length=19;var gt=(f+(n=Math.imul(l,z))|0)+((8191&(i=(i=Math.imul(l,j))+Math.imul(c,z)|0))<<13)|0;f=((o=Math.imul(c,j))+(i>>>13)|0)+(gt>>>26)|0,gt&=67108863,n=Math.imul(p,z),i=(i=Math.imul(p,j))+Math.imul(m,z)|0,o=Math.imul(m,j);var vt=(f+(n=n+Math.imul(l,D)|0)|0)+((8191&(i=(i=i+Math.imul(l,V)|0)+Math.imul(c,D)|0))<<13)|0;f=((o=o+Math.imul(c,V)|0)+(i>>>13)|0)+(vt>>>26)|0,vt&=67108863,n=Math.imul(v,z),i=(i=Math.imul(v,j))+Math.imul(y,z)|0,o=Math.imul(y,j),n=n+Math.imul(p,D)|0,i=(i=i+Math.imul(p,V)|0)+Math.imul(m,D)|0,o=o+Math.imul(m,V)|0;var yt=(f+(n=n+Math.imul(l,F)|0)|0)+((8191&(i=(i=i+Math.imul(l,J)|0)+Math.imul(c,F)|0))<<13)|0;f=((o=o+Math.imul(c,J)|0)+(i>>>13)|0)+(yt>>>26)|0,yt&=67108863,n=Math.imul(M,z),i=(i=Math.imul(M,j))+Math.imul(b,z)|0,o=Math.imul(b,j),n=n+Math.imul(v,D)|0,i=(i=i+Math.imul(v,V)|0)+Math.imul(y,D)|0,o=o+Math.imul(y,V)|0,n=n+Math.imul(p,F)|0,i=(i=i+Math.imul(p,J)|0)+Math.imul(m,F)|0,o=o+Math.imul(m,J)|0;var wt=(f+(n=n+Math.imul(l,G)|0)|0)+((8191&(i=(i=i+Math.imul(l,$)|0)+Math.imul(c,G)|0))<<13)|0;f=((o=o+Math.imul(c,$)|0)+(i>>>13)|0)+(wt>>>26)|0,wt&=67108863,n=Math.imul(A,z),i=(i=Math.imul(A,j))+Math.imul(k,z)|0,o=Math.imul(k,j),n=n+Math.imul(M,D)|0,i=(i=i+Math.imul(M,V)|0)+Math.imul(b,D)|0,o=o+Math.imul(b,V)|0,n=n+Math.imul(v,F)|0,i=(i=i+Math.imul(v,J)|0)+Math.imul(y,F)|0,o=o+Math.imul(y,J)|0,n=n+Math.imul(p,G)|0,i=(i=i+Math.imul(p,$)|0)+Math.imul(m,G)|0,o=o+Math.imul(m,$)|0;var Mt=(f+(n=n+Math.imul(l,Q)|0)|0)+((8191&(i=(i=i+Math.imul(l,tt)|0)+Math.imul(c,Q)|0))<<13)|0;f=((o=o+Math.imul(c,tt)|0)+(i>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,n=Math.imul(x,z),i=(i=Math.imul(x,j))+Math.imul(B,z)|0,o=Math.imul(B,j),n=n+Math.imul(A,D)|0,i=(i=i+Math.imul(A,V)|0)+Math.imul(k,D)|0,o=o+Math.imul(k,V)|0,n=n+Math.imul(M,F)|0,i=(i=i+Math.imul(M,J)|0)+Math.imul(b,F)|0,o=o+Math.imul(b,J)|0,n=n+Math.imul(v,G)|0,i=(i=i+Math.imul(v,$)|0)+Math.imul(y,G)|0,o=o+Math.imul(y,$)|0,n=n+Math.imul(p,Q)|0,i=(i=i+Math.imul(p,tt)|0)+Math.imul(m,Q)|0,o=o+Math.imul(m,tt)|0;var bt=(f+(n=n+Math.imul(l,rt)|0)|0)+((8191&(i=(i=i+Math.imul(l,nt)|0)+Math.imul(c,rt)|0))<<13)|0;f=((o=o+Math.imul(c,nt)|0)+(i>>>13)|0)+(bt>>>26)|0,bt&=67108863,n=Math.imul(S,z),i=(i=Math.imul(S,j))+Math.imul(P,z)|0,o=Math.imul(P,j),n=n+Math.imul(x,D)|0,i=(i=i+Math.imul(x,V)|0)+Math.imul(B,D)|0,o=o+Math.imul(B,V)|0,n=n+Math.imul(A,F)|0,i=(i=i+Math.imul(A,J)|0)+Math.imul(k,F)|0,o=o+Math.imul(k,J)|0,n=n+Math.imul(M,G)|0,i=(i=i+Math.imul(M,$)|0)+Math.imul(b,G)|0,o=o+Math.imul(b,$)|0,n=n+Math.imul(v,Q)|0,i=(i=i+Math.imul(v,tt)|0)+Math.imul(y,Q)|0,o=o+Math.imul(y,tt)|0,n=n+Math.imul(p,rt)|0,i=(i=i+Math.imul(p,nt)|0)+Math.imul(m,rt)|0,o=o+Math.imul(m,nt)|0;var _t=(f+(n=n+Math.imul(l,ot)|0)|0)+((8191&(i=(i=i+Math.imul(l,st)|0)+Math.imul(c,ot)|0))<<13)|0;f=((o=o+Math.imul(c,st)|0)+(i>>>13)|0)+(_t>>>26)|0,_t&=67108863,n=Math.imul(L,z),i=(i=Math.imul(L,j))+Math.imul(K,z)|0,o=Math.imul(K,j),n=n+Math.imul(S,D)|0,i=(i=i+Math.imul(S,V)|0)+Math.imul(P,D)|0,o=o+Math.imul(P,V)|0,n=n+Math.imul(x,F)|0,i=(i=i+Math.imul(x,J)|0)+Math.imul(B,F)|0,o=o+Math.imul(B,J)|0,n=n+Math.imul(A,G)|0,i=(i=i+Math.imul(A,$)|0)+Math.imul(k,G)|0,o=o+Math.imul(k,$)|0,n=n+Math.imul(M,Q)|0,i=(i=i+Math.imul(M,tt)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,tt)|0,n=n+Math.imul(v,rt)|0,i=(i=i+Math.imul(v,nt)|0)+Math.imul(y,rt)|0,o=o+Math.imul(y,nt)|0,n=n+Math.imul(p,ot)|0,i=(i=i+Math.imul(p,st)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,st)|0;var At=(f+(n=n+Math.imul(l,ut)|0)|0)+((8191&(i=(i=i+Math.imul(l,ft)|0)+Math.imul(c,ut)|0))<<13)|0;f=((o=o+Math.imul(c,ft)|0)+(i>>>13)|0)+(At>>>26)|0,At&=67108863,n=Math.imul(U,z),i=(i=Math.imul(U,j))+Math.imul(N,z)|0,o=Math.imul(N,j),n=n+Math.imul(L,D)|0,i=(i=i+Math.imul(L,V)|0)+Math.imul(K,D)|0,o=o+Math.imul(K,V)|0,n=n+Math.imul(S,F)|0,i=(i=i+Math.imul(S,J)|0)+Math.imul(P,F)|0,o=o+Math.imul(P,J)|0,n=n+Math.imul(x,G)|0,i=(i=i+Math.imul(x,$)|0)+Math.imul(B,G)|0,o=o+Math.imul(B,$)|0,n=n+Math.imul(A,Q)|0,i=(i=i+Math.imul(A,tt)|0)+Math.imul(k,Q)|0,o=o+Math.imul(k,tt)|0,n=n+Math.imul(M,rt)|0,i=(i=i+Math.imul(M,nt)|0)+Math.imul(b,rt)|0,o=o+Math.imul(b,nt)|0,n=n+Math.imul(v,ot)|0,i=(i=i+Math.imul(v,st)|0)+Math.imul(y,ot)|0,o=o+Math.imul(y,st)|0,n=n+Math.imul(p,ut)|0,i=(i=i+Math.imul(p,ft)|0)+Math.imul(m,ut)|0,o=o+Math.imul(m,ft)|0;var kt=(f+(n=n+Math.imul(l,lt)|0)|0)+((8191&(i=(i=i+Math.imul(l,ct)|0)+Math.imul(c,lt)|0))<<13)|0;f=((o=o+Math.imul(c,ct)|0)+(i>>>13)|0)+(kt>>>26)|0,kt&=67108863,n=Math.imul(q,z),i=(i=Math.imul(q,j))+Math.imul(H,z)|0,o=Math.imul(H,j),n=n+Math.imul(U,D)|0,i=(i=i+Math.imul(U,V)|0)+Math.imul(N,D)|0,o=o+Math.imul(N,V)|0,n=n+Math.imul(L,F)|0,i=(i=i+Math.imul(L,J)|0)+Math.imul(K,F)|0,o=o+Math.imul(K,J)|0,n=n+Math.imul(S,G)|0,i=(i=i+Math.imul(S,$)|0)+Math.imul(P,G)|0,o=o+Math.imul(P,$)|0,n=n+Math.imul(x,Q)|0,i=(i=i+Math.imul(x,tt)|0)+Math.imul(B,Q)|0,o=o+Math.imul(B,tt)|0,n=n+Math.imul(A,rt)|0,i=(i=i+Math.imul(A,nt)|0)+Math.imul(k,rt)|0,o=o+Math.imul(k,nt)|0,n=n+Math.imul(M,ot)|0,i=(i=i+Math.imul(M,st)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,st)|0,n=n+Math.imul(v,ut)|0,i=(i=i+Math.imul(v,ft)|0)+Math.imul(y,ut)|0,o=o+Math.imul(y,ft)|0,n=n+Math.imul(p,lt)|0,i=(i=i+Math.imul(p,ct)|0)+Math.imul(m,lt)|0,o=o+Math.imul(m,ct)|0;var Et=(f+(n=n+Math.imul(l,pt)|0)|0)+((8191&(i=(i=i+Math.imul(l,mt)|0)+Math.imul(c,pt)|0))<<13)|0;f=((o=o+Math.imul(c,mt)|0)+(i>>>13)|0)+(Et>>>26)|0,Et&=67108863,n=Math.imul(q,D),i=(i=Math.imul(q,V))+Math.imul(H,D)|0,o=Math.imul(H,V),n=n+Math.imul(U,F)|0,i=(i=i+Math.imul(U,J)|0)+Math.imul(N,F)|0,o=o+Math.imul(N,J)|0,n=n+Math.imul(L,G)|0,i=(i=i+Math.imul(L,$)|0)+Math.imul(K,G)|0,o=o+Math.imul(K,$)|0,n=n+Math.imul(S,Q)|0,i=(i=i+Math.imul(S,tt)|0)+Math.imul(P,Q)|0,o=o+Math.imul(P,tt)|0,n=n+Math.imul(x,rt)|0,i=(i=i+Math.imul(x,nt)|0)+Math.imul(B,rt)|0,o=o+Math.imul(B,nt)|0,n=n+Math.imul(A,ot)|0,i=(i=i+Math.imul(A,st)|0)+Math.imul(k,ot)|0,o=o+Math.imul(k,st)|0,n=n+Math.imul(M,ut)|0,i=(i=i+Math.imul(M,ft)|0)+Math.imul(b,ut)|0,o=o+Math.imul(b,ft)|0,n=n+Math.imul(v,lt)|0,i=(i=i+Math.imul(v,ct)|0)+Math.imul(y,lt)|0,o=o+Math.imul(y,ct)|0;var xt=(f+(n=n+Math.imul(p,pt)|0)|0)+((8191&(i=(i=i+Math.imul(p,mt)|0)+Math.imul(m,pt)|0))<<13)|0;f=((o=o+Math.imul(m,mt)|0)+(i>>>13)|0)+(xt>>>26)|0,xt&=67108863,n=Math.imul(q,F),i=(i=Math.imul(q,J))+Math.imul(H,F)|0,o=Math.imul(H,J),n=n+Math.imul(U,G)|0,i=(i=i+Math.imul(U,$)|0)+Math.imul(N,G)|0,o=o+Math.imul(N,$)|0,n=n+Math.imul(L,Q)|0,i=(i=i+Math.imul(L,tt)|0)+Math.imul(K,Q)|0,o=o+Math.imul(K,tt)|0,n=n+Math.imul(S,rt)|0,i=(i=i+Math.imul(S,nt)|0)+Math.imul(P,rt)|0,o=o+Math.imul(P,nt)|0,n=n+Math.imul(x,ot)|0,i=(i=i+Math.imul(x,st)|0)+Math.imul(B,ot)|0,o=o+Math.imul(B,st)|0,n=n+Math.imul(A,ut)|0,i=(i=i+Math.imul(A,ft)|0)+Math.imul(k,ut)|0,o=o+Math.imul(k,ft)|0,n=n+Math.imul(M,lt)|0,i=(i=i+Math.imul(M,ct)|0)+Math.imul(b,lt)|0,o=o+Math.imul(b,ct)|0;var Bt=(f+(n=n+Math.imul(v,pt)|0)|0)+((8191&(i=(i=i+Math.imul(v,mt)|0)+Math.imul(y,pt)|0))<<13)|0;f=((o=o+Math.imul(y,mt)|0)+(i>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,n=Math.imul(q,G),i=(i=Math.imul(q,$))+Math.imul(H,G)|0,o=Math.imul(H,$),n=n+Math.imul(U,Q)|0,i=(i=i+Math.imul(U,tt)|0)+Math.imul(N,Q)|0,o=o+Math.imul(N,tt)|0,n=n+Math.imul(L,rt)|0,i=(i=i+Math.imul(L,nt)|0)+Math.imul(K,rt)|0,o=o+Math.imul(K,nt)|0,n=n+Math.imul(S,ot)|0,i=(i=i+Math.imul(S,st)|0)+Math.imul(P,ot)|0,o=o+Math.imul(P,st)|0,n=n+Math.imul(x,ut)|0,i=(i=i+Math.imul(x,ft)|0)+Math.imul(B,ut)|0,o=o+Math.imul(B,ft)|0,n=n+Math.imul(A,lt)|0,i=(i=i+Math.imul(A,ct)|0)+Math.imul(k,lt)|0,o=o+Math.imul(k,ct)|0;var Tt=(f+(n=n+Math.imul(M,pt)|0)|0)+((8191&(i=(i=i+Math.imul(M,mt)|0)+Math.imul(b,pt)|0))<<13)|0;f=((o=o+Math.imul(b,mt)|0)+(i>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,n=Math.imul(q,Q),i=(i=Math.imul(q,tt))+Math.imul(H,Q)|0,o=Math.imul(H,tt),n=n+Math.imul(U,rt)|0,i=(i=i+Math.imul(U,nt)|0)+Math.imul(N,rt)|0,o=o+Math.imul(N,nt)|0,n=n+Math.imul(L,ot)|0,i=(i=i+Math.imul(L,st)|0)+Math.imul(K,ot)|0,o=o+Math.imul(K,st)|0,n=n+Math.imul(S,ut)|0,i=(i=i+Math.imul(S,ft)|0)+Math.imul(P,ut)|0,o=o+Math.imul(P,ft)|0,n=n+Math.imul(x,lt)|0,i=(i=i+Math.imul(x,ct)|0)+Math.imul(B,lt)|0,o=o+Math.imul(B,ct)|0;var St=(f+(n=n+Math.imul(A,pt)|0)|0)+((8191&(i=(i=i+Math.imul(A,mt)|0)+Math.imul(k,pt)|0))<<13)|0;f=((o=o+Math.imul(k,mt)|0)+(i>>>13)|0)+(St>>>26)|0,St&=67108863,n=Math.imul(q,rt),i=(i=Math.imul(q,nt))+Math.imul(H,rt)|0,o=Math.imul(H,nt),n=n+Math.imul(U,ot)|0,i=(i=i+Math.imul(U,st)|0)+Math.imul(N,ot)|0,o=o+Math.imul(N,st)|0,n=n+Math.imul(L,ut)|0,i=(i=i+Math.imul(L,ft)|0)+Math.imul(K,ut)|0,o=o+Math.imul(K,ft)|0,n=n+Math.imul(S,lt)|0,i=(i=i+Math.imul(S,ct)|0)+Math.imul(P,lt)|0,o=o+Math.imul(P,ct)|0;var Pt=(f+(n=n+Math.imul(x,pt)|0)|0)+((8191&(i=(i=i+Math.imul(x,mt)|0)+Math.imul(B,pt)|0))<<13)|0;f=((o=o+Math.imul(B,mt)|0)+(i>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,n=Math.imul(q,ot),i=(i=Math.imul(q,st))+Math.imul(H,ot)|0,o=Math.imul(H,st),n=n+Math.imul(U,ut)|0,i=(i=i+Math.imul(U,ft)|0)+Math.imul(N,ut)|0,o=o+Math.imul(N,ft)|0,n=n+Math.imul(L,lt)|0,i=(i=i+Math.imul(L,ct)|0)+Math.imul(K,lt)|0,o=o+Math.imul(K,ct)|0;var Rt=(f+(n=n+Math.imul(S,pt)|0)|0)+((8191&(i=(i=i+Math.imul(S,mt)|0)+Math.imul(P,pt)|0))<<13)|0;f=((o=o+Math.imul(P,mt)|0)+(i>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,n=Math.imul(q,ut),i=(i=Math.imul(q,ft))+Math.imul(H,ut)|0,o=Math.imul(H,ft),n=n+Math.imul(U,lt)|0,i=(i=i+Math.imul(U,ct)|0)+Math.imul(N,lt)|0,o=o+Math.imul(N,ct)|0;var Lt=(f+(n=n+Math.imul(L,pt)|0)|0)+((8191&(i=(i=i+Math.imul(L,mt)|0)+Math.imul(K,pt)|0))<<13)|0;f=((o=o+Math.imul(K,mt)|0)+(i>>>13)|0)+(Lt>>>26)|0,Lt&=67108863,n=Math.imul(q,lt),i=(i=Math.imul(q,ct))+Math.imul(H,lt)|0,o=Math.imul(H,ct);var Kt=(f+(n=n+Math.imul(U,pt)|0)|0)+((8191&(i=(i=i+Math.imul(U,mt)|0)+Math.imul(N,pt)|0))<<13)|0;f=((o=o+Math.imul(N,mt)|0)+(i>>>13)|0)+(Kt>>>26)|0,Kt&=67108863;var Ct=(f+(n=Math.imul(q,pt))|0)+((8191&(i=(i=Math.imul(q,mt))+Math.imul(H,pt)|0))<<13)|0;return f=((o=Math.imul(H,mt))+(i>>>13)|0)+(Ct>>>26)|0,Ct&=67108863,u[0]=gt,u[1]=vt,u[2]=yt,u[3]=wt,u[4]=Mt,u[5]=bt,u[6]=_t,u[7]=At,u[8]=kt,u[9]=Et,u[10]=xt,u[11]=Bt,u[12]=Tt,u[13]=St,u[14]=Pt,u[15]=Rt,u[16]=Lt,u[17]=Kt,u[18]=Ct,0!==f&&(u[19]=f,r.length++),r};function m(t,e,r){return(new g).mulp(t,e,r)}function g(t,e){this.x=t,this.y=e}Math.imul||(p=d),o.prototype.mulTo=function(t,e){var r=this.length+t.length;return 10===this.length&&10===t.length?p(this,t,e):r<63?d(this,t,e):r<1024?function(t,e,r){r.negative=e.negative^t.negative,r.length=t.length+e.length;for(var n=0,i=0,o=0;o<r.length-1;o++){var s=i;i=0;for(var a=67108863&n,u=Math.min(o,e.length-1),f=Math.max(0,o-t.length+1);f<=u;f++){var h=o-f,l=(0|t.words[h])*(0|e.words[f]),c=67108863&l;a=67108863&(c=c+a|0),i+=(s=(s=s+(l/67108864|0)|0)+(c>>>26)|0)>>>26,s&=67108863}r.words[o]=a,n=s,s=i}return 0!==n?r.words[o]=n:r.length--,r.strip()}(this,t,e):m(this,t,e)},g.prototype.makeRBT=function(t){for(var e=new Array(t),r=o.prototype._countBits(t)-1,n=0;n<t;n++)e[n]=this.revBin(n,r,t);return e},g.prototype.revBin=function(t,e,r){if(0===t||t===r-1)return t;for(var n=0,i=0;i<e;i++)n|=(1&t)<<e-i-1,t>>=1;return n},g.prototype.permute=function(t,e,r,n,i,o){for(var s=0;s<o;s++)n[s]=e[t[s]],i[s]=r[t[s]]},g.prototype.transform=function(t,e,r,n,i,o){this.permute(o,t,e,r,n,i);for(var s=1;s<i;s<<=1)for(var a=s<<1,u=Math.cos(2*Math.PI/a),f=Math.sin(2*Math.PI/a),h=0;h<i;h+=a)for(var l=u,c=f,d=0;d<s;d++){var p=r[h+d],m=n[h+d],g=r[h+d+s],v=n[h+d+s],y=l*g-c*v;v=l*v+c*g,g=y,r[h+d]=p+g,n[h+d]=m+v,r[h+d+s]=p-g,n[h+d+s]=m-v,d!==a&&(y=u*l-f*c,c=u*c+f*l,l=y)}},g.prototype.guessLen13b=function(t,e){var r=1|Math.max(e,t),n=1&r,i=0;for(r=r/2|0;r;r>>>=1)i++;return 1<<i+1+n},g.prototype.conjugate=function(t,e,r){if(!(r<=1))for(var n=0;n<r/2;n++){var i=t[n];t[n]=t[r-n-1],t[r-n-1]=i,i=e[n],e[n]=-e[r-n-1],e[r-n-1]=-i}},g.prototype.normalize13b=function(t,e){for(var r=0,n=0;n<e/2;n++){var i=8192*Math.round(t[2*n+1]/e)+Math.round(t[2*n]/e)+r;t[n]=67108863&i,r=i<67108864?0:i/67108864|0}return t},g.prototype.convert13b=function(t,e,r,i){for(var o=0,s=0;s<e;s++)o+=0|t[s],r[2*s]=8191&o,o>>>=13,r[2*s+1]=8191&o,o>>>=13;for(s=2*e;s<i;++s)r[s]=0;n(0===o),n(0==(-8192&o))},g.prototype.stub=function(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=0;return e},g.prototype.mulp=function(t,e,r){var n=2*this.guessLen13b(t.length,e.length),i=this.makeRBT(n),o=this.stub(n),s=new Array(n),a=new Array(n),u=new Array(n),f=new Array(n),h=new Array(n),l=new Array(n),c=r.words;c.length=n,this.convert13b(t.words,t.length,s,n),this.convert13b(e.words,e.length,f,n),this.transform(s,o,a,u,n,i),this.transform(f,o,h,l,n,i);for(var d=0;d<n;d++){var p=a[d]*h[d]-u[d]*l[d];u[d]=a[d]*l[d]+u[d]*h[d],a[d]=p}return this.conjugate(a,u,n),this.transform(a,u,c,o,n,i),this.conjugate(c,o,n),this.normalize13b(c,n),r.negative=t.negative^e.negative,r.length=t.length+e.length,r.strip()},o.prototype.mul=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},o.prototype.mulf=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),m(this,t,e)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){n("number"==typeof t),n(t<67108864);for(var e=0,r=0;r<this.length;r++){var i=(0|this.words[r])*t,o=(67108863&i)+(67108863&e);e>>=26,e+=i/67108864|0,e+=o>>>26,this.words[r]=67108863&o}return 0!==e&&(this.words[r]=e,this.length++),this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),r=0;r<e.length;r++){var n=r/26|0,i=r%26;e[r]=(t.words[n]&1<<i)>>>i}return e}(t);if(0===e.length)return new o(1);for(var r=this,n=0;n<e.length&&0===e[n];n++,r=r.sqr());if(++n<e.length)for(var i=r.sqr();n<e.length;n++,i=i.sqr())0!==e[n]&&(r=r.mul(i));return r},o.prototype.iushln=function(t){n("number"==typeof t&&t>=0);var e,r=t%26,i=(t-r)/26,o=67108863>>>26-r<<26-r;if(0!==r){var s=0;for(e=0;e<this.length;e++){var a=this.words[e]&o,u=(0|this.words[e])-a<<r;this.words[e]=u|s,s=a>>>26-r}s&&(this.words[e]=s,this.length++)}if(0!==i){for(e=this.length-1;e>=0;e--)this.words[e+i]=this.words[e];for(e=0;e<i;e++)this.words[e]=0;this.length+=i}return this.strip()},o.prototype.ishln=function(t){return n(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,e,r){var i;n("number"==typeof t&&t>=0),i=e?(e-e%26)/26:0;var o=t%26,s=Math.min((t-o)/26,this.length),a=67108863^67108863>>>o<<o,u=r;if(i-=s,i=Math.max(0,i),u){for(var f=0;f<s;f++)u.words[f]=this.words[f];u.length=s}if(0===s);else if(this.length>s)for(this.length-=s,f=0;f<this.length;f++)this.words[f]=this.words[f+s];else this.words[0]=0,this.length=1;var h=0;for(f=this.length-1;f>=0&&(0!==h||f>=i);f--){var l=0|this.words[f];this.words[f]=h<<26-o|l>>>o,h=l&a}return u&&0!==h&&(u.words[u.length++]=h),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},o.prototype.ishrn=function(t,e,r){return n(0===this.negative),this.iushrn(t,e,r)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26,i=1<<e;return!(this.length<=r||!(this.words[r]&i))},o.prototype.imaskn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26;if(n(0===this.negative,"imaskn works only with positive numbers"),this.length<=r)return this;if(0!==e&&r++,this.length=Math.min(r,this.length),0!==e){var i=67108863^67108863>>>e<<e;this.words[this.length-1]&=i}return this.strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return n("number"==typeof t),n(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},o.prototype.isubn=function(t){if(n("number"==typeof t),n(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,e,r){var i,o,s=t.length+r;this._expand(s);var a=0;for(i=0;i<t.length;i++){o=(0|this.words[i+r])+a;var u=(0|t.words[i])*e;a=((o-=67108863&u)>>26)-(u/67108864|0),this.words[i+r]=67108863&o}for(;i<this.length-r;i++)a=(o=(0|this.words[i+r])+a)>>26,this.words[i+r]=67108863&o;if(0===a)return this.strip();for(n(-1===a),a=0,i=0;i<this.length;i++)a=(o=-(0|this.words[i])+a)>>26,this.words[i]=67108863&o;return this.negative=1,this.strip()},o.prototype._wordDiv=function(t,e){var r=(this.length,t.length),n=this.clone(),i=t,s=0|i.words[i.length-1];0!=(r=26-this._countBits(s))&&(i=i.ushln(r),n.iushln(r),s=0|i.words[i.length-1]);var a,u=n.length-i.length;if("mod"!==e){(a=new o(null)).length=u+1,a.words=new Array(a.length);for(var f=0;f<a.length;f++)a.words[f]=0}var h=n.clone()._ishlnsubmul(i,1,u);0===h.negative&&(n=h,a&&(a.words[u]=1));for(var l=u-1;l>=0;l--){var c=67108864*(0|n.words[i.length+l])+(0|n.words[i.length+l-1]);for(c=Math.min(c/s|0,67108863),n._ishlnsubmul(i,c,l);0!==n.negative;)c--,n.negative=0,n._ishlnsubmul(i,1,l),n.isZero()||(n.negative^=1);a&&(a.words[l]=c)}return a&&a.strip(),n.strip(),"div"!==e&&0!==r&&n.iushrn(r),{div:a||null,mod:n}},o.prototype.divmod=function(t,e,r){return n(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(a=this.neg().divmod(t,e),"mod"!==e&&(i=a.div.neg()),"div"!==e&&(s=a.mod.neg(),r&&0!==s.negative&&s.iadd(t)),{div:i,mod:s}):0===this.negative&&0!==t.negative?(a=this.divmod(t.neg(),e),"mod"!==e&&(i=a.div.neg()),{div:i,mod:a.mod}):0!=(this.negative&t.negative)?(a=this.neg().divmod(t.neg(),e),"div"!==e&&(s=a.mod.neg(),r&&0!==s.negative&&s.isub(t)),{div:a.div,mod:s}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new o(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modn(t.words[0]))}:this._wordDiv(t,e);var i,s,a},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var r=0!==e.div.negative?e.mod.isub(t):e.mod,n=t.ushrn(1),i=t.andln(1),o=r.cmp(n);return o<0||1===i&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},o.prototype.modn=function(t){n(t<=67108863);for(var e=(1<<26)%t,r=0,i=this.length-1;i>=0;i--)r=(e*r+(0|this.words[i]))%t;return r},o.prototype.idivn=function(t){n(t<=67108863);for(var e=0,r=this.length-1;r>=0;r--){var i=(0|this.words[r])+67108864*e;this.words[r]=i/t|0,e=i%t}return this.strip()},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i=new o(1),s=new o(0),a=new o(0),u=new o(1),f=0;e.isEven()&&r.isEven();)e.iushrn(1),r.iushrn(1),++f;for(var h=r.clone(),l=e.clone();!e.isZero();){for(var c=0,d=1;0==(e.words[0]&d)&&c<26;++c,d<<=1);if(c>0)for(e.iushrn(c);c-- >0;)(i.isOdd()||s.isOdd())&&(i.iadd(h),s.isub(l)),i.iushrn(1),s.iushrn(1);for(var p=0,m=1;0==(r.words[0]&m)&&p<26;++p,m<<=1);if(p>0)for(r.iushrn(p);p-- >0;)(a.isOdd()||u.isOdd())&&(a.iadd(h),u.isub(l)),a.iushrn(1),u.iushrn(1);e.cmp(r)>=0?(e.isub(r),i.isub(a),s.isub(u)):(r.isub(e),a.isub(i),u.isub(s))}return{a,b:u,gcd:r.iushln(f)}},o.prototype._invmp=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i,s=new o(1),a=new o(0),u=r.clone();e.cmpn(1)>0&&r.cmpn(1)>0;){for(var f=0,h=1;0==(e.words[0]&h)&&f<26;++f,h<<=1);if(f>0)for(e.iushrn(f);f-- >0;)s.isOdd()&&s.iadd(u),s.iushrn(1);for(var l=0,c=1;0==(r.words[0]&c)&&l<26;++l,c<<=1);if(l>0)for(r.iushrn(l);l-- >0;)a.isOdd()&&a.iadd(u),a.iushrn(1);e.cmp(r)>=0?(e.isub(r),s.isub(a)):(r.isub(e),a.isub(s))}return(i=0===e.cmpn(1)?s:a).cmpn(0)<0&&i.iadd(t),i},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),r=t.clone();e.negative=0,r.negative=0;for(var n=0;e.isEven()&&r.isEven();n++)e.iushrn(1),r.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;r.isEven();)r.iushrn(1);var i=e.cmp(r);if(i<0){var o=e;e=r,r=o}else if(0===i||0===r.cmpn(1))break;e.isub(r)}return r.iushln(n)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){n("number"==typeof t);var e=t%26,r=(t-e)/26,i=1<<e;if(this.length<=r)return this._expand(r+1),this.words[r]|=i,this;for(var o=i,s=r;0!==o&&s<this.length;s++){var a=0|this.words[s];o=(a+=o)>>>26,a&=67108863,this.words[s]=a}return 0!==o&&(this.words[s]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var e,r=t<0;if(0!==this.negative&&!r)return-1;if(0===this.negative&&r)return 1;if(this.strip(),this.length>1)e=1;else{r&&(t=-t),n(t<=67108863,"Number is too big");var i=0|this.words[0];e=i===t?0:i<t?-1:1}return 0!==this.negative?0|-e:e},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,r=this.length-1;r>=0;r--){var n=0|this.words[r],i=0|t.words[r];if(n!==i){n<i?e=-1:n>i&&(e=1);break}}return e},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new A(t)},o.prototype.toRed=function(t){return n(!this.red,"Already a number in reduction context"),n(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return n(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return n(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return n(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return n(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return n(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return n(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return n(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return n(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return n(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return n(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return n(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return n(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return n(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var v={k256:null,p224:null,p192:null,p25519:null};function y(t,e){this.name=t,this.p=new o(e,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function w(){y.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function M(){y.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function b(){y.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function _(){y.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function A(t){if("string"==typeof t){var e=o._prime(t);this.m=e.p,this.prime=e}else n(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function k(t){A.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}y.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},y.prototype.ireduce=function(t){var e,r=t;do{this.split(r,this.tmp),e=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(e>this.n);var n=e<this.n?-1:r.ucmp(this.p);return 0===n?(r.words[0]=0,r.length=1):n>0?r.isub(this.p):void 0!==r.strip?r.strip():r._strip(),r},y.prototype.split=function(t,e){t.iushrn(this.n,0,e)},y.prototype.imulK=function(t){return t.imul(this.k)},i(w,y),w.prototype.split=function(t,e){for(var r=4194303,n=Math.min(t.length,9),i=0;i<n;i++)e.words[i]=t.words[i];if(e.length=n,t.length<=9)return t.words[0]=0,void(t.length=1);var o=t.words[9];for(e.words[e.length++]=o&r,i=10;i<t.length;i++){var s=0|t.words[i];t.words[i-10]=(s&r)<<4|o>>>22,o=s}o>>>=22,t.words[i-10]=o,0===o&&t.length>10?t.length-=10:t.length-=9},w.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,r=0;r<t.length;r++){var n=0|t.words[r];e+=977*n,t.words[r]=67108863&e,e=64*n+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},i(M,y),i(b,y),i(_,y),_.prototype.imulK=function(t){for(var e=0,r=0;r<t.length;r++){var n=19*(0|t.words[r])+e,i=67108863&n;n>>>=26,t.words[r]=i,e=n}return 0!==e&&(t.words[t.length++]=e),t},o._prime=function(t){if(v[t])return v[t];var e;if("k256"===t)e=new w;else if("p224"===t)e=new M;else if("p192"===t)e=new b;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new _}return v[t]=e,e},A.prototype._verify1=function(t){n(0===t.negative,"red works only with positives"),n(t.red,"red works only with red numbers")},A.prototype._verify2=function(t,e){n(0==(t.negative|e.negative),"red works only with positives"),n(t.red&&t.red===e.red,"red works only with red numbers")},A.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},A.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},A.prototype.add=function(t,e){this._verify2(t,e);var r=t.add(e);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},A.prototype.iadd=function(t,e){this._verify2(t,e);var r=t.iadd(e);return r.cmp(this.m)>=0&&r.isub(this.m),r},A.prototype.sub=function(t,e){this._verify2(t,e);var r=t.sub(e);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},A.prototype.isub=function(t,e){this._verify2(t,e);var r=t.isub(e);return r.cmpn(0)<0&&r.iadd(this.m),r},A.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},A.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},A.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},A.prototype.isqr=function(t){return this.imul(t,t.clone())},A.prototype.sqr=function(t){return this.mul(t,t)},A.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(n(e%2==1),3===e){var r=this.m.add(new o(1)).iushrn(2);return this.pow(t,r)}for(var i=this.m.subn(1),s=0;!i.isZero()&&0===i.andln(1);)s++,i.iushrn(1);n(!i.isZero());var a=new o(1).toRed(this),u=a.redNeg(),f=this.m.subn(1).iushrn(1),h=this.m.bitLength();for(h=new o(2*h*h).toRed(this);0!==this.pow(h,f).cmp(u);)h.redIAdd(u);for(var l=this.pow(h,i),c=this.pow(t,i.addn(1).iushrn(1)),d=this.pow(t,i),p=s;0!==d.cmp(a);){for(var m=d,g=0;0!==m.cmp(a);g++)m=m.redSqr();n(g<p);var v=this.pow(l,new o(1).iushln(p-g-1));c=c.redMul(v),l=v.redSqr(),d=d.redMul(l),p=g}return c},A.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},A.prototype.pow=function(t,e){if(e.isZero())return new o(1).toRed(this);if(0===e.cmpn(1))return t.clone();var r=new Array(16);r[0]=new o(1).toRed(this),r[1]=t;for(var n=2;n<r.length;n++)r[n]=this.mul(r[n-1],t);var i=r[0],s=0,a=0,u=e.bitLength()%26;for(0===u&&(u=26),n=e.length-1;n>=0;n--){for(var f=e.words[n],h=u-1;h>=0;h--){var l=f>>h&1;i!==r[0]&&(i=this.sqr(i)),0!==l||0!==s?(s<<=1,s|=l,(4==++a||0===n&&0===h)&&(i=this.mul(i,r[s]),a=0,s=0)):a=0}u=26}return i},A.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},A.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},o.mont=function(t){return new k(t)},i(k,A),k.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},k.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},k.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},k.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new o(0)._forceRed(this);var r=t.mul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),s=i;return i.cmp(this.m)>=0?s=i.isub(this.m):i.cmpn(0)<0&&(s=i.iadd(this.m)),s._forceRed(this)},k.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t=r.nmd(t),this)},8482:(t,e,r)=>{const n=r(86918),i=r(9085);function o(t){const e=new Error("Expect argument to be non-empty array");if("object"!=typeof t||!t.length)throw e;const r=t.map((function(t){return"bytes"===t.type?n.toBuffer(t.value):t.value})),o=t.map((function(t){return t.type})),s=t.map((function(t){if(!t.name)throw e;return t.type+" "+t.name}));return i.soliditySHA3(["bytes32","bytes32"],[i.soliditySHA3(new Array(t.length).fill("string"),s),i.soliditySHA3(o,r)])}function s(t,e){const r=n.toBuffer(e),i=n.fromRpcSig(r);return n.ecrecover(t,i.v,i.r,i.s)}function a(t){const e=n.toBuffer(t.data);return s(n.hashPersonalMessage(e),t.sig)}function u(t,e){for(var r=""+t;r.length<e;)r="0"+r;return r}t.exports={concatSig:function(t,e,r){const i=n.fromSigned(e),o=n.fromSigned(r),s=n.bufferToInt(t),a=u(n.toUnsigned(i).toString("hex"),64),f=u(n.toUnsigned(o).toString("hex"),64),h=n.stripHexPrefix(n.intToHex(s));return n.addHexPrefix(a.concat(f,h)).toString("hex")},normalize:function(t){if(t){if("number"==typeof t){const e=n.toBuffer(t);t=n.bufferToHex(e)}if("string"!=typeof t){var e="eth-sig-util.normalize() requires hex string or integer input.";throw new Error(e+=" received "+typeof t+": "+t)}return n.addHexPrefix(t.toLowerCase())}},personalSign:function(t,e){var r=n.toBuffer(e.data),i=n.hashPersonalMessage(r),o=n.ecsign(i,t);return n.bufferToHex(this.concatSig(o.v,o.r,o.s))},recoverPersonalSignature:function(t){const e=a(t),r=n.publicToAddress(e);return n.bufferToHex(r)},extractPublicKey:function(t){return"0x"+a(t).toString("hex")},typedSignatureHash:function(t){const e=o(t);return n.bufferToHex(e)},signTypedData:function(t,e){const r=o(e.data),i=n.ecsign(r,t);return n.bufferToHex(this.concatSig(i.v,i.r,i.s))},recoverTypedSignature:function(t){const e=s(o(t.data),t.sig),r=n.publicToAddress(e);return n.bufferToHex(r)}}},9085:(t,e,r)=>{t.exports=r(91426)},91426:(t,e,r)=>{const n=r(12582),i=r(26949);var o=function(){};function s(t){return t.startsWith("int[")?"int256"+t.slice(3):"int"===t?"int256":t.startsWith("uint[")?"uint256"+t.slice(4):"uint"===t?"uint256":t.startsWith("fixed[")?"fixed128x128"+t.slice(5):"fixed"===t?"fixed128x128":t.startsWith("ufixed[")?"ufixed128x128"+t.slice(6):"ufixed"===t?"ufixed128x128":t}function a(t){return parseInt(/^\D+(\d+)$/.exec(t)[1],10)}function u(t){var e=/^\D+(\d+)x(\d+)$/.exec(t);return[parseInt(e[1],10),parseInt(e[2],10)]}function f(t){var e=t.match(/(.*)\[(.*?)\]$/);return e?""===e[2]?"dynamic":parseInt(e[2],10):null}function h(t){var e=typeof t;if("string"===e)return n.isHexPrefixed(t)?new i(n.stripHexPrefix(t),16):new i(t,10);if("number"===e)return new i(t);if(t.toArray)return t;throw new Error("Argument is not a number")}function l(t){var e=/^(\w+)\((.*)\)$/.exec(t);if(3!==e.length)throw new Error("Invalid method signature");var r=/^(.+)\):\((.+)$/.exec(e[2]);if(null!==r&&3===r.length)return{method:e[1],args:r[1].split(","),retargs:r[2].split(",")};var n=e[2].split(",");return 1===n.length&&""===n[0]&&(n=[]),{method:e[1],args:n}}function c(t,e){var r,o,s,l;if("address"===t)return c("uint160",h(e));if("bool"===t)return c("uint8",e?1:0);if("string"===t)return c("bytes",Buffer.from(e,"utf8"));if(g(t)){if(void 0===e.length)throw new Error("Not an array?");if("dynamic"!==(r=f(t))&&0!==r&&e.length>r)throw new Error("Elements exceed array size: "+r);for(l in s=[],t=t.slice(0,t.lastIndexOf("[")),"string"==typeof e&&(e=JSON.parse(e)),e)s.push(c(t,e[l]));if("dynamic"===r){var d=c("uint256",e.length);s.unshift(d)}return Buffer.concat(s)}if("bytes"===t)return e=Buffer.from(e),s=Buffer.concat([c("uint256",e.length),e]),e.length%32!=0&&(s=Buffer.concat([s,n.zeros(32-e.length%32)])),s;if(t.startsWith("bytes")){if((r=a(t))<1||r>32)throw new Error("Invalid bytes<N> width: "+r);return n.setLengthRight(e,32)}if(t.startsWith("uint")){if((r=a(t))%8||r<8||r>256)throw new Error("Invalid uint<N> width: "+r);if((o=h(e)).bitLength()>r)throw new Error("Supplied uint exceeds width: "+r+" vs "+o.bitLength());if(o<0)throw new Error("Supplied uint is negative");return o.toArrayLike(Buffer,"be",32)}if(t.startsWith("int")){if((r=a(t))%8||r<8||r>256)throw new Error("Invalid int<N> width: "+r);if((o=h(e)).bitLength()>r)throw new Error("Supplied int exceeds width: "+r+" vs "+o.bitLength());return o.toTwos(256).toArrayLike(Buffer,"be",32)}if(t.startsWith("ufixed")){if(r=u(t),(o=h(e))<0)throw new Error("Supplied ufixed is negative");return c("uint256",o.mul(new i(2).pow(new i(r[1]))))}if(t.startsWith("fixed"))return r=u(t),c("int256",h(e).mul(new i(2).pow(new i(r[1]))));throw new Error("Unsupported or invalid type: "+t)}function d(t,e,r){var n,o,s,a;if("string"==typeof t&&(t=p(t)),"address"===t.name)return d(t.rawType,e,r).toArrayLike(Buffer,"be",20).toString("hex");if("bool"===t.name)return d(t.rawType,e,r).toString()===new i(1).toString();if("string"===t.name){var u=d(t.rawType,e,r);return Buffer.from(u,"utf8").toString()}if(t.isArray){for(s=[],n=t.size,"dynamic"===t.size&&(r=d("uint256",e,r).toNumber(),n=d("uint256",e,r).toNumber(),r+=32),a=0;a<n;a++){var f=d(t.subArray,e,r);s.push(f),r+=t.subArray.memoryUsage}return s}if("bytes"===t.name)return r=d("uint256",e,r).toNumber(),n=d("uint256",e,r).toNumber(),e.slice(r+32,r+32+n);if(t.name.startsWith("bytes"))return e.slice(r,r+t.size);if(t.name.startsWith("uint")){if((o=new i(e.slice(r,r+32),16,"be")).bitLength()>t.size)throw new Error("Decoded int exceeds width: "+t.size+" vs "+o.bitLength());return o}if(t.name.startsWith("int")){if((o=new i(e.slice(r,r+32),16,"be").fromTwos(256)).bitLength()>t.size)throw new Error("Decoded uint exceeds width: "+t.size+" vs "+o.bitLength());return o}if(t.name.startsWith("ufixed")){if(n=new i(2).pow(new i(t.size[1])),!(o=d("uint256",e,r)).mod(n).isZero())throw new Error("Decimals not supported yet");return o.div(n)}if(t.name.startsWith("fixed")){if(n=new i(2).pow(new i(t.size[1])),!(o=d("int256",e,r)).mod(n).isZero())throw new Error("Decimals not supported yet");return o.div(n)}throw new Error("Unsupported or invalid type: "+t.name)}function p(t){var e,r,n;if(g(t)){e=f(t);var i=t.slice(0,t.lastIndexOf("["));return i=p(i),{isArray:!0,name:t,size:e,memoryUsage:"dynamic"===e?32:i.memoryUsage*e,subArray:i}}switch(t){case"address":n="uint160";break;case"bool":n="uint8";break;case"string":n="bytes"}if(r={rawType:n,name:t,memoryUsage:32},t.startsWith("bytes")&&"bytes"!==t||t.startsWith("uint")||t.startsWith("int")?r.size=a(t):(t.startsWith("ufixed")||t.startsWith("fixed"))&&(r.size=u(t)),t.startsWith("bytes")&&"bytes"!==t&&(r.size<1||r.size>32))throw new Error("Invalid bytes<N> width: "+r.size);if((t.startsWith("uint")||t.startsWith("int"))&&(r.size%8||r.size<8||r.size>256))throw new Error("Invalid int/uint<N> width: "+r.size);return r}function m(t){return"string"===t||"bytes"===t||"dynamic"===f(t)}function g(t){return t.lastIndexOf("]")===t.length-1}function v(t,e){return t.startsWith("address")||t.startsWith("bytes")?"0x"+e.toString("hex"):e.toString()}o.eventID=function(t,e){var r=t+"("+e.map(s).join(",")+")";return n.keccak256(Buffer.from(r))},o.methodID=function(t,e){return o.eventID(t,e).slice(0,4)},o.rawEncode=function(t,e){var r=[],n=[],i=0;t.forEach((function(t){if(g(t)){var e=f(t);i+="dynamic"!==e?32*e:32}else i+=32}));for(var o=0;o<t.length;o++){var a=s(t[o]),u=c(a,e[o]);m(a)?(r.push(c("uint256",i)),n.push(u),i+=u.length):r.push(u)}return Buffer.concat(r.concat(n))},o.rawDecode=function(t,e){var r=[];e=Buffer.from(e);for(var n=0,i=0;i<t.length;i++){var o=p(s(t[i])),a=d(o,e,n);n+=o.memoryUsage,r.push(a)}return r},o.simpleEncode=function(t){var e=Array.prototype.slice.call(arguments).slice(1),r=l(t);if(e.length!==r.args.length)throw new Error("Argument count mismatch");return Buffer.concat([o.methodID(r.method,r.args),o.rawEncode(r.args,e)])},o.simpleDecode=function(t,e){var r=l(t);if(!r.retargs)throw new Error("No return values in method");return o.rawDecode(r.retargs,e)},o.stringify=function(t,e){var r=[];for(var n in t){var i=t[n],o=e[n];o=/^[^\[]+\[.*\]$/.test(i)?o.map((function(t){return v(i,t)})).join(", "):v(i,o),r.push(o)}return r},o.solidityHexValue=function(t,e,r){var i,s;if(g(t)){var u=t.replace(/\[.*?\]/,"");if(!g(u)){var l=f(t);if("dynamic"!==l&&0!==l&&e.length>l)throw new Error("Elements exceed array size: "+l)}var c=e.map((function(t){return o.solidityHexValue(u,t,256)}));return Buffer.concat(c)}if("bytes"===t)return e;if("string"===t)return Buffer.from(e,"utf8");if("bool"===t){r=r||8;var d=Array(r/4).join("0");return Buffer.from(e?d+"1":d+"0","hex")}if("address"===t){var p=20;return r&&(p=r/8),n.setLengthLeft(e,p)}if(t.startsWith("bytes")){if((i=a(t))<1||i>32)throw new Error("Invalid bytes<N> width: "+i);return n.setLengthRight(e,i)}if(t.startsWith("uint")){if((i=a(t))%8||i<8||i>256)throw new Error("Invalid uint<N> width: "+i);if((s=h(e)).bitLength()>i)throw new Error("Supplied uint exceeds width: "+i+" vs "+s.bitLength());return r=r||i,s.toArrayLike(Buffer,"be",r/8)}if(t.startsWith("int")){if((i=a(t))%8||i<8||i>256)throw new Error("Invalid int<N> width: "+i);if((s=h(e)).bitLength()>i)throw new Error("Supplied int exceeds width: "+i+" vs "+s.bitLength());return r=r||i,s.toTwos(i).toArrayLike(Buffer,"be",r/8)}throw new Error("Unsupported or invalid type: "+t)},o.solidityPack=function(t,e){if(t.length!==e.length)throw new Error("Number of types are not matching the values");for(var r=[],n=0;n<t.length;n++){var i=s(t[n]),a=e[n];r.push(o.solidityHexValue(i,a,null))}return Buffer.concat(r)},o.soliditySHA3=function(t,e){return n.keccak256(o.solidityPack(t,e))},o.soliditySHA256=function(t,e){return n.sha256(o.solidityPack(t,e))},o.solidityRIPEMD160=function(t,e){return n.ripemd160(o.solidityPack(t,e),!0)},o.fromSerpent=function(t){for(var e,r=[],n=0;n<t.length;n++){var i=t[n];if("s"===i)r.push("bytes");else if("b"===i){for(var o="bytes",s=n+1;s<t.length&&(e=t[s])>="0"&&e<="9";)o+=t[s]-"0",s++;n=s-1,r.push(o)}else if("i"===i)r.push("int256");else{if("a"!==i)throw new Error("Unsupported or invalid type: "+i);r.push("int256[]")}}return r},o.toSerpent=function(t){for(var e=[],r=0;r<t.length;r++){var n=t[r];if("bytes"===n)e.push("s");else if(n.startsWith("bytes"))e.push("b"+a(n));else if("int256"===n)e.push("i");else{if("int256[]"!==n)throw new Error("Unsupported or invalid type: "+n);e.push("a")}}return e.join("")},t.exports=o},80881:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.importPublic=e.privateToPublic=e.privateToAddress=e.publicToAddress=e.pubToAddress=e.isValidPublic=e.isValidPrivate=e.isPrecompiled=e.generateAddress2=e.generateAddress=e.isValidChecksumAddress=e.toChecksumAddress=e.isZeroAddress=e.isValidAddress=e.zeroAddress=void 0;var n=r(48583),i=r(80884),o=r(1206),s=r(26949),a=r(28454),u=r(2882);e.zeroAddress=function(){var t=a.zeros(20);return a.bufferToHex(t)},e.isValidAddress=function(t){return/^0x[0-9a-fA-F]{40}$/.test(t)},e.isZeroAddress=function(t){return e.zeroAddress()===a.addHexPrefix(t)},e.toChecksumAddress=function(t,e){t=i.stripHexPrefix(t).toLowerCase();for(var r=void 0!==e?e.toString()+"0x":"",n=u.keccak(r+t).toString("hex"),o="0x",s=0;s<t.length;s++)parseInt(n[s],16)>=8?o+=t[s].toUpperCase():o+=t[s];return o},e.isValidChecksumAddress=function(t,r){return e.isValidAddress(t)&&e.toChecksumAddress(t,r)===t},e.generateAddress=function(t,e){t=a.toBuffer(t);var r=new s(e);return r.isZero()?u.rlphash([t,null]).slice(-20):u.rlphash([t,Buffer.from(r.toArray())]).slice(-20)},e.generateAddress2=function(t,e,r){var i=a.toBuffer(t),o=a.toBuffer(e),s=a.toBuffer(r);return n(20===i.length),n(32===o.length),u.keccak256(Buffer.concat([Buffer.from("ff","hex"),i,o,u.keccak256(s)])).slice(-20)},e.isPrecompiled=function(t){var e=a.unpad(t);return 1===e.length&&e[0]>=1&&e[0]<=8},e.isValidPrivate=function(t){return o.privateKeyVerify(t)},e.isValidPublic=function(t,e){return void 0===e&&(e=!1),64===t.length?o.publicKeyVerify(Buffer.concat([Buffer.from([4]),t])):!!e&&o.publicKeyVerify(t)},e.pubToAddress=function(t,e){return void 0===e&&(e=!1),t=a.toBuffer(t),e&&64!==t.length&&(t=o.publicKeyConvert(t,!1).slice(1)),n(64===t.length),u.keccak(t).slice(-20)},e.publicToAddress=e.pubToAddress,e.privateToAddress=function(t){return e.publicToAddress(e.privateToPublic(t))},e.privateToPublic=function(t){return t=a.toBuffer(t),o.publicKeyCreate(t,!1).slice(1)},e.importPublic=function(t){return 64!==(t=a.toBuffer(t)).length&&(t=o.publicKeyConvert(t,!1).slice(1)),t}},28454:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.baToJSON=e.addHexPrefix=e.toUnsigned=e.fromSigned=e.bufferToHex=e.bufferToInt=e.toBuffer=e.stripZeros=e.unpad=e.setLengthRight=e.setLength=e.setLengthLeft=e.zeros=void 0;var n=r(80884),i=r(26949);e.zeros=function(t){return Buffer.allocUnsafe(t).fill(0)},e.setLengthLeft=function(t,r,n){void 0===n&&(n=!1);var i=e.zeros(r);return t=e.toBuffer(t),n?t.length<r?(t.copy(i),i):t.slice(0,r):t.length<r?(t.copy(i,r-t.length),i):t.slice(-r)},e.setLength=e.setLengthLeft,e.setLengthRight=function(t,r){return e.setLength(t,r,!0)},e.unpad=function(t){for(var e=(t=n.stripHexPrefix(t))[0];t.length>0&&"0"===e.toString();)e=(t=t.slice(1))[0];return t},e.stripZeros=e.unpad,e.toBuffer=function(t){if(!Buffer.isBuffer(t))if(Array.isArray(t))t=Buffer.from(t);else if("string"==typeof t){if(!n.isHexString(t))throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: "+t);t=Buffer.from(n.padToEven(n.stripHexPrefix(t)),"hex")}else if("number"==typeof t)t=n.intToBuffer(t);else if(null==t)t=Buffer.allocUnsafe(0);else if(i.isBN(t))t=t.toArrayLike(Buffer);else{if(!t.toArray)throw new Error("invalid type");t=Buffer.from(t.toArray())}return t},e.bufferToInt=function(t){return new i(e.toBuffer(t)).toNumber()},e.bufferToHex=function(t){return"0x"+(t=e.toBuffer(t)).toString("hex")},e.fromSigned=function(t){return new i(t).fromTwos(256)},e.toUnsigned=function(t){return Buffer.from(t.toTwos(256).toArray())},e.addHexPrefix=function(t){return"string"!=typeof t||n.isHexPrefixed(t)?t:"0x"+t},e.baToJSON=function(t){if(Buffer.isBuffer(t))return"0x"+t.toString("hex");if(t instanceof Array){for(var r=[],n=0;n<t.length;n++)r.push(e.baToJSON(t[n]));return r}}},16061:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.KECCAK256_RLP=e.KECCAK256_RLP_S=e.KECCAK256_RLP_ARRAY=e.KECCAK256_RLP_ARRAY_S=e.KECCAK256_NULL=e.KECCAK256_NULL_S=e.TWO_POW256=e.MAX_INTEGER=void 0;var n=r(26949);e.MAX_INTEGER=new n("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",16),e.TWO_POW256=new n("10000000000000000000000000000000000000000000000000000000000000000",16),e.KECCAK256_NULL_S="c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",e.KECCAK256_NULL=Buffer.from(e.KECCAK256_NULL_S,"hex"),e.KECCAK256_RLP_ARRAY_S="1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",e.KECCAK256_RLP_ARRAY=Buffer.from(e.KECCAK256_RLP_ARRAY_S,"hex"),e.KECCAK256_RLP_S="56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",e.KECCAK256_RLP=Buffer.from(e.KECCAK256_RLP_S,"hex")},2882:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.rlphash=e.ripemd160=e.sha256=e.keccak256=e.keccak=void 0;var n=r(82192),i=n.keccak224,o=n.keccak384,s=n.keccak256,a=n.keccak512,u=r(23482),f=r(80884),h=r(51675),l=r(28454);e.keccak=function(t,e){switch(void 0===e&&(e=256),t="string"!=typeof t||f.isHexString(t)?l.toBuffer(t):Buffer.from(t,"utf8"),e||(e=256),e){case 224:return i(t);case 256:return s(t);case 384:return o(t);case 512:return a(t);default:throw new Error("Invald algorithm: keccak"+e)}},e.keccak256=function(t){return e.keccak(t)},e.sha256=function(t){return t=l.toBuffer(t),u("sha256").update(t).digest()},e.ripemd160=function(t,e){t=l.toBuffer(t);var r=u("rmd160").update(t).digest();return!0===e?l.setLength(r,32):r},e.rlphash=function(t){return e.keccak(h.encode(t))}},12582:function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),i=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||e.hasOwnProperty(r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),e.secp256k1=e.rlp=e.BN=void 0;var o=r(1206);e.secp256k1=o;var s=r(80884),a=r(26949);e.BN=a;var u=r(51675);e.rlp=u,Object.assign(e,s),i(r(16061),e),i(r(80881),e),i(r(2882),e),i(r(13203),e),i(r(28454),e),i(r(72782),e)},72782:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.defineProperties=void 0;var n=r(48583),i=r(80884),o=r(51675),s=r(28454);e.defineProperties=function(t,e,r){if(t.raw=[],t._fields=[],t.toJSON=function(e){if(void 0===e&&(e=!1),e){var r={};return t._fields.forEach((function(e){r[e]="0x"+t[e].toString("hex")})),r}return s.baToJSON(t.raw)},t.serialize=function(){return o.encode(t.raw)},e.forEach((function(e,r){function i(){return t.raw[r]}function o(i){"00"!==(i=s.toBuffer(i)).toString("hex")||e.allowZero||(i=Buffer.allocUnsafe(0)),e.allowLess&&e.length?(i=s.stripZeros(i),n(e.length>=i.length,"The field "+e.name+" must not have more "+e.length+" bytes")):e.allowZero&&0===i.length||!e.length||n(e.length===i.length,"The field "+e.name+" must have byte length of "+e.length),t.raw[r]=i}t._fields.push(e.name),Object.defineProperty(t,e.name,{enumerable:!0,configurable:!0,get:i,set:o}),e.default&&(t[e.name]=e.default),e.alias&&Object.defineProperty(t,e.alias,{enumerable:!1,configurable:!0,set:o,get:i})})),r)if("string"==typeof r&&(r=Buffer.from(i.stripHexPrefix(r),"hex")),Buffer.isBuffer(r)&&(r=o.decode(r)),Array.isArray(r)){if(r.length>t._fields.length)throw new Error("wrong number of fields in data");r.forEach((function(e,r){t[t._fields[r]]=s.toBuffer(e)}))}else{if("object"!=typeof r)throw new Error("invalid data");var a=Object.keys(r);e.forEach((function(e){-1!==a.indexOf(e.name)&&(t[e.name]=r[e.name]),-1!==a.indexOf(e.alias)&&(t[e.alias]=r[e.alias])}))}}},1206:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ecdhUnsafe=e.ecdh=e.recover=e.verify=e.sign=e.signatureImportLax=e.signatureImport=e.signatureExport=e.signatureNormalize=e.publicKeyCombine=e.publicKeyTweakMul=e.publicKeyTweakAdd=e.publicKeyVerify=e.publicKeyConvert=e.publicKeyCreate=e.privateKeyTweakMul=e.privateKeyTweakAdd=e.privateKeyModInverse=e.privateKeyNegate=e.privateKeyImport=e.privateKeyExport=e.privateKeyVerify=void 0;var n=r(95053),i=r(47074),o=r(93413);e.privateKeyVerify=function(t){return 32===t.length&&n.privateKeyVerify(Uint8Array.from(t))},e.privateKeyExport=function(t,e){if(32!==t.length)throw new RangeError("private key length is invalid");var r=i.privateKeyExport(t,e);return o.privateKeyExport(t,r,e)},e.privateKeyImport=function(t){if(null!==(t=o.privateKeyImport(t))&&32===t.length&&e.privateKeyVerify(t))return t;throw new Error("couldn't import from DER format")},e.privateKeyNegate=function(t){return Buffer.from(n.privateKeyNegate(Uint8Array.from(t)))},e.privateKeyModInverse=function(t){if(32!==t.length)throw new Error("private key length is invalid");return Buffer.from(i.privateKeyModInverse(Uint8Array.from(t)))},e.privateKeyTweakAdd=function(t,e){return Buffer.from(n.privateKeyTweakAdd(Uint8Array.from(t),e))},e.privateKeyTweakMul=function(t,e){return Buffer.from(n.privateKeyTweakMul(Uint8Array.from(t),Uint8Array.from(e)))},e.publicKeyCreate=function(t,e){return Buffer.from(n.publicKeyCreate(Uint8Array.from(t),e))},e.publicKeyConvert=function(t,e){return Buffer.from(n.publicKeyConvert(Uint8Array.from(t),e))},e.publicKeyVerify=function(t){return(33===t.length||65===t.length)&&n.publicKeyVerify(Uint8Array.from(t))},e.publicKeyTweakAdd=function(t,e,r){return Buffer.from(n.publicKeyTweakAdd(Uint8Array.from(t),Uint8Array.from(e),r))},e.publicKeyTweakMul=function(t,e,r){return Buffer.from(n.publicKeyTweakMul(Uint8Array.from(t),Uint8Array.from(e),r))},e.publicKeyCombine=function(t,e){var r=[];return t.forEach((function(t){r.push(Uint8Array.from(t))})),Buffer.from(n.publicKeyCombine(r,e))},e.signatureNormalize=function(t){return Buffer.from(n.signatureNormalize(Uint8Array.from(t)))},e.signatureExport=function(t){return Buffer.from(n.signatureExport(Uint8Array.from(t)))},e.signatureImport=function(t){return Buffer.from(n.signatureImport(Uint8Array.from(t)))},e.signatureImportLax=function(t){if(0===t.length)throw new RangeError("signature length is invalid");var e=o.signatureImportLax(t);if(null===e)throw new Error("couldn't parse DER signature");return i.signatureImport(e)},e.sign=function(t,e,r){if(null===r)throw new TypeError("options should be an Object");var i=void 0;if(r){if(i={},null===r.data)throw new TypeError("options.data should be a Buffer");if(r.data){if(32!=r.data.length)throw new RangeError("options.data length is invalid");i.data=new Uint8Array(r.data)}if(null===r.noncefn)throw new TypeError("options.noncefn should be a Function");r.noncefn&&(i.noncefn=function(t,e,n,i,o){var s=null!=n?Buffer.from(n):null,a=null!=i?Buffer.from(i):null,u=Buffer.from("");return r.noncefn&&(u=r.noncefn(Buffer.from(t),Buffer.from(e),s,a,o)),new Uint8Array(u)})}var o=n.ecdsaSign(Uint8Array.from(t),Uint8Array.from(e),i);return{signature:Buffer.from(o.signature),recovery:o.recid}},e.verify=function(t,e,r){return n.ecdsaVerify(Uint8Array.from(e),Uint8Array.from(t),r)},e.recover=function(t,e,r,i){return Buffer.from(n.ecdsaRecover(Uint8Array.from(e),r,Uint8Array.from(t),i))},e.ecdh=function(t,e){return Buffer.from(n.ecdh(Uint8Array.from(t),Uint8Array.from(e),{}))},e.ecdhUnsafe=function(t,e,r){if(33!==t.length&&65!==t.length)throw new RangeError("public key length is invalid");if(32!==e.length)throw new RangeError("private key length is invalid");return Buffer.from(i.ecdhUnsafe(Uint8Array.from(t),Uint8Array.from(e),r))}},93413:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=Buffer.from([48,129,211,2,1,1,4,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,129,133,48,129,130,2,1,1,48,44,6,7,42,134,72,206,61,1,1,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,252,47,48,6,4,1,0,4,1,7,4,33,2,121,190,102,126,249,220,187,172,85,160,98,149,206,135,11,7,2,155,252,219,45,206,40,217,89,242,129,91,22,248,23,152,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,186,174,220,230,175,72,160,59,191,210,94,140,208,54,65,65,2,1,1,161,36,3,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),n=Buffer.from([48,130,1,19,2,1,1,4,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,129,165,48,129,162,2,1,1,48,44,6,7,42,134,72,206,61,1,1,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,252,47,48,6,4,1,0,4,1,7,4,65,4,121,190,102,126,249,220,187,172,85,160,98,149,206,135,11,7,2,155,252,219,45,206,40,217,89,242,129,91,22,248,23,152,72,58,218,119,38,163,196,101,93,164,251,252,14,17,8,168,253,23,180,72,166,133,84,25,156,71,208,143,251,16,212,184,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,186,174,220,230,175,72,160,59,191,210,94,140,208,54,65,65,2,1,1,161,68,3,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);e.privateKeyExport=function(t,e,i){void 0===i&&(i=!0);var o=Buffer.from(i?r:n);return t.copy(o,i?8:9),e.copy(o,i?181:214),o},e.privateKeyImport=function(t){var e=t.length,r=0;if(e<r+1||48!==t[r])return null;if(e<(r+=1)+1||!(128&t[r]))return null;var n=127&t[r];if(n<1||n>2)return null;if(e<(r+=1)+n)return null;var i=t[r+n-1]|(n>1?t[r+n-2]<<8:0);return e<(r+=n)+i||e<r+3||2!==t[r]||1!==t[r+1]||1!==t[r+2]||e<(r+=3)+2||4!==t[r]||t[r+1]>32||e<r+2+t[r+1]?null:t.slice(r+2,r+2+t[r+1])},e.signatureImportLax=function(t){var e=Buffer.alloc(32,0),r=Buffer.alloc(32,0),n=t.length,i=0;if(48!==t[i++])return null;var o=t[i++];if(128&o&&(i+=o-128)>n)return null;if(2!==t[i++])return null;var s=t[i++];if(128&s){if(i+(o=s-128)>n)return null;for(;o>0&&0===t[i];i+=1,o-=1);for(s=0;o>0;i+=1,o-=1)s=(s<<8)+t[i]}if(s>n-i)return null;var a=i;if(i+=s,2!==t[i++])return null;var u=t[i++];if(128&u){if(i+(o=u-128)>n)return null;for(;o>0&&0===t[i];i+=1,o-=1);for(u=0;o>0;i+=1,o-=1)u=(u<<8)+t[i]}if(u>n-i)return null;var f=i;for(i+=u;s>0&&0===t[a];s-=1,a+=1);if(s>32)return null;var h=t.slice(a,a+s);for(h.copy(e,32-h.length);u>0&&0===t[f];u-=1,f+=1);if(u>32)return null;var l=t.slice(f,f+u);return l.copy(r,32-l.length),{r:e,s:r}}},47074:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(26949),i=new(0,r(86266).ec)("secp256k1"),o=i.curve;e.privateKeyExport=function(t,e){void 0===e&&(e=!0);var r=new n(t);if(r.ucmp(o.n)>=0)throw new Error("couldn't export to DER format");var a=i.g.mul(r);return s(a.getX(),a.getY(),e)},e.privateKeyModInverse=function(t){var e=new n(t);if(e.ucmp(o.n)>=0||e.isZero())throw new Error("private key range is invalid");return e.invm(o.n).toArrayLike(Buffer,"be",32)},e.signatureImport=function(t){var e=new n(t.r);e.ucmp(o.n)>=0&&(e=new n(0));var r=new n(t.s);return r.ucmp(o.n)>=0&&(r=new n(0)),Buffer.concat([e.toArrayLike(Buffer,"be",32),r.toArrayLike(Buffer,"be",32)])},e.ecdhUnsafe=function(t,e,r){void 0===r&&(r=!0);var a=i.keyFromPublic(t),u=new n(e);if(u.ucmp(o.n)>=0||u.isZero())throw new Error("scalar was invalid (zero or overflow)");var f=a.pub.mul(u);return s(f.getX(),f.getY(),r)};var s=function(t,e,r){var n;return r?((n=Buffer.alloc(33))[0]=e.isOdd()?3:2,t.toArrayLike(Buffer,"be",32).copy(n,1)):((n=Buffer.alloc(65))[0]=4,t.toArrayLike(Buffer,"be",32).copy(n,1),e.toArrayLike(Buffer,"be",32).copy(n,33)),n}},13203:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.hashPersonalMessage=e.isValidSignature=e.fromRpcSig=e.toRpcSig=e.ecrecover=e.ecsign=void 0;var n=r(1206),i=r(26949),o=r(28454),s=r(2882);function a(t,e){return e?t-(2*e+35):t-27}function u(t){return 0===t||1===t}e.ecsign=function(t,e,r){var i=n.sign(t,e),o=i.recovery;return{r:i.signature.slice(0,32),s:i.signature.slice(32,64),v:r?o+(2*r+35):o+27}},e.ecrecover=function(t,e,r,i,s){var f=Buffer.concat([o.setLength(r,32),o.setLength(i,32)],64),h=a(e,s);if(!u(h))throw new Error("Invalid signature v value");var l=n.recover(t,f,h);return n.publicKeyConvert(l,!1).slice(1)},e.toRpcSig=function(t,e,r,n){if(!u(a(t,n)))throw new Error("Invalid signature v value");return o.bufferToHex(Buffer.concat([o.setLengthLeft(e,32),o.setLengthLeft(r,32),o.toBuffer(t)]))},e.fromRpcSig=function(t){var e=o.toBuffer(t);if(65!==e.length)throw new Error("Invalid signature length");var r=e[64];return r<27&&(r+=27),{v:r,r:e.slice(0,32),s:e.slice(32,64)}},e.isValidSignature=function(t,e,r,n,o){void 0===n&&(n=!0);var s=new i("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0",16),f=new i("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",16);if(32!==e.length||32!==r.length)return!1;if(!u(a(t,o)))return!1;var h=new i(e),l=new i(r);return!(h.isZero()||h.gt(f)||l.isZero()||l.gt(f)||n&&1===l.cmp(s))},e.hashPersonalMessage=function(t){var e=Buffer.from("Ethereum Signed Message:\n"+t.length.toString(),"utf-8");return s.keccak(Buffer.concat([e,t]))}},86918:(t,e,r)=>{"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=r(82192),o=i.keccak224,s=i.keccak384,a=i.keccak256,u=i.keccak512,f=r(76666),h=r(48583),l=r(51675),c=r(26949),d=r(23482),p=r(89509).Buffer;Object.assign(e,r(80884)),e.MAX_INTEGER=new c("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",16),e.TWO_POW256=new c("10000000000000000000000000000000000000000000000000000000000000000",16),e.KECCAK256_NULL_S="c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",e.SHA3_NULL_S=e.KECCAK256_NULL_S,e.KECCAK256_NULL=p.from(e.KECCAK256_NULL_S,"hex"),e.SHA3_NULL=e.KECCAK256_NULL,e.KECCAK256_RLP_ARRAY_S="1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",e.SHA3_RLP_ARRAY_S=e.KECCAK256_RLP_ARRAY_S,e.KECCAK256_RLP_ARRAY=p.from(e.KECCAK256_RLP_ARRAY_S,"hex"),e.SHA3_RLP_ARRAY=e.KECCAK256_RLP_ARRAY,e.KECCAK256_RLP_S="56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",e.SHA3_RLP_S=e.KECCAK256_RLP_S,e.KECCAK256_RLP=p.from(e.KECCAK256_RLP_S,"hex"),e.SHA3_RLP=e.KECCAK256_RLP,e.BN=c,e.rlp=l,e.secp256k1=f,e.zeros=function(t){return p.allocUnsafe(t).fill(0)},e.zeroAddress=function(){var t=e.zeros(20);return e.bufferToHex(t)},e.setLengthLeft=e.setLength=function(t,r,n){var i=e.zeros(r);return t=e.toBuffer(t),n?t.length<r?(t.copy(i),i):t.slice(0,r):t.length<r?(t.copy(i,r-t.length),i):t.slice(-r)},e.setLengthRight=function(t,r){return e.setLength(t,r,!0)},e.unpad=e.stripZeros=function(t){for(var r=(t=e.stripHexPrefix(t))[0];t.length>0&&"0"===r.toString();)r=(t=t.slice(1))[0];return t},e.toBuffer=function(t){if(!p.isBuffer(t))if(Array.isArray(t))t=p.from(t);else if("string"==typeof t)t=e.isHexString(t)?p.from(e.padToEven(e.stripHexPrefix(t)),"hex"):p.from(t);else if("number"==typeof t)t=e.intToBuffer(t);else if(null==t)t=p.allocUnsafe(0);else if(c.isBN(t))t=t.toArrayLike(p);else{if(!t.toArray)throw new Error("invalid type");t=p.from(t.toArray())}return t},e.bufferToInt=function(t){return new c(e.toBuffer(t)).toNumber()},e.bufferToHex=function(t){return"0x"+(t=e.toBuffer(t)).toString("hex")},e.fromSigned=function(t){return new c(t).fromTwos(256)},e.toUnsigned=function(t){return p.from(t.toTwos(256).toArray())},e.keccak=function(t,r){switch(t=e.toBuffer(t),r||(r=256),r){case 224:return o(t);case 256:return a(t);case 384:return s(t);case 512:return u(t);default:throw new Error("Invald algorithm: keccak"+r)}},e.keccak256=function(t){return e.keccak(t)},e.sha3=e.keccak,e.sha256=function(t){return t=e.toBuffer(t),d("sha256").update(t).digest()},e.ripemd160=function(t,r){t=e.toBuffer(t);var n=d("rmd160").update(t).digest();return!0===r?e.setLength(n,32):n},e.rlphash=function(t){return e.keccak(l.encode(t))},e.isValidPrivate=function(t){return f.privateKeyVerify(t)},e.isValidPublic=function(t,e){return 64===t.length?f.publicKeyVerify(p.concat([p.from([4]),t])):!!e&&f.publicKeyVerify(t)},e.pubToAddress=e.publicToAddress=function(t,r){return t=e.toBuffer(t),r&&64!==t.length&&(t=f.publicKeyConvert(t,!1).slice(1)),h(64===t.length),e.keccak(t).slice(-20)};var m=e.privateToPublic=function(t){return t=e.toBuffer(t),f.publicKeyCreate(t,!1).slice(1)};e.importPublic=function(t){return 64!==(t=e.toBuffer(t)).length&&(t=f.publicKeyConvert(t,!1).slice(1)),t},e.ecsign=function(t,e){var r=f.sign(t,e),n={};return n.r=r.signature.slice(0,32),n.s=r.signature.slice(32,64),n.v=r.recovery+27,n},e.hashPersonalMessage=function(t){var r=e.toBuffer("Ethereum Signed Message:\n"+t.length.toString());return e.keccak(p.concat([r,t]))},e.ecrecover=function(t,r,n,i){var o=p.concat([e.setLength(n,32),e.setLength(i,32)],64),s=r-27;if(0!==s&&1!==s)throw new Error("Invalid signature v value");var a=f.recover(t,o,s);return f.publicKeyConvert(a,!1).slice(1)},e.toRpcSig=function(t,r,n){if(27!==t&&28!==t)throw new Error("Invalid recovery id");return e.bufferToHex(p.concat([e.setLengthLeft(r,32),e.setLengthLeft(n,32),e.toBuffer(t-27)]))},e.fromRpcSig=function(t){if(65!==(t=e.toBuffer(t)).length)throw new Error("Invalid signature length");var r=t[64];return r<27&&(r+=27),{v:r,r:t.slice(0,32),s:t.slice(32,64)}},e.privateToAddress=function(t){return e.publicToAddress(m(t))},e.isValidAddress=function(t){return/^0x[0-9a-fA-F]{40}$/.test(t)},e.isZeroAddress=function(t){return e.zeroAddress()===e.addHexPrefix(t)},e.toChecksumAddress=function(t){t=e.stripHexPrefix(t).toLowerCase();for(var r=e.keccak(t).toString("hex"),n="0x",i=0;i<t.length;i++)parseInt(r[i],16)>=8?n+=t[i].toUpperCase():n+=t[i];return n},e.isValidChecksumAddress=function(t){return e.isValidAddress(t)&&e.toChecksumAddress(t)===t},e.generateAddress=function(t,r){return t=e.toBuffer(t),r=(r=new c(r)).isZero()?null:p.from(r.toArray()),e.rlphash([t,r]).slice(-20)},e.isPrecompiled=function(t){var r=e.unpad(t);return 1===r.length&&r[0]>=1&&r[0]<=8},e.addHexPrefix=function(t){return"string"!=typeof t||e.isHexPrefixed(t)?t:"0x"+t},e.isValidSignature=function(t,e,r,n){var i=new c("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0",16),o=new c("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",16);return!(32!==e.length||32!==r.length||27!==t&&28!==t||(e=new c(e),r=new c(r),e.isZero()||e.gt(o)||r.isZero()||r.gt(o)||!1===n&&1===new c(r).cmp(i)))},e.baToJSON=function(t){if(p.isBuffer(t))return"0x"+t.toString("hex");if(t instanceof Array){for(var r=[],n=0;n<t.length;n++)r.push(e.baToJSON(t[n]));return r}},e.defineProperties=function(t,r,i){if(t.raw=[],t._fields=[],t.toJSON=function(r){if(r){var n={};return t._fields.forEach((function(e){n[e]="0x"+t[e].toString("hex")})),n}return e.baToJSON(this.raw)},t.serialize=function(){return l.encode(t.raw)},r.forEach((function(r,n){function i(){return t.raw[n]}function o(i){"00"!==(i=e.toBuffer(i)).toString("hex")||r.allowZero||(i=p.allocUnsafe(0)),r.allowLess&&r.length?(i=e.stripZeros(i),h(r.length>=i.length,"The field "+r.name+" must not have more "+r.length+" bytes")):r.allowZero&&0===i.length||!r.length||h(r.length===i.length,"The field "+r.name+" must have byte length of "+r.length),t.raw[n]=i}t._fields.push(r.name),Object.defineProperty(t,r.name,{enumerable:!0,configurable:!0,get:i,set:o}),r.default&&(t[r.name]=r.default),r.alias&&Object.defineProperty(t,r.alias,{enumerable:!1,configurable:!0,set:o,get:i})})),i)if("string"==typeof i&&(i=p.from(e.stripHexPrefix(i),"hex")),p.isBuffer(i)&&(i=l.decode(i)),Array.isArray(i)){if(i.length>t._fields.length)throw new Error("wrong number of fields in data");i.forEach((function(r,n){t[t._fields[n]]=e.toBuffer(r)}))}else{if("object"!==(void 0===i?"undefined":n(i)))throw new Error("invalid data");var o=Object.keys(i);r.forEach((function(e){-1!==o.indexOf(e.name)&&(t[e.name]=i[e.name]),-1!==o.indexOf(e.alias)&&(t[e.alias]=i[e.alias])}))}}},76666:(t,e,r)=>{"use strict";var n=r(95053),i=r(64078),o=r(78741),s=function(t){return 32===t.length&&n.privateKeyVerify(Uint8Array.from(t))};t.exports={privateKeyVerify:s,privateKeyExport:function(t,e){if(32!==t.length)throw new RangeError("private key length is invalid");var r=i.privateKeyExport(t,e);return o.privateKeyExport(t,r,e)},privateKeyImport:function(t){if(null!==(t=o.privateKeyImport(t))&&32===t.length&&s(t))return t;throw new Error("couldn't import from DER format")},privateKeyNegate:function(t){return Buffer.from(n.privateKeyNegate(Uint8Array.from(t)))},privateKeyModInverse:function(t){if(32!==t.length)throw new Error("private key length is invalid");return Buffer.from(i.privateKeyModInverse(Uint8Array.from(t)))},privateKeyTweakAdd:function(t,e){return Buffer.from(n.privateKeyTweakAdd(Uint8Array.from(t),e))},privateKeyTweakMul:function(t,e){return Buffer.from(n.privateKeyTweakMul(Uint8Array.from(t),Uint8Array.from(e)))},publicKeyCreate:function(t,e){return Buffer.from(n.publicKeyCreate(Uint8Array.from(t),e))},publicKeyConvert:function(t,e){return Buffer.from(n.publicKeyConvert(Uint8Array.from(t),e))},publicKeyVerify:function(t){return(33===t.length||65===t.length)&&n.publicKeyVerify(Uint8Array.from(t))},publicKeyTweakAdd:function(t,e,r){return Buffer.from(n.publicKeyTweakAdd(Uint8Array.from(t),Uint8Array.from(e),r))},publicKeyTweakMul:function(t,e,r){return Buffer.from(n.publicKeyTweakMul(Uint8Array.from(t),Uint8Array.from(e),r))},publicKeyCombine:function(t,e){var r=[];return t.forEach((function(t){r.push(Uint8Array.from(t))})),Buffer.from(n.publicKeyCombine(r,e))},signatureNormalize:function(t){return Buffer.from(n.signatureNormalize(Uint8Array.from(t)))},signatureExport:function(t){return Buffer.from(n.signatureExport(Uint8Array.from(t)))},signatureImport:function(t){return Buffer.from(n.signatureImport(Uint8Array.from(t)))},signatureImportLax:function(t){if(0===t.length)throw new RangeError("signature length is invalid");var e=o.signatureImportLax(t);if(null===e)throw new Error("couldn't parse DER signature");return i.signatureImport(e)},sign:function(t,e,r){if(null===r)throw new TypeError("options should be an Object");var i=void 0;if(r){if(i={},null===r.data)throw new TypeError("options.data should be a Buffer");if(r.data){if(32!==r.data.length)throw new RangeError("options.data length is invalid");i.data=new Uint8Array(r.data)}if(null===r.noncefn)throw new TypeError("options.noncefn should be a Function");r.noncefn&&(i.noncefn=function(t,e,n,i,o){var s=null!=n?Buffer.from(n):null,a=null!=i?Buffer.from(i):null,u=Buffer.from("");return r.noncefn&&(u=r.noncefn(Buffer.from(t),Buffer.from(e),s,a,o)),Uint8Array.from(u)})}var o=n.ecdsaSign(Uint8Array.from(t),Uint8Array.from(e),i);return{signature:Buffer.from(o.signature),recovery:o.recid}},verify:function(t,e,r){return n.ecdsaVerify(Uint8Array.from(e),Uint8Array.from(t),r)},recover:function(t,e,r,i){return Buffer.from(n.ecdsaRecover(Uint8Array.from(e),r,Uint8Array.from(t),i))},ecdh:function(t,e){return Buffer.from(n.ecdh(Uint8Array.from(t),Uint8Array.from(e),{}))},ecdhUnsafe:function(t,e,r){if(33!==t.length&&65!==t.length)throw new RangeError("public key length is invalid");if(32!==e.length)throw new RangeError("private key length is invalid");return Buffer.from(i.ecdhUnsafe(Uint8Array.from(t),Uint8Array.from(e),r))}}},78741:(t,e)=>{"use strict";var r=Buffer.from([48,129,211,2,1,1,4,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,129,133,48,129,130,2,1,1,48,44,6,7,42,134,72,206,61,1,1,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,252,47,48,6,4,1,0,4,1,7,4,33,2,121,190,102,126,249,220,187,172,85,160,98,149,206,135,11,7,2,155,252,219,45,206,40,217,89,242,129,91,22,248,23,152,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,186,174,220,230,175,72,160,59,191,210,94,140,208,54,65,65,2,1,1,161,36,3,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),n=Buffer.from([48,130,1,19,2,1,1,4,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,129,165,48,129,162,2,1,1,48,44,6,7,42,134,72,206,61,1,1,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,252,47,48,6,4,1,0,4,1,7,4,65,4,121,190,102,126,249,220,187,172,85,160,98,149,206,135,11,7,2,155,252,219,45,206,40,217,89,242,129,91,22,248,23,152,72,58,218,119,38,163,196,101,93,164,251,252,14,17,8,168,253,23,180,72,166,133,84,25,156,71,208,143,251,16,212,184,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,186,174,220,230,175,72,160,59,191,210,94,140,208,54,65,65,2,1,1,161,68,3,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);e.privateKeyExport=function(t,e,i){var o=Buffer.from(i?r:n);return t.copy(o,i?8:9),e.copy(o,i?181:214),o},e.privateKeyImport=function(t){var e=t.length,r=0;if(e<r+1||48!==t[r])return null;if(e<(r+=1)+1||!(128&t[r]))return null;var n=127&t[r];if(n<1||n>2)return null;if(e<(r+=1)+n)return null;var i=t[r+n-1]|(n>1?t[r+n-2]<<8:0);return e<(r+=n)+i||e<r+3||2!==t[r]||1!==t[r+1]||1!==t[r+2]||e<(r+=3)+2||4!==t[r]||t[r+1]>32||e<r+2+t[r+1]?null:t.slice(r+2,r+2+t[r+1])},e.signatureImportLax=function(t){var e=Buffer.alloc(32,0),r=Buffer.alloc(32,0),n=t.length,i=0;if(48!==t[i++])return null;var o=t[i++];if(128&o&&(i+=o-128)>n)return null;if(2!==t[i++])return null;var s=t[i++];if(128&s){if(i+(o=s-128)>n)return null;for(;o>0&&0===t[i];i+=1,o-=1);for(s=0;o>0;i+=1,o-=1)s=(s<<8)+t[i]}if(s>n-i)return null;var a=i;if(i+=s,2!==t[i++])return null;var u=t[i++];if(128&u){if(i+(o=u-128)>n)return null;for(;o>0&&0===t[i];i+=1,o-=1);for(u=0;o>0;i+=1,o-=1)u=(u<<8)+t[i]}if(u>n-i)return null;var f=i;for(i+=u;s>0&&0===t[a];s-=1,a+=1);if(s>32)return null;var h=t.slice(a,a+s);for(h.copy(e,32-h.length);u>0&&0===t[f];u-=1,f+=1);if(u>32)return null;var l=t.slice(f,f+u);return l.copy(r,32-l.length),{r:e,s:r}}},64078:(t,e,r)=>{"use strict";var n=r(26949),i=new(0,r(86266).ec)("secp256k1"),o=i.curve;e.privateKeyExport=function(t,e){var r=new n(t);if(r.ucmp(o.n)>=0)throw new Error("couldn't export to DER format");var a=i.g.mul(r);return s(a.getX(),a.getY(),e)},e.privateKeyModInverse=function(t){var e=new n(t);if(e.ucmp(o.n)>=0||e.isZero())throw new Error("private key range is invalid");return e.invm(o.n).toArrayLike(Buffer,"be",32)},e.signatureImport=function(t){var e=new n(t.r);e.ucmp(o.n)>=0&&(e=new n(0));var r=new n(t.s);return r.ucmp(o.n)>=0&&(r=new n(0)),Buffer.concat([e.toArrayLike(Buffer,"be",32),r.toArrayLike(Buffer,"be",32)])},e.ecdhUnsafe=function(t,e,r){var a=i.keyFromPublic(t),u=new n(e);if(u.ucmp(o.n)>=0||u.isZero())throw new Error("scalar was invalid (zero or overflow)");var f=a.pub.mul(u);return s(f.getX(),f.getY(),r)};var s=function(t,e,r){var n=void 0;return r?((n=Buffer.alloc(33))[0]=e.isOdd()?3:2,t.toArrayLike(Buffer,"be",32).copy(n,1)):((n=Buffer.alloc(65))[0]=4,t.toArrayLike(Buffer,"be",32).copy(n,1),e.toArrayLike(Buffer,"be",32).copy(n,33)),n}},28260:(t,e,r)=>{const n=r(6403),i=r(98406);t.exports=class extends n{constructor(){super((({blockTracker:t,provider:e,engine:r})=>i({blockTracker:t,provider:e})))}}},78747:(t,e,r)=>{const n=r(7879),i=r(80047),o=r(89539).inherits,s=r(86918),a=r(8482),u=r(47529),f=r(80045),h=r(30398),l=r(28372),c=/^[0-9A-Fa-f]+$/g;function d(t){const e=this;e.nonceLock=f(1),t.getAccounts&&(e.getAccounts=t.getAccounts),t.processTransaction&&(e.processTransaction=t.processTransaction),t.processMessage&&(e.processMessage=t.processMessage),t.processPersonalMessage&&(e.processPersonalMessage=t.processPersonalMessage),t.processTypedMessage&&(e.processTypedMessage=t.processTypedMessage),e.approveTransaction=t.approveTransaction||e.autoApprove,e.approveMessage=t.approveMessage||e.autoApprove,e.approvePersonalMessage=t.approvePersonalMessage||e.autoApprove,e.approveDecryptMessage=t.approveDecryptMessage||e.autoApprove,e.approveEncryptionPublicKey=t.approveEncryptionPublicKey||e.autoApprove,e.approveTypedMessage=t.approveTypedMessage||e.autoApprove,t.signTransaction&&(e.signTransaction=t.signTransaction||y("signTransaction")),t.signMessage&&(e.signMessage=t.signMessage||y("signMessage")),t.signPersonalMessage&&(e.signPersonalMessage=t.signPersonalMessage||y("signPersonalMessage")),t.decryptMessage&&(e.decryptMessage=t.decryptMessage||y("decryptMessage")),t.encryptionPublicKey&&(e.encryptionPublicKey=t.encryptionPublicKey||y("encryptionPublicKey")),t.signTypedMessage&&(e.signTypedMessage=t.signTypedMessage||y("signTypedMessage")),t.recoverPersonalSignature&&(e.recoverPersonalSignature=t.recoverPersonalSignature),t.publishTransaction&&(e.publishTransaction=t.publishTransaction),e.estimateGas=t.estimateGas||e.estimateGas,e.getGasPrice=t.getGasPrice||e.getGasPrice}function p(t){return t.toLowerCase()}function m(t){const e=s.addHexPrefix(t);return s.isValidAddress(e)}function g(t){const e=s.addHexPrefix(t);return!s.isValidAddress(e)&&v(t)}function v(t){return"string"==typeof t&&("0x"===t.slice(0,2)&&t.slice(2).match(c))}function y(t){return function(e,r){r(new Error('ProviderEngine - HookedWalletSubprovider - Must provide "'+t+'" fn in constructor options'))}}t.exports=d,o(d,h),d.prototype.handleRequest=function(t,e,r){const i=this;let o,s,a,f,h;switch(i._parityRequests={},i._parityRequestCount=0,t.method){case"eth_coinbase":return void i.getAccounts((function(t,e){if(t)return r(t);let n=e[0]||null;r(null,n)}));case"eth_accounts":return void i.getAccounts((function(t,e){if(t)return r(t);r(null,e)}));case"eth_sendTransaction":return o=t.params[0],void n([t=>i.validateTransaction(o,t),t=>i.processTransaction(o,t)],r);case"eth_signTransaction":return o=t.params[0],void n([t=>i.validateTransaction(o,t),t=>i.processSignTransaction(o,t)],r);case"eth_sign":return h=t.params[0],f=t.params[1],a=t.params[2]||{},s=u(a,{from:h,data:f}),void n([t=>i.validateMessage(s,t),t=>i.processMessage(s,t)],r);case"personal_sign":return function(){const e=t.params[0];if(g(t.params[1])&&m(e)){let e="The eth_personalSign method requires params ordered ";e+="[message, address]. This was previously handled incorrectly, ",e+="and has been corrected automatically. ",e+="Please switch this param order for smooth behavior in the future.",console.warn(e),h=t.params[0],f=t.params[1]}else f=t.params[0],h=t.params[1];a=t.params[2]||{},s=u(a,{from:h,data:f}),n([t=>i.validatePersonalMessage(s,t),t=>i.processPersonalMessage(s,t)],r)}();case"eth_decryptMessage":return function(){const e=t.params[0];if(g(t.params[1])&&m(e)){let e="The eth_decryptMessage method requires params ordered ";e+="[message, address]. This was previously handled incorrectly, ",e+="and has been corrected automatically. ",e+="Please switch this param order for smooth behavior in the future.",console.warn(e),h=t.params[0],f=t.params[1]}else f=t.params[0],h=t.params[1];a=t.params[2]||{},s=u(a,{from:h,data:f}),n([t=>i.validateDecryptMessage(s,t),t=>i.processDecryptMessage(s,t)],r)}();case"encryption_public_key":return function(){const e=t.params[0];n([t=>i.validateEncryptionPublicKey(e,t),t=>i.processEncryptionPublicKey(e,t)],r)}();case"personal_ecRecover":return function(){f=t.params[0];let e=t.params[1];a=t.params[2]||{},s=u(a,{sig:e,data:f}),i.recoverPersonalSignature(s,r)}();case"eth_signTypedData":case"eth_signTypedData_v3":case"eth_signTypedData_v4":return function(){const e=t.params[0],o=t.params[1];m(e)?(h=e,f=o):(f=e,h=o),a=t.params[2]||{},s=u(a,{from:h,data:f}),n([t=>i.validateTypedMessage(s,t),t=>i.processTypedMessage(s,t)],r)}();case"parity_postTransaction":return o=t.params[0],void i.parityPostTransaction(o,r);case"parity_postSign":return h=t.params[0],f=t.params[1],void i.parityPostSign(h,f,r);case"parity_checkRequest":return function(){const e=t.params[0];i.parityCheckRequest(e,r)}();case"parity_defaultAccount":return void i.getAccounts((function(t,e){if(t)return r(t);const n=e[0]||null;r(null,n)}));default:return void e()}},d.prototype.getAccounts=function(t){t(null,[])},d.prototype.processTransaction=function(t,e){const r=this;n([e=>r.approveTransaction(t,e),(t,e)=>r.checkApproval("transaction",t,e),e=>r.finalizeAndSubmitTx(t,e)],e)},d.prototype.processSignTransaction=function(t,e){const r=this;n([e=>r.approveTransaction(t,e),(t,e)=>r.checkApproval("transaction",t,e),e=>r.finalizeTx(t,e)],e)},d.prototype.processMessage=function(t,e){const r=this;n([e=>r.approveMessage(t,e),(t,e)=>r.checkApproval("message",t,e),e=>r.signMessage(t,e)],e)},d.prototype.processPersonalMessage=function(t,e){const r=this;n([e=>r.approvePersonalMessage(t,e),(t,e)=>r.checkApproval("message",t,e),e=>r.signPersonalMessage(t,e)],e)},d.prototype.processDecryptMessage=function(t,e){const r=this;n([e=>r.approveDecryptMessage(t,e),(t,e)=>r.checkApproval("decryptMessage",t,e),e=>r.decryptMessage(t,e)],e)},d.prototype.processEncryptionPublicKey=function(t,e){const r=this;n([e=>r.approveEncryptionPublicKey(t,e),(t,e)=>r.checkApproval("encryptionPublicKey",t,e),e=>r.encryptionPublicKey(t,e)],e)},d.prototype.processTypedMessage=function(t,e){const r=this;n([e=>r.approveTypedMessage(t,e),(t,e)=>r.checkApproval("message",t,e),e=>r.signTypedMessage(t,e)],e)},d.prototype.autoApprove=function(t,e){e(null,!0)},d.prototype.checkApproval=function(t,e,r){r(e?null:new Error("User denied "+t+" signature."))},d.prototype.parityPostTransaction=function(t,e){const r=this,n=`0x${r._parityRequestCount.toString(16)}`;r._parityRequestCount++,r.emitPayload({method:"eth_sendTransaction",params:[t]},(function(t,e){if(t)return void(r._parityRequests[n]={error:t});const i=e.result;r._parityRequests[n]=i})),e(null,n)},d.prototype.parityPostSign=function(t,e,r){const n=this,i=`0x${n._parityRequestCount.toString(16)}`;n._parityRequestCount++,n.emitPayload({method:"eth_sign",params:[t,e]},(function(t,e){if(t)return void(n._parityRequests[i]={error:t});const r=e.result;n._parityRequests[i]=r})),r(null,i)},d.prototype.parityCheckRequest=function(t,e){const r=this._parityRequests[t]||null;return r?r.error?e(r.error):void e(null,r):e(null,null)},d.prototype.recoverPersonalSignature=function(t,e){let r;try{r=a.recoverPersonalSignature(t)}catch(t){return e(t)}e(null,r)},d.prototype.validateTransaction=function(t,e){if(void 0===t.from)return e(new Error("Undefined address - from address required to sign transaction."));this.validateSender(t.from,(function(r,n){return r?e(r):n?void e():e(new Error(`Unknown address - unable to sign transaction for this address: "${t.from}"`))}))},d.prototype.validateMessage=function(t,e){if(void 0===t.from)return e(new Error("Undefined address - from address required to sign message."));this.validateSender(t.from,(function(r,n){return r?e(r):n?void e():e(new Error(`Unknown address - unable to sign message for this address: "${t.from}"`))}))},d.prototype.validatePersonalMessage=function(t,e){return void 0===t.from?e(new Error("Undefined address - from address required to sign personal message.")):void 0===t.data?e(new Error("Undefined message - message required to sign personal message.")):v(t.data)?void this.validateSender(t.from,(function(r,n){return r?e(r):n?void e():e(new Error(`Unknown address - unable to sign message for this address: "${t.from}"`))})):e(new Error("HookedWalletSubprovider - validateMessage - message was not encoded as hex."))},d.prototype.validateDecryptMessage=function(t,e){return void 0===t.from?e(new Error("Undefined address - from address required to decrypt message.")):void 0===t.data?e(new Error("Undefined message - message required to decrypt message.")):v(t.data)?void this.validateSender(t.from,(function(r,n){return r?e(r):n?void e():e(new Error(`Unknown address - unable to decrypt message for this address: "${t.from}"`))})):e(new Error("HookedWalletSubprovider - validateDecryptMessage - message was not encoded as hex."))},d.prototype.validateEncryptionPublicKey=function(t,e){this.validateSender(t,(function(r,n){return r?e(r):n?void e():e(new Error(`Unknown address - unable to obtain encryption public key for this address: "${t}"`))}))},d.prototype.validateTypedMessage=function(t,e){return void 0===t.from?e(new Error("Undefined address - from address required to sign typed data.")):void 0===t.data?e(new Error("Undefined data - message required to sign typed data.")):void this.validateSender(t.from,(function(r,n){return r?e(r):n?void e():e(new Error(`Unknown address - unable to sign message for this address: "${t.from}"`))}))},d.prototype.validateSender=function(t,e){if(!t)return e(null,!1);this.getAccounts((function(r,n){if(r)return e(r);const i=-1!==n.map(p).indexOf(t.toLowerCase());e(null,i)}))},d.prototype.finalizeAndSubmitTx=function(t,e){const r=this;r.nonceLock.take((function(){n([r.fillInTxExtras.bind(r,t),r.signTransaction.bind(r),r.publishTransaction.bind(r)],(function(t,n){if(r.nonceLock.leave(),t)return e(t);e(null,n)}))}))},d.prototype.finalizeTx=function(t,e){const r=this;r.nonceLock.take((function(){n([r.fillInTxExtras.bind(r,t),r.signTransaction.bind(r)],(function(n,i){if(r.nonceLock.leave(),n)return e(n);e(null,{raw:i,tx:t})}))}))},d.prototype.publishTransaction=function(t,e){this.emitPayload({method:"eth_sendRawTransaction",params:[t]},(function(t,r){if(t)return e(t);e(null,r.result)}))},d.prototype.estimateGas=function(t,e){l(this.engine,t,e)},d.prototype.getGasPrice=function(t){this.emitPayload({method:"eth_gasPrice",params:[]},(function(e,r){if(e)return t(e);t(null,r.result)}))},d.prototype.fillInTxExtras=function(t,e){const r=this,n=t.from,o={};void 0===t.gasPrice&&(o.gasPrice=r.getGasPrice.bind(r)),void 0===t.nonce&&(o.nonce=r.emitPayload.bind(r,{method:"eth_getTransactionCount",params:[n,"pending"]})),void 0===t.gas&&(o.gas=r.estimateGas.bind(r,function(t){return{from:t.from,to:t.to,value:t.value,data:t.data,gas:t.gas,gasPrice:t.gasPrice,nonce:t.nonce}}(t))),i(o,(function(r,n){if(r)return e(r);const i={};n.gasPrice&&(i.gasPrice=n.gasPrice),n.nonce&&(i.nonce=n.nonce.result),n.gas&&(i.gas=n.gas),e(null,u(t,i))}))}},6403:(t,e,r)=>{const n=r(30398);t.exports=class extends n{constructor(t){if(super(),!t)throw new Error("JsonRpcEngineMiddlewareSubprovider - no constructorFn specified");this._constructorFn=t}setEngine(t){if(this.middleware)throw new Error("JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice");const e=t._blockTracker,r=this._constructorFn({engine:t,provider:t,blockTracker:e});if(!r)throw new Error("JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware");if("function"!=typeof r)throw new Error("JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function");this.middleware=r}handleRequest(t,e,r){const n={id:t.id};this.middleware(t,n,(function(t){e(((e,r,i)=>{e?(delete n.result,n.error={message:e.message||e}):n.result=r,t?t(i):i()}))}),(function(t){if(t)return r(t);r(null,n.result)}))}}},74730:(t,e,r)=>{const n=process.browser?r(41875):r(39342),i=r(89539).inherits,o=r(39728),s=r(30398),{ethErrors:a,serializeError:u}=r(3097);function f(t){this.rpcUrl=t.rpcUrl}t.exports=f,i(f,s),f.prototype.handleRequest=function(t,e,r){const i=this.rpcUrl,s=function(t){return{id:t.id,jsonrpc:t.jsonrpc,method:t.method,params:t.params}}(t),f=o(s);n({uri:i,method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(f),rejectUnauthorized:!1,timeout:2e4},(function(t,e,n){if(t)return r(u(t));switch(e.statusCode){case 405:return r(a.rpc.methodNotFound());case 504:return function(){let t="Gateway timeout. The request took too long to process. ";t+="This can happen when querying logs over too wide a block range.";const e=new Error("Gateway timeout. The request took too long to process. This can happen when querying logs over too wide a block range.");return r(u(e))}();case 429:return function(){const t=new Error("Too Many Requests");return r(u(t))}();default:if(200!=e.statusCode){const t="Unknown Error: "+e.body,n=new Error(t);return r(u(n))}}let i;try{i=JSON.parse(n)}catch(t){return console.error(t.stack),r(u(t))}if(i.error)return r(i.error);r(null,i.result)}))}},30398:(t,e,r)=>{const n=r(39728);function i(){}t.exports=i,i.prototype.setEngine=function(t){const e=this;e.engine||(e.engine=t,t.on("block",(function(t){e.currentBlock=t})),t.on("start",(function(){e.start()})),t.on("stop",(function(){e.stop()})))},i.prototype.handleRequest=function(t,e,r){throw new Error("Subproviders should override `handleRequest`.")},i.prototype.emitPayload=function(t,e){this.engine.sendAsync(n(t),e)},i.prototype.stop=function(){},i.prototype.start=function(){}},78191:(t,e,r)=>{const n=r(6403),i=r(68961);t.exports=class extends n{constructor(){super((({blockTracker:t,provider:e,engine:r})=>{const{events:n,middleware:o}=i({blockTracker:t,provider:e});return n.on("notification",(t=>r.emit("data",null,t))),o}))}}},39728:(t,e,r)=>{const n=r(88620),i=r(47529);t.exports=function(t){return i({id:n(),jsonrpc:"2.0",params:[]},t)}},28372:(t,e,r)=>{const n=r(39728);t.exports=function(t,e,r){t.sendAsync(n({method:"eth_estimateGas",params:[e]}),(function(t,e){if(t)return"no contract code at given address"===t.message?r(null,"0xcf08"):r(t);r(null,e.result)}))}},88620:t=>{t.exports=function(){return Math.floor(Number.MAX_SAFE_INTEGER*Math.random())}},6496:(t,e,r)=>{const n=r(67266);function i(t){return"never"!==a(t)}function o(t){var e=s(t);return e>=t.params.length?t.params:"eth_getBlockByNumber"===t.method?t.params.slice(1):t.params.slice(0,e)}function s(t){switch(t.method){case"eth_getStorageAt":return 2;case"eth_getBalance":case"eth_getCode":case"eth_getTransactionCount":case"eth_call":case"eth_estimateGas":return 1;case"eth_getBlockByNumber":return 0;default:return}}function a(t){switch(t.method){case"web3_clientVersion":case"web3_sha3":case"eth_protocolVersion":case"eth_getBlockTransactionCountByHash":case"eth_getUncleCountByBlockHash":case"eth_getCode":case"eth_getBlockByHash":case"eth_getTransactionByHash":case"eth_getTransactionByBlockHashAndIndex":case"eth_getTransactionReceipt":case"eth_getUncleByBlockHashAndIndex":case"eth_getCompilers":case"eth_compileLLL":case"eth_compileSolidity":case"eth_compileSerpent":case"shh_version":return"perma";case"eth_getBlockByNumber":case"eth_getBlockTransactionCountByNumber":case"eth_getUncleCountByBlockNumber":case"eth_getTransactionByBlockNumberAndIndex":case"eth_getUncleByBlockNumberAndIndex":return"fork";case"eth_gasPrice":case"eth_getBalance":case"eth_getStorageAt":case"eth_getTransactionCount":case"eth_call":case"eth_estimateGas":case"eth_getFilterLogs":case"eth_getLogs":case"eth_blockNumber":return"block";case"net_version":case"net_peerCount":case"net_listening":case"eth_syncing":case"eth_sign":case"eth_coinbase":case"eth_mining":case"eth_hashrate":case"eth_accounts":case"eth_sendTransaction":case"eth_sendRawTransaction":case"eth_newFilter":case"eth_newBlockFilter":case"eth_newPendingTransactionFilter":case"eth_uninstallFilter":case"eth_getFilterChanges":case"eth_getWork":case"eth_submitWork":case"eth_submitHashrate":case"db_putString":case"db_getString":case"db_putHex":case"db_getHex":case"shh_post":case"shh_newIdentity":case"shh_hasIdentity":case"shh_newGroup":case"shh_addToGroup":case"shh_newFilter":case"shh_uninstallFilter":case"shh_getFilterChanges":case"shh_getMessages":return"never"}}t.exports={cacheIdentifierForPayload:function(t,e={}){if(!i(t))return null;const{includeBlockRef:r}=e,s=r?t.params:o(t);return t.method+":"+n(s)},canCache:i,blockTagForPayload:function(t){var e=s(t);return e>=t.params.length?null:t.params[e]},paramsWithoutBlockTag:o,blockTagParamIndex:s,cacheTypeForPayload:a}},52698:(t,e,r)=>{const n=r(17187).EventEmitter,i=r(89539).inherits;function o(){n.call(this),this.isLocked=!0}t.exports=o,i(o,n),o.prototype.go=function(){this.isLocked=!1,this.emit("unlock")},o.prototype.stop=function(){this.isLocked=!0,this.emit("lock")},o.prototype.await=function(t){this.isLocked?this.once("unlock",t):setTimeout(t)}},41875:(t,e,r)=>{"use strict";var n=r(58908),i=r(27376),o=r(4947),s=r(47529);function a(t,e,r){var n=t;return i(e)?(r=e,"string"==typeof t&&(n={uri:t})):n=s(e,{uri:t}),n.callback=r,n}function u(t,e,r){return f(e=a(t,e,r))}function f(t){if(void 0===t.callback)throw new Error("callback argument missing");var e=!1,r=function(r,n,i){e||(e=!0,t.callback(r,n,i))};function n(){var t=void 0;if(t=h.response?h.response:h.responseText||function(t){try{if("document"===t.responseType)return t.responseXML;var e=t.responseXML&&"parsererror"===t.responseXML.documentElement.nodeName;if(""===t.responseType&&!e)return t.responseXML}catch(t){}return null}(h),v)try{t=JSON.parse(t)}catch(t){}return t}function i(t){return clearTimeout(l),t instanceof Error||(t=new Error(""+(t||"Unknown XMLHttpRequest Error"))),t.statusCode=0,r(t,y)}function s(){if(!f){var e;clearTimeout(l),e=t.useXDR&&void 0===h.status?200:1223===h.status?204:h.status;var i=y,s=null;return 0!==e?(i={body:n(),statusCode:e,method:d,headers:{},url:c,rawRequest:h},h.getAllResponseHeaders&&(i.headers=o(h.getAllResponseHeaders()))):s=new Error("Internal XMLHttpRequest Error"),r(s,i,i.body)}}var a,f,h=t.xhr||null;h||(h=t.cors||t.useXDR?new u.XDomainRequest:new u.XMLHttpRequest);var l,c=h.url=t.uri||t.url,d=h.method=t.method||"GET",p=t.body||t.data,m=h.headers=t.headers||{},g=!!t.sync,v=!1,y={body:void 0,headers:{},statusCode:0,method:d,url:c,rawRequest:h};if("json"in t&&!1!==t.json&&(v=!0,m.accept||m.Accept||(m.Accept="application/json"),"GET"!==d&&"HEAD"!==d&&(m["content-type"]||m["Content-Type"]||(m["Content-Type"]="application/json"),p=JSON.stringify(!0===t.json?p:t.json))),h.onreadystatechange=function(){4===h.readyState&&setTimeout(s,0)},h.onload=s,h.onerror=i,h.onprogress=function(){},h.onabort=function(){f=!0},h.ontimeout=i,h.open(d,c,!g,t.username,t.password),g||(h.withCredentials=!!t.withCredentials),!g&&t.timeout>0&&(l=setTimeout((function(){if(!f){f=!0,h.abort("timeout");var t=new Error("XMLHttpRequest timeout");t.code="ETIMEDOUT",i(t)}}),t.timeout)),h.setRequestHeader)for(a in m)m.hasOwnProperty(a)&&h.setRequestHeader(a,m[a]);else if(t.headers&&!function(t){for(var e in t)if(t.hasOwnProperty(e))return!1;return!0}(t.headers))throw new Error("Headers cannot be set on an XDomainRequest object");return"responseType"in t&&(h.responseType=t.responseType),"beforeSend"in t&&"function"==typeof t.beforeSend&&t.beforeSend(h),h.send(p||null),h}t.exports=u,t.exports.default=u,u.XMLHttpRequest=n.XMLHttpRequest||function(){},u.XDomainRequest="withCredentials"in new u.XMLHttpRequest?u.XMLHttpRequest:n.XDomainRequest,function(t,e){for(var r=0;r<t.length;r++)e(t[r])}(["get","put","post","patch","head","delete"],(function(t){u["delete"===t?"del":t]=function(e,r,n){return(r=a(e,r,n)).method=t.toUpperCase(),f(r)}}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
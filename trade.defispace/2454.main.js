(self.webpackChunkmy_swap=self.webpackChunkmy_swap||[]).push([[2454],{22454:(e,r,t)=>{"use strict";function n(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?n(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function u(e,r){return function(e){if(Array.isArray(e))return e}(e)||function(e,r){var t=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=t){var n,a,o=[],u=!0,i=!1;try{for(t=t.call(e);!(u=(n=t.next()).done)&&(o.push(n.value),!r||o.length!==r);u=!0);}catch(e){i=!0,a=e}finally{try{u||null==t.return||t.return()}finally{if(i)throw a}}return o}}(e,r)||c(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e){return function(e){if(Array.isArray(e))return s(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||c(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(e,r){if(e){if("string"==typeof e)return s(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?s(e,r):void 0}}function s(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,n=new Array(r);t<r;t++)n[t]=e[t];return n}function l(e,r,t,n,a,o,u){try{var i=e[o](u),c=i.value}catch(e){return void t(e)}i.done?r(c):Promise.resolve(c).then(n,a)}function p(e){return function(){var r=this,t=arguments;return new Promise((function(n,a){var o=e.apply(r,t);function u(e){l(o,n,a,u,i,"next",e)}function i(e){l(o,n,a,u,i,"throw",e)}u(void 0)}))}}function f(e){return h.apply(this,arguments)}function h(){return(h=p(regeneratorRuntime.mark((function e(r){var n,o,c,s,l,f,h,d,m,w,g,y,b,v,x,k,P,R,S,O,A,E,L,j,T,C,I,M,N,z,B,U,D,V,_,K,W,Z,G,H,$,q,F,J,Q,X,Y,ee,re,te,ne,ae;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return ae=function(){return(ae=p(regeneratorRuntime.mark((function e(r){var t,n,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(0!==T.size){e.next=3;break}return e.next=3,V();case 3:return t=u(i(T.entries())[0],2),n=t[0],a=t[1],e.abrupt("return",new Promise((function(e,t){y.ethereumSignMessage({path:a,message:f.stripHexPrefix(r.data),hex:!0}).then((function(r){if(r.success){r.payload.address!==f.toChecksumAddress(n)&&t(new Error("signature doesnt match the right address"));var a="0x".concat(r.payload.signature);e(a)}else t(new Error(r.payload&&r.payload.error||"There was an error signing a message"))}))})));case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)},ne=function(e){return ae.apply(this,arguments)},te=function(){return(te=p(regeneratorRuntime.mark((function e(r){var t,n,o,u,s,p,h,d,m,w;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(0!==T.size){e.next=3;break}return e.next=3,V();case 3:return n=i(T.values())[0],o=f.BN,u=f.toBuffer,s=new l({chain:E||A(k)}),(p=c.fromTxData(a(a({},r),{},{gasLimit:null!==(t=r.gas)&&void 0!==t?t:r.gasLimit}),{common:s,freeze:!1})).v=new o(u(k)),p.r=p.s=new o(u(0)),e.next=11,ee(n,r);case 11:if((h=e.sent).success){e.next=14;break}throw new Error(h.payload.error);case 14:return d=h.payload.v.toString(16),(m=parseInt(d,16))!==(w=2*k+35)&&(m&w)!==m&&(w+=1),d=w.toString(16),p.v=new o(u("0x".concat(d))),p.r=new o(u("".concat(h.payload.r))),p.s=new o(u("".concat(h.payload.s))),e.abrupt("return","0x".concat(p.serialize().toString("hex")));case 23:case"end":return e.stop()}}),e)})))).apply(this,arguments)},re=function(e){return te.apply(this,arguments)},ee=function(e,r){var t=r.nonce,n=r.gasPrice,a=r.gas,o=r.to,u=r.value,i=r.data;return y.ethereumSignTransaction({path:e,transaction:{nonce:t,gasPrice:n,gasLimit:a,to:o,value:u||"",data:i||"",chainId:k}})},Y=function(e){return new Promise((function(r,t){N.sendAsync({jsonrpc:"2.0",method:"eth_getBalance",params:[e,"latest"],id:42},(function(e,n){e&&t(e);var a=n&&n.result;r(null!=a?new O(a).toString(10):null)}))}))},X=function(e){return Promise.all(e.map((function(e){return new Promise(function(){var r=p(regeneratorRuntime.mark((function r(t){var n;return regeneratorRuntime.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,Y(e);case 2:n=r.sent,t({address:e,balance:n});case 4:case"end":return r.stop()}}),r)})));return function(e){return r.apply(this,arguments)}}())})))},Q=function(){return(Q=p(regeneratorRuntime.mark((function e(r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(C){e.next=2;break}return e.abrupt("return",[void 0]);case 2:if(!(T.size>0)||r){e.next=4;break}return e.abrupt("return",W());case 4:if(""===j&&(j=x),M){e.next=15;break}return e.prev=6,e.next=9,G();case 9:M=e.sent,e.next=15;break;case 12:throw e.prev=12,e.t0=e.catch(6),e.t0;case 15:return w(M,T.size).forEach((function(e){var r=e.dPath,t=e.address;T.set(t,r)})),e.abrupt("return",W());case 18:case"end":return e.stop()}}),e,null,[[6,12]])})))).apply(this,arguments)},J=function(e){return Q.apply(this,arguments)},F=function(){return(F=p(regeneratorRuntime.mark((function e(){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,J(!0);case 2:return r=e.sent,e.abrupt("return",X(r));case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)},q=function(){return F.apply(this,arguments)},$=function(){return C?W()[0]:void 0},H=function(){return(H=p(regeneratorRuntime.mark((function e(){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(j){e.next=2;break}throw new Error("a derivation path is needed to get the public key");case 2:return e.prev=2,e.next=5,y.getPublicKey({path:j,coin:"eth"});case 5:if((r=e.sent).success){e.next=8;break}throw new Error(r.payload.error);case 8:return M={publicKey:r.payload.publicKey,chainCode:r.payload.chainCode,path:r.payload.serializedPath},e.abrupt("return",M);case 12:throw e.prev=12,e.t0=e.catch(2),new Error("There was an error accessing your Trezor accounts.");case 15:case"end":return e.stop()}}),e,null,[[2,12]])})))).apply(this,arguments)},G=function(){return H.apply(this,arguments)},Z=function(e){var r=i(T.entries()),t=r.findIndex((function(r){return u(r,1)[0]===e}));r.unshift(r.splice(t,1)[0]),T=new Map(r)},W=function(){return Array.from(T.keys())},K=function(){return(K=p(regeneratorRuntime.mark((function e(r){var t,n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="Unable to derive address from path ".concat(r),e.prev=1,e.next=4,y.ethereumGetAddress({path:r,showOnTrezor:!1});case 4:if((n=e.sent).success){e.next=7;break}throw new Error(t);case 7:return e.abrupt("return",n.payload.address);case 10:throw e.prev=10,e.t0=e.catch(1),new Error(t);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})))).apply(this,arguments)},_=function(e){return K.apply(this,arguments)},V=function(){return C=!0,J()},D=function(){return I},U=function(){return(U=p(regeneratorRuntime.mark((function e(r,t){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(g(r)){e.next=2;break}return e.abrupt("return",!1);case 2:if(r!==j&&(T=new Map),!t){e.next=17;break}return e.prev=4,e.next=7,_(r);case 7:return n=e.sent,T.set(n,r),j=r,I=!0,e.abrupt("return",!0);case 14:throw e.prev=14,e.t0=e.catch(4),new Error("There was a problem deriving an address from path ".concat(r));case 17:return I=!1,j=r,e.abrupt("return",!0);case 20:case"end":return e.stop()}}),e,null,[[4,14]])})))).apply(this,arguments)},B=function(e,r){return U.apply(this,arguments)},z=function(){j="",T=new Map,C=!1,N.stop()},e.next=25,t.e(8875).then(t.t.bind(t,8875,23));case 25:return n=e.sent,e.next=28,Promise.all([t.e(8847),t.e(7359),t.e(7895),t.e(2751),t.e(2832),t.e(6052),t.e(2724)]).then(t.t.bind(t,66052,23));case 28:return o=e.sent,c=o.Transaction,e.next=32,Promise.all([t.e(8847),t.e(7359),t.e(7895),t.e(2751),t.e(2832),t.e(157)]).then(t.t.bind(t,2832,23));case 32:return s=e.sent,l=s.default,e.next=36,Promise.all([t.e(8847),t.e(7359),t.e(7895),t.e(2751),t.e(4098)]).then(t.t.bind(t,22751,23));case 36:return f=e.sent,e.next=39,Promise.all([t.e(8847),t.e(7359),t.e(7895),t.e(7994),t.e(3714),t.e(8090),t.e(9606),t.e(9835),t.e(9225),t.e(596)]).then(t.bind(t,49225));case 39:return h=e.sent,d=h.default,e.next=43,Promise.all([t.e(8847),t.e(7359),t.e(7895),t.e(2751),t.e(5835),t.e(9840),t.e(2898)]).then(t.bind(t,64415));case 43:return m=e.sent,w=m.generateAddresses,g=m.isValidPath,y=n.default,b=n.DEVICE_EVENT,v=n.DEVICE,x="m/44'/60'/0'/0",k=r.networkId,P=r.email,R=r.appUrl,S=r.rpcUrl,O=r.BigNumber,A=r.networkName,E=r.customNetwork,L=r.resetWalletState,j="",T=new Map,C=!1,I=!1,y.manifest({email:P,appUrl:R}),N=d({getAccounts:function(e){J().then((function(r){return e(null,r)})).catch((function(r){return e(r,null)}))},signTransaction:function(e,r){re(e).then((function(e){return r(null,e)})).catch((function(e){return r(e,null)}))},processMessage:function(e,r){ne(e).then((function(e){return r(null,e)})).catch((function(e){return r(e,null)}))},processPersonalMessage:function(e,r){ne(e).then((function(e){return r(null,e)})).catch((function(e){return r(e,null)}))},signMessage:function(e,r){ne(e).then((function(e){return r(null,e)})).catch((function(e){return r(e,null)}))},signPersonalMessage:function(e,r){ne(e).then((function(e){return r(null,e)})).catch((function(e){return r(e,null)}))},rpcUrl:S}),y.on(b,(function(e){e.type===v.DISCONNECT&&(N.stop(),L({disconnected:!0,walletName:"Trezor"}))})),N.setPath=B,N.dPath=j,N.enable=V,N.setPrimaryAccount=Z,N.getPrimaryAddress=$,N.getAccounts=J,N.getMoreAccounts=q,N.getBalance=Y,N.getBalances=X,N.send=N.sendAsync,N.disconnect=z,N.isCustomPath=D,e.abrupt("return",N);case 69:case"end":return e.stop()}}),e)})))).apply(this,arguments)}t.r(r),t.d(r,{default:()=>d});const d=function(e){var r,t=e.rpcUrl,n=e.networkId,a=e.email,o=e.appUrl,u=e.preferred,i=e.label,c=e.iconSrc,s=e.svg,l=e.customNetwork;return{name:i||"Trezor",svg:s||'\n\t<svg width="40px" height="40px" viewBox="0 0 114 166" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n\t\t<g id="Styles" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n\t\t\t<path d="M17,51.453125 L17,40 C17,17.90861 34.90861,-1.0658141e-14 57,-1.0658141e-14 C79.09139,-1.0658141e-14 97,17.90861 97,40 L97,51.453125 L113.736328,51.453125 L113.736328,139.193359 L57.5,166 L0,139.193359 L0,51.453125 L17,51.453125 Z M37,51.453125 L77,51.453125 L77,40 L76.9678398,40 C76.3750564,29.406335 67.6617997,21 57,21 C46.3382003,21 37.6249436,29.406335 37.0321602,40 L37,40 L37,51.453125 Z M23,72 L23,125 L56.8681641,140.966797 L91,125 L91,72 L23,72 Z" id="Trezor-logo" fill="currentColor"></path>\n\t\t</g>\n\t</svg>\n',iconSrc:c,wallet:(r=p(regeneratorRuntime.mark((function e(r){var u,i,c,s;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return u=r.BigNumber,i=r.networkName,c=r.resetWalletState,e.next=3,f({rpcUrl:t,networkId:n,email:a,appUrl:o,BigNumber:u,networkName:i,customNetwork:l,resetWalletState:c});case 3:return s=e.sent,e.abrupt("return",{provider:s,interface:{name:"Trezor",connect:s.enable,disconnect:s.disconnect,address:{get:function(){var e=p(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",s.getPrimaryAddress());case 1:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}()},network:{get:function(){var e=p(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",n);case 1:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}()},balance:{get:function(){var e=p(regeneratorRuntime.mark((function e(){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=s.getPrimaryAddress(),e.abrupt("return",r&&s.getBalance(r));case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}()}}});case 5:case"end":return e.stop()}}),e)}))),function(e){return r.apply(this,arguments)}),type:"hardware",desktop:!0,mobile:!0,osExclusions:["iOS"],preferred:u}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
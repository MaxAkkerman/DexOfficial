(self.webpackChunkmy_swap=self.webpackChunkmy_swap||[]).push([[8319],{76522:(e,n,t)=>{"use strict";t.d(n,{e:()=>r,m:()=>a});var r=function(e){var n=e.currentWallet,t=e.selectedWallet;return n?'\n    <p style="font-size: 0.889rem; font-family: inherit; margin: 0.889rem 0;">\n    We have detected that you already have\n    <b>'.concat(n,"</b>\n    installed. If you would prefer to use\n    <b>").concat(t,'</b>\n    instead, then click below to install.\n    </p>\n    <p style="font-size: 0.889rem; font-family: inherit; margin: 0.889rem 0;">\n    <b>Tip:</b>\n    If you already have ').concat(t,' installed, check your\n    browser extension settings to make sure that you have it enabled\n    and that you have disabled any other browser extension wallets.\n    <span\n      class="bn-onboard-clickable"\n      style="color: #4a90e2; font-size: 0.889rem; font-family: inherit;"\n      onclick="window.location.reload();">\n      Then refresh the page.\n    </span>\n    </p>\n    '):'\n    <p style="font-size: 0.889rem; font-family: inherit; margin: 0.889rem 0;">\n    You\'ll need to install <b>'.concat(t,'</b> to continue. Once you have it installed, go ahead and\n    <span\n    class="bn-onboard-clickable"\n      style="color: #4a90e2; font-size: 0.889rem; font-family: inherit;"\n      onclick={window.location.reload();}>\n      refresh the page.\n    </span>\n    ').concat("Opera"===t?'<br><br><i>Hint: If you already have Opera installed, make sure that your web3 wallet is <a style="color: #4a90e2; font-size: 0.889rem; font-family: inherit;" class="bn-onboard-clickable" href="https://help.opera.com/en/touch/crypto-wallet/" rel="noreferrer noopener" target="_blank">enabled</a></i>':"","\n    </p>\n    ")},a=function(e){var n=e.selectedWallet;return'\n  <p style="font-size: 0.889rem;">\n  Tap the button below to <b>Open '.concat(n,"</b>. Please access this site on ").concat(n,"'s in-app browser for a seamless experience.\n  </p>\n  ")}},88319:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});var r=t(76522);function a(e,n,t,r,a,o,i){try{var l=e[o](i),s=l.value}catch(e){return void t(e)}l.done?n(s):Promise.resolve(s).then(r,a)}const o=function(e){var n,t,o=e.preferred,i=e.label,l=e.iconSrc;return{name:i||"Status",iconSrc:l,iconSrcSet:l,svg:e.svg||'\n<svg width="40" height="40" viewBox="0 0 109 109" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path fill-rule="evenodd" clip-rule="evenodd" d="M54.7 0C24.7 0 0.400024 24.3 0.400024 54.3C0.400024 84.3 24.7 108.6 54.7 108.6C84.7 108.6 109 84.3 109 54.3C108.9 24.3 84.6 0 54.7 0ZM47.3 77.6C40.4 78 33.4 74 33.1 67.5C32.7 61.1 37.9 56.8 46.5 56.4C49.7 56.2 52.3 56.5 54.8 56.7C57.4 57 60 57.2 63.1 57C64.6 56.9 66.2 56.7 67.8 56.4C67 67.4 58.6 77 47.3 77.6ZM65.3 52.3C61.9 52.5 59.2 52.2 56.5 51.9C53.8 51.6 51 51.3 47.7 51.5C46.1 51.6 44.4 51.8 42.8 52.2C43.8 40.2 52.6 29.7 64.5 29.1C71.8 28.7 79.1 33.1 79.5 40.2C79.9 47.2 74.4 51.8 65.3 52.3Z" fill="#4360DF"/>\n</svg>\n',wallet:(n=regeneratorRuntime.mark((function e(n){var t,r,a,o,i,l;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.getProviderName,r=n.getAddress,a=n.getBalance,o=n.getNetwork,i=window.ethereum,l=!1,e.abrupt("return",{provider:i,interface:i&&"Status"===t(i)?{connect:function(){return i.request({method:"eth_requestAccounts"}).then((function(){return l=!0}))},address:{get:function(){return l?r(i):Promise.resolve(null)}},balance:{get:function(){return l?a(i):Promise.resolve(null)}},network:{get:function(){return o(i)}},name:"Status"}:null});case 4:case"end":return e.stop()}}),e)})),t=function(){var e=this,t=arguments;return new Promise((function(r,o){var i=n.apply(e,t);function l(e){a(i,r,o,l,s,"next",e)}function s(e){a(i,r,o,l,s,"throw",e)}l(void 0)}))},function(e){return t.apply(this,arguments)}),type:"injected",link:"https://status.im/",installMessage:r.e,mobile:!0,preferred:o}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,